
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 14 fc 01 c0       	mov    eax,0xc001fc14
c0000025:	3d 14 fc 01 c0       	cmp    eax,0xc001fc14
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 14 fc 01 c0       	push   0xc001fc14
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 14 fc 01 c0       	mov    eax,0xc001fc14
c0000051:	2d 14 fc 01 c0       	sub    eax,0xc001fc14
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 14 fc 01 c0       	push   0xc001fc14
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 40 fe 01 c0 00 	cmp    BYTE PTR ds:0xc001fe40,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb e8 cd 01 c0       	mov    ebx,0xc001cde8
c0000097:	81 eb e4 cd 01 c0    	sub    ebx,0xc001cde4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e4 cd 01 c0       	mov    esi,0xc001cde4
c00000a6:	a1 44 fe 01 c0       	mov    eax,ds:0xc001fe44
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 44 fe 01 c0       	mov    ds:0xc001fe44,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 44 fe 01 c0       	mov    eax,ds:0xc001fe44
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 14 fc 01 c0       	push   0xc001fc14
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 40 fe 01 c0 01 	mov    BYTE PTR ds:0xc001fe40,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 48 fe 01 c0       	push   0xc001fe48
c0000108:	68 14 fc 01 c0       	push   0xc001fc14
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 4c 2d 01 00       	call   c0012ffc <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 10 a0 00 00       	call   c000a2d8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 2a 2d 01 00       	call   c0012ffc <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 c3 32 01 00       	call   c00135b4 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 12 39 01 00       	call   c0013c0c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 40 0c 02 c0 	lgdtd  ds:0xc0020c40
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 8c fd 00 00       	jmp    c001010e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 60 fe 01 c0       	mov    ds:0xc001fe60,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 60 fe 01 c0    	mov    DWORD PTR ds:0xc001fe60,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 60 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fe60
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 00 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3200],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 00 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3200],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 00 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3200],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 00 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3200],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 00 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3200],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 80 fe 01 c0    	mov    ecx,DWORD PTR ds:0xc001fe80
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 80 fe 01 c0    	mov    DWORD PTR ds:0xc001fe80,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 84 fe 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe017c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 84 fe 01 c0 	mov    DWORD PTR [eax*4-0x3ffe017c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 80 fe 01 c0    	mov    DWORD PTR ds:0xc001fe80,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 ac fe 01 c0    	cmp    DWORD PTR ds:0xc001feac,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d bc fe 01 c0    	mov    ecx,DWORD PTR ds:0xc001febc
c0000d3d:	c7 42 0c b4 fe 01 c0 	mov    DWORD PTR [edx+0xc],0xc001feb4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 bc fe 01 c0    	mov    DWORD PTR ds:0xc001febc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 ac fe 01 c0    	mov    DWORD PTR ds:0xc001feac,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 80 fe 01 c0 02 	test   BYTE PTR ds:0xc001fe80,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 80 fe 01 c0    	mov    edi,DWORD PTR ds:0xc001fe80
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 84 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe017c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 84 fe 01 c0 	mov    DWORD PTR [edx*4-0x3ffe017c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 b4 fe 01 c0 	lea    edx,[eax*8-0x3ffe014c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d c0 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fec0
c00010bf:	81 fb b4 fe 01 c0    	cmp    ebx,0xc001feb4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d b4 fe 01 c0       	cmp    eax,0xc001feb4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d b0 fe 01 c0    	cmp    DWORD PTR ds:0xc001feb0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 bc fe 01 c0       	mov    ds:0xc001febc,eax
c00010fb:	a3 c0 fe 01 c0       	mov    ds:0xc001fec0,eax
c0001100:	a3 b0 fe 01 c0       	mov    ds:0xc001feb0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 b4 fe 01 c0 	mov    DWORD PTR [eax+0x8],0xc001feb4
c000110e:	c7 40 0c b4 fe 01 c0 	mov    DWORD PTR [eax+0xc],0xc001feb4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 c0 fe 01 c0       	mov    ds:0xc001fec0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 b4 fe 01 c0 	mov    DWORD PTR [eax+0x8],0xc001feb4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 78 fe 01 c0 	lea    ebp,[edx*4-0x3ffe0188]
c000115f:	8b 14 95 80 fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0180]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 80 fe 01 c0 	lea    ecx,[edx*4-0x3ffe0180]
c000117a:	8b 14 95 80 fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0180]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd b4 01 02 c0 	or     DWORD PTR [edi*4-0x3ffdfe4c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 b4 fe 01 c0 	lea    eax,[eax*8-0x3ffe014c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d bc fe 01 c0    	mov    DWORD PTR ds:0xc001febc,ecx
c0001234:	89 0d c0 fe 01 c0    	mov    DWORD PTR ds:0xc001fec0,ecx
c000123a:	c7 41 08 b4 fe 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001feb4
c0001241:	c7 41 0c b4 fe 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001feb4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd ac fe 01 c0 	lea    edx,[ecx*8-0x3ffe0154]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d b4 01 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfe4c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d b4 01 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfe4c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 ac fe 01 c0 	lea    edx,[eax*4-0x3ffe0154]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d b4 01 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfe4c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d bc fe 01 c0    	mov    DWORD PTR ds:0xc001febc,edi
c0001307:	89 3d c0 fe 01 c0    	mov    DWORD PTR ds:0xc001fec0,edi
c000130d:	c7 47 08 b4 fe 01 c0 	mov    DWORD PTR [edi+0x8],0xc001feb4
c0001314:	c7 47 0c b4 fe 01 c0 	mov    DWORD PTR [edi+0xc],0xc001feb4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d b0 fe 01 c0    	mov    DWORD PTR ds:0xc001feb0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 ac fe 01 c0       	mov    eax,ds:0xc001feac
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d ac fe 01 c0    	mov    DWORD PTR ds:0xc001feac,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 80 fe 01 c0       	mov    edx,0xc001fe80
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 80 fe 01 c0 00 	cmp    DWORD PTR ds:0xc001fe80,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d d4 01 02 c0    	mov    ebx,DWORD PTR ds:0xc00201d4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 d4 01 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00201d4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d d4 01 02 c0    	mov    DWORD PTR ds:0xc00201d4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 ac fe 01 c0    	cmp    DWORD PTR ds:0xc001feac,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d ac fe 01 c0    	mov    DWORD PTR ds:0xc001feac,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 80 fe 01 c0 00 	cmp    DWORD PTR ds:0xc001fe80,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 dc 01 02 c0    	push   DWORD PTR ds:0xc00201dc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 80 fe 01 c0 00 	cmp    DWORD PTR ds:0xc001fe80,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 dc 01 02 c0       	mov    eax,ds:0xc00201dc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d ac fe 01 c0 00 	cmp    DWORD PTR ds:0xc001feac,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 ac fe 01 c0       	mov    eax,ds:0xc001feac
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 84 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe017c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 b4 fe 01 c0       	mov    eax,0xc001feb4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d ac 01 02 c0       	cmp    eax,0xc00201ac
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 e8 01 02 c0       	mov    eax,ds:0xc00201e8
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 d0 01 02 c0    	mov    esi,DWORD PTR ds:0xc00201d0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 e4 01 02 c0    	mov    esi,DWORD PTR ds:0xc00201e4
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 f4 01 02 c0    	mov    esi,DWORD PTR ds:0xc00201f4
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 04 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe30fc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 80 fe 01 c0       	mov    eax,ds:0xc001fe80
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 80 fe 01 c0       	mov    ds:0xc001fe80,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d c4 01 02 c0    	mov    DWORD PTR ds:0xc00201c4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d c8 01 02 c0    	mov    DWORD PTR ds:0xc00201c8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d cc 01 02 c0    	mov    DWORD PTR ds:0xc00201cc,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 d4 01 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00201d4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 40 40 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbfc0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 b2 52 01 00       	jmp    c0016f9c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 40 40 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbfc0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 e0 52 01 00       	jmp    c0016fe0 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 40 40 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbfc0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 05 53 01 00       	jmp    c0017024 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 60 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2fa0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 60 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2fa0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 28 f1 01 c0       	mov    edx,0xc001f128
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 1c cf 01 c0       	mov    edx,0xc001cf1c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 20 02 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfde0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 00 02 02 c0    	mov    ax,ds:0xc0020200
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 00 02 02 c0    	mov    ds:0xc0020200,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 22 cf 01 c0       	mov    eax,0xc001cf22
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad e0 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3020]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 2b cf 01 c0       	mov    eax,0xc001cf2b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 60 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2fa0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 20 02 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfde0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 20 02 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfde0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 b0 cf 01 c0       	mov    eax,0xc001cfb0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 20 02 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfde0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb a0 cf 01 c0       	mov    ebx,0xc001cfa0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 80 cf 01 c0       	mov    edx,0xc001cf80
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 90 cf 01 c0       	mov    edx,0xc001cf90
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 32 cf 01 c0       	mov    edx,0xc001cf32
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 3e cf 01 c0       	mov    edx,0xc001cf3e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 52 cf 01 c0       	mov    edx,0xc001cf52
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 80 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d380
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 80 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d380
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 80 d1 01 c0       	mov    eax,0xc001d180
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 c0 d0 01 c0       	mov    eax,0xc001d0c0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 80 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f80]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 a0 fd 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0260]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 00 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0200]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 50 03 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdfcb0],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 e0 fd 01 c0 	movsx  eax,BYTE PTR ds:0xc001fde0
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 f9 18 01 00       	call   c0017878 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 00 fe 01 c0       	mov    eax,0xc001fe00
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 a0 fd 01 c0       	mov    eax,0xc001fda0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 34 0c 02 c0 00 	cmp    DWORD PTR ds:0xc0020c34,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 00 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0200]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 34 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c34
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 80 d4 01 c0       	push   0xc001d480
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 00 0c 02 c0       	mov    ecx,0xc0020c00
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf c0 02 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdfd40],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 c0 02 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdfd40],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 c4 02 02 c0    	mov    DWORD PTR [edi-0x3ffdfd3c],esi
c000634e:	89 87 c0 02 02 c0    	mov    DWORD PTR [edi-0x3ffdfd40],eax
c0006354:	c7 87 c8 02 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfd38],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 50 03 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfcb0],0x0
c0006370:	89 87 cc 02 02 c0    	mov    DWORD PTR [edi-0x3ffdfd34],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 c0 02 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfd40],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd c0 02 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfd40],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 50 03 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdfcb0]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 c8 02 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfd38]
c00063e9:	8b 8d cc 02 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdfd34]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 c0 02 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdfd40]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 a0 fd 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0260]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 c8 02 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfd38]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d c8 02 02 c0    	add    DWORD PTR [ebp-0x3ffdfd38],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d c0 02 02 c0    	lea    ecx,[ebp-0x3ffdfd40]
c00064e1:	83 bd c0 02 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfd40],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 cc 02 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdfd34]
c000651f:	05 c0 02 02 c0       	add    eax,0xc00202c0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 c8 02 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfd38]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb c0 02 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfd40],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 50 03 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfcb0],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 c8 02 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdfd38]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba c0 02 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfd40],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 50 03 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfcb0],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 cc 02 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfd34]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 c0 02 02 c0    	lea    esi,[eax-0x3ffdfd40]
c00065e4:	83 b8 c0 02 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdfd40],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 00 fe 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0200]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 c8 02 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdfd38]
c0006653:	81 c2 c0 02 02 c0    	add    edx,0xc00202c0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 00 fe 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0200]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 d8 02 02 c0    	lea    ebp,[eax-0x3ffdfd28]
c00066b9:	83 3d 34 0c 02 c0 00 	cmp    DWORD PTR ds:0xc0020c34,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 d8 02 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdfd28],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 80 d4 01 c0       	push   0xc001d480
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 d3 02 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdfd2d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 d0 02 02 c0    	mov    DWORD PTR [ecx-0x3ffdfd30],eax
c000678f:	89 91 d4 02 02 c0    	mov    DWORD PTR [ecx-0x3ffdfd2c],edx
c0006795:	81 c1 c0 02 02 c0    	add    ecx,0xc00202c0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 d0 02 02 c0       	add    eax,0xc00202d0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 e0 fd 01 c0       	mov    ds:0xc001fde0,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 34 0c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020c34,0x0
c00067df:	a1 2c 0c 02 c0       	mov    eax,ds:0xc0020c2c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 00 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0200]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 83 d4 01 c0       	push   0xc001d483
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 00 fe 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0200]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 34 0c 02 c0       	mov    ds:0xc0020c34,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 34 0c 02 c0 00 	cmp    DWORD PTR ds:0xc0020c34,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 2c 0c 02 c0       	mov    eax,ds:0xc0020c2c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 00 fe 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0200]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 8a d4 01 c0       	push   0xc001d48a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 00 fe 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0200]
c000687d:	bf 00 0c 02 c0       	mov    edi,0xc0020c00
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 02 0c 02 c0       	mov    eax,0xc0020c02
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 28 0c 02 c0       	mov    ds:0xc0020c28,eax
c00068a0:	b8 0a 0c 02 c0       	mov    eax,0xc0020c0a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 24 0c 02 c0       	mov    ds:0xc0020c24,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 c0 02 02 c0       	push   0xc00202c0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 c0 02 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc00202c0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 30 0c 02 c0       	mov    ds:0xc0020c30,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 a0 02 02 c0       	mov    ds:0xc00202a0,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 00 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0200],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d a0 fd 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0260],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 00 fe 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0200]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d a0 fd 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0260]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 30 0c 02 c0       	mov    eax,ds:0xc0020c30
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 a0 02 02 c0       	mov    eax,ds:0xc00202a0
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 a0 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202a0,0x0
c00069a9:	c7 05 30 0c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020c30,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 5e 50 00 00       	call   c000ba36 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 91 d4 01 c0       	push   0xc001d491
c0006a09:	e8 9d 90 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 e8 07 00 00 	mov    DWORD PTR [esp],0x7e8
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0006a28:	50                   	push   eax
c0006a29:	68 aa d4 01 c0       	push   0xc001d4aa
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 06 c9 00 00       	call   c001333c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 b9 cb 00 00       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 10 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f10
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 58 40 01 c0       	push   0xc0014058
c0006a5a:	52                   	push   edx
c0006a5b:	e8 a4 cb 00 00       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 c8 3e 02 c0       	mov    ds:0xc0023ec8,eax
c0006a68:	68 a8 d5 01 c0       	push   0xc001d5a8
c0006a6d:	c6 05 3d 0c 02 c0 01 	mov    BYTE PTR ds:0xc0020c3d,0x1
c0006a74:	e8 32 90 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006a79:	e8 b9 d9 00 00       	call   c0014437 <Vm::initialise8086()>
c0006a7e:	e8 f7 3d 00 00       	call   c000a87a <Fs::initVFS()>
c0006a83:	c7 04 24 b7 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4b7
c0006a8a:	e8 1c 90 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006a8f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 a8 d5 01 c0       	push   0xc001d5a8
c0006aae:	e8 f8 8f 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006ab3:	e8 ce 94 00 00       	call   c000ff86 <Krnl::loadSystemEnv()>
c0006ab8:	e8 2b 97 00 00       	call   c00101e8 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 d1 d4 01 c0       	push   0xc001d4d1
c0006ac7:	68 da d4 01 c0       	push   0xc001d4da
c0006acc:	e8 11 ae 00 00       	call   c00118e2 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 af 48 00 00       	call   c000b388 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 cc d5 01 c0 	mov    DWORD PTR [esp],0xc001d5cc
c0006ae0:	e8 c6 8f 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 3d 4f 00 00       	call   c000ba34 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 e2 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4e2
c0006afe:	e8 a8 8f 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 38 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c38
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 f3 d4 01 c0       	push   0xc001d4f3
c0006b12:	e8 52 c2 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 7a c4 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 f3 ce 00 00       	call   c0013a20 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 0f d5 01 c0       	push   0xc001d50f
c0006b41:	50                   	push   eax
c0006b42:	e8 69 4f 00 00       	call   c000bab0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 18 d6 01 c0       	mov    edx,0xc001d618
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 51 0c 02 c0 04 	test   BYTE PTR ds:0xc0020c51,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 b5 51 01 00       	call   c001bde6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 6c 83 00 00       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 45 83 00 00       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 23 83 00 00       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 01 83 00 00       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 50 0c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020c50,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 0f 82 00 00       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 ea 81 00 00       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 1f 50 01 00       	call   c001bda0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 7c 4d 01 00       	call   c001bb20 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 06 82 00 00       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 18 d5 01 c0       	push   0xc001d518
c0006e14:	e8 0a 93 00 00       	call   c0010123 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 1e d5 01 c0       	push   0xc001d51e
c0006e4c:	e8 d2 92 00 00       	call   c0010123 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 b7 7b 00 00       	jmp    c000ea50 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 50 0c 02 c0 04 	test   BYTE PTR ds:0xc0020c50,0x4
c0006ee8:	68 24 d5 01 c0       	push   0xc001d524
c0006eed:	0f 94 05 80 f8 01 c0 	sete   BYTE PTR ds:0xc001f880
c0006ef4:	e8 b2 8b 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 d9 76 00 00       	call   c000e5e8 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 fa 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 3c d5 01 c0 	mov    DWORD PTR [esp],0xc001d53c
c0006f37:	e8 6f 8b 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 3e 81 00 00       	call   c000f090 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 b7 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ec d5 01 c0       	push   0xc001d5ec
c0006f7e:	e8 28 8b 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006f83:	e8 e6 e5 00 00       	call   c001556e <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 56 d5 01 c0 	mov    DWORD PTR [esp],0xc001d556
c0006f8f:	e8 17 8b 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 7c c7 00 00       	call   c001371c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 71 d5 01 c0       	push   0xc001d571
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 e7 34 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 82 d5 01 c0       	push   0xc001d582
c000700e:	e8 10 91 00 00       	call   c0010123 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 8f d5 01 c0       	push   0xc001d58f
c0007023:	e8 fb 90 00 00       	call   c0010123 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 99 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d599
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 e4 90 00 00       	jmp    c0010123 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 42 0c 02 c0       	mov    ds:0xc0020c42,eax
c00070cf:	66 89 15 40 0c 02 c0 	mov    WORD PTR ds:0xc0020c40,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007217:	48                   	dec    eax
c0007218:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 23 e0 00 00       	call   c0015248 <HalSystemIdle()>
c0007225:	e8 78 51 01 00       	call   c001c3a2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 48 0c 02 c0 ff 07 	mov    WORD PTR ds:0xc0020c48,0x7ff
c000731d:	a3 4a 0c 02 c0       	mov    ds:0xc0020c4a,eax
c0007322:	0f 01 1d 48 0c 02 c0 	lidtd  ds:0xc0020c48
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 b0 bb 01 c0       	push   0xc001bbb0
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 c0 bb 01 c0       	push   0xc001bbc0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 ca bb 01 c0       	push   0xc001bbca
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 d4 bb 01 c0       	push   0xc001bbd4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 de bb 01 c0       	push   0xc001bbde
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 e8 bb 01 c0       	push   0xc001bbe8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 f2 bb 01 c0       	push   0xc001bbf2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 fc bb 01 c0       	push   0xc001bbfc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 06 bc 01 c0       	push   0xc001bc06
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 0e bc 01 c0       	push   0xc001bc0e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 18 bc 01 c0       	push   0xc001bc18
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 20 bc 01 c0       	push   0xc001bc20
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 28 bc 01 c0       	push   0xc001bc28
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 30 bc 01 c0       	push   0xc001bc30
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 38 bc 01 c0       	push   0xc001bc38
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 40 bc 01 c0       	push   0xc001bc40
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 4a bc 01 c0       	push   0xc001bc4a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 54 bc 01 c0       	push   0xc001bc54
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 5e bc 01 c0       	push   0xc001bc5e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 f8 bc 01 c0       	push   0xc001bcf8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 ff bc 01 c0       	push   0xc001bcff
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 ea bc 01 c0       	push   0xc001bcea
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 f1 bc 01 c0       	push   0xc001bcf1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 68 bc 01 c0       	push   0xc001bc68
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 72 bc 01 c0       	push   0xc001bc72
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 7c bc 01 c0       	push   0xc001bc7c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 86 bc 01 c0       	push   0xc001bc86
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 90 bc 01 c0       	push   0xc001bc90
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 9a bc 01 c0       	push   0xc001bc9a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 a4 bc 01 c0       	push   0xc001bca4
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 ae bc 01 c0       	push   0xc001bcae
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 b8 bc 01 c0       	push   0xc001bcb8
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 c2 bc 01 c0       	push   0xc001bcc2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 cc bc 01 c0       	push   0xc001bccc
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 d6 bc 01 c0       	push   0xc001bcd6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 e0 bc 01 c0       	push   0xc001bce0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 36 bd 01 c0       	push   0xc001bd36
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 40 bd 01 c0       	push   0xc001bd40
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 4a bd 01 c0       	push   0xc001bd4a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 54 bd 01 c0       	push   0xc001bd54
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 5e bd 01 c0       	push   0xc001bd5e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 68 bd 01 c0       	push   0xc001bd68
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 72 bd 01 c0       	push   0xc001bd72
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 7c bd 01 c0       	push   0xc001bd7c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c0007614:	e8 05 24 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 06 bc 01 c0       	push   0xc001bc06
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 78 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f878
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 30 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d30
c00076c2:	8b 3d 78 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f878
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 40 22 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 78 f8 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f878,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 78 f8 01 c0       	mov    eax,ds:0xc001f878
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 3c d6 01 c0       	push   0xc001d63c
c000770e:	e8 c5 2d 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 6c d6 01 c0       	push   0xc001d66c
c000772d:	e8 f1 89 00 00       	call   c0010123 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 71 d6 01 c0       	push   0xc001d671
c0007743:	e8 db 89 00 00       	call   c0010123 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007763:	48                   	dec    eax
c0007764:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c0007781:	e8 98 22 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 50 0c 02 c0       	mov    ds:0xc0020c50,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 78 d6 01 c0       	push   0xc001d678
c0007862:	e8 71 2c 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 d1 81 00 00       	call   c000fa3d <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d 30 0d 02 c0    	mov    DWORD PTR ds:0xc0020d30,ebx
c0007899:	e8 9c 4a 01 00       	call   c001c33a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 38 0c 02 c0    	mov    DWORD PTR ds:0xc0020c38,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 e7 1e 00 00       	call   c00097b6 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 6c 0c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf394],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 90 d6 01 c0       	push   0xc001d690
c000792c:	e8 f2 87 00 00       	call   c0010123 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 6c 0c 02 c0    	lea    edx,[ebp-0x3ffdf394]
c000796e:	8d 84 05 6d 0c 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf393]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 64 0c 02 c0    	add    DWORD PTR ds:0xc0020c64,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 90 d6 01 c0       	push   0xc001d690
c0007993:	e8 8b 87 00 00       	call   c0010123 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 64 0c 02 c0    	sub    DWORD PTR ds:0xc0020c64,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 6c 0c 02 c0       	add    eax,0xc0020c6c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 7c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f87c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 7c f8 01 c0    	add    eax,DWORD PTR ds:0xc001f87c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 7c f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f87c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 64 0c 02 c0    	dec    DWORD PTR ds:0xc0020c64
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 35 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d735
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 a0 86 00 00       	jmp    c0010123 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 58 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c58
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d 58 0c 02 c0    	mov    DWORD PTR ds:0xc0020c58,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 58 0c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020c58,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 7c 0c 02 c0 01 	xor    BYTE PTR ds:0xc0020c7c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 08 27 00 00       	call   c000a1f8 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 b8 d6 01 c0       	push   0xc001d6b8
c0007aff:	e8 1f 86 00 00       	call   c0010123 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d 58 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c58
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 58 0c 02 c0       	mov    eax,ds:0xc0020c58
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 64 0c 02 c0    	inc    DWORD PTR ds:0xc0020c64
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007b99:	48                   	dec    eax
c0007b9a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d 5c 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c5c,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d 5c 0c 02 c0    	mov    DWORD PTR ds:0xc0020c5c,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 6c 0c 02 c0       	push   0xc0020c6c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 4b d7 01 c0       	push   0xc001d74b
c0007c18:	e8 bb 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 e8 d6 01 c0       	push   0xc001d6e8
c0007ca4:	e8 2f 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 0c d7 01 c0       	push   0xc001d70c
c0007d40:	e8 93 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 68 0c 02 c0    	add    eax,DWORD PTR ds:0xc0020c68
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 68 0c 02 c0       	mov    ds:0xc0020c68,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 71 d7 01 c0       	push   0xc001d771
c0007d76:	e8 5d 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 63 d7 01 c0       	push   0xc001d763
c0007de5:	e8 39 83 00 00       	call   c0010123 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 68 0c 02 c0 02 	add    DWORD PTR ds:0xc0020c68,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 68 0c 02 c0       	mov    eax,ds:0xc0020c68
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 68 0c 02 c0       	mov    ds:0xc0020c68,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 68 0c 02 c0       	mov    eax,ds:0xc0020c68
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 68 0c 02 c0       	mov    ds:0xc0020c68,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 68 0c 02 c0       	mov    eax,ds:0xc0020c68
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 68 0c 02 c0       	mov    ds:0xc0020c68,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba d0 d7 01 c0       	mov    edx,0xc001d7d0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 e8 24 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 8d d7 01 c0       	push   0xc001d78d
c0007fa7:	e8 77 81 00 00       	call   c0010123 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0007ff0:	e8 2f b8 00 00       	call   c0013824 <schedule()>
c0007ff5:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 93 41 01 00       	call   c001c220 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 aa d7 01 c0       	push   0xc001d7aa
c00080a2:	e8 7c 80 00 00       	call   c0010123 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba d0 d7 01 c0       	mov    edx,0xc001d7d0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 64 d8 01 c0       	mov    edx,0xc001d864
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 71 22 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 ac 45 00 00       	call   c000c738 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 4e e2 00 00       	call   c0016400 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d a0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0760]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d a0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0760]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 58 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08a8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 30 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08d0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 84 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c84,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 71 df 00 00       	call   c001628c <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 84 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c84,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 cc df 00 00       	jmp    c0016394 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 e4 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7e4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 0f 7d 00 00       	jmp    c0010123 <KePanic(char const*)>
c0008414:	a1 84 0c 02 c0       	mov    eax,ds:0xc0020c84
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 84 0c 02 c0    	mov    DWORD PTR ds:0xc0020c84,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 c0 2d 00 00       	jmp    c000b32f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be f2 d7 01 c0       	mov    esi,0xc001d7f2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 84 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c84,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 de da 00 00       	call   c0016394 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 64 d8 01 c0       	mov    edx,0xc001d864
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 30 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d30
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 6a 0f 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 03 d8 01 c0       	push   0xc001d803
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 09 d8 01 c0       	push   0xc001d809
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 0f d8 01 c0       	push   0xc001d80f
c0008b78:	e8 a6 75 00 00       	call   c0010123 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 2c d9 01 c0       	mov    edx,0xc001d92c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 e0 f8 01 c0       	mov    eax,ds:0xc001f8e0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 e0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 18 0d 02 c0       	push   0xc0020d18
c0008e80:	e8 83 35 01 00       	call   c001c408 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 14 0d 02 c0       	mov    al,ds:0xc0020d14
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 14 0d 02 c0 01 	mov    BYTE PTR ds:0xc0020d14,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 0c 0d 02 c0    	mov    DWORD PTR ds:0xc0020d0c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 10 0d 02 c0    	mov    DWORD PTR ds:0xc0020d10,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 04 0d 02 c0    	mov    DWORD PTR ds:0xc0020d04,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 08 0d 02 c0    	mov    DWORD PTR ds:0xc0020d08,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 e0 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf320],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 a0 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf360],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 48 d9 01 c0       	mov    edx,0xc001d948
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 2c d9 01 c0       	mov    edx,0xc001d92c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 18 0d 02 c0       	push   0xc0020d18
c0009050:	e8 87 34 01 00       	call   c001c4dc <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 18 0d 02 c0       	push   0xc0020d18
c0009064:	e8 7b 34 01 00       	call   c001c4e4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 18 0d 02 c0       	push   0xc0020d18
c0009082:	e8 81 33 01 00       	call   c001c408 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 04 d9 01 c0       	push   0xc001d904
c00090a9:	e8 75 70 00 00       	call   c0010123 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 06 13 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 48 d9 01 c0       	mov    edx,0xc001d948
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 ba 12 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 18 0d 02 c0       	push   0xc0020d18
c000914d:	e8 8a 33 01 00       	call   c001c4dc <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 18 0d 02 c0       	push   0xc0020d18
c000916a:	e8 17 34 01 00       	call   c001c586 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 0c 0d 02 c0       	mov    eax,ds:0xc0020d0c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 10 0d 02 c0       	mov    eax,ds:0xc0020d10
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 08 0d 02 c0       	mov    eax,ds:0xc0020d08
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 04 0d 02 c0       	mov    eax,ds:0xc0020d04
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 e0 0c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf320]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d a0 0c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf360]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 18 0d 02 c0       	push   0xc0020d18
c00091ec:	e8 d5 31 01 00       	call   c001c3c6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 74 f8 01 c0       	push   0xc001f874
c00091fc:	68 18 0d 02 c0       	push   0xc0020d18
c0009201:	68 c4 c3 01 c0       	push   0xc001c3c4
c0009206:	e8 87 11 00 00       	call   c000a392 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 e8 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8e8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d e8 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8e8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d e4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8e4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 e4 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f8e4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d e4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 5c d9 01 c0       	push   0xc001d95c
c00092ff:	e8 1f 6e 00 00       	call   c0010123 <KePanic(char const*)>
c0009304:	8b 3d e4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8e4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d e4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 e4 f8 01 c0       	mov    eax,ds:0xc001f8e4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 e4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8e4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 e4 f8 01 c0       	mov    ds:0xc001f8e4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 2c 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d2c
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 ec f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f8ec
c00093bf:	03 05 f4 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8f4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d ec f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8ec
c00093d5:	a1 f0 f8 01 c0       	mov    eax,ds:0xc001f8f0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d f0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8f0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 2c 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d2c
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 c3 da 01 c0       	push   0xc001dac3
c0009419:	e8 05 6d 00 00       	call   c0010123 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 a8 31 02 c0       	mov    eax,ds:0xc00231a8
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 da da 01 c0       	push   0xc001dada
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d f0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8f0,ebx
c00094b7:	c6 05 f8 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f8f8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 f4 f8 01 c0       	mov    ds:0xc001f8f4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 ec f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f8ec,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 2c 0d 02 c0       	mov    ds:0xc0020d2c,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 f0 f8 01 c0       	mov    eax,ds:0xc001f8f0
c00094e9:	f7 35 ec f8 01 c0    	div    DWORD PTR ds:0xc001f8ec
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 30 0d 02 c0       	mov    ds:0xc0020d30,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 7c d9 01 c0       	push   0xc001d97c
c000955d:	e8 c1 6b 00 00       	call   c0010123 <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 30 0d 02 c0       	mov    eax,ds:0xc0020d30
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 f1 da 01 c0       	push   0xc001daf1
c0009624:	e8 fa 6a 00 00       	call   c0010123 <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d 30 0d 02 c0    	mov    edi,DWORD PTR ds:0xc0020d30
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 a0 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d9a0
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 a6 6a 00 00       	jmp    c0010123 <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 0d db 01 c0       	push   0xc001db0d
c000968b:	e8 93 6a 00 00       	call   c0010123 <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 29 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db29
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 4a 6a 00 00       	jmp    c0010123 <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 c4 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9c4
c00096f9:	e9 da 0d 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009720:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009728:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000972c:	85 db                	test   ebx,ebx
c000972e:	7e 22                	jle    c0009752 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009730:	c1 e3 0c             	shl    ebx,0xc
c0009733:	01 f3                	add    ebx,esi
c0009735:	56                   	push   esi
c0009736:	81 c6 00 10 00 00    	add    esi,0x1000
c000973c:	55                   	push   ebp
c000973d:	e8 54 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009742:	5a                   	pop    edx
c0009743:	59                   	pop    ecx
c0009744:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009746:	21 f9                	and    ecx,edi
c0009748:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000974c:	39 f3                	cmp    ebx,esi
c000974e:	89 08                	mov    DWORD PTR [eax],ecx
c0009750:	75 e3                	jne    c0009735 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	5d                   	pop    ebp
c0009756:	c3                   	ret    
c0009757:	90                   	nop

c0009758 <VAS::setToWriteCombining(unsigned long, int)>:
c0009758:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000975d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009763:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000976a:	75 01                	jne    c000976d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000976c:	c3                   	ret    
c000976d:	68 80 00 00 00       	push   0x80
c0009772:	6a ff                	push   0xffffffff
c0009774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009778:	50                   	push   eax
c0009779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000977d:	52                   	push   edx
c000977e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009782:	51                   	push   ecx
c0009783:	e8 90 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c0009788:	83 c4 14             	add    esp,0x14
c000978b:	c3                   	ret    

c000978c <VAS::mapOtherVASIn(bool, VAS*)>:
c000978c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009795:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000979c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000979f:	19 c0                	sbb    eax,eax
c00097a1:	83 ca 03             	or     edx,0x3
c00097a4:	83 e0 fc             	and    eax,0xfffffffc
c00097a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ae:	0f 20 d8             	mov    eax,cr3
c00097b1:	0f 22 d8             	mov    cr3,eax
c00097b4:	c3                   	ret    
c00097b5:	90                   	nop

c00097b6 <VAS::~VAS()>:
c00097b6:	83 ec 2c             	sub    esp,0x2c
c00097b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c1:	fa                   	cli    
c00097c2:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00097c7:	40                   	inc    eax
c00097c8:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00097cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e1:	6a 01                	push   0x1
c00097e3:	50                   	push   eax
c00097e4:	e8 a3 ff ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c00097e9:	83 c4 0c             	add    esp,0xc
c00097ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097fc:	0f 8f d4 00 00 00    	jg     c00098d6 <VAS::~VAS()+0x120>
c0009802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009806:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	c1 e2 02             	shl    edx,0x2
c0009810:	01 d0                	add    eax,edx
c0009812:	8b 00                	mov    eax,DWORD PTR [eax]
c0009814:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981c:	83 e0 01             	and    eax,0x1
c000981f:	0f 84 a8 00 00 00    	je     c00098cd <VAS::~VAS()+0x117>
c0009825:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000982d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009835:	7f 72                	jg     c00098a9 <VAS::~VAS()+0xf3>
c0009837:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000983b:	c1 e0 0a             	shl    eax,0xa
c000983e:	89 c2                	mov    edx,eax
c0009840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009844:	01 d0                	add    eax,edx
c0009846:	c1 e0 0c             	shl    eax,0xc
c0009849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000984d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009857:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000985d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009861:	6a 01                	push   0x1
c0009863:	50                   	push   eax
c0009864:	e8 01 fd ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009869:	83 c4 0c             	add    esp,0xc
c000986c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009874:	8b 00                	mov    eax,DWORD PTR [eax]
c0009876:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987e:	25 01 04 00 00       	and    eax,0x401
c0009883:	3d 01 04 00 00       	cmp    eax,0x401
c0009888:	75 19                	jne    c00098a3 <VAS::~VAS()+0xed>
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009893:	83 ec 0c             	sub    esp,0xc
c0009896:	50                   	push   eax
c0009897:	e8 97 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098a3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098a7:	eb 84                	jmp    c000982d <VAS::~VAS()+0x77>
c00098a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ad:	25 00 04 00 00       	and    eax,0x400
c00098b2:	74 19                	je     c00098cd <VAS::~VAS()+0x117>
c00098b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	50                   	push   eax
c00098c1:	e8 6d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098cd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d1:	e9 1e ff ff ff       	jmp    c00097f4 <VAS::~VAS()+0x3e>
c00098d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	50                   	push   eax
c00098e1:	e8 cf fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 3a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009900:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0009905:	48                   	dec    eax
c0009906:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000990b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0009910:	85 c0                	test   eax,eax
c0009912:	75 01                	jne    c0009915 <VAS::~VAS()+0x15f>
c0009914:	fb                   	sti    
c0009915:	90                   	nop
c0009916:	83 c4 2c             	add    esp,0x2c
c0009919:	c3                   	ret    

c000991a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000991a:	55                   	push   ebp
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	83 ec 1c             	sub    esp,0x1c
c0009921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009929:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000992f:	77 0b                	ja     c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009931:	0f 20 d8             	mov    eax,cr3
c0009934:	0f 20 d8             	mov    eax,cr3
c0009937:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000993a:	75 47                	jne    c0009983 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000993c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009940:	09 d8                	or     eax,ebx
c0009942:	a9 ff 0f 00 00       	test   eax,0xfff
c0009947:	75 57                	jne    c00099a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009949:	89 de                	mov    esi,ebx
c000994b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000994e:	c1 ee 16             	shr    esi,0x16
c0009951:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009958:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000995c:	74 54                	je     c00099b2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000995e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009962:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009968:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000996c:	c1 e6 0c             	shl    esi,0xc
c000996f:	c1 eb 0a             	shr    ebx,0xa
c0009972:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009978:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000997b:	83 c4 1c             	add    esp,0x1c
c000997e:	5b                   	pop    ebx
c000997f:	5e                   	pop    esi
c0009980:	5f                   	pop    edi
c0009981:	5d                   	pop    ebp
c0009982:	c3                   	ret    
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	68 e8 d9 01 c0       	push   0xc001d9e8
c000998b:	e8 48 0b 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0009990:	83 c4 10             	add    esp,0x10
c0009993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009997:	09 d8                	or     eax,ebx
c0009999:	a9 ff 0f 00 00       	test   eax,0xfff
c000999e:	74 a9                	je     c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a0:	83 ec 0c             	sub    esp,0xc
c00099a3:	68 50 da 01 c0       	push   0xc001da50
c00099a8:	e8 76 67 00 00       	call   c0010123 <KePanic(char const*)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	eb 97                	jmp    c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099b6:	e8 da e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	89 c5                	mov    ebp,eax
c00099c0:	8b 0d 30 0d 02 c0    	mov    ecx,DWORD PTR ds:0xc0020d30
c00099c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099ca:	6a 01                	push   0x1
c00099cc:	e8 b4 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099d8:	6a 01                	push   0x1
c00099da:	50                   	push   eax
c00099db:	55                   	push   ebp
c00099dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00099e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099e6:	51                   	push   ecx
c00099e7:	e8 28 02 00 00       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ec:	83 c4 1c             	add    esp,0x1c
c00099ef:	68 00 10 00 00       	push   0x1000
c00099f4:	6a 00                	push   0x0
c00099f6:	50                   	push   eax
c00099f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099fb:	e8 d0 6a ff ff       	call   c00004d0 <memset>
c0009a00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a07:	e8 a9 fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a10:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a13:	83 c4 10             	add    esp,0x10
c0009a16:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a19:	e9 40 ff ff ff       	jmp    c000995e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a1e <VAS::allocatePages(int, int)>:
c0009a1e:	55                   	push   ebp
c0009a1f:	57                   	push   edi
c0009a20:	56                   	push   esi
c0009a21:	53                   	push   ebx
c0009a22:	83 ec 1c             	sub    esp,0x1c
c0009a25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a29:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009a2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a34:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a3a:	83 e0 01             	and    eax,0x1
c0009a3d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a45:	0f 85 cc 00 00 00    	jne    c0009b17 <VAS::allocatePages(int, int)+0xf9>
c0009a4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a52:	85 c0                	test   eax,eax
c0009a54:	0f 84 a1 00 00 00    	je     c0009afb <VAS::allocatePages(int, int)+0xdd>
c0009a5a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a69:	85 c0                	test   eax,eax
c0009a6b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a6e:	7e 33                	jle    c0009aa3 <VAS::allocatePages(int, int)+0x85>
c0009a70:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a78:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a7e:	e8 12 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a83:	55                   	push   ebp
c0009a84:	53                   	push   ebx
c0009a85:	50                   	push   eax
c0009a86:	57                   	push   edi
c0009a87:	e8 8e fe ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a94:	74 03                	je     c0009a99 <VAS::allocatePages(int, int)+0x7b>
c0009a96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a9f:	39 de                	cmp    esi,ebx
c0009aa1:	75 db                	jne    c0009a7e <VAS::allocatePages(int, int)+0x60>
c0009aa3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa8:	75 12                	jne    c0009abc <VAS::allocatePages(int, int)+0x9e>
c0009aaa:	0f 20 d8             	mov    eax,cr3
c0009aad:	0f 22 d8             	mov    cr3,eax
c0009ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab4:	83 c4 1c             	add    esp,0x1c
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	5f                   	pop    edi
c0009aba:	5d                   	pop    ebp
c0009abb:	c3                   	ret    
c0009abc:	c1 ee 0a             	shr    esi,0xa
c0009abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ac9:	c1 eb 0a             	shr    ebx,0xa
c0009acc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ad2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ad8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ade:	39 c3                	cmp    ebx,eax
c0009ae0:	77 ce                	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009ae2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ae5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aeb:	39 d8                	cmp    eax,ebx
c0009aed:	73 f3                	jae    c0009ae2 <VAS::allocatePages(int, int)+0xc4>
c0009aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af3:	83 c4 1c             	add    esp,0x1c
c0009af6:	5b                   	pop    ebx
c0009af7:	5e                   	pop    esi
c0009af8:	5f                   	pop    edi
c0009af9:	5d                   	pop    ebp
c0009afa:	c3                   	ret    
c0009afb:	83 ec 0c             	sub    esp,0xc
c0009afe:	68 74 da 01 c0       	push   0xc001da74
c0009b03:	e8 1b 66 00 00       	call   c0010123 <KePanic(char const*)>
c0009b08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0f:	83 c4 10             	add    esp,0x10
c0009b12:	e9 43 ff ff ff       	jmp    c0009a5a <VAS::allocatePages(int, int)+0x3c>
c0009b17:	83 ec 0c             	sub    esp,0xc
c0009b1a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b1e:	51                   	push   ecx
c0009b1f:	e8 61 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b28:	83 c4 10             	add    esp,0x10
c0009b2b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b30:	0f 87 9b 00 00 00    	ja     c0009bd1 <VAS::allocatePages(int, int)+0x1b3>
c0009b36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b3a:	85 d2                	test   edx,edx
c0009b3c:	7e 3c                	jle    c0009b7a <VAS::allocatePages(int, int)+0x15c>
c0009b3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b42:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b4a:	c1 e5 0c             	shl    ebp,0xc
c0009b4d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b53:	01 dd                	add    ebp,ebx
c0009b55:	e8 3b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b5a:	56                   	push   esi
c0009b5b:	53                   	push   ebx
c0009b5c:	50                   	push   eax
c0009b5d:	57                   	push   edi
c0009b5e:	e8 b7 fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b63:	83 c4 10             	add    esp,0x10
c0009b66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b6b:	74 03                	je     c0009b70 <VAS::allocatePages(int, int)+0x152>
c0009b6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b70:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b76:	39 dd                	cmp    ebp,ebx
c0009b78:	75 db                	jne    c0009b55 <VAS::allocatePages(int, int)+0x137>
c0009b7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7f:	0f 84 25 ff ff ff    	je     c0009aaa <VAS::allocatePages(int, int)+0x8c>
c0009b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b8d:	89 d3                	mov    ebx,edx
c0009b8f:	c1 e0 0c             	shl    eax,0xc
c0009b92:	c1 eb 0a             	shr    ebx,0xa
c0009b95:	01 d0                	add    eax,edx
c0009b97:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b9d:	c1 e8 0a             	shr    eax,0xa
c0009ba0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bab:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb0:	39 c3                	cmp    ebx,eax
c0009bb2:	0f 87 f8 fe ff ff    	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009bb8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc1:	39 d8                	cmp    eax,ebx
c0009bc3:	73 f3                	jae    c0009bb8 <VAS::allocatePages(int, int)+0x19a>
c0009bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bc9:	83 c4 1c             	add    esp,0x1c
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	5d                   	pop    ebp
c0009bd0:	c3                   	ret    
c0009bd1:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009bd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bdc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009be3:	0f 84 4d ff ff ff    	je     c0009b36 <VAS::allocatePages(int, int)+0x118>
c0009be9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf1:	e9 40 ff ff ff       	jmp    c0009b36 <VAS::allocatePages(int, int)+0x118>

c0009bf6 <VAS::setCPUSpecific(unsigned long)>:
c0009bf6:	83 ec 0c             	sub    esp,0xc
c0009bf9:	6a 05                	push   0x5
c0009bfb:	68 00 00 40 c2       	push   0xc2400000
c0009c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c04:	50                   	push   eax
c0009c05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c09:	52                   	push   edx
c0009c0a:	e8 0b fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c0f:	83 c4 1c             	add    esp,0x1c
c0009c12:	c3                   	ret    
c0009c13:	90                   	nop

c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c14:	55                   	push   ebp
c0009c15:	57                   	push   edi
c0009c16:	56                   	push   esi
c0009c17:	53                   	push   ebx
c0009c18:	83 ec 1c             	sub    esp,0x1c
c0009c1b:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009c20:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c34:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c38:	83 e0 01             	and    eax,0x1
c0009c3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c43:	85 c0                	test   eax,eax
c0009c45:	7e 39                	jle    c0009c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	89 f3                	mov    ebx,esi
c0009c4d:	c1 e0 0c             	shl    eax,0xc
c0009c50:	01 f0                	add    eax,esi
c0009c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c56:	55                   	push   ebp
c0009c57:	53                   	push   ebx
c0009c58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5c:	29 f0                	sub    eax,esi
c0009c5e:	01 d8                	add    eax,ebx
c0009c60:	50                   	push   eax
c0009c61:	57                   	push   edi
c0009c62:	e8 b3 fc ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c6f:	74 03                	je     c0009c74 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c71:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c74:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c7a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c7e:	75 d6                	jne    c0009c56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c85:	75 10                	jne    c0009c97 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c87:	0f 20 d8             	mov    eax,cr3
c0009c8a:	0f 22 d8             	mov    cr3,eax
c0009c8d:	83 c4 1c             	add    esp,0x1c
c0009c90:	89 f0                	mov    eax,esi
c0009c92:	5b                   	pop    ebx
c0009c93:	5e                   	pop    esi
c0009c94:	5f                   	pop    edi
c0009c95:	5d                   	pop    ebp
c0009c96:	c3                   	ret    
c0009c97:	89 f3                	mov    ebx,esi
c0009c99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9d:	c1 eb 0a             	shr    ebx,0xa
c0009ca0:	c1 e0 0c             	shl    eax,0xc
c0009ca3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ca9:	01 f0                	add    eax,esi
c0009cab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb1:	c1 e8 0a             	shr    eax,0xa
c0009cb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cbe:	39 c3                	cmp    ebx,eax
c0009cc0:	77 cb                	ja     c0009c8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ccb:	39 d8                	cmp    eax,ebx
c0009ccd:	73 f3                	jae    c0009cc2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ccf:	83 c4 1c             	add    esp,0x1c
c0009cd2:	89 f0                	mov    eax,esi
c0009cd4:	5b                   	pop    ebx
c0009cd5:	5e                   	pop    esi
c0009cd6:	5f                   	pop    edi
c0009cd7:	5d                   	pop    ebp
c0009cd8:	c3                   	ret    
c0009cd9:	90                   	nop

c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cda:	55                   	push   ebp
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 1c             	sub    esp,0x1c
c0009ce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ce5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ce9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ced:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf1:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cf6:	75 4a                	jne    c0009d42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cf8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cff:	c1 eb 16             	shr    ebx,0x16
c0009d02:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d09:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d0d:	74 4d                	je     c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d13:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d17:	c1 e8 0a             	shr    eax,0xa
c0009d1a:	80 fa 01             	cmp    dl,0x1
c0009d1d:	19 d2                	sbb    edx,edx
c0009d1f:	c1 e3 0c             	shl    ebx,0xc
c0009d22:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d26:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d2c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d31:	01 d8                	add    eax,ebx
c0009d33:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d3a:	83 c4 1c             	add    esp,0x1c
c0009d3d:	5b                   	pop    ebx
c0009d3e:	5e                   	pop    esi
c0009d3f:	5f                   	pop    edi
c0009d40:	5d                   	pop    ebp
c0009d41:	c3                   	ret    
c0009d42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d46:	83 ec 0c             	sub    esp,0xc
c0009d49:	68 a0 da 01 c0       	push   0xc001daa0
c0009d4e:	e8 d0 63 00 00       	call   c0010123 <KePanic(char const*)>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d5a:	eb 9c                	jmp    c0009cf8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d60:	e8 30 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d65:	83 ec 0c             	sub    esp,0xc
c0009d68:	89 c5                	mov    ebp,eax
c0009d6a:	8b 0d 30 0d 02 c0    	mov    ecx,DWORD PTR ds:0xc0020d30
c0009d70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d74:	6a 01                	push   0x1
c0009d76:	e8 0a f5 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d82:	6a 01                	push   0x1
c0009d84:	50                   	push   eax
c0009d85:	55                   	push   ebp
c0009d86:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d90:	51                   	push   ecx
c0009d91:	e8 7e fe ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d96:	83 c4 1c             	add    esp,0x1c
c0009d99:	68 00 10 00 00       	push   0x1000
c0009d9e:	6a 00                	push   0x0
c0009da0:	50                   	push   eax
c0009da1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da5:	e8 26 67 ff ff       	call   c00004d0 <memset>
c0009daa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db1:	e8 ff f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009db6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dc3:	e9 47 ff ff ff       	jmp    c0009d0f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dc8 <VAS::VAS(bool)>:
c0009dc8:	53                   	push   ebx
c0009dc9:	83 ec 28             	sub    esp,0x28
c0009dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dee:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009df2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009df5:	e8 9b dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dfa:	89 c2                	mov    edx,eax
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e03:	8b 1d 30 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d30
c0009e09:	83 ec 0c             	sub    esp,0xc
c0009e0c:	6a 01                	push   0x1
c0009e0e:	e8 72 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	89 c2                	mov    edx,eax
c0009e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e1f:	83 ec 0c             	sub    esp,0xc
c0009e22:	6a 03                	push   0x3
c0009e24:	6a 01                	push   0x1
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	53                   	push   ebx
c0009e29:	e8 e6 fd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e2e:	83 c4 20             	add    esp,0x20
c0009e31:	89 c2                	mov    edx,eax
c0009e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e42:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e4a:	7f 1c                	jg     c0009e68 <VAS::VAS(bool)+0xa0>
c0009e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e57:	c1 e2 02             	shl    edx,0x2
c0009e5a:	01 d0                	add    eax,edx
c0009e5c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e62:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e66:	eb da                	jmp    c0009e42 <VAS::VAS(bool)+0x7a>
c0009e68:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e70:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e78:	7f 7a                	jg     c0009ef4 <VAS::VAS(bool)+0x12c>
c0009e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7e:	2d 00 02 00 00       	sub    eax,0x200
c0009e83:	c1 e0 0c             	shl    eax,0xc
c0009e86:	83 c8 03             	or     eax,0x3
c0009e89:	89 c2                	mov    edx,eax
c0009e8b:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009e90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e96:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e9c:	83 e0 10             	and    eax,0x10
c0009e9f:	84 c0                	test   al,al
c0009ea1:	74 07                	je     c0009eaa <VAS::VAS(bool)+0xe2>
c0009ea3:	b8 00 01 00 00       	mov    eax,0x100
c0009ea8:	eb 05                	jmp    c0009eaf <VAS::VAS(bool)+0xe7>
c0009eaa:	b8 00 00 00 00       	mov    eax,0x0
c0009eaf:	09 d0                	or     eax,edx
c0009eb1:	89 c1                	mov    ecx,eax
c0009eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ebe:	c1 e2 02             	shl    edx,0x2
c0009ec1:	01 d0                	add    eax,edx
c0009ec3:	89 ca                	mov    edx,ecx
c0009ec5:	89 10                	mov    DWORD PTR [eax],edx
c0009ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ecb:	2d 40 03 00 00       	sub    eax,0x340
c0009ed0:	83 f8 7f             	cmp    eax,0x7f
c0009ed3:	77 16                	ja     c0009eeb <VAS::VAS(bool)+0x123>
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009edc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee0:	c1 e2 02             	shl    edx,0x2
c0009ee3:	01 d0                	add    eax,edx
c0009ee5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eeb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eef:	e9 7c ff ff ff       	jmp    c0009e70 <VAS::VAS(bool)+0xa8>
c0009ef4:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009ef9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eff:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f05:	83 e0 10             	and    eax,0x10
c0009f08:	84 c0                	test   al,al
c0009f0a:	74 07                	je     c0009f13 <VAS::VAS(bool)+0x14b>
c0009f0c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f11:	eb 05                	jmp    c0009f18 <VAS::VAS(bool)+0x150>
c0009f13:	b8 03 40 00 00       	mov    eax,0x4003
c0009f18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f1c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f1f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f25:	89 02                	mov    DWORD PTR [edx],eax
c0009f27:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009f2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f38:	83 ec 08             	sub    esp,0x8
c0009f3b:	50                   	push   eax
c0009f3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f40:	e8 b1 fc ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f4f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f5a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f60:	83 e0 10             	and    eax,0x10
c0009f63:	84 c0                	test   al,al
c0009f65:	74 07                	je     c0009f6e <VAS::VAS(bool)+0x1a6>
c0009f67:	b8 00 01 00 00       	mov    eax,0x100
c0009f6c:	eb 05                	jmp    c0009f73 <VAS::VAS(bool)+0x1ab>
c0009f6e:	b8 00 00 00 00       	mov    eax,0x0
c0009f73:	09 c2                	or     edx,eax
c0009f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f7c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f81:	83 ca 03             	or     edx,0x3
c0009f84:	89 10                	mov    DWORD PTR [eax],edx
c0009f86:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009f8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f91:	83 ec 0c             	sub    esp,0xc
c0009f94:	50                   	push   eax
c0009f95:	e8 12 1c 00 00       	call   c000bbac <Device::getName()>
c0009f9a:	83 c4 10             	add    esp,0x10
c0009f9d:	83 ec 08             	sub    esp,0x8
c0009fa0:	68 43 db 01 c0       	push   0xc001db43
c0009fa5:	50                   	push   eax
c0009fa6:	e8 35 67 ff ff       	call   c00006e0 <strcmp>
c0009fab:	83 c4 10             	add    esp,0x10
c0009fae:	85 c0                	test   eax,eax
c0009fb0:	0f 94 c0             	sete   al
c0009fb3:	84 c0                	test   al,al
c0009fb5:	0f 84 87 00 00 00    	je     c000a042 <VAS::VAS(bool)+0x27a>
c0009fbb:	fa                   	cli    
c0009fbc:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0009fc1:	40                   	inc    eax
c0009fc2:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0009fc7:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009fcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fd2:	05 7c 09 00 00       	add    eax,0x97c
c0009fd7:	83 ec 0c             	sub    esp,0xc
c0009fda:	50                   	push   eax
c0009fdb:	e8 d6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe0:	83 c4 10             	add    esp,0x10
c0009fe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe8:	89 c3                	mov    ebx,eax
c0009fea:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	05 7c 09 00 00       	add    eax,0x97c
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 b3 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	83 ec 08             	sub    esp,0x8
c000a009:	50                   	push   eax
c000a00a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a00e:	e8 83 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	8b 00                	mov    eax,DWORD PTR [eax]
c000a018:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a01d:	6a 11                	push   0x11
c000a01f:	53                   	push   ebx
c000a020:	50                   	push   eax
c000a021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a025:	e8 f0 f8 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000a032:	48                   	dec    eax
c000a033:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000a038:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000a03d:	85 c0                	test   eax,eax
c000a03f:	75 01                	jne    c000a042 <VAS::VAS(bool)+0x27a>
c000a041:	fb                   	sti    
c000a042:	90                   	nop
c000a043:	83 c4 28             	add    esp,0x28
c000a046:	5b                   	pop    ebx
c000a047:	c3                   	ret    

c000a048 <VAS::evict(unsigned long)>:
c000a048:	55                   	push   ebp
c000a049:	57                   	push   edi
c000a04a:	56                   	push   esi
c000a04b:	53                   	push   ebx
c000a04c:	83 ec 1c             	sub    esp,0x1c
c000a04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a053:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a05b:	e8 66 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a060:	8b 0d ec f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8ec
c000a066:	89 c7                	mov    edi,eax
c000a068:	85 c9                	test   ecx,ecx
c000a06a:	7e 3e                	jle    c000a0aa <VAS::evict(unsigned long)+0x62>
c000a06c:	89 ee                	mov    esi,ebp
c000a06e:	31 db                	xor    ebx,ebx
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	57                   	push   edi
c000a074:	e8 3b f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a079:	89 34 24             	mov    DWORD PTR [esp],esi
c000a07c:	01 d8                	add    eax,ebx
c000a07e:	6a 01                	push   0x1
c000a080:	31 d2                	xor    edx,edx
c000a082:	43                   	inc    ebx
c000a083:	52                   	push   edx
c000a084:	81 c6 00 02 00 00    	add    esi,0x200
c000a08a:	50                   	push   eax
c000a08b:	0f be 05 f8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8f8
c000a092:	8b 14 85 9c 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf64]
c000a099:	52                   	push   edx
c000a09a:	e8 93 2b 00 00       	call   c000cc32 <LogicalDisk::write(unsigned long long, int, void*)>
c000a09f:	83 c4 20             	add    esp,0x20
c000a0a2:	39 1d ec f8 01 c0    	cmp    DWORD PTR ds:0xc001f8ec,ebx
c000a0a8:	7f c6                	jg     c000a070 <VAS::evict(unsigned long)+0x28>
c000a0aa:	83 ec 08             	sub    esp,0x8
c000a0ad:	c1 e7 0b             	shl    edi,0xb
c000a0b0:	55                   	push   ebp
c000a0b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b5:	50                   	push   eax
c000a0b6:	e8 db f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0bd:	89 d1                	mov    ecx,edx
c000a0bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0c5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0cb:	09 cf                	or     edi,ecx
c000a0cd:	89 38                	mov    DWORD PTR [eax],edi
c000a0cf:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0d2:	ff 05 28 0d 02 c0    	inc    DWORD PTR ds:0xc0020d28
c000a0d8:	e8 56 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0dd:	0f 20 d8             	mov    eax,cr3
c000a0e0:	0f 22 d8             	mov    cr3,eax
c000a0e3:	a1 24 0d 02 c0       	mov    eax,ds:0xc0020d24
c000a0e8:	c7 44 24 40 51 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001db51
c000a0f0:	8d 50 01             	lea    edx,[eax+0x1]
c000a0f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f7:	89 15 24 0d 02 c0    	mov    DWORD PTR ds:0xc0020d24,edx
c000a0fd:	83 c4 2c             	add    esp,0x2c
c000a100:	5b                   	pop    ebx
c000a101:	5e                   	pop    esi
c000a102:	5f                   	pop    edi
c000a103:	5d                   	pop    ebp
c000a104:	e9 cf 03 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a109:	90                   	nop

c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a10a:	55                   	push   ebp
c000a10b:	57                   	push   edi
c000a10c:	56                   	push   esi
c000a10d:	53                   	push   ebx
c000a10e:	83 ec 14             	sub    esp,0x14
c000a111:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a115:	53                   	push   ebx
c000a116:	68 62 db 01 c0       	push   0xc001db62
c000a11b:	e8 b8 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a129:	74 21                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a12b:	83 ec 08             	sub    esp,0x8
c000a12e:	53                   	push   ebx
c000a12f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a133:	57                   	push   edi
c000a134:	e8 5d f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 c6                	mov    esi,eax
c000a13e:	85 c0                	test   eax,eax
c000a140:	74 0a                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a142:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a144:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a14a:	74 0a                	je     c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a14c:	31 c0                	xor    eax,eax
c000a14e:	83 c4 0c             	add    esp,0xc
c000a151:	5b                   	pop    ebx
c000a152:	5e                   	pop    esi
c000a153:	5f                   	pop    edi
c000a154:	5d                   	pop    ebp
c000a155:	c3                   	ret    
c000a156:	e8 3a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a15b:	c1 ed 0b             	shr    ebp,0xb
c000a15e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a160:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a166:	09 c2                	or     edx,eax
c000a168:	81 ca 01 08 00 00    	or     edx,0x801
c000a16e:	89 16                	mov    DWORD PTR [esi],edx
c000a170:	8b 35 ec f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8ec
c000a176:	85 f6                	test   esi,esi
c000a178:	7e 3e                	jle    c000a1b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a17a:	89 df                	mov    edi,ebx
c000a17c:	31 f6                	xor    esi,esi
c000a17e:	83 ec 0c             	sub    esp,0xc
c000a181:	55                   	push   ebp
c000a182:	e8 2d f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a187:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a18a:	01 f0                	add    eax,esi
c000a18c:	6a 01                	push   0x1
c000a18e:	31 d2                	xor    edx,edx
c000a190:	46                   	inc    esi
c000a191:	52                   	push   edx
c000a192:	81 c7 00 02 00 00    	add    edi,0x200
c000a198:	50                   	push   eax
c000a199:	0f be 05 f8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8f8
c000a1a0:	8b 0c 85 9c 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf64]
c000a1a7:	51                   	push   ecx
c000a1a8:	e8 19 2a 00 00       	call   c000cbc6 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1ad:	83 c4 20             	add    esp,0x20
c000a1b0:	39 35 ec f8 01 c0    	cmp    DWORD PTR ds:0xc001f8ec,esi
c000a1b6:	7f c6                	jg     c000a17e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1b8:	a1 28 0d 02 c0       	mov    eax,ds:0xc0020d28
c000a1bd:	48                   	dec    eax
c000a1be:	52                   	push   edx
c000a1bf:	a3 28 0d 02 c0       	mov    ds:0xc0020d28,eax
c000a1c4:	50                   	push   eax
c000a1c5:	53                   	push   ebx
c000a1c6:	68 75 db 01 c0       	push   0xc001db75
c000a1cb:	e8 08 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a1d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1d3:	e8 be f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1d8:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000a1dd:	83 c4 10             	add    esp,0x10
c000a1e0:	48                   	dec    eax
c000a1e1:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000a1e6:	85 c0                	test   eax,eax
c000a1e8:	75 01                	jne    c000a1eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1ea:	fb                   	sti    
c000a1eb:	0f 20 d8             	mov    eax,cr3
c000a1ee:	0f 22 d8             	mov    cr3,eax
c000a1f1:	b0 01                	mov    al,0x1
c000a1f3:	e9 56 ff ff ff       	jmp    c000a14e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1f8 <VAS::scanForEviction()>:
c000a1f8:	57                   	push   edi
c000a1f9:	31 ff                	xor    edi,edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	83 ec 10             	sub    esp,0x10
c000a200:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a204:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a207:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a20d:	75 0e                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a20f:	89 da                	mov    edx,ebx
c000a211:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a214:	c1 ea 16             	shr    edx,0x16
c000a217:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a21b:	74 4e                	je     c000a26b <VAS::scanForEviction()+0x73>
c000a21d:	53                   	push   ebx
c000a21e:	56                   	push   esi
c000a21f:	e8 72 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a224:	5a                   	pop    edx
c000a225:	8b 10                	mov    edx,DWORD PTR [eax]
c000a227:	59                   	pop    ecx
c000a228:	89 d1                	mov    ecx,edx
c000a22a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a230:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a236:	74 3e                	je     c000a276 <VAS::scanForEviction()+0x7e>
c000a238:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a23e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a244:	76 2b                	jbe    c000a271 <VAS::scanForEviction()+0x79>
c000a246:	47                   	inc    edi
c000a247:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a24e:	83 ff 03             	cmp    edi,0x3
c000a251:	74 32                	je     c000a285 <VAS::scanForEviction()+0x8d>
c000a253:	31 db                	xor    ebx,ebx
c000a255:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a25b:	75 c0                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a25d:	89 da                	mov    edx,ebx
c000a25f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a262:	c1 ea 16             	shr    edx,0x16
c000a265:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a269:	75 b2                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a26b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a271:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a274:	eb 91                	jmp    c000a207 <VAS::scanForEviction()+0xf>
c000a276:	f6 c2 20             	test   dl,0x20
c000a279:	74 13                	je     c000a28e <VAS::scanForEviction()+0x96>
c000a27b:	83 e2 df             	and    edx,0xffffffdf
c000a27e:	89 10                	mov    DWORD PTR [eax],edx
c000a280:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a283:	eb b3                	jmp    c000a238 <VAS::scanForEviction()+0x40>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	31 c0                	xor    eax,eax
c000a28a:	5b                   	pop    ebx
c000a28b:	5e                   	pop    esi
c000a28c:	5f                   	pop    edi
c000a28d:	c3                   	ret    
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	89 d0                	mov    eax,edx
c000a293:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a29c:	53                   	push   ebx
c000a29d:	68 8a db 01 c0       	push   0xc001db8a
c000a2a2:	e8 31 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2a7:	58                   	pop    eax
c000a2a8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2ab:	5a                   	pop    edx
c000a2ac:	51                   	push   ecx
c000a2ad:	56                   	push   esi
c000a2ae:	e8 95 fd ff ff       	call   c000a048 <VAS::evict(unsigned long)>
c000a2b3:	5b                   	pop    ebx
c000a2b4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2b7:	5f                   	pop    edi
c000a2b8:	50                   	push   eax
c000a2b9:	68 9e db 01 c0       	push   0xc001db9e
c000a2be:	e8 15 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d1:	83 c4 10             	add    esp,0x10
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	5f                   	pop    edi
c000a2d7:	c3                   	ret    

c000a2d8 <mapVASFirstTime>:
c000a2d8:	55                   	push   ebp
c000a2d9:	57                   	push   edi
c000a2da:	56                   	push   esi
c000a2db:	53                   	push   ebx
c000a2dc:	83 ec 0c             	sub    esp,0xc
c000a2df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2e7:	4a                   	dec    edx
c000a2e8:	0f 84 8c 00 00 00    	je     c000a37a <mapVASFirstTime+0xa2>
c000a2ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2f9:	c1 e5 15             	shl    ebp,0x15
c000a2fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a301:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a307:	29 eb                	sub    ebx,ebp
c000a309:	29 ef                	sub    edi,ebp
c000a30b:	e8 85 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a310:	83 ec 0c             	sub    esp,0xc
c000a313:	68 03 04 00 00       	push   0x403
c000a318:	6a 01                	push   0x1
c000a31a:	53                   	push   ebx
c000a31b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a321:	50                   	push   eax
c000a322:	56                   	push   esi
c000a323:	e8 ec f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a328:	83 c4 20             	add    esp,0x20
c000a32b:	39 fb                	cmp    ebx,edi
c000a32d:	75 dc                	jne    c000a30b <mapVASFirstTime+0x33>
c000a32f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a334:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a339:	29 eb                	sub    ebx,ebp
c000a33b:	29 ef                	sub    edi,ebp
c000a33d:	e8 53 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a342:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a346:	19 d2                	sbb    edx,edx
c000a348:	83 ec 0c             	sub    esp,0xc
c000a34b:	83 e2 04             	and    edx,0x4
c000a34e:	81 c2 03 04 00 00    	add    edx,0x403
c000a354:	52                   	push   edx
c000a355:	6a 01                	push   0x1
c000a357:	53                   	push   ebx
c000a358:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35e:	50                   	push   eax
c000a35f:	56                   	push   esi
c000a360:	e8 af f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a365:	83 c4 20             	add    esp,0x20
c000a368:	39 df                	cmp    edi,ebx
c000a36a:	75 d1                	jne    c000a33d <mapVASFirstTime+0x65>
c000a36c:	0f 20 d8             	mov    eax,cr3
c000a36f:	0f 22 d8             	mov    cr3,eax
c000a372:	83 c4 0c             	add    esp,0xc
c000a375:	5b                   	pop    ebx
c000a376:	5e                   	pop    esi
c000a377:	5f                   	pop    edi
c000a378:	5d                   	pop    ebp
c000a379:	c3                   	ret    
c000a37a:	83 ec 0c             	sub    esp,0xc
c000a37d:	68 b1 db 01 c0       	push   0xc001dbb1
c000a382:	e8 51 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a387:	83 c4 10             	add    esp,0x10
c000a38a:	83 c4 0c             	add    esp,0xc
c000a38d:	5b                   	pop    ebx
c000a38e:	5e                   	pop    esi
c000a38f:	5f                   	pop    edi
c000a390:	5d                   	pop    ebp
c000a391:	c3                   	ret    

c000a392 <__cxa_atexit>:
c000a392:	31 c0                	xor    eax,eax
c000a394:	c3                   	ret    

c000a395 <__cxa_finalize>:
c000a395:	c3                   	ret    

c000a396 <__stack_chk_fail>:
c000a396:	55                   	push   ebp
c000a397:	89 e5                	mov    ebp,esp
c000a399:	83 ec 10             	sub    esp,0x10
c000a39c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a39f:	68 ca db 01 c0       	push   0xc001dbca
c000a3a4:	e8 2f 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3a9:	58                   	pop    eax
c000a3aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3ad:	5a                   	pop    edx
c000a3ae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3b1:	68 ca db 01 c0       	push   0xc001dbca
c000a3b6:	e8 1d 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3bb:	c7 04 24 d2 db 01 c0 	mov    DWORD PTR [esp],0xc001dbd2
c000a3c2:	e8 5c 5d 00 00       	call   c0010123 <KePanic(char const*)>
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	c9                   	leave  
c000a3cb:	c3                   	ret    

c000a3cc <__cxa_pure_virtual>:
c000a3cc:	83 ec 18             	sub    esp,0x18
c000a3cf:	68 ea db 01 c0       	push   0xc001dbea
c000a3d4:	e8 4a 5d 00 00       	call   c0010123 <KePanic(char const*)>
c000a3d9:	83 c4 1c             	add    esp,0x1c
c000a3dc:	c3                   	ret    

c000a3dd <operator new[](unsigned long)>:
c000a3dd:	e9 d7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a3e2 <operator delete(void*, unsigned long)>:
c000a3e2:	e9 f2 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3e7 <operator delete[](void*)>:
c000a3e7:	e9 ed d3 ff ff       	jmp    c00077d9 <rfree>

c000a3ec <operator delete[](void*, unsigned long)>:
c000a3ec:	e9 e8 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3f1:	55                   	push   ebp
c000a3f2:	b9 04 00 00 00       	mov    ecx,0x4
c000a3f7:	57                   	push   edi
c000a3f8:	56                   	push   esi
c000a3f9:	be f3 d7 01 c0       	mov    esi,0xc001d7f3
c000a3fe:	53                   	push   ebx
c000a3ff:	83 ec 20             	sub    esp,0x20
c000a402:	a1 f2 d7 01 c0       	mov    eax,ds:0xc001d7f2
c000a407:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a40b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a40f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a413:	a1 ff d7 01 c0       	mov    eax,ds:0xc001d7ff
c000a418:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a41c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a420:	fc                   	cld    
c000a421:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a423:	89 ee                	mov    esi,ebp
c000a425:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a429:	eb 02                	jmp    c000a42d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a42b:	89 c6                	mov    esi,eax
c000a42d:	31 d2                	xor    edx,edx
c000a42f:	41                   	inc    ecx
c000a430:	89 f0                	mov    eax,esi
c000a432:	f7 f3                	div    ebx
c000a434:	39 de                	cmp    esi,ebx
c000a436:	73 f3                	jae    c000a42b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a438:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a43b:	eb 02                	jmp    c000a43f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a43d:	89 c5                	mov    ebp,eax
c000a43f:	31 d2                	xor    edx,edx
c000a441:	49                   	dec    ecx
c000a442:	89 e8                	mov    eax,ebp
c000a444:	f7 f3                	div    ebx
c000a446:	39 dd                	cmp    ebp,ebx
c000a448:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a44c:	88 11                	mov    BYTE PTR [ecx],dl
c000a44e:	73 ed                	jae    c000a43d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a454:	83 c4 20             	add    esp,0x20
c000a457:	5b                   	pop    ebx
c000a458:	5e                   	pop    esi
c000a459:	5f                   	pop    edi
c000a45a:	5d                   	pop    ebp
c000a45b:	c3                   	ret    

c000a45c <Dbg::logc(char)>:
c000a45c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a460:	f6 05 50 0c 02 c0 10 	test   BYTE PTR ds:0xc0020c50,0x10
c000a467:	75 12                	jne    c000a47b <Dbg::logc(char)+0x1f>
c000a469:	ba fd 03 00 00       	mov    edx,0x3fd
c000a46e:	ec                   	in     al,dx
c000a46f:	a8 20                	test   al,0x20
c000a471:	74 fb                	je     c000a46e <Dbg::logc(char)+0x12>
c000a473:	ba f8 03 00 00       	mov    edx,0x3f8
c000a478:	88 c8                	mov    al,cl
c000a47a:	ee                   	out    dx,al
c000a47b:	c3                   	ret    

c000a47c <Dbg::logs(char*)>:
c000a47c:	53                   	push   ebx
c000a47d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a481:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a484:	84 c0                	test   al,al
c000a486:	74 0f                	je     c000a497 <Dbg::logs(char*)+0x1b>
c000a488:	50                   	push   eax
c000a489:	43                   	inc    ebx
c000a48a:	e8 cd ff ff ff       	call   c000a45c <Dbg::logc(char)>
c000a48f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a492:	5a                   	pop    edx
c000a493:	84 c0                	test   al,al
c000a495:	75 f1                	jne    c000a488 <Dbg::logs(char*)+0xc>
c000a497:	5b                   	pop    ebx
c000a498:	c3                   	ret    

c000a499 <Dbg::logWriteInt(unsigned int)>:
c000a499:	83 ec 10             	sub    esp,0x10
c000a49c:	6a 0a                	push   0xa
c000a49e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4a2:	50                   	push   eax
c000a4a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a7:	50                   	push   eax
c000a4a8:	e8 44 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ad:	50                   	push   eax
c000a4ae:	e8 c9 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4b3:	83 c4 20             	add    esp,0x20
c000a4b6:	c3                   	ret    

c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4b7:	83 ec 10             	sub    esp,0x10
c000a4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4be:	50                   	push   eax
c000a4bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4c3:	50                   	push   eax
c000a4c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4c8:	52                   	push   edx
c000a4c9:	e8 23 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ce:	50                   	push   eax
c000a4cf:	e8 a8 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4d4:	83 c4 20             	add    esp,0x20
c000a4d7:	c3                   	ret    

c000a4d8 <Dbg::kprintf(char const*, ...)>:
c000a4d8:	55                   	push   ebp
c000a4d9:	57                   	push   edi
c000a4da:	56                   	push   esi
c000a4db:	53                   	push   ebx
c000a4dc:	83 ec 0c             	sub    esp,0xc
c000a4df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4e3:	f6 05 50 0c 02 c0 10 	test   BYTE PTR ds:0xc0020c50,0x10
c000a4ea:	74 08                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4ec:	83 c4 0c             	add    esp,0xc
c000a4ef:	5b                   	pop    ebx
c000a4f0:	5e                   	pop    esi
c000a4f1:	5f                   	pop    edi
c000a4f2:	5d                   	pop    ebp
c000a4f3:	c3                   	ret    
c000a4f4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4f8:	31 ff                	xor    edi,edi
c000a4fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a501:	84 c0                	test   al,al
c000a503:	74 e7                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a505:	8d 77 01             	lea    esi,[edi+0x1]
c000a508:	3c 25                	cmp    al,0x25
c000a50a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a50d:	75 47                	jne    c000a556 <Dbg::kprintf(char const*, ...)+0x7e>
c000a50f:	83 c7 02             	add    edi,0x2
c000a512:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a515:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a518:	83 e8 25             	sub    eax,0x25
c000a51b:	3c 53                	cmp    al,0x53
c000a51d:	0f 87 d2 00 00 00    	ja     c000a5f5 <Dbg::kprintf(char const*, ...)+0x11d>
c000a523:	25 ff 00 00 00       	and    eax,0xff
c000a528:	ff 24 85 00 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2400]
c000a52f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a533:	89 c8                	mov    eax,ecx
c000a535:	83 c1 04             	add    ecx,0x4
c000a538:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a53c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a53e:	55                   	push   ebp
c000a53f:	e8 55 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a544:	58                   	pop    eax
c000a545:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a548:	84 c0                	test   al,al
c000a54a:	74 a0                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a54c:	8d 77 01             	lea    esi,[edi+0x1]
c000a54f:	3c 25                	cmp    al,0x25
c000a551:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a554:	74 b9                	je     c000a50f <Dbg::kprintf(char const*, ...)+0x37>
c000a556:	50                   	push   eax
c000a557:	89 f7                	mov    edi,esi
c000a559:	e8 fe fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a55e:	89 ee                	mov    esi,ebp
c000a560:	58                   	pop    eax
c000a561:	eb e2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a563:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a567:	89 c8                	mov    eax,ecx
c000a569:	83 c1 04             	add    ecx,0x4
c000a56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a56e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a572:	50                   	push   eax
c000a573:	e8 04 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a578:	58                   	pop    eax
c000a579:	eb ca                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a57b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a57f:	89 d0                	mov    eax,edx
c000a581:	83 c2 04             	add    edx,0x4
c000a584:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a588:	8b 00                	mov    eax,DWORD PTR [eax]
c000a58a:	50                   	push   eax
c000a58b:	e8 09 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a590:	58                   	pop    eax
c000a591:	eb b2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a593:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a597:	89 d0                	mov    eax,edx
c000a599:	83 c2 04             	add    edx,0x4
c000a59c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a59f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5a3:	50                   	push   eax
c000a5a4:	e8 b3 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5a9:	58                   	pop    eax
c000a5aa:	eb 99                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5b0:	89 c8                	mov    eax,ecx
c000a5b2:	83 c1 04             	add    ecx,0x4
c000a5b5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5b9:	6a 10                	push   0x10
c000a5bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bd:	51                   	push   ecx
c000a5be:	e8 f4 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5c3:	5d                   	pop    ebp
c000a5c4:	58                   	pop    eax
c000a5c5:	e9 7b ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	83 c2 08             	add    edx,0x8
c000a5d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5d7:	6a 10                	push   0x10
c000a5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5db:	50                   	push   eax
c000a5dc:	e8 d6 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e1:	58                   	pop    eax
c000a5e2:	5a                   	pop    edx
c000a5e3:	e9 5d ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5e8:	6a 25                	push   0x25
c000a5ea:	e8 6d fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5ef:	5a                   	pop    edx
c000a5f0:	e9 50 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f5:	6a 25                	push   0x25
c000a5f7:	e8 60 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5fc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a600:	50                   	push   eax
c000a601:	e8 56 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a606:	5a                   	pop    edx
c000a607:	59                   	pop    ecx
c000a608:	e9 38 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a60d:	90                   	nop

c000a60e <File::read(unsigned long long, void*, int*)>:
c000a60e:	53                   	push   ebx
c000a60f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a613:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a617:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a61e:	3c 19                	cmp    al,0x19
c000a620:	77 35                	ja     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a622:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000a629:	85 c0                	test   eax,eax
c000a62b:	74 2a                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a62d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a633:	85 c0                	test   eax,eax
c000a635:	74 20                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a637:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a63b:	74 21                	je     c000a65e <File::read(unsigned long long, void*, int*)+0x50>
c000a63d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a63f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a643:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a64d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a651:	5b                   	pop    ebx
c000a652:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a655:	ff e0                	jmp    eax
c000a657:	b8 0b 00 00 00       	mov    eax,0xb
c000a65c:	eb 05                	jmp    c000a663 <File::read(unsigned long long, void*, int*)+0x55>
c000a65e:	b8 05 00 00 00       	mov    eax,0x5
c000a663:	5b                   	pop    ebx
c000a664:	c3                   	ret    
c000a665:	90                   	nop

c000a666 <File::write(unsigned long long, void*, int*)>:
c000a666:	53                   	push   ebx
c000a667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a66b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a66f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a676:	3c 19                	cmp    al,0x19
c000a678:	77 35                	ja     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a67a:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000a681:	85 c0                	test   eax,eax
c000a683:	74 2a                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a685:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a68b:	85 c0                	test   eax,eax
c000a68d:	74 20                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a68f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a693:	74 21                	je     c000a6b6 <File::write(unsigned long long, void*, int*)+0x50>
c000a695:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a697:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a69b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6a9:	5b                   	pop    ebx
c000a6aa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6ad:	ff e0                	jmp    eax
c000a6af:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b4:	eb 05                	jmp    c000a6bb <File::write(unsigned long long, void*, int*)+0x55>
c000a6b6:	b8 05 00 00 00       	mov    eax,0x5
c000a6bb:	5b                   	pop    ebx
c000a6bc:	c3                   	ret    
c000a6bd:	90                   	nop

c000a6be <Directory::read(unsigned long long, void*, int*)>:
c000a6be:	53                   	push   ebx
c000a6bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ce:	3c 19                	cmp    al,0x19
c000a6d0:	77 35                	ja     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6d2:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000a6d9:	85 c0                	test   eax,eax
c000a6db:	74 2a                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6e3:	85 c0                	test   eax,eax
c000a6e5:	74 20                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6eb:	74 21                	je     c000a70e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a701:	5b                   	pop    ebx
c000a702:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a705:	ff e0                	jmp    eax
c000a707:	b8 0b 00 00 00       	mov    eax,0xb
c000a70c:	eb 05                	jmp    c000a713 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a70e:	b8 05 00 00 00       	mov    eax,0x5
c000a713:	5b                   	pop    ebx
c000a714:	c3                   	ret    
c000a715:	90                   	nop

c000a716 <Directory::write(unsigned long long, void*, int*)>:
c000a716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a721:	b8 0b 00 00 00       	mov    eax,0xb
c000a726:	80 fa 19             	cmp    dl,0x19
c000a729:	77 18                	ja     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a72b:	8b 14 95 a0 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce60]
c000a732:	85 d2                	test   edx,edx
c000a734:	74 0d                	je     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a736:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a73d:	19 c0                	sbb    eax,eax
c000a73f:	83 e0 0a             	and    eax,0xa
c000a742:	40                   	inc    eax
c000a743:	c3                   	ret    

c000a744 <File::isAtty()>:
c000a744:	31 c0                	xor    eax,eax
c000a746:	c3                   	ret    
c000a747:	90                   	nop

c000a748 <Directory::isAtty()>:
c000a748:	31 c0                	xor    eax,eax
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a74c:	b8 0a 00 00 00       	mov    eax,0xa
c000a751:	c3                   	ret    

c000a752 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a752:	b8 0a 00 00 00       	mov    eax,0xa
c000a757:	c3                   	ret    

c000a758 <Filesystem::allocateSwapfile(char const*, int)>:
c000a758:	31 c0                	xor    eax,eax
c000a75a:	31 d2                	xor    edx,edx
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <File::~File()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	ba c0 dd 01 c0       	mov    edx,0xc001ddc0
c000a766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a76a:	89 10                	mov    DWORD PTR [eax],edx
c000a76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a770:	83 ec 0c             	sub    esp,0xc
c000a773:	50                   	push   eax
c000a774:	e8 ab e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a779:	83 c4 10             	add    esp,0x10
c000a77c:	90                   	nop
c000a77d:	83 c4 0c             	add    esp,0xc
c000a780:	c3                   	ret    
c000a781:	90                   	nop

c000a782 <File::~File()>:
c000a782:	83 ec 0c             	sub    esp,0xc
c000a785:	83 ec 0c             	sub    esp,0xc
c000a788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a78c:	e8 cd ff ff ff       	call   c000a75e <File::~File()>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	83 ec 08             	sub    esp,0x8
c000a797:	68 14 01 00 00       	push   0x114
c000a79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a0:	e8 3d fc ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	c3                   	ret    

c000a7ac <Directory::~Directory()>:
c000a7ac:	83 ec 0c             	sub    esp,0xc
c000a7af:	ba dc dd 01 c0       	mov    edx,0xc001dddc
c000a7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7be:	83 ec 0c             	sub    esp,0xc
c000a7c1:	50                   	push   eax
c000a7c2:	e8 5d e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	90                   	nop
c000a7cb:	83 c4 0c             	add    esp,0xc
c000a7ce:	c3                   	ret    
c000a7cf:	90                   	nop

c000a7d0 <Directory::~Directory()>:
c000a7d0:	83 ec 0c             	sub    esp,0xc
c000a7d3:	83 ec 0c             	sub    esp,0xc
c000a7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7da:	e8 cd ff ff ff       	call   c000a7ac <Directory::~Directory()>
c000a7df:	83 c4 10             	add    esp,0x10
c000a7e2:	83 ec 08             	sub    esp,0x8
c000a7e5:	68 14 01 00 00       	push   0x114
c000a7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ee:	e8 ef fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7f3:	83 c4 10             	add    esp,0x10
c000a7f6:	83 c4 0c             	add    esp,0xc
c000a7f9:	c3                   	ret    

c000a7fa <Filesystem::Filesystem()>:
c000a7fa:	ba 58 dd 01 c0       	mov    edx,0xc001dd58
c000a7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a803:	89 10                	mov    DWORD PTR [eax],edx
c000a805:	8b 15 34 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d34
c000a80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a816:	a3 34 0d 02 c0       	mov    ds:0xc0020d34,eax
c000a81b:	90                   	nop
c000a81c:	c3                   	ret    
c000a81d:	90                   	nop

c000a81e <Filesystem::~Filesystem()>:
c000a81e:	ba 58 dd 01 c0       	mov    edx,0xc001dd58
c000a823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a827:	89 10                	mov    DWORD PTR [eax],edx
c000a829:	90                   	nop
c000a82a:	c3                   	ret    
c000a82b:	90                   	nop

c000a82c <Filesystem::~Filesystem()>:
c000a82c:	83 ec 0c             	sub    esp,0xc
c000a82f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a833:	e8 e6 ff ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c000a838:	83 c4 04             	add    esp,0x4
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	6a 08                	push   0x8
c000a840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a844:	e8 99 fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	83 c4 0c             	add    esp,0xc
c000a84f:	c3                   	ret    

c000a850 <Fs::getcwd(Process*, char*, int)>:
c000a850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a854:	31 c0                	xor    eax,eax
c000a856:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a859:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a85d:	7d 15                	jge    c000a874 <Fs::getcwd(Process*, char*, int)+0x24>
c000a85f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a863:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a86a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a86d:	84 c9                	test   cl,cl
c000a86f:	74 06                	je     c000a877 <Fs::getcwd(Process*, char*, int)+0x27>
c000a871:	40                   	inc    eax
c000a872:	eb e2                	jmp    c000a856 <Fs::getcwd(Process*, char*, int)+0x6>
c000a874:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a877:	31 c0                	xor    eax,eax
c000a879:	c3                   	ret    

c000a87a <Fs::initVFS()>:
c000a87a:	83 ec 18             	sub    esp,0x18
c000a87d:	6a 08                	push   0x8
c000a87f:	e8 35 cf ff ff       	call   c00077b9 <malloc>
c000a884:	89 04 24             	mov    DWORD PTR [esp],eax
c000a887:	e8 b4 c8 00 00       	call   c0017140 <FAT::FAT()>
c000a88c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a893:	e8 21 cf ff ff       	call   c00077b9 <malloc>
c000a898:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89b:	e8 fc d5 00 00       	call   c0017e9c <ISO9660::ISO9660()>
c000a8a0:	83 c4 1c             	add    esp,0x1c
c000a8a3:	c3                   	ret    

c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8a4:	55                   	push   ebp
c000a8a5:	57                   	push   edi
c000a8a6:	56                   	push   esi
c000a8a7:	53                   	push   ebx
c000a8a8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8ae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8b5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8bc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8c3:	68 00 04 00 00       	push   0x400
c000a8c8:	6a 00                	push   0x0
c000a8ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8ce:	56                   	push   esi
c000a8cf:	e8 fc 5b ff ff       	call   c00004d0 <memset>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8db:	75 0b                	jne    c000a8e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8dd:	50                   	push   eax
c000a8de:	50                   	push   eax
c000a8df:	57                   	push   edi
c000a8e0:	56                   	push   esi
c000a8e1:	e8 1a 5d ff ff       	call   c0000600 <strcpy>
c000a8e6:	eb 41                	jmp    c000a929 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8e8:	8a 07                	mov    al,BYTE PTR [edi]
c000a8ea:	3c 5c                	cmp    al,0x5c
c000a8ec:	74 04                	je     c000a8f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8ee:	3c 2f                	cmp    al,0x2f
c000a8f0:	75 18                	jne    c000a90a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8f5:	3c 60                	cmp    al,0x60
c000a8f7:	7e 03                	jle    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8f9:	83 e8 20             	sub    eax,0x20
c000a8fc:	88 04 24             	mov    BYTE PTR [esp],al
c000a8ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a906:	50                   	push   eax
c000a907:	50                   	push   eax
c000a908:	eb 18                	jmp    c000a922 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a90a:	50                   	push   eax
c000a90b:	50                   	push   eax
c000a90c:	55                   	push   ebp
c000a90d:	56                   	push   esi
c000a90e:	e8 ed 5c ff ff       	call   c0000600 <strcpy>
c000a913:	5a                   	pop    edx
c000a914:	59                   	pop    ecx
c000a915:	68 8a ec 01 c0       	push   0xc001ec8a
c000a91a:	56                   	push   esi
c000a91b:	e8 a0 5e ff ff       	call   c00007c0 <strcat>
c000a920:	5d                   	pop    ebp
c000a921:	58                   	pop    eax
c000a922:	57                   	push   edi
c000a923:	56                   	push   esi
c000a924:	e8 97 5e ff ff       	call   c00007c0 <strcat>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a92f:	3c 60                	cmp    al,0x60
c000a931:	7e 03                	jle    c000a936 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a933:	83 e8 20             	sub    eax,0x20
c000a936:	88 04 24             	mov    BYTE PTR [esp],al
c000a939:	88 03                	mov    BYTE PTR [ebx],al
c000a93b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a942:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a948:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a94c:	bf 03 00 00 00       	mov    edi,0x3
c000a951:	b8 03 00 00 00       	mov    eax,0x3
c000a956:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a959:	84 d2                	test   dl,dl
c000a95b:	0f 84 91 00 00 00    	je     c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a961:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a964:	80 fa 5c             	cmp    dl,0x5c
c000a967:	74 05                	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a969:	80 fa 2f             	cmp    dl,0x2f
c000a96c:	75 12                	jne    c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a96e:	89 c5                	mov    ebp,eax
c000a970:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a975:	74 09                	je     c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a977:	40                   	inc    eax
c000a978:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a97c:	89 cf                	mov    edi,ecx
c000a97e:	eb d6                	jmp    c000a956 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a980:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a985:	75 5b                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a987:	80 fa 2e             	cmp    dl,0x2e
c000a98a:	75 56                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a98c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a990:	74 19                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a992:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a997:	74 53                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a999:	89 f9                	mov    ecx,edi
c000a99b:	41                   	inc    ecx
c000a99c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a99f:	80 fa 2f             	cmp    dl,0x2f
c000a9a2:	74 f7                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a4:	80 fa 5c             	cmp    dl,0x5c
c000a9a7:	74 f2                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a9:	eb d1                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b0:	74 3a                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9b2:	83 f8 03             	cmp    eax,0x3
c000a9b5:	74 c5                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b7:	41                   	inc    ecx
c000a9b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9bb:	80 fa 2f             	cmp    dl,0x2f
c000a9be:	74 f7                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c0:	80 fa 5c             	cmp    dl,0x5c
c000a9c3:	74 f2                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c5:	48                   	dec    eax
c000a9c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9ca:	75 06                	jne    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9d0:	eb f3                	jmp    c000a9c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9d6:	74 07                	je     c000a9df <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9dc:	48                   	dec    eax
c000a9dd:	eb f3                	jmp    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9df:	40                   	inc    eax
c000a9e0:	eb 9a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e2:	80 fa 2f             	cmp    dl,0x2f
c000a9e5:	74 95                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e7:	80 fa 5c             	cmp    dl,0x5c
c000a9ea:	74 90                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9ef:	40                   	inc    eax
c000a9f0:	eb 8a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9f6:	83 ec 0c             	sub    esp,0xc
c000a9f9:	53                   	push   ebx
c000a9fa:	e8 41 5b ff ff       	call   c0000540 <strlen>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa07:	75 26                	jne    c000aa2f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa09:	83 ec 0c             	sub    esp,0xc
c000aa0c:	53                   	push   ebx
c000aa0d:	e8 2e 5b ff ff       	call   c0000540 <strlen>
c000aa12:	83 c4 10             	add    esp,0x10
c000aa15:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa1a:	74 26                	je     c000aa42 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa1c:	83 ec 0c             	sub    esp,0xc
c000aa1f:	53                   	push   ebx
c000aa20:	e8 1b 5b ff ff       	call   c0000540 <strlen>
c000aa25:	83 c4 10             	add    esp,0x10
c000aa28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa2d:	eb c7                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa2f:	83 ec 0c             	sub    esp,0xc
c000aa32:	53                   	push   ebx
c000aa33:	e8 08 5b ff ff       	call   c0000540 <strlen>
c000aa38:	83 c4 10             	add    esp,0x10
c000aa3b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa40:	74 c7                	je     c000aa09 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa42:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa48:	5b                   	pop    ebx
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	5d                   	pop    ebp
c000aa4c:	c3                   	ret    
c000aa4d:	90                   	nop

c000aa4e <File::File(char const*, Process*)>:
c000aa4e:	83 ec 0c             	sub    esp,0xc
c000aa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa55:	83 ec 08             	sub    esp,0x8
c000aa58:	6a 00                	push   0x0
c000aa5a:	50                   	push   eax
c000aa5b:	e8 e2 e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	ba c0 dd 01 c0       	mov    edx,0xc001ddc0
c000aa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6c:	89 10                	mov    DWORD PTR [eax],edx
c000aa6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7c:	83 c0 0d             	add    eax,0xd
c000aa7f:	83 ec 04             	sub    esp,0x4
c000aa82:	52                   	push   edx
c000aa83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa87:	50                   	push   eax
c000aa88:	e8 17 fe ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa8d:	83 c4 10             	add    esp,0x10
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa97:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aab6:	25 ff 00 00 00       	and    eax,0xff
c000aabb:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000aac2:	85 c0                	test   eax,eax
c000aac4:	74 42                	je     c000ab08 <File::File(char const*, Process*)+0xba>
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad0:	25 ff 00 00 00       	and    eax,0xff
c000aad5:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000aadc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aae2:	85 c0                	test   eax,eax
c000aae4:	75 22                	jne    c000ab08 <File::File(char const*, Process*)+0xba>
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf0:	25 ff 00 00 00       	and    eax,0xff
c000aaf5:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	50                   	push   eax
c000ab00:	e8 ff 1f 00 00       	call   c000cb04 <LogicalDisk::mount()>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	90                   	nop
c000ab09:	83 c4 0c             	add    esp,0xc
c000ab0c:	c3                   	ret    
c000ab0d:	90                   	nop

c000ab0e <File::open(FileOpenMode)>:
c000ab0e:	53                   	push   ebx
c000ab0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab14:	83 ec 08             	sub    esp,0x8
c000ab17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab1b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab22:	80 fa 19             	cmp    dl,0x19
c000ab25:	77 40                	ja     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab27:	8b 14 95 a0 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce60]
c000ab2e:	85 d2                	test   edx,edx
c000ab30:	74 35                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab32:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab38:	85 d2                	test   edx,edx
c000ab3a:	74 2b                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab3c:	b8 06 00 00 00       	mov    eax,0x6
c000ab41:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab45:	75 20                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab47:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab49:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab53:	51                   	push   ecx
c000ab54:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab57:	51                   	push   ecx
c000ab58:	52                   	push   edx
c000ab59:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	85 c0                	test   eax,eax
c000ab61:	75 04                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab63:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab67:	83 c4 08             	add    esp,0x8
c000ab6a:	5b                   	pop    ebx
c000ab6b:	c3                   	ret    

c000ab6c <File::close()>:
c000ab6c:	53                   	push   ebx
c000ab6d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab72:	83 ec 08             	sub    esp,0x8
c000ab75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab79:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab80:	80 fa 19             	cmp    dl,0x19
c000ab83:	77 41                	ja     c000abc6 <File::close()+0x5a>
c000ab85:	8b 1c 95 a0 31 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdce60]
c000ab8c:	85 db                	test   ebx,ebx
c000ab8e:	74 36                	je     c000abc6 <File::close()+0x5a>
c000ab90:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab97:	74 2d                	je     c000abc6 <File::close()+0x5a>
c000ab99:	b8 05 00 00 00       	mov    eax,0x5
c000ab9e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aba2:	74 22                	je     c000abc6 <File::close()+0x5a>
c000aba4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000aba8:	8b 04 95 a0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce60]
c000abaf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abb5:	53                   	push   ebx
c000abb6:	53                   	push   ebx
c000abb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abb9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abbf:	50                   	push   eax
c000abc0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	83 c4 08             	add    esp,0x8
c000abc9:	5b                   	pop    ebx
c000abca:	c3                   	ret    
c000abcb:	90                   	nop

c000abcc <File::seek(unsigned long long)>:
c000abcc:	56                   	push   esi
c000abcd:	53                   	push   ebx
c000abce:	b8 0b 00 00 00       	mov    eax,0xb
c000abd3:	51                   	push   ecx
c000abd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abdc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abe7:	80 fa 19             	cmp    dl,0x19
c000abea:	77 31                	ja     c000ac1d <File::seek(unsigned long long)+0x51>
c000abec:	8b 14 95 a0 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce60]
c000abf3:	85 d2                	test   edx,edx
c000abf5:	74 26                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000abf7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abfd:	85 d2                	test   edx,edx
c000abff:	74 1c                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac01:	b8 05 00 00 00       	mov    eax,0x5
c000ac06:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac0a:	74 11                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac0c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac0e:	53                   	push   ebx
c000ac0f:	51                   	push   ecx
c000ac10:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac16:	52                   	push   edx
c000ac17:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	5a                   	pop    edx
c000ac1e:	5b                   	pop    ebx
c000ac1f:	5e                   	pop    esi
c000ac20:	c3                   	ret    
c000ac21:	90                   	nop

c000ac22 <File::tell(unsigned long long*)>:
c000ac22:	83 ec 0c             	sub    esp,0xc
c000ac25:	b8 0b 00 00 00       	mov    eax,0xb
c000ac2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac2e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac35:	80 fa 19             	cmp    dl,0x19
c000ac38:	77 34                	ja     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac3a:	8b 14 95 a0 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce60]
c000ac41:	85 d2                	test   edx,edx
c000ac43:	74 29                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac45:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac4b:	85 d2                	test   edx,edx
c000ac4d:	74 1f                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac4f:	b8 05 00 00 00       	mov    eax,0x5
c000ac54:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac58:	74 14                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac5a:	50                   	push   eax
c000ac5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac67:	52                   	push   edx
c000ac68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 0c             	add    esp,0xc
c000ac71:	c3                   	ret    

c000ac72 <File::rewind()>:
c000ac72:	83 ec 10             	sub    esp,0x10
c000ac75:	6a 00                	push   0x0
c000ac77:	6a 00                	push   0x0
c000ac79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac7d:	e8 4a ff ff ff       	call   c000abcc <File::seek(unsigned long long)>
c000ac82:	83 c4 1c             	add    esp,0x1c
c000ac85:	c3                   	ret    

c000ac86 <File::unlink()>:
c000ac86:	83 ec 0c             	sub    esp,0xc
c000ac89:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac99:	80 f9 19             	cmp    cl,0x19
c000ac9c:	77 2f                	ja     c000accd <File::unlink()+0x47>
c000ac9e:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000aca5:	85 c9                	test   ecx,ecx
c000aca7:	74 24                	je     c000accd <File::unlink()+0x47>
c000aca9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acaf:	85 c9                	test   ecx,ecx
c000acb1:	74 1a                	je     c000accd <File::unlink()+0x47>
c000acb3:	b8 06 00 00 00       	mov    eax,0x6
c000acb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acbc:	75 0f                	jne    c000accd <File::unlink()+0x47>
c000acbe:	83 c2 0d             	add    edx,0xd
c000acc1:	50                   	push   eax
c000acc2:	50                   	push   eax
c000acc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acc5:	52                   	push   edx
c000acc6:	51                   	push   ecx
c000acc7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	83 c4 0c             	add    esp,0xc
c000acd0:	c3                   	ret    
c000acd1:	90                   	nop

c000acd2 <File::rename(char const*)>:
c000acd2:	83 ec 0c             	sub    esp,0xc
c000acd5:	b8 0b 00 00 00       	mov    eax,0xb
c000acda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ace5:	80 f9 19             	cmp    cl,0x19
c000ace8:	77 32                	ja     c000ad1c <File::rename(char const*)+0x4a>
c000acea:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000acf1:	85 c9                	test   ecx,ecx
c000acf3:	74 27                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acf5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acfb:	85 c9                	test   ecx,ecx
c000acfd:	74 1d                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acff:	b8 06 00 00 00       	mov    eax,0x6
c000ad04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad08:	75 12                	jne    c000ad1c <File::rename(char const*)+0x4a>
c000ad0a:	83 c2 0d             	add    edx,0xd
c000ad0d:	50                   	push   eax
c000ad0e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad14:	52                   	push   edx
c000ad15:	51                   	push   ecx
c000ad16:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	83 c4 0c             	add    esp,0xc
c000ad1f:	c3                   	ret    

c000ad20 <File::chfatattr(unsigned char, unsigned char)>:
c000ad20:	57                   	push   edi
c000ad21:	b8 0b 00 00 00       	mov    eax,0xb
c000ad26:	56                   	push   esi
c000ad27:	53                   	push   ebx
c000ad28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad3b:	80 f9 19             	cmp    cl,0x19
c000ad3e:	77 37                	ja     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad40:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000ad47:	85 c9                	test   ecx,ecx
c000ad49:	74 2c                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad51:	85 c9                	test   ecx,ecx
c000ad53:	74 22                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad55:	b8 06 00 00 00       	mov    eax,0x6
c000ad5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad5e:	75 17                	jne    c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad60:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad62:	89 f0                	mov    eax,esi
c000ad64:	83 c2 0d             	add    edx,0xd
c000ad67:	0f b6 f0             	movzx  esi,al
c000ad6a:	0f b6 db             	movzx  ebx,bl
c000ad6d:	56                   	push   esi
c000ad6e:	53                   	push   ebx
c000ad6f:	52                   	push   edx
c000ad70:	51                   	push   ecx
c000ad71:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad74:	83 c4 10             	add    esp,0x10
c000ad77:	5b                   	pop    ebx
c000ad78:	5e                   	pop    esi
c000ad79:	5f                   	pop    edi
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <File::exists()>:
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	31 c0                	xor    eax,eax
c000ad81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad85:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8c:	80 f9 19             	cmp    cl,0x19
c000ad8f:	77 24                	ja     c000adb5 <File::exists()+0x39>
c000ad91:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000ad98:	85 c9                	test   ecx,ecx
c000ad9a:	74 19                	je     c000adb5 <File::exists()+0x39>
c000ad9c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada2:	85 c9                	test   ecx,ecx
c000ada4:	74 0f                	je     c000adb5 <File::exists()+0x39>
c000ada6:	83 c2 0d             	add    edx,0xd
c000ada9:	50                   	push   eax
c000adaa:	50                   	push   eax
c000adab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adad:	52                   	push   edx
c000adae:	51                   	push   ecx
c000adaf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adb2:	83 c4 10             	add    esp,0x10
c000adb5:	83 c4 0c             	add    esp,0xc
c000adb8:	c3                   	ret    
c000adb9:	90                   	nop

c000adba <File::stat(unsigned long long*, bool*)>:
c000adba:	56                   	push   esi
c000adbb:	53                   	push   ebx
c000adbc:	50                   	push   eax
c000adbd:	b8 0b 00 00 00       	mov    eax,0xb
c000adc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000add5:	80 f9 19             	cmp    cl,0x19
c000add8:	77 3d                	ja     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adda:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000ade1:	85 c9                	test   ecx,ecx
c000ade3:	74 32                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000ade5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adeb:	85 c9                	test   ecx,ecx
c000aded:	74 28                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf5:	74 13                	je     c000ae0a <File::stat(unsigned long long*, bool*)+0x50>
c000adf7:	83 ec 04             	sub    esp,0x4
c000adfa:	56                   	push   esi
c000adfb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae01:	51                   	push   ecx
c000ae02:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae05:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae08:	eb 0a                	jmp    c000ae14 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae0a:	53                   	push   ebx
c000ae0b:	83 c2 0d             	add    edx,0xd
c000ae0e:	56                   	push   esi
c000ae0f:	52                   	push   edx
c000ae10:	51                   	push   ecx
c000ae11:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae14:	83 c4 10             	add    esp,0x10
c000ae17:	5a                   	pop    edx
c000ae18:	5b                   	pop    ebx
c000ae19:	5e                   	pop    esi
c000ae1a:	c3                   	ret    

c000ae1b <Fs::setcwd(Process*, char*)>:
c000ae1b:	55                   	push   ebp
c000ae1c:	57                   	push   edi
c000ae1d:	56                   	push   esi
c000ae1e:	53                   	push   ebx
c000ae1f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae32:	57                   	push   edi
c000ae33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae3e:	56                   	push   esi
c000ae3f:	e8 60 fa ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae44:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae47:	e8 f4 56 ff ff       	call   c0000540 <strlen>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	83 f8 02             	cmp    eax,0x2
c000ae52:	77 15                	ja     c000ae69 <Fs::setcwd(Process*, char*)+0x4e>
c000ae54:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae59:	83 eb 41             	sub    ebx,0x41
c000ae5c:	8b 04 9d a0 31 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdce60]
c000ae63:	85 c0                	test   eax,eax
c000ae65:	75 1c                	jne    c000ae83 <Fs::setcwd(Process*, char*)+0x68>
c000ae67:	eb 2f                	jmp    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae69:	83 ec 0c             	sub    esp,0xc
c000ae6c:	56                   	push   esi
c000ae6d:	e8 ce 56 ff ff       	call   c0000540 <strlen>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	83 f8 03             	cmp    eax,0x3
c000ae78:	75 57                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae7a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae7f:	75 50                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae81:	eb d1                	jmp    c000ae54 <Fs::setcwd(Process*, char*)+0x39>
c000ae83:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae8a:	75 0c                	jne    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	50                   	push   eax
c000ae90:	e8 6f 1c 00 00       	call   c000cb04 <LogicalDisk::mount()>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	b8 03 00 00 00       	mov    eax,0x3
c000ae9d:	83 fb 19             	cmp    ebx,0x19
c000aea0:	0f 87 c6 00 00 00    	ja     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aea6:	8b 14 9d a0 31 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdce60]
c000aead:	b8 05 00 00 00       	mov    eax,0x5
c000aeb2:	85 d2                	test   edx,edx
c000aeb4:	0f 84 b2 00 00 00    	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aeba:	b8 06 00 00 00       	mov    eax,0x6
c000aebf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aec6:	0f 85 92 00 00 00    	jne    c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000aecc:	e9 9b 00 00 00       	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aed1:	83 ec 0c             	sub    esp,0xc
c000aed4:	68 14 01 00 00       	push   0x114
c000aed9:	e8 db c8 ff ff       	call   c00077b9 <malloc>
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	89 c3                	mov    ebx,eax
c000aee3:	55                   	push   ebp
c000aee4:	56                   	push   esi
c000aee5:	50                   	push   eax
c000aee6:	e8 63 fb ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000aeeb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aef7:	50                   	push   eax
c000aef8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aefc:	50                   	push   eax
c000aefd:	53                   	push   ebx
c000aefe:	e8 b7 fe ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 f8 02             	cmp    eax,0x2
c000af09:	74 04                	je     c000af0f <Fs::setcwd(Process*, char*)+0xf4>
c000af0b:	85 c0                	test   eax,eax
c000af0d:	74 1c                	je     c000af2b <Fs::setcwd(Process*, char*)+0x110>
c000af0f:	b8 01 00 00 00       	mov    eax,0x1
c000af14:	85 db                	test   ebx,ebx
c000af16:	74 54                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af1d:	53                   	push   ebx
c000af1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af21:	83 c4 10             	add    esp,0x10
c000af24:	b8 01 00 00 00       	mov    eax,0x1
c000af29:	eb 41                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af2b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af30:	75 1c                	jne    c000af4e <Fs::setcwd(Process*, char*)+0x133>
c000af32:	b8 02 00 00 00       	mov    eax,0x2
c000af37:	85 db                	test   ebx,ebx
c000af39:	74 31                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af40:	53                   	push   ebx
c000af41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	b8 02 00 00 00       	mov    eax,0x2
c000af4c:	eb 1e                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af4e:	85 db                	test   ebx,ebx
c000af50:	74 0c                	je     c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af57:	53                   	push   ebx
c000af58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	50                   	push   eax
c000af5f:	50                   	push   eax
c000af60:	56                   	push   esi
c000af61:	57                   	push   edi
c000af62:	e8 99 56 ff ff       	call   c0000600 <strcpy>
c000af67:	83 c4 10             	add    esp,0x10
c000af6a:	31 c0                	xor    eax,eax
c000af6c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af72:	5b                   	pop    ebx
c000af73:	5e                   	pop    esi
c000af74:	5f                   	pop    edi
c000af75:	5d                   	pop    ebp
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <Directory::Directory(char const*, Process*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	6a 00                	push   0x0
c000af84:	50                   	push   eax
c000af85:	e8 b8 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	ba dc dd 01 c0       	mov    edx,0xc001dddc
c000af92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af96:	89 10                	mov    DWORD PTR [eax],edx
c000af98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af9c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	83 c0 0d             	add    eax,0xd
c000afa9:	83 ec 04             	sub    esp,0x4
c000afac:	52                   	push   edx
c000afad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb1:	50                   	push   eax
c000afb2:	e8 ed f8 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afda:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe0:	25 ff 00 00 00       	and    eax,0xff
c000afe5:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000afec:	85 c0                	test   eax,eax
c000afee:	74 42                	je     c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000affa:	25 ff 00 00 00       	and    eax,0xff
c000afff:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000b006:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b00c:	85 c0                	test   eax,eax
c000b00e:	75 22                	jne    c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b01a:	25 ff 00 00 00       	and    eax,0xff
c000b01f:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	50                   	push   eax
c000b02a:	e8 d5 1a 00 00       	call   c000cb04 <LogicalDisk::mount()>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	90                   	nop
c000b033:	83 c4 0c             	add    esp,0xc
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <Directory::open()>:
c000b038:	53                   	push   ebx
c000b039:	b8 0b 00 00 00       	mov    eax,0xb
c000b03e:	83 ec 08             	sub    esp,0x8
c000b041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b045:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b04c:	80 fa 19             	cmp    dl,0x19
c000b04f:	77 3d                	ja     c000b08e <Directory::open()+0x56>
c000b051:	8b 14 95 a0 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce60]
c000b058:	85 d2                	test   edx,edx
c000b05a:	74 32                	je     c000b08e <Directory::open()+0x56>
c000b05c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b062:	85 d2                	test   edx,edx
c000b064:	74 28                	je     c000b08e <Directory::open()+0x56>
c000b066:	b8 06 00 00 00       	mov    eax,0x6
c000b06b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b06f:	75 1d                	jne    c000b08e <Directory::open()+0x56>
c000b071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b077:	50                   	push   eax
c000b078:	8b 02                	mov    eax,DWORD PTR [edx]
c000b07a:	51                   	push   ecx
c000b07b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b07e:	51                   	push   ecx
c000b07f:	52                   	push   edx
c000b080:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	75 04                	jne    c000b08e <Directory::open()+0x56>
c000b08a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b08e:	83 c4 08             	add    esp,0x8
c000b091:	5b                   	pop    ebx
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Directory::close()>:
c000b094:	53                   	push   ebx
c000b095:	b8 0b 00 00 00       	mov    eax,0xb
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0a8:	80 fa 19             	cmp    dl,0x19
c000b0ab:	77 41                	ja     c000b0ee <Directory::close()+0x5a>
c000b0ad:	8b 1c 95 a0 31 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdce60]
c000b0b4:	85 db                	test   ebx,ebx
c000b0b6:	74 36                	je     c000b0ee <Directory::close()+0x5a>
c000b0b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0bf:	74 2d                	je     c000b0ee <Directory::close()+0x5a>
c000b0c1:	b8 05 00 00 00       	mov    eax,0x5
c000b0c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0ca:	74 22                	je     c000b0ee <Directory::close()+0x5a>
c000b0cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0d0:	8b 04 95 a0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce60]
c000b0d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0dd:	53                   	push   ebx
c000b0de:	53                   	push   ebx
c000b0df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0e7:	50                   	push   eax
c000b0e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	83 c4 08             	add    esp,0x8
c000b0f1:	5b                   	pop    ebx
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <Directory::unlink()>:
c000b0f4:	83 ec 0c             	sub    esp,0xc
c000b0f7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b100:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b107:	80 f9 19             	cmp    cl,0x19
c000b10a:	77 2f                	ja     c000b13b <Directory::unlink()+0x47>
c000b10c:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000b113:	85 c9                	test   ecx,ecx
c000b115:	74 24                	je     c000b13b <Directory::unlink()+0x47>
c000b117:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b11d:	85 c9                	test   ecx,ecx
c000b11f:	74 1a                	je     c000b13b <Directory::unlink()+0x47>
c000b121:	b8 06 00 00 00       	mov    eax,0x6
c000b126:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b12a:	75 0f                	jne    c000b13b <Directory::unlink()+0x47>
c000b12c:	83 c2 0d             	add    edx,0xd
c000b12f:	50                   	push   eax
c000b130:	50                   	push   eax
c000b131:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b133:	52                   	push   edx
c000b134:	51                   	push   ecx
c000b135:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	83 c4 0c             	add    esp,0xc
c000b13e:	c3                   	ret    
c000b13f:	90                   	nop

c000b140 <Directory::rename(char const*)>:
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	b8 0b 00 00 00       	mov    eax,0xb
c000b148:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b14c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b153:	80 f9 19             	cmp    cl,0x19
c000b156:	77 32                	ja     c000b18a <Directory::rename(char const*)+0x4a>
c000b158:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000b15f:	85 c9                	test   ecx,ecx
c000b161:	74 27                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b169:	85 c9                	test   ecx,ecx
c000b16b:	74 1d                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b16d:	b8 06 00 00 00       	mov    eax,0x6
c000b172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b176:	75 12                	jne    c000b18a <Directory::rename(char const*)+0x4a>
c000b178:	83 c2 0d             	add    edx,0xd
c000b17b:	50                   	push   eax
c000b17c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b17e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b182:	52                   	push   edx
c000b183:	51                   	push   ecx
c000b184:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 c4 0c             	add    esp,0xc
c000b18d:	c3                   	ret    

c000b18e <Directory::exists()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	31 c0                	xor    eax,eax
c000b193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b197:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b19e:	80 f9 19             	cmp    cl,0x19
c000b1a1:	77 24                	ja     c000b1c7 <Directory::exists()+0x39>
c000b1a3:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000b1aa:	85 c9                	test   ecx,ecx
c000b1ac:	74 19                	je     c000b1c7 <Directory::exists()+0x39>
c000b1ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1b4:	85 c9                	test   ecx,ecx
c000b1b6:	74 0f                	je     c000b1c7 <Directory::exists()+0x39>
c000b1b8:	83 c2 0d             	add    edx,0xd
c000b1bb:	50                   	push   eax
c000b1bc:	50                   	push   eax
c000b1bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1bf:	52                   	push   edx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	c3                   	ret    
c000b1cb:	90                   	nop

c000b1cc <Directory::read(dirent*)>:
c000b1cc:	83 ec 1c             	sub    esp,0x1c
c000b1cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1df:	80 fa 19             	cmp    dl,0x19
c000b1e2:	77 30                	ja     c000b214 <Directory::read(dirent*)+0x48>
c000b1e4:	8b 14 95 a0 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce60]
c000b1eb:	85 d2                	test   edx,edx
c000b1ed:	74 25                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1f6:	74 1c                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b201:	52                   	push   edx
c000b202:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b206:	6a 00                	push   0x0
c000b208:	68 10 01 00 00       	push   0x110
c000b20d:	51                   	push   ecx
c000b20e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b211:	83 c4 20             	add    esp,0x20
c000b214:	83 c4 1c             	add    esp,0x1c
c000b217:	c3                   	ret    

c000b218 <Directory::create()>:
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	b8 0b 00 00 00       	mov    eax,0xb
c000b220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b22b:	80 f9 19             	cmp    cl,0x19
c000b22e:	77 2f                	ja     c000b25f <Directory::create()+0x47>
c000b230:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c000b237:	85 c9                	test   ecx,ecx
c000b239:	74 24                	je     c000b25f <Directory::create()+0x47>
c000b23b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 1a                	je     c000b25f <Directory::create()+0x47>
c000b245:	b8 06 00 00 00       	mov    eax,0x6
c000b24a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24e:	75 0f                	jne    c000b25f <Directory::create()+0x47>
c000b250:	83 c2 0d             	add    edx,0xd
c000b253:	50                   	push   eax
c000b254:	50                   	push   eax
c000b255:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b257:	52                   	push   edx
c000b258:	51                   	push   ecx
c000b259:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b25c:	83 c4 10             	add    esp,0x10
c000b25f:	83 c4 0c             	add    esp,0xc
c000b262:	c3                   	ret    
c000b263:	90                   	nop

c000b264 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b264:	b8 0a 00 00 00       	mov    eax,0xa
c000b269:	c3                   	ret    
c000b26a:	66 90                	xchg   ax,ax

c000b26c <Bus::Bus(char const*)>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	83 ec 08             	sub    esp,0x8
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	50                   	push   eax
c000b27b:	e8 30 08 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	ba f8 dd 01 c0       	mov    edx,0xc001ddf8
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b29c:	90                   	nop
c000b29d:	83 c4 0c             	add    esp,0xc
c000b2a0:	c3                   	ret    
c000b2a1:	90                   	nop
c000b2a2:	66 90                	xchg   ax,ax

c000b2a4 <Bus::~Bus()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	ba f8 dd 01 c0       	mov    edx,0xc001ddf8
c000b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b0:	89 10                	mov    DWORD PTR [eax],edx
c000b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	50                   	push   eax
c000b2ba:	e8 5b 05 00 00       	call   c000b81a <Device::~Device()>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	90                   	nop
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	c3                   	ret    
c000b2c7:	90                   	nop

c000b2c8 <Bus::~Bus()>:
c000b2c8:	83 ec 0c             	sub    esp,0xc
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d2:	e8 cd ff ff ff       	call   c000b2a4 <Bus::~Bus()>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	68 58 01 00 00       	push   0x158
c000b2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e6:	e8 f7 f0 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	c3                   	ret    

c000b2f2 <beepThread(void*)>:
c000b2f2:	83 ec 0c             	sub    esp,0xc
c000b2f5:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000b2fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2fe:	48                   	dec    eax
c000b2ff:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000b304:	75 01                	jne    c000b307 <beepThread(void*)+0x15>
c000b306:	fb                   	sti    
c000b307:	83 ec 0c             	sub    esp,0xc
c000b30a:	6b c2 0a             	imul   eax,edx,0xa
c000b30d:	50                   	push   eax
c000b30e:	e8 11 88 00 00       	call   c0013b24 <milliTenthSleep(unsigned int)>
c000b313:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b31a:	e8 b7 a5 00 00       	call   c00158d6 <HalMakeBeep(int)>
c000b31f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b327:	83 c4 1c             	add    esp,0x1c
c000b32a:	e9 f1 86 00 00       	jmp    c0013a20 <blockTask(TaskState)>

c000b32f <Krnl::beep(int, int, bool)>:
c000b32f:	56                   	push   esi
c000b330:	53                   	push   ebx
c000b331:	83 ec 10             	sub    esp,0x10
c000b334:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b340:	e8 91 a5 00 00       	call   c00158d6 <HalMakeBeep(int)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	89 f0                	mov    eax,esi
c000b34a:	84 c0                	test   al,al
c000b34c:	74 1e                	je     c000b36c <Krnl::beep(int, int, bool)+0x3d>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	6b db 0a             	imul   ebx,ebx,0xa
c000b354:	53                   	push   ebx
c000b355:	e8 ca 87 00 00       	call   c0013b24 <milliTenthSleep(unsigned int)>
c000b35a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b362:	83 c4 14             	add    esp,0x14
c000b365:	5b                   	pop    ebx
c000b366:	5e                   	pop    esi
c000b367:	e9 6a a5 00 00       	jmp    c00158d6 <HalMakeBeep(int)>
c000b36c:	68 e6 00 00 00       	push   0xe6
c000b371:	53                   	push   ebx
c000b372:	68 f2 b2 00 c0       	push   0xc000b2f2
c000b377:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c000b37d:	e8 82 82 00 00       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c000b382:	83 c4 14             	add    esp,0x14
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    

c000b388 <User::loadClockSettings(int)>:
c000b388:	53                   	push   ebx
c000b389:	83 ec 14             	sub    esp,0x14
c000b38c:	68 14 01 00 00       	push   0x114
c000b391:	e8 23 c4 ff ff       	call   c00077b9 <malloc>
c000b396:	83 c4 0c             	add    esp,0xc
c000b399:	89 c3                	mov    ebx,eax
c000b39b:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c000b3a1:	68 1c de 01 c0       	push   0xc001de1c
c000b3a6:	50                   	push   eax
c000b3a7:	e8 a2 f6 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000b3ac:	58                   	pop    eax
c000b3ad:	5a                   	pop    edx
c000b3ae:	6a 01                	push   0x1
c000b3b0:	53                   	push   ebx
c000b3b1:	e8 58 f7 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000b3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3b9:	e8 ae f7 ff ff       	call   c000ab6c <File::close()>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	85 db                	test   ebx,ebx
c000b3c3:	74 0f                	je     c000b3d4 <User::loadClockSettings(int)+0x4c>
c000b3c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3ce:	83 c4 08             	add    esp,0x8
c000b3d1:	5b                   	pop    ebx
c000b3d2:	ff e0                	jmp    eax
c000b3d4:	83 c4 08             	add    esp,0x8
c000b3d7:	5b                   	pop    ebx
c000b3d8:	c3                   	ret    
c000b3d9:	90                   	nop

c000b3da <Clock::Clock(char const*)>:
c000b3da:	83 ec 0c             	sub    esp,0xc
c000b3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e1:	83 ec 08             	sub    esp,0x8
c000b3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e8:	50                   	push   eax
c000b3e9:	e8 c2 06 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	ba 44 de 01 c0       	mov    edx,0xc001de44
c000b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fa:	89 10                	mov    DWORD PTR [eax],edx
c000b3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b400:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b40a:	90                   	nop
c000b40b:	83 c4 0c             	add    esp,0xc
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <Clock::~Clock()>:
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	ba 44 de 01 c0       	mov    edx,0xc001de44
c000b418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41c:	89 10                	mov    DWORD PTR [eax],edx
c000b41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	50                   	push   eax
c000b426:	e8 ef 03 00 00       	call   c000b81a <Device::~Device()>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	90                   	nop
c000b42f:	83 c4 0c             	add    esp,0xc
c000b432:	c3                   	ret    
c000b433:	90                   	nop

c000b434 <Clock::~Clock()>:
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43e:	e8 cd ff ff ff       	call   c000b410 <Clock::~Clock()>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	68 58 01 00 00       	push   0x158
c000b44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b452:	e8 8b ef ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	c3                   	ret    

c000b45e <Clock::timeInSecondsLocal()>:
c000b45e:	53                   	push   ebx
c000b45f:	83 ec 14             	sub    esp,0x14
c000b462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b466:	8b 10                	mov    edx,DWORD PTR [eax]
c000b468:	50                   	push   eax
c000b469:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b46c:	0f b6 0d 38 0d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020d38
c000b473:	03 0d 3c 0d 02 c0    	add    ecx,DWORD PTR ds:0xc0020d3c
c000b479:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b47f:	89 cb                	mov    ebx,ecx
c000b481:	c1 fb 1f             	sar    ebx,0x1f
c000b484:	01 c8                	add    eax,ecx
c000b486:	11 da                	adc    edx,ebx
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	31 c9                	xor    ecx,ecx
c000b48d:	80 3d 39 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d39,0x0
c000b494:	74 05                	je     c000b49b <Clock::timeInSecondsLocal()+0x3d>
c000b496:	b9 08 07 00 00       	mov    ecx,0x708
c000b49b:	31 db                	xor    ebx,ebx
c000b49d:	01 c8                	add    eax,ecx
c000b49f:	11 da                	adc    edx,ebx
c000b4a1:	83 c4 08             	add    esp,0x8
c000b4a4:	5b                   	pop    ebx
c000b4a5:	c3                   	ret    

c000b4a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4a6:	57                   	push   edi
c000b4a7:	56                   	push   esi
c000b4a8:	53                   	push   ebx
c000b4a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ba:	0f b6 05 38 0d 02 c0 	movzx  eax,BYTE PTR ds:0xc0020d38
c000b4c1:	03 05 3c 0d 02 c0    	add    eax,DWORD PTR ds:0xc0020d3c
c000b4c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4cd:	99                   	cdq    
c000b4ce:	29 c6                	sub    esi,eax
c000b4d0:	19 d7                	sbb    edi,edx
c000b4d2:	89 f0                	mov    eax,esi
c000b4d4:	89 fa                	mov    edx,edi
c000b4d6:	31 f6                	xor    esi,esi
c000b4d8:	80 3d 39 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d39,0x0
c000b4df:	74 05                	je     c000b4e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4e1:	be 08 07 00 00       	mov    esi,0x708
c000b4e6:	31 ff                	xor    edi,edi
c000b4e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4ec:	29 f0                	sub    eax,esi
c000b4ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4f2:	19 fa                	sbb    edx,edi
c000b4f4:	89 d8                	mov    eax,ebx
c000b4f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4fa:	5b                   	pop    ebx
c000b4fb:	5e                   	pop    esi
c000b4fc:	5f                   	pop    edi
c000b4fd:	ff e0                	jmp    eax

c000b4ff <datetimeToSeconds(datetime_t)>:
c000b4ff:	55                   	push   ebp
c000b500:	57                   	push   edi
c000b501:	56                   	push   esi
c000b502:	53                   	push   ebx
c000b503:	83 ec 14             	sub    esp,0x14
c000b506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b50a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b50e:	89 d3                	mov    ebx,edx
c000b510:	0f b6 c6             	movzx  eax,dh
c000b513:	c1 eb 10             	shr    ebx,0x10
c000b516:	48                   	dec    eax
c000b517:	66 81 eb 6c 07       	sub    bx,0x76c
c000b51c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b520:	0f b6 f5             	movzx  esi,ch
c000b523:	89 cf                	mov    edi,ecx
c000b525:	6b f6 3c             	imul   esi,esi,0x3c
c000b528:	c1 ef 10             	shr    edi,0x10
c000b52b:	0f b6 c9             	movzx  ecx,cl
c000b52e:	89 f8                	mov    eax,edi
c000b530:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b536:	0f b6 f8             	movzx  edi,al
c000b539:	0f b6 d2             	movzx  edx,dl
c000b53c:	01 fe                	add    esi,edi
c000b53e:	01 f1                	add    ecx,esi
c000b540:	0f b7 f3             	movzx  esi,bx
c000b543:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b547:	c1 f9 1f             	sar    ecx,0x1f
c000b54a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b54f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b553:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b558:	8b 0c 8d 80 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2180]
c000b55f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b563:	76 29                	jbe    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b565:	f6 c3 03             	test   bl,0x3
c000b568:	75 24                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b56a:	31 d2                	xor    edx,edx
c000b56c:	bf 64 00 00 00       	mov    edi,0x64
c000b571:	89 d8                	mov    eax,ebx
c000b573:	66 f7 f7             	div    di
c000b576:	66 85 d2             	test   dx,dx
c000b579:	75 12                	jne    c000b58d <datetimeToSeconds(datetime_t)+0x8e>
c000b57b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b581:	bf 90 01 00 00       	mov    edi,0x190
c000b586:	99                   	cdq    
c000b587:	f7 ff                	idiv   edi
c000b589:	85 d2                	test   edx,edx
c000b58b:	75 01                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b58d:	41                   	inc    ecx
c000b58e:	66 83 fb 46          	cmp    bx,0x46
c000b592:	76 45                	jbe    c000b5d9 <datetimeToSeconds(datetime_t)+0xda>
c000b594:	bb 46 00 00 00       	mov    ebx,0x46
c000b599:	bf 64 00 00 00       	mov    edi,0x64
c000b59e:	bd 90 01 00 00       	mov    ebp,0x190
c000b5a3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5a8:	f6 c3 03             	test   bl,0x3
c000b5ab:	75 23                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5ad:	89 d8                	mov    eax,ebx
c000b5af:	99                   	cdq    
c000b5b0:	f7 ff                	idiv   edi
c000b5b2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5b7:	85 d2                	test   edx,edx
c000b5b9:	75 15                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5bb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5c1:	99                   	cdq    
c000b5c2:	f7 fd                	idiv   ebp
c000b5c4:	31 c0                	xor    eax,eax
c000b5c6:	85 d2                	test   edx,edx
c000b5c8:	0f 94 c0             	sete   al
c000b5cb:	05 6d 01 00 00       	add    eax,0x16d
c000b5d0:	01 c1                	add    ecx,eax
c000b5d2:	43                   	inc    ebx
c000b5d3:	39 f3                	cmp    ebx,esi
c000b5d5:	7c cc                	jl     c000b5a3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5d7:	eb 3b                	jmp    c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5d9:	74 39                	je     c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5db:	b8 45 00 00 00       	mov    eax,0x45
c000b5e0:	89 c2                	mov    edx,eax
c000b5e2:	83 e2 03             	and    edx,0x3
c000b5e5:	39 f0                	cmp    eax,esi
c000b5e7:	7e 13                	jle    c000b5fc <datetimeToSeconds(datetime_t)+0xfd>
c000b5e9:	85 d2                	test   edx,edx
c000b5eb:	0f 94 c2             	sete   dl
c000b5ee:	48                   	dec    eax
c000b5ef:	0f b6 d2             	movzx  edx,dl
c000b5f2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5f8:	29 d1                	sub    ecx,edx
c000b5fa:	eb e4                	jmp    c000b5e0 <datetimeToSeconds(datetime_t)+0xe1>
c000b5fc:	b8 6d 01 00 00       	mov    eax,0x16d
c000b601:	85 d2                	test   edx,edx
c000b603:	75 0d                	jne    c000b612 <datetimeToSeconds(datetime_t)+0x113>
c000b605:	31 c0                	xor    eax,eax
c000b607:	66 85 db             	test   bx,bx
c000b60a:	0f 95 c0             	setne  al
c000b60d:	05 6d 01 00 00       	add    eax,0x16d
c000b612:	29 c1                	sub    ecx,eax
c000b614:	b8 80 51 01 00       	mov    eax,0x15180
c000b619:	f7 e9                	imul   ecx
c000b61b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b61f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b623:	83 c4 14             	add    esp,0x14
c000b626:	5b                   	pop    ebx
c000b627:	5e                   	pop    esi
c000b628:	5f                   	pop    edi
c000b629:	5d                   	pop    ebp
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b633:	8b 06                	mov    eax,DWORD PTR [esi]
c000b635:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b63c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b640:	e8 ba fe ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c000b645:	59                   	pop    ecx
c000b646:	0f b6 0d 38 0d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020d38
c000b64d:	5b                   	pop    ebx
c000b64e:	03 0d 3c 0d 02 c0    	add    ecx,DWORD PTR ds:0xc0020d3c
c000b654:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b65a:	89 cb                	mov    ebx,ecx
c000b65c:	c1 fb 1f             	sar    ebx,0x1f
c000b65f:	29 c8                	sub    eax,ecx
c000b661:	19 da                	sbb    edx,ebx
c000b663:	31 c9                	xor    ecx,ecx
c000b665:	80 3d 39 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d39,0x0
c000b66c:	74 05                	je     c000b673 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b66e:	b9 08 07 00 00       	mov    ecx,0x708
c000b673:	31 db                	xor    ebx,ebx
c000b675:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b679:	29 c8                	sub    eax,ecx
c000b67b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b67f:	19 da                	sbb    edx,ebx
c000b681:	89 f8                	mov    eax,edi
c000b683:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b687:	5b                   	pop    ebx
c000b688:	5e                   	pop    esi
c000b689:	5f                   	pop    edi
c000b68a:	ff e0                	jmp    eax

c000b68c <secondsToDatetime(unsigned long long)>:
c000b68c:	55                   	push   ebp
c000b68d:	57                   	push   edi
c000b68e:	56                   	push   esi
c000b68f:	53                   	push   ebx
c000b690:	83 ec 1c             	sub    esp,0x1c
c000b693:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b697:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b69b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b69f:	6a 00                	push   0x0
c000b6a1:	68 80 51 01 00       	push   0x15180
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	e8 73 0a 01 00       	call   c001c120 <__udivdi3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ba:	6a 00                	push   0x0
c000b6bc:	68 80 51 01 00       	push   0x15180
c000b6c1:	55                   	push   ebp
c000b6c2:	57                   	push   edi
c000b6c3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6c8:	e8 53 0b 01 00       	call   c001c220 <__umoddi3>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	99                   	cdq    
c000b6d1:	f7 ff                	idiv   edi
c000b6d3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6d8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6db:	89 d0                	mov    eax,edx
c000b6dd:	99                   	cdq    
c000b6de:	f7 ff                	idiv   edi
c000b6e0:	85 db                	test   ebx,ebx
c000b6e2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6e5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6e8:	79 11                	jns    c000b6fb <secondsToDatetime(unsigned long long)+0x6f>
c000b6ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6ee:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6f4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6f9:	eb 07                	jmp    c000b702 <secondsToDatetime(unsigned long long)+0x76>
c000b6fb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b700:	89 d8                	mov    eax,ebx
c000b702:	bf b4 05 00 00       	mov    edi,0x5b4
c000b707:	99                   	cdq    
c000b708:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b70d:	f7 f9                	idiv   ecx
c000b70f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b718:	31 d2                	xor    edx,edx
c000b71a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b722:	01 c3                	add    ebx,eax
c000b724:	89 d8                	mov    eax,ebx
c000b726:	f7 f1                	div    ecx
c000b728:	31 d2                	xor    edx,edx
c000b72a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b72d:	89 d8                	mov    eax,ebx
c000b72f:	f7 f7                	div    edi
c000b731:	31 d2                	xor    edx,edx
c000b733:	29 c1                	sub    ecx,eax
c000b735:	89 d8                	mov    eax,ebx
c000b737:	f7 f5                	div    ebp
c000b739:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b73e:	29 c1                	sub    ecx,eax
c000b740:	31 d2                	xor    edx,edx
c000b742:	89 c8                	mov    eax,ecx
c000b744:	f7 f5                	div    ebp
c000b746:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b74f:	31 d2                	xor    edx,edx
c000b751:	89 c8                	mov    eax,ecx
c000b753:	f7 f5                	div    ebp
c000b755:	31 d2                	xor    edx,edx
c000b757:	01 c3                	add    ebx,eax
c000b759:	89 c8                	mov    eax,ecx
c000b75b:	f7 f7                	div    edi
c000b75d:	bf 99 00 00 00       	mov    edi,0x99
c000b762:	29 c3                	sub    ebx,eax
c000b764:	31 d2                	xor    edx,edx
c000b766:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b76e:	29 c3                	sub    ebx,eax
c000b770:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b773:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b776:	bb 05 00 00 00       	mov    ebx,0x5
c000b77b:	83 c1 02             	add    ecx,0x2
c000b77e:	89 c8                	mov    eax,ecx
c000b780:	f7 f7                	div    edi
c000b782:	31 d2                	xor    edx,edx
c000b784:	89 c7                	mov    edi,eax
c000b786:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b78c:	83 c0 02             	add    eax,0x2
c000b78f:	f7 f3                	div    ebx
c000b791:	89 eb                	mov    ebx,ebp
c000b793:	29 c3                	sub    ebx,eax
c000b795:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b79b:	88 1e                	mov    BYTE PTR [esi],bl
c000b79d:	19 c0                	sbb    eax,eax
c000b79f:	31 d2                	xor    edx,edx
c000b7a1:	83 e0 0c             	and    eax,0xc
c000b7a4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7a8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7b0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7b4:	83 f9 01             	cmp    ecx,0x1
c000b7b7:	0f 96 c2             	setbe  dl
c000b7ba:	41                   	inc    ecx
c000b7bb:	01 d0                	add    eax,edx
c000b7bd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7c0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7c4:	83 c4 1c             	add    esp,0x1c
c000b7c7:	89 f0                	mov    eax,esi
c000b7c9:	5b                   	pop    ebx
c000b7ca:	5e                   	pop    esi
c000b7cb:	5f                   	pop    edi
c000b7cc:	5d                   	pop    ebp
c000b7cd:	c2 04 00             	ret    0x4

c000b7d0 <Clock::timeInDatetimeLocal()>:
c000b7d0:	53                   	push   ebx
c000b7d1:	83 ec 14             	sub    esp,0x14
c000b7d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7dc:	e8 7d fc ff ff       	call   c000b45e <Clock::timeInSecondsLocal()>
c000b7e1:	83 c4 0c             	add    esp,0xc
c000b7e4:	52                   	push   edx
c000b7e5:	50                   	push   eax
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 a0 fe ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c000b7ec:	89 d8                	mov    eax,ebx
c000b7ee:	83 c4 14             	add    esp,0x14
c000b7f1:	5b                   	pop    ebx
c000b7f2:	c2 04 00             	ret    0x4
c000b7f5:	90                   	nop

c000b7f6 <Device::hibernate()>:
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <Device::wake()>:
c000b7f8:	c3                   	ret    
c000b7f9:	90                   	nop

c000b7fa <Device::detect()>:
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <Device::disableLegacy()>:
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Device::powerSaving(PowerSavingLevel)>:
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <DriverlessDevice::close(int, int, void*)>:
c000b800:	31 c0                	xor    eax,eax
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <DriverlessDevice::detect()>:
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <DriverlessDevice::open(int, int, void*)>:
c000b806:	83 ec 18             	sub    esp,0x18
c000b809:	68 b0 de 01 c0       	push   0xc001deb0
c000b80e:	e8 10 49 00 00       	call   c0010123 <KePanic(char const*)>
c000b813:	83 c8 ff             	or     eax,0xffffffff
c000b816:	83 c4 1c             	add    esp,0x1c
c000b819:	c3                   	ret    

c000b81a <Device::~Device()>:
c000b81a:	ba 10 df 01 c0       	mov    edx,0xc001df10
c000b81f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b823:	89 10                	mov    DWORD PTR [eax],edx
c000b825:	90                   	nop
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <Device::~Device()>:
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b82f:	e8 e6 ff ff ff       	call   c000b81a <Device::~Device()>
c000b834:	83 c4 04             	add    esp,0x4
c000b837:	83 ec 08             	sub    esp,0x8
c000b83a:	68 58 01 00 00       	push   0x158
c000b83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b843:	e8 9a eb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Device::findAndLoadDriver()>:
c000b850:	c7 44 24 04 ce de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dece
c000b858:	e9 7b ec ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000b85d:	90                   	nop

c000b85e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b85e:	57                   	push   edi
c000b85f:	b9 09 00 00 00       	mov    ecx,0x9
c000b864:	56                   	push   esi
c000b865:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b869:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b86d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b877:	81 c7 18 01 00 00    	add    edi,0x118
c000b87d:	fc                   	cld    
c000b87e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b880:	5e                   	pop    esi
c000b881:	5f                   	pop    edi
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Device::preOpenACPI(void*, char*, char*)>:
c000b884:	57                   	push   edi
c000b885:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b88a:	56                   	push   esi
c000b88b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b893:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b89d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8a3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8af:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8b4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8c0:	5e                   	pop    esi
c000b8c1:	5f                   	pop    edi
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8d5:	0f b6 c0             	movzx  eax,al
c000b8d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8e8:	5b                   	pop    ebx
c000b8e9:	e9 a6 05 00 00       	jmp    c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8ee <Device::getParent()>:
c000b8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b902:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b90b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b90f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b913:	e9 e8 06 00 00       	jmp    c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b918 <Device::addChild(Device*)>:
c000b918:	53                   	push   ebx
c000b919:	83 ec 08             	sub    esp,0x8
c000b91c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b924:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b92a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b930:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b932:	85 d2                	test   edx,edx
c000b934:	74 04                	je     c000b93a <Device::addChild(Device*)+0x22>
c000b936:	89 d3                	mov    ebx,edx
c000b938:	eb f6                	jmp    c000b930 <Device::addChild(Device*)+0x18>
c000b93a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b93d:	83 ec 0c             	sub    esp,0xc
c000b940:	6a 08                	push   0x8
c000b942:	e8 72 be ff ff       	call   c00077b9 <malloc>
c000b947:	89 03                	mov    DWORD PTR [ebx],eax
c000b949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b94f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b956:	83 c4 18             	add    esp,0x18
c000b959:	5b                   	pop    ebx
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::removeAllChildren()>:
c000b95c:	56                   	push   esi
c000b95d:	53                   	push   ebx
c000b95e:	52                   	push   edx
c000b95f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b963:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b969:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b96c:	74 17                	je     c000b985 <Device::removeAllChildren()+0x29>
c000b96e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b971:	85 c0                	test   eax,eax
c000b973:	74 0c                	je     c000b981 <Device::removeAllChildren()+0x25>
c000b975:	83 ec 0c             	sub    esp,0xc
c000b978:	8b 10                	mov    edx,DWORD PTR [eax]
c000b97a:	50                   	push   eax
c000b97b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b983:	eb e4                	jmp    c000b969 <Device::removeAllChildren()+0xd>
c000b985:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b98b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b991:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b99e:	58                   	pop    eax
c000b99f:	5b                   	pop    ebx
c000b9a0:	5e                   	pop    esi
c000b9a1:	c3                   	ret    

c000b9a2 <Device::hibernateAll()>:
c000b9a2:	53                   	push   ebx
c000b9a3:	83 ec 14             	sub    esp,0x14
c000b9a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9ac:	53                   	push   ebx
c000b9ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9b6:	83 c4 10             	add    esp,0x10
c000b9b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9bc:	74 0f                	je     c000b9cd <Device::hibernateAll()+0x2b>
c000b9be:	83 ec 0c             	sub    esp,0xc
c000b9c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9c4:	e8 d9 ff ff ff       	call   c000b9a2 <Device::hibernateAll()>
c000b9c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9cb:	eb e9                	jmp    c000b9b6 <Device::hibernateAll()+0x14>
c000b9cd:	83 c4 08             	add    esp,0x8
c000b9d0:	5b                   	pop    ebx
c000b9d1:	c3                   	ret    

c000b9d2 <Device::wakeAll()>:
c000b9d2:	53                   	push   ebx
c000b9d3:	83 ec 14             	sub    esp,0x14
c000b9d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9dc:	53                   	push   ebx
c000b9dd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9ec:	74 0f                	je     c000b9fd <Device::wakeAll()+0x2b>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9f4:	e8 d9 ff ff ff       	call   c000b9d2 <Device::wakeAll()>
c000b9f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9fb:	eb e9                	jmp    c000b9e6 <Device::wakeAll()+0x14>
c000b9fd:	83 c4 08             	add    esp,0x8
c000ba00:	5b                   	pop    ebx
c000ba01:	c3                   	ret    

c000ba02 <Device::detectAll()>:
c000ba02:	53                   	push   ebx
c000ba03:	83 ec 14             	sub    esp,0x14
c000ba06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba0c:	53                   	push   ebx
c000ba0d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1c:	74 0f                	je     c000ba2d <Device::detectAll()+0x2b>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba24:	e8 d9 ff ff ff       	call   c000ba02 <Device::detectAll()>
c000ba29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2b:	eb e9                	jmp    c000ba16 <Device::detectAll()+0x14>
c000ba2d:	83 c4 08             	add    esp,0x8
c000ba30:	5b                   	pop    ebx
c000ba31:	c3                   	ret    

c000ba32 <Device::disableLegacyAll()>:
c000ba32:	c3                   	ret    
c000ba33:	90                   	nop

c000ba34 <Device::loadDriversForAll()>:
c000ba34:	c3                   	ret    
c000ba35:	90                   	nop

c000ba36 <Device::closeAll()>:
c000ba36:	53                   	push   ebx
c000ba37:	83 ec 08             	sub    esp,0x8
c000ba3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba40:	6a 00                	push   0x0
c000ba42:	6a 00                	push   0x0
c000ba44:	6a 00                	push   0x0
c000ba46:	53                   	push   ebx
c000ba47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba56:	74 0f                	je     c000ba67 <Device::closeAll()+0x31>
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba5e:	e8 d3 ff ff ff       	call   c000ba36 <Device::closeAll()>
c000ba63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba65:	eb e9                	jmp    c000ba50 <Device::closeAll()+0x1a>
c000ba67:	83 c4 08             	add    esp,0x8
c000ba6a:	5b                   	pop    ebx
c000ba6b:	c3                   	ret    

c000ba6c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	83 ec 0c             	sub    esp,0xc
c000ba71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba79:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba7b:	56                   	push   esi
c000ba7c:	53                   	push   ebx
c000ba7d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 0f                	je     c000ba9d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba8e:	52                   	push   edx
c000ba8f:	52                   	push   edx
c000ba90:	56                   	push   esi
c000ba91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba94:	e8 d3 ff ff ff       	call   c000ba6c <Device::powerSavingAll(PowerSavingLevel)>
c000ba99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9b:	eb e9                	jmp    c000ba86 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba9d:	58                   	pop    eax
c000ba9e:	5b                   	pop    ebx
c000ba9f:	5e                   	pop    esi
c000baa0:	c3                   	ret    
c000baa1:	90                   	nop

c000baa2 <Device::setName(char const*)>:
c000baa2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baaa:	e9 51 4b ff ff       	jmp    c0000600 <strcpy>
c000baaf:	90                   	nop

c000bab0 <Device::Device(char const*)>:
c000bab0:	83 ec 1c             	sub    esp,0x1c
c000bab3:	ba 10 df 01 c0       	mov    edx,0xc001df10
c000bab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000babc:	89 10                	mov    DWORD PTR [eax],edx
c000babe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bade:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000baf6:	83 ec 08             	sub    esp,0x8
c000baf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb01:	e8 9c ff ff ff       	call   c000baa2 <Device::setName(char const*)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb18:	e8 9c bc ff ff       	call   c00077b9 <malloc>
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb31:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb67:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bba6:	90                   	nop
c000bba7:	83 c4 1c             	add    esp,0x1c
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Device::getName()>:
c000bbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb0:	05 d0 00 00 00       	add    eax,0xd0
c000bbb5:	c3                   	ret    

c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbb6:	83 ec 0c             	sub    esp,0xc
c000bbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbbd:	83 ec 08             	sub    esp,0x8
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	50                   	push   eax
c000bbc5:	e8 e6 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	ba 3c df 01 c0       	mov    edx,0xc001df3c
c000bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd6:	89 10                	mov    DWORD PTR [eax],edx
c000bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbe6:	90                   	nop
c000bbe7:	83 c4 0c             	add    esp,0xc
c000bbea:	c3                   	ret    
c000bbeb:	90                   	nop

c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbec:	57                   	push   edi
c000bbed:	56                   	push   esi
c000bbee:	53                   	push   ebx
c000bbef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbfb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc01:	75 0c                	jne    c000bc0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc03:	52                   	push   edx
c000bc04:	52                   	push   edx
c000bc05:	53                   	push   ebx
c000bc06:	56                   	push   esi
c000bc07:	e8 c6 09 01 00       	call   c001c5d2 <LinkedList<Device>::addElement(Device*)>
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc18:	74 12                	je     c000bc2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc1a:	50                   	push   eax
c000bc1b:	57                   	push   edi
c000bc1c:	56                   	push   esi
c000bc1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc20:	e8 c7 ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc27:	83 c4 10             	add    esp,0x10
c000bc2a:	eb e9                	jmp    c000bc15 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc2c:	5b                   	pop    ebx
c000bc2d:	5e                   	pop    esi
c000bc2e:	5f                   	pop    edi
c000bc2f:	c3                   	ret    

c000bc30 <getDevicesOfType(DeviceType)>:
c000bc30:	53                   	push   ebx
c000bc31:	83 ec 14             	sub    esp,0x14
c000bc34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc38:	53                   	push   ebx
c000bc39:	e8 70 0a 01 00       	call   c001c6ae <LinkedList<Device>::LinkedList()>
c000bc3e:	83 c4 0c             	add    esp,0xc
c000bc41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc45:	53                   	push   ebx
c000bc46:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c000bc4c:	e8 9b ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc51:	89 d8                	mov    eax,ebx
c000bc53:	83 c4 18             	add    esp,0x18
c000bc56:	5b                   	pop    ebx
c000bc57:	c2 04 00             	ret    0x4
c000bc5a:	66 90                	xchg   ax,ax

c000bc5c <HardDiskController::HardDiskController(char const*)>:
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc63:	83 ec 08             	sub    esp,0x8
c000bc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6a:	50                   	push   eax
c000bc6b:	e8 40 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bc70:	83 c4 10             	add    esp,0x10
c000bc73:	ba 68 df 01 c0       	mov    edx,0xc001df68
c000bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7c:	89 10                	mov    DWORD PTR [eax],edx
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc8c:	90                   	nop
c000bc8d:	83 c4 0c             	add    esp,0xc
c000bc90:	c3                   	ret    
c000bc91:	90                   	nop
c000bc92:	66 90                	xchg   ax,ax

c000bc94 <HardDiskController::~HardDiskController()>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	ba 68 df 01 c0       	mov    edx,0xc001df68
c000bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca0:	89 10                	mov    DWORD PTR [eax],edx
c000bca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca6:	83 ec 0c             	sub    esp,0xc
c000bca9:	50                   	push   eax
c000bcaa:	e8 6b fb ff ff       	call   c000b81a <Device::~Device()>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	90                   	nop
c000bcb3:	83 c4 0c             	add    esp,0xc
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <HardDiskController::~HardDiskController()>:
c000bcb8:	83 ec 0c             	sub    esp,0xc
c000bcbb:	83 ec 0c             	sub    esp,0xc
c000bcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc2:	e8 cd ff ff ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c000bcc7:	83 c4 10             	add    esp,0x10
c000bcca:	83 ec 08             	sub    esp,0x8
c000bccd:	68 58 01 00 00       	push   0x158
c000bcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcd6:	e8 07 e7 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bcdb:	83 c4 10             	add    esp,0x10
c000bcde:	83 c4 0c             	add    esp,0xc
c000bce1:	c3                   	ret    

c000bce2 <PhysicalDisk::eject()>:
c000bce2:	83 c8 ff             	or     eax,0xffffffff
c000bce5:	c3                   	ret    

c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bced:	83 ec 08             	sub    esp,0x8
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	50                   	push   eax
c000bcf5:	e8 b6 fd ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	ba 94 df 01 c0       	mov    edx,0xc001df94
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	89 10                	mov    DWORD PTR [eax],edx
c000bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd17:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd22:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd48:	90                   	nop
c000bd49:	83 c4 0c             	add    esp,0xc
c000bd4c:	c3                   	ret    
c000bd4d:	90                   	nop

c000bd4e <PhysicalDisk::startCache()>:
c000bd4e:	56                   	push   esi
c000bd4f:	53                   	push   ebx
c000bd50:	83 ec 10             	sub    esp,0x10
c000bd53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd57:	6a 44                	push   0x44
c000bd59:	e8 5b ba ff ff       	call   c00077b9 <malloc>
c000bd5e:	89 c6                	mov    esi,eax
c000bd60:	58                   	pop    eax
c000bd61:	5a                   	pop    edx
c000bd62:	53                   	push   ebx
c000bd63:	56                   	push   esi
c000bd64:	e8 b3 15 00 00       	call   c000d31c <VCache::VCache(PhysicalDisk*)>
c000bd69:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd6f:	83 c4 14             	add    esp,0x14
c000bd72:	5b                   	pop    ebx
c000bd73:	5e                   	pop    esi
c000bd74:	c3                   	ret    
c000bd75:	90                   	nop

c000bd76 <PhysicalDisk::~PhysicalDisk()>:
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	ba 94 df 01 c0       	mov    edx,0xc001df94
c000bd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd82:	89 10                	mov    DWORD PTR [eax],edx
c000bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	50                   	push   eax
c000bd8c:	e8 89 fa ff ff       	call   c000b81a <Device::~Device()>
c000bd91:	83 c4 10             	add    esp,0x10
c000bd94:	90                   	nop
c000bd95:	83 c4 0c             	add    esp,0xc
c000bd98:	c3                   	ret    
c000bd99:	90                   	nop

c000bd9a <PhysicalDisk::~PhysicalDisk()>:
c000bd9a:	83 ec 0c             	sub    esp,0xc
c000bd9d:	83 ec 0c             	sub    esp,0xc
c000bda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda4:	e8 cd ff ff ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c000bda9:	83 c4 10             	add    esp,0x10
c000bdac:	83 ec 08             	sub    esp,0x8
c000bdaf:	68 6c 01 00 00       	push   0x16c
c000bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb8:	e8 25 e6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	c3                   	ret    

c000bdc4 <int_handler>:
c000bdc4:	55                   	push   ebp
c000bdc5:	57                   	push   edi
c000bdc6:	56                   	push   esi
c000bdc7:	53                   	push   ebx
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdcf:	80 3d b8 36 02 c0 00 	cmp    BYTE PTR ds:0xc00236b8,0x0
c000bdd6:	74 0b                	je     c000bde3 <int_handler+0x1f>
c000bdd8:	fa                   	cli    
c000bdd9:	f4                   	hlt    
c000bdda:	80 3d b8 36 02 c0 00 	cmp    BYTE PTR ds:0xc00236b8,0x0
c000bde1:	75 f5                	jne    c000bdd8 <int_handler+0x14>
c000bde3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bde6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bde9:	83 f8 17             	cmp    eax,0x17
c000bdec:	76 3e                	jbe    c000be2c <int_handler+0x68>
c000bdee:	c1 e6 04             	shl    esi,0x4
c000bdf1:	31 db                	xor    ebx,ebx
c000bdf3:	8d ae 40 1d 02 c0    	lea    ebp,[esi-0x3ffde2c0]
c000bdf9:	81 c6 40 0d 02 c0    	add    esi,0xc0020d40
c000bdff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be03:	85 c0                	test   eax,eax
c000be05:	74 13                	je     c000be1a <int_handler+0x56>
c000be07:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be0a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be0e:	74 2a                	je     c000be3a <int_handler+0x76>
c000be10:	83 ec 08             	sub    esp,0x8
c000be13:	52                   	push   edx
c000be14:	57                   	push   edi
c000be15:	ff d0                	call   eax
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	43                   	inc    ebx
c000be1b:	83 fb 04             	cmp    ebx,0x4
c000be1e:	75 df                	jne    c000bdff <int_handler+0x3b>
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	31 c0                	xor    eax,eax
c000be25:	5b                   	pop    ebx
c000be26:	31 d2                	xor    edx,edx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	50                   	push   eax
c000be30:	e8 de 9a 00 00       	call   c0015913 <HalEndOfInterrupt(int)>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	eb b4                	jmp    c000bdee <int_handler+0x2a>
c000be3a:	83 ec 08             	sub    esp,0x8
c000be3d:	52                   	push   edx
c000be3e:	57                   	push   edi
c000be3f:	ff d0                	call   eax
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	83 c4 0c             	add    esp,0xc
c000be47:	5b                   	pop    ebx
c000be48:	5e                   	pop    esi
c000be49:	5f                   	pop    edi
c000be4a:	5d                   	pop    ebp
c000be4b:	c3                   	ret    

c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be4c:	56                   	push   esi
c000be4d:	31 c0                	xor    eax,eax
c000be4f:	53                   	push   ebx
c000be50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be58:	89 ca                	mov    edx,ecx
c000be5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be5e:	c1 e2 04             	shl    edx,0x4
c000be61:	83 bc 82 40 1d 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde2c0],0x0
c000be69:	74 15                	je     c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be6b:	40                   	inc    eax
c000be6c:	83 f8 04             	cmp    eax,0x4
c000be6f:	75 f0                	jne    c000be61 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be71:	c7 44 24 0c c4 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dfc4
c000be79:	5b                   	pop    ebx
c000be7a:	5e                   	pop    esi
c000be7b:	e9 a3 42 00 00       	jmp    c0010123 <KePanic(char const*)>
c000be80:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be83:	89 1c 85 40 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde2c0],ebx
c000be8a:	89 34 85 40 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf2c0],esi
c000be91:	5b                   	pop    ebx
c000be92:	5e                   	pop    esi
c000be93:	c3                   	ret    

c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be94:	57                   	push   edi
c000be95:	8b 15 38 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c38
c000be9b:	56                   	push   esi
c000be9c:	53                   	push   ebx
c000be9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bea1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bea5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000beac:	74 5b                	je     c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000beae:	89 c7                	mov    edi,eax
c000beb0:	84 c0                	test   al,al
c000beb2:	74 24                	je     c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000beb4:	83 fe 0f             	cmp    esi,0xf
c000beb7:	0f 8f d9 00 00 00    	jg     c000bf96 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bebd:	8a 86 00 f9 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0700]
c000bec3:	25 ff 00 00 00       	and    eax,0xff
c000bec8:	66 8b bc 00 e0 34 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcb20]
c000bed0:	89 c6                	mov    esi,eax
c000bed2:	66 d1 ef             	shr    di,1
c000bed5:	83 e7 01             	and    edi,0x1
c000bed8:	83 ec 08             	sub    esp,0x8
c000bedb:	a1 e0 48 02 c0       	mov    eax,ds:0xc00248e0
c000bee0:	31 db                	xor    ebx,ebx
c000bee2:	50                   	push   eax
c000bee3:	68 d1 df 01 c0       	push   0xc001dfd1
c000bee8:	e8 eb e5 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	a1 e0 48 02 c0       	mov    eax,ds:0xc00248e0
c000bef5:	85 c0                	test   eax,eax
c000bef7:	7f 51                	jg     c000bf4a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bef9:	83 ec 0c             	sub    esp,0xc
c000befc:	68 e8 df 01 c0       	push   0xc001dfe8
c000bf01:	e8 1d 42 00 00       	call   c0010123 <KePanic(char const*)>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf0c:	31 d2                	xor    edx,edx
c000bf0e:	89 c8                	mov    eax,ecx
c000bf10:	c1 e0 04             	shl    eax,0x4
c000bf13:	8b 9c 90 40 1d 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde2c0]
c000bf1a:	85 db                	test   ebx,ebx
c000bf1c:	0f 84 8b 00 00 00    	je     c000bfad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf22:	42                   	inc    edx
c000bf23:	83 fa 04             	cmp    edx,0x4
c000bf26:	75 eb                	jne    c000bf13 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf28:	83 ec 0c             	sub    esp,0xc
c000bf2b:	68 3c e0 01 c0       	push   0xc001e03c
c000bf30:	e8 ee 41 00 00       	call   c0010123 <KePanic(char const*)>
c000bf35:	83 c4 10             	add    esp,0x10
c000bf38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf3d:	5b                   	pop    ebx
c000bf3e:	5e                   	pop    esi
c000bf3f:	5f                   	pop    edi
c000bf40:	c3                   	ret    
c000bf41:	43                   	inc    ebx
c000bf42:	39 1d e0 48 02 c0    	cmp    DWORD PTR ds:0xc00248e0,ebx
c000bf48:	7e af                	jle    c000bef9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf4a:	83 ec 08             	sub    esp,0x8
c000bf4d:	8b 04 9d 00 49 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb700]
c000bf54:	56                   	push   esi
c000bf55:	50                   	push   eax
c000bf56:	e8 a5 f6 00 00       	call   c001b600 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	84 c0                	test   al,al
c000bf60:	74 df                	je     c000bf41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf62:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf68:	50                   	push   eax
c000bf69:	8d 46 20             	lea    eax,[esi+0x20]
c000bf6c:	57                   	push   edi
c000bf6d:	25 ff 00 00 00       	and    eax,0xff
c000bf72:	6a 00                	push   0x0
c000bf74:	50                   	push   eax
c000bf75:	89 f0                	mov    eax,esi
c000bf77:	6a 00                	push   0x0
c000bf79:	25 ff 00 00 00       	and    eax,0xff
c000bf7e:	6a 00                	push   0x0
c000bf80:	50                   	push   eax
c000bf81:	8b 04 9d 00 49 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb700]
c000bf88:	50                   	push   eax
c000bf89:	e8 ec f7 00 00       	call   c001b77a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf8e:	83 c4 20             	add    esp,0x20
c000bf91:	e9 73 ff ff ff       	jmp    c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf96:	83 ec 0c             	sub    esp,0xc
c000bf99:	31 ff                	xor    edi,edi
c000bf9b:	68 04 e0 01 c0       	push   0xc001e004
c000bfa0:	e8 7e 41 00 00       	call   c0010123 <KePanic(char const*)>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	e9 2b ff ff ff       	jmp    c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfad:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfb4:	89 14 85 40 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde2c0],edx
c000bfbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfbf:	5b                   	pop    ebx
c000bfc0:	89 14 85 40 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf2c0],edx
c000bfc7:	89 f0                	mov    eax,esi
c000bfc9:	5e                   	pop    esi
c000bfca:	5f                   	pop    edi
c000bfcb:	c3                   	ret    

c000bfcc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfd4:	c1 e0 04             	shl    eax,0x4
c000bfd7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfda:	39 88 40 1d 02 c0    	cmp    DWORD PTR [eax-0x3ffde2c0],ecx
c000bfe0:	74 08                	je     c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfe2:	83 c0 04             	add    eax,0x4
c000bfe5:	39 d0                	cmp    eax,edx
c000bfe7:	75 f1                	jne    c000bfda <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bfe9:	c3                   	ret    
c000bfea:	c7 80 40 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde2c0],0x0
c000bff4:	c7 80 40 0d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf2c0],0x0
c000bffe:	eb e2                	jmp    c000bfe2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c000:	53                   	push   ebx
c000c001:	83 ec 08             	sub    esp,0x8
c000c004:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c008:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c00d:	74 0e                	je     c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c00f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000c014:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c01b:	75 37                	jne    c000c054 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c021:	83 c0 20             	add    eax,0x20
c000c024:	c1 e0 04             	shl    eax,0x4
c000c027:	8d 50 10             	lea    edx,[eax+0x10]
c000c02a:	39 98 40 1d 02 c0    	cmp    DWORD PTR [eax-0x3ffde2c0],ebx
c000c030:	74 0c                	je     c000c03e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c032:	83 c0 04             	add    eax,0x4
c000c035:	39 d0                	cmp    eax,edx
c000c037:	75 f1                	jne    c000c02a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c039:	83 c4 08             	add    esp,0x8
c000c03c:	5b                   	pop    ebx
c000c03d:	c3                   	ret    
c000c03e:	c7 80 40 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde2c0],0x0
c000c048:	c7 80 40 0d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf2c0],0x0
c000c052:	eb de                	jmp    c000c032 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c054:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c059:	7f 12                	jg     c000c06d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c05b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c05f:	31 c0                	xor    eax,eax
c000c061:	8a 81 00 f9 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0700]
c000c067:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c06b:	eb b0                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c06d:	83 ec 0c             	sub    esp,0xc
c000c070:	68 f5 df 01 c0       	push   0xc001dff5
c000c075:	e8 a9 40 00 00       	call   c0010123 <KePanic(char const*)>
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	eb 9e                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c07f <setupINTS()>:
c000c07f:	31 c0                	xor    eax,eax
c000c081:	c7 80 40 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde2c0],0x0
c000c08b:	c7 80 40 0d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf2c0],0x0
c000c095:	c7 80 44 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde2bc],0x0
c000c09f:	c7 80 44 0d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf2bc],0x0
c000c0a9:	c7 80 48 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde2b8],0x0
c000c0b3:	c7 80 48 0d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf2b8],0x0
c000c0bd:	c7 80 4c 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde2b4],0x0
c000c0c7:	c7 80 4c 0d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf2b4],0x0
c000c0d1:	83 c0 10             	add    eax,0x10
c000c0d4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0d9:	75 a6                	jne    c000c081 <setupINTS()+0x2>
c000c0db:	c3                   	ret    

c000c0dc <convertLegacyIRQNumber(int)>:
c000c0dc:	83 ec 0c             	sub    esp,0xc
c000c0df:	8b 15 38 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c38
c000c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0f0:	74 0f                	je     c000c101 <convertLegacyIRQNumber(int)+0x25>
c000c0f2:	83 f8 0f             	cmp    eax,0xf
c000c0f5:	7f 0e                	jg     c000c105 <convertLegacyIRQNumber(int)+0x29>
c000c0f7:	31 c9                	xor    ecx,ecx
c000c0f9:	8a 88 00 f9 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0700]
c000c0ff:	89 c8                	mov    eax,ecx
c000c101:	83 c4 0c             	add    esp,0xc
c000c104:	c3                   	ret    
c000c105:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c109:	83 ec 0c             	sub    esp,0xc
c000c10c:	68 04 e0 01 c0       	push   0xc001e004
c000c111:	e8 0d 40 00 00       	call   c0010123 <KePanic(char const*)>
c000c116:	83 c4 10             	add    esp,0x10
c000c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11d:	83 c4 0c             	add    esp,0xc
c000c120:	c3                   	ret    
c000c121:	90                   	nop

c000c122 <startGUI(void*)>:
c000c122:	55                   	push   ebp
c000c123:	89 e5                	mov    ebp,esp
c000c125:	53                   	push   ebx
c000c126:	83 ec 04             	sub    esp,0x4
c000c129:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c12e:	48                   	dec    eax
c000c12f:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000c134:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c139:	85 c0                	test   eax,eax
c000c13b:	75 01                	jne    c000c13e <startGUI(void*)+0x1c>
c000c13d:	fb                   	sti    
c000c13e:	8b 1d 38 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c38
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	6a 01                	push   0x1
c000c149:	68 61 e0 01 c0       	push   0xc001e061
c000c14e:	e8 16 6c 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	83 ec 08             	sub    esp,0x8
c000c159:	53                   	push   ebx
c000c15a:	50                   	push   eax
c000c15b:	e8 3a 6e 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	8b 1d 38 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c38
c000c169:	83 ec 08             	sub    esp,0x8
c000c16c:	6a 01                	push   0x1
c000c16e:	68 7b e0 01 c0       	push   0xc001e07b
c000c173:	e8 f1 6b 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000c178:	83 c4 10             	add    esp,0x10
c000c17b:	83 ec 08             	sub    esp,0x8
c000c17e:	53                   	push   ebx
c000c17f:	50                   	push   eax
c000c180:	e8 15 6e 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000c185:	83 c4 10             	add    esp,0x10
c000c188:	90                   	nop
c000c189:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c18c:	c9                   	leave  
c000c18d:	c3                   	ret    

c000c18e <startGUIVESA(void*)>:
c000c18e:	55                   	push   ebp
c000c18f:	89 e5                	mov    ebp,esp
c000c191:	53                   	push   ebx
c000c192:	83 ec 04             	sub    esp,0x4
c000c195:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c19a:	48                   	dec    eax
c000c19b:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000c1a0:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c1a5:	85 c0                	test   eax,eax
c000c1a7:	75 01                	jne    c000c1aa <startGUIVESA(void*)+0x1c>
c000c1a9:	fb                   	sti    
c000c1aa:	8b 1d 38 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c38
c000c1b0:	83 ec 08             	sub    esp,0x8
c000c1b3:	6a 01                	push   0x1
c000c1b5:	68 99 e0 01 c0       	push   0xc001e099
c000c1ba:	e8 aa 6b 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000c1bf:	83 c4 10             	add    esp,0x10
c000c1c2:	83 ec 08             	sub    esp,0x8
c000c1c5:	53                   	push   ebx
c000c1c6:	50                   	push   eax
c000c1c7:	e8 ce 6d 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000c1cc:	83 c4 10             	add    esp,0x10
c000c1cf:	8b 1d 38 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c38
c000c1d5:	83 ec 08             	sub    esp,0x8
c000c1d8:	6a 01                	push   0x1
c000c1da:	68 7b e0 01 c0       	push   0xc001e07b
c000c1df:	e8 85 6b 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	83 ec 08             	sub    esp,0x8
c000c1ea:	53                   	push   ebx
c000c1eb:	50                   	push   eax
c000c1ec:	e8 a9 6d 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	90                   	nop
c000c1f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1f8:	c9                   	leave  
c000c1f9:	c3                   	ret    

c000c1fa <sendKeyToTerminal(unsigned char)>:
c000c1fa:	55                   	push   ebp
c000c1fb:	89 e5                	mov    ebp,esp
c000c1fd:	83 ec 28             	sub    esp,0x28
c000c200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c203:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c206:	8b 15 84 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c84
c000c20c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c20f:	25 ff 00 00 00       	and    eax,0xff
c000c214:	83 ec 08             	sub    esp,0x8
c000c217:	50                   	push   eax
c000c218:	52                   	push   edx
c000c219:	e8 28 c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c225:	74 0a                	je     c000c231 <sendKeyToTerminal(unsigned char)+0x37>
c000c227:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c22b:	0f 85 8f 00 00 00    	jne    c000c2c0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c231:	fa                   	cli    
c000c232:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c237:	40                   	inc    eax
c000c238:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000c23d:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c000c242:	40                   	inc    eax
c000c243:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c000c248:	a1 40 2d 02 c0       	mov    eax,ds:0xc0022d40
c000c24d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c250:	c7 05 40 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d40,0x0
c000c25a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c25e:	74 1f                	je     c000c27f <sendKeyToTerminal(unsigned char)+0x85>
c000c260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c266:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c269:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c26c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c275:	e8 6e 7a 00 00       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c000c27a:	83 c4 10             	add    esp,0x10
c000c27d:	eb db                	jmp    c000c25a <sendKeyToTerminal(unsigned char)+0x60>
c000c27f:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c000c284:	48                   	dec    eax
c000c285:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c000c28a:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c000c28f:	85 c0                	test   eax,eax
c000c291:	75 18                	jne    c000c2ab <sendKeyToTerminal(unsigned char)+0xb1>
c000c293:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c000c298:	85 c0                	test   eax,eax
c000c29a:	74 0f                	je     c000c2ab <sendKeyToTerminal(unsigned char)+0xb1>
c000c29c:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c000c2a6:	e8 79 75 00 00       	call   c0013824 <schedule()>
c000c2ab:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c2b0:	48                   	dec    eax
c000c2b1:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000c2b6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c2bb:	85 c0                	test   eax,eax
c000c2bd:	75 01                	jne    c000c2c0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2bf:	fb                   	sti    
c000c2c0:	90                   	nop
c000c2c1:	c9                   	leave  
c000c2c2:	c3                   	ret    

c000c2c3 <sendKeyboardToken(KeyboardToken)>:
c000c2c3:	55                   	push   ebp
c000c2c4:	89 e5                	mov    ebp,esp
c000c2c6:	83 ec 18             	sub    esp,0x18
c000c2c9:	e8 a5 3e 00 00       	call   c0010173 <Krnl::userIOReceived()>
c000c2ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d4:	25 ff ff 00 00       	and    eax,0xffff
c000c2d9:	83 f2 01             	xor    edx,0x1
c000c2dc:	88 90 60 2d 02 c0    	mov    BYTE PTR [eax-0x3ffdd2a0],dl
c000c2e2:	a1 48 2d 02 c0       	mov    eax,ds:0xc0022d48
c000c2e7:	85 c0                	test   eax,eax
c000c2e9:	74 24                	je     c000c30f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2eb:	8b 0d 48 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022d48
c000c2f1:	83 ec 04             	sub    esp,0x4
c000c2f4:	68 60 2d 02 c0       	push   0xc0022d60
c000c2f9:	83 ec 08             	sub    esp,0x8
c000c2fc:	89 e2                	mov    edx,esp
c000c2fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c301:	89 02                	mov    DWORD PTR [edx],eax
c000c303:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c306:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c30a:	ff d1                	call   ecx
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c313:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c316:	a0 68 31 02 c0       	mov    al,ds:0xc0023168
c000c31b:	38 c2                	cmp    dl,al
c000c31d:	74 1e                	je     c000c33d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c31f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c322:	a2 68 31 02 c0       	mov    ds:0xc0023168,al
c000c327:	a0 68 31 02 c0       	mov    al,ds:0xc0023168
c000c32c:	25 ff 00 00 00       	and    eax,0xff
c000c331:	83 ec 0c             	sub    esp,0xc
c000c334:	50                   	push   eax
c000c335:	e8 5e be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c340:	84 c0                	test   al,al
c000c342:	0f 84 ae 00 00 00    	je     c000c3f6 <sendKeyboardToken(KeyboardToken)+0x133>
c000c348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c34b:	66 3d 10 03          	cmp    ax,0x310
c000c34f:	75 06                	jne    c000c357 <sendKeyboardToken(KeyboardToken)+0x94>
c000c351:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35a:	66 3d 11 03          	cmp    ax,0x311
c000c35e:	75 06                	jne    c000c366 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c360:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c369:	66 3d 12 03          	cmp    ax,0x312
c000c36d:	75 06                	jne    c000c375 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c36f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c378:	66 3d 13 03          	cmp    ax,0x313
c000c37c:	75 06                	jne    c000c384 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c37e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c387:	66 3d 14 03          	cmp    ax,0x314
c000c38b:	75 06                	jne    c000c393 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c38d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c396:	66 3d 15 03          	cmp    ax,0x315
c000c39a:	75 06                	jne    c000c3a2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c39c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a5:	66 3d 16 03          	cmp    ax,0x316
c000c3a9:	75 06                	jne    c000c3b1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3ab:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b4:	66 3d 17 03          	cmp    ax,0x317
c000c3b8:	75 06                	jne    c000c3c0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3ba:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c3:	66 3d 18 03          	cmp    ax,0x318
c000c3c7:	75 06                	jne    c000c3cf <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3c9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d2:	66 3d 19 03          	cmp    ax,0x319
c000c3d6:	75 06                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3d8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 1a 03          	cmp    ax,0x31a
c000c3e5:	0f 85 c9 00 00 00    	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3eb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3f1:	e9 be 00 00 00       	jmp    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f9:	66 3d 10 03          	cmp    ax,0x310
c000c3fd:	75 0a                	jne    c000c409 <sendKeyboardToken(KeyboardToken)+0x146>
c000c3ff:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c405:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40c:	66 3d 11 03          	cmp    ax,0x311
c000c410:	75 0a                	jne    c000c41c <sendKeyboardToken(KeyboardToken)+0x159>
c000c412:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c418:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41f:	66 3d 12 03          	cmp    ax,0x312
c000c423:	75 0a                	jne    c000c42f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c425:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c42b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c432:	66 3d 13 03          	cmp    ax,0x313
c000c436:	75 0a                	jne    c000c442 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c438:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c43e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c445:	66 3d 14 03          	cmp    ax,0x314
c000c449:	75 0a                	jne    c000c455 <sendKeyboardToken(KeyboardToken)+0x192>
c000c44b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c451:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c458:	66 3d 15 03          	cmp    ax,0x315
c000c45c:	75 0a                	jne    c000c468 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c45e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c464:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46b:	66 3d 16 03          	cmp    ax,0x316
c000c46f:	75 0a                	jne    c000c47b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c471:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c477:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47e:	66 3d 17 03          	cmp    ax,0x317
c000c482:	75 0a                	jne    c000c48e <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c484:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c48a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c491:	66 3d 18 03          	cmp    ax,0x318
c000c495:	75 0a                	jne    c000c4a1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c497:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c49d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a4:	66 3d 19 03          	cmp    ax,0x319
c000c4a8:	75 0a                	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4aa:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b7:	66 3d 00 02          	cmp    ax,0x200
c000c4bb:	75 2c                	jne    c000c4e9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4bd:	a0 60 31 02 c0       	mov    al,ds:0xc0023160
c000c4c2:	83 f0 01             	xor    eax,0x1
c000c4c5:	84 c0                	test   al,al
c000c4c7:	74 20                	je     c000c4e9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4c9:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c000c4ce:	6a 01                	push   0x1
c000c4d0:	6a 00                	push   0x0
c000c4d2:	68 22 c1 00 c0       	push   0xc000c122
c000c4d7:	50                   	push   eax
c000c4d8:	e8 27 71 00 00       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c000c4dd:	83 c4 10             	add    esp,0x10
c000c4e0:	c6 05 60 31 02 c0 01 	mov    BYTE PTR ds:0xc0023160,0x1
c000c4e7:	eb 33                	jmp    c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ec:	66 3d 01 02          	cmp    ax,0x201
c000c4f0:	75 2a                	jne    c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f2:	a0 60 31 02 c0       	mov    al,ds:0xc0023160
c000c4f7:	83 f0 01             	xor    eax,0x1
c000c4fa:	84 c0                	test   al,al
c000c4fc:	74 1e                	je     c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4fe:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c000c503:	6a 01                	push   0x1
c000c505:	6a 00                	push   0x0
c000c507:	68 8e c1 00 c0       	push   0xc000c18e
c000c50c:	50                   	push   eax
c000c50d:	e8 f2 70 00 00       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c000c512:	83 c4 10             	add    esp,0x10
c000c515:	c6 05 60 31 02 c0 01 	mov    BYTE PTR ds:0xc0023160,0x1
c000c51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51f:	66 3d 1d 03          	cmp    ax,0x31d
c000c523:	75 06                	jne    c000c52b <sendKeyboardToken(KeyboardToken)+0x268>
c000c525:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c52b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52e:	66 3d 1c 03          	cmp    ax,0x31c
c000c532:	75 06                	jne    c000c53a <sendKeyboardToken(KeyboardToken)+0x277>
c000c534:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53d:	66 3d 1b 03          	cmp    ax,0x31b
c000c541:	75 06                	jne    c000c549 <sendKeyboardToken(KeyboardToken)+0x286>
c000c543:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54c:	66 3d 1e 03          	cmp    ax,0x31e
c000c550:	75 06                	jne    c000c558 <sendKeyboardToken(KeyboardToken)+0x295>
c000c552:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55b:	66 3d 1f 03          	cmp    ax,0x31f
c000c55f:	75 06                	jne    c000c567 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c561:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56a:	66 3d 1a 03          	cmp    ax,0x31a
c000c56e:	75 06                	jne    c000c576 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c570:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c576:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c57a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c57d:	83 f0 01             	xor    eax,0x1
c000c580:	84 c0                	test   al,al
c000c582:	74 7b                	je     c000c5ff <sendKeyboardToken(KeyboardToken)+0x33c>
c000c584:	a0 61 2e 02 c0       	mov    al,ds:0xc0022e61
c000c589:	84 c0                	test   al,al
c000c58b:	74 43                	je     c000c5d0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c58d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c591:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c595:	74 2d                	je     c000c5c4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c597:	8b 15 64 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023164
c000c59d:	89 d0                	mov    eax,edx
c000c59f:	c1 e0 02             	shl    eax,0x2
c000c5a2:	01 d0                	add    eax,edx
c000c5a4:	01 c0                	add    eax,eax
c000c5a6:	a3 64 31 02 c0       	mov    ds:0xc0023164,eax
c000c5ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ae:	25 ff ff 00 00       	and    eax,0xffff
c000c5b3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5b6:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000c5bb:	01 d0                	add    eax,edx
c000c5bd:	a3 64 31 02 c0       	mov    ds:0xc0023164,eax
c000c5c2:	eb 71                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5c4:	c7 05 64 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023164,0x0
c000c5ce:	eb 65                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d0:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000c5d5:	85 c0                	test   eax,eax
c000c5d7:	74 1a                	je     c000c5f3 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5d9:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000c5de:	25 ff 00 00 00       	and    eax,0xff
c000c5e3:	83 ec 0c             	sub    esp,0xc
c000c5e6:	50                   	push   eax
c000c5e7:	e8 0e fc ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c5ec:	83 c4 10             	add    esp,0x10
c000c5ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5f3:	c7 05 64 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023164,0x0
c000c5fd:	eb 36                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c602:	66 3d 01 01          	cmp    ax,0x101
c000c606:	75 2d                	jne    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c608:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000c60d:	85 c0                	test   eax,eax
c000c60f:	74 1a                	je     c000c62b <sendKeyboardToken(KeyboardToken)+0x368>
c000c611:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000c616:	25 ff 00 00 00       	and    eax,0xff
c000c61b:	83 ec 0c             	sub    esp,0xc
c000c61e:	50                   	push   eax
c000c61f:	e8 d6 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c624:	83 c4 10             	add    esp,0x10
c000c627:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c62b:	c7 05 64 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023164,0x0
c000c635:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c638:	83 f0 01             	xor    eax,0x1
c000c63b:	84 c0                	test   al,al
c000c63d:	74 4e                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c63f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c642:	83 f0 01             	xor    eax,0x1
c000c645:	84 c0                	test   al,al
c000c647:	74 44                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c649:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000c64e:	83 f0 01             	xor    eax,0x1
c000c651:	84 c0                	test   al,al
c000c653:	74 38                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c658:	66 83 f8 1f          	cmp    ax,0x1f
c000c65c:	76 09                	jbe    c000c667 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c661:	66 83 f8 7e          	cmp    ax,0x7e
c000c665:	76 12                	jbe    c000c679 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66a:	66 83 f8 0a          	cmp    ax,0xa
c000c66e:	74 09                	je     c000c679 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c673:	66 83 f8 08          	cmp    ax,0x8
c000c677:	75 14                	jne    c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67c:	25 ff 00 00 00       	and    eax,0xff
c000c681:	83 ec 0c             	sub    esp,0xc
c000c684:	50                   	push   eax
c000c685:	e8 70 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c690:	83 f0 01             	xor    eax,0x1
c000c693:	84 c0                	test   al,al
c000c695:	74 51                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c697:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c69a:	83 f0 01             	xor    eax,0x1
c000c69d:	84 c0                	test   al,al
c000c69f:	74 47                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a1:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000c6a6:	84 c0                	test   al,al
c000c6a8:	74 3e                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ad:	66 83 f8 3f          	cmp    ax,0x3f
c000c6b1:	76 35                	jbe    c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b6:	66 83 f8 7f          	cmp    ax,0x7f
c000c6ba:	77 2c                	ja     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bf:	88 c2                	mov    dl,al
c000c6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c4:	66 83 f8 5f          	cmp    ax,0x5f
c000c6c8:	76 04                	jbe    c000c6ce <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6ca:	b0 20                	mov    al,0x20
c000c6cc:	eb 02                	jmp    c000c6d0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6ce:	b0 00                	mov    al,0x0
c000c6d0:	29 c2                	sub    edx,eax
c000c6d2:	88 d0                	mov    al,dl
c000c6d4:	83 e8 40             	sub    eax,0x40
c000c6d7:	25 ff 00 00 00       	and    eax,0xff
c000c6dc:	83 ec 0c             	sub    esp,0xc
c000c6df:	50                   	push   eax
c000c6e0:	e8 15 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6eb:	66 3d 00 03          	cmp    ax,0x300
c000c6ef:	75 0f                	jne    c000c700 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6f4:	83 f0 01             	xor    eax,0x1
c000c6f7:	84 c0                	test   al,al
c000c6f9:	74 05                	je     c000c700 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6fb:	e8 99 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c700:	90                   	nop
c000c701:	c9                   	leave  
c000c702:	c3                   	ret    

c000c703 <clearInternalKeybuffer(VgaText*)>:
c000c703:	55                   	push   ebp
c000c704:	89 e5                	mov    ebp,esp
c000c706:	83 ec 08             	sub    esp,0x8
c000c709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70c:	05 b2 00 00 00       	add    eax,0xb2
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	50                   	push   eax
c000c715:	e8 26 3e ff ff       	call   c0000540 <strlen>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c720:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c726:	83 ec 04             	sub    esp,0x4
c000c729:	50                   	push   eax
c000c72a:	6a 00                	push   0x0
c000c72c:	52                   	push   edx
c000c72d:	e8 9e 3d ff ff       	call   c00004d0 <memset>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	90                   	nop
c000c736:	c9                   	leave  
c000c737:	c3                   	ret    

c000c738 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c738:	55                   	push   ebp
c000c739:	89 e5                	mov    ebp,esp
c000c73b:	83 ec 18             	sub    esp,0x18
c000c73e:	a1 48 2d 02 c0       	mov    eax,ds:0xc0022d48
c000c743:	85 c0                	test   eax,eax
c000c745:	74 2a                	je     c000c771 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c747:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c74d:	8b 0d 48 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022d48
c000c753:	83 ec 04             	sub    esp,0x4
c000c756:	68 60 2d 02 c0       	push   0xc0022d60
c000c75b:	83 ec 08             	sub    esp,0x8
c000c75e:	89 e2                	mov    edx,esp
c000c760:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c763:	89 02                	mov    DWORD PTR [edx],eax
c000c765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c768:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c76c:	ff d1                	call   ecx
c000c76e:	83 c4 10             	add    esp,0x10
c000c771:	fb                   	sti    
c000c772:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c779:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c77d:	0f 84 a1 00 00 00    	je     c000c824 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c786:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c78c:	84 c0                	test   al,al
c000c78e:	75 28                	jne    c000c7b8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c790:	fa                   	cli    
c000c791:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c796:	40                   	inc    eax
c000c797:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000c79c:	e8 83 70 00 00       	call   c0013824 <schedule()>
c000c7a1:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c7a6:	48                   	dec    eax
c000c7a7:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000c7ac:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000c7b1:	85 c0                	test   eax,eax
c000c7b3:	75 ce                	jne    c000c783 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b5:	fb                   	sti    
c000c7b6:	eb cb                	jmp    c000c783 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7be:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7c4:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7ca:	88 10                	mov    BYTE PTR [eax],dl
c000c7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7cf:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7d5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7db:	05 b2 00 00 00       	add    eax,0xb2
c000c7e0:	83 ec 0c             	sub    esp,0xc
c000c7e3:	50                   	push   eax
c000c7e4:	e8 57 3d ff ff       	call   c0000540 <strlen>
c000c7e9:	83 c4 10             	add    esp,0x10
c000c7ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7ef:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c7f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7fb:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c801:	83 ec 04             	sub    esp,0x4
c000c804:	50                   	push   eax
c000c805:	51                   	push   ecx
c000c806:	52                   	push   edx
c000c807:	e8 d4 3b ff ff       	call   c00003e0 <memmove>
c000c80c:	83 c4 10             	add    esp,0x10
c000c80f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c812:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c815:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c819:	0f 85 5a ff ff ff    	jne    c000c779 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c81f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c822:	eb 03                	jmp    c000c827 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c824:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c827:	c9                   	leave  
c000c828:	c3                   	ret    
c000c829:	90                   	nop

c000c82a <Keyboard::Keyboard(char const*)>:
c000c82a:	83 ec 0c             	sub    esp,0xc
c000c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c831:	83 ec 08             	sub    esp,0x8
c000c834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c838:	50                   	push   eax
c000c839:	e8 72 f2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	ba bc e0 01 c0       	mov    edx,0xc001e0bc
c000c846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84a:	89 10                	mov    DWORD PTR [eax],edx
c000c84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c850:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c85a:	c6 05 44 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d44,0x1
c000c861:	90                   	nop
c000c862:	83 c4 0c             	add    esp,0xc
c000c865:	c3                   	ret    

c000c866 <Keyboard::~Keyboard()>:
c000c866:	83 ec 0c             	sub    esp,0xc
c000c869:	ba bc e0 01 c0       	mov    edx,0xc001e0bc
c000c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c872:	89 10                	mov    DWORD PTR [eax],edx
c000c874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c878:	83 ec 0c             	sub    esp,0xc
c000c87b:	50                   	push   eax
c000c87c:	e8 99 ef ff ff       	call   c000b81a <Device::~Device()>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	90                   	nop
c000c885:	83 c4 0c             	add    esp,0xc
c000c888:	c3                   	ret    
c000c889:	90                   	nop

c000c88a <Keyboard::~Keyboard()>:
c000c88a:	83 ec 0c             	sub    esp,0xc
c000c88d:	83 ec 0c             	sub    esp,0xc
c000c890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c894:	e8 cd ff ff ff       	call   c000c866 <Keyboard::~Keyboard()>
c000c899:	83 c4 10             	add    esp,0x10
c000c89c:	83 ec 08             	sub    esp,0x8
c000c89f:	68 5c 01 00 00       	push   0x15c
c000c8a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a8:	e8 35 db ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	83 c4 0c             	add    esp,0xc
c000c8b3:	c3                   	ret    

c000c8b4 <LogicalDisk::close(int, int, void*)>:
c000c8b4:	83 c8 ff             	or     eax,0xffffffff
c000c8b7:	c3                   	ret    

c000c8b8 <LogicalDisk::~LogicalDisk()>:
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	ba 34 e1 01 c0       	mov    edx,0xc001e134
c000c8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c4:	89 10                	mov    DWORD PTR [eax],edx
c000c8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ca:	83 ec 0c             	sub    esp,0xc
c000c8cd:	50                   	push   eax
c000c8ce:	e8 47 ef ff ff       	call   c000b81a <Device::~Device()>
c000c8d3:	83 c4 10             	add    esp,0x10
c000c8d6:	90                   	nop
c000c8d7:	83 c4 0c             	add    esp,0xc
c000c8da:	c3                   	ret    
c000c8db:	90                   	nop

c000c8dc <LogicalDisk::~LogicalDisk()>:
c000c8dc:	83 ec 0c             	sub    esp,0xc
c000c8df:	83 ec 0c             	sub    esp,0xc
c000c8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e6:	e8 cd ff ff ff       	call   c000c8b8 <LogicalDisk::~LogicalDisk()>
c000c8eb:	83 c4 10             	add    esp,0x10
c000c8ee:	83 ec 08             	sub    esp,0x8
c000c8f1:	68 74 01 00 00       	push   0x174
c000c8f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8fa:	e8 e3 da ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c8ff:	83 c4 10             	add    esp,0x10
c000c902:	83 c4 0c             	add    esp,0xc
c000c905:	c3                   	ret    

c000c906 <LogicalDisk::open(int, int, void*)>:
c000c906:	83 ec 18             	sub    esp,0x18
c000c909:	68 e8 e0 01 c0       	push   0xc001e0e8
c000c90e:	e8 10 38 00 00       	call   c0010123 <KePanic(char const*)>
c000c913:	83 c8 ff             	or     eax,0xffffffff
c000c916:	83 c4 1c             	add    esp,0x1c
c000c919:	c3                   	ret    

c000c91a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c91a:	53                   	push   ebx
c000c91b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c91f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c923:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c927:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c92d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c933:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c939:	77 10                	ja     c000c94b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c93b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c941:	89 d3                	mov    ebx,edx
c000c943:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c949:	72 05                	jb     c000c950 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c94b:	83 c8 ff             	or     eax,0xffffffff
c000c94e:	89 c2                	mov    edx,eax
c000c950:	5b                   	pop    ebx
c000c951:	c3                   	ret    

c000c952 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c952:	56                   	push   esi
c000c953:	83 c8 ff             	or     eax,0xffffffff
c000c956:	53                   	push   ebx
c000c957:	89 c2                	mov    edx,eax
c000c959:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c95d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c961:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c965:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c96b:	77 27                	ja     c000c994 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c96d:	89 d8                	mov    eax,ebx
c000c96f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c975:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c97b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c980:	89 c2                	mov    edx,eax
c000c982:	73 10                	jae    c000c994 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c984:	89 c8                	mov    eax,ecx
c000c986:	89 da                	mov    edx,ebx
c000c988:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c98e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c994:	5b                   	pop    ebx
c000c995:	5e                   	pop    esi
c000c996:	c3                   	ret    
c000c997:	90                   	nop

c000c998 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c998:	83 ec 1c             	sub    esp,0x1c
c000c99b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c99f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9af:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9be:	83 ec 08             	sub    esp,0x8
c000c9c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9c5:	50                   	push   eax
c000c9c6:	e8 e5 f0 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c9cb:	83 c4 10             	add    esp,0x10
c000c9ce:	ba 34 e1 01 c0       	mov    edx,0xc001e134
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	89 10                	mov    DWORD PTR [eax],edx
c000c9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9dd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c9fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca09:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca0f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca15:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca20:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca26:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca34:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca48:	90                   	nop
c000ca49:	83 c4 1c             	add    esp,0x1c
c000ca4c:	c3                   	ret    
c000ca4d:	90                   	nop

c000ca4e <LogicalDisk::assignDriveLetter()>:
c000ca4e:	55                   	push   ebp
c000ca4f:	57                   	push   edi
c000ca50:	56                   	push   esi
c000ca51:	53                   	push   ebx
c000ca52:	83 ec 14             	sub    esp,0x14
c000ca55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca59:	8b 3d 80 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023180
c000ca5f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca65:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca69:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca6f:	8b 3d 84 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023184
c000ca75:	3c 01                	cmp    al,0x1
c000ca77:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca7b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca7f:	19 c0                	sbb    eax,eax
c000ca81:	83 e0 02             	and    eax,0x2
c000ca84:	83 c0 41             	add    eax,0x41
c000ca87:	0f be e8             	movsx  ebp,al
c000ca8a:	3c 43                	cmp    al,0x43
c000ca8c:	75 10                	jne    c000ca9e <LogicalDisk::assignDriveLetter()+0x50>
c000ca8e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca95:	75 5d                	jne    c000caf4 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca97:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca9c:	75 56                	jne    c000caf4 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca9e:	8d 75 bf             	lea    esi,[ebp-0x41]
c000caa1:	ba 01 00 00 00       	mov    edx,0x1
c000caa6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000caaa:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caae:	d3 e2                	shl    edx,cl
c000cab0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cab4:	89 d7                	mov    edi,edx
c000cab6:	89 d6                	mov    esi,edx
c000cab8:	c1 ff 1f             	sar    edi,0x1f
c000cabb:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cabf:	21 f9                	and    ecx,edi
c000cac1:	09 d1                	or     ecx,edx
c000cac3:	75 2f                	jne    c000caf4 <LogicalDisk::assignDriveLetter()+0xa6>
c000cac5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cac9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cacd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cad3:	09 f2                	or     edx,esi
c000cad5:	89 15 80 31 02 c0    	mov    DWORD PTR ds:0xc0023180,edx
c000cadb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cadf:	09 fa                	or     edx,edi
c000cae1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cae5:	89 15 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,edx
c000caeb:	89 1c bd a0 31 02 c0 	mov    DWORD PTR [edi*4-0x3ffdce60],ebx
c000caf2:	eb 08                	jmp    c000cafc <LogicalDisk::assignDriveLetter()+0xae>
c000caf4:	45                   	inc    ebp
c000caf5:	40                   	inc    eax
c000caf6:	3c 5b                	cmp    al,0x5b
c000caf8:	75 90                	jne    c000ca8a <LogicalDisk::assignDriveLetter()+0x3c>
c000cafa:	31 c0                	xor    eax,eax
c000cafc:	83 c4 14             	add    esp,0x14
c000caff:	5b                   	pop    ebx
c000cb00:	5e                   	pop    esi
c000cb01:	5f                   	pop    edi
c000cb02:	5d                   	pop    ebp
c000cb03:	c3                   	ret    

c000cb04 <LogicalDisk::mount()>:
c000cb04:	56                   	push   esi
c000cb05:	53                   	push   ebx
c000cb06:	53                   	push   ebx
c000cb07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb0b:	8b 1d 34 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d34
c000cb11:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb1b:	85 db                	test   ebx,ebx
c000cb1d:	74 27                	je     c000cb46 <LogicalDisk::mount()+0x42>
c000cb1f:	51                   	push   ecx
c000cb20:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb29:	83 e8 41             	sub    eax,0x41
c000cb2c:	50                   	push   eax
c000cb2d:	56                   	push   esi
c000cb2e:	53                   	push   ebx
c000cb2f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb32:	83 c4 10             	add    esp,0x10
c000cb35:	84 c0                	test   al,al
c000cb37:	74 08                	je     c000cb41 <LogicalDisk::mount()+0x3d>
c000cb39:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb3f:	eb 07                	jmp    c000cb48 <LogicalDisk::mount()+0x44>
c000cb41:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb44:	eb d5                	jmp    c000cb1b <LogicalDisk::mount()+0x17>
c000cb46:	31 c0                	xor    eax,eax
c000cb48:	5a                   	pop    edx
c000cb49:	5b                   	pop    ebx
c000cb4a:	5e                   	pop    esi
c000cb4b:	c3                   	ret    

c000cb4c <LogicalDisk::unmount()>:
c000cb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb50:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb5a:	c3                   	ret    
c000cb5b:	90                   	nop

c000cb5c <LogicalDisk::eject()>:
c000cb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb60:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb66:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb6c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb6f:	90                   	nop

c000cb70 <LogicalDisk::unassignDriveLetter()>:
c000cb70:	57                   	push   edi
c000cb71:	56                   	push   esi
c000cb72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb76:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb7d:	84 c9                	test   cl,cl
c000cb7f:	75 0f                	jne    c000cb90 <LogicalDisk::unassignDriveLetter()+0x20>
c000cb81:	c7 44 24 0c 0c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e10c
c000cb89:	5e                   	pop    esi
c000cb8a:	5f                   	pop    edi
c000cb8b:	e9 93 35 00 00       	jmp    c0010123 <KePanic(char const*)>
c000cb90:	83 e9 41             	sub    ecx,0x41
c000cb93:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb9a:	b8 01 00 00 00       	mov    eax,0x1
c000cb9f:	c7 04 8d a0 31 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdce60],0x0
c000cbaa:	d3 e0                	shl    eax,cl
c000cbac:	89 c7                	mov    edi,eax
c000cbae:	f7 d0                	not    eax
c000cbb0:	c1 ff 1f             	sar    edi,0x1f
c000cbb3:	21 05 80 31 02 c0    	and    DWORD PTR ds:0xc0023180,eax
c000cbb9:	89 fe                	mov    esi,edi
c000cbbb:	f7 d6                	not    esi
c000cbbd:	21 35 84 31 02 c0    	and    DWORD PTR ds:0xc0023184,esi
c000cbc3:	5e                   	pop    esi
c000cbc4:	5f                   	pop    edi
c000cbc5:	c3                   	ret    

c000cbc6 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbc6:	57                   	push   edi
c000cbc7:	56                   	push   esi
c000cbc8:	53                   	push   ebx
c000cbc9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbd1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbd9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbdf:	77 41                	ja     c000cc22 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cbe1:	99                   	cdq    
c000cbe2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cbe8:	01 c8                	add    eax,ecx
c000cbea:	11 da                	adc    edx,ebx
c000cbec:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbf2:	19 d7                	sbb    edi,edx
c000cbf4:	72 33                	jb     c000cc29 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cbf6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbfc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc02:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc06:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc0a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc10:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc1a:	5b                   	pop    ebx
c000cc1b:	5e                   	pop    esi
c000cc1c:	5f                   	pop    edi
c000cc1d:	e9 50 0a 00 00       	jmp    c000d672 <VCache::read(unsigned long long, int, void*)>
c000cc22:	b8 05 00 00 00       	mov    eax,0x5
c000cc27:	eb 05                	jmp    c000cc2e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc29:	b8 07 00 00 00       	mov    eax,0x7
c000cc2e:	5b                   	pop    ebx
c000cc2f:	5e                   	pop    esi
c000cc30:	5f                   	pop    edi
c000cc31:	c3                   	ret    

c000cc32 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc32:	57                   	push   edi
c000cc33:	56                   	push   esi
c000cc34:	53                   	push   ebx
c000cc35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc3d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc45:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc4b:	77 41                	ja     c000cc8e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc4d:	99                   	cdq    
c000cc4e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc54:	01 c8                	add    eax,ecx
c000cc56:	11 da                	adc    edx,ebx
c000cc58:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc5e:	19 d7                	sbb    edi,edx
c000cc60:	72 33                	jb     c000cc95 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc62:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc68:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc72:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc76:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc7c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc86:	5b                   	pop    ebx
c000cc87:	5e                   	pop    esi
c000cc88:	5f                   	pop    edi
c000cc89:	e9 ce 08 00 00       	jmp    c000d55c <VCache::write(unsigned long long, int, void*)>
c000cc8e:	b8 05 00 00 00       	mov    eax,0x5
c000cc93:	eb 05                	jmp    c000cc9a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc95:	b8 07 00 00 00       	mov    eax,0x7
c000cc9a:	5b                   	pop    ebx
c000cc9b:	5e                   	pop    esi
c000cc9c:	5f                   	pop    edi
c000cc9d:	c3                   	ret    
c000cc9e:	66 90                	xchg   ax,ax

c000cca0 <Mouse::Mouse(char const*)>:
c000cca0:	83 ec 0c             	sub    esp,0xc
c000cca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca7:	83 ec 08             	sub    esp,0x8
c000ccaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccae:	50                   	push   eax
c000ccaf:	e8 fc ed ff ff       	call   c000bab0 <Device::Device(char const*)>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	ba 60 e1 01 c0       	mov    edx,0xc001e160
c000ccbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc0:	89 10                	mov    DWORD PTR [eax],edx
c000ccc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ccd0:	90                   	nop
c000ccd1:	83 c4 0c             	add    esp,0xc
c000ccd4:	c3                   	ret    
c000ccd5:	90                   	nop
c000ccd6:	66 90                	xchg   ax,ax

c000ccd8 <Mouse::~Mouse()>:
c000ccd8:	83 ec 0c             	sub    esp,0xc
c000ccdb:	ba 60 e1 01 c0       	mov    edx,0xc001e160
c000cce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce4:	89 10                	mov    DWORD PTR [eax],edx
c000cce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccea:	83 ec 0c             	sub    esp,0xc
c000cced:	50                   	push   eax
c000ccee:	e8 27 eb ff ff       	call   c000b81a <Device::~Device()>
c000ccf3:	83 c4 10             	add    esp,0x10
c000ccf6:	90                   	nop
c000ccf7:	83 c4 0c             	add    esp,0xc
c000ccfa:	c3                   	ret    
c000ccfb:	90                   	nop

c000ccfc <Mouse::~Mouse()>:
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	83 ec 0c             	sub    esp,0xc
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 cd ff ff ff       	call   c000ccd8 <Mouse::~Mouse()>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	83 ec 08             	sub    esp,0x8
c000cd11:	68 58 01 00 00       	push   0x158
c000cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1a:	e8 c3 d6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000cd1f:	83 c4 10             	add    esp,0x10
c000cd22:	83 c4 0c             	add    esp,0xc
c000cd25:	c3                   	ret    

c000cd26 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd26:	55                   	push   ebp
c000cd27:	57                   	push   edi
c000cd28:	56                   	push   esi
c000cd29:	53                   	push   ebx
c000cd2a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd30:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd37:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd3e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd45:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd50:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd54:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd5b:	e8 4c ee ff ff       	call   c000bbac <Device::getName()>
c000cd60:	5a                   	pop    edx
c000cd61:	59                   	pop    ecx
c000cd62:	50                   	push   eax
c000cd63:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd67:	55                   	push   ebp
c000cd68:	e8 93 38 ff ff       	call   c0000600 <strcpy>
c000cd6d:	5b                   	pop    ebx
c000cd6e:	58                   	pop    eax
c000cd6f:	68 84 e1 01 c0       	push   0xc001e184
c000cd74:	55                   	push   ebp
c000cd75:	e8 46 3a ff ff       	call   c00007c0 <strcat>
c000cd7a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd81:	e8 33 aa ff ff       	call   c00077b9 <malloc>
c000cd86:	83 c4 0c             	add    esp,0xc
c000cd89:	89 c3                	mov    ebx,eax
c000cd8b:	57                   	push   edi
c000cd8c:	56                   	push   esi
c000cd8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd95:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd9c:	55                   	push   ebp
c000cd9d:	50                   	push   eax
c000cd9e:	e8 f5 fb ff ff       	call   c000c998 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cda3:	83 c4 14             	add    esp,0x14
c000cda6:	53                   	push   ebx
c000cda7:	e8 a2 fc ff ff       	call   c000ca4e <LogicalDisk::assignDriveLetter()>
c000cdac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdaf:	e8 50 fd ff ff       	call   c000cb04 <LogicalDisk::mount()>
c000cdb4:	58                   	pop    eax
c000cdb5:	5a                   	pop    edx
c000cdb6:	53                   	push   ebx
c000cdb7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdbe:	e8 55 eb ff ff       	call   c000b918 <Device::addChild(Device*)>
c000cdc3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cdc9:	5b                   	pop    ebx
c000cdca:	5e                   	pop    esi
c000cdcb:	5f                   	pop    edi
c000cdcc:	5d                   	pop    ebp
c000cdcd:	c3                   	ret    

c000cdce <createPartitionsForDisk(PhysicalDisk*)>:
c000cdce:	55                   	push   ebp
c000cdcf:	57                   	push   edi
c000cdd0:	56                   	push   esi
c000cdd1:	53                   	push   ebx
c000cdd2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cdd8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cddf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cde5:	3d 00 02 00 00       	cmp    eax,0x200
c000cdea:	74 27                	je     c000ce13 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cdec:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cdf2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cdf8:	83 ec 10             	sub    esp,0x10
c000cdfb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cdff:	99                   	cdq    
c000ce00:	c1 e6 0a             	shl    esi,0xa
c000ce03:	52                   	push   edx
c000ce04:	89 fd                	mov    ebp,edi
c000ce06:	50                   	push   eax
c000ce07:	55                   	push   ebp
c000ce08:	56                   	push   esi
c000ce09:	e8 12 f3 00 00       	call   c001c120 <__udivdi3>
c000ce0e:	e9 b1 00 00 00       	jmp    c000cec4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce13:	83 ec 0c             	sub    esp,0xc
c000ce16:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce18:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce1c:	56                   	push   esi
c000ce1d:	6a 01                	push   0x1
c000ce1f:	6a 00                	push   0x0
c000ce21:	6a 00                	push   0x0
c000ce23:	53                   	push   ebx
c000ce24:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce27:	83 c4 20             	add    esp,0x20
c000ce2a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce32:	75 0a                	jne    c000ce3e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce34:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce3c:	74 2c                	je     c000ce6a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce3e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce44:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce4a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce50:	83 ec 10             	sub    esp,0x10
c000ce53:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce57:	89 f7                	mov    edi,esi
c000ce59:	c1 e0 0a             	shl    eax,0xa
c000ce5c:	c1 ff 1f             	sar    edi,0x1f
c000ce5f:	57                   	push   edi
c000ce60:	56                   	push   esi
c000ce61:	52                   	push   edx
c000ce62:	50                   	push   eax
c000ce63:	e8 b8 f2 00 00       	call   c001c120 <__udivdi3>
c000ce68:	eb 5a                	jmp    c000cec4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce6a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce71:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce78:	83 e1 7f             	and    ecx,0x7f
c000ce7b:	83 e0 7f             	and    eax,0x7f
c000ce7e:	01 c1                	add    ecx,eax
c000ce80:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce87:	83 e0 7f             	and    eax,0x7f
c000ce8a:	01 c1                	add    ecx,eax
c000ce8c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce93:	83 e0 7f             	and    eax,0x7f
c000ce96:	00 c1                	add    cl,al
c000ce98:	74 41                	je     c000cedb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce9a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cea0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cea6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ceac:	83 ec 10             	sub    esp,0x10
c000ceaf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ceb3:	89 f7                	mov    edi,esi
c000ceb5:	c1 e0 0a             	shl    eax,0xa
c000ceb8:	c1 ff 1f             	sar    edi,0x1f
c000cebb:	57                   	push   edi
c000cebc:	56                   	push   esi
c000cebd:	52                   	push   edx
c000cebe:	50                   	push   eax
c000cebf:	e8 5c f2 00 00       	call   c001c120 <__udivdi3>
c000cec4:	83 c4 14             	add    esp,0x14
c000cec7:	52                   	push   edx
c000cec8:	50                   	push   eax
c000cec9:	6a 00                	push   0x0
c000cecb:	6a 00                	push   0x0
c000cecd:	53                   	push   ebx
c000cece:	e8 53 fe ff ff       	call   c000cd26 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ced3:	83 c4 20             	add    esp,0x20
c000ced6:	e9 79 01 00 00       	jmp    c000d054 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cedb:	89 f0                	mov    eax,esi
c000cedd:	31 f6                	xor    esi,esi
c000cedf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cee6:	75 02                	jne    c000ceea <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cee8:	89 f1                	mov    ecx,esi
c000ceea:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cef1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cef8:	c1 e2 08             	shl    edx,0x8
c000cefb:	c1 e7 10             	shl    edi,0x10
c000cefe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf06:	09 fa                	or     edx,edi
c000cf08:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf10:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf17:	83 c0 10             	add    eax,0x10
c000cf1a:	09 fa                	or     edx,edi
c000cf1c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf23:	c1 e7 18             	shl    edi,0x18
c000cf26:	09 fa                	or     edx,edi
c000cf28:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf2f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf33:	c1 e7 10             	shl    edi,0x10
c000cf36:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf3d:	c1 e2 08             	shl    edx,0x8
c000cf40:	09 fa                	or     edx,edi
c000cf42:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf49:	09 fa                	or     edx,edi
c000cf4b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf52:	c1 e7 18             	shl    edi,0x18
c000cf55:	09 fa                	or     edx,edi
c000cf57:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf5b:	46                   	inc    esi
c000cf5c:	83 fe 04             	cmp    esi,0x4
c000cf5f:	0f 85 7a ff ff ff    	jne    c000cedf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf69:	83 f0 01             	xor    eax,0x1
c000cf6c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf70:	75 57                	jne    c000cfc9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf76:	83 f0 01             	xor    eax,0x1
c000cf79:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf7d:	75 4a                	jne    c000cfc9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf83:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf8b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf93:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf99:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf9f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfa5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfa9:	89 f7                	mov    edi,esi
c000cfab:	c1 e0 0a             	shl    eax,0xa
c000cfae:	c1 ff 1f             	sar    edi,0x1f
c000cfb1:	57                   	push   edi
c000cfb2:	56                   	push   esi
c000cfb3:	52                   	push   edx
c000cfb4:	50                   	push   eax
c000cfb5:	e8 66 f1 00 00       	call   c001c120 <__udivdi3>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfc1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfc5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cfc9:	84 c9                	test   cl,cl
c000cfcb:	74 53                	je     c000d020 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cfcd:	0f b6 c9             	movzx  ecx,cl
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfd8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cfdc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cfe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfe8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cfec:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cff4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cffc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d000:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d004:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d008:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d00c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d010:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d014:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d018:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d01c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d020:	31 ed                	xor    ebp,ebp
c000d022:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d026:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d02a:	89 f8                	mov    eax,edi
c000d02c:	09 f0                	or     eax,esi
c000d02e:	74 1e                	je     c000d04e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d030:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d034:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d038:	89 d1                	mov    ecx,edx
c000d03a:	09 c1                	or     ecx,eax
c000d03c:	74 10                	je     c000d04e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d03e:	83 ec 0c             	sub    esp,0xc
c000d041:	57                   	push   edi
c000d042:	56                   	push   esi
c000d043:	52                   	push   edx
c000d044:	50                   	push   eax
c000d045:	53                   	push   ebx
c000d046:	e8 db fc ff ff       	call   c000cd26 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d04b:	83 c4 20             	add    esp,0x20
c000d04e:	45                   	inc    ebp
c000d04f:	83 fd 04             	cmp    ebp,0x4
c000d052:	75 ce                	jne    c000d022 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d054:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d05a:	5b                   	pop    ebx
c000d05b:	5e                   	pop    esi
c000d05c:	5f                   	pop    edi
c000d05d:	5d                   	pop    ebp
c000d05e:	c3                   	ret    
c000d05f:	90                   	nop

c000d060 <Serial::Serial(char const*)>:
c000d060:	83 ec 0c             	sub    esp,0xc
c000d063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d067:	83 ec 08             	sub    esp,0x8
c000d06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d06e:	50                   	push   eax
c000d06f:	e8 3c ea ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d074:	83 c4 10             	add    esp,0x10
c000d077:	ba 98 e1 01 c0       	mov    edx,0xc001e198
c000d07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d080:	89 10                	mov    DWORD PTR [eax],edx
c000d082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d086:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d090:	90                   	nop
c000d091:	83 c4 0c             	add    esp,0xc
c000d094:	c3                   	ret    
c000d095:	90                   	nop
c000d096:	66 90                	xchg   ax,ax

c000d098 <Serial::~Serial()>:
c000d098:	83 ec 0c             	sub    esp,0xc
c000d09b:	ba 98 e1 01 c0       	mov    edx,0xc001e198
c000d0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a4:	89 10                	mov    DWORD PTR [eax],edx
c000d0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0aa:	83 ec 0c             	sub    esp,0xc
c000d0ad:	50                   	push   eax
c000d0ae:	e8 67 e7 ff ff       	call   c000b81a <Device::~Device()>
c000d0b3:	83 c4 10             	add    esp,0x10
c000d0b6:	90                   	nop
c000d0b7:	83 c4 0c             	add    esp,0xc
c000d0ba:	c3                   	ret    
c000d0bb:	90                   	nop

c000d0bc <Serial::~Serial()>:
c000d0bc:	83 ec 0c             	sub    esp,0xc
c000d0bf:	83 ec 0c             	sub    esp,0xc
c000d0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0c6:	e8 cd ff ff ff       	call   c000d098 <Serial::~Serial()>
c000d0cb:	83 c4 10             	add    esp,0x10
c000d0ce:	83 ec 08             	sub    esp,0x8
c000d0d1:	68 58 01 00 00       	push   0x158
c000d0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0da:	e8 03 d3 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d0df:	83 c4 10             	add    esp,0x10
c000d0e2:	83 c4 0c             	add    esp,0xc
c000d0e5:	c3                   	ret    
c000d0e6:	66 90                	xchg   ax,ax

c000d0e8 <Timer::Timer(char const*)>:
c000d0e8:	83 ec 0c             	sub    esp,0xc
c000d0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ef:	83 ec 08             	sub    esp,0x8
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	50                   	push   eax
c000d0f7:	e8 b4 e9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d0fc:	83 c4 10             	add    esp,0x10
c000d0ff:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000d104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d108:	89 10                	mov    DWORD PTR [eax],edx
c000d10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d118:	90                   	nop
c000d119:	83 c4 0c             	add    esp,0xc
c000d11c:	c3                   	ret    
c000d11d:	90                   	nop
c000d11e:	66 90                	xchg   ax,ax

c000d120 <Timer::~Timer()>:
c000d120:	83 ec 0c             	sub    esp,0xc
c000d123:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000d128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12c:	89 10                	mov    DWORD PTR [eax],edx
c000d12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d132:	83 ec 0c             	sub    esp,0xc
c000d135:	50                   	push   eax
c000d136:	e8 df e6 ff ff       	call   c000b81a <Device::~Device()>
c000d13b:	83 c4 10             	add    esp,0x10
c000d13e:	90                   	nop
c000d13f:	83 c4 0c             	add    esp,0xc
c000d142:	c3                   	ret    
c000d143:	90                   	nop

c000d144 <Timer::~Timer()>:
c000d144:	83 ec 0c             	sub    esp,0xc
c000d147:	83 ec 0c             	sub    esp,0xc
c000d14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14e:	e8 cd ff ff ff       	call   c000d120 <Timer::~Timer()>
c000d153:	83 c4 10             	add    esp,0x10
c000d156:	83 ec 08             	sub    esp,0x8
c000d159:	68 5c 01 00 00       	push   0x15c
c000d15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d162:	e8 7b d2 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d167:	83 c4 10             	add    esp,0x10
c000d16a:	83 c4 0c             	add    esp,0xc
c000d16d:	c3                   	ret    

c000d16e <Timer::read()>:
c000d16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d172:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d178:	c3                   	ret    

c000d179 <setupTimer(int)>:
c000d179:	53                   	push   ebx
c000d17a:	83 ec 14             	sub    esp,0x14
c000d17d:	68 5c 01 00 00       	push   0x15c
c000d182:	e8 32 a6 ff ff       	call   c00077b9 <malloc>
c000d187:	89 04 24             	mov    DWORD PTR [esp],eax
c000d18a:	89 c3                	mov    ebx,eax
c000d18c:	e8 07 e9 00 00       	call   c001ba98 <PIT::PIT()>
c000d191:	58                   	pop    eax
c000d192:	5a                   	pop    edx
c000d193:	53                   	push   ebx
c000d194:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c000d19a:	e8 79 e7 ff ff       	call   c000b918 <Device::addChild(Device*)>
c000d19f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1a1:	6a 00                	push   0x0
c000d1a3:	6a 00                	push   0x0
c000d1a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1a9:	53                   	push   ebx
c000d1aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1ad:	89 d8                	mov    eax,ebx
c000d1af:	83 c4 28             	add    esp,0x28
c000d1b2:	5b                   	pop    ebx
c000d1b3:	c3                   	ret    

c000d1b4 <timerHandler(unsigned int)>:
c000d1b4:	56                   	push   esi
c000d1b5:	53                   	push   ebx
c000d1b6:	51                   	push   ecx
c000d1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1bb:	01 05 0c 32 02 c0    	add    DWORD PTR ds:0xc002320c,eax
c000d1c1:	80 3d 3d 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c3d,0x0
c000d1c8:	0f 84 4a 01 00 00    	je     c000d318 <timerHandler(unsigned int)+0x164>
c000d1ce:	fa                   	cli    
c000d1cf:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c000d1d5:	83 ec 0c             	sub    esp,0xc
c000d1d8:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c000d1de:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d1e3:	e8 08 f5 00 00       	call   c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1e8:	83 c4 10             	add    esp,0x10
c000d1eb:	84 c0                	test   al,al
c000d1ed:	0f 85 a1 00 00 00    	jne    c000d294 <timerHandler(unsigned int)+0xe0>
c000d1f3:	83 ec 0c             	sub    esp,0xc
c000d1f6:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d1fb:	e8 0c f5 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d200:	83 c4 10             	add    esp,0x10
c000d203:	89 c6                	mov    esi,eax
c000d205:	8d 76 00             	lea    esi,[esi+0x0]
c000d208:	83 ec 0c             	sub    esp,0xc
c000d20b:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d210:	e8 f7 f4 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d215:	c7 04 24 f8 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ef8
c000d21c:	89 c3                	mov    ebx,eax
c000d21e:	e8 f1 f4 00 00       	call   c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d223:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	3b 05 0c 32 02 c0    	cmp    eax,DWORD PTR ds:0xc002320c
c000d22f:	77 23                	ja     c000d254 <timerHandler(unsigned int)+0xa0>
c000d231:	83 ec 0c             	sub    esp,0xc
c000d234:	53                   	push   ebx
c000d235:	e8 ae 6a 00 00       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c000d23a:	83 c4 10             	add    esp,0x10
c000d23d:	39 de                	cmp    esi,ebx
c000d23f:	75 27                	jne    c000d268 <timerHandler(unsigned int)+0xb4>
c000d241:	83 ec 0c             	sub    esp,0xc
c000d244:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d249:	e8 be f4 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d24e:	89 c6                	mov    esi,eax
c000d250:	eb 12                	jmp    c000d264 <timerHandler(unsigned int)+0xb0>
c000d252:	66 90                	xchg   ax,ax
c000d254:	52                   	push   edx
c000d255:	52                   	push   edx
c000d256:	53                   	push   ebx
c000d257:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d25c:	e8 6b f5 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d261:	8d 76 00             	lea    esi,[esi+0x0]
c000d264:	83 c4 10             	add    esp,0x10
c000d267:	90                   	nop
c000d268:	83 ec 0c             	sub    esp,0xc
c000d26b:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d270:	e8 7b f4 00 00       	call   c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d275:	83 c4 10             	add    esp,0x10
c000d278:	84 c0                	test   al,al
c000d27a:	75 18                	jne    c000d294 <timerHandler(unsigned int)+0xe0>
c000d27c:	83 ec 0c             	sub    esp,0xc
c000d27f:	68 f8 3e 02 c0       	push   0xc0023ef8
c000d284:	e8 83 f4 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d289:	83 c4 10             	add    esp,0x10
c000d28c:	39 f0                	cmp    eax,esi
c000d28e:	0f 85 74 ff ff ff    	jne    c000d208 <timerHandler(unsigned int)+0x54>
c000d294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d299:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d29d:	74 41                	je     c000d2e0 <timerHandler(unsigned int)+0x12c>
c000d29f:	80 3d 3c 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c3c,0x0
c000d2a6:	74 38                	je     c000d2e0 <timerHandler(unsigned int)+0x12c>
c000d2a8:	fa                   	cli    
c000d2a9:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c000d2af:	a1 0c 32 02 c0       	mov    eax,ds:0xc002320c
c000d2b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2ba:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2c3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2c6:	72 08                	jb     c000d2d0 <timerHandler(unsigned int)+0x11c>
c000d2c8:	e8 57 65 00 00       	call   c0013824 <schedule()>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000d2d5:	48                   	dec    eax
c000d2d6:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000d2db:	75 03                	jne    c000d2e0 <timerHandler(unsigned int)+0x12c>
c000d2dd:	fb                   	sti    
c000d2de:	66 90                	xchg   ax,ax
c000d2e0:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c000d2e5:	48                   	dec    eax
c000d2e6:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c000d2eb:	75 1b                	jne    c000d308 <timerHandler(unsigned int)+0x154>
c000d2ed:	83 3d e0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ee0,0x0
c000d2f4:	74 12                	je     c000d308 <timerHandler(unsigned int)+0x154>
c000d2f6:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c000d300:	e8 1f 65 00 00       	call   c0013824 <schedule()>
c000d305:	8d 76 00             	lea    esi,[esi+0x0]
c000d308:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000d30d:	48                   	dec    eax
c000d30e:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000d313:	75 03                	jne    c000d318 <timerHandler(unsigned int)+0x164>
c000d315:	fb                   	sti    
c000d316:	66 90                	xchg   ax,ax
c000d318:	58                   	pop    eax
c000d319:	5b                   	pop    ebx
c000d31a:	5e                   	pop    esi
c000d31b:	c3                   	ret    

c000d31c <VCache::VCache(PhysicalDisk*)>:
c000d31c:	53                   	push   ebx
c000d31d:	83 ec 18             	sub    esp,0x18
c000d320:	ba 0c e2 01 c0       	mov    edx,0xc001e20c
c000d325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d329:	89 10                	mov    DWORD PTR [eax],edx
c000d32b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d32f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d33a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d345:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d34c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d357:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d35e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d369:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d374:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d37c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d383:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d396:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d39a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3ad:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3b5:	83 ec 0c             	sub    esp,0xc
c000d3b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3bc:	e8 f8 a3 ff ff       	call   c00077b9 <malloc>
c000d3c1:	83 c4 10             	add    esp,0x10
c000d3c4:	89 c3                	mov    ebx,eax
c000d3c6:	83 ec 0c             	sub    esp,0xc
c000d3c9:	53                   	push   ebx
c000d3ca:	e8 21 62 00 00       	call   c00135f0 <Mutex::Mutex()>
c000d3cf:	83 c4 10             	add    esp,0x10
c000d3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d3d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3e1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d3ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3f3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3fd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d400:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d404:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d40a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d410:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d414:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d417:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d422:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d426:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d42c:	05 00 01 00 00       	add    eax,0x100
c000d431:	c1 e0 04             	shl    eax,0x4
c000d434:	83 ec 0c             	sub    esp,0xc
c000d437:	50                   	push   eax
c000d438:	e8 7c a3 ff ff       	call   c00077b9 <malloc>
c000d43d:	83 c4 10             	add    esp,0x10
c000d440:	89 c2                	mov    edx,eax
c000d442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d446:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d458:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d45c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d460:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d466:	c1 e0 06             	shl    eax,0x6
c000d469:	83 ec 0c             	sub    esp,0xc
c000d46c:	50                   	push   eax
c000d46d:	e8 47 a3 ff ff       	call   c00077b9 <malloc>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	89 c2                	mov    edx,eax
c000d477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d47e:	90                   	nop
c000d47f:	83 c4 18             	add    esp,0x18
c000d482:	5b                   	pop    ebx
c000d483:	c3                   	ret    

c000d484 <VCache::invalidateReadBuffer()>:
c000d484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d488:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d48e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d492:	c3                   	ret    
c000d493:	90                   	nop

c000d494 <VCache::writeWriteBuffer()>:
c000d494:	53                   	push   ebx
c000d495:	83 ec 08             	sub    esp,0x8
c000d498:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d49c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4a0:	74 1e                	je     c000d4c0 <VCache::writeWriteBuffer()+0x2c>
c000d4a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4a5:	83 ec 0c             	sub    esp,0xc
c000d4a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4b6:	50                   	push   eax
c000d4b7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4ba:	83 c4 20             	add    esp,0x20
c000d4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d4c0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4c7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4ce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d4d2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d4d9:	83 c4 08             	add    esp,0x8
c000d4dc:	5b                   	pop    ebx
c000d4dd:	c3                   	ret    
c000d4de:	66 90                	xchg   ax,ax

c000d4e0 <VCache::~VCache()>:
c000d4e0:	83 ec 0c             	sub    esp,0xc
c000d4e3:	ba 0c e2 01 c0       	mov    edx,0xc001e20c
c000d4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ec:	89 10                	mov    DWORD PTR [eax],edx
c000d4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d4f5:	84 c0                	test   al,al
c000d4f7:	74 0f                	je     c000d508 <VCache::~VCache()+0x28>
c000d4f9:	83 ec 0c             	sub    esp,0xc
c000d4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d500:	e8 8f ff ff ff       	call   c000d494 <VCache::writeWriteBuffer()>
c000d505:	83 c4 10             	add    esp,0x10
c000d508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d50c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d50f:	83 ec 0c             	sub    esp,0xc
c000d512:	50                   	push   eax
c000d513:	e8 b1 a2 ff ff       	call   c00077c9 <free>
c000d518:	83 c4 10             	add    esp,0x10
c000d51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d522:	83 ec 0c             	sub    esp,0xc
c000d525:	50                   	push   eax
c000d526:	e8 9e a2 ff ff       	call   c00077c9 <free>
c000d52b:	83 c4 10             	add    esp,0x10
c000d52e:	90                   	nop
c000d52f:	83 c4 0c             	add    esp,0xc
c000d532:	c3                   	ret    
c000d533:	90                   	nop

c000d534 <VCache::~VCache()>:
c000d534:	83 ec 0c             	sub    esp,0xc
c000d537:	83 ec 0c             	sub    esp,0xc
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	e8 9d ff ff ff       	call   c000d4e0 <VCache::~VCache()>
c000d543:	83 c4 10             	add    esp,0x10
c000d546:	83 ec 08             	sub    esp,0x8
c000d549:	6a 44                	push   0x44
c000d54b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54f:	e8 8e ce ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d554:	83 c4 10             	add    esp,0x10
c000d557:	83 c4 0c             	add    esp,0xc
c000d55a:	c3                   	ret    
c000d55b:	90                   	nop

c000d55c <VCache::write(unsigned long long, int, void*)>:
c000d55c:	55                   	push   ebp
c000d55d:	57                   	push   edi
c000d55e:	56                   	push   esi
c000d55f:	53                   	push   ebx
c000d560:	83 ec 1c             	sub    esp,0x1c
c000d563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d56b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d56f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d573:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d577:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d57b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d57f:	31 c0                	xor    eax,eax
c000d581:	8d 76 00             	lea    esi,[esi+0x0]
c000d584:	39 e8                	cmp    eax,ebp
c000d586:	7d 18                	jge    c000d5a0 <VCache::write(unsigned long long, int, void*)+0x44>
c000d588:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d58b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d591:	0f af c8             	imul   ecx,eax
c000d594:	89 ca                	mov    edx,ecx
c000d596:	01 f2                	add    edx,esi
c000d598:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d59a:	40                   	inc    eax
c000d59b:	eb e7                	jmp    c000d584 <VCache::write(unsigned long long, int, void*)+0x28>
c000d59d:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5a4:	74 0a                	je     c000d5b0 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5a6:	53                   	push   ebx
c000d5a7:	e8 d8 fe ff ff       	call   c000d484 <VCache::invalidateReadBuffer()>
c000d5ac:	58                   	pop    eax
c000d5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d5b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5b4:	74 5a                	je     c000d610 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5b6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5bd:	89 f8                	mov    eax,edi
c000d5bf:	99                   	cdq    
c000d5c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5c6:	31 c1                	xor    ecx,eax
c000d5c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5cc:	31 d0                	xor    eax,edx
c000d5ce:	09 c1                	or     ecx,eax
c000d5d0:	75 32                	jne    c000d604 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5d2:	83 fd 01             	cmp    ebp,0x1
c000d5d5:	75 2d                	jne    c000d604 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5da:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5e0:	0f af f9             	imul   edi,ecx
c000d5e3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d5eb:	40                   	inc    eax
c000d5ec:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d5ef:	83 f8 40             	cmp    eax,0x40
c000d5f2:	75 74                	jne    c000d668 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	53                   	push   ebx
c000d5f8:	e8 97 fe ff ff       	call   c000d494 <VCache::writeWriteBuffer()>
c000d5fd:	83 c4 10             	add    esp,0x10
c000d600:	eb 66                	jmp    c000d668 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d602:	66 90                	xchg   ax,ax
c000d604:	83 ec 0c             	sub    esp,0xc
c000d607:	53                   	push   ebx
c000d608:	e8 87 fe ff ff       	call   c000d494 <VCache::writeWriteBuffer()>
c000d60d:	83 c4 10             	add    esp,0x10
c000d610:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d613:	83 fd 3f             	cmp    ebp,0x3f
c000d616:	7f 24                	jg     c000d63c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d618:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d61c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d61f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d622:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d626:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d62a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d62d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d630:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d636:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d638:	eb 2e                	jmp    c000d668 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d63a:	66 90                	xchg   ax,ax
c000d63c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d63e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d642:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d64a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d64e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d652:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d656:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d65a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d65d:	83 c4 1c             	add    esp,0x1c
c000d660:	5b                   	pop    ebx
c000d661:	5e                   	pop    esi
c000d662:	5f                   	pop    edi
c000d663:	5d                   	pop    ebp
c000d664:	ff e0                	jmp    eax
c000d666:	66 90                	xchg   ax,ax
c000d668:	83 c4 1c             	add    esp,0x1c
c000d66b:	31 c0                	xor    eax,eax
c000d66d:	5b                   	pop    ebx
c000d66e:	5e                   	pop    esi
c000d66f:	5f                   	pop    edi
c000d670:	5d                   	pop    ebp
c000d671:	c3                   	ret    

c000d672 <VCache::read(unsigned long long, int, void*)>:
c000d672:	55                   	push   ebp
c000d673:	57                   	push   edi
c000d674:	56                   	push   esi
c000d675:	53                   	push   ebx
c000d676:	83 ec 1c             	sub    esp,0x1c
c000d679:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d67d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d681:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d685:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d68d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d691:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d695:	74 0d                	je     c000d6a4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d697:	83 ec 0c             	sub    esp,0xc
c000d69a:	55                   	push   ebp
c000d69b:	e8 f4 fd ff ff       	call   c000d494 <VCache::writeWriteBuffer()>
c000d6a0:	83 c4 10             	add    esp,0x10
c000d6a3:	90                   	nop
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	55                   	push   ebp
c000d6a8:	e8 d7 fd ff ff       	call   c000d484 <VCache::invalidateReadBuffer()>
c000d6ad:	83 c4 0c             	add    esp,0xc
c000d6b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6b9:	6a 00                	push   0x0
c000d6bb:	53                   	push   ebx
c000d6bc:	e8 0f 2e ff ff       	call   c00004d0 <memset>
c000d6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d6c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ca:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d6ce:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d6d2:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d6d6:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d6da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6de:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d6e1:	83 c4 2c             	add    esp,0x2c
c000d6e4:	5b                   	pop    ebx
c000d6e5:	5e                   	pop    esi
c000d6e6:	5f                   	pop    edi
c000d6e7:	5d                   	pop    ebp
c000d6e8:	ff e0                	jmp    eax

c000d6ea <Video::putrect(int, int, int, int, unsigned int)>:
c000d6ea:	55                   	push   ebp
c000d6eb:	57                   	push   edi
c000d6ec:	56                   	push   esi
c000d6ed:	53                   	push   ebx
c000d6ee:	83 ec 1c             	sub    esp,0x1c
c000d6f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d6f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d6fd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d701:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d705:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d709:	01 df                	add    edi,ebx
c000d70b:	39 fb                	cmp    ebx,edi
c000d70d:	7d 1f                	jge    c000d72e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d70f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d713:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d717:	7d 12                	jge    c000d72b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d719:	8b 16                	mov    edx,DWORD PTR [esi]
c000d71b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d71f:	53                   	push   ebx
c000d720:	55                   	push   ebp
c000d721:	45                   	inc    ebp
c000d722:	56                   	push   esi
c000d723:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	eb e8                	jmp    c000d713 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d72b:	43                   	inc    ebx
c000d72c:	eb dd                	jmp    c000d70b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d72e:	83 c4 1c             	add    esp,0x1c
c000d731:	5b                   	pop    ebx
c000d732:	5e                   	pop    esi
c000d733:	5f                   	pop    edi
c000d734:	5d                   	pop    ebp
c000d735:	c3                   	ret    

c000d736 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d736:	55                   	push   ebp
c000d737:	57                   	push   edi
c000d738:	31 ff                	xor    edi,edi
c000d73a:	56                   	push   esi
c000d73b:	53                   	push   ebx
c000d73c:	83 ec 1c             	sub    esp,0x1c
c000d73f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d743:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d747:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d74e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d757:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d75b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d75f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d762:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d766:	01 f9                	add    ecx,edi
c000d768:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d76c:	7d 2f                	jge    c000d79d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d76e:	31 f6                	xor    esi,esi
c000d770:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d774:	01 f2                	add    edx,esi
c000d776:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d77a:	7d 1a                	jge    c000d796 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d77c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d77f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d782:	46                   	inc    esi
c000d783:	51                   	push   ecx
c000d784:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d788:	52                   	push   edx
c000d789:	55                   	push   ebp
c000d78a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d78d:	83 c4 10             	add    esp,0x10
c000d790:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d794:	eb da                	jmp    c000d770 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d796:	47                   	inc    edi
c000d797:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d79b:	eb c5                	jmp    c000d762 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d79d:	83 c4 1c             	add    esp,0x1c
c000d7a0:	5b                   	pop    ebx
c000d7a1:	5e                   	pop    esi
c000d7a2:	5f                   	pop    edi
c000d7a3:	5d                   	pop    ebp
c000d7a4:	c3                   	ret    
c000d7a5:	90                   	nop

c000d7a6 <Video::blit(unsigned int*, int, int, int, int)>:
c000d7a6:	55                   	push   ebp
c000d7a7:	57                   	push   edi
c000d7a8:	56                   	push   esi
c000d7a9:	53                   	push   ebx
c000d7aa:	83 ec 1c             	sub    esp,0x1c
c000d7ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7b5:	85 c0                	test   eax,eax
c000d7b7:	79 02                	jns    c000d7bb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7b9:	31 c0                	xor    eax,eax
c000d7bb:	c1 e0 02             	shl    eax,0x2
c000d7be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7ca:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7ce:	39 d8                	cmp    eax,ebx
c000d7d0:	7e 49                	jle    c000d81b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7d2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7d8:	7c 41                	jl     c000d81b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7e6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d7ea:	39 f9                	cmp    ecx,edi
c000d7ec:	7e 22                	jle    c000d810 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d7ee:	83 c5 04             	add    ebp,0x4
c000d7f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d7f7:	7c 14                	jl     c000d80d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d7f9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d7fb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d7fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d802:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d806:	56                   	push   esi
c000d807:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	47                   	inc    edi
c000d80e:	eb d2                	jmp    c000d7e2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d814:	43                   	inc    ebx
c000d815:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d819:	eb ab                	jmp    c000d7c6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d81b:	83 c4 1c             	add    esp,0x1c
c000d81e:	5b                   	pop    ebx
c000d81f:	5e                   	pop    esi
c000d820:	5f                   	pop    edi
c000d821:	5d                   	pop    ebp
c000d822:	c3                   	ret    
c000d823:	90                   	nop

c000d824 <Video::clearScreen(unsigned int)>:
c000d824:	57                   	push   edi
c000d825:	56                   	push   esi
c000d826:	53                   	push   ebx
c000d827:	31 db                	xor    ebx,ebx
c000d829:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d82d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d833:	7e 1f                	jle    c000d854 <Video::clearScreen(unsigned int)+0x30>
c000d835:	31 ff                	xor    edi,edi
c000d837:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d83d:	7e 12                	jle    c000d851 <Video::clearScreen(unsigned int)+0x2d>
c000d83f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d845:	53                   	push   ebx
c000d846:	57                   	push   edi
c000d847:	47                   	inc    edi
c000d848:	56                   	push   esi
c000d849:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	eb e6                	jmp    c000d837 <Video::clearScreen(unsigned int)+0x13>
c000d851:	43                   	inc    ebx
c000d852:	eb d9                	jmp    c000d82d <Video::clearScreen(unsigned int)+0x9>
c000d854:	5b                   	pop    ebx
c000d855:	5e                   	pop    esi
c000d856:	5f                   	pop    edi
c000d857:	c3                   	ret    

c000d858 <Video::putpixel(int, int, unsigned int)>:
c000d858:	c7 44 24 04 14 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e214
c000d860:	e9 be 28 00 00       	jmp    c0010123 <KePanic(char const*)>
c000d865:	90                   	nop

c000d866 <Video::Video(char const*)>:
c000d866:	83 ec 0c             	sub    esp,0xc
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	83 ec 08             	sub    esp,0x8
c000d870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d874:	50                   	push   eax
c000d875:	e8 36 e2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d87a:	83 c4 10             	add    esp,0x10
c000d87d:	ba 84 e2 01 c0       	mov    edx,0xc001e284
c000d882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d886:	89 10                	mov    DWORD PTR [eax],edx
c000d888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d896:	90                   	nop
c000d897:	83 c4 0c             	add    esp,0xc
c000d89a:	c3                   	ret    
c000d89b:	90                   	nop

c000d89c <Video::~Video()>:
c000d89c:	83 ec 0c             	sub    esp,0xc
c000d89f:	ba 84 e2 01 c0       	mov    edx,0xc001e284
c000d8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a8:	89 10                	mov    DWORD PTR [eax],edx
c000d8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ae:	83 ec 0c             	sub    esp,0xc
c000d8b1:	50                   	push   eax
c000d8b2:	e8 63 df ff ff       	call   c000b81a <Device::~Device()>
c000d8b7:	83 c4 10             	add    esp,0x10
c000d8ba:	90                   	nop
c000d8bb:	83 c4 0c             	add    esp,0xc
c000d8be:	c3                   	ret    
c000d8bf:	90                   	nop

c000d8c0 <Video::~Video()>:
c000d8c0:	83 ec 0c             	sub    esp,0xc
c000d8c3:	83 ec 0c             	sub    esp,0xc
c000d8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ca:	e8 cd ff ff ff       	call   c000d89c <Video::~Video()>
c000d8cf:	83 c4 10             	add    esp,0x10
c000d8d2:	83 ec 08             	sub    esp,0x8
c000d8d5:	68 64 01 00 00       	push   0x164
c000d8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8de:	e8 ff ca ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d8e3:	83 c4 10             	add    esp,0x10
c000d8e6:	83 c4 0c             	add    esp,0xc
c000d8e9:	c3                   	ret    

c000d8ea <Video::isMonochrome()>:
c000d8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8ee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d8f4:	c3                   	ret    
c000d8f5:	90                   	nop

c000d8f6 <Video::getWidth()>:
c000d8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d900:	c3                   	ret    
c000d901:	90                   	nop

c000d902 <Video::getHeight()>:
c000d902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d906:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d90c:	c3                   	ret    
c000d90d:	90                   	nop

c000d90e <Video::drawCursor(int, int, unsigned char*, int)>:
c000d90e:	55                   	push   ebp
c000d90f:	57                   	push   edi
c000d910:	56                   	push   esi
c000d911:	53                   	push   ebx
c000d912:	83 ec 2c             	sub    esp,0x2c
c000d915:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d919:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d91d:	83 f8 01             	cmp    eax,0x1
c000d920:	19 c9                	sbb    ecx,ecx
c000d922:	31 db                	xor    ebx,ebx
c000d924:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d928:	89 cd                	mov    ebp,ecx
c000d92a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d932:	f7 d5                	not    ebp
c000d934:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d93a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d93e:	01 d8                	add    eax,ebx
c000d940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d944:	56                   	push   esi
c000d945:	e8 b8 ff ff ff       	call   c000d902 <Video::getHeight()>
c000d94a:	59                   	pop    ecx
c000d94b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d94f:	7e 70                	jle    c000d9c1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d951:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d955:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d959:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d95c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d960:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d964:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d96b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d96f:	89 f8                	mov    eax,edi
c000d971:	83 c0 20             	add    eax,0x20
c000d974:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d978:	56                   	push   esi
c000d979:	e8 78 ff ff ff       	call   c000d8f6 <Video::getWidth()>
c000d97e:	5a                   	pop    edx
c000d97f:	39 c7                	cmp    edi,eax
c000d981:	7d 34                	jge    c000d9b7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d983:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d988:	74 05                	je     c000d98f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d98a:	8b 06                	mov    eax,DWORD PTR [esi]
c000d98c:	55                   	push   ebp
c000d98d:	eb 0d                	jmp    c000d99c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d98f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d994:	74 12                	je     c000d9a8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d996:	8b 06                	mov    eax,DWORD PTR [esi]
c000d998:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d99c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9a0:	57                   	push   edi
c000d9a1:	56                   	push   esi
c000d9a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9ac:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9b0:	47                   	inc    edi
c000d9b1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9b5:	75 c1                	jne    c000d978 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9b7:	43                   	inc    ebx
c000d9b8:	83 fb 20             	cmp    ebx,0x20
c000d9bb:	0f 85 79 ff ff ff    	jne    c000d93a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9c1:	83 c4 2c             	add    esp,0x2c
c000d9c4:	5b                   	pop    ebx
c000d9c5:	5e                   	pop    esi
c000d9c6:	5f                   	pop    edi
c000d9c7:	5d                   	pop    ebp
c000d9c8:	c3                   	ret    
c000d9c9:	90                   	nop

c000d9ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9ca:	55                   	push   ebp
c000d9cb:	57                   	push   edi
c000d9cc:	56                   	push   esi
c000d9cd:	53                   	push   ebx
c000d9ce:	83 ec 28             	sub    esp,0x28
c000d9d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9d5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9d9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9dd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d9e1:	c1 e6 08             	shl    esi,0x8
c000d9e4:	01 c6                	add    esi,eax
c000d9e6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d9ea:	c1 e0 08             	shl    eax,0x8
c000d9ed:	01 d0                	add    eax,edx
c000d9ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9f7:	0f af c6             	imul   eax,esi
c000d9fa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da01:	50                   	push   eax
c000da02:	e8 b2 9d ff ff       	call   c00077b9 <malloc>
c000da07:	83 c4 10             	add    esp,0x10
c000da0a:	89 c7                	mov    edi,eax
c000da0c:	85 c0                	test   eax,eax
c000da0e:	75 10                	jne    c000da20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	68 35 e2 01 c0       	push   0xc001e235
c000da18:	e8 06 27 00 00       	call   c0010123 <KePanic(char const*)>
c000da1d:	83 c4 10             	add    esp,0x10
c000da20:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da23:	ba 12 00 00 00       	mov    edx,0x12
c000da28:	84 c0                	test   al,al
c000da2a:	74 11                	je     c000da3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da2c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da30:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da34:	c1 fa 03             	sar    edx,0x3
c000da37:	0f af d1             	imul   edx,ecx
c000da3a:	83 c2 12             	add    edx,0x12
c000da3d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da41:	74 04                	je     c000da47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da43:	85 f6                	test   esi,esi
c000da45:	75 12                	jne    c000da59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da47:	83 ec 0c             	sub    esp,0xc
c000da4a:	68 45 e2 01 c0       	push   0xc001e245
c000da4f:	e8 84 ca ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000da54:	e9 b8 00 00 00       	jmp    c000db11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da59:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da5d:	80 f9 02             	cmp    cl,0x2
c000da60:	0f 85 96 00 00 00    	jne    c000dafc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da66:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da6b:	75 0e                	jne    c000da7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da6d:	84 c0                	test   al,al
c000da6f:	75 0a                	jne    c000da7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da71:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da74:	83 e8 18             	sub    eax,0x18
c000da77:	a8 f7                	test   al,0xf7
c000da79:	74 0a                	je     c000da85 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da7b:	83 ec 0c             	sub    esp,0xc
c000da7e:	68 5a e2 01 c0       	push   0xc001e25a
c000da83:	eb 7f                	jmp    c000db04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000da95:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000da99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000daa1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000daa5:	75 0c                	jne    c000dab3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000daa7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000daac:	c1 e0 18             	shl    eax,0x18
c000daaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dab3:	45                   	inc    ebp
c000dab4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dab9:	c1 e1 10             	shl    ecx,0x10
c000dabc:	89 c8                	mov    eax,ecx
c000dabe:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dac3:	c1 e1 08             	shl    ecx,0x8
c000dac6:	09 c1                	or     ecx,eax
c000dac8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dacc:	09 c1                	or     ecx,eax
c000dace:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dad2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dad6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dada:	c1 f8 03             	sar    eax,0x3
c000dadd:	01 c2                	add    edx,eax
c000dadf:	89 e8                	mov    eax,ebp
c000dae1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dae5:	39 c6                	cmp    esi,eax
c000dae7:	7f b0                	jg     c000da99 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dae9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000daed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000daf1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000daf4:	7e 22                	jle    c000db18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000daf6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dafa:	eb 99                	jmp    c000da95 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dafc:	50                   	push   eax
c000dafd:	50                   	push   eax
c000dafe:	51                   	push   ecx
c000daff:	68 68 e2 01 c0       	push   0xc001e268
c000db04:	e8 cf c9 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000db09:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db0c:	e8 b8 9c ff ff       	call   c00077c9 <free>
c000db11:	83 c4 10             	add    esp,0x10
c000db14:	31 ff                	xor    edi,edi
c000db16:	eb 0f                	jmp    c000db27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db1c:	89 30                	mov    DWORD PTR [eax],esi
c000db1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db25:	89 30                	mov    DWORD PTR [eax],esi
c000db27:	83 c4 1c             	add    esp,0x1c
c000db2a:	89 f8                	mov    eax,edi
c000db2c:	5b                   	pop    ebx
c000db2d:	5e                   	pop    esi
c000db2e:	5f                   	pop    edi
c000db2f:	5d                   	pop    ebp
c000db30:	c3                   	ret    
c000db31:	90                   	nop

c000db32 <Video::putTGA(int, int, unsigned char*, int)>:
c000db32:	55                   	push   ebp
c000db33:	57                   	push   edi
c000db34:	56                   	push   esi
c000db35:	53                   	push   ebx
c000db36:	83 ec 28             	sub    esp,0x28
c000db39:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db41:	50                   	push   eax
c000db42:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db46:	50                   	push   eax
c000db47:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db4b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db4f:	56                   	push   esi
c000db50:	e8 75 fe ff ff       	call   c000d9ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db55:	83 c4 20             	add    esp,0x20
c000db58:	85 c0                	test   eax,eax
c000db5a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db5e:	74 35                	je     c000db95 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db60:	89 c7                	mov    edi,eax
c000db62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db66:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db6a:	39 d8                	cmp    eax,ebx
c000db6c:	7e 27                	jle    c000db95 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db6e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db7a:	39 e8                	cmp    eax,ebp
c000db7c:	7e 14                	jle    c000db92 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db7e:	8b 06                	mov    eax,DWORD PTR [esi]
c000db80:	83 c7 04             	add    edi,0x4
c000db83:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db86:	53                   	push   ebx
c000db87:	55                   	push   ebp
c000db88:	45                   	inc    ebp
c000db89:	56                   	push   esi
c000db8a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db8d:	83 c4 10             	add    esp,0x10
c000db90:	eb e0                	jmp    c000db72 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000db92:	43                   	inc    ebx
c000db93:	eb cd                	jmp    c000db62 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000db95:	83 c4 1c             	add    esp,0x1c
c000db98:	5b                   	pop    ebx
c000db99:	5e                   	pop    esi
c000db9a:	5f                   	pop    edi
c000db9b:	5d                   	pop    ebp
c000db9c:	c3                   	ret    
c000db9d:	66 90                	xchg   ax,ax
c000db9f:	90                   	nop

c000dba0 <ACPI::close(int, int, void*)>:
c000dba0:	83 ec 1c             	sub    esp,0x1c
c000dba3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbab:	74 0b                	je     c000dbb8 <ACPI::close(int, int, void*)+0x18>
c000dbad:	b8 00 00 00 00       	mov    eax,0x0
c000dbb2:	e9 9d 00 00 00       	jmp    c000dc54 <ACPI::close(int, int, void*)+0xb4>
c000dbb7:	90                   	nop
c000dbb8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbbd:	75 29                	jne    c000dbe8 <ACPI::close(int, int, void*)+0x48>
c000dbbf:	a1 28 32 02 c0       	mov    eax,ds:0xc0023228
c000dbc4:	85 c0                	test   eax,eax
c000dbc6:	74 08                	je     c000dbd0 <ACPI::close(int, int, void*)+0x30>
c000dbc8:	a1 28 32 02 c0       	mov    eax,ds:0xc0023228
c000dbcd:	ff d0                	call   eax
c000dbcf:	90                   	nop
c000dbd0:	83 ec 0c             	sub    esp,0xc
c000dbd3:	68 c4 e2 01 c0       	push   0xc001e2c4
c000dbd8:	e8 46 25 00 00       	call   c0010123 <KePanic(char const*)>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbe5:	eb 6d                	jmp    c000dc54 <ACPI::close(int, int, void*)+0xb4>
c000dbe7:	90                   	nop
c000dbe8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dbed:	75 5d                	jne    c000dc4c <ACPI::close(int, int, void*)+0xac>
c000dbef:	a1 24 32 02 c0       	mov    eax,ds:0xc0023224
c000dbf4:	85 c0                	test   eax,eax
c000dbf6:	74 08                	je     c000dc00 <ACPI::close(int, int, void*)+0x60>
c000dbf8:	a1 24 32 02 c0       	mov    eax,ds:0xc0023224
c000dbfd:	ff d0                	call   eax
c000dbff:	90                   	nop
c000dc00:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc05:	8d 76 00             	lea    esi,[esi+0x0]
c000dc08:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc0c:	25 ff 00 00 00       	and    eax,0xff
c000dc11:	83 e0 02             	and    eax,0x2
c000dc14:	74 1e                	je     c000dc34 <ACPI::close(int, int, void*)+0x94>
c000dc16:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc21:	89 c2                	mov    edx,eax
c000dc23:	ec                   	in     al,dx
c000dc24:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc28:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc30:	eb d6                	jmp    c000dc08 <ACPI::close(int, int, void*)+0x68>
c000dc32:	66 90                	xchg   ax,ax
c000dc34:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc3b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc40:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc48:	ee                   	out    dx,al
c000dc49:	8d 76 00             	lea    esi,[esi+0x0]
c000dc4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc51:	8d 76 00             	lea    esi,[esi+0x0]
c000dc54:	83 c4 1c             	add    esp,0x1c
c000dc57:	c3                   	ret    

c000dc58 <findRSDP()>:
c000dc58:	83 ec 1c             	sub    esp,0x1c
c000dc5b:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000dc60:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc66:	83 e0 04             	and    eax,0x4
c000dc69:	84 c0                	test   al,al
c000dc6b:	75 07                	jne    c000dc74 <findRSDP()+0x1c>
c000dc6d:	b8 00 00 00 00       	mov    eax,0x0
c000dc72:	eb 70                	jmp    c000dce4 <findRSDP()+0x8c>
c000dc74:	a1 68 0c 02 c0       	mov    eax,ds:0xc0020c68
c000dc79:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc7e:	7f 1c                	jg     c000dc9c <findRSDP()+0x44>
c000dc80:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000dc85:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc8b:	83 e2 fb             	and    edx,0xfffffffb
c000dc8e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dc94:	b8 00 00 00 00       	mov    eax,0x0
c000dc99:	eb 49                	jmp    c000dce4 <findRSDP()+0x8c>
c000dc9b:	90                   	nop
c000dc9c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dca4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dcac:	77 2e                	ja     c000dcdc <findRSDP()+0x84>
c000dcae:	83 ec 04             	sub    esp,0x4
c000dcb1:	6a 08                	push   0x8
c000dcb3:	68 5f e3 01 c0       	push   0xc001e35f
c000dcb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcbc:	e8 cf 26 ff ff       	call   c0000390 <memcmp>
c000dcc1:	83 c4 10             	add    esp,0x10
c000dcc4:	85 c0                	test   eax,eax
c000dcc6:	0f 94 c0             	sete   al
c000dcc9:	84 c0                	test   al,al
c000dccb:	74 07                	je     c000dcd4 <findRSDP()+0x7c>
c000dccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcd1:	eb 11                	jmp    c000dce4 <findRSDP()+0x8c>
c000dcd3:	90                   	nop
c000dcd4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dcd9:	eb c9                	jmp    c000dca4 <findRSDP()+0x4c>
c000dcdb:	90                   	nop
c000dcdc:	b8 00 00 00 00       	mov    eax,0x0
c000dce1:	8d 76 00             	lea    esi,[esi+0x0]
c000dce4:	83 c4 1c             	add    esp,0x1c
c000dce7:	c3                   	ret    

c000dce8 <loadACPITables(unsigned char*)>:
c000dce8:	57                   	push   edi
c000dce9:	56                   	push   esi
c000dcea:	53                   	push   ebx
c000dceb:	83 ec 60             	sub    esp,0x60
c000dcee:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000dcf3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcf9:	83 e0 04             	and    eax,0x4
c000dcfc:	84 c0                	test   al,al
c000dcfe:	0f 84 3c 02 00 00    	je     c000df40 <loadACPITables(unsigned char*)+0x258>
c000dd04:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c000dd09:	84 c0                	test   al,al
c000dd0b:	74 77                	je     c000dd84 <loadACPITables(unsigned char*)+0x9c>
c000dd0d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd1c:	83 e8 24             	sub    eax,0x24
c000dd1f:	c1 e8 03             	shr    eax,0x3
c000dd22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd26:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd2e:	66 90                	xchg   ax,ax
c000dd30:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd34:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd38:	0f 8d b6 00 00 00    	jge    c000ddf4 <loadACPITables(unsigned char*)+0x10c>
c000dd3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd42:	83 c0 24             	add    eax,0x24
c000dd45:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd49:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd51:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd55:	c1 e0 03             	shl    eax,0x3
c000dd58:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd5c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd63:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd65:	89 c1                	mov    ecx,eax
c000dd67:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c000dd6c:	8d 50 01             	lea    edx,[eax+0x1]
c000dd6f:	89 15 2c 32 02 c0    	mov    DWORD PTR ds:0xc002322c,edx
c000dd75:	89 ca                	mov    edx,ecx
c000dd77:	89 14 c5 44 32 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcdbc],edx
c000dd7e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd82:	eb ac                	jmp    c000dd30 <loadACPITables(unsigned char*)+0x48>
c000dd84:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd88:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd93:	83 e8 24             	sub    eax,0x24
c000dd96:	c1 e8 02             	shr    eax,0x2
c000dd99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dd9d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddac:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddb0:	7d 42                	jge    c000ddf4 <loadACPITables(unsigned char*)+0x10c>
c000ddb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddb6:	83 c0 24             	add    eax,0x24
c000ddb9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddc1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ddc5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddc9:	c1 e0 02             	shl    eax,0x2
c000ddcc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ddd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddd6:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c000dddb:	8d 50 01             	lea    edx,[eax+0x1]
c000ddde:	89 15 2c 32 02 c0    	mov    DWORD PTR ds:0xc002322c,edx
c000dde4:	89 ca                	mov    edx,ecx
c000dde6:	89 14 c5 44 32 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcdbc],edx
c000dded:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000ddf1:	eb b5                	jmp    c000dda8 <loadACPITables(unsigned char*)+0xc0>
c000ddf3:	90                   	nop
c000ddf4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ddfc:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c000de01:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de05:	0f 8d 39 01 00 00    	jge    c000df44 <loadACPITables(unsigned char*)+0x25c>
c000de0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de0f:	8b 04 c5 44 32 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcdbc]
c000de16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de1e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de26:	25 ff 0f 00 00       	and    eax,0xfff
c000de2b:	89 c6                	mov    esi,eax
c000de2d:	8b 1d 30 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d30
c000de33:	83 ec 0c             	sub    esp,0xc
c000de36:	6a 01                	push   0x1
c000de38:	e8 48 b4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000de3d:	83 c4 10             	add    esp,0x10
c000de40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de44:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de4a:	83 ec 0c             	sub    esp,0xc
c000de4d:	6a 01                	push   0x1
c000de4f:	6a 01                	push   0x1
c000de51:	50                   	push   eax
c000de52:	52                   	push   edx
c000de53:	53                   	push   ebx
c000de54:	e8 bb bd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de59:	83 c4 20             	add    esp,0x20
c000de5c:	09 f0                	or     eax,esi
c000de5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de62:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de66:	c1 e0 03             	shl    eax,0x3
c000de69:	05 40 32 02 c0       	add    eax,0xc0023240
c000de6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de7a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de96:	89 c6                	mov    esi,eax
c000de98:	89 d7                	mov    edi,edx
c000de9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de9c:	89 c8                	mov    eax,ecx
c000de9e:	89 fa                	mov    edx,edi
c000dea0:	89 f3                	mov    ebx,esi
c000dea2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dea6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000deaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000debd:	05 00 10 00 00       	add    eax,0x1000
c000dec2:	c1 e8 0c             	shr    eax,0xc
c000dec5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000decd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ded5:	25 ff 0f 00 00       	and    eax,0xfff
c000deda:	89 c6                	mov    esi,eax
c000dedc:	8b 1d 30 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d30
c000dee2:	83 ec 0c             	sub    esp,0xc
c000dee5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dee9:	e8 97 b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000def5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000defb:	83 ec 0c             	sub    esp,0xc
c000defe:	6a 01                	push   0x1
c000df00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df04:	50                   	push   eax
c000df05:	52                   	push   edx
c000df06:	53                   	push   ebx
c000df07:	e8 08 bd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df0c:	83 c4 20             	add    esp,0x20
c000df0f:	09 f0                	or     eax,esi
c000df11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df19:	83 ec 0c             	sub    esp,0xc
c000df1c:	50                   	push   eax
c000df1d:	e8 93 b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df22:	83 c4 10             	add    esp,0x10
c000df25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df2d:	89 14 c5 44 32 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcdbc],edx
c000df34:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df38:	e9 bf fe ff ff       	jmp    c000ddfc <loadACPITables(unsigned char*)+0x114>
c000df3d:	8d 76 00             	lea    esi,[esi+0x0]
c000df40:	90                   	nop
c000df41:	8d 76 00             	lea    esi,[esi+0x0]
c000df44:	83 c4 60             	add    esp,0x60
c000df47:	5b                   	pop    ebx
c000df48:	5e                   	pop    esi
c000df49:	5f                   	pop    edi
c000df4a:	c3                   	ret    
c000df4b:	90                   	nop

c000df4c <findRSDT(unsigned char*)>:
c000df4c:	57                   	push   edi
c000df4d:	56                   	push   esi
c000df4e:	53                   	push   ebx
c000df4f:	83 ec 50             	sub    esp,0x50
c000df52:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000df57:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df5d:	83 e0 04             	and    eax,0x4
c000df60:	84 c0                	test   al,al
c000df62:	75 0c                	jne    c000df70 <findRSDT(unsigned char*)+0x24>
c000df64:	b8 00 00 00 00       	mov    eax,0x0
c000df69:	e9 26 01 00 00       	jmp    c000e094 <findRSDT(unsigned char*)+0x148>
c000df6e:	66 90                	xchg   ax,ax
c000df70:	89 e0                	mov    eax,esp
c000df72:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df7e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000df96:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000df9a:	89 c6                	mov    esi,eax
c000df9c:	89 d7                	mov    edi,edx
c000df9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfa0:	89 c8                	mov    eax,ecx
c000dfa2:	89 fa                	mov    edx,edi
c000dfa4:	89 f3                	mov    ebx,esi
c000dfa6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfaa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfb2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfb6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dfba:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dfc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfd6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfda:	25 ff 0f 00 00       	and    eax,0xfff
c000dfdf:	89 c6                	mov    esi,eax
c000dfe1:	8b 1d 30 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d30
c000dfe7:	83 ec 0c             	sub    esp,0xc
c000dfea:	6a 02                	push   0x2
c000dfec:	e8 94 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dff1:	83 c4 10             	add    esp,0x10
c000dff4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dff8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dffe:	83 ec 0c             	sub    esp,0xc
c000e001:	6a 01                	push   0x1
c000e003:	6a 02                	push   0x2
c000e005:	50                   	push   eax
c000e006:	52                   	push   edx
c000e007:	53                   	push   ebx
c000e008:	e8 07 bc ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e00d:	83 c4 20             	add    esp,0x20
c000e010:	09 f0                	or     eax,esi
c000e012:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e016:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e01a:	25 ff 0f 00 00       	and    eax,0xfff
c000e01f:	89 c6                	mov    esi,eax
c000e021:	8b 1d 30 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d30
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	6a 02                	push   0x2
c000e02c:	e8 54 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e038:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e03e:	83 ec 0c             	sub    esp,0xc
c000e041:	6a 01                	push   0x1
c000e043:	6a 02                	push   0x2
c000e045:	50                   	push   eax
c000e046:	52                   	push   edx
c000e047:	53                   	push   ebx
c000e048:	e8 c7 bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e04d:	83 c4 20             	add    esp,0x20
c000e050:	09 f0                	or     eax,esi
c000e052:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e056:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e05b:	75 13                	jne    c000e070 <findRSDT(unsigned char*)+0x124>
c000e05d:	c6 05 40 34 02 c0 00 	mov    BYTE PTR ds:0xc0023440,0x0
c000e064:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e068:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e06c:	eb 22                	jmp    c000e090 <findRSDT(unsigned char*)+0x144>
c000e06e:	66 90                	xchg   ax,ax
c000e070:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e075:	75 11                	jne    c000e088 <findRSDT(unsigned char*)+0x13c>
c000e077:	c6 05 40 34 02 c0 01 	mov    BYTE PTR ds:0xc0023440,0x1
c000e07e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e082:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e086:	eb 08                	jmp    c000e090 <findRSDT(unsigned char*)+0x144>
c000e088:	b8 00 00 00 00       	mov    eax,0x0
c000e08d:	eb 05                	jmp    c000e094 <findRSDT(unsigned char*)+0x148>
c000e08f:	90                   	nop
c000e090:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e094:	83 c4 50             	add    esp,0x50
c000e097:	5b                   	pop    ebx
c000e098:	5e                   	pop    esi
c000e099:	5f                   	pop    edi
c000e09a:	c3                   	ret    
c000e09b:	90                   	nop

c000e09c <findDataTable(unsigned char*, char*)>:
c000e09c:	83 ec 1c             	sub    esp,0x1c
c000e09f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e0a4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0aa:	83 e0 04             	and    eax,0x4
c000e0ad:	84 c0                	test   al,al
c000e0af:	75 07                	jne    c000e0b8 <findDataTable(unsigned char*, char*)+0x1c>
c000e0b1:	b8 00 00 00 00       	mov    eax,0x0
c000e0b6:	eb 58                	jmp    c000e110 <findDataTable(unsigned char*, char*)+0x74>
c000e0b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0c0:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c000e0c5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0c9:	7d 3d                	jge    c000e108 <findDataTable(unsigned char*, char*)+0x6c>
c000e0cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0cf:	c1 e0 03             	shl    eax,0x3
c000e0d2:	05 40 32 02 c0       	add    eax,0xc0023240
c000e0d7:	83 ec 04             	sub    esp,0x4
c000e0da:	6a 04                	push   0x4
c000e0dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0e0:	50                   	push   eax
c000e0e1:	e8 aa 22 ff ff       	call   c0000390 <memcmp>
c000e0e6:	83 c4 10             	add    esp,0x10
c000e0e9:	85 c0                	test   eax,eax
c000e0eb:	0f 94 c0             	sete   al
c000e0ee:	84 c0                	test   al,al
c000e0f0:	74 0e                	je     c000e100 <findDataTable(unsigned char*, char*)+0x64>
c000e0f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0f6:	8b 04 c5 44 32 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcdbc]
c000e0fd:	eb 11                	jmp    c000e110 <findDataTable(unsigned char*, char*)+0x74>
c000e0ff:	90                   	nop
c000e100:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e104:	eb ba                	jmp    c000e0c0 <findDataTable(unsigned char*, char*)+0x24>
c000e106:	66 90                	xchg   ax,ax
c000e108:	b8 00 00 00 00       	mov    eax,0x0
c000e10d:	8d 76 00             	lea    esi,[esi+0x0]
c000e110:	83 c4 1c             	add    esp,0x1c
c000e113:	c3                   	ret    

c000e114 <scanMADT()>:
c000e114:	53                   	push   ebx
c000e115:	83 ec 38             	sub    esp,0x38
c000e118:	a1 50 0c 02 c0       	mov    eax,ds:0xc0020c50
c000e11d:	25 00 04 00 00       	and    eax,0x400
c000e122:	74 14                	je     c000e138 <scanMADT()+0x24>
c000e124:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e129:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e12f:	83 e2 fb             	and    edx,0xfffffffb
c000e132:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e138:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e13d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e143:	83 e0 04             	and    eax,0x4
c000e146:	84 c0                	test   al,al
c000e148:	0f 84 8a 04 00 00    	je     c000e5d8 <scanMADT()+0x4c4>
c000e14e:	e8 05 fb ff ff       	call   c000dc58 <findRSDP()>
c000e153:	a3 4c 34 02 c0       	mov    ds:0xc002344c,eax
c000e158:	a1 4c 34 02 c0       	mov    eax,ds:0xc002344c
c000e15d:	85 c0                	test   eax,eax
c000e15f:	75 1b                	jne    c000e17c <scanMADT()+0x68>
c000e161:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e166:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e16c:	83 e2 fb             	and    edx,0xfffffffb
c000e16f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e175:	e9 66 04 00 00       	jmp    c000e5e0 <scanMADT()+0x4cc>
c000e17a:	66 90                	xchg   ax,ax
c000e17c:	a1 4c 34 02 c0       	mov    eax,ds:0xc002344c
c000e181:	83 ec 0c             	sub    esp,0xc
c000e184:	50                   	push   eax
c000e185:	e8 c2 fd ff ff       	call   c000df4c <findRSDT(unsigned char*)>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	a3 48 34 02 c0       	mov    ds:0xc0023448,eax
c000e192:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000e197:	85 c0                	test   eax,eax
c000e199:	75 19                	jne    c000e1b4 <scanMADT()+0xa0>
c000e19b:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e1a0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1a6:	83 e2 fb             	and    edx,0xfffffffb
c000e1a9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1af:	e9 2c 04 00 00       	jmp    c000e5e0 <scanMADT()+0x4cc>
c000e1b4:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000e1b9:	83 ec 0c             	sub    esp,0xc
c000e1bc:	50                   	push   eax
c000e1bd:	e8 26 fb ff ff       	call   c000dce8 <loadACPITables(unsigned char*)>
c000e1c2:	83 c4 10             	add    esp,0x10
c000e1c5:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000e1ca:	83 ec 08             	sub    esp,0x8
c000e1cd:	68 68 e3 01 c0       	push   0xc001e368
c000e1d2:	50                   	push   eax
c000e1d3:	e8 c4 fe ff ff       	call   c000e09c <findDataTable(unsigned char*, char*)>
c000e1d8:	83 c4 10             	add    esp,0x10
c000e1db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1df:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e1e4:	75 1a                	jne    c000e200 <scanMADT()+0xec>
c000e1e6:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e1eb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1f1:	83 e2 fe             	and    edx,0xfffffffe
c000e1f4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1fa:	e9 e1 03 00 00       	jmp    c000e5e0 <scanMADT()+0x4cc>
c000e1ff:	90                   	nop
c000e200:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e208:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e20c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e20f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e213:	0f 87 c7 03 00 00    	ja     c000e5e0 <scanMADT()+0x4cc>
c000e219:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e221:	0f 87 b9 03 00 00    	ja     c000e5e0 <scanMADT()+0x4cc>
c000e227:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e22b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e22f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e233:	8d 50 01             	lea    edx,[eax+0x1]
c000e236:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e23a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e23e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e242:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e246:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e24a:	8d 50 01             	lea    edx,[eax+0x1]
c000e24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e251:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e255:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e259:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e25d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e262:	0f 86 74 03 00 00    	jbe    c000e5dc <scanMADT()+0x4c8>
c000e268:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e26d:	75 5d                	jne    c000e2cc <scanMADT()+0x1b8>
c000e26f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e273:	8d 50 01             	lea    edx,[eax+0x1]
c000e276:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e27a:	8a 15 40 36 02 c0    	mov    dl,BYTE PTR ds:0xc0023640
c000e280:	81 e2 ff 00 00 00    	and    edx,0xff
c000e286:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e28a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e28e:	88 82 80 36 02 c0    	mov    BYTE PTR [edx-0x3ffdc980],al
c000e294:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e298:	8d 42 01             	lea    eax,[edx+0x1]
c000e29b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e29f:	a0 40 36 02 c0       	mov    al,ds:0xc0023640
c000e2a4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2a7:	88 0d 40 36 02 c0    	mov    BYTE PTR ds:0xc0023640,cl
c000e2ad:	25 ff 00 00 00       	and    eax,0xff
c000e2b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2b6:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2ba:	88 90 60 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc9a0],dl
c000e2c0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2c5:	e9 f6 02 00 00       	jmp    c000e5c0 <scanMADT()+0x4ac>
c000e2ca:	66 90                	xchg   ax,ax
c000e2cc:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2d1:	0f 85 29 01 00 00    	jne    c000e400 <scanMADT()+0x2ec>
c000e2d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2db:	8d 50 01             	lea    edx,[eax+0x1]
c000e2de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2e2:	8a 15 00 35 02 c0    	mov    dl,BYTE PTR ds:0xc0023500
c000e2e8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2f2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2f6:	88 82 20 35 02 c0    	mov    BYTE PTR [edx-0x3ffdcae0],al
c000e2fc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e300:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e304:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e308:	01 d0                	add    eax,edx
c000e30a:	83 c0 2c             	add    eax,0x2c
c000e30d:	8a 00                	mov    al,BYTE PTR [eax]
c000e30f:	31 d2                	xor    edx,edx
c000e311:	88 c2                	mov    dl,al
c000e313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e317:	8d 48 01             	lea    ecx,[eax+0x1]
c000e31a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e31e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e322:	25 ff 00 00 00       	and    eax,0xff
c000e327:	c1 e0 08             	shl    eax,0x8
c000e32a:	89 d1                	mov    ecx,edx
c000e32c:	09 c1                	or     ecx,eax
c000e32e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e332:	8d 50 02             	lea    edx,[eax+0x2]
c000e335:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e339:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e33d:	25 ff 00 00 00       	and    eax,0xff
c000e342:	c1 e0 10             	shl    eax,0x10
c000e345:	09 c1                	or     ecx,eax
c000e347:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e34b:	8d 50 03             	lea    edx,[eax+0x3]
c000e34e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e352:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e356:	25 ff 00 00 00       	and    eax,0xff
c000e35b:	c1 e0 18             	shl    eax,0x18
c000e35e:	09 c1                	or     ecx,eax
c000e360:	89 ca                	mov    edx,ecx
c000e362:	a0 00 35 02 c0       	mov    al,ds:0xc0023500
c000e367:	25 ff 00 00 00       	and    eax,0xff
c000e36c:	89 14 85 40 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcac0],edx
c000e373:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e378:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e37c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e380:	01 d0                	add    eax,edx
c000e382:	83 c0 2c             	add    eax,0x2c
c000e385:	8a 00                	mov    al,BYTE PTR [eax]
c000e387:	31 d2                	xor    edx,edx
c000e389:	88 c2                	mov    dl,al
c000e38b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e38f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e396:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e39a:	25 ff 00 00 00       	and    eax,0xff
c000e39f:	c1 e0 08             	shl    eax,0x8
c000e3a2:	89 d1                	mov    ecx,edx
c000e3a4:	09 c1                	or     ecx,eax
c000e3a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3aa:	8d 50 02             	lea    edx,[eax+0x2]
c000e3ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3b5:	25 ff 00 00 00       	and    eax,0xff
c000e3ba:	c1 e0 10             	shl    eax,0x10
c000e3bd:	09 c1                	or     ecx,eax
c000e3bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c3:	8d 50 03             	lea    edx,[eax+0x3]
c000e3c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3ce:	25 ff 00 00 00       	and    eax,0xff
c000e3d3:	c1 e0 18             	shl    eax,0x18
c000e3d6:	09 c1                	or     ecx,eax
c000e3d8:	89 ca                	mov    edx,ecx
c000e3da:	a0 00 35 02 c0       	mov    al,ds:0xc0023500
c000e3df:	25 ff 00 00 00       	and    eax,0xff
c000e3e4:	89 14 85 c0 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca40],edx
c000e3eb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3f0:	a0 00 35 02 c0       	mov    al,ds:0xc0023500
c000e3f5:	40                   	inc    eax
c000e3f6:	a2 00 35 02 c0       	mov    ds:0xc0023500,al
c000e3fb:	e9 c0 01 00 00       	jmp    c000e5c0 <scanMADT()+0x4ac>
c000e400:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e405:	0f 85 fd 00 00 00    	jne    c000e508 <scanMADT()+0x3f4>
c000e40b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e40f:	8d 50 01             	lea    edx,[eax+0x1]
c000e412:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e416:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e41a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e41e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e422:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e426:	8d 50 01             	lea    edx,[eax+0x1]
c000e429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e42d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e431:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e435:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e43d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e441:	01 d0                	add    eax,edx
c000e443:	83 c0 2c             	add    eax,0x2c
c000e446:	8a 00                	mov    al,BYTE PTR [eax]
c000e448:	31 d2                	xor    edx,edx
c000e44a:	88 c2                	mov    dl,al
c000e44c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e450:	8d 48 01             	lea    ecx,[eax+0x1]
c000e453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e457:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e45b:	25 ff 00 00 00       	and    eax,0xff
c000e460:	c1 e0 08             	shl    eax,0x8
c000e463:	89 d1                	mov    ecx,edx
c000e465:	09 c1                	or     ecx,eax
c000e467:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46b:	8d 50 02             	lea    edx,[eax+0x2]
c000e46e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e472:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e476:	25 ff 00 00 00       	and    eax,0xff
c000e47b:	c1 e0 10             	shl    eax,0x10
c000e47e:	09 c1                	or     ecx,eax
c000e480:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e484:	8d 50 03             	lea    edx,[eax+0x3]
c000e487:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e48b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e48f:	25 ff 00 00 00       	and    eax,0xff
c000e494:	c1 e0 18             	shl    eax,0x18
c000e497:	09 c8                	or     eax,ecx
c000e499:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e49d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4aa:	01 d0                	add    eax,edx
c000e4ac:	83 c0 2c             	add    eax,0x2c
c000e4af:	8a 00                	mov    al,BYTE PTR [eax]
c000e4b1:	25 ff 00 00 00       	and    eax,0xff
c000e4b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4ba:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4c5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4cb:	c1 e2 08             	shl    edx,0x8
c000e4ce:	09 d0                	or     eax,edx
c000e4d0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4d5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4da:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4de:	25 ff 00 00 00       	and    eax,0xff
c000e4e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4e7:	88 90 00 f9 01 c0    	mov    BYTE PTR [eax-0x3ffe0700],dl
c000e4ed:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4f1:	31 d2                	xor    edx,edx
c000e4f3:	88 c2                	mov    dl,al
c000e4f5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e4fa:	66 89 84 12 e0 34 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcb20],ax
c000e502:	e9 b9 00 00 00       	jmp    c000e5c0 <scanMADT()+0x4ac>
c000e507:	90                   	nop
c000e508:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e50d:	0f 85 a1 00 00 00    	jne    c000e5b4 <scanMADT()+0x4a0>
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 50 01             	lea    edx,[eax+0x1]
c000e51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e51e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e522:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e526:	25 ff 00 00 00       	and    eax,0xff
c000e52b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e52f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e537:	01 d0                	add    eax,edx
c000e539:	83 c0 2c             	add    eax,0x2c
c000e53c:	8a 00                	mov    al,BYTE PTR [eax]
c000e53e:	31 d2                	xor    edx,edx
c000e540:	88 c2                	mov    dl,al
c000e542:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e546:	8d 48 01             	lea    ecx,[eax+0x1]
c000e549:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e54d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e551:	25 ff 00 00 00       	and    eax,0xff
c000e556:	c1 e0 08             	shl    eax,0x8
c000e559:	09 d0                	or     eax,edx
c000e55b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e55f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e568:	8d 50 01             	lea    edx,[eax+0x1]
c000e56b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e56f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e573:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e577:	25 ff 00 00 00       	and    eax,0xff
c000e57c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e584:	c1 e0 08             	shl    eax,0x8
c000e587:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e58b:	89 c1                	mov    ecx,eax
c000e58d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e591:	c1 e0 18             	shl    eax,0x18
c000e594:	89 c3                	mov    ebx,eax
c000e596:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c000e59b:	8d 50 01             	lea    edx,[eax+0x1]
c000e59e:	89 15 50 34 02 c0    	mov    DWORD PTR ds:0xc0023450,edx
c000e5a4:	09 d9                	or     ecx,ebx
c000e5a6:	89 ca                	mov    edx,ecx
c000e5a8:	89 14 85 60 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcba0],edx
c000e5af:	eb 0f                	jmp    c000e5c0 <scanMADT()+0x4ac>
c000e5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5b9:	75 05                	jne    c000e5c0 <scanMADT()+0x4ac>
c000e5bb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5c0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5c4:	31 d2                	xor    edx,edx
c000e5c6:	88 c2                	mov    dl,al
c000e5c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5cc:	01 d0                	add    eax,edx
c000e5ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5d2:	e9 31 fc ff ff       	jmp    c000e208 <scanMADT()+0xf4>
c000e5d7:	90                   	nop
c000e5d8:	90                   	nop
c000e5d9:	eb 05                	jmp    c000e5e0 <scanMADT()+0x4cc>
c000e5db:	90                   	nop
c000e5dc:	90                   	nop
c000e5dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5e0:	83 c4 38             	add    esp,0x38
c000e5e3:	5b                   	pop    ebx
c000e5e4:	c3                   	ret    
c000e5e5:	90                   	nop
c000e5e6:	66 90                	xchg   ax,ax

c000e5e8 <ACPI::ACPI()>:
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ef:	83 ec 08             	sub    esp,0x8
c000e5f2:	68 6d e3 01 c0       	push   0xc001e36d
c000e5f7:	50                   	push   eax
c000e5f8:	e8 b3 d4 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000e5fd:	83 c4 10             	add    esp,0x10
c000e600:	ba a4 e4 01 c0       	mov    edx,0xc001e4a4
c000e605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e609:	89 10                	mov    DWORD PTR [eax],edx
c000e60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e628:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e632:	e8 dd fa ff ff       	call   c000e114 <scanMADT()>
c000e637:	90                   	nop
c000e638:	83 c4 0c             	add    esp,0xc
c000e63b:	c3                   	ret    

c000e63c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e63c:	83 ec 2c             	sub    esp,0x2c
c000e63f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e643:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e647:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e64b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e64f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e654:	88 d0                	mov    al,dl
c000e656:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e65a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e65f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e667:	90                   	nop
c000e668:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e66c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e672:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e676:	0f 8d 9c 00 00 00    	jge    c000e718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e67c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e680:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e684:	83 c2 2a             	add    edx,0x2a
c000e687:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e68b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e690:	75 7a                	jne    c000e70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e692:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e696:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e69a:	83 c2 2a             	add    edx,0x2a
c000e69d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6a1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6a5:	75 65                	jne    c000e70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6a7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6ac:	74 3a                	je     c000e6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6b6:	83 c2 2a             	add    edx,0x2a
c000e6b9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6c4:	39 c2                	cmp    edx,eax
c000e6c6:	74 10                	je     c000e6d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6c8:	83 ec 0c             	sub    esp,0xc
c000e6cb:	68 e8 e2 01 c0       	push   0xc001e2e8
c000e6d0:	e8 4e 1a 00 00       	call   c0010123 <KePanic(char const*)>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	83 ec 0c             	sub    esp,0xc
c000e6db:	68 72 e3 01 c0       	push   0xc001e372
c000e6e0:	e8 3e 1a 00 00       	call   c0010123 <KePanic(char const*)>
c000e6e5:	83 c4 10             	add    esp,0x10
c000e6e8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e6ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f4:	83 c2 2a             	add    edx,0x2a
c000e6f7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e6fb:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6fd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e700:	89 01                	mov    DWORD PTR [ecx],eax
c000e702:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e705:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e70a:	66 90                	xchg   ax,ax
c000e70c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e710:	e9 53 ff ff ff       	jmp    c000e668 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e715:	8d 76 00             	lea    esi,[esi+0x0]
c000e718:	90                   	nop
c000e719:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e71d:	83 c4 2c             	add    esp,0x2c
c000e720:	c2 04 00             	ret    0x4
c000e723:	90                   	nop

c000e724 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e724:	83 ec 1c             	sub    esp,0x1c
c000e727:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e72b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e72f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e733:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e738:	88 c8                	mov    al,cl
c000e73a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e73e:	88 d0                	mov    al,dl
c000e740:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e748:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e74e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e752:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e755:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e759:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e761:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e767:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e76b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e772:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e77b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e781:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e785:	8d 48 01             	lea    ecx,[eax+0x1]
c000e788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78c:	83 c2 2a             	add    edx,0x2a
c000e78f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e797:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e79d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7a8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7bd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7cd:	3d 00 02 00 00       	cmp    eax,0x200
c000e7d2:	75 10                	jne    c000e7e4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7d4:	83 ec 0c             	sub    esp,0xc
c000e7d7:	68 81 e3 01 c0       	push   0xc001e381
c000e7dc:	e8 42 19 00 00       	call   c0010123 <KePanic(char const*)>
c000e7e1:	83 c4 10             	add    esp,0x10
c000e7e4:	90                   	nop
c000e7e5:	83 c4 1c             	add    esp,0x1c
c000e7e8:	c3                   	ret    
c000e7e9:	90                   	nop
c000e7ea:	66 90                	xchg   ax,ax

c000e7ec <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e7ec:	b8 00 00 00 00       	mov    eax,0x0
c000e7f1:	c3                   	ret    
c000e7f2:	66 90                	xchg   ax,ax

c000e7f4 <ACPI::detectPCI()>:
c000e7f4:	53                   	push   ebx
c000e7f5:	83 ec 28             	sub    esp,0x28
c000e7f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7fd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e802:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000e807:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e80d:	83 e0 04             	and    eax,0x4
c000e810:	84 c0                	test   al,al
c000e812:	74 2c                	je     c000e840 <ACPI::detectPCI()+0x4c>
c000e814:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000e819:	83 ec 08             	sub    esp,0x8
c000e81c:	68 9e e3 01 c0       	push   0xc001e39e
c000e821:	50                   	push   eax
c000e822:	e8 75 f8 ff ff       	call   c000e09c <findDataTable(unsigned char*, char*)>
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e82e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e833:	74 0b                	je     c000e840 <ACPI::detectPCI()+0x4c>
c000e835:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e83a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e83f:	90                   	nop
c000e840:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e84c:	8a 00                	mov    al,BYTE PTR [eax]
c000e84e:	3c 01                	cmp    al,0x1
c000e850:	75 0e                	jne    c000e860 <ACPI::detectPCI()+0x6c>
c000e852:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e857:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e85c:	eb 2a                	jmp    c000e888 <ACPI::detectPCI()+0x94>
c000e85e:	66 90                	xchg   ax,ax
c000e860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e864:	8a 00                	mov    al,BYTE PTR [eax]
c000e866:	3c 02                	cmp    al,0x2
c000e868:	75 1e                	jne    c000e888 <ACPI::detectPCI()+0x94>
c000e86a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e86f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e874:	74 12                	je     c000e888 <ACPI::detectPCI()+0x94>
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	68 18 e3 01 c0       	push   0xc001e318
c000e87e:	e8 a0 18 00 00       	call   c0010123 <KePanic(char const*)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	66 90                	xchg   ax,ax
c000e888:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e88c:	83 f0 01             	xor    eax,0x1
c000e88f:	84 c0                	test   al,al
c000e891:	74 41                	je     c000e8d4 <ACPI::detectPCI()+0xe0>
c000e893:	e8 98 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e898:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e89c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8a1:	75 0d                	jne    c000e8b0 <ACPI::detectPCI()+0xbc>
c000e8a3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8a8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8ad:	eb 25                	jmp    c000e8d4 <ACPI::detectPCI()+0xe0>
c000e8af:	90                   	nop
c000e8b0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8b5:	75 1d                	jne    c000e8d4 <ACPI::detectPCI()+0xe0>
c000e8b7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8bc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8c1:	74 11                	je     c000e8d4 <ACPI::detectPCI()+0xe0>
c000e8c3:	83 ec 0c             	sub    esp,0xc
c000e8c6:	68 18 e3 01 c0       	push   0xc001e318
c000e8cb:	e8 53 18 00 00       	call   c0010123 <KePanic(char const*)>
c000e8d0:	83 c4 10             	add    esp,0x10
c000e8d3:	90                   	nop
c000e8d4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8d9:	0f 84 85 00 00 00    	je     c000e964 <ACPI::detectPCI()+0x170>
c000e8df:	83 ec 0c             	sub    esp,0xc
c000e8e2:	68 a3 e3 01 c0       	push   0xc001e3a3
c000e8e7:	e8 bf 11 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e8f7:	83 ec 0c             	sub    esp,0xc
c000e8fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8fe:	e8 b6 8e ff ff       	call   c00077b9 <malloc>
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	89 c3                	mov    ebx,eax
c000e908:	83 ec 0c             	sub    esp,0xc
c000e90b:	53                   	push   ebx
c000e90c:	e8 b9 9b 00 00       	call   c00184ca <PCI::PCI()>
c000e911:	83 c4 10             	add    esp,0x10
c000e914:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e91c:	83 ec 08             	sub    esp,0x8
c000e91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e923:	50                   	push   eax
c000e924:	e8 ef cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e929:	83 c4 10             	add    esp,0x10
c000e92c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e930:	8b 00                	mov    eax,DWORD PTR [eax]
c000e932:	83 c0 08             	add    eax,0x8
c000e935:	8b 00                	mov    eax,DWORD PTR [eax]
c000e937:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e93c:	74 0a                	je     c000e948 <ACPI::detectPCI()+0x154>
c000e93e:	ba 01 00 00 00       	mov    edx,0x1
c000e943:	eb 0b                	jmp    c000e950 <ACPI::detectPCI()+0x15c>
c000e945:	8d 76 00             	lea    esi,[esi+0x0]
c000e948:	ba 02 00 00 00       	mov    edx,0x2
c000e94d:	8d 76 00             	lea    esi,[esi+0x0]
c000e950:	6a 00                	push   0x0
c000e952:	6a 00                	push   0x0
c000e954:	52                   	push   edx
c000e955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e959:	ff d0                	call   eax
c000e95b:	83 c4 10             	add    esp,0x10
c000e95e:	e9 91 00 00 00       	jmp    c000e9f4 <ACPI::detectPCI()+0x200>
c000e963:	90                   	nop
c000e964:	83 ec 0c             	sub    esp,0xc
c000e967:	68 bb e3 01 c0       	push   0xc001e3bb
c000e96c:	e8 3a 11 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e97b:	83 ec 0c             	sub    esp,0xc
c000e97e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e982:	e8 32 8e ff ff       	call   c00077b9 <malloc>
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	89 c3                	mov    ebx,eax
c000e98c:	83 ec 0c             	sub    esp,0xc
c000e98f:	53                   	push   ebx
c000e990:	e8 61 a6 00 00       	call   c0018ff6 <IDE::IDE()>
c000e995:	83 c4 10             	add    esp,0x10
c000e998:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e99c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a0:	83 ec 08             	sub    esp,0x8
c000e9a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9a7:	50                   	push   eax
c000e9a8:	e8 6b cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9b4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9c2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9cf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9de:	83 c0 08             	add    eax,0x8
c000e9e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9e3:	6a 00                	push   0x0
c000e9e5:	6a 00                	push   0x0
c000e9e7:	6a 00                	push   0x0
c000e9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9ed:	ff d0                	call   eax
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	66 90                	xchg   ax,ax
c000e9f4:	90                   	nop
c000e9f5:	83 c4 28             	add    esp,0x28
c000e9f8:	5b                   	pop    ebx
c000e9f9:	c3                   	ret    
c000e9fa:	66 90                	xchg   ax,ax

c000e9fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e9fc:	83 ec 1c             	sub    esp,0x1c
c000e9ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea06:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea0a:	8b 15 38 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c38
c000ea10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea14:	25 ff 00 00 00       	and    eax,0xff
c000ea19:	83 ec 08             	sub    esp,0x8
c000ea1c:	50                   	push   eax
c000ea1d:	52                   	push   edx
c000ea1e:	e8 83 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea23:	83 c4 10             	add    esp,0x10
c000ea26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea2a:	8b 15 38 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c38
c000ea30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea34:	25 ff 00 00 00       	and    eax,0xff
c000ea39:	83 ec 04             	sub    esp,0x4
c000ea3c:	6a 01                	push   0x1
c000ea3e:	50                   	push   eax
c000ea3f:	52                   	push   edx
c000ea40:	e8 77 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea45:	83 c4 10             	add    esp,0x10
c000ea48:	90                   	nop
c000ea49:	83 c4 1c             	add    esp,0x1c
c000ea4c:	c3                   	ret    
c000ea4d:	90                   	nop
c000ea4e:	66 90                	xchg   ax,ax

c000ea50 <ACPI::sleep()>:
c000ea50:	83 ec 0c             	sub    esp,0xc
c000ea53:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c000ea58:	85 c0                	test   eax,eax
c000ea5a:	74 08                	je     c000ea64 <ACPI::sleep()+0x14>
c000ea5c:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c000ea61:	ff d0                	call   eax
c000ea63:	90                   	nop
c000ea64:	90                   	nop
c000ea65:	83 c4 0c             	add    esp,0xc
c000ea68:	c3                   	ret    
c000ea69:	90                   	nop
c000ea6a:	66 90                	xchg   ax,ax

c000ea6c <ACPI::open(int, int, void*)>:
c000ea6c:	57                   	push   edi
c000ea6d:	56                   	push   esi
c000ea6e:	53                   	push   ebx
c000ea6f:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea75:	83 ec 0c             	sub    esp,0xc
c000ea78:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea7f:	e8 70 fd ff ff       	call   c000e7f4 <ACPI::detectPCI()>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 ec 0c             	sub    esp,0xc
c000ea8a:	68 40 e3 01 c0       	push   0xc001e340
c000ea8f:	e8 17 10 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	83 ec 0c             	sub    esp,0xc
c000ea9a:	68 d0 e3 01 c0       	push   0xc001e3d0
c000ea9f:	e8 4e 38 00 00       	call   c00122f2 <Thr::loadKernelSymbolTable(char const*)>
c000eaa4:	83 c4 10             	add    esp,0x10
c000eaa7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eaaf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eac4:	e8 f0 8c ff ff       	call   c00077b9 <malloc>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	89 c3                	mov    ebx,eax
c000eace:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c000ead3:	83 ec 04             	sub    esp,0x4
c000ead6:	50                   	push   eax
c000ead7:	68 ee e3 01 c0       	push   0xc001e3ee
c000eadc:	53                   	push   ebx
c000eadd:	e8 6c bf ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000eae2:	83 c4 10             	add    esp,0x10
c000eae5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	6a 01                	push   0x1
c000eaf1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eaf8:	e8 11 c0 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000eafd:	83 c4 10             	add    esp,0x10
c000eb00:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb07:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb0f:	75 17                	jne    c000eb28 <ACPI::open(int, int, void*)+0xbc>
c000eb11:	83 ec 0c             	sub    esp,0xc
c000eb14:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb1b:	e8 4c c0 ff ff       	call   c000ab6c <File::close()>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	eb 0b                	jmp    c000eb30 <ACPI::open(int, int, void*)+0xc4>
c000eb25:	8d 76 00             	lea    esi,[esi+0x0]
c000eb28:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb30:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb38:	74 1e                	je     c000eb58 <ACPI::open(int, int, void*)+0xec>
c000eb3a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb41:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb43:	83 c0 08             	add    eax,0x8
c000eb46:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb48:	83 ec 0c             	sub    esp,0xc
c000eb4b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb52:	ff d0                	call   eax
c000eb54:	83 c4 10             	add    esp,0x10
c000eb57:	90                   	nop
c000eb58:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb5f:	83 f0 01             	xor    eax,0x1
c000eb62:	84 c0                	test   al,al
c000eb64:	74 42                	je     c000eba8 <ACPI::open(int, int, void*)+0x13c>
c000eb66:	83 ec 0c             	sub    esp,0xc
c000eb69:	68 0c e4 01 c0       	push   0xc001e40c
c000eb6e:	e8 38 0f 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	83 ec 04             	sub    esp,0x4
c000eb79:	6a 0c                	push   0xc
c000eb7b:	68 27 e4 01 c0       	push   0xc001e427
c000eb80:	68 38 e4 01 c0       	push   0xc001e438
c000eb85:	e8 58 2d 00 00       	call   c00118e2 <Reg::readIntWithDefault(char*, char*, int)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eb9e:	e8 ec a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	66 90                	xchg   ax,ax
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	68 b7 d4 01 c0       	push   0xc001d4b7
c000ebb0:	e8 f6 0e 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebbf:	83 ec 08             	sub    esp,0x8
c000ebc2:	6a 12                	push   0x12
c000ebc4:	50                   	push   eax
c000ebc5:	e8 66 d0 ff ff       	call   c000bc30 <getDevicesOfType(DeviceType)>
c000ebca:	83 c4 0c             	add    esp,0xc
c000ebcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd0:	83 ec 0c             	sub    esp,0xc
c000ebd3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebda:	50                   	push   eax
c000ebdb:	e8 1c dd 00 00       	call   c001c8fc <LinkedList<Device>::isEmpty()>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	83 f0 01             	xor    eax,0x1
c000ebe6:	84 c0                	test   al,al
c000ebe8:	0f 84 46 01 00 00    	je     c000ed34 <ACPI::open(int, int, void*)+0x2c8>
c000ebee:	83 ec 0c             	sub    esp,0xc
c000ebf1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebf8:	50                   	push   eax
c000ebf9:	e8 1a dd 00 00       	call   c001c918 <LinkedList<Device>::getFirstElement()>
c000ebfe:	83 c4 10             	add    esp,0x10
c000ec01:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec12:	50                   	push   eax
c000ec13:	e8 08 dd 00 00       	call   c001c920 <LinkedList<Device>::removeFirst()>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec22:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec29:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec34:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec3a:	ba 09 00 00 00       	mov    edx,0x9
c000ec3f:	fc                   	cld    
c000ec40:	89 c7                	mov    edi,eax
c000ec42:	89 de                	mov    esi,ebx
c000ec44:	89 d1                	mov    ecx,edx
c000ec46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec48:	83 ec 08             	sub    esp,0x8
c000ec4b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec4f:	50                   	push   eax
c000ec50:	83 ec 24             	sub    esp,0x24
c000ec53:	89 e0                	mov    eax,esp
c000ec55:	89 c3                	mov    ebx,eax
c000ec57:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec5b:	ba 09 00 00 00       	mov    edx,0x9
c000ec60:	89 df                	mov    edi,ebx
c000ec62:	89 c6                	mov    esi,eax
c000ec64:	89 d1                	mov    ecx,edx
c000ec66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec68:	e8 3f 9d 00 00       	call   c00189ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec6d:	83 c4 30             	add    esp,0x30
c000ec70:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec77:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec7f:	0f 84 4b ff ff ff    	je     c000ebd0 <ACPI::open(int, int, void*)+0x164>
c000ec85:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ec90:	83 ec 0c             	sub    esp,0xc
c000ec93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec9a:	e8 1a 8b ff ff       	call   c00077b9 <malloc>
c000ec9f:	83 c4 10             	add    esp,0x10
c000eca2:	89 c3                	mov    ebx,eax
c000eca4:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c000eca9:	83 ec 04             	sub    esp,0x4
c000ecac:	50                   	push   eax
c000ecad:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecb4:	53                   	push   ebx
c000ecb5:	e8 94 bd ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000ecba:	83 c4 10             	add    esp,0x10
c000ecbd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ecc4:	83 ec 0c             	sub    esp,0xc
c000ecc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecce:	e8 a9 c0 ff ff       	call   c000ad7c <File::exists()>
c000ecd3:	83 c4 10             	add    esp,0x10
c000ecd6:	84 c0                	test   al,al
c000ecd8:	74 2a                	je     c000ed04 <ACPI::open(int, int, void*)+0x298>
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	6a 01                	push   0x1
c000ecdf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ece6:	e8 7e 40 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	83 ec 08             	sub    esp,0x8
c000ecf1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecf8:	50                   	push   eax
c000ecf9:	e8 9c 42 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000ecfe:	83 c4 10             	add    esp,0x10
c000ed01:	8d 76 00             	lea    esi,[esi+0x0]
c000ed04:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed0c:	0f 84 be fe ff ff    	je     c000ebd0 <ACPI::open(int, int, void*)+0x164>
c000ed12:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed1b:	83 c0 08             	add    eax,0x8
c000ed1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed2a:	ff d0                	call   eax
c000ed2c:	83 c4 10             	add    esp,0x10
c000ed2f:	e9 9c fe ff ff       	jmp    c000ebd0 <ACPI::open(int, int, void*)+0x164>
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed3e:	50                   	push   eax
c000ed3f:	e8 b4 db 00 00       	call   c001c8f8 <LinkedList<Device>::~LinkedList()>
c000ed44:	83 c4 10             	add    esp,0x10
c000ed47:	8b 1d 38 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c38
c000ed4d:	83 ec 08             	sub    esp,0x8
c000ed50:	6a 01                	push   0x1
c000ed52:	68 3f e4 01 c0       	push   0xc001e43f
c000ed57:	e8 0d 40 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000ed5c:	83 c4 10             	add    esp,0x10
c000ed5f:	83 ec 08             	sub    esp,0x8
c000ed62:	53                   	push   ebx
c000ed63:	50                   	push   eax
c000ed64:	e8 31 42 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000ed71:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed77:	83 e0 04             	and    eax,0x4
c000ed7a:	84 c0                	test   al,al
c000ed7c:	0f 84 16 01 00 00    	je     c000ee98 <ACPI::open(int, int, void*)+0x42c>
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	68 5c e4 01 c0       	push   0xc001e45c
c000ed8a:	e8 1c 0d 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000ed8f:	83 c4 10             	add    esp,0x10
c000ed92:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ed9d:	83 ec 0c             	sub    esp,0xc
c000eda0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000eda7:	e8 0d 8a ff ff       	call   c00077b9 <malloc>
c000edac:	83 c4 10             	add    esp,0x10
c000edaf:	89 c3                	mov    ebx,eax
c000edb1:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c000edb6:	83 ec 04             	sub    esp,0x4
c000edb9:	50                   	push   eax
c000edba:	68 79 e4 01 c0       	push   0xc001e479
c000edbf:	53                   	push   ebx
c000edc0:	e8 89 bc ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000edc5:	83 c4 10             	add    esp,0x10
c000edc8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000edcf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edd7:	74 1b                	je     c000edf4 <ACPI::open(int, int, void*)+0x388>
c000edd9:	83 ec 0c             	sub    esp,0xc
c000eddc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ede3:	e8 94 bf ff ff       	call   c000ad7c <File::exists()>
c000ede8:	83 c4 10             	add    esp,0x10
c000edeb:	84 c0                	test   al,al
c000eded:	74 05                	je     c000edf4 <ACPI::open(int, int, void*)+0x388>
c000edef:	b0 01                	mov    al,0x1
c000edf1:	eb 05                	jmp    c000edf8 <ACPI::open(int, int, void*)+0x38c>
c000edf3:	90                   	nop
c000edf4:	b0 00                	mov    al,0x0
c000edf6:	66 90                	xchg   ax,ax
c000edf8:	84 c0                	test   al,al
c000edfa:	74 28                	je     c000ee24 <ACPI::open(int, int, void*)+0x3b8>
c000edfc:	83 ec 08             	sub    esp,0x8
c000edff:	6a 01                	push   0x1
c000ee01:	68 79 e4 01 c0       	push   0xc001e479
c000ee06:	e8 5e 3f 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c000ee0b:	83 c4 10             	add    esp,0x10
c000ee0e:	83 ec 08             	sub    esp,0x8
c000ee11:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee18:	50                   	push   eax
c000ee19:	e8 7c 41 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c000ee1e:	83 c4 10             	add    esp,0x10
c000ee21:	8d 76 00             	lea    esi,[esi+0x0]
c000ee24:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee2c:	74 2a                	je     c000ee58 <ACPI::open(int, int, void*)+0x3ec>
c000ee2e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee36:	74 20                	je     c000ee58 <ACPI::open(int, int, void*)+0x3ec>
c000ee38:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee41:	83 c0 08             	add    eax,0x8
c000ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee46:	83 ec 0c             	sub    esp,0xc
c000ee49:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee50:	ff d0                	call   eax
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	8d 76 00             	lea    esi,[esi+0x0]
c000ee58:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000ee5d:	83 ec 08             	sub    esp,0x8
c000ee60:	68 96 e4 01 c0       	push   0xc001e496
c000ee65:	50                   	push   eax
c000ee66:	e8 31 f2 ff ff       	call   c000e09c <findDataTable(unsigned char*, char*)>
c000ee6b:	83 c4 10             	add    esp,0x10
c000ee6e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee75:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee7d:	74 19                	je     c000ee98 <ACPI::open(int, int, void*)+0x42c>
c000ee7f:	83 ec 08             	sub    esp,0x8
c000ee82:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee89:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ee90:	e8 67 fb ff ff       	call   c000e9fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ee95:	83 c4 10             	add    esp,0x10
c000ee98:	b8 00 00 00 00       	mov    eax,0x0
c000ee9d:	81 c4 70 01 00 00    	add    esp,0x170
c000eea3:	5b                   	pop    ebx
c000eea4:	5e                   	pop    esi
c000eea5:	5f                   	pop    edi
c000eea6:	c3                   	ret    
c000eea7:	90                   	nop

c000eea8 <CPU::close(int, int, void*)>:
c000eea8:	31 c0                	xor    eax,eax
c000eeaa:	c3                   	ret    
c000eeab:	90                   	nop

c000eeac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eeac:	60                   	pusha  
c000eead:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eeb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eeb9:	9c                   	pushf  
c000eeba:	fa                   	cli    
c000eebb:	0f 09                	wbinvd 
c000eebd:	0f 30                	wrmsr  
c000eebf:	9d                   	popf   
c000eec0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eec4:	89 02                	mov    DWORD PTR [edx],eax
c000eec6:	61                   	popa   
c000eec7:	c3                   	ret    

c000eec8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eec8:	60                   	pusha  
c000eec9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eecd:	9c                   	pushf  
c000eece:	fa                   	cli    
c000eecf:	0f 09                	wbinvd 
c000eed1:	31 c0                	xor    eax,eax
c000eed3:	31 d2                	xor    edx,edx
c000eed5:	0f 32                	rdmsr  
c000eed7:	9d                   	popf   
c000eed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eedc:	89 02                	mov    DWORD PTR [edx],eax
c000eede:	61                   	popa   
c000eedf:	c3                   	ret    

c000eee0 <CPU::AMD_K6_writeback(int, int, int)>:
c000eee0:	56                   	push   esi
c000eee1:	53                   	push   ebx
c000eee2:	83 ec 10             	sub    esp,0x10
c000eee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000eeee:	75 5d                	jne    c000ef4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eef0:	83 f8 08             	cmp    eax,0x8
c000eef3:	75 09                	jne    c000eefe <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000eef5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000eefa:	7e 13                	jle    c000ef0f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eefc:	eb 30                	jmp    c000ef2e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eefe:	83 f8 06             	cmp    eax,0x6
c000ef01:	7c 4a                	jl     c000ef4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef03:	83 f8 07             	cmp    eax,0x7
c000ef06:	7e 07                	jle    c000ef0f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef08:	83 f8 09             	cmp    eax,0x9
c000ef0b:	74 21                	je     c000ef2e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef0d:	eb 3e                	jmp    c000ef4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef0f:	89 e6                	mov    esi,esp
c000ef11:	8b 1d 5c 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c5c
c000ef17:	56                   	push   esi
c000ef18:	c1 eb 15             	shr    ebx,0x15
c000ef1b:	68 82 00 00 c0       	push   0xc0000082
c000ef20:	83 e3 7e             	and    ebx,0x7e
c000ef23:	e8 a0 ff ff ff       	call   c000eec8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef28:	56                   	push   esi
c000ef29:	6a 00                	push   0x0
c000ef2b:	53                   	push   ebx
c000ef2c:	eb 12                	jmp    c000ef40 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef2e:	89 e3                	mov    ebx,esp
c000ef30:	53                   	push   ebx
c000ef31:	68 82 00 00 c0       	push   0xc0000082
c000ef36:	e8 8d ff ff ff       	call   c000eec8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef3b:	53                   	push   ebx
c000ef3c:	6a 00                	push   0x0
c000ef3e:	6a 00                	push   0x0
c000ef40:	68 82 00 00 c0       	push   0xc0000082
c000ef45:	e8 62 ff ff ff       	call   c000eeac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef4a:	83 c4 18             	add    esp,0x18
c000ef4d:	83 c4 10             	add    esp,0x10
c000ef50:	5b                   	pop    ebx
c000ef51:	5e                   	pop    esi
c000ef52:	c3                   	ret    
c000ef53:	90                   	nop

c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef54:	55                   	push   ebp
c000ef55:	57                   	push   edi
c000ef56:	56                   	push   esi
c000ef57:	53                   	push   ebx
c000ef58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef60:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef64:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef68:	39 05 10 f9 01 c0    	cmp    DWORD PTR ds:0xc001f910,eax
c000ef6e:	75 23                	jne    c000ef93 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef70:	a1 ac 36 02 c0       	mov    eax,ds:0xc00236ac
c000ef75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef79:	89 06                	mov    DWORD PTR [esi],eax
c000ef7b:	a1 a8 36 02 c0       	mov    eax,ds:0xc00236a8
c000ef80:	89 07                	mov    DWORD PTR [edi],eax
c000ef82:	a1 a4 36 02 c0       	mov    eax,ds:0xc00236a4
c000ef87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef8a:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c000ef8f:	89 02                	mov    DWORD PTR [edx],eax
c000ef91:	eb 3f                	jmp    c000efd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ef93:	31 c9                	xor    ecx,ecx
c000ef95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef99:	0f a2                	cpuid  
c000ef9b:	89 06                	mov    DWORD PTR [esi],eax
c000ef9d:	89 1f                	mov    DWORD PTR [edi],ebx
c000ef9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efa3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efa6:	89 10                	mov    DWORD PTR [eax],edx
c000efa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efac:	a3 10 f9 01 c0       	mov    ds:0xc001f910,eax
c000efb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000efb3:	a3 ac 36 02 c0       	mov    ds:0xc00236ac,eax
c000efb8:	8b 07                	mov    eax,DWORD PTR [edi]
c000efba:	a3 a8 36 02 c0       	mov    ds:0xc00236a8,eax
c000efbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efc2:	a3 a4 36 02 c0       	mov    ds:0xc00236a4,eax
c000efc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000efcd:	a3 a0 36 02 c0       	mov    ds:0xc00236a0,eax
c000efd2:	5b                   	pop    ebx
c000efd3:	5e                   	pop    esi
c000efd4:	5f                   	pop    edi
c000efd5:	5d                   	pop    ebp
c000efd6:	c3                   	ret    
c000efd7:	90                   	nop

c000efd8 <CPU::cpuidCheckEDX(unsigned int)>:
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efdf:	50                   	push   eax
c000efe0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efe4:	50                   	push   eax
c000efe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efe9:	50                   	push   eax
c000efea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efee:	50                   	push   eax
c000efef:	6a 01                	push   0x1
c000eff1:	e8 5e ff ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eff6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000effa:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000effe:	0f 95 c0             	setne  al
c000f001:	83 c4 24             	add    esp,0x24
c000f004:	c3                   	ret    
c000f005:	90                   	nop

c000f006 <CPU::cpuidCheckECX(unsigned int)>:
c000f006:	83 ec 10             	sub    esp,0x10
c000f009:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f00d:	50                   	push   eax
c000f00e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f012:	50                   	push   eax
c000f013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f017:	50                   	push   eax
c000f018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01c:	50                   	push   eax
c000f01d:	6a 01                	push   0x1
c000f01f:	e8 30 ff ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f024:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f028:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f02c:	0f 95 c0             	setne  al
c000f02f:	83 c4 24             	add    esp,0x24
c000f032:	c3                   	ret    
c000f033:	90                   	nop

c000f034 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f034:	83 ec 10             	sub    esp,0x10
c000f037:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f03b:	50                   	push   eax
c000f03c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f040:	50                   	push   eax
c000f041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f045:	50                   	push   eax
c000f046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04a:	50                   	push   eax
c000f04b:	6a 07                	push   0x7
c000f04d:	e8 02 ff ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f052:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f056:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f05a:	0f 95 c0             	setne  al
c000f05d:	83 c4 24             	add    esp,0x24
c000f060:	c3                   	ret    
c000f061:	90                   	nop

c000f062 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f062:	83 ec 10             	sub    esp,0x10
c000f065:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f069:	50                   	push   eax
c000f06a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f06e:	50                   	push   eax
c000f06f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f073:	50                   	push   eax
c000f074:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f078:	50                   	push   eax
c000f079:	6a 07                	push   0x7
c000f07b:	e8 d4 fe ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f080:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f084:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f088:	0f 95 c0             	setne  al
c000f08b:	83 c4 24             	add    esp,0x24
c000f08e:	c3                   	ret    
c000f08f:	90                   	nop

c000f090 <CPU::CPU()>:
c000f090:	83 ec 0c             	sub    esp,0xc
c000f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f097:	83 ec 08             	sub    esp,0x8
c000f09a:	68 b9 e5 01 c0       	push   0xc001e5b9
c000f09f:	50                   	push   eax
c000f0a0:	e8 0b ca ff ff       	call   c000bab0 <Device::Device(char const*)>
c000f0a5:	83 c4 10             	add    esp,0x10
c000f0a8:	ba 40 e6 01 c0       	mov    edx,0xc001e640
c000f0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0b1:	89 10                	mov    DWORD PTR [eax],edx
c000f0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0b7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0c5:	05 78 01 00 00       	add    eax,0x178
c000f0ca:	83 ec 0c             	sub    esp,0xc
c000f0cd:	50                   	push   eax
c000f0ce:	e8 a7 7f ff ff       	call   c000707a <GDT::GDT()>
c000f0d3:	83 c4 10             	add    esp,0x10
c000f0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0da:	05 7c 09 00 00       	add    eax,0x97c
c000f0df:	83 ec 0c             	sub    esp,0xc
c000f0e2:	50                   	push   eax
c000f0e3:	e8 cc 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f0e8:	83 c4 10             	add    esp,0x10
c000f0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ef:	05 7c 11 00 00       	add    eax,0x117c
c000f0f4:	83 ec 0c             	sub    esp,0xc
c000f0f7:	50                   	push   eax
c000f0f8:	e8 cb 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f0fd:	83 c4 10             	add    esp,0x10
c000f100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f104:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f10f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f119:	90                   	nop
c000f11a:	83 c4 0c             	add    esp,0xc
c000f11d:	c3                   	ret    

c000f11e <CPU::displayFeatures()>:
c000f11e:	c3                   	ret    
c000f11f:	90                   	nop

c000f120 <CPU::detectFeatures()>:
c000f120:	55                   	push   ebp
c000f121:	57                   	push   edi
c000f122:	56                   	push   esi
c000f123:	53                   	push   ebx
c000f124:	83 ec 30             	sub    esp,0x30
c000f127:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f12b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f135:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f13c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f142:	6a 0d                	push   0xd
c000f144:	6a 00                	push   0x0
c000f146:	55                   	push   ebp
c000f147:	e8 84 13 ff ff       	call   c00004d0 <memset>
c000f14c:	83 c4 10             	add    esp,0x10
c000f14f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000f154:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f15b:	0f 84 d5 05 00 00    	je     c000f736 <CPU::detectFeatures()+0x616>
c000f161:	83 ec 0c             	sub    esp,0xc
c000f164:	89 ef                	mov    edi,ebp
c000f166:	6a 10                	push   0x10
c000f168:	e8 6b fe ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f16d:	83 e0 01             	and    eax,0x1
c000f170:	8d 14 00             	lea    edx,[eax+eax*1]
c000f173:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f179:	83 e0 fd             	and    eax,0xfffffffd
c000f17c:	09 d0                	or     eax,edx
c000f17e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f184:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f18b:	e8 48 fe ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f190:	83 e0 01             	and    eax,0x1
c000f193:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f19a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1a0:	83 e0 fb             	and    eax,0xfffffffb
c000f1a3:	09 d0                	or     eax,edx
c000f1a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1ab:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1b2:	e8 21 fe ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1b7:	83 e0 01             	and    eax,0x1
c000f1ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1c1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1c7:	83 e0 f7             	and    eax,0xfffffff7
c000f1ca:	09 d0                	or     eax,edx
c000f1cc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1d2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1d9:	e8 fa fd ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1de:	83 e0 01             	and    eax,0x1
c000f1e1:	c1 e0 04             	shl    eax,0x4
c000f1e4:	88 c2                	mov    dl,al
c000f1e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1ec:	83 e0 ef             	and    eax,0xffffffef
c000f1ef:	09 d0                	or     eax,edx
c000f1f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1f7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f1fe:	e8 d5 fd ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f203:	83 e0 01             	and    eax,0x1
c000f206:	c1 e0 05             	shl    eax,0x5
c000f209:	88 c2                	mov    dl,al
c000f20b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f211:	83 e0 df             	and    eax,0xffffffdf
c000f214:	09 d0                	or     eax,edx
c000f216:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f21c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f223:	e8 b0 fd ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f228:	83 e0 01             	and    eax,0x1
c000f22b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f22e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f234:	83 e0 fd             	and    eax,0xfffffffd
c000f237:	09 d0                	or     eax,edx
c000f239:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f23f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f246:	e8 8d fd ff ff       	call   c000efd8 <CPU::cpuidCheckEDX(unsigned int)>
c000f24b:	83 e0 01             	and    eax,0x1
c000f24e:	c1 e0 06             	shl    eax,0x6
c000f251:	88 c2                	mov    dl,al
c000f253:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f259:	83 e0 bf             	and    eax,0xffffffbf
c000f25c:	09 d0                	or     eax,edx
c000f25e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f264:	58                   	pop    eax
c000f265:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f269:	50                   	push   eax
c000f26a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f26e:	50                   	push   eax
c000f26f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f273:	56                   	push   esi
c000f274:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f278:	50                   	push   eax
c000f279:	6a 00                	push   0x0
c000f27b:	e8 d4 fc ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f280:	b8 04 00 00 00       	mov    eax,0x4
c000f285:	89 c1                	mov    ecx,eax
c000f287:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f289:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f28f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f293:	89 c1                	mov    ecx,eax
c000f295:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f297:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f29d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2a1:	89 c1                	mov    ecx,eax
c000f2a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2a5:	83 c4 18             	add    esp,0x18
c000f2a8:	68 c8 e4 01 c0       	push   0xc001e4c8
c000f2ad:	55                   	push   ebp
c000f2ae:	e8 2d 14 ff ff       	call   c00006e0 <strcmp>
c000f2b3:	83 c4 10             	add    esp,0x10
c000f2b6:	85 c0                	test   eax,eax
c000f2b8:	75 0f                	jne    c000f2c9 <CPU::detectFeatures()+0x1a9>
c000f2ba:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2c4:	e9 22 02 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f2c9:	50                   	push   eax
c000f2ca:	50                   	push   eax
c000f2cb:	68 d5 e4 01 c0       	push   0xc001e4d5
c000f2d0:	55                   	push   ebp
c000f2d1:	e8 0a 14 ff ff       	call   c00006e0 <strcmp>
c000f2d6:	83 c4 10             	add    esp,0x10
c000f2d9:	85 c0                	test   eax,eax
c000f2db:	74 dd                	je     c000f2ba <CPU::detectFeatures()+0x19a>
c000f2dd:	50                   	push   eax
c000f2de:	50                   	push   eax
c000f2df:	68 e2 e4 01 c0       	push   0xc001e4e2
c000f2e4:	55                   	push   ebp
c000f2e5:	e8 f6 13 ff ff       	call   c00006e0 <strcmp>
c000f2ea:	83 c4 10             	add    esp,0x10
c000f2ed:	85 c0                	test   eax,eax
c000f2ef:	74 2a                	je     c000f31b <CPU::detectFeatures()+0x1fb>
c000f2f1:	50                   	push   eax
c000f2f2:	50                   	push   eax
c000f2f3:	68 ef e4 01 c0       	push   0xc001e4ef
c000f2f8:	55                   	push   ebp
c000f2f9:	e8 e2 13 ff ff       	call   c00006e0 <strcmp>
c000f2fe:	83 c4 10             	add    esp,0x10
c000f301:	85 c0                	test   eax,eax
c000f303:	74 16                	je     c000f31b <CPU::detectFeatures()+0x1fb>
c000f305:	50                   	push   eax
c000f306:	50                   	push   eax
c000f307:	68 fc e4 01 c0       	push   0xc001e4fc
c000f30c:	55                   	push   ebp
c000f30d:	e8 ce 13 ff ff       	call   c00006e0 <strcmp>
c000f312:	83 c4 10             	add    esp,0x10
c000f315:	85 c0                	test   eax,eax
c000f317:	74 48                	je     c000f361 <CPU::detectFeatures()+0x241>
c000f319:	eb 0f                	jmp    c000f32a <CPU::detectFeatures()+0x20a>
c000f31b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f325:	e9 c1 01 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f32a:	50                   	push   eax
c000f32b:	50                   	push   eax
c000f32c:	68 09 e5 01 c0       	push   0xc001e509
c000f331:	55                   	push   ebp
c000f332:	e8 a9 13 ff ff       	call   c00006e0 <strcmp>
c000f337:	83 c4 10             	add    esp,0x10
c000f33a:	85 c0                	test   eax,eax
c000f33c:	74 23                	je     c000f361 <CPU::detectFeatures()+0x241>
c000f33e:	57                   	push   edi
c000f33f:	57                   	push   edi
c000f340:	68 16 e5 01 c0       	push   0xc001e516
c000f345:	55                   	push   ebp
c000f346:	e8 95 13 ff ff       	call   c00006e0 <strcmp>
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	85 c0                	test   eax,eax
c000f350:	75 1e                	jne    c000f370 <CPU::detectFeatures()+0x250>
c000f352:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f35c:	e9 8a 01 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f361:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f36b:	e9 7b 01 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f370:	56                   	push   esi
c000f371:	56                   	push   esi
c000f372:	68 23 e5 01 c0       	push   0xc001e523
c000f377:	55                   	push   ebp
c000f378:	e8 63 13 ff ff       	call   c00006e0 <strcmp>
c000f37d:	83 c4 10             	add    esp,0x10
c000f380:	85 c0                	test   eax,eax
c000f382:	75 0f                	jne    c000f393 <CPU::detectFeatures()+0x273>
c000f384:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f38e:	e9 58 01 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f393:	51                   	push   ecx
c000f394:	51                   	push   ecx
c000f395:	68 e2 e4 01 c0       	push   0xc001e4e2
c000f39a:	55                   	push   ebp
c000f39b:	e8 40 13 ff ff       	call   c00006e0 <strcmp>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	85 c0                	test   eax,eax
c000f3a5:	75 0f                	jne    c000f3b6 <CPU::detectFeatures()+0x296>
c000f3a7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3b1:	e9 35 01 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f3b6:	52                   	push   edx
c000f3b7:	52                   	push   edx
c000f3b8:	68 30 e5 01 c0       	push   0xc001e530
c000f3bd:	55                   	push   ebp
c000f3be:	e8 1d 13 ff ff       	call   c00006e0 <strcmp>
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	85 c0                	test   eax,eax
c000f3c8:	75 0f                	jne    c000f3d9 <CPU::detectFeatures()+0x2b9>
c000f3ca:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3d4:	e9 12 01 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f3d9:	50                   	push   eax
c000f3da:	50                   	push   eax
c000f3db:	68 3d e5 01 c0       	push   0xc001e53d
c000f3e0:	55                   	push   ebp
c000f3e1:	e8 fa 12 ff ff       	call   c00006e0 <strcmp>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	85 c0                	test   eax,eax
c000f3eb:	75 0f                	jne    c000f3fc <CPU::detectFeatures()+0x2dc>
c000f3ed:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f3f7:	e9 ef 00 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f3fc:	50                   	push   eax
c000f3fd:	50                   	push   eax
c000f3fe:	68 4a e5 01 c0       	push   0xc001e54a
c000f403:	55                   	push   ebp
c000f404:	e8 d7 12 ff ff       	call   c00006e0 <strcmp>
c000f409:	83 c4 10             	add    esp,0x10
c000f40c:	85 c0                	test   eax,eax
c000f40e:	75 0f                	jne    c000f41f <CPU::detectFeatures()+0x2ff>
c000f410:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f41a:	e9 cc 00 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f41f:	50                   	push   eax
c000f420:	50                   	push   eax
c000f421:	68 57 e5 01 c0       	push   0xc001e557
c000f426:	55                   	push   ebp
c000f427:	e8 b4 12 ff ff       	call   c00006e0 <strcmp>
c000f42c:	83 c4 10             	add    esp,0x10
c000f42f:	85 c0                	test   eax,eax
c000f431:	75 0f                	jne    c000f442 <CPU::detectFeatures()+0x322>
c000f433:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f43d:	e9 a9 00 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f442:	50                   	push   eax
c000f443:	50                   	push   eax
c000f444:	68 64 e5 01 c0       	push   0xc001e564
c000f449:	55                   	push   ebp
c000f44a:	e8 91 12 ff ff       	call   c00006e0 <strcmp>
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	85 c0                	test   eax,eax
c000f454:	75 0f                	jne    c000f465 <CPU::detectFeatures()+0x345>
c000f456:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f460:	e9 86 00 00 00       	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f465:	50                   	push   eax
c000f466:	50                   	push   eax
c000f467:	68 71 e5 01 c0       	push   0xc001e571
c000f46c:	55                   	push   ebp
c000f46d:	e8 6e 12 ff ff       	call   c00006e0 <strcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	75 0c                	jne    c000f485 <CPU::detectFeatures()+0x365>
c000f479:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f483:	eb 66                	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f485:	50                   	push   eax
c000f486:	50                   	push   eax
c000f487:	68 7e e5 01 c0       	push   0xc001e57e
c000f48c:	55                   	push   ebp
c000f48d:	e8 4e 12 ff ff       	call   c00006e0 <strcmp>
c000f492:	83 c4 10             	add    esp,0x10
c000f495:	85 c0                	test   eax,eax
c000f497:	75 0c                	jne    c000f4a5 <CPU::detectFeatures()+0x385>
c000f499:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4a3:	eb 46                	jmp    c000f4eb <CPU::detectFeatures()+0x3cb>
c000f4a5:	57                   	push   edi
c000f4a6:	57                   	push   edi
c000f4a7:	68 8b e5 01 c0       	push   0xc001e58b
c000f4ac:	55                   	push   ebp
c000f4ad:	e8 2e 12 ff ff       	call   c00006e0 <strcmp>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	85 c0                	test   eax,eax
c000f4b7:	74 e0                	je     c000f499 <CPU::detectFeatures()+0x379>
c000f4b9:	56                   	push   esi
c000f4ba:	56                   	push   esi
c000f4bb:	68 98 e5 01 c0       	push   0xc001e598
c000f4c0:	55                   	push   ebp
c000f4c1:	e8 1a 12 ff ff       	call   c00006e0 <strcmp>
c000f4c6:	83 c4 10             	add    esp,0x10
c000f4c9:	85 c0                	test   eax,eax
c000f4cb:	74 cc                	je     c000f499 <CPU::detectFeatures()+0x379>
c000f4cd:	51                   	push   ecx
c000f4ce:	51                   	push   ecx
c000f4cf:	68 a5 e5 01 c0       	push   0xc001e5a5
c000f4d4:	55                   	push   ebp
c000f4d5:	e8 06 12 ff ff       	call   c00006e0 <strcmp>
c000f4da:	83 c4 10             	add    esp,0x10
c000f4dd:	85 c0                	test   eax,eax
c000f4df:	74 b8                	je     c000f499 <CPU::detectFeatures()+0x379>
c000f4e1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f4eb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f4f0:	0f 86 be 00 00 00    	jbe    c000f5b4 <CPU::detectFeatures()+0x494>
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	68 80 00 00 00       	push   0x80
c000f4fe:	e8 31 fb ff ff       	call   c000f034 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f503:	83 e0 01             	and    eax,0x1
c000f506:	c1 e0 06             	shl    eax,0x6
c000f509:	88 c2                	mov    dl,al
c000f50b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f511:	83 e0 bf             	and    eax,0xffffffbf
c000f514:	09 d0                	or     eax,edx
c000f516:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f51c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f523:	e8 0c fb ff ff       	call   c000f034 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f528:	83 e0 01             	and    eax,0x1
c000f52b:	c1 e0 04             	shl    eax,0x4
c000f52e:	88 c2                	mov    dl,al
c000f530:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f536:	83 e0 ef             	and    eax,0xffffffef
c000f539:	09 d0                	or     eax,edx
c000f53b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f541:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f548:	e8 e7 fa ff ff       	call   c000f034 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f54d:	c1 e0 07             	shl    eax,0x7
c000f550:	88 c2                	mov    dl,al
c000f552:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f558:	83 e0 7f             	and    eax,0x7f
c000f55b:	09 d0                	or     eax,edx
c000f55d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f563:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f56a:	e8 f3 fa ff ff       	call   c000f062 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f56f:	83 e0 01             	and    eax,0x1
c000f572:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f579:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f57f:	83 e0 f7             	and    eax,0xfffffff7
c000f582:	09 d0                	or     eax,edx
c000f584:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f58a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f591:	e8 cc fa ff ff       	call   c000f062 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	83 e0 01             	and    eax,0x1
c000f59c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5a3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5a9:	83 e0 fb             	and    eax,0xfffffffb
c000f5ac:	09 d0                	or     eax,edx
c000f5ae:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5b4:	83 ec 0c             	sub    esp,0xc
c000f5b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5bb:	50                   	push   eax
c000f5bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5c0:	50                   	push   eax
c000f5c1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5c5:	56                   	push   esi
c000f5c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5ca:	50                   	push   eax
c000f5cb:	6a 01                	push   0x1
c000f5cd:	e8 82 f9 ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5d2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5d6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5dc:	88 ca                	mov    dl,cl
c000f5de:	83 e0 f0             	and    eax,0xfffffff0
c000f5e1:	83 e2 0f             	and    edx,0xf
c000f5e4:	09 d0                	or     eax,edx
c000f5e6:	88 ca                	mov    dl,cl
c000f5e8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f5ee:	c0 ea 04             	shr    dl,0x4
c000f5f1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f5f5:	0f b6 c2             	movzx  eax,dl
c000f5f8:	83 c4 20             	add    esp,0x20
c000f5fb:	c1 e0 06             	shl    eax,0x6
c000f5fe:	89 c7                	mov    edi,eax
c000f600:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f606:	66 25 3f c0          	and    ax,0xc03f
c000f60a:	09 f8                	or     eax,edi
c000f60c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f613:	89 c8                	mov    eax,ecx
c000f615:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f61c:	c1 e8 08             	shr    eax,0x8
c000f61f:	83 e5 3f             	and    ebp,0x3f
c000f622:	83 e0 0f             	and    eax,0xf
c000f625:	89 c7                	mov    edi,eax
c000f627:	c1 e7 06             	shl    edi,0x6
c000f62a:	09 ef                	or     edi,ebp
c000f62c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f633:	89 fa                	mov    edx,edi
c000f635:	83 e5 c0             	and    ebp,0xffffffc0
c000f638:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f63e:	88 c2                	mov    dl,al
c000f640:	c0 ea 02             	shr    dl,0x2
c000f643:	89 d7                	mov    edi,edx
c000f645:	09 ef                	or     edi,ebp
c000f647:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f64d:	89 fa                	mov    edx,edi
c000f64f:	83 e5 cf             	and    ebp,0xffffffcf
c000f652:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f658:	89 cf                	mov    edi,ecx
c000f65a:	c1 ef 0c             	shr    edi,0xc
c000f65d:	83 e7 03             	and    edi,0x3
c000f660:	c1 e7 04             	shl    edi,0x4
c000f663:	09 ef                	or     edi,ebp
c000f665:	3c 06                	cmp    al,0x6
c000f667:	89 fa                	mov    edx,edi
c000f669:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f66f:	74 04                	je     c000f675 <CPU::detectFeatures()+0x555>
c000f671:	3c 0f                	cmp    al,0xf
c000f673:	75 5c                	jne    c000f6d1 <CPU::detectFeatures()+0x5b1>
c000f675:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f679:	89 cf                	mov    edi,ecx
c000f67b:	c1 ef 10             	shr    edi,0x10
c000f67e:	c1 e7 04             	shl    edi,0x4
c000f681:	09 fa                	or     edx,edi
c000f683:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f689:	0f b6 d2             	movzx  edx,dl
c000f68c:	66 81 e7 3f c0       	and    di,0xc03f
c000f691:	c1 e2 06             	shl    edx,0x6
c000f694:	09 fa                	or     edx,edi
c000f696:	3c 0f                	cmp    al,0xf
c000f698:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f69f:	75 30                	jne    c000f6d1 <CPU::detectFeatures()+0x5b1>
c000f6a1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6a7:	c1 e9 14             	shr    ecx,0x14
c000f6aa:	83 e0 3f             	and    eax,0x3f
c000f6ad:	83 c1 0f             	add    ecx,0xf
c000f6b0:	88 ca                	mov    dl,cl
c000f6b2:	c0 e9 02             	shr    cl,0x2
c000f6b5:	c1 e2 06             	shl    edx,0x6
c000f6b8:	09 d0                	or     eax,edx
c000f6ba:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6c0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6c6:	83 e0 c0             	and    eax,0xffffffc0
c000f6c9:	09 c1                	or     ecx,eax
c000f6cb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6d1:	83 ec 0c             	sub    esp,0xc
c000f6d4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6db:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6df:	50                   	push   eax
c000f6e0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f6e4:	55                   	push   ebp
c000f6e5:	56                   	push   esi
c000f6e6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f6ea:	57                   	push   edi
c000f6eb:	68 00 00 00 80       	push   0x80000000
c000f6f0:	e8 5f f8 ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f5:	83 c4 20             	add    esp,0x20
c000f6f8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f700:	76 22                	jbe    c000f724 <CPU::detectFeatures()+0x604>
c000f702:	83 ec 0c             	sub    esp,0xc
c000f705:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f709:	50                   	push   eax
c000f70a:	55                   	push   ebp
c000f70b:	56                   	push   esi
c000f70c:	57                   	push   edi
c000f70d:	68 01 00 00 80       	push   0x80000001
c000f712:	e8 3d f8 ff ff       	call   c000ef54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f717:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f721:	83 c4 20             	add    esp,0x20
c000f724:	52                   	push   edx
c000f725:	52                   	push   edx
c000f726:	68 b1 e5 01 c0       	push   0xc001e5b1
c000f72b:	53                   	push   ebx
c000f72c:	e8 71 c3 ff ff       	call   c000baa2 <Device::setName(char const*)>
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	eb 67                	jmp    c000f79d <CPU::detectFeatures()+0x67d>
c000f736:	50                   	push   eax
c000f737:	50                   	push   eax
c000f738:	68 16 e5 01 c0       	push   0xc001e516
c000f73d:	55                   	push   ebp
c000f73e:	e8 bd 0e ff ff       	call   c0000600 <strcpy>
c000f743:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f74d:	e8 71 0a ff ff       	call   c00001c3 <is486>
c000f752:	83 c4 10             	add    esp,0x10
c000f755:	85 c0                	test   eax,eax
c000f757:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f75d:	74 1d                	je     c000f77c <CPU::detectFeatures()+0x65c>
c000f75f:	83 c8 07             	or     eax,0x7
c000f762:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f768:	0f 20 c0             	mov    eax,cr0
c000f76b:	83 e0 14             	and    eax,0x14
c000f76e:	83 f8 04             	cmp    eax,0x4
c000f771:	75 0e                	jne    c000f781 <CPU::detectFeatures()+0x661>
c000f773:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f77a:	eb 21                	jmp    c000f79d <CPU::detectFeatures()+0x67d>
c000f77c:	83 e0 f8             	and    eax,0xfffffff8
c000f77f:	eb e1                	jmp    c000f762 <CPU::detectFeatures()+0x642>
c000f781:	e8 18 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f786:	83 e0 01             	and    eax,0x1
c000f789:	8d 14 00             	lea    edx,[eax+eax*1]
c000f78c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f792:	83 e0 fd             	and    eax,0xfffffffd
c000f795:	09 d0                	or     eax,edx
c000f797:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f79d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7a4:	74 0e                	je     c000f7b4 <CPU::detectFeatures()+0x694>
c000f7a6:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000f7ab:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7b2:	eb 20                	jmp    c000f7d4 <CPU::detectFeatures()+0x6b4>
c000f7b4:	e8 e5 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7b9:	83 e0 01             	and    eax,0x1
c000f7bc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7bf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7c5:	83 e0 fd             	and    eax,0xfffffffd
c000f7c8:	09 d0                	or     eax,edx
c000f7ca:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7d0:	a8 02                	test   al,0x2
c000f7d2:	75 d2                	jne    c000f7a6 <CPU::detectFeatures()+0x686>
c000f7d4:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7db:	83 c4 2c             	add    esp,0x2c
c000f7de:	5b                   	pop    ebx
c000f7df:	5e                   	pop    esi
c000f7e0:	5f                   	pop    edi
c000f7e1:	5d                   	pop    ebp
c000f7e2:	c3                   	ret    
c000f7e3:	90                   	nop

c000f7e4 <CPU::setupSMEP()>:
c000f7e4:	0f 20 e0             	mov    eax,cr4
c000f7e7:	0d 00 00 10 00       	or     eax,0x100000
c000f7ec:	0f 22 e0             	mov    cr4,eax
c000f7ef:	c3                   	ret    

c000f7f0 <CPU::setupUMIP()>:
c000f7f0:	0f 20 e0             	mov    eax,cr4
c000f7f3:	80 cc 08             	or     ah,0x8
c000f7f6:	0f 22 e0             	mov    cr4,eax
c000f7f9:	c3                   	ret    

c000f7fa <CPU::setupTSC()>:
c000f7fa:	0f 20 e0             	mov    eax,cr4
c000f7fd:	83 c8 04             	or     eax,0x4
c000f800:	0f 22 e0             	mov    cr4,eax
c000f803:	c3                   	ret    

c000f804 <CPU::setupLargePages()>:
c000f804:	0f 20 e0             	mov    eax,cr4
c000f807:	83 c8 10             	or     eax,0x10
c000f80a:	0f 22 e0             	mov    cr4,eax
c000f80d:	c3                   	ret    

c000f80e <CPU::setupPAT()>:
c000f80e:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c000f813:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f81a:	74 2c                	je     c000f848 <CPU::setupPAT()+0x3a>
c000f81c:	53                   	push   ebx
c000f81d:	83 ec 10             	sub    esp,0x10
c000f820:	68 77 02 00 00       	push   0x277
c000f825:	50                   	push   eax
c000f826:	e8 c7 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f82b:	83 e2 f8             	and    edx,0xfffffff8
c000f82e:	83 ca 01             	or     edx,0x1
c000f831:	52                   	push   edx
c000f832:	50                   	push   eax
c000f833:	68 77 02 00 00       	push   0x277
c000f838:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c000f83e:	e8 db 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f843:	83 c4 28             	add    esp,0x28
c000f846:	5b                   	pop    ebx
c000f847:	c3                   	ret    
c000f848:	c3                   	ret    
c000f849:	90                   	nop

c000f84a <CPU::setupMTRR()>:
c000f84a:	c3                   	ret    
c000f84b:	90                   	nop

c000f84c <CPU::setupGlobalPages()>:
c000f84c:	0f 20 e0             	mov    eax,cr4
c000f84f:	0c 80                	or     al,0x80
c000f851:	0f 22 e0             	mov    cr4,eax
c000f854:	c3                   	ret    
c000f855:	90                   	nop

c000f856 <CPU::allowUsermodeDataAccess()>:
c000f856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f85a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f861:	74 03                	je     c000f866 <CPU::allowUsermodeDataAccess()+0x10>
c000f863:	0f 01 cb             	stac   
c000f866:	c3                   	ret    
c000f867:	90                   	nop

c000f868 <CPU::prohibitUsermodeDataAccess()>:
c000f868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f873:	74 03                	je     c000f878 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f875:	0f 01 ca             	clac   
c000f878:	c3                   	ret    
c000f879:	90                   	nop

c000f87a <CPU::setupSMAP()>:
c000f87a:	0f 20 e0             	mov    eax,cr4
c000f87d:	0d 00 00 20 00       	or     eax,0x200000
c000f882:	0f 22 e0             	mov    cr4,eax
c000f885:	eb e1                	jmp    c000f868 <CPU::prohibitUsermodeDataAccess()>
c000f887:	90                   	nop

c000f888 <CPU::setupFeatures()>:
c000f888:	53                   	push   ebx
c000f889:	83 ec 08             	sub    esp,0x8
c000f88c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f890:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f897:	74 18                	je     c000f8b1 <CPU::setupFeatures()+0x29>
c000f899:	83 ec 0c             	sub    esp,0xc
c000f89c:	68 bd e5 01 c0       	push   0xc001e5bd
c000f8a1:	e8 32 ac ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8a9:	e8 42 ff ff ff       	call   c000f7f0 <CPU::setupUMIP()>
c000f8ae:	83 c4 10             	add    esp,0x10
c000f8b1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8b8:	74 18                	je     c000f8d2 <CPU::setupFeatures()+0x4a>
c000f8ba:	83 ec 0c             	sub    esp,0xc
c000f8bd:	68 c7 e5 01 c0       	push   0xc001e5c7
c000f8c2:	e8 11 ac ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8ca:	e8 2b ff ff ff       	call   c000f7fa <CPU::setupTSC()>
c000f8cf:	83 c4 10             	add    esp,0x10
c000f8d2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8d9:	74 18                	je     c000f8f3 <CPU::setupFeatures()+0x6b>
c000f8db:	83 ec 0c             	sub    esp,0xc
c000f8de:	68 d0 e5 01 c0       	push   0xc001e5d0
c000f8e3:	e8 f0 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8eb:	e8 14 ff ff ff       	call   c000f804 <CPU::setupLargePages()>
c000f8f0:	83 c4 10             	add    esp,0x10
c000f8f3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f8fa:	74 18                	je     c000f914 <CPU::setupFeatures()+0x8c>
c000f8fc:	83 ec 0c             	sub    esp,0xc
c000f8ff:	68 d9 e5 01 c0       	push   0xc001e5d9
c000f904:	e8 cf ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f909:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f90c:	e8 3b ff ff ff       	call   c000f84c <CPU::setupGlobalPages()>
c000f911:	83 c4 10             	add    esp,0x10
c000f914:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f91b:	74 18                	je     c000f935 <CPU::setupFeatures()+0xad>
c000f91d:	83 ec 0c             	sub    esp,0xc
c000f920:	68 eb e5 01 c0       	push   0xc001e5eb
c000f925:	e8 ae ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f92a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f92d:	e8 dc fe ff ff       	call   c000f80e <CPU::setupPAT()>
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f93c:	74 11                	je     c000f94f <CPU::setupFeatures()+0xc7>
c000f93e:	c7 44 24 10 f4 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e5f4
c000f946:	83 c4 08             	add    esp,0x8
c000f949:	5b                   	pop    ebx
c000f94a:	e9 89 ab ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f94f:	83 c4 08             	add    esp,0x8
c000f952:	5b                   	pop    ebx
c000f953:	c3                   	ret    

c000f954 <CPU::open(int, int, void*)>:
c000f954:	57                   	push   edi
c000f955:	56                   	push   esi
c000f956:	53                   	push   ebx
c000f957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f95b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f95f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f965:	83 ec 0c             	sub    esp,0xc
c000f968:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f96e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f974:	50                   	push   eax
c000f975:	e8 62 77 ff ff       	call   c00070dc <GDT::setup()>
c000f97a:	83 c4 0c             	add    esp,0xc
c000f97d:	6a 00                	push   0x0
c000f97f:	68 ef be ad de       	push   0xdeadbeef
c000f984:	57                   	push   edi
c000f985:	e8 82 92 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000f98a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f98d:	e8 5a 92 ff ff       	call   c0008bec <TSS::flush()>
c000f992:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f998:	89 04 24             	mov    DWORD PTR [esp],eax
c000f99b:	e8 8a 79 ff ff       	call   c000732a <IDT::setup()>
c000f9a0:	b8 00 04 00 00       	mov    eax,0x400
c000f9a5:	0f 23 f8             	mov    db7,eax
c000f9a8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9b2:	e8 de 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9b7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9bd:	89 30                	mov    DWORD PTR [eax],esi
c000f9bf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9c5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9c8:	58                   	pop    eax
c000f9c9:	5a                   	pop    edx
c000f9ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9d4:	e8 1d a2 ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c000f9d9:	c7 04 24 fe e5 01 c0 	mov    DWORD PTR [esp],0xc001e5fe
c000f9e0:	e8 c6 00 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000f9e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9e8:	e8 33 f7 ff ff       	call   c000f120 <CPU::detectFeatures()>
c000f9ed:	c7 04 24 21 e6 01 c0 	mov    DWORD PTR [esp],0xc001e621
c000f9f4:	e8 b2 00 00 00       	call   c000faab <KeSetBootMessage(char const*)>
c000f9f9:	e8 32 5d 00 00       	call   c0015730 <HalInitialise()>
c000f9fe:	a1 50 0c 02 c0       	mov    eax,ds:0xc0020c50
c000fa03:	83 e0 10             	and    eax,0x10
c000fa06:	83 f8 01             	cmp    eax,0x1
c000fa09:	19 c0                	sbb    eax,eax
c000fa0b:	83 e0 46             	and    eax,0x46
c000fa0e:	83 c0 1e             	add    eax,0x1e
c000fa11:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa14:	e8 60 d7 ff ff       	call   c000d179 <setupTimer(int)>
c000fa19:	83 c4 10             	add    esp,0x10
c000fa1c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa22:	f6 05 50 0c 02 c0 20 	test   BYTE PTR ds:0xc0020c50,0x20
c000fa29:	74 0c                	je     c000fa37 <CPU::open(int, int, void*)+0xe3>
c000fa2b:	83 ec 0c             	sub    esp,0xc
c000fa2e:	53                   	push   ebx
c000fa2f:	e8 54 fe ff ff       	call   c000f888 <CPU::setupFeatures()>
c000fa34:	83 c4 10             	add    esp,0x10
c000fa37:	5b                   	pop    ebx
c000fa38:	31 c0                	xor    eax,eax
c000fa3a:	5e                   	pop    esi
c000fa3b:	5f                   	pop    edi
c000fa3c:	c3                   	ret    

c000fa3d <KeDisplaySplashScreen()>:
c000fa3d:	55                   	push   ebp
c000fa3e:	bd 05 00 00 00       	mov    ebp,0x5
c000fa43:	57                   	push   edi
c000fa44:	bf 20 f9 01 c0       	mov    edi,0xc001f920
c000fa49:	56                   	push   esi
c000fa4a:	be 0a 00 00 00       	mov    esi,0xa
c000fa4f:	53                   	push   ebx
c000fa50:	31 db                	xor    ebx,ebx
c000fa52:	83 ec 0c             	sub    esp,0xc
c000fa55:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa58:	84 c0                	test   al,al
c000fa5a:	74 47                	je     c000faa3 <KeDisplaySplashScreen()+0x66>
c000fa5c:	80 bb 56 f9 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe06aa],0xdb
c000fa63:	75 13                	jne    c000fa78 <KeDisplaySplashScreen()+0x3b>
c000fa65:	0f b6 93 55 f9 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe06ab]
c000fa6c:	83 e2 fe             	and    edx,0xfffffffe
c000fa6f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa75:	75 01                	jne    c000fa78 <KeDisplaySplashScreen()+0x3b>
c000fa77:	46                   	inc    esi
c000fa78:	3c 0d                	cmp    al,0xd
c000fa7a:	74 24                	je     c000faa0 <KeDisplaySplashScreen()+0x63>
c000fa7c:	3c 0a                	cmp    al,0xa
c000fa7e:	75 0a                	jne    c000fa8a <KeDisplaySplashScreen()+0x4d>
c000fa80:	45                   	inc    ebp
c000fa81:	be 0a 00 00 00       	mov    esi,0xa
c000fa86:	31 db                	xor    ebx,ebx
c000fa88:	eb 16                	jmp    c000faa0 <KeDisplaySplashScreen()+0x63>
c000fa8a:	83 ec 0c             	sub    esp,0xc
c000fa8d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa90:	55                   	push   ebp
c000fa91:	43                   	inc    ebx
c000fa92:	52                   	push   edx
c000fa93:	6a 00                	push   0x0
c000fa95:	6a 0e                	push   0xe
c000fa97:	50                   	push   eax
c000fa98:	e8 f7 68 00 00       	call   c0016394 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fa9d:	83 c4 20             	add    esp,0x20
c000faa0:	47                   	inc    edi
c000faa1:	eb b2                	jmp    c000fa55 <KeDisplaySplashScreen()+0x18>
c000faa3:	83 c4 0c             	add    esp,0xc
c000faa6:	5b                   	pop    ebx
c000faa7:	5e                   	pop    esi
c000faa8:	5f                   	pop    edi
c000faa9:	5d                   	pop    ebp
c000faaa:	c3                   	ret    

c000faab <KeSetBootMessage(char const*)>:
c000faab:	57                   	push   edi
c000faac:	56                   	push   esi
c000faad:	53                   	push   ebx
c000faae:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fab4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fabb:	68 9e 00 00 00       	push   0x9e
c000fac0:	6a 00                	push   0x0
c000fac2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fac6:	56                   	push   esi
c000fac7:	e8 04 0a ff ff       	call   c00004d0 <memset>
c000facc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000facf:	e8 6c 0a ff ff       	call   c0000540 <strlen>
c000fad4:	ba 50 00 00 00       	mov    edx,0x50
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	29 c2                	sub    edx,eax
c000fade:	31 c9                	xor    ecx,ecx
c000fae0:	83 e2 fe             	and    edx,0xfffffffe
c000fae3:	01 f2                	add    edx,esi
c000fae5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000faea:	84 c0                	test   al,al
c000faec:	74 0a                	je     c000faf8 <KeSetBootMessage(char const*)+0x4d>
c000faee:	80 cc 0f             	or     ah,0xf
c000faf1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000faf5:	41                   	inc    ecx
c000faf6:	eb ed                	jmp    c000fae5 <KeSetBootMessage(char const*)+0x3a>
c000faf8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fafd:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb04:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb0a:	5b                   	pop    ebx
c000fb0b:	5e                   	pop    esi
c000fb0c:	5f                   	pop    edi
c000fb0d:	c3                   	ret    

c000fb0e <EnvVarContainer::getEnv(char const*)>:
c000fb0e:	57                   	push   edi
c000fb0f:	56                   	push   esi
c000fb10:	53                   	push   ebx
c000fb11:	31 db                	xor    ebx,ebx
c000fb13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb17:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb19:	7e 2b                	jle    c000fb46 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb1b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb22:	50                   	push   eax
c000fb23:	50                   	push   eax
c000fb24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb27:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb2e:	e8 ad 0b ff ff       	call   c00006e0 <strcmp>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	85 c0                	test   eax,eax
c000fb38:	75 09                	jne    c000fb43 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb3a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb3d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb41:	eb 05                	jmp    c000fb48 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb43:	43                   	inc    ebx
c000fb44:	eb d1                	jmp    c000fb17 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb46:	31 c0                	xor    eax,eax
c000fb48:	5b                   	pop    ebx
c000fb49:	5e                   	pop    esi
c000fb4a:	5f                   	pop    edi
c000fb4b:	c3                   	ret    

c000fb4c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb4c:	55                   	push   ebp
c000fb4d:	57                   	push   edi
c000fb4e:	56                   	push   esi
c000fb4f:	53                   	push   ebx
c000fb50:	83 ec 28             	sub    esp,0x28
c000fb53:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb57:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb5b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb5f:	56                   	push   esi
c000fb60:	e8 db 09 ff ff       	call   c0000540 <strlen>
c000fb65:	40                   	inc    eax
c000fb66:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb69:	e8 4b 7c ff ff       	call   c00077b9 <malloc>
c000fb6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb75:	e8 c6 09 ff ff       	call   c0000540 <strlen>
c000fb7a:	40                   	inc    eax
c000fb7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb7e:	e8 36 7c ff ff       	call   c00077b9 <malloc>
c000fb83:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb8a:	e8 b1 09 ff ff       	call   c0000540 <strlen>
c000fb8f:	83 c4 0c             	add    esp,0xc
c000fb92:	40                   	inc    eax
c000fb93:	50                   	push   eax
c000fb94:	6a 00                	push   0x0
c000fb96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb9a:	e8 31 09 ff ff       	call   c00004d0 <memset>
c000fb9f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fba2:	e8 99 09 ff ff       	call   c0000540 <strlen>
c000fba7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbab:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb3:	89 de                	mov    esi,ebx
c000fbb5:	e8 86 09 ff ff       	call   c0000540 <strlen>
c000fbba:	83 c4 0c             	add    esp,0xc
c000fbbd:	40                   	inc    eax
c000fbbe:	50                   	push   eax
c000fbbf:	6a 00                	push   0x0
c000fbc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbc5:	e8 06 09 ff ff       	call   c00004d0 <memset>
c000fbca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbcd:	e8 6e 09 ff ff       	call   c0000540 <strlen>
c000fbd2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbd6:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbde:	40                   	inc    eax
c000fbdf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fbe2:	c1 e0 03             	shl    eax,0x3
c000fbe5:	5a                   	pop    edx
c000fbe6:	59                   	pop    ecx
c000fbe7:	50                   	push   eax
c000fbe8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fbeb:	e8 b5 7b ff ff       	call   c00077a5 <realloc>
c000fbf0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fbf4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fbf7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fbfa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fbfe:	b9 08 00 00 00       	mov    ecx,0x8
c000fc03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc05:	83 c4 2c             	add    esp,0x2c
c000fc08:	5b                   	pop    ebx
c000fc09:	5e                   	pop    esi
c000fc0a:	5f                   	pop    edi
c000fc0b:	5d                   	pop    ebp
c000fc0c:	c3                   	ret    
c000fc0d:	90                   	nop

c000fc0e <EnvVarContainer::deleteEnv(char const*)>:
c000fc0e:	c3                   	ret    
c000fc0f:	90                   	nop

c000fc10 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc10:	55                   	push   ebp
c000fc11:	57                   	push   edi
c000fc12:	56                   	push   esi
c000fc13:	53                   	push   ebx
c000fc14:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc1a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc21:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc28:	68 14 01 00 00       	push   0x114
c000fc2d:	e8 87 7b ff ff       	call   c00077b9 <malloc>
c000fc32:	83 c4 0c             	add    esp,0xc
c000fc35:	89 c3                	mov    ebx,eax
c000fc37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc3a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc41:	50                   	push   eax
c000fc42:	e8 07 ae ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000fc47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc4a:	e8 2d b1 ff ff       	call   c000ad7c <File::exists()>
c000fc4f:	83 c4 10             	add    esp,0x10
c000fc52:	84 c0                	test   al,al
c000fc54:	75 31                	jne    c000fc87 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc56:	50                   	push   eax
c000fc57:	50                   	push   eax
c000fc58:	6a 12                	push   0x12
c000fc5a:	53                   	push   ebx
c000fc5b:	e8 ae ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fc60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc62:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc65:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc68:	e8 d3 08 ff ff       	call   c0000540 <strlen>
c000fc6d:	5a                   	pop    edx
c000fc6e:	31 d2                	xor    edx,edx
c000fc70:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc74:	51                   	push   ecx
c000fc75:	56                   	push   esi
c000fc76:	52                   	push   edx
c000fc77:	50                   	push   eax
c000fc78:	53                   	push   ebx
c000fc79:	ff d7                	call   edi
c000fc7b:	83 c4 14             	add    esp,0x14
c000fc7e:	53                   	push   ebx
c000fc7f:	e8 e8 ae ff ff       	call   c000ab6c <File::close()>
c000fc84:	83 c4 10             	add    esp,0x10
c000fc87:	56                   	push   esi
c000fc88:	31 f6                	xor    esi,esi
c000fc8a:	68 00 01 00 00       	push   0x100
c000fc8f:	6a 00                	push   0x0
c000fc91:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fc95:	50                   	push   eax
c000fc96:	e8 35 08 ff ff       	call   c00004d0 <memset>
c000fc9b:	5f                   	pop    edi
c000fc9c:	58                   	pop    eax
c000fc9d:	6a 01                	push   0x1
c000fc9f:	53                   	push   ebx
c000fca0:	e8 69 ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcb0:	83 ec 0c             	sub    esp,0xc
c000fcb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcb5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcb9:	51                   	push   ecx
c000fcba:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcbe:	52                   	push   edx
c000fcbf:	6a 00                	push   0x0
c000fcc1:	6a 01                	push   0x1
c000fcc3:	53                   	push   ebx
c000fcc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fcc7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fccb:	83 c4 20             	add    esp,0x20
c000fcce:	3c 0d                	cmp    al,0xd
c000fcd0:	0f 84 09 01 00 00    	je     c000fddf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcd6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcdb:	0f 84 ef 00 00 00    	je     c000fdd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fce1:	3c 0a                	cmp    al,0xa
c000fce3:	74 13                	je     c000fcf8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fce5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fcea:	74 0c                	je     c000fcf8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fcf2:	0f 8e d8 00 00 00    	jle    c000fdd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcfc:	83 ec 0c             	sub    esp,0xc
c000fcff:	8d 78 01             	lea    edi,[eax+0x1]
c000fd02:	57                   	push   edi
c000fd03:	e8 b1 7a ff ff       	call   c00077b9 <malloc>
c000fd08:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd10:	8d 56 04             	lea    edx,[esi+0x4]
c000fd13:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd1a:	e8 9a 7a ff ff       	call   c00077b9 <malloc>
c000fd1f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd23:	83 c4 0c             	add    esp,0xc
c000fd26:	57                   	push   edi
c000fd27:	6a 00                	push   0x0
c000fd29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd2d:	e8 9e 07 ff ff       	call   c00004d0 <memset>
c000fd32:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd40:	83 c4 0c             	add    esp,0xc
c000fd43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd47:	52                   	push   edx
c000fd48:	6a 00                	push   0x0
c000fd4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd4e:	e8 7d 07 ff ff       	call   c00004d0 <memset>
c000fd53:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd57:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd5b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd5e:	e8 dd 07 ff ff       	call   c0000540 <strlen>
c000fd63:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd67:	89 c1                	mov    ecx,eax
c000fd69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd6e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd71:	40                   	inc    eax
c000fd72:	83 c4 10             	add    esp,0x10
c000fd75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd78:	85 d2                	test   edx,edx
c000fd7a:	75 0c                	jne    c000fd88 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd7c:	83 ec 0c             	sub    esp,0xc
c000fd7f:	6a 08                	push   0x8
c000fd81:	e8 33 7a ff ff       	call   c00077b9 <malloc>
c000fd86:	eb 0c                	jmp    c000fd94 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd88:	c1 e0 03             	shl    eax,0x3
c000fd8b:	51                   	push   ecx
c000fd8c:	51                   	push   ecx
c000fd8d:	50                   	push   eax
c000fd8e:	52                   	push   edx
c000fd8f:	e8 11 7a ff ff       	call   c00077a5 <realloc>
c000fd94:	83 c4 10             	add    esp,0x10
c000fd97:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd9a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd9d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fda0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fda4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fda8:	b9 08 00 00 00       	mov    ecx,0x8
c000fdad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdaf:	31 f6                	xor    esi,esi
c000fdb1:	50                   	push   eax
c000fdb2:	68 00 01 00 00       	push   0x100
c000fdb7:	6a 00                	push   0x0
c000fdb9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdbd:	50                   	push   eax
c000fdbe:	e8 0d 07 ff ff       	call   c00004d0 <memset>
c000fdc3:	83 c4 10             	add    esp,0x10
c000fdc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdce:	eb 0f                	jmp    c000fddf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdd0:	3c 3d                	cmp    al,0x3d
c000fdd2:	74 07                	je     c000fddb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fdd4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdd8:	46                   	inc    esi
c000fdd9:	eb 04                	jmp    c000fddf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fddb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fddf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fde4:	0f 85 c6 fe ff ff    	jne    c000fcb0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fdea:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fdf0:	5b                   	pop    ebx
c000fdf1:	5e                   	pop    esi
c000fdf2:	5f                   	pop    edi
c000fdf3:	5d                   	pop    ebp
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <EnvVarContainer::__loadSystem()>:
c000fdf6:	83 ec 10             	sub    esp,0x10
c000fdf9:	68 80 fa 01 c0       	push   0xc001fa80
c000fdfe:	68 64 e6 01 c0       	push   0xc001e664
c000fe03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe07:	e8 04 fe ff ff       	call   c000fc10 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe0c:	83 c4 1c             	add    esp,0x1c
c000fe0f:	c3                   	ret    

c000fe10 <EnvVarContainer::__loadUser()>:
c000fe10:	c3                   	ret    
c000fe11:	90                   	nop

c000fe12 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe32:	90                   	nop
c000fe33:	c3                   	ret    

c000fe34 <EnvVarContainer::~EnvVarContainer()>:
c000fe34:	83 ec 0c             	sub    esp,0xc
c000fe37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe3e:	85 c0                	test   eax,eax
c000fe40:	74 1d                	je     c000fe5f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe46:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe48:	85 c0                	test   eax,eax
c000fe4a:	74 13                	je     c000fe5f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe53:	83 ec 0c             	sub    esp,0xc
c000fe56:	50                   	push   eax
c000fe57:	e8 6d 79 ff ff       	call   c00077c9 <free>
c000fe5c:	83 c4 10             	add    esp,0x10
c000fe5f:	90                   	nop
c000fe60:	83 c4 0c             	add    esp,0xc
c000fe63:	c3                   	ret    

c000fe64 <Krnl::getEnv(Process*, char const*)>:
c000fe64:	53                   	push   ebx
c000fe65:	83 ec 08             	sub    esp,0x8
c000fe68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe70:	39 05 10 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f10,eax
c000fe76:	74 04                	je     c000fe7c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe78:	85 c0                	test   eax,eax
c000fe7a:	75 0b                	jne    c000fe87 <Krnl::getEnv(Process*, char const*)+0x23>
c000fe7c:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c000fe81:	85 c0                	test   eax,eax
c000fe83:	75 19                	jne    c000fe9e <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe85:	eb 27                	jmp    c000feae <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe87:	52                   	push   edx
c000fe88:	52                   	push   edx
c000fe89:	53                   	push   ebx
c000fe8a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fe90:	e8 79 fc ff ff       	call   c000fb0e <EnvVarContainer::getEnv(char const*)>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	85 c0                	test   eax,eax
c000fe9a:	75 28                	jne    c000fec4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe9c:	eb de                	jmp    c000fe7c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe9e:	52                   	push   edx
c000fe9f:	52                   	push   edx
c000fea0:	53                   	push   ebx
c000fea1:	50                   	push   eax
c000fea2:	e8 67 fc ff ff       	call   c000fb0e <EnvVarContainer::getEnv(char const*)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	85 c0                	test   eax,eax
c000feac:	75 16                	jne    c000fec4 <Krnl::getEnv(Process*, char const*)+0x60>
c000feae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000feb2:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c000feb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000febb:	83 c4 08             	add    esp,0x8
c000febe:	5b                   	pop    ebx
c000febf:	e9 4a fc ff ff       	jmp    c000fb0e <EnvVarContainer::getEnv(char const*)>
c000fec4:	83 c4 08             	add    esp,0x8
c000fec7:	5b                   	pop    ebx
c000fec8:	c3                   	ret    

c000fec9 <Krnl::setEnvSystem(char const*, char const*)>:
c000fec9:	83 ec 10             	sub    esp,0x10
c000fecc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed4:	ff 35 b4 36 02 c0    	push   DWORD PTR ds:0xc00236b4
c000feda:	e8 6d fc ff ff       	call   c000fb4c <EnvVarContainer::setEnv(char const*, char const*)>
c000fedf:	83 c4 1c             	add    esp,0x1c
c000fee2:	c3                   	ret    

c000fee3 <Krnl::setEnvUser(char const*, char const*)>:
c000fee3:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c000fee8:	85 c0                	test   eax,eax
c000feea:	74 15                	je     c000ff01 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000feec:	83 ec 10             	sub    esp,0x10
c000feef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fef7:	50                   	push   eax
c000fef8:	e8 4f fc ff ff       	call   c000fb4c <EnvVarContainer::setEnv(char const*, char const*)>
c000fefd:	83 c4 1c             	add    esp,0x1c
c000ff00:	c3                   	ret    
c000ff01:	c3                   	ret    

c000ff02 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff06:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff10:	e9 37 fc ff ff       	jmp    c000fb4c <EnvVarContainer::setEnv(char const*, char const*)>

c000ff15 <Krnl::deleteEnvSystem(char const*)>:
c000ff15:	c3                   	ret    

c000ff16 <Krnl::deleteEnvUser(char const*)>:
c000ff16:	c3                   	ret    

c000ff17 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff17:	c3                   	ret    

c000ff18 <Krnl::newProcessEnv(Process*)>:
c000ff18:	83 ec 28             	sub    esp,0x28
c000ff1b:	6a 0c                	push   0xc
c000ff1d:	e8 97 78 ff ff       	call   c00077b9 <malloc>
c000ff22:	5a                   	pop    edx
c000ff23:	59                   	pop    ecx
c000ff24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff28:	50                   	push   eax
c000ff29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff2d:	e8 e0 fe ff ff       	call   c000fe12 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff36:	83 c4 2c             	add    esp,0x2c
c000ff39:	c3                   	ret    

c000ff3a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	53                   	push   ebx
c000ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff41:	83 ec 0c             	sub    esp,0xc
c000ff44:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff4a:	6a 0c                	push   0xc
c000ff4c:	e8 68 78 ff ff       	call   c00077b9 <malloc>
c000ff51:	89 c3                	mov    ebx,eax
c000ff53:	58                   	pop    eax
c000ff54:	5a                   	pop    edx
c000ff55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff59:	53                   	push   ebx
c000ff5a:	e8 b3 fe ff ff       	call   c000fe12 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff5f:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff61:	89 03                	mov    DWORD PTR [ebx],eax
c000ff63:	c1 e0 03             	shl    eax,0x3
c000ff66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff69:	e8 4b 78 ff ff       	call   c00077b9 <malloc>
c000ff6e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff71:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff73:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff76:	c1 e1 03             	shl    ecx,0x3
c000ff79:	89 c7                	mov    edi,eax
c000ff7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	89 d8                	mov    eax,ebx
c000ff82:	5b                   	pop    ebx
c000ff83:	5e                   	pop    esi
c000ff84:	5f                   	pop    edi
c000ff85:	c3                   	ret    

c000ff86 <Krnl::loadSystemEnv()>:
c000ff86:	53                   	push   ebx
c000ff87:	83 ec 14             	sub    esp,0x14
c000ff8a:	6a 0c                	push   0xc
c000ff8c:	e8 28 78 ff ff       	call   c00077b9 <malloc>
c000ff91:	89 c3                	mov    ebx,eax
c000ff93:	58                   	pop    eax
c000ff94:	5a                   	pop    edx
c000ff95:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c000ff9b:	53                   	push   ebx
c000ff9c:	e8 71 fe ff ff       	call   c000fe12 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffa4:	89 1d b4 36 02 c0    	mov    DWORD PTR ds:0xc00236b4,ebx
c000ffaa:	e8 47 fe ff ff       	call   c000fdf6 <EnvVarContainer::__loadSystem()>
c000ffaf:	83 c4 18             	add    esp,0x18
c000ffb2:	5b                   	pop    ebx
c000ffb3:	c3                   	ret    

c000ffb4 <Krnl::loadUserEnv()>:
c000ffb4:	53                   	push   ebx
c000ffb5:	83 ec 14             	sub    esp,0x14
c000ffb8:	6a 0c                	push   0xc
c000ffba:	e8 fa 77 ff ff       	call   c00077b9 <malloc>
c000ffbf:	89 c3                	mov    ebx,eax
c000ffc1:	58                   	pop    eax
c000ffc2:	5a                   	pop    edx
c000ffc3:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c000ffc9:	53                   	push   ebx
c000ffca:	e8 43 fe ff ff       	call   c000fe12 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffcf:	89 1d b0 36 02 c0    	mov    DWORD PTR ds:0xc00236b0,ebx
c000ffd5:	83 c4 18             	add    esp,0x18
c000ffd8:	5b                   	pop    ebx
c000ffd9:	c3                   	ret    

c000ffda <Krnl::flushEnv()>:
c000ffda:	c3                   	ret    

c000ffdb <Krnl::getProcessTotalEnvCount(Process*)>:
c000ffdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffdf:	8b 15 b0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b0
c000ffe5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffeb:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c000fff0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fff2:	03 01                	add    eax,DWORD PTR [ecx]
c000fff4:	85 d2                	test   edx,edx
c000fff6:	74 02                	je     c000fffa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000fff8:	03 02                	add    eax,DWORD PTR [edx]
c000fffa:	c3                   	ret    

c000fffb <Krnl::getProcessEnvPair(Process*, int)>:
c000fffb:	57                   	push   edi
c000fffc:	56                   	push   esi
c000fffd:	8b 35 b0 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236b0
c0010003:	53                   	push   ebx
c0010004:	85 f6                	test   esi,esi
c0010006:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001000a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001000e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010014:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010018:	8b 01                	mov    eax,DWORD PTR [ecx]
c001001a:	75 16                	jne    c0010032 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001001c:	39 c2                	cmp    edx,eax
c001001e:	7c 16                	jl     c0010036 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010020:	8b 0d b4 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236b4
c0010026:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010028:	01 c6                	add    esi,eax
c001002a:	39 d6                	cmp    esi,edx
c001002c:	7e 3c                	jle    c001006a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001002e:	29 c2                	sub    edx,eax
c0010030:	eb 04                	jmp    c0010036 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010032:	39 c2                	cmp    edx,eax
c0010034:	7d 05                	jge    c001003b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010036:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010039:	eb 20                	jmp    c001005b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001003b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001003d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010040:	39 d1                	cmp    ecx,edx
c0010042:	7e 04                	jle    c0010048 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010044:	29 c2                	sub    edx,eax
c0010046:	eb 10                	jmp    c0010058 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010048:	8b 35 b4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236b4
c001004e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010050:	39 d1                	cmp    ecx,edx
c0010052:	7e 16                	jle    c001006a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010054:	29 c2                	sub    edx,eax
c0010056:	29 fa                	sub    edx,edi
c0010058:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001005b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001005e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010060:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010063:	89 03                	mov    DWORD PTR [ebx],eax
c0010065:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010068:	eb 1d                	jmp    c0010087 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001006a:	83 ec 0c             	sub    esp,0xc
c001006d:	68 86 e6 01 c0       	push   0xc001e686
c0010072:	e8 ac 00 00 00       	call   c0010123 <KePanic(char const*)>
c0010077:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001007d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	89 d8                	mov    eax,ebx
c0010089:	5b                   	pop    ebx
c001008a:	5e                   	pop    esi
c001008b:	5f                   	pop    edi
c001008c:	c2 04 00             	ret    0x4

c001008f <CPU::current()>:
c001008f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0010094:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001009a:	c3                   	ret    

c001009b <operator new(unsigned long)>:
c001009b:	e9 19 77 ff ff       	jmp    c00077b9 <malloc>

c00100a0 <operator delete(void*)>:
c00100a0:	e9 34 77 ff ff       	jmp    c00077d9 <rfree>

c00100a5 <disableIRQs()>:
c00100a5:	fa                   	cli    
c00100a6:	c3                   	ret    

c00100a7 <enableIRQs()>:
c00100a7:	fb                   	sti    
c00100a8:	c3                   	ret    

c00100a9 <lockScheduler()>:
c00100a9:	fa                   	cli    
c00100aa:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00100b0:	c3                   	ret    

c00100b1 <unlockScheduler()>:
c00100b1:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00100b6:	48                   	dec    eax
c00100b7:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00100bc:	75 01                	jne    c00100bf <unlockScheduler()+0xe>
c00100be:	fb                   	sti    
c00100bf:	c3                   	ret    

c00100c0 <lockStuff()>:
c00100c0:	fa                   	cli    
c00100c1:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00100c7:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c00100cd:	c3                   	ret    

c00100ce <unlockStuff()>:
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c00100d6:	48                   	dec    eax
c00100d7:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c00100dc:	75 18                	jne    c00100f6 <unlockStuff()+0x28>
c00100de:	83 3d e0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ee0,0x0
c00100e5:	74 0f                	je     c00100f6 <unlockStuff()+0x28>
c00100e7:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c00100f1:	e8 2e 37 00 00       	call   c0013824 <schedule()>
c00100f6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00100fb:	48                   	dec    eax
c00100fc:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0010101:	75 01                	jne    c0010104 <unlockStuff()+0x36>
c0010103:	fb                   	sti    
c0010104:	83 c4 0c             	add    esp,0xc
c0010107:	c3                   	ret    

c0010108 <Virt::getAKernelVAS()>:
c0010108:	a1 30 0d 02 c0       	mov    eax,ds:0xc0020d30
c001010d:	c3                   	ret    

c001010e <__not_memcpy>:
c001010e:	57                   	push   edi
c001010f:	56                   	push   esi
c0010110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010114:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010118:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001011c:	89 c7                	mov    edi,eax
c001011e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010120:	5e                   	pop    esi
c0010121:	5f                   	pop    edi
c0010122:	c3                   	ret    

c0010123 <KePanic(char const*)>:
c0010123:	c6 05 b8 36 02 c0 01 	mov    BYTE PTR ds:0xc00236b8,0x1
c001012a:	e9 ed 54 00 00       	jmp    c001561c <HalPanic(char const*)>

c001012f <Krnl::powerThread(void*)>:
c001012f:	83 ec 0c             	sub    esp,0xc
c0010132:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0010137:	48                   	dec    eax
c0010138:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001013d:	75 01                	jne    c0010140 <Krnl::powerThread(void*)+0x11>
c001013f:	fb                   	sti    
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	c6 05 c0 36 02 c0 00 	mov    BYTE PTR ds:0xc00236c0,0x0
c001014a:	6a 0a                	push   0xa
c001014c:	e8 e3 39 00 00       	call   c0013b34 <sleep(unsigned int)>
c0010151:	83 05 04 37 02 c0 0a 	add    DWORD PTR ds:0xc0023704,0xa
c0010158:	83 c4 10             	add    esp,0x10
c001015b:	eb e3                	jmp    c0010140 <Krnl::powerThread(void*)+0x11>

c001015d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001015d:	57                   	push   edi
c001015e:	b9 09 00 00 00       	mov    ecx,0x9
c0010163:	56                   	push   esi
c0010164:	bf e0 36 02 c0       	mov    edi,0xc00236e0
c0010169:	fc                   	cld    
c001016a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001016e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010170:	5e                   	pop    esi
c0010171:	5f                   	pop    edi
c0010172:	c3                   	ret    

c0010173 <Krnl::userIOReceived()>:
c0010173:	c7 05 04 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023704,0x0
c001017d:	c3                   	ret    

c001017e <Krnl::handlePowerButton()>:
c001017e:	83 ec 0c             	sub    esp,0xc
c0010181:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0010186:	83 f8 02             	cmp    eax,0x2
c0010189:	75 10                	jne    c001019b <Krnl::handlePowerButton()+0x1d>
c001018b:	83 ec 0c             	sub    esp,0xc
c001018e:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0010194:	e8 bd 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010199:	eb 11                	jmp    c00101ac <Krnl::handlePowerButton()+0x2e>
c001019b:	48                   	dec    eax
c001019c:	75 11                	jne    c00101af <Krnl::handlePowerButton()+0x31>
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c00101a7:	e8 da 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101ac:	83 c4 10             	add    esp,0x10
c00101af:	83 c4 0c             	add    esp,0xc
c00101b2:	c3                   	ret    

c00101b3 <Krnl::handleSleepButton()>:
c00101b3:	83 ec 0c             	sub    esp,0xc
c00101b6:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c00101bb:	83 f8 02             	cmp    eax,0x2
c00101be:	75 10                	jne    c00101d0 <Krnl::handleSleepButton()+0x1d>
c00101c0:	83 ec 0c             	sub    esp,0xc
c00101c3:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c00101c9:	e8 88 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101ce:	eb 11                	jmp    c00101e1 <Krnl::handleSleepButton()+0x2e>
c00101d0:	48                   	dec    eax
c00101d1:	75 11                	jne    c00101e4 <Krnl::handleSleepButton()+0x31>
c00101d3:	83 ec 0c             	sub    esp,0xc
c00101d6:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c00101dc:	e8 a5 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101e1:	83 c4 10             	add    esp,0x10
c00101e4:	83 c4 0c             	add    esp,0xc
c00101e7:	c3                   	ret    

c00101e8 <Krnl::setupPowerManager()>:
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	c7 05 04 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023704,0x0
c00101f5:	68 f0 00 00 00       	push   0xf0
c00101fa:	c6 05 c0 36 02 c0 00 	mov    BYTE PTR ds:0xc00236c0,0x0
c0010201:	6a 00                	push   0x0
c0010203:	68 2f 01 01 c0       	push   0xc001012f
c0010208:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c001020e:	e8 f1 33 00 00       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c0010213:	c7 05 e0 36 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x2
c001021d:	c7 05 e4 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236e4,0x1
c0010227:	c7 05 e8 36 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00236e8,0x3
c0010231:	c7 05 ec 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236ec,0x0
c001023b:	c7 05 f8 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236f8,0x0
c0010245:	c7 05 f0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236f0,0x0
c001024f:	c7 05 fc 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236fc,0x0
c0010259:	c7 05 f4 36 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00236f4,0x3c
c0010263:	c7 05 00 37 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x3c
c001026d:	83 c4 1c             	add    esp,0x1c
c0010270:	c3                   	ret    
c0010271:	66 90                	xchg   ax,ax
c0010273:	90                   	nop

c0010274 <KeResolveCompatibilitySymbol(char*)>:
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	83 ec 08             	sub    esp,0x8
c001027a:	68 a0 e6 01 c0       	push   0xc001e6a0
c001027f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010283:	e8 58 04 ff ff       	call   c00006e0 <strcmp>
c0010288:	83 c4 10             	add    esp,0x10
c001028b:	85 c0                	test   eax,eax
c001028d:	0f 94 c0             	sete   al
c0010290:	84 c0                	test   al,al
c0010292:	74 0c                	je     c00102a0 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010294:	b8 38 0c 02 c0       	mov    eax,0xc0020c38
c0010299:	e9 62 01 00 00       	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001029e:	66 90                	xchg   ax,ax
c00102a0:	83 ec 08             	sub    esp,0x8
c00102a3:	68 a9 e6 01 c0       	push   0xc001e6a9
c00102a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ac:	e8 2f 04 ff ff       	call   c00006e0 <strcmp>
c00102b1:	83 c4 10             	add    esp,0x10
c00102b4:	85 c0                	test   eax,eax
c00102b6:	0f 94 c0             	sete   al
c00102b9:	84 c0                	test   al,al
c00102bb:	74 0b                	je     c00102c8 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102bd:	b8 20 c1 01 c0       	mov    eax,0xc001c120
c00102c2:	e9 39 01 00 00       	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102c7:	90                   	nop
c00102c8:	83 ec 08             	sub    esp,0x8
c00102cb:	68 b3 e6 01 c0       	push   0xc001e6b3
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 07 04 ff ff       	call   c00006e0 <strcmp>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	85 c0                	test   eax,eax
c00102de:	0f 94 c0             	sete   al
c00102e1:	84 c0                	test   al,al
c00102e3:	74 0b                	je     c00102f0 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00102e5:	b8 54 be 01 c0       	mov    eax,0xc001be54
c00102ea:	e9 11 01 00 00       	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102ef:	90                   	nop
c00102f0:	83 ec 08             	sub    esp,0x8
c00102f3:	68 bc e6 01 c0       	push   0xc001e6bc
c00102f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fc:	e8 df 03 ff ff       	call   c00006e0 <strcmp>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	85 c0                	test   eax,eax
c0010306:	0f 94 c0             	sete   al
c0010309:	84 c0                	test   al,al
c001030b:	74 0b                	je     c0010318 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001030d:	b8 23 01 01 c0       	mov    eax,0xc0010123
c0010312:	e9 e9 00 00 00       	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010317:	90                   	nop
c0010318:	83 ec 08             	sub    esp,0x8
c001031b:	68 cf e6 01 c0       	push   0xc001e6cf
c0010320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010324:	e8 b7 03 ff ff       	call   c00006e0 <strcmp>
c0010329:	83 c4 10             	add    esp,0x10
c001032c:	85 c0                	test   eax,eax
c001032e:	0f 94 c0             	sete   al
c0010331:	84 c0                	test   al,al
c0010333:	74 0b                	je     c0010340 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010335:	b8 ab fa 00 c0       	mov    eax,0xc000faab
c001033a:	e9 c1 00 00 00       	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001033f:	90                   	nop
c0010340:	83 ec 08             	sub    esp,0x8
c0010343:	68 ec e6 01 c0       	push   0xc001e6ec
c0010348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001034c:	e8 8f 03 ff ff       	call   c00006e0 <strcmp>
c0010351:	83 c4 10             	add    esp,0x10
c0010354:	85 c0                	test   eax,eax
c0010356:	0f 94 c0             	sete   al
c0010359:	84 c0                	test   al,al
c001035b:	74 0b                	je     c0010368 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001035d:	b8 20 c2 01 c0       	mov    eax,0xc001c220
c0010362:	e9 99 00 00 00       	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010367:	90                   	nop
c0010368:	83 ec 08             	sub    esp,0x8
c001036b:	68 f6 e6 01 c0       	push   0xc001e6f6
c0010370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010374:	e8 67 03 ff ff       	call   c00006e0 <strcmp>
c0010379:	83 c4 10             	add    esp,0x10
c001037c:	85 c0                	test   eax,eax
c001037e:	0f 94 c0             	sete   al
c0010381:	84 c0                	test   al,al
c0010383:	74 07                	je     c001038c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010385:	b8 a0 bf 01 c0       	mov    eax,0xc001bfa0
c001038a:	eb 74                	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001038c:	83 ec 08             	sub    esp,0x8
c001038f:	68 ff e6 01 c0       	push   0xc001e6ff
c0010394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010398:	e8 43 03 ff ff       	call   c00006e0 <strcmp>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	85 c0                	test   eax,eax
c00103a2:	0f 94 c0             	sete   al
c00103a5:	84 c0                	test   al,al
c00103a7:	74 07                	je     c00103b0 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103a9:	b8 3c 0c 02 c0       	mov    eax,0xc0020c3c
c00103ae:	eb 50                	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103b0:	83 ec 08             	sub    esp,0x8
c00103b3:	68 17 e7 01 c0       	push   0xc001e717
c00103b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103bc:	e8 1f 03 ff ff       	call   c00006e0 <strcmp>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	85 c0                	test   eax,eax
c00103c6:	0f 94 c0             	sete   al
c00103c9:	84 c0                	test   al,al
c00103cb:	74 07                	je     c00103d4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103cd:	b8 3c 0c 02 c0       	mov    eax,0xc0020c3c
c00103d2:	eb 2c                	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d4:	83 ec 08             	sub    esp,0x8
c00103d7:	68 24 e7 01 c0       	push   0xc001e724
c00103dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e0:	e8 fb 02 ff ff       	call   c00006e0 <strcmp>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	85 c0                	test   eax,eax
c00103ea:	0f 94 c0             	sete   al
c00103ed:	84 c0                	test   al,al
c00103ef:	74 07                	je     c00103f8 <KeResolveCompatibilitySymbol(char*)+0x184>
c00103f1:	b8 3d 0c 02 c0       	mov    eax,0xc0020c3d
c00103f6:	eb 08                	jmp    c0010400 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f8:	b8 00 00 00 00       	mov    eax,0x0
c00103fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010400:	83 c4 0c             	add    esp,0xc
c0010403:	c3                   	ret    

c0010404 <KiDefaultSignalHandlerAbort(int)>:
c0010404:	c7 44 24 04 31 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e731
c001040c:	e9 12 fd ff ff       	jmp    c0010123 <KePanic(char const*)>

c0010411 <KiDefaultSignalHandlerTerminate(int)>:
c0010411:	c7 44 24 04 4d e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e74d
c0010419:	e9 05 fd ff ff       	jmp    c0010123 <KePanic(char const*)>

c001041e <KiSigKill(int)>:
c001041e:	c7 44 24 04 6d e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e76d
c0010426:	e9 f8 fc ff ff       	jmp    c0010123 <KePanic(char const*)>

c001042b <KiDefaultSignalHandlerIgnore(int)>:
c001042b:	c3                   	ret    

c001042c <KiDefaultSignalHandlerPause(int)>:
c001042c:	c7 44 24 04 77 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e777
c0010434:	e9 ea fc ff ff       	jmp    c0010123 <KePanic(char const*)>

c0010439 <KiDefaultSignalHandlerResume(int)>:
c0010439:	c7 44 24 04 93 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e793
c0010441:	e9 dd fc ff ff       	jmp    c0010123 <KePanic(char const*)>

c0010446 <KeInitSignals()>:
c0010446:	53                   	push   ebx
c0010447:	83 ec 14             	sub    esp,0x14
c001044a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001044e:	68 b0 e7 01 c0       	push   0xc001e7b0
c0010453:	e8 80 a0 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010458:	83 c4 0c             	add    esp,0xc
c001045b:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010465:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c001046f:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010475:	6a 20                	push   0x20
c0010477:	6a 00                	push   0x0
c0010479:	50                   	push   eax
c001047a:	e8 51 00 ff ff       	call   c00004d0 <memset>
c001047f:	83 c4 0c             	add    esp,0xc
c0010482:	6a 44                	push   0x44
c0010484:	6a 00                	push   0x0
c0010486:	53                   	push   ebx
c0010487:	e8 44 00 ff ff       	call   c00004d0 <memset>
c001048c:	c7 04 24 c1 e7 01 c0 	mov    DWORD PTR [esp],0xc001e7c1
c0010493:	e8 40 a0 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010498:	89 d8                	mov    eax,ebx
c001049a:	83 c4 18             	add    esp,0x18
c001049d:	5b                   	pop    ebx
c001049e:	c2 04 00             	ret    0x4

c00104a1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00104a1:	57                   	push   edi
c00104a2:	56                   	push   esi
c00104a3:	53                   	push   ebx
c00104a4:	bb 01 00 00 00       	mov    ebx,0x1
c00104a9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00104ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104b1:	83 ec 0c             	sub    esp,0xc
c00104b4:	68 d2 e7 01 c0       	push   0xc001e7d2
c00104b9:	e8 1a a0 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104be:	83 c4 10             	add    esp,0x10
c00104c1:	83 fe 10             	cmp    esi,0x10
c00104c4:	7f 3a                	jg     c0010500 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x5f>
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	68 ed e7 01 c0       	push   0xc001e7ed
c00104ce:	e8 05 a0 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104d3:	8d 04 b7             	lea    eax,[edi+esi*4]
c00104d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00104da:	89 f1                	mov    ecx,esi
c00104dc:	89 10                	mov    DWORD PTR [eax],edx
c00104de:	d3 e3                	shl    ebx,cl
c00104e0:	0b 5c 24 2c          	or     ebx,DWORD PTR [esp+0x2c]
c00104e4:	89 58 44             	mov    DWORD PTR [eax+0x44],ebx
c00104e7:	c6 84 37 88 00 00 00 00 	mov    BYTE PTR [edi+esi*1+0x88],0x0
c00104ef:	31 db                	xor    ebx,ebx
c00104f1:	c7 04 24 08 e8 01 c0 	mov    DWORD PTR [esp],0xc001e808
c00104f8:	e8 db 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	89 d8                	mov    eax,ebx
c0010502:	5b                   	pop    ebx
c0010503:	5e                   	pop    esi
c0010504:	5f                   	pop    edi
c0010505:	c3                   	ret    

c0010506 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010506:	55                   	push   ebp
c0010507:	57                   	push   edi
c0010508:	56                   	push   esi
c0010509:	be 08 00 00 00       	mov    esi,0x8
c001050e:	53                   	push   ebx
c001050f:	83 ec 18             	sub    esp,0x18
c0010512:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010516:	68 23 e8 01 c0       	push   0xc001e823
c001051b:	e8 b8 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010520:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010527:	8b bb bc 00 00 00    	mov    edi,DWORD PTR [ebx+0xbc]
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	31 c9                	xor    ecx,ecx
c0010532:	8d 04 0f             	lea    eax,[edi+ecx*1]
c0010535:	99                   	cdq    
c0010536:	f7 fe                	idiv   esi
c0010538:	83 c2 24             	add    edx,0x24
c001053b:	8b 6c 93 0c          	mov    ebp,DWORD PTR [ebx+edx*4+0xc]
c001053f:	85 ed                	test   ebp,ebp
c0010541:	75 1a                	jne    c001055d <KeRaiseSignal(SigHandlerBlock*, int)+0x57>
c0010543:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010547:	83 ec 0c             	sub    esp,0xc
c001054a:	89 44 93 0c          	mov    DWORD PTR [ebx+edx*4+0xc],eax
c001054e:	68 34 e8 01 c0       	push   0xc001e834
c0010553:	e8 80 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010558:	83 c4 10             	add    esp,0x10
c001055b:	eb 1b                	jmp    c0010578 <KeRaiseSignal(SigHandlerBlock*, int)+0x72>
c001055d:	41                   	inc    ecx
c001055e:	83 f9 08             	cmp    ecx,0x8
c0010561:	75 cf                	jne    c0010532 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	bd 01 00 00 00       	mov    ebp,0x1
c001056b:	68 45 e8 01 c0       	push   0xc001e845
c0010570:	e8 63 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	83 c4 0c             	add    esp,0xc
c001057b:	89 e8                	mov    eax,ebp
c001057d:	5b                   	pop    ebx
c001057e:	5e                   	pop    esi
c001057f:	5f                   	pop    edi
c0010580:	5d                   	pop    ebp
c0010581:	c3                   	ret    

c0010582 <KeCheckSignal(SigHandlerBlock*)>:
c0010582:	55                   	push   ebp
c0010583:	57                   	push   edi
c0010584:	56                   	push   esi
c0010585:	31 f6                	xor    esi,esi
c0010587:	53                   	push   ebx
c0010588:	83 ec 18             	sub    esp,0x18
c001058b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001058f:	68 56 e8 01 c0       	push   0xc001e856
c0010594:	e8 3f 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00105a3:	0f 84 55 01 00 00    	je     c00106fe <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00105a9:	83 ec 0c             	sub    esp,0xc
c00105ac:	bd 08 00 00 00       	mov    ebp,0x8
c00105b1:	68 67 e8 01 c0       	push   0xc001e867
c00105b6:	e8 1d 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105bb:	83 c4 10             	add    esp,0x10
c00105be:	31 c9                	xor    ecx,ecx
c00105c0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00105c6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00105c9:	99                   	cdq    
c00105ca:	f7 fd                	idiv   ebp
c00105cc:	8b bc 93 9c 00 00 00 	mov    edi,DWORD PTR [ebx+edx*4+0x9c]
c00105d3:	85 ff                	test   edi,edi
c00105d5:	0f 84 00 01 00 00    	je     c00106db <KeCheckSignal(SigHandlerBlock*)+0x159>
c00105db:	83 ec 0c             	sub    esp,0xc
c00105de:	be 01 00 00 00       	mov    esi,0x1
c00105e3:	68 78 e8 01 c0       	push   0xc001e878
c00105e8:	e8 eb 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105ed:	89 f9                	mov    ecx,edi
c00105ef:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00105f5:	d3 e6                	shl    esi,cl
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	31 c9                	xor    ecx,ecx
c00105fc:	ba 01 00 00 00       	mov    edx,0x1
c0010601:	89 d5                	mov    ebp,edx
c0010603:	d3 e5                	shl    ebp,cl
c0010605:	85 c5                	test   ebp,eax
c0010607:	74 13                	je     c001061c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c0010609:	85 74 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],esi
c001060d:	74 0d                	je     c001061c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c001060f:	83 ec 0c             	sub    esp,0xc
c0010612:	68 89 e8 01 c0       	push   0xc001e889
c0010617:	e9 d8 00 00 00       	jmp    c00106f4 <KeCheckSignal(SigHandlerBlock*)+0x172>
c001061c:	41                   	inc    ecx
c001061d:	83 f9 11             	cmp    ecx,0x11
c0010620:	75 df                	jne    c0010601 <KeCheckSignal(SigHandlerBlock*)+0x7f>
c0010622:	83 ec 0c             	sub    esp,0xc
c0010625:	68 9a e8 01 c0       	push   0xc001e89a
c001062a:	e8 a9 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001062f:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c0010635:	83 c4 10             	add    esp,0x10
c0010638:	8d 50 01             	lea    edx,[eax+0x1]
c001063b:	89 93 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],edx
c0010641:	c7 84 83 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+eax*4+0x9c],0x0
c001064c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010653:	09 b3 c0 00 00 00    	or     DWORD PTR [ebx+0xc0],esi
c0010659:	31 c0                	xor    eax,eax
c001065b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010663:	74 09                	je     c001066e <KeCheckSignal(SigHandlerBlock*)+0xec>
c0010665:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001066c:	eb 06                	jmp    c0010674 <KeCheckSignal(SigHandlerBlock*)+0xf2>
c001066e:	40                   	inc    eax
c001066f:	83 f8 08             	cmp    eax,0x8
c0010672:	75 e7                	jne    c001065b <KeCheckSignal(SigHandlerBlock*)+0xd9>
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	68 ab e8 01 c0       	push   0xc001e8ab
c001067c:	e8 57 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010681:	83 c4 10             	add    esp,0x10
c0010684:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
c0010687:	83 ff 09             	cmp    edi,0x9
c001068a:	75 14                	jne    c00106a0 <KeCheckSignal(SigHandlerBlock*)+0x11e>
c001068c:	83 ec 0c             	sub    esp,0xc
c001068f:	be 1e 04 01 c0       	mov    esi,0xc001041e
c0010694:	68 bc e8 01 c0       	push   0xc001e8bc
c0010699:	e8 3a 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001069e:	eb 36                	jmp    c00106d6 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106a0:	83 fe 01             	cmp    esi,0x1
c00106a3:	75 0a                	jne    c00106af <KeCheckSignal(SigHandlerBlock*)+0x12d>
c00106a5:	83 ec 0c             	sub    esp,0xc
c00106a8:	68 cd e8 01 c0       	push   0xc001e8cd
c00106ad:	eb 45                	jmp    c00106f4 <KeCheckSignal(SigHandlerBlock*)+0x172>
c00106af:	85 f6                	test   esi,esi
c00106b1:	75 16                	jne    c00106c9 <KeCheckSignal(SigHandlerBlock*)+0x147>
c00106b3:	83 ec 0c             	sub    esp,0xc
c00106b6:	68 de e8 01 c0       	push   0xc001e8de
c00106bb:	e8 18 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106c0:	8b 34 bd e0 fa 01 c0 	mov    esi,DWORD PTR [edi*4-0x3ffe0520]
c00106c7:	eb 0d                	jmp    c00106d6 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106c9:	83 ec 0c             	sub    esp,0xc
c00106cc:	68 ef e8 01 c0       	push   0xc001e8ef
c00106d1:	e8 02 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	eb 23                	jmp    c00106fe <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00106db:	46                   	inc    esi
c00106dc:	41                   	inc    ecx
c00106dd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106e3:	83 f9 08             	cmp    ecx,0x8
c00106e6:	0f 85 d4 fe ff ff    	jne    c00105c0 <KeCheckSignal(SigHandlerBlock*)+0x3e>
c00106ec:	83 ec 0c             	sub    esp,0xc
c00106ef:	68 00 e9 01 c0       	push   0xc001e900
c00106f4:	e8 df 9d ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106f9:	31 f6                	xor    esi,esi
c00106fb:	83 c4 10             	add    esp,0x10
c00106fe:	83 c4 0c             	add    esp,0xc
c0010701:	89 f0                	mov    eax,esi
c0010703:	5b                   	pop    ebx
c0010704:	5e                   	pop    esi
c0010705:	5f                   	pop    edi
c0010706:	5d                   	pop    ebp
c0010707:	c3                   	ret    

c0010708 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010708:	56                   	push   esi
c0010709:	53                   	push   ebx
c001070a:	bb 01 00 00 00       	mov    ebx,0x1
c001070f:	52                   	push   edx
c0010710:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010714:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010718:	d3 e3                	shl    ebx,cl
c001071a:	83 f9 10             	cmp    ecx,0x10
c001071d:	7f 08                	jg     c0010727 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001071f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010725:	75 10                	jne    c0010737 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010727:	83 ec 0c             	sub    esp,0xc
c001072a:	68 11 e9 01 c0       	push   0xc001e911
c001072f:	e8 ef f9 ff ff       	call   c0010123 <KePanic(char const*)>
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	f7 d3                	not    ebx
c0010739:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001073f:	58                   	pop    eax
c0010740:	5b                   	pop    ebx
c0010741:	5e                   	pop    esi
c0010742:	c3                   	ret    

c0010743 <SysSeekDir(regs*)>:
c0010743:	31 c0                	xor    eax,eax
c0010745:	31 d2                	xor    edx,edx
c0010747:	c3                   	ret    

c0010748 <SysTellDir(regs*)>:
c0010748:	31 c0                	xor    eax,eax
c001074a:	31 d2                	xor    edx,edx
c001074c:	c3                   	ret    

c001074d <SysVerify(regs*)>:
c001074d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010751:	31 d2                	xor    edx,edx
c0010753:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010756:	c3                   	ret    

c0010757 <SysGetArgc(regs*)>:
c0010757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001075c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001075f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010765:	99                   	cdq    
c0010766:	c3                   	ret    

c0010767 <SysTTYName(regs*)>:
c0010767:	b8 01 00 00 00       	mov    eax,0x1
c001076c:	31 d2                	xor    edx,edx
c001076e:	c3                   	ret    

c001076f <SysFormatDisk(regs*)>:
c001076f:	56                   	push   esi
c0010770:	53                   	push   ebx
c0010771:	50                   	push   eax
c0010772:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010776:	8b 1d 34 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d34
c001077c:	eb 28                	jmp    c00107a6 <SysFormatDisk(regs*)+0x37>
c001077e:	83 ec 0c             	sub    esp,0xc
c0010781:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010784:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010789:	51                   	push   ecx
c001078a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001078d:	51                   	push   ecx
c001078e:	50                   	push   eax
c001078f:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c0010796:	50                   	push   eax
c0010797:	53                   	push   ebx
c0010798:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001079b:	83 c4 20             	add    esp,0x20
c001079e:	83 f8 08             	cmp    eax,0x8
c00107a1:	75 12                	jne    c00107b5 <SysFormatDisk(regs*)+0x46>
c00107a3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107a6:	85 db                	test   ebx,ebx
c00107a8:	75 d4                	jne    c001077e <SysFormatDisk(regs*)+0xf>
c00107aa:	59                   	pop    ecx
c00107ab:	b8 03 00 00 00       	mov    eax,0x3
c00107b0:	31 d2                	xor    edx,edx
c00107b2:	5b                   	pop    ebx
c00107b3:	5e                   	pop    esi
c00107b4:	c3                   	ret    
c00107b5:	85 c0                	test   eax,eax
c00107b7:	74 1b                	je     c00107d4 <SysFormatDisk(regs*)+0x65>
c00107b9:	83 f8 09             	cmp    eax,0x9
c00107bc:	74 0b                	je     c00107c9 <SysFormatDisk(regs*)+0x5a>
c00107be:	59                   	pop    ecx
c00107bf:	b8 02 00 00 00       	mov    eax,0x2
c00107c4:	31 d2                	xor    edx,edx
c00107c6:	5b                   	pop    ebx
c00107c7:	5e                   	pop    esi
c00107c8:	c3                   	ret    
c00107c9:	59                   	pop    ecx
c00107ca:	b8 01 00 00 00       	mov    eax,0x1
c00107cf:	31 d2                	xor    edx,edx
c00107d1:	5b                   	pop    ebx
c00107d2:	5e                   	pop    esi
c00107d3:	c3                   	ret    
c00107d4:	59                   	pop    ecx
c00107d5:	31 c0                	xor    eax,eax
c00107d7:	31 d2                	xor    edx,edx
c00107d9:	5b                   	pop    ebx
c00107da:	5e                   	pop    esi
c00107db:	c3                   	ret    

c00107dc <SysSetDiskVolumeLabel(regs*)>:
c00107dc:	56                   	push   esi
c00107dd:	53                   	push   ebx
c00107de:	53                   	push   ebx
c00107df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107e3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00107e6:	83 f8 19             	cmp    eax,0x19
c00107e9:	77 2d                	ja     c0010818 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107eb:	8b 0c 85 a0 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce60]
c00107f2:	85 c9                	test   ecx,ecx
c00107f4:	74 22                	je     c0010818 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107f6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00107f9:	85 db                	test   ebx,ebx
c00107fb:	74 1b                	je     c0010818 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00107fd:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010803:	85 d2                	test   edx,edx
c0010805:	74 11                	je     c0010818 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010807:	8b 32                	mov    esi,DWORD PTR [edx]
c0010809:	53                   	push   ebx
c001080a:	50                   	push   eax
c001080b:	51                   	push   ecx
c001080c:	52                   	push   edx
c001080d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010810:	83 c4 10             	add    esp,0x10
c0010813:	99                   	cdq    
c0010814:	59                   	pop    ecx
c0010815:	5b                   	pop    ebx
c0010816:	5e                   	pop    esi
c0010817:	c3                   	ret    
c0010818:	59                   	pop    ecx
c0010819:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001081e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010823:	5b                   	pop    ebx
c0010824:	5e                   	pop    esi
c0010825:	c3                   	ret    

c0010826 <SysGetDiskVolumeLabel(regs*)>:
c0010826:	57                   	push   edi
c0010827:	56                   	push   esi
c0010828:	53                   	push   ebx
c0010829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010830:	83 fa 19             	cmp    edx,0x19
c0010833:	77 38                	ja     c001086d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010835:	8b 0c 95 a0 31 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdce60]
c001083c:	85 c9                	test   ecx,ecx
c001083e:	74 2d                	je     c001086d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010840:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010843:	85 db                	test   ebx,ebx
c0010845:	74 26                	je     c001086d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010847:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001084a:	85 f6                	test   esi,esi
c001084c:	74 1f                	je     c001086d <SysGetDiskVolumeLabel(regs*)+0x47>
c001084e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010854:	85 c0                	test   eax,eax
c0010856:	74 15                	je     c001086d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010858:	83 ec 0c             	sub    esp,0xc
c001085b:	8b 38                	mov    edi,DWORD PTR [eax]
c001085d:	56                   	push   esi
c001085e:	53                   	push   ebx
c001085f:	52                   	push   edx
c0010860:	51                   	push   ecx
c0010861:	50                   	push   eax
c0010862:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010865:	83 c4 20             	add    esp,0x20
c0010868:	99                   	cdq    
c0010869:	5b                   	pop    ebx
c001086a:	5e                   	pop    esi
c001086b:	5f                   	pop    edi
c001086c:	c3                   	ret    
c001086d:	5b                   	pop    ebx
c001086e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010873:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010878:	5e                   	pop    esi
c0010879:	5f                   	pop    edi
c001087a:	c3                   	ret    

c001087b <SysShutdown(regs*)>:
c001087b:	83 ec 0c             	sub    esp,0xc
c001087e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010882:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010885:	85 c0                	test   eax,eax
c0010887:	74 18                	je     c00108a1 <SysShutdown(regs*)+0x26>
c0010889:	83 f8 01             	cmp    eax,0x1
c001088c:	74 38                	je     c00108c6 <SysShutdown(regs*)+0x4b>
c001088e:	83 f8 02             	cmp    eax,0x2
c0010891:	74 24                	je     c00108b7 <SysShutdown(regs*)+0x3c>
c0010893:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010898:	ba ff ff ff ff       	mov    edx,0xffffffff
c001089d:	83 c4 0c             	add    esp,0xc
c00108a0:	c3                   	ret    
c00108a1:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c00108a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00108a8:	6a 00                	push   0x0
c00108aa:	6a 00                	push   0x0
c00108ac:	6a 00                	push   0x0
c00108ae:	50                   	push   eax
c00108af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108b2:	83 c4 10             	add    esp,0x10
c00108b5:	eb dc                	jmp    c0010893 <SysShutdown(regs*)+0x18>
c00108b7:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c00108bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00108be:	6a 00                	push   0x0
c00108c0:	6a 00                	push   0x0
c00108c2:	6a 01                	push   0x1
c00108c4:	eb e8                	jmp    c00108ae <SysShutdown(regs*)+0x33>
c00108c6:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c00108cb:	85 c0                	test   eax,eax
c00108cd:	74 02                	je     c00108d1 <SysShutdown(regs*)+0x56>
c00108cf:	ff d0                	call   eax
c00108d1:	31 c0                	xor    eax,eax
c00108d3:	31 d2                	xor    edx,edx
c00108d5:	83 c4 0c             	add    esp,0xc
c00108d8:	c3                   	ret    

c00108d9 <SysRealpath(regs*)>:
c00108d9:	83 ec 0c             	sub    esp,0xc
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00108e3:	85 d2                	test   edx,edx
c00108e5:	74 07                	je     c00108ee <SysRealpath(regs*)+0x15>
c00108e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108ea:	85 c0                	test   eax,eax
c00108ec:	75 0b                	jne    c00108f9 <SysRealpath(regs*)+0x20>
c00108ee:	b8 01 00 00 00       	mov    eax,0x1
c00108f3:	31 d2                	xor    edx,edx
c00108f5:	83 c4 0c             	add    esp,0xc
c00108f8:	c3                   	ret    
c00108f9:	51                   	push   ecx
c00108fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010900:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010903:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010909:	51                   	push   ecx
c001090a:	52                   	push   edx
c001090b:	50                   	push   eax
c001090c:	e8 93 9f ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010911:	83 c4 10             	add    esp,0x10
c0010914:	31 c0                	xor    eax,eax
c0010916:	31 d2                	xor    edx,edx
c0010918:	83 c4 0c             	add    esp,0xc
c001091b:	c3                   	ret    

c001091c <SysReadDir(regs*)>:
c001091c:	53                   	push   ebx
c001091d:	83 ec 18             	sub    esp,0x18
c0010920:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010924:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010927:	83 f8 02             	cmp    eax,0x2
c001092a:	76 61                	jbe    c001098d <SysReadDir(regs*)+0x71>
c001092c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010933:	77 49                	ja     c001097e <SysReadDir(regs*)+0x62>
c0010935:	83 ec 0c             	sub    esp,0xc
c0010938:	50                   	push   eax
c0010939:	e8 f1 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	85 c0                	test   eax,eax
c0010943:	74 39                	je     c001097e <SysReadDir(regs*)+0x62>
c0010945:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001094d:	83 ec 0c             	sub    esp,0xc
c0010950:	8b 10                	mov    edx,DWORD PTR [eax]
c0010952:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010956:	51                   	push   ecx
c0010957:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001095a:	51                   	push   ecx
c001095b:	6a 00                	push   0x0
c001095d:	68 10 01 00 00       	push   0x110
c0010962:	50                   	push   eax
c0010963:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010966:	83 c4 20             	add    esp,0x20
c0010969:	85 c0                	test   eax,eax
c001096b:	74 29                	je     c0010996 <SysReadDir(regs*)+0x7a>
c001096d:	83 f8 07             	cmp    eax,0x7
c0010970:	74 1b                	je     c001098d <SysReadDir(regs*)+0x71>
c0010972:	b8 02 00 00 00       	mov    eax,0x2
c0010977:	31 d2                	xor    edx,edx
c0010979:	83 c4 18             	add    esp,0x18
c001097c:	5b                   	pop    ebx
c001097d:	c3                   	ret    
c001097e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010983:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010988:	83 c4 18             	add    esp,0x18
c001098b:	5b                   	pop    ebx
c001098c:	c3                   	ret    
c001098d:	b8 01 00 00 00       	mov    eax,0x1
c0010992:	31 d2                	xor    edx,edx
c0010994:	eb e3                	jmp    c0010979 <SysReadDir(regs*)+0x5d>
c0010996:	31 c0                	xor    eax,eax
c0010998:	31 d2                	xor    edx,edx
c001099a:	eb dd                	jmp    c0010979 <SysReadDir(regs*)+0x5d>

c001099c <SysIsATTY(regs*)>:
c001099c:	83 ec 0c             	sub    esp,0xc
c001099f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109a6:	83 f8 02             	cmp    eax,0x2
c00109a9:	76 07                	jbe    c00109b2 <SysIsATTY(regs*)+0x16>
c00109ab:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109b0:	75 28                	jne    c00109da <SysIsATTY(regs*)+0x3e>
c00109b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109c0:	85 c0                	test   eax,eax
c00109c2:	74 26                	je     c00109ea <SysIsATTY(regs*)+0x4e>
c00109c4:	83 ec 0c             	sub    esp,0xc
c00109c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00109c9:	50                   	push   eax
c00109ca:	ff 12                	call   DWORD PTR [edx]
c00109cc:	31 d2                	xor    edx,edx
c00109ce:	25 ff 00 00 00       	and    eax,0xff
c00109d3:	83 c4 10             	add    esp,0x10
c00109d6:	83 c4 0c             	add    esp,0xc
c00109d9:	c3                   	ret    
c00109da:	83 ec 0c             	sub    esp,0xc
c00109dd:	50                   	push   eax
c00109de:	e8 4c 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	85 c0                	test   eax,eax
c00109e8:	75 da                	jne    c00109c4 <SysIsATTY(regs*)+0x28>
c00109ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109f4:	83 c4 0c             	add    esp,0xc
c00109f7:	c3                   	ret    

c00109f8 <SysSeek(regs*)>:
c00109f8:	53                   	push   ebx
c00109f9:	83 ec 08             	sub    esp,0x8
c00109fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a03:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a06:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a0c:	77 34                	ja     c0010a42 <SysSeek(regs*)+0x4a>
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	50                   	push   eax
c0010a12:	e8 18 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a17:	83 c4 0c             	add    esp,0xc
c0010a1a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a1d:	31 db                	xor    ebx,ebx
c0010a1f:	53                   	push   ebx
c0010a20:	51                   	push   ecx
c0010a21:	50                   	push   eax
c0010a22:	e8 a5 a1 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	85 c0                	test   eax,eax
c0010a2c:	0f 95 c0             	setne  al
c0010a2f:	31 d2                	xor    edx,edx
c0010a31:	25 ff 00 00 00       	and    eax,0xff
c0010a36:	f7 d8                	neg    eax
c0010a38:	83 d2 00             	adc    edx,0x0
c0010a3b:	83 c4 08             	add    esp,0x8
c0010a3e:	f7 da                	neg    edx
c0010a40:	5b                   	pop    ebx
c0010a41:	c3                   	ret    
c0010a42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a4c:	83 c4 08             	add    esp,0x8
c0010a4f:	5b                   	pop    ebx
c0010a50:	c3                   	ret    

c0010a51 <SysTell(regs*)>:
c0010a51:	53                   	push   ebx
c0010a52:	83 ec 08             	sub    esp,0x8
c0010a55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a5c:	83 f8 02             	cmp    eax,0x2
c0010a5f:	76 50                	jbe    c0010ab1 <SysTell(regs*)+0x60>
c0010a61:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a66:	76 19                	jbe    c0010a81 <SysTell(regs*)+0x30>
c0010a68:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a6b:	31 d2                	xor    edx,edx
c0010a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a7a:	31 c0                	xor    eax,eax
c0010a7c:	83 c4 08             	add    esp,0x8
c0010a7f:	5b                   	pop    ebx
c0010a80:	c3                   	ret    
c0010a81:	83 ec 0c             	sub    esp,0xc
c0010a84:	50                   	push   eax
c0010a85:	e8 a5 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a8a:	5a                   	pop    edx
c0010a8b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010a8e:	59                   	pop    ecx
c0010a8f:	53                   	push   ebx
c0010a90:	50                   	push   eax
c0010a91:	e8 8c a1 ff ff       	call   c000ac22 <File::tell(unsigned long long*)>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	85 c0                	test   eax,eax
c0010a9b:	0f 95 c0             	setne  al
c0010a9e:	31 d2                	xor    edx,edx
c0010aa0:	25 ff 00 00 00       	and    eax,0xff
c0010aa5:	f7 d8                	neg    eax
c0010aa7:	83 d2 00             	adc    edx,0x0
c0010aaa:	83 c4 08             	add    esp,0x8
c0010aad:	f7 da                	neg    edx
c0010aaf:	5b                   	pop    ebx
c0010ab0:	c3                   	ret    
c0010ab1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ab6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010abb:	83 c4 08             	add    esp,0x8
c0010abe:	5b                   	pop    ebx
c0010abf:	c3                   	ret    

c0010ac0 <SysSize(regs*)>:
c0010ac0:	53                   	push   ebx
c0010ac1:	83 ec 18             	sub    esp,0x18
c0010ac4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ac8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010acb:	83 f8 02             	cmp    eax,0x2
c0010ace:	76 56                	jbe    c0010b26 <SysSize(regs*)+0x66>
c0010ad0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ad5:	76 19                	jbe    c0010af0 <SysSize(regs*)+0x30>
c0010ad7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ada:	31 d2                	xor    edx,edx
c0010adc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ae2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ae9:	31 c0                	xor    eax,eax
c0010aeb:	83 c4 18             	add    esp,0x18
c0010aee:	5b                   	pop    ebx
c0010aef:	c3                   	ret    
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	50                   	push   eax
c0010af4:	e8 36 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010af9:	83 c4 0c             	add    esp,0xc
c0010afc:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b00:	52                   	push   edx
c0010b01:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b04:	52                   	push   edx
c0010b05:	50                   	push   eax
c0010b06:	e8 af a2 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	85 c0                	test   eax,eax
c0010b10:	0f 95 c0             	setne  al
c0010b13:	31 d2                	xor    edx,edx
c0010b15:	25 ff 00 00 00       	and    eax,0xff
c0010b1a:	f7 d8                	neg    eax
c0010b1c:	83 d2 00             	adc    edx,0x0
c0010b1f:	83 c4 18             	add    esp,0x18
c0010b22:	f7 da                	neg    edx
c0010b24:	5b                   	pop    ebx
c0010b25:	c3                   	ret    
c0010b26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b30:	83 c4 18             	add    esp,0x18
c0010b33:	5b                   	pop    ebx
c0010b34:	c3                   	ret    

c0010b35 <SysSizeFromFilename(regs*)>:
c0010b35:	57                   	push   edi
c0010b36:	56                   	push   esi
c0010b37:	53                   	push   ebx
c0010b38:	83 ec 20             	sub    esp,0x20
c0010b3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b3f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b42:	83 fb 02             	cmp    ebx,0x2
c0010b45:	0f 86 8c 00 00 00    	jbe    c0010bd7 <SysSizeFromFilename(regs*)+0xa2>
c0010b4b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b51:	76 1b                	jbe    c0010b6e <SysSizeFromFilename(regs*)+0x39>
c0010b53:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b56:	31 d2                	xor    edx,edx
c0010b58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b65:	83 c4 20             	add    esp,0x20
c0010b68:	31 c0                	xor    eax,eax
c0010b6a:	5b                   	pop    ebx
c0010b6b:	5e                   	pop    esi
c0010b6c:	5f                   	pop    edi
c0010b6d:	c3                   	ret    
c0010b6e:	83 ec 0c             	sub    esp,0xc
c0010b71:	68 14 01 00 00       	push   0x114
c0010b76:	e8 3e 6c ff ff       	call   c00077b9 <malloc>
c0010b7b:	83 c4 0c             	add    esp,0xc
c0010b7e:	89 c7                	mov    edi,eax
c0010b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b88:	50                   	push   eax
c0010b89:	53                   	push   ebx
c0010b8a:	57                   	push   edi
c0010b8b:	e8 be 9e ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010b90:	83 c4 0c             	add    esp,0xc
c0010b93:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010b97:	50                   	push   eax
c0010b98:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010b9b:	52                   	push   edx
c0010b9c:	57                   	push   edi
c0010b9d:	e8 18 a2 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0010ba2:	83 c4 10             	add    esp,0x10
c0010ba5:	85 ff                	test   edi,edi
c0010ba7:	74 14                	je     c0010bbd <SysSizeFromFilename(regs*)+0x88>
c0010ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bad:	8b 17                	mov    edx,DWORD PTR [edi]
c0010baf:	83 ec 0c             	sub    esp,0xc
c0010bb2:	57                   	push   edi
c0010bb3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bbd:	85 c0                	test   eax,eax
c0010bbf:	0f 95 c0             	setne  al
c0010bc2:	31 d2                	xor    edx,edx
c0010bc4:	25 ff 00 00 00       	and    eax,0xff
c0010bc9:	f7 d8                	neg    eax
c0010bcb:	83 d2 00             	adc    edx,0x0
c0010bce:	83 c4 20             	add    esp,0x20
c0010bd1:	f7 da                	neg    edx
c0010bd3:	5b                   	pop    ebx
c0010bd4:	5e                   	pop    esi
c0010bd5:	5f                   	pop    edi
c0010bd6:	c3                   	ret    
c0010bd7:	83 c4 20             	add    esp,0x20
c0010bda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bdf:	5b                   	pop    ebx
c0010be0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010be5:	5e                   	pop    esi
c0010be6:	5f                   	pop    edi
c0010be7:	c3                   	ret    

c0010be8 <SysClose(regs*)>:
c0010be8:	53                   	push   ebx
c0010be9:	83 ec 08             	sub    esp,0x8
c0010bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010bf3:	83 f8 02             	cmp    eax,0x2
c0010bf6:	76 41                	jbe    c0010c39 <SysClose(regs*)+0x51>
c0010bf8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010bfe:	83 fa 01             	cmp    edx,0x1
c0010c01:	76 2d                	jbe    c0010c30 <SysClose(regs*)+0x48>
c0010c03:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c08:	77 2f                	ja     c0010c39 <SysClose(regs*)+0x51>
c0010c0a:	83 ec 0c             	sub    esp,0xc
c0010c0d:	50                   	push   eax
c0010c0e:	e8 1c 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c13:	89 c3                	mov    ebx,eax
c0010c15:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c18:	e8 4f 9f ff ff       	call   c000ab6c <File::close()>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	85 db                	test   ebx,ebx
c0010c22:	74 0c                	je     c0010c30 <SysClose(regs*)+0x48>
c0010c24:	83 ec 0c             	sub    esp,0xc
c0010c27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c29:	53                   	push   ebx
c0010c2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	31 c0                	xor    eax,eax
c0010c32:	31 d2                	xor    edx,edx
c0010c34:	83 c4 08             	add    esp,0x8
c0010c37:	5b                   	pop    ebx
c0010c38:	c3                   	ret    
c0010c39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	5b                   	pop    ebx
c0010c47:	c3                   	ret    

c0010c48 <SysOpenDir(regs*)>:
c0010c48:	57                   	push   edi
c0010c49:	56                   	push   esi
c0010c4a:	53                   	push   ebx
c0010c4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c4f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c52:	85 c0                	test   eax,eax
c0010c54:	0f 84 e7 00 00 00    	je     c0010d41 <SysOpenDir(regs*)+0xf9>
c0010c5a:	83 ec 0c             	sub    esp,0xc
c0010c5d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c60:	56                   	push   esi
c0010c61:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c64:	57                   	push   edi
c0010c65:	50                   	push   eax
c0010c66:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c69:	50                   	push   eax
c0010c6a:	68 24 e9 01 c0       	push   0xc001e924
c0010c6f:	e8 64 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010c74:	83 c4 18             	add    esp,0x18
c0010c77:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c7a:	50                   	push   eax
c0010c7b:	68 4a e9 01 c0       	push   0xc001e94a
c0010c80:	e8 53 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010c85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010c8c:	e8 28 6b ff ff       	call   c00077b9 <malloc>
c0010c91:	83 c4 0c             	add    esp,0xc
c0010c94:	89 c6                	mov    esi,eax
c0010c96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c9e:	50                   	push   eax
c0010c9f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ca2:	50                   	push   eax
c0010ca3:	56                   	push   esi
c0010ca4:	e8 cf a2 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010ca9:	c7 04 24 3e f7 01 c0 	mov    DWORD PTR [esp],0xc001f73e
c0010cb0:	e8 23 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cb5:	83 c4 10             	add    esp,0x10
c0010cb8:	85 f6                	test   esi,esi
c0010cba:	0f 84 8f 00 00 00    	je     c0010d4f <SysOpenDir(regs*)+0x107>
c0010cc0:	83 ec 0c             	sub    esp,0xc
c0010cc3:	68 5f e9 01 c0       	push   0xc001e95f
c0010cc8:	e8 0b 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010ccd:	58                   	pop    eax
c0010cce:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cd1:	5a                   	pop    edx
c0010cd2:	51                   	push   ecx
c0010cd3:	68 63 e9 01 c0       	push   0xc001e963
c0010cd8:	e8 fb 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ce0:	e8 53 a3 ff ff       	call   c000b038 <Directory::open()>
c0010ce5:	c7 04 24 8b d6 01 c0 	mov    DWORD PTR [esp],0xc001d68b
c0010cec:	89 c7                	mov    edi,eax
c0010cee:	e8 e5 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cf3:	83 c4 10             	add    esp,0x10
c0010cf6:	85 ff                	test   edi,edi
c0010cf8:	75 37                	jne    c0010d31 <SysOpenDir(regs*)+0xe9>
c0010cfa:	83 ec 0c             	sub    esp,0xc
c0010cfd:	68 74 e9 01 c0       	push   0xc001e974
c0010d02:	e8 d1 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d07:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d0a:	e8 2b 81 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d0f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d12:	89 02                	mov    DWORD PTR [edx],eax
c0010d14:	c1 f8 1f             	sar    eax,0x1f
c0010d17:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d1a:	c7 04 24 78 e9 01 c0 	mov    DWORD PTR [esp],0xc001e978
c0010d21:	e8 b2 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	31 c0                	xor    eax,eax
c0010d2b:	5b                   	pop    ebx
c0010d2c:	31 d2                	xor    edx,edx
c0010d2e:	5e                   	pop    esi
c0010d2f:	5f                   	pop    edi
c0010d30:	c3                   	ret    
c0010d31:	83 ec 0c             	sub    esp,0xc
c0010d34:	68 70 e9 01 c0       	push   0xc001e970
c0010d39:	e8 9a 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d3e:	83 c4 10             	add    esp,0x10
c0010d41:	5b                   	pop    ebx
c0010d42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d4c:	5e                   	pop    esi
c0010d4d:	5f                   	pop    edi
c0010d4e:	c3                   	ret    
c0010d4f:	83 ec 0c             	sub    esp,0xc
c0010d52:	68 5b e9 01 c0       	push   0xc001e95b
c0010d57:	eb e0                	jmp    c0010d39 <SysOpenDir(regs*)+0xf1>

c0010d59 <SysCloseDir(regs*)>:
c0010d59:	53                   	push   ebx
c0010d5a:	83 ec 08             	sub    esp,0x8
c0010d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d64:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d67:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d6d:	77 2f                	ja     c0010d9e <SysCloseDir(regs*)+0x45>
c0010d6f:	83 ec 0c             	sub    esp,0xc
c0010d72:	50                   	push   eax
c0010d73:	e8 b7 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d78:	89 c3                	mov    ebx,eax
c0010d7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d7d:	e8 12 a3 ff ff       	call   c000b094 <Directory::close()>
c0010d82:	83 c4 10             	add    esp,0x10
c0010d85:	85 db                	test   ebx,ebx
c0010d87:	74 0c                	je     c0010d95 <SysCloseDir(regs*)+0x3c>
c0010d89:	83 ec 0c             	sub    esp,0xc
c0010d8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d8e:	53                   	push   ebx
c0010d8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d92:	83 c4 10             	add    esp,0x10
c0010d95:	31 c0                	xor    eax,eax
c0010d97:	31 d2                	xor    edx,edx
c0010d99:	83 c4 08             	add    esp,0x8
c0010d9c:	5b                   	pop    ebx
c0010d9d:	c3                   	ret    
c0010d9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010da3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010da8:	83 c4 08             	add    esp,0x8
c0010dab:	5b                   	pop    ebx
c0010dac:	c3                   	ret    

c0010dad <SysMakeDir(regs*)>:
c0010dad:	56                   	push   esi
c0010dae:	53                   	push   ebx
c0010daf:	83 ec 10             	sub    esp,0x10
c0010db2:	68 14 01 00 00       	push   0x114
c0010db7:	e8 fd 69 ff ff       	call   c00077b9 <malloc>
c0010dbc:	83 c4 0c             	add    esp,0xc
c0010dbf:	89 c3                	mov    ebx,eax
c0010dc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dc6:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010dc9:	56                   	push   esi
c0010dca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010dd1:	50                   	push   eax
c0010dd2:	53                   	push   ebx
c0010dd3:	e8 a0 a1 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010dd8:	83 c4 10             	add    esp,0x10
c0010ddb:	85 db                	test   ebx,ebx
c0010ddd:	74 32                	je     c0010e11 <SysMakeDir(regs*)+0x64>
c0010ddf:	83 ec 0c             	sub    esp,0xc
c0010de2:	53                   	push   ebx
c0010de3:	e8 30 a4 ff ff       	call   c000b218 <Directory::create()>
c0010de8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010deb:	89 c6                	mov    esi,eax
c0010ded:	e8 a2 a2 ff ff       	call   c000b094 <Directory::close()>
c0010df2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	31 c0                	xor    eax,eax
c0010dff:	59                   	pop    ecx
c0010e00:	85 f6                	test   esi,esi
c0010e02:	5b                   	pop    ebx
c0010e03:	0f 95 c0             	setne  al
c0010e06:	5e                   	pop    esi
c0010e07:	31 d2                	xor    edx,edx
c0010e09:	f7 d8                	neg    eax
c0010e0b:	83 d2 00             	adc    edx,0x0
c0010e0e:	f7 da                	neg    edx
c0010e10:	c3                   	ret    
c0010e11:	59                   	pop    ecx
c0010e12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e1c:	5b                   	pop    ebx
c0010e1d:	5e                   	pop    esi
c0010e1e:	c3                   	ret    

c0010e1f <SysWait(regs*)>:
c0010e1f:	83 ec 10             	sub    esp,0x10
c0010e22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e26:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e29:	52                   	push   edx
c0010e2a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e2d:	51                   	push   ecx
c0010e2e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e31:	50                   	push   eax
c0010e32:	e8 19 2c 00 00       	call   c0013a50 <waitTask(int, int*, int)>
c0010e37:	83 c4 1c             	add    esp,0x1c
c0010e3a:	99                   	cdq    
c0010e3b:	c3                   	ret    

c0010e3c <SysNotImpl(regs*)>:
c0010e3c:	83 ec 18             	sub    esp,0x18
c0010e3f:	68 7c e9 01 c0       	push   0xc001e97c
c0010e44:	e8 da f2 ff ff       	call   c0010123 <KePanic(char const*)>
c0010e49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e53:	83 c4 1c             	add    esp,0x1c
c0010e56:	c3                   	ret    

c0010e57 <SysPanic(regs*)>:
c0010e57:	83 ec 18             	sub    esp,0x18
c0010e5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e5e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e61:	50                   	push   eax
c0010e62:	e8 bc f2 ff ff       	call   c0010123 <KePanic(char const*)>
c0010e67:	b8 01 00 00 00       	mov    eax,0x1
c0010e6c:	31 d2                	xor    edx,edx
c0010e6e:	83 c4 1c             	add    esp,0x1c
c0010e71:	c3                   	ret    

c0010e72 <SysRmdir(regs*)>:
c0010e72:	56                   	push   esi
c0010e73:	53                   	push   ebx
c0010e74:	83 ec 20             	sub    esp,0x20
c0010e77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e7b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010e7e:	68 14 01 00 00       	push   0x114
c0010e83:	e8 31 69 ff ff       	call   c00077b9 <malloc>
c0010e88:	83 c4 0c             	add    esp,0xc
c0010e8b:	89 c3                	mov    ebx,eax
c0010e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e95:	50                   	push   eax
c0010e96:	56                   	push   esi
c0010e97:	53                   	push   ebx
c0010e98:	e8 b1 9b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010e9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ea0:	e8 e1 9d ff ff       	call   c000ac86 <File::unlink()>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	85 db                	test   ebx,ebx
c0010eaa:	74 14                	je     c0010ec0 <SysRmdir(regs*)+0x4e>
c0010eac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010eb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010eb2:	83 ec 0c             	sub    esp,0xc
c0010eb5:	53                   	push   ebx
c0010eb6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec0:	85 c0                	test   eax,eax
c0010ec2:	0f 95 c0             	setne  al
c0010ec5:	31 d2                	xor    edx,edx
c0010ec7:	25 ff 00 00 00       	and    eax,0xff
c0010ecc:	f7 d8                	neg    eax
c0010ece:	83 d2 00             	adc    edx,0x0
c0010ed1:	83 c4 14             	add    esp,0x14
c0010ed4:	f7 da                	neg    edx
c0010ed6:	5b                   	pop    ebx
c0010ed7:	5e                   	pop    esi
c0010ed8:	c3                   	ret    

c0010ed9 <SysUnlink(regs*)>:
c0010ed9:	56                   	push   esi
c0010eda:	53                   	push   ebx
c0010edb:	83 ec 20             	sub    esp,0x20
c0010ede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ee2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ee5:	68 14 01 00 00       	push   0x114
c0010eea:	e8 ca 68 ff ff       	call   c00077b9 <malloc>
c0010eef:	83 c4 0c             	add    esp,0xc
c0010ef2:	89 c3                	mov    ebx,eax
c0010ef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010efc:	50                   	push   eax
c0010efd:	56                   	push   esi
c0010efe:	53                   	push   ebx
c0010eff:	e8 4a 9b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010f04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f07:	e8 7a 9d ff ff       	call   c000ac86 <File::unlink()>
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	85 db                	test   ebx,ebx
c0010f11:	74 14                	je     c0010f27 <SysUnlink(regs*)+0x4e>
c0010f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f17:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f19:	83 ec 0c             	sub    esp,0xc
c0010f1c:	53                   	push   ebx
c0010f1d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f27:	85 c0                	test   eax,eax
c0010f29:	0f 95 c0             	setne  al
c0010f2c:	31 d2                	xor    edx,edx
c0010f2e:	25 ff 00 00 00       	and    eax,0xff
c0010f33:	f7 d8                	neg    eax
c0010f35:	83 d2 00             	adc    edx,0x0
c0010f38:	83 c4 14             	add    esp,0x14
c0010f3b:	f7 da                	neg    edx
c0010f3d:	5b                   	pop    ebx
c0010f3e:	5e                   	pop    esi
c0010f3f:	c3                   	ret    

c0010f40 <SysGetArgv(regs*)>:
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f47:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f4a:	85 c0                	test   eax,eax
c0010f4c:	78 2c                	js     c0010f7a <SysGetArgv(regs*)+0x3a>
c0010f4e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f54:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f57:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f5d:	7d 1b                	jge    c0010f7a <SysGetArgv(regs*)+0x3a>
c0010f5f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f66:	85 c0                	test   eax,eax
c0010f68:	74 18                	je     c0010f82 <SysGetArgv(regs*)+0x42>
c0010f6a:	83 ec 08             	sub    esp,0x8
c0010f6d:	50                   	push   eax
c0010f6e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f71:	50                   	push   eax
c0010f72:	e8 89 f6 fe ff       	call   c0000600 <strcpy>
c0010f77:	83 c4 10             	add    esp,0x10
c0010f7a:	31 c0                	xor    eax,eax
c0010f7c:	31 d2                	xor    edx,edx
c0010f7e:	83 c4 0c             	add    esp,0xc
c0010f81:	c3                   	ret    
c0010f82:	b8 01 00 00 00       	mov    eax,0x1
c0010f87:	31 d2                	xor    edx,edx
c0010f89:	83 c4 0c             	add    esp,0xc
c0010f8c:	c3                   	ret    

c0010f8d <SysUSleep(regs*)>:
c0010f8d:	83 ec 1c             	sub    esp,0x1c
c0010f90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010f94:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010f97:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010f9a:	6a 00                	push   0x0
c0010f9c:	6a 64                	push   0x64
c0010f9e:	52                   	push   edx
c0010f9f:	50                   	push   eax
c0010fa0:	e8 7b b1 00 00       	call   c001c120 <__udivdi3>
c0010fa5:	83 c4 14             	add    esp,0x14
c0010fa8:	50                   	push   eax
c0010fa9:	e8 76 2b 00 00       	call   c0013b24 <milliTenthSleep(unsigned int)>
c0010fae:	31 c0                	xor    eax,eax
c0010fb0:	31 d2                	xor    edx,edx
c0010fb2:	83 c4 1c             	add    esp,0x1c
c0010fb5:	c3                   	ret    

c0010fb6 <SysSpawn(regs*)>:
c0010fb6:	56                   	push   esi
c0010fb7:	53                   	push   ebx
c0010fb8:	50                   	push   eax
c0010fb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fbd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fc0:	85 c0                	test   eax,eax
c0010fc2:	75 08                	jne    c0010fcc <SysSpawn(regs*)+0x16>
c0010fc4:	59                   	pop    ecx
c0010fc5:	31 c0                	xor    eax,eax
c0010fc7:	31 d2                	xor    edx,edx
c0010fc9:	5b                   	pop    ebx
c0010fca:	5e                   	pop    esi
c0010fcb:	c3                   	ret    
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	68 e8 07 00 00       	push   0x7e8
c0010fd4:	e8 e0 67 ff ff       	call   c00077b9 <malloc>
c0010fd9:	83 c4 10             	add    esp,0x10
c0010fdc:	89 c6                	mov    esi,eax
c0010fde:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010fe1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fe4:	85 c0                	test   eax,eax
c0010fe6:	75 33                	jne    c001101b <SysSpawn(regs*)+0x65>
c0010fe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ff0:	52                   	push   edx
c0010ff1:	50                   	push   eax
c0010ff2:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010ff5:	53                   	push   ebx
c0010ff6:	56                   	push   esi
c0010ff7:	e8 44 21 00 00       	call   c0013140 <Process::Process(char const*, Process*, char**)>
c0010ffc:	83 c4 10             	add    esp,0x10
c0010fff:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011006:	75 bc                	jne    c0010fc4 <SysSpawn(regs*)+0xe>
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	56                   	push   esi
c001100c:	e8 eb 26 00 00       	call   c00136fc <Process::createUserThread()>
c0011011:	8b 06                	mov    eax,DWORD PTR [esi]
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	99                   	cdq    
c0011017:	59                   	pop    ecx
c0011018:	5b                   	pop    ebx
c0011019:	5e                   	pop    esi
c001101a:	c3                   	ret    
c001101b:	31 c0                	xor    eax,eax
c001101d:	eb d1                	jmp    c0010ff0 <SysSpawn(regs*)+0x3a>

c001101f <SysGetEnv(regs*)>:
c001101f:	57                   	push   edi
c0011020:	56                   	push   esi
c0011021:	53                   	push   ebx
c0011022:	83 ec 1c             	sub    esp,0x1c
c0011025:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001102e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011031:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011034:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011037:	50                   	push   eax
c0011038:	e8 9e ef ff ff       	call   c000ffdb <Krnl::getProcessTotalEnvCount(Process*)>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	39 c7                	cmp    edi,eax
c0011042:	7c 14                	jl     c0011058 <SysGetEnv(regs*)+0x39>
c0011044:	85 f6                	test   esi,esi
c0011046:	75 0b                	jne    c0011053 <SysGetEnv(regs*)+0x34>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	31 c0                	xor    eax,eax
c001104d:	5b                   	pop    ebx
c001104e:	31 d2                	xor    edx,edx
c0011050:	5e                   	pop    esi
c0011051:	5f                   	pop    edi
c0011052:	c3                   	ret    
c0011053:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011056:	eb f0                	jmp    c0011048 <SysGetEnv(regs*)+0x29>
c0011058:	8d 44 24 08          	lea    eax,[esp+0x8]
c001105c:	52                   	push   edx
c001105d:	57                   	push   edi
c001105e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011064:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011067:	51                   	push   ecx
c0011068:	50                   	push   eax
c0011069:	e8 8d ef ff ff       	call   c000fffb <Krnl::getProcessEnvPair(Process*, int)>
c001106e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011071:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011075:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	85 db                	test   ebx,ebx
c001107e:	75 23                	jne    c00110a3 <SysGetEnv(regs*)+0x84>
c0011080:	83 ec 0c             	sub    esp,0xc
c0011083:	50                   	push   eax
c0011084:	e8 b7 f4 fe ff       	call   c0000540 <strlen>
c0011089:	89 3c 24             	mov    DWORD PTR [esp],edi
c001108c:	89 c3                	mov    ebx,eax
c001108e:	e8 ad f4 fe ff       	call   c0000540 <strlen>
c0011093:	31 d2                	xor    edx,edx
c0011095:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	83 c4 10             	add    esp,0x10
c001109f:	5b                   	pop    ebx
c00110a0:	5e                   	pop    esi
c00110a1:	5f                   	pop    edi
c00110a2:	c3                   	ret    
c00110a3:	83 ec 08             	sub    esp,0x8
c00110a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110a9:	50                   	push   eax
c00110aa:	56                   	push   esi
c00110ab:	e8 50 f5 fe ff       	call   c0000600 <strcpy>
c00110b0:	58                   	pop    eax
c00110b1:	5a                   	pop    edx
c00110b2:	68 96 e9 01 c0       	push   0xc001e996
c00110b7:	56                   	push   esi
c00110b8:	e8 03 f7 fe ff       	call   c00007c0 <strcat>
c00110bd:	59                   	pop    ecx
c00110be:	5b                   	pop    ebx
c00110bf:	57                   	push   edi
c00110c0:	56                   	push   esi
c00110c1:	e8 fa f6 fe ff       	call   c00007c0 <strcat>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	e9 7a ff ff ff       	jmp    c0011048 <SysGetEnv(regs*)+0x29>

c00110ce <SysSetFatAttrib(regs*)>:
c00110ce:	57                   	push   edi
c00110cf:	56                   	push   esi
c00110d0:	53                   	push   ebx
c00110d1:	83 ec 1c             	sub    esp,0x1c
c00110d4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00110d8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00110db:	68 14 01 00 00       	push   0x114
c00110e0:	e8 d4 66 ff ff       	call   c00077b9 <malloc>
c00110e5:	83 c4 0c             	add    esp,0xc
c00110e8:	89 c3                	mov    ebx,eax
c00110ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f2:	50                   	push   eax
c00110f3:	57                   	push   edi
c00110f4:	53                   	push   ebx
c00110f5:	e8 54 99 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00110fa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00110fd:	83 c4 0c             	add    esp,0xc
c0011100:	0f b6 d4             	movzx  edx,ah
c0011103:	25 ff 00 00 00       	and    eax,0xff
c0011108:	52                   	push   edx
c0011109:	50                   	push   eax
c001110a:	53                   	push   ebx
c001110b:	e8 10 9c ff ff       	call   c000ad20 <File::chfatattr(unsigned char, unsigned char)>
c0011110:	83 c4 10             	add    esp,0x10
c0011113:	85 db                	test   ebx,ebx
c0011115:	74 14                	je     c001112b <SysSetFatAttrib(regs*)+0x5d>
c0011117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001111b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001111d:	83 ec 0c             	sub    esp,0xc
c0011120:	53                   	push   ebx
c0011121:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001112b:	85 c0                	test   eax,eax
c001112d:	0f 95 c0             	setne  al
c0011130:	31 d2                	xor    edx,edx
c0011132:	25 ff 00 00 00       	and    eax,0xff
c0011137:	f7 d8                	neg    eax
c0011139:	83 d2 00             	adc    edx,0x0
c001113c:	83 c4 10             	add    esp,0x10
c001113f:	f7 da                	neg    edx
c0011141:	5b                   	pop    ebx
c0011142:	5e                   	pop    esi
c0011143:	5f                   	pop    edi
c0011144:	c3                   	ret    

c0011145 <SysPipe(regs*)>:
c0011145:	57                   	push   edi
c0011146:	56                   	push   esi
c0011147:	53                   	push   ebx
c0011148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114c:	83 ec 0c             	sub    esp,0xc
c001114f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011152:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011155:	6a 20                	push   0x20
c0011157:	e8 5d 66 ff ff       	call   c00077b9 <malloc>
c001115c:	89 c3                	mov    ebx,eax
c001115e:	58                   	pop    eax
c001115f:	5a                   	pop    edx
c0011160:	68 00 50 00 00       	push   0x5000
c0011165:	53                   	push   ebx
c0011166:	e8 53 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c001116b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001116e:	e8 c7 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011173:	89 07                	mov    DWORD PTR [edi],eax
c0011175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011178:	e8 bd 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001117d:	83 c4 10             	add    esp,0x10
c0011180:	89 06                	mov    DWORD PTR [esi],eax
c0011182:	31 d2                	xor    edx,edx
c0011184:	5b                   	pop    ebx
c0011185:	31 c0                	xor    eax,eax
c0011187:	5e                   	pop    esi
c0011188:	5f                   	pop    edi
c0011189:	c3                   	ret    

c001118a <SysGetUnixTime(regs*)>:
c001118a:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001118f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011195:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011199:	e9 c0 a2 ff ff       	jmp    c000b45e <Clock::timeInSecondsLocal()>

c001119e <string_ends_with(char const*, char const*)>:
c001119e:	57                   	push   edi
c001119f:	56                   	push   esi
c00111a0:	53                   	push   ebx
c00111a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111a9:	83 ec 0c             	sub    esp,0xc
c00111ac:	53                   	push   ebx
c00111ad:	e8 8e f3 fe ff       	call   c0000540 <strlen>
c00111b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111b5:	89 c6                	mov    esi,eax
c00111b7:	e8 84 f3 fe ff       	call   c0000540 <strlen>
c00111bc:	83 c4 10             	add    esp,0x10
c00111bf:	39 c6                	cmp    esi,eax
c00111c1:	7d 06                	jge    c00111c9 <string_ends_with(char const*, char const*)+0x2b>
c00111c3:	5b                   	pop    ebx
c00111c4:	31 c0                	xor    eax,eax
c00111c6:	5e                   	pop    esi
c00111c7:	5f                   	pop    edi
c00111c8:	c3                   	ret    
c00111c9:	83 ec 08             	sub    esp,0x8
c00111cc:	29 c6                	sub    esi,eax
c00111ce:	57                   	push   edi
c00111cf:	01 f3                	add    ebx,esi
c00111d1:	53                   	push   ebx
c00111d2:	e8 09 f5 fe ff       	call   c00006e0 <strcmp>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	85 c0                	test   eax,eax
c00111dc:	5b                   	pop    ebx
c00111dd:	0f 94 c0             	sete   al
c00111e0:	5e                   	pop    esi
c00111e1:	25 ff 00 00 00       	and    eax,0xff
c00111e6:	5f                   	pop    edi
c00111e7:	c3                   	ret    

c00111e8 <SysOpen(regs*)>:
c00111e8:	56                   	push   esi
c00111e9:	53                   	push   ebx
c00111ea:	81 ec 04 01 00 00    	sub    esp,0x104
c00111f0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00111f7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00111fa:	85 d2                	test   edx,edx
c00111fc:	0f 84 cc 01 00 00    	je     c00113ce <SysOpen(regs*)+0x1e6>
c0011202:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011205:	85 c0                	test   eax,eax
c0011207:	0f 84 c1 01 00 00    	je     c00113ce <SysOpen(regs*)+0x1e6>
c001120d:	83 ec 08             	sub    esp,0x8
c0011210:	50                   	push   eax
c0011211:	68 98 e9 01 c0       	push   0xc001e998
c0011216:	e8 bd 92 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001121b:	83 c4 0c             	add    esp,0xc
c001121e:	68 a5 e9 01 c0       	push   0xc001e9a5
c0011223:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011226:	50                   	push   eax
c0011227:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001122b:	56                   	push   esi
c001122c:	e8 73 96 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011231:	89 34 24             	mov    DWORD PTR [esp],esi
c0011234:	e8 07 f3 fe ff       	call   c0000540 <strlen>
c0011239:	83 c4 10             	add    esp,0x10
c001123c:	48                   	dec    eax
c001123d:	74 1d                	je     c001125c <SysOpen(regs*)+0x74>
c001123f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011242:	eb 0f                	jmp    c0011253 <SysOpen(regs*)+0x6b>
c0011244:	80 fa 3a             	cmp    dl,0x3a
c0011247:	74 0f                	je     c0011258 <SysOpen(regs*)+0x70>
c0011249:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001124d:	48                   	dec    eax
c001124e:	74 0c                	je     c001125c <SysOpen(regs*)+0x74>
c0011250:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011253:	80 fa 2e             	cmp    dl,0x2e
c0011256:	75 ec                	jne    c0011244 <SysOpen(regs*)+0x5c>
c0011258:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001125c:	83 ec 08             	sub    esp,0x8
c001125f:	68 a9 e9 01 c0       	push   0xc001e9a9
c0011264:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011267:	50                   	push   eax
c0011268:	e8 31 ff ff ff       	call   c001119e <string_ends_with(char const*, char const*)>
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	85 c0                	test   eax,eax
c0011272:	74 1d                	je     c0011291 <SysOpen(regs*)+0xa9>
c0011274:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011277:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001127d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011284:	81 c4 04 01 00 00    	add    esp,0x104
c001128a:	31 c0                	xor    eax,eax
c001128c:	31 d2                	xor    edx,edx
c001128e:	5b                   	pop    ebx
c001128f:	5e                   	pop    esi
c0011290:	c3                   	ret    
c0011291:	83 ec 08             	sub    esp,0x8
c0011294:	68 ae e9 01 c0       	push   0xc001e9ae
c0011299:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001129c:	50                   	push   eax
c001129d:	e8 fc fe ff ff       	call   c001119e <string_ends_with(char const*, char const*)>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	85 c0                	test   eax,eax
c00112a7:	75 cb                	jne    c0011274 <SysOpen(regs*)+0x8c>
c00112a9:	83 ec 08             	sub    esp,0x8
c00112ac:	68 aa e9 01 c0       	push   0xc001e9aa
c00112b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112b4:	50                   	push   eax
c00112b5:	e8 26 f4 fe ff       	call   c00006e0 <strcmp>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	85 c0                	test   eax,eax
c00112bf:	74 b3                	je     c0011274 <SysOpen(regs*)+0x8c>
c00112c1:	83 ec 08             	sub    esp,0x8
c00112c4:	68 a9 e9 01 c0       	push   0xc001e9a9
c00112c9:	56                   	push   esi
c00112ca:	e8 cf fe ff ff       	call   c001119e <string_ends_with(char const*, char const*)>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	85 c0                	test   eax,eax
c00112d4:	75 9e                	jne    c0011274 <SysOpen(regs*)+0x8c>
c00112d6:	83 ec 08             	sub    esp,0x8
c00112d9:	68 b3 e9 01 c0       	push   0xc001e9b3
c00112de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e1:	50                   	push   eax
c00112e2:	e8 b7 fe ff ff       	call   c001119e <string_ends_with(char const*, char const*)>
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	85 c0                	test   eax,eax
c00112ec:	0f 85 ef 00 00 00    	jne    c00113e1 <SysOpen(regs*)+0x1f9>
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	68 b8 e9 01 c0       	push   0xc001e9b8
c00112fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112fd:	50                   	push   eax
c00112fe:	e8 9b fe ff ff       	call   c001119e <string_ends_with(char const*, char const*)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	85 c0                	test   eax,eax
c0011308:	0f 85 d3 00 00 00    	jne    c00113e1 <SysOpen(regs*)+0x1f9>
c001130e:	83 ec 08             	sub    esp,0x8
c0011311:	68 b4 e9 01 c0       	push   0xc001e9b4
c0011316:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011319:	51                   	push   ecx
c001131a:	e8 c1 f3 fe ff       	call   c00006e0 <strcmp>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	85 c0                	test   eax,eax
c0011324:	0f 84 b7 00 00 00    	je     c00113e1 <SysOpen(regs*)+0x1f9>
c001132a:	83 ec 08             	sub    esp,0x8
c001132d:	68 b3 e9 01 c0       	push   0xc001e9b3
c0011332:	56                   	push   esi
c0011333:	e8 66 fe ff ff       	call   c001119e <string_ends_with(char const*, char const*)>
c0011338:	83 c4 10             	add    esp,0x10
c001133b:	85 c0                	test   eax,eax
c001133d:	0f 85 9e 00 00 00    	jne    c00113e1 <SysOpen(regs*)+0x1f9>
c0011343:	83 ec 0c             	sub    esp,0xc
c0011346:	68 14 01 00 00       	push   0x114
c001134b:	e8 69 64 ff ff       	call   c00077b9 <malloc>
c0011350:	83 c4 0c             	add    esp,0xc
c0011353:	89 c6                	mov    esi,eax
c0011355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001135a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001135d:	50                   	push   eax
c001135e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011361:	52                   	push   edx
c0011362:	56                   	push   esi
c0011363:	e8 e6 96 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	85 f6                	test   esi,esi
c001136d:	74 5f                	je     c00113ce <SysOpen(regs*)+0x1e6>
c001136f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011372:	89 d0                	mov    eax,edx
c0011374:	25 ff 00 00 00       	and    eax,0xff
c0011379:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001137c:	89 d0                	mov    eax,edx
c001137e:	83 e0 01             	and    eax,0x1
c0011381:	f6 c2 02             	test   dl,0x2
c0011384:	74 03                	je     c0011389 <SysOpen(regs*)+0x1a1>
c0011386:	83 c8 02             	or     eax,0x2
c0011389:	f6 c2 04             	test   dl,0x4
c001138c:	74 03                	je     c0011391 <SysOpen(regs*)+0x1a9>
c001138e:	83 c8 04             	or     eax,0x4
c0011391:	f6 c2 08             	test   dl,0x8
c0011394:	74 03                	je     c0011399 <SysOpen(regs*)+0x1b1>
c0011396:	83 c8 0a             	or     eax,0xa
c0011399:	83 e2 10             	and    edx,0x10
c001139c:	74 03                	je     c00113a1 <SysOpen(regs*)+0x1b9>
c001139e:	83 c8 12             	or     eax,0x12
c00113a1:	83 ec 08             	sub    esp,0x8
c00113a4:	50                   	push   eax
c00113a5:	56                   	push   esi
c00113a6:	e8 63 97 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00113ab:	83 c4 10             	add    esp,0x10
c00113ae:	85 c0                	test   eax,eax
c00113b0:	75 1c                	jne    c00113ce <SysOpen(regs*)+0x1e6>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	56                   	push   esi
c00113b6:	e8 7f 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00113bb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	89 02                	mov    DWORD PTR [edx],eax
c00113c3:	c1 f8 1f             	sar    eax,0x1f
c00113c6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113c9:	e9 b6 fe ff ff       	jmp    c0011284 <SysOpen(regs*)+0x9c>
c00113ce:	81 c4 04 01 00 00    	add    esp,0x104
c00113d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113de:	5b                   	pop    ebx
c00113df:	5e                   	pop    esi
c00113e0:	c3                   	ret    
c00113e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113e4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00113ea:	e9 8e fe ff ff       	jmp    c001127d <SysOpen(regs*)+0x95>

c00113ef <KeSystemCall(regs*, void*)>:
c00113ef:	53                   	push   ebx
c00113f0:	83 ec 10             	sub    esp,0x10
c00113f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00113f7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00113fa:	68 bd e9 01 c0       	push   0xc001e9bd
c00113ff:	e8 d4 90 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011404:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	83 f8 32             	cmp    eax,0x32
c001140d:	77 16                	ja     c0011425 <KeSystemCall(regs*, void*)+0x36>
c001140f:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c0011416:	85 d2                	test   edx,edx
c0011418:	74 0b                	je     c0011425 <KeSystemCall(regs*, void*)+0x36>
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	53                   	push   ebx
c001141e:	ff d2                	call   edx
c0011420:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011423:	eb 0d                	jmp    c0011432 <KeSystemCall(regs*, void*)+0x43>
c0011425:	52                   	push   edx
c0011426:	52                   	push   edx
c0011427:	50                   	push   eax
c0011428:	68 cd e9 01 c0       	push   0xc001e9cd
c001142d:	e8 a6 90 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001143a:	31 d2                	xor    edx,edx
c001143c:	83 c4 08             	add    esp,0x8
c001143f:	5b                   	pop    ebx
c0011440:	c3                   	ret    

c0011441 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011441:	55                   	push   ebp
c0011442:	57                   	push   edi
c0011443:	56                   	push   esi
c0011444:	53                   	push   ebx
c0011445:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001144b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011452:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011454:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011457:	80 fb 40             	cmp    bl,0x40
c001145a:	75 1b                	jne    c0011477 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001145c:	8a 16                	mov    dl,BYTE PTR [esi]
c001145e:	84 d2                	test   dl,dl
c0011460:	0f 84 f1 00 00 00    	je     c0011557 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011466:	8d 46 01             	lea    eax,[esi+0x1]
c0011469:	80 fa 3a             	cmp    dl,0x3a
c001146c:	74 04                	je     c0011472 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001146e:	89 c6                	mov    esi,eax
c0011470:	eb ea                	jmp    c001145c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011472:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011475:	89 c6                	mov    esi,eax
c0011477:	50                   	push   eax
c0011478:	6a 40                	push   0x40
c001147a:	6a 00                	push   0x0
c001147c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011480:	50                   	push   eax
c0011481:	e8 4a f0 fe ff       	call   c00004d0 <memset>
c0011486:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001148d:	31 c0                	xor    eax,eax
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011494:	84 c9                	test   cl,cl
c0011496:	0f 84 bb 00 00 00    	je     c0011557 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001149c:	3d c7 00 00 00       	cmp    eax,0xc7
c00114a1:	0f 8f b0 00 00 00    	jg     c0011557 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114a7:	80 f9 0a             	cmp    cl,0xa
c00114aa:	0f 85 98 00 00 00    	jne    c0011548 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114b0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114b5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114b9:	a8 df                	test   al,0xdf
c00114bb:	0f 94 c1             	sete   cl
c00114be:	3c 23                	cmp    al,0x23
c00114c0:	0f 94 c2             	sete   dl
c00114c3:	08 d1                	or     cl,dl
c00114c5:	75 4a                	jne    c0011511 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114c7:	8d 50 f7             	lea    edx,[eax-0x9]
c00114ca:	80 fa 01             	cmp    dl,0x1
c00114cd:	76 42                	jbe    c0011511 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114cf:	3c 5b                	cmp    al,0x5b
c00114d1:	75 42                	jne    c0011515 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114d3:	80 fb 40             	cmp    bl,0x40
c00114d6:	75 39                	jne    c0011511 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114df:	52                   	push   edx
c00114e0:	e8 5b f0 fe ff       	call   c0000540 <strlen>
c00114e5:	83 c4 10             	add    esp,0x10
c00114e8:	83 f8 3f             	cmp    eax,0x3f
c00114eb:	77 6a                	ja     c0011557 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ed:	50                   	push   eax
c00114ee:	50                   	push   eax
c00114ef:	8d 54 24 61          	lea    edx,[esp+0x61]
c00114f3:	52                   	push   edx
c00114f4:	8d 54 24 24          	lea    edx,[esp+0x24]
c00114f8:	52                   	push   edx
c00114f9:	e8 02 f1 fe ff       	call   c0000600 <strcpy>
c00114fe:	58                   	pop    eax
c00114ff:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011503:	52                   	push   edx
c0011504:	e8 37 f0 fe ff       	call   c0000540 <strlen>
c0011509:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	31 d2                	xor    edx,edx
c0011513:	eb 3a                	jmp    c001154f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011515:	80 fb 40             	cmp    bl,0x40
c0011518:	74 06                	je     c0011520 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001151a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001151e:	eb 20                	jmp    c0011540 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011520:	50                   	push   eax
c0011521:	50                   	push   eax
c0011522:	55                   	push   ebp
c0011523:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011527:	50                   	push   eax
c0011528:	e8 b3 f1 fe ff       	call   c00006e0 <strcmp>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	85 c0                	test   eax,eax
c0011532:	75 dd                	jne    c0011511 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011534:	eb e4                	jmp    c001151a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011536:	8d 50 01             	lea    edx,[eax+0x1]
c0011539:	80 f9 3d             	cmp    cl,0x3d
c001153c:	74 1d                	je     c001155b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001153e:	89 d0                	mov    eax,edx
c0011540:	8a 08                	mov    cl,BYTE PTR [eax]
c0011542:	84 c9                	test   cl,cl
c0011544:	75 f0                	jne    c0011536 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011546:	eb 0f                	jmp    c0011557 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011548:	8d 50 01             	lea    edx,[eax+0x1]
c001154b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001154f:	47                   	inc    edi
c0011550:	89 d0                	mov    eax,edx
c0011552:	e9 3b ff ff ff       	jmp    c0011492 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011557:	31 c0                	xor    eax,eax
c0011559:	eb 33                	jmp    c001158e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001155b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001155f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011562:	50                   	push   eax
c0011563:	50                   	push   eax
c0011564:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011568:	50                   	push   eax
c0011569:	56                   	push   esi
c001156a:	e8 71 f1 fe ff       	call   c00006e0 <strcmp>
c001156f:	83 c4 10             	add    esp,0x10
c0011572:	85 c0                	test   eax,eax
c0011574:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011578:	75 97                	jne    c0011511 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001157a:	51                   	push   ecx
c001157b:	51                   	push   ecx
c001157c:	52                   	push   edx
c001157d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011584:	e8 77 f0 fe ff       	call   c0000600 <strcpy>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	b0 01                	mov    al,0x1
c001158e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011594:	5b                   	pop    ebx
c0011595:	5e                   	pop    esi
c0011596:	5f                   	pop    edi
c0011597:	5d                   	pop    ebp
c0011598:	c3                   	ret    

c0011599 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011599:	57                   	push   edi
c001159a:	56                   	push   esi
c001159b:	53                   	push   ebx
c001159c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115a2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115a9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115b0:	53                   	push   ebx
c00115b1:	e8 8a ef fe ff       	call   c0000540 <strlen>
c00115b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00115b9:	89 c7                	mov    edi,eax
c00115bb:	e8 80 ef fe ff       	call   c0000540 <strlen>
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115c7:	3d ff 00 00 00       	cmp    eax,0xff
c00115cc:	0f 87 d3 00 00 00    	ja     c00116a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115d2:	57                   	push   edi
c00115d3:	57                   	push   edi
c00115d4:	56                   	push   esi
c00115d5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115d9:	56                   	push   esi
c00115da:	e8 21 f0 fe ff       	call   c0000600 <strcpy>
c00115df:	58                   	pop    eax
c00115e0:	5a                   	pop    edx
c00115e1:	68 8a ec 01 c0       	push   0xc001ec8a
c00115e6:	56                   	push   esi
c00115e7:	e8 d4 f1 fe ff       	call   c00007c0 <strcat>
c00115ec:	59                   	pop    ecx
c00115ed:	5f                   	pop    edi
c00115ee:	53                   	push   ebx
c00115ef:	56                   	push   esi
c00115f0:	e8 cb f1 fe ff       	call   c00007c0 <strcat>
c00115f5:	58                   	pop    eax
c00115f6:	5a                   	pop    edx
c00115f7:	68 e1 e9 01 c0       	push   0xc001e9e1
c00115fc:	56                   	push   esi
c00115fd:	e8 be f1 fe ff       	call   c00007c0 <strcat>
c0011602:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011609:	e8 ab 61 ff ff       	call   c00077b9 <malloc>
c001160e:	83 c4 0c             	add    esp,0xc
c0011611:	89 c3                	mov    ebx,eax
c0011613:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c0011619:	56                   	push   esi
c001161a:	50                   	push   eax
c001161b:	e8 2e 94 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	85 db                	test   ebx,ebx
c0011625:	74 7e                	je     c00116a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011627:	51                   	push   ecx
c0011628:	51                   	push   ecx
c0011629:	6a 01                	push   0x1
c001162b:	53                   	push   ebx
c001162c:	e8 dd 94 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	85 c0                	test   eax,eax
c0011636:	74 08                	je     c0011640 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001163d:	53                   	push   ebx
c001163e:	eb 5f                	jmp    c001169f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011640:	52                   	push   edx
c0011641:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011645:	50                   	push   eax
c0011646:	8d 44 24 20          	lea    eax,[esp+0x20]
c001164a:	50                   	push   eax
c001164b:	53                   	push   ebx
c001164c:	e8 69 97 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0011651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	89 c1                	mov    ecx,eax
c001165a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001165e:	74 31                	je     c0011691 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	50                   	push   eax
c0011664:	e8 50 61 ff ff       	call   c00077b9 <malloc>
c0011669:	89 c6                	mov    esi,eax
c001166b:	58                   	pop    eax
c001166c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001166e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011672:	52                   	push   edx
c0011673:	56                   	push   esi
c0011674:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011678:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001167c:	53                   	push   ebx
c001167d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011680:	83 c4 20             	add    esp,0x20
c0011683:	85 c0                	test   eax,eax
c0011685:	75 0a                	jne    c0011691 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001168b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001168f:	74 18                	je     c00116a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011691:	83 ec 0c             	sub    esp,0xc
c0011694:	53                   	push   ebx
c0011695:	e8 d2 94 ff ff       	call   c000ab6c <File::close()>
c001169a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001169f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	31 c0                	xor    eax,eax
c00116a7:	eb 3b                	jmp    c00116e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116a9:	83 ec 0c             	sub    esp,0xc
c00116ac:	53                   	push   ebx
c00116ad:	e8 ba 94 ff ff       	call   c000ab6c <File::close()>
c00116b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ba:	83 c4 0c             	add    esp,0xc
c00116bd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116c4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116cb:	56                   	push   esi
c00116cc:	e8 70 fd ff ff       	call   c0011441 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00116d4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116d8:	e8 ec 60 ff ff       	call   c00077c9 <free>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116e4:	81 c4 20 01 00 00    	add    esp,0x120
c00116ea:	5b                   	pop    ebx
c00116eb:	5e                   	pop    esi
c00116ec:	5f                   	pop    edi
c00116ed:	c3                   	ret    

c00116ee <Reg::getLine(char*, char*, char*)>:
c00116ee:	57                   	push   edi
c00116ef:	56                   	push   esi
c00116f0:	53                   	push   ebx
c00116f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00116f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00116fd:	57                   	push   edi
c00116fe:	56                   	push   esi
c00116ff:	53                   	push   ebx
c0011700:	68 e6 e9 01 c0       	push   0xc001e9e6
c0011705:	e8 8f fe ff ff       	call   c0011599 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	84 c0                	test   al,al
c001170f:	75 10                	jne    c0011721 <Reg::getLine(char*, char*, char*)+0x33>
c0011711:	57                   	push   edi
c0011712:	56                   	push   esi
c0011713:	53                   	push   ebx
c0011714:	68 0b ea 01 c0       	push   0xc001ea0b
c0011719:	e8 7b fe ff ff       	call   c0011599 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	5b                   	pop    ebx
c0011722:	5e                   	pop    esi
c0011723:	5f                   	pop    edi
c0011724:	c3                   	ret    

c0011725 <Reg::readInt(char*, char*, int*)>:
c0011725:	55                   	push   ebp
c0011726:	57                   	push   edi
c0011727:	56                   	push   esi
c0011728:	53                   	push   ebx
c0011729:	81 ec f0 00 00 00    	sub    esp,0xf0
c001172f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011733:	57                   	push   edi
c0011734:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001173b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011742:	e8 a7 ff ff ff       	call   c00116ee <Reg::getLine(char*, char*, char*)>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	84 c0                	test   al,al
c001174c:	0f 84 b3 00 00 00    	je     c0011805 <Reg::readInt(char*, char*, int*)+0xe0>
c0011752:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011756:	80 fa 2b             	cmp    dl,0x2b
c0011759:	74 0c                	je     c0011767 <Reg::readInt(char*, char*, int*)+0x42>
c001175b:	80 fa 2d             	cmp    dl,0x2d
c001175e:	75 0e                	jne    c001176e <Reg::readInt(char*, char*, int*)+0x49>
c0011760:	ba 01 00 00 00       	mov    edx,0x1
c0011765:	eb 0b                	jmp    c0011772 <Reg::readInt(char*, char*, int*)+0x4d>
c0011767:	ba 01 00 00 00       	mov    edx,0x1
c001176c:	eb 02                	jmp    c0011770 <Reg::readInt(char*, char*, int*)+0x4b>
c001176e:	31 d2                	xor    edx,edx
c0011770:	31 c0                	xor    eax,eax
c0011772:	be 0a 00 00 00       	mov    esi,0xa
c0011777:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001177c:	75 20                	jne    c001179e <Reg::readInt(char*, char*, int*)+0x79>
c001177e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011782:	80 f9 78             	cmp    cl,0x78
c0011785:	75 0a                	jne    c0011791 <Reg::readInt(char*, char*, int*)+0x6c>
c0011787:	83 c2 02             	add    edx,0x2
c001178a:	be 10 00 00 00       	mov    esi,0x10
c001178f:	eb 0d                	jmp    c001179e <Reg::readInt(char*, char*, int*)+0x79>
c0011791:	80 f9 62             	cmp    cl,0x62
c0011794:	75 08                	jne    c001179e <Reg::readInt(char*, char*, int*)+0x79>
c0011796:	83 c2 02             	add    edx,0x2
c0011799:	be 02 00 00 00       	mov    esi,0x2
c001179e:	01 d7                	add    edi,edx
c00117a0:	31 d2                	xor    edx,edx
c00117a2:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117a4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117a8:	80 fb 0d             	cmp    bl,0xd
c00117ab:	0f 94 c3             	sete   bl
c00117ae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117b3:	0f 94 c1             	sete   cl
c00117b6:	08 cb                	or     bl,cl
c00117b8:	75 3a                	jne    c00117f4 <Reg::readInt(char*, char*, int*)+0xcf>
c00117ba:	0f af d6             	imul   edx,esi
c00117bd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117c2:	83 fe 10             	cmp    esi,0x10
c00117c5:	75 26                	jne    c00117ed <Reg::readInt(char*, char*, int*)+0xc8>
c00117c7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117cb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117ce:	89 e9                	mov    ecx,ebp
c00117d0:	80 f9 05             	cmp    cl,0x5
c00117d3:	77 06                	ja     c00117db <Reg::readInt(char*, char*, int*)+0xb6>
c00117d5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117d9:	eb 16                	jmp    c00117f1 <Reg::readInt(char*, char*, int*)+0xcc>
c00117db:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117df:	83 e9 61             	sub    ecx,0x61
c00117e2:	80 f9 05             	cmp    cl,0x5
c00117e5:	77 06                	ja     c00117ed <Reg::readInt(char*, char*, int*)+0xc8>
c00117e7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00117eb:	eb 04                	jmp    c00117f1 <Reg::readInt(char*, char*, int*)+0xcc>
c00117ed:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00117f1:	47                   	inc    edi
c00117f2:	eb ae                	jmp    c00117a2 <Reg::readInt(char*, char*, int*)+0x7d>
c00117f4:	84 c0                	test   al,al
c00117f6:	74 02                	je     c00117fa <Reg::readInt(char*, char*, int*)+0xd5>
c00117f8:	f7 da                	neg    edx
c00117fa:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011801:	89 10                	mov    DWORD PTR [eax],edx
c0011803:	88 d8                	mov    al,bl
c0011805:	81 c4 ec 00 00 00    	add    esp,0xec
c001180b:	5b                   	pop    ebx
c001180c:	5e                   	pop    esi
c001180d:	5f                   	pop    edi
c001180e:	5d                   	pop    ebp
c001180f:	c3                   	ret    

c0011810 <Reg::readString(char*, char*, char*, int)>:
c0011810:	57                   	push   edi
c0011811:	56                   	push   esi
c0011812:	53                   	push   ebx
c0011813:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011819:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011820:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011824:	57                   	push   edi
c0011825:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001182c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011833:	e8 b6 fe ff ff       	call   c00116ee <Reg::getLine(char*, char*, char*)>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	89 c6                	mov    esi,eax
c001183d:	84 c0                	test   al,al
c001183f:	74 44                	je     c0011885 <Reg::readString(char*, char*, char*, int)+0x75>
c0011841:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011848:	31 c0                	xor    eax,eax
c001184a:	4a                   	dec    edx
c001184b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001184e:	84 c9                	test   cl,cl
c0011850:	74 0f                	je     c0011861 <Reg::readString(char*, char*, char*, int)+0x51>
c0011852:	39 c2                	cmp    edx,eax
c0011854:	7e 0b                	jle    c0011861 <Reg::readString(char*, char*, char*, int)+0x51>
c0011856:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011859:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001185e:	40                   	inc    eax
c001185f:	eb ea                	jmp    c001184b <Reg::readString(char*, char*, char*, int)+0x3b>
c0011861:	83 ec 0c             	sub    esp,0xc
c0011864:	53                   	push   ebx
c0011865:	e8 d6 ec fe ff       	call   c0000540 <strlen>
c001186a:	83 c4 10             	add    esp,0x10
c001186d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011872:	75 11                	jne    c0011885 <Reg::readString(char*, char*, char*, int)+0x75>
c0011874:	83 ec 0c             	sub    esp,0xc
c0011877:	53                   	push   ebx
c0011878:	e8 c3 ec fe ff       	call   c0000540 <strlen>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011885:	81 c4 d0 00 00 00    	add    esp,0xd0
c001188b:	89 f0                	mov    eax,esi
c001188d:	5b                   	pop    ebx
c001188e:	5e                   	pop    esi
c001188f:	5f                   	pop    edi
c0011890:	c3                   	ret    

c0011891 <Reg::readBool(char*, char*, bool*)>:
c0011891:	83 ec 20             	sub    esp,0x20
c0011894:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011898:	50                   	push   eax
c0011899:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001189d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118a1:	e8 7f fe ff ff       	call   c0011725 <Reg::readInt(char*, char*, int*)>
c00118a6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118af:	0f 95 02             	setne  BYTE PTR [edx]
c00118b2:	83 c4 2c             	add    esp,0x2c
c00118b5:	c3                   	ret    

c00118b6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118b6:	53                   	push   ebx
c00118b7:	83 ec 1c             	sub    esp,0x1c
c00118ba:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118be:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118c2:	50                   	push   eax
c00118c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118cb:	e8 c1 ff ff ff       	call   c0011891 <Reg::readBool(char*, char*, bool*)>
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	84 c0                	test   al,al
c00118d5:	74 04                	je     c00118db <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118d7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118db:	88 d8                	mov    al,bl
c00118dd:	83 c4 18             	add    esp,0x18
c00118e0:	5b                   	pop    ebx
c00118e1:	c3                   	ret    

c00118e2 <Reg::readIntWithDefault(char*, char*, int)>:
c00118e2:	53                   	push   ebx
c00118e3:	83 ec 1c             	sub    esp,0x1c
c00118e6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00118ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118ee:	50                   	push   eax
c00118ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f7:	e8 29 fe ff ff       	call   c0011725 <Reg::readInt(char*, char*, int*)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	84 c0                	test   al,al
c0011901:	74 04                	je     c0011907 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011903:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011907:	89 d8                	mov    eax,ebx
c0011909:	83 c4 18             	add    esp,0x18
c001190c:	5b                   	pop    ebx
c001190d:	c3                   	ret    

c001190e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001190e:	57                   	push   edi
c001190f:	56                   	push   esi
c0011910:	56                   	push   esi
c0011911:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011915:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011919:	56                   	push   esi
c001191a:	57                   	push   edi
c001191b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011923:	e8 e8 fe ff ff       	call   c0011810 <Reg::readString(char*, char*, char*, int)>
c0011928:	83 c4 10             	add    esp,0x10
c001192b:	84 c0                	test   al,al
c001192d:	75 1a                	jne    c0011949 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001192f:	51                   	push   ecx
c0011930:	56                   	push   esi
c0011931:	6a 00                	push   0x0
c0011933:	57                   	push   edi
c0011934:	e8 97 eb fe ff       	call   c00004d0 <memset>
c0011939:	8d 4e ff             	lea    ecx,[esi-0x1]
c001193c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011940:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011949:	89 f8                	mov    eax,edi
c001194b:	5a                   	pop    edx
c001194c:	5e                   	pop    esi
c001194d:	5f                   	pop    edi
c001194e:	c3                   	ret    

c001194f <SysEject(regs*)>:
c001194f:	83 ec 0c             	sub    esp,0xc
c0011952:	83 ca ff             	or     edx,0xffffffff
c0011955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011959:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001195c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011961:	83 e9 41             	sub    ecx,0x41
c0011964:	83 f9 19             	cmp    ecx,0x19
c0011967:	77 18                	ja     c0011981 <SysEject(regs*)+0x32>
c0011969:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c0011970:	85 c9                	test   ecx,ecx
c0011972:	74 0d                	je     c0011981 <SysEject(regs*)+0x32>
c0011974:	83 ec 0c             	sub    esp,0xc
c0011977:	51                   	push   ecx
c0011978:	e8 df b1 ff ff       	call   c000cb5c <LogicalDisk::eject()>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	99                   	cdq    
c0011981:	83 c4 0c             	add    esp,0xc
c0011984:	c3                   	ret    

c0011985 <SysExit(regs*)>:
c0011985:	83 ec 18             	sub    esp,0x18
c0011988:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001198c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001198f:	e8 b4 27 00 00       	call   c0014148 <terminateTask(int)>
c0011994:	83 c8 ff             	or     eax,0xffffffff
c0011997:	83 c4 1c             	add    esp,0x1c
c001199a:	89 c2                	mov    edx,eax
c001199c:	c3                   	ret    

c001199d <SysGetCwd(regs*)>:
c001199d:	83 ec 10             	sub    esp,0x10
c00119a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119a4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119a7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119af:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119b2:	e8 99 8e ff ff       	call   c000a850 <Fs::getcwd(Process*, char*, int)>
c00119b7:	83 c4 1c             	add    esp,0x1c
c00119ba:	99                   	cdq    
c00119bb:	c3                   	ret    

c00119bc <SysGetPID(regs*)>:
c00119bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c6:	99                   	cdq    
c00119c7:	c3                   	ret    

c00119c8 <SysGetRAMData(regs*)>:
c00119c8:	8b 0d 68 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c68
c00119ce:	69 05 64 0c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020c64,0xc8
c00119d8:	99                   	cdq    
c00119d9:	f7 f9                	idiv   ecx
c00119db:	c1 e0 18             	shl    eax,0x18
c00119de:	09 c8                	or     eax,ecx
c00119e0:	99                   	cdq    
c00119e1:	c3                   	ret    

c00119e2 <SysGetVGAPtr(regs*)>:
c00119e2:	55                   	push   ebp
c00119e3:	57                   	push   edi
c00119e4:	56                   	push   esi
c00119e5:	53                   	push   ebx
c00119e6:	83 ec 18             	sub    esp,0x18
c00119e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00119f0:	e8 53 22 00 00       	call   c0013c48 <Thr::processFromPID(int)>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	89 c1                	mov    ecx,eax
c00119fa:	b8 01 00 00 00       	mov    eax,0x1
c00119ff:	85 c9                	test   ecx,ecx
c0011a01:	74 57                	je     c0011a5a <SysGetVGAPtr(regs*)+0x78>
c0011a03:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a09:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a0d:	74 0c                	je     c0011a1b <SysGetVGAPtr(regs*)+0x39>
c0011a0f:	83 ec 0c             	sub    esp,0xc
c0011a12:	55                   	push   ebp
c0011a13:	e8 df 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a1e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a21:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a28:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a2e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a37:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a3a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a40:	50                   	push   eax
c0011a41:	50                   	push   eax
c0011a42:	68 26 ea 01 c0       	push   0xc001ea26
c0011a47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a4a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a4f:	50                   	push   eax
c0011a50:	e8 ab eb fe ff       	call   c0000600 <strcpy>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	31 c0                	xor    eax,eax
c0011a5a:	83 c4 0c             	add    esp,0xc
c0011a5d:	31 d2                	xor    edx,edx
c0011a5f:	5b                   	pop    ebx
c0011a60:	5e                   	pop    esi
c0011a61:	5f                   	pop    edi
c0011a62:	5d                   	pop    ebp
c0011a63:	c3                   	ret    

c0011a64 <SysLoadDLL(regs*)>:
c0011a64:	56                   	push   esi
c0011a65:	53                   	push   ebx
c0011a66:	31 d2                	xor    edx,edx
c0011a68:	51                   	push   ecx
c0011a69:	b8 01 00 00 00       	mov    eax,0x1
c0011a6e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a72:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a76:	0f 84 8c 00 00 00    	je     c0011b08 <SysLoadDLL(regs*)+0xa4>
c0011a7c:	83 ec 0c             	sub    esp,0xc
c0011a7f:	68 14 01 00 00       	push   0x114
c0011a84:	e8 30 5d ff ff       	call   c00077b9 <malloc>
c0011a89:	83 c4 0c             	add    esp,0xc
c0011a8c:	89 c3                	mov    ebx,eax
c0011a8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a96:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011a99:	53                   	push   ebx
c0011a9a:	e8 af 8f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	31 d2                	xor    edx,edx
c0011aa4:	b8 02 00 00 00       	mov    eax,0x2
c0011aa9:	85 db                	test   ebx,ebx
c0011aab:	74 5b                	je     c0011b08 <SysLoadDLL(regs*)+0xa4>
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	53                   	push   ebx
c0011ab1:	e8 c6 92 ff ff       	call   c000ad7c <File::exists()>
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	84 c0                	test   al,al
c0011abb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011abd:	75 11                	jne    c0011ad0 <SysLoadDLL(regs*)+0x6c>
c0011abf:	83 ec 0c             	sub    esp,0xc
c0011ac2:	53                   	push   ebx
c0011ac3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	b8 03 00 00 00       	mov    eax,0x3
c0011ace:	eb 36                	jmp    c0011b06 <SysLoadDLL(regs*)+0xa2>
c0011ad0:	83 ec 0c             	sub    esp,0xc
c0011ad3:	53                   	push   ebx
c0011ad4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad7:	58                   	pop    eax
c0011ad8:	5a                   	pop    edx
c0011ad9:	6a 00                	push   0x0
c0011adb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ade:	e8 86 12 00 00       	call   c0012d69 <Thr::loadDLL(char const*, bool)>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	89 c1                	mov    ecx,eax
c0011ae8:	31 d2                	xor    edx,edx
c0011aea:	b8 04 00 00 00       	mov    eax,0x4
c0011aef:	85 c9                	test   ecx,ecx
c0011af1:	74 15                	je     c0011b08 <SysLoadDLL(regs*)+0xa4>
c0011af3:	53                   	push   ebx
c0011af4:	53                   	push   ebx
c0011af5:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0011afb:	51                   	push   ecx
c0011afc:	e8 99 14 00 00       	call   c0012f9a <Thr::executeDLL(unsigned long, void*)>
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	31 c0                	xor    eax,eax
c0011b06:	31 d2                	xor    edx,edx
c0011b08:	59                   	pop    ecx
c0011b09:	5b                   	pop    ebx
c0011b0a:	5e                   	pop    esi
c0011b0b:	c3                   	ret    

c0011b0c <SysRead(regs*)>:
c0011b0c:	57                   	push   edi
c0011b0d:	56                   	push   esi
c0011b0e:	53                   	push   ebx
c0011b0f:	83 ec 10             	sub    esp,0x10
c0011b12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b19:	83 f8 02             	cmp    eax,0x2
c0011b1c:	77 10                	ja     c0011b2e <SysRead(regs*)+0x22>
c0011b1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b26:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b2c:	eb 0e                	jmp    c0011b3c <SysRead(regs*)+0x30>
c0011b2e:	83 ec 0c             	sub    esp,0xc
c0011b31:	50                   	push   eax
c0011b32:	e8 f8 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b37:	83 c4 10             	add    esp,0x10
c0011b3a:	89 c1                	mov    ecx,eax
c0011b3c:	83 c8 ff             	or     eax,0xffffffff
c0011b3f:	85 c9                	test   ecx,ecx
c0011b41:	89 c2                	mov    edx,eax
c0011b43:	74 28                	je     c0011b6d <SysRead(regs*)+0x61>
c0011b45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b4d:	31 ff                	xor    edi,edi
c0011b4f:	83 ec 0c             	sub    esp,0xc
c0011b52:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b54:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b58:	52                   	push   edx
c0011b59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b5c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b5f:	57                   	push   edi
c0011b60:	56                   	push   esi
c0011b61:	51                   	push   ecx
c0011b62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b69:	83 c4 20             	add    esp,0x20
c0011b6c:	99                   	cdq    
c0011b6d:	83 c4 10             	add    esp,0x10
c0011b70:	5b                   	pop    ebx
c0011b71:	5e                   	pop    esi
c0011b72:	5f                   	pop    edi
c0011b73:	c3                   	ret    

c0011b74 <SysRegisterSignal(regs*)>:
c0011b74:	83 ec 18             	sub    esp,0x18
c0011b77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b7b:	6a 00                	push   0x0
c0011b7d:	6a 00                	push   0x0
c0011b7f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b82:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b8d:	05 20 07 00 00       	add    eax,0x720
c0011b92:	50                   	push   eax
c0011b93:	e8 09 e9 ff ff       	call   c00104a1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011b98:	83 c4 2c             	add    esp,0x2c
c0011b9b:	99                   	cdq    
c0011b9c:	c3                   	ret    

c0011b9d <SysSbrk(regs*)>:
c0011b9d:	56                   	push   esi
c0011b9e:	53                   	push   ebx
c0011b9f:	83 ec 0c             	sub    esp,0xc
c0011ba2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ba6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ba9:	68 30 ea 01 c0       	push   0xc001ea30
c0011bae:	e8 25 89 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb8:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bbe:	83 c4 10             	add    esp,0x10
c0011bc1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bc7:	85 db                	test   ebx,ebx
c0011bc9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bcc:	74 02                	je     c0011bd0 <SysSbrk(regs*)+0x33>
c0011bce:	79 06                	jns    c0011bd6 <SysSbrk(regs*)+0x39>
c0011bd0:	89 f0                	mov    eax,esi
c0011bd2:	31 d2                	xor    edx,edx
c0011bd4:	eb 2a                	jmp    c0011c00 <SysSbrk(regs*)+0x63>
c0011bd6:	83 c8 ff             	or     eax,0xffffffff
c0011bd9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011bdf:	89 c2                	mov    edx,eax
c0011be1:	77 1d                	ja     c0011c00 <SysSbrk(regs*)+0x63>
c0011be3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011be9:	50                   	push   eax
c0011bea:	c1 ea 0c             	shr    edx,0xc
c0011bed:	68 07 0c 00 00       	push   0xc07
c0011bf2:	52                   	push   edx
c0011bf3:	51                   	push   ecx
c0011bf4:	e8 25 7e ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0011bf9:	89 f0                	mov    eax,esi
c0011bfb:	31 d2                	xor    edx,edx
c0011bfd:	83 c4 10             	add    esp,0x10
c0011c00:	59                   	pop    ecx
c0011c01:	5b                   	pop    ebx
c0011c02:	5e                   	pop    esi
c0011c03:	c3                   	ret    

c0011c04 <SysSetCwd(regs*)>:
c0011c04:	83 ec 14             	sub    esp,0x14
c0011c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c0b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c13:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c16:	e8 00 92 ff ff       	call   c000ae1b <Fs::setcwd(Process*, char*)>
c0011c1b:	83 c4 1c             	add    esp,0x1c
c0011c1e:	99                   	cdq    
c0011c1f:	c3                   	ret    

c0011c20 <SysSetTime(regs*)>:
c0011c20:	55                   	push   ebp
c0011c21:	31 c9                	xor    ecx,ecx
c0011c23:	57                   	push   edi
c0011c24:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c29:	56                   	push   esi
c0011c2a:	53                   	push   ebx
c0011c2b:	31 db                	xor    ebx,ebx
c0011c2d:	83 ec 10             	sub    esp,0x10
c0011c30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c34:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c37:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c3a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c3d:	89 c2                	mov    edx,eax
c0011c3f:	66 81 ef 6c 07       	sub    di,0x76c
c0011c44:	83 e2 1f             	and    edx,0x1f
c0011c47:	c1 e7 10             	shl    edi,0x10
c0011c4a:	42                   	inc    edx
c0011c4b:	c1 e8 05             	shr    eax,0x5
c0011c4e:	88 d1                	mov    cl,dl
c0011c50:	31 d2                	xor    edx,edx
c0011c52:	f7 f5                	div    ebp
c0011c54:	89 dd                	mov    ebp,ebx
c0011c56:	88 d5                	mov    ch,dl
c0011c58:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c5e:	0f b7 c1             	movzx  eax,cx
c0011c61:	31 d2                	xor    edx,edx
c0011c63:	09 f8                	or     eax,edi
c0011c65:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c6a:	89 c1                	mov    ecx,eax
c0011c6c:	89 f0                	mov    eax,esi
c0011c6e:	f7 f7                	div    edi
c0011c70:	c1 e2 10             	shl    edx,0x10
c0011c73:	09 d5                	or     ebp,edx
c0011c75:	31 d2                	xor    edx,edx
c0011c77:	89 eb                	mov    ebx,ebp
c0011c79:	f7 f7                	div    edi
c0011c7b:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c80:	88 d7                	mov    bh,dl
c0011c82:	89 f0                	mov    eax,esi
c0011c84:	31 d2                	xor    edx,edx
c0011c86:	f7 f7                	div    edi
c0011c88:	bf 18 00 00 00       	mov    edi,0x18
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	f7 f7                	div    edi
c0011c91:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0011c96:	88 d3                	mov    bl,dl
c0011c98:	53                   	push   ebx
c0011c99:	51                   	push   ecx
c0011c9a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011ca0:	e8 87 99 ff ff       	call   c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011ca5:	83 c4 1c             	add    esp,0x1c
c0011ca8:	83 f0 01             	xor    eax,0x1
c0011cab:	5b                   	pop    ebx
c0011cac:	0f b6 c0             	movzx  eax,al
c0011caf:	5e                   	pop    esi
c0011cb0:	31 d2                	xor    edx,edx
c0011cb2:	5f                   	pop    edi
c0011cb3:	5d                   	pop    ebp
c0011cb4:	c3                   	ret    

c0011cb5 <SysTimezone(regs*)>:
c0011cb5:	53                   	push   ebx
c0011cb6:	83 ec 08             	sub    esp,0x8
c0011cb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cbd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cc1:	75 17                	jne    c0011cda <SysTimezone(regs*)+0x25>
c0011cc3:	83 ec 0c             	sub    esp,0xc
c0011cc6:	68 3c ea 01 c0       	push   0xc001ea3c
c0011ccb:	e8 08 88 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011cd0:	83 c8 ff             	or     eax,0xffffffff
c0011cd3:	83 c4 10             	add    esp,0x10
c0011cd6:	89 c2                	mov    edx,eax
c0011cd8:	eb 20                	jmp    c0011cfa <SysTimezone(regs*)+0x45>
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	68 51 ea 01 c0       	push   0xc001ea51
c0011ce2:	e8 f1 87 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011ce7:	58                   	pop    eax
c0011ce8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ceb:	e8 98 96 ff ff       	call   c000b388 <User::loadClockSettings(int)>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	b8 01 00 00 00       	mov    eax,0x1
c0011cf8:	31 d2                	xor    edx,edx
c0011cfa:	83 c4 08             	add    esp,0x8
c0011cfd:	5b                   	pop    ebx
c0011cfe:	c3                   	ret    

c0011cff <SysWrite(regs*)>:
c0011cff:	57                   	push   edi
c0011d00:	56                   	push   esi
c0011d01:	53                   	push   ebx
c0011d02:	83 ec 10             	sub    esp,0x10
c0011d05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d09:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d0c:	83 f8 02             	cmp    eax,0x2
c0011d0f:	77 10                	ja     c0011d21 <SysWrite(regs*)+0x22>
c0011d11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d19:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d1f:	eb 0e                	jmp    c0011d2f <SysWrite(regs*)+0x30>
c0011d21:	83 ec 0c             	sub    esp,0xc
c0011d24:	50                   	push   eax
c0011d25:	e8 05 74 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d2a:	83 c4 10             	add    esp,0x10
c0011d2d:	89 c1                	mov    ecx,eax
c0011d2f:	83 c8 ff             	or     eax,0xffffffff
c0011d32:	85 c9                	test   ecx,ecx
c0011d34:	89 c2                	mov    edx,eax
c0011d36:	74 28                	je     c0011d60 <SysWrite(regs*)+0x61>
c0011d38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d40:	31 ff                	xor    edi,edi
c0011d42:	83 ec 0c             	sub    esp,0xc
c0011d45:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d47:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d4b:	52                   	push   edx
c0011d4c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d4f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d52:	57                   	push   edi
c0011d53:	56                   	push   esi
c0011d54:	51                   	push   ecx
c0011d55:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d5c:	83 c4 20             	add    esp,0x20
c0011d5f:	99                   	cdq    
c0011d60:	83 c4 10             	add    esp,0x10
c0011d63:	5b                   	pop    ebx
c0011d64:	5e                   	pop    esi
c0011d65:	5f                   	pop    edi
c0011d66:	c3                   	ret    

c0011d67 <SysWsbe(regs*)>:
c0011d67:	57                   	push   edi
c0011d68:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d6d:	56                   	push   esi
c0011d6e:	be 90 ea 01 c0       	mov    esi,0xc001ea90
c0011d73:	53                   	push   ebx
c0011d74:	83 ec 30             	sub    esp,0x30
c0011d77:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d7b:	fc                   	cld    
c0011d7c:	83 ec 0c             	sub    esp,0xc
c0011d7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d81:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d8d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011d93:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d95:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011d98:	57                   	push   edi
c0011d99:	e8 a2 e7 fe ff       	call   c0000540 <strlen>
c0011d9e:	5a                   	pop    edx
c0011d9f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011da3:	52                   	push   edx
c0011da4:	31 d2                	xor    edx,edx
c0011da6:	57                   	push   edi
c0011da7:	52                   	push   edx
c0011da8:	50                   	push   eax
c0011da9:	56                   	push   esi
c0011daa:	ff d3                	call   ebx
c0011dac:	83 c4 14             	add    esp,0x14
c0011daf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011db3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011db6:	e8 8d 23 00 00       	call   c0014148 <terminateTask(int)>
c0011dbb:	83 c4 40             	add    esp,0x40
c0011dbe:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dc3:	5b                   	pop    ebx
c0011dc4:	31 d2                	xor    edx,edx
c0011dc6:	5e                   	pop    esi
c0011dc7:	5f                   	pop    edi
c0011dc8:	c3                   	ret    

c0011dc9 <SysYield(regs*)>:
c0011dc9:	83 ec 0c             	sub    esp,0xc
c0011dcc:	fa                   	cli    
c0011dcd:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0011dd3:	e8 4c 1a 00 00       	call   c0013824 <schedule()>
c0011dd8:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0011ddd:	48                   	dec    eax
c0011dde:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0011de3:	75 01                	jne    c0011de6 <SysYield(regs*)+0x1d>
c0011de5:	fb                   	sti    
c0011de6:	31 c0                	xor    eax,eax
c0011de8:	31 d2                	xor    edx,edx
c0011dea:	83 c4 0c             	add    esp,0xc
c0011ded:	c3                   	ret    

c0011dee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011dee:	55                   	push   ebp
c0011def:	57                   	push   edi
c0011df0:	56                   	push   esi
c0011df1:	53                   	push   ebx
c0011df2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011df8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e00:	0f 95 c2             	setne  dl
c0011e03:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e0b:	0f 94 c0             	sete   al
c0011e0e:	84 c2                	test   dl,al
c0011e10:	74 34                	je     c0011e46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e12:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e1d:	74 27                	je     c0011e46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e1f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e26:	05 00 10 00 00       	add    eax,0x1000
c0011e2b:	89 c1                	mov    ecx,eax
c0011e2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e32:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e38:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e3f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e46:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e4d:	83 ec 0c             	sub    esp,0xc
c0011e50:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e56:	6a 01                	push   0x1
c0011e58:	e8 28 74 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	89 c3                	mov    ebx,eax
c0011e62:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e68:	0f 86 25 01 00 00    	jbe    c0011f93 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e6e:	c1 ee 0c             	shr    esi,0xc
c0011e71:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e78:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e84:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e8f:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011e96:	29 ef                	sub    edi,ebp
c0011e98:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011e9c:	0f 83 f8 00 00 00    	jae    c0011f9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ea2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ea8:	76 05                	jbe    c0011eaf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eaa:	bf 00 10 00 00       	mov    edi,0x1000
c0011eaf:	83 ec 0c             	sub    esp,0xc
c0011eb2:	31 d2                	xor    edx,edx
c0011eb4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ebb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ebd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ec1:	50                   	push   eax
c0011ec2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ec6:	56                   	push   esi
c0011ec7:	52                   	push   edx
c0011ec8:	57                   	push   edi
c0011ec9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ed0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ed3:	83 c4 20             	add    esp,0x20
c0011ed6:	85 c0                	test   eax,eax
c0011ed8:	75 06                	jne    c0011ee0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011eda:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011ede:	74 13                	je     c0011ef3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	53                   	push   ebx
c0011ee4:	e8 cc 76 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ee9:	83 c4 10             	add    esp,0x10
c0011eec:	31 c0                	xor    eax,eax
c0011eee:	e9 7c 01 00 00       	jmp    c001206f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011ef3:	fa                   	cli    
c0011ef4:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0011efa:	e8 96 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011eff:	6a 07                	push   0x7
c0011f01:	89 c7                	mov    edi,eax
c0011f03:	53                   	push   ebx
c0011f04:	50                   	push   eax
c0011f05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f0d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f13:	e8 02 7a ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f18:	83 c4 0c             	add    esp,0xc
c0011f1b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f28:	6a 00                	push   0x0
c0011f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f32:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f38:	e8 4f 78 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011f3d:	58                   	pop    eax
c0011f3e:	5a                   	pop    edx
c0011f3f:	68 07 0c 00 00       	push   0xc07
c0011f44:	55                   	push   ebp
c0011f45:	57                   	push   edi
c0011f46:	89 df                	mov    edi,ebx
c0011f48:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f4f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f55:	6a 00                	push   0x0
c0011f57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f5f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f65:	e8 70 7d ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f6a:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f71:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0011f76:	83 c4 20             	add    esp,0x20
c0011f79:	48                   	dec    eax
c0011f7a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0011f7f:	85 c0                	test   eax,eax
c0011f81:	75 01                	jne    c0011f84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f83:	fb                   	sti    
c0011f84:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f8a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011f8e:	e9 f1 fe ff ff       	jmp    c0011e84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011f93:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f9a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fa1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fa7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fad:	0f 86 ae 00 00 00    	jbe    c0012061 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fb3:	fa                   	cli    
c0011fb4:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0011fba:	c1 ee 0c             	shr    esi,0xc
c0011fbd:	51                   	push   ecx
c0011fbe:	31 ff                	xor    edi,edi
c0011fc0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fcd:	6a 00                	push   0x0
c0011fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fdd:	e8 aa 77 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011fe2:	83 c4 10             	add    esp,0x10
c0011fe5:	e8 ab 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011fea:	47                   	inc    edi
c0011feb:	6a 07                	push   0x7
c0011fed:	53                   	push   ebx
c0011fee:	50                   	push   eax
c0011fef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ff3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011ff9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011ffc:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012002:	e8 13 79 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012007:	58                   	pop    eax
c0012008:	5a                   	pop    edx
c0012009:	68 07 0c 00 00       	push   0xc07
c001200e:	55                   	push   ebp
c001200f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012015:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012019:	50                   	push   eax
c001201a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012021:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012027:	6a 00                	push   0x0
c0012029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001202e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012031:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012037:	e8 9e 7c ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001203c:	83 c4 1c             	add    esp,0x1c
c001203f:	68 00 10 00 00       	push   0x1000
c0012044:	6a 00                	push   0x0
c0012046:	53                   	push   ebx
c0012047:	e8 84 e4 fe ff       	call   c00004d0 <memset>
c001204c:	83 c4 10             	add    esp,0x10
c001204f:	39 fe                	cmp    esi,edi
c0012051:	77 92                	ja     c0011fe5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012053:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0012058:	48                   	dec    eax
c0012059:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001205e:	75 01                	jne    c0012061 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012060:	fb                   	sti    
c0012061:	83 ec 0c             	sub    esp,0xc
c0012064:	53                   	push   ebx
c0012065:	e8 4b 75 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	b0 01                	mov    al,0x1
c001206f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012075:	5b                   	pop    ebx
c0012076:	5e                   	pop    esi
c0012077:	5f                   	pop    edi
c0012078:	5d                   	pop    ebp
c0012079:	c3                   	ret    

c001207a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001207a:	55                   	push   ebp
c001207b:	57                   	push   edi
c001207c:	56                   	push   esi
c001207d:	53                   	push   ebx
c001207e:	83 ec 48             	sub    esp,0x48
c0012081:	68 14 01 00 00       	push   0x114
c0012086:	e8 2e 57 ff ff       	call   c00077b9 <malloc>
c001208b:	83 c4 0c             	add    esp,0xc
c001208e:	89 c6                	mov    esi,eax
c0012090:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012094:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012098:	50                   	push   eax
c0012099:	e8 b0 89 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001209e:	58                   	pop    eax
c001209f:	5a                   	pop    edx
c00120a0:	6a 01                	push   0x1
c00120a2:	56                   	push   esi
c00120a3:	e8 66 8a ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	85 c0                	test   eax,eax
c00120ad:	0f 85 47 01 00 00    	jne    c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120b3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120bb:	83 ec 0c             	sub    esp,0xc
c00120be:	6a 34                	push   0x34
c00120c0:	e8 f4 56 ff ff       	call   c00077b9 <malloc>
c00120c5:	89 c3                	mov    ebx,eax
c00120c7:	58                   	pop    eax
c00120c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00120ca:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120ce:	57                   	push   edi
c00120cf:	53                   	push   ebx
c00120d0:	6a 00                	push   0x0
c00120d2:	6a 34                	push   0x34
c00120d4:	56                   	push   esi
c00120d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120d8:	83 c4 20             	add    esp,0x20
c00120db:	85 c0                	test   eax,eax
c00120dd:	0f 85 17 01 00 00    	jne    c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120e3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120e9:	0f 85 0b 01 00 00    	jne    c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120ef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120f2:	85 c0                	test   eax,eax
c00120f4:	0f 84 00 01 00 00    	je     c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120fa:	31 d2                	xor    edx,edx
c00120fc:	55                   	push   ebp
c00120fd:	52                   	push   edx
c00120fe:	50                   	push   eax
c00120ff:	56                   	push   esi
c0012100:	e8 c7 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012105:	83 c4 10             	add    esp,0x10
c0012108:	85 c0                	test   eax,eax
c001210a:	0f 85 ea 00 00 00    	jne    c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012110:	83 ec 0c             	sub    esp,0xc
c0012113:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012116:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001211a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001211e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012122:	0f af c2             	imul   eax,edx
c0012125:	50                   	push   eax
c0012126:	e8 8e 56 ff ff       	call   c00077b9 <malloc>
c001212b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001212d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012131:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012138:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001213c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012140:	0f af c2             	imul   eax,edx
c0012143:	99                   	cdq    
c0012144:	52                   	push   edx
c0012145:	50                   	push   eax
c0012146:	56                   	push   esi
c0012147:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001214a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001214d:	83 c4 20             	add    esp,0x20
c0012150:	85 c0                	test   eax,eax
c0012152:	0f 84 a2 00 00 00    	je     c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012158:	31 d2                	xor    edx,edx
c001215a:	51                   	push   ecx
c001215b:	52                   	push   edx
c001215c:	50                   	push   eax
c001215d:	56                   	push   esi
c001215e:	e8 69 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012163:	83 c4 10             	add    esp,0x10
c0012166:	85 c0                	test   eax,eax
c0012168:	0f 85 8c 00 00 00    	jne    c00121fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001216e:	83 ec 0c             	sub    esp,0xc
c0012171:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012175:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012179:	31 ed                	xor    ebp,ebp
c001217b:	0f af c2             	imul   eax,edx
c001217e:	50                   	push   eax
c001217f:	e8 35 56 ff ff       	call   c00077b9 <malloc>
c0012184:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001218a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001218d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012191:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012195:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012199:	0f af c2             	imul   eax,edx
c001219c:	99                   	cdq    
c001219d:	52                   	push   edx
c001219e:	50                   	push   eax
c001219f:	56                   	push   esi
c00121a0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121a3:	83 c4 20             	add    esp,0x20
c00121a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121ae:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121b2:	0f 86 80 00 00 00    	jbe    c0012238 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121b8:	0f b7 fd             	movzx  edi,bp
c00121bb:	c1 e7 05             	shl    edi,0x5
c00121be:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121c2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121c5:	75 6b                	jne    c0012232 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121c7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121ce:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121d5:	52                   	push   edx
c00121d6:	31 d2                	xor    edx,edx
c00121d8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121db:	52                   	push   edx
c00121dc:	50                   	push   eax
c00121dd:	56                   	push   esi
c00121de:	e8 e9 89 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	85 c0                	test   eax,eax
c00121e8:	74 17                	je     c0012201 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121ea:	83 ec 0c             	sub    esp,0xc
c00121ed:	68 bc ea 01 c0       	push   0xc001eabc
c00121f2:	e8 e1 82 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	31 c0                	xor    eax,eax
c00121fc:	e9 87 00 00 00       	jmp    c0012288 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012201:	83 ec 0c             	sub    esp,0xc
c0012204:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012207:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001220a:	50                   	push   eax
c001220b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001220f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012213:	56                   	push   esi
c0012214:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012218:	e8 d1 fb ff ff       	call   c0011dee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001221d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012221:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012225:	83 c4 20             	add    esp,0x20
c0012228:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001222c:	73 04                	jae    c0012232 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001222e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012232:	45                   	inc    ebp
c0012233:	e9 76 ff ff ff       	jmp    c00121ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012238:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001223c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012244:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001224a:	83 ec 0c             	sub    esp,0xc
c001224d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012253:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012258:	05 00 10 00 00       	add    eax,0x1000
c001225d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012264:	e8 60 55 ff ff       	call   c00077c9 <free>
c0012269:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001226c:	e8 58 55 ff ff       	call   c00077c9 <free>
c0012271:	58                   	pop    eax
c0012272:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012276:	e8 4e 55 ff ff       	call   c00077c9 <free>
c001227b:	89 34 24             	mov    DWORD PTR [esp],esi
c001227e:	e8 e9 88 ff ff       	call   c000ab6c <File::close()>
c0012283:	83 c4 10             	add    esp,0x10
c0012286:	b0 01                	mov    al,0x1
c0012288:	83 c4 3c             	add    esp,0x3c
c001228b:	5b                   	pop    ebx
c001228c:	5e                   	pop    esi
c001228d:	5f                   	pop    edi
c001228e:	5d                   	pop    ebp
c001228f:	c3                   	ret    

c0012290 <Thr::runtimeReferenceHelper()>:
c0012290:	83 ec 18             	sub    esp,0x18
c0012293:	68 c4 ea 01 c0       	push   0xc001eac4
c0012298:	e8 3b 82 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001229d:	fa                   	cli    
c001229e:	83 c4 10             	add    esp,0x10
c00122a1:	eb fe                	jmp    c00122a1 <Thr::runtimeReferenceHelper()+0x11>

c00122a3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122a3:	57                   	push   edi
c00122a4:	56                   	push   esi
c00122a5:	53                   	push   ebx
c00122a6:	31 db                	xor    ebx,ebx
c00122a8:	39 1d c0 3e 02 c0    	cmp    DWORD PTR ds:0xc0023ec0,ebx
c00122ae:	7e 3c                	jle    c00122ec <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122b0:	8b 34 9d 40 3e 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc1c0]
c00122b7:	31 ff                	xor    edi,edi
c00122b9:	39 3c 9d 40 3d 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc2c0],edi
c00122c0:	7e 27                	jle    c00122e9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122c2:	50                   	push   eax
c00122c3:	50                   	push   eax
c00122c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00122ca:	03 04 9d c0 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc240]
c00122d1:	50                   	push   eax
c00122d2:	e8 09 e4 fe ff       	call   c00006e0 <strcmp>
c00122d7:	83 c4 10             	add    esp,0x10
c00122da:	85 c0                	test   eax,eax
c00122dc:	75 05                	jne    c00122e3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122e1:	eb 0b                	jmp    c00122ee <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122e3:	83 c6 10             	add    esi,0x10
c00122e6:	47                   	inc    edi
c00122e7:	eb d0                	jmp    c00122b9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122e9:	43                   	inc    ebx
c00122ea:	eb bc                	jmp    c00122a8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00122ec:	31 c0                	xor    eax,eax
c00122ee:	5b                   	pop    ebx
c00122ef:	5e                   	pop    esi
c00122f0:	5f                   	pop    edi
c00122f1:	c3                   	ret    

c00122f2 <Thr::loadKernelSymbolTable(char const*)>:
c00122f2:	55                   	push   ebp
c00122f3:	57                   	push   edi
c00122f4:	56                   	push   esi
c00122f5:	53                   	push   ebx
c00122f6:	83 ec 68             	sub    esp,0x68
c00122f9:	8b 35 10 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023f10
c00122ff:	68 14 01 00 00       	push   0x114
c0012304:	e8 b0 54 ff ff       	call   c00077b9 <malloc>
c0012309:	83 c4 0c             	add    esp,0xc
c001230c:	89 c3                	mov    ebx,eax
c001230e:	56                   	push   esi
c001230f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012313:	50                   	push   eax
c0012314:	e8 35 87 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0012319:	5e                   	pop    esi
c001231a:	5f                   	pop    edi
c001231b:	6a 01                	push   0x1
c001231d:	53                   	push   ebx
c001231e:	e8 eb 87 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0012323:	83 c4 10             	add    esp,0x10
c0012326:	85 c0                	test   eax,eax
c0012328:	74 0a                	je     c0012334 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001232a:	83 ec 0c             	sub    esp,0xc
c001232d:	68 e6 ea 01 c0       	push   0xc001eae6
c0012332:	eb 34                	jmp    c0012368 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012334:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001233c:	83 ec 0c             	sub    esp,0xc
c001233f:	6a 34                	push   0x34
c0012341:	e8 73 54 ff ff       	call   c00077b9 <malloc>
c0012346:	59                   	pop    ecx
c0012347:	89 c7                	mov    edi,eax
c0012349:	8d 74 24 34          	lea    esi,[esp+0x34]
c001234d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001234f:	56                   	push   esi
c0012350:	57                   	push   edi
c0012351:	6a 00                	push   0x0
c0012353:	6a 34                	push   0x34
c0012355:	53                   	push   ebx
c0012356:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012359:	83 c4 20             	add    esp,0x20
c001235c:	85 c0                	test   eax,eax
c001235e:	74 17                	je     c0012377 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	68 fd ea 01 c0       	push   0xc001eafd
c0012368:	e8 b6 dd ff ff       	call   c0010123 <KePanic(char const*)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	31 c0                	xor    eax,eax
c0012372:	e9 31 02 00 00       	jmp    c00125a8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012377:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001237d:	75 e1                	jne    c0012360 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001237f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012382:	85 c0                	test   eax,eax
c0012384:	74 da                	je     c0012360 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012386:	52                   	push   edx
c0012387:	31 d2                	xor    edx,edx
c0012389:	52                   	push   edx
c001238a:	50                   	push   eax
c001238b:	53                   	push   ebx
c001238c:	e8 3b 88 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012391:	83 c4 10             	add    esp,0x10
c0012394:	85 c0                	test   eax,eax
c0012396:	75 c8                	jne    c0012360 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012398:	83 ec 0c             	sub    esp,0xc
c001239b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001239f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123a3:	31 ed                	xor    ebp,ebp
c00123a5:	0f af c2             	imul   eax,edx
c00123a8:	50                   	push   eax
c00123a9:	e8 0b 54 ff ff       	call   c00077b9 <malloc>
c00123ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00123b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123bb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123c3:	0f af c2             	imul   eax,edx
c00123c6:	99                   	cdq    
c00123c7:	52                   	push   edx
c00123c8:	50                   	push   eax
c00123c9:	53                   	push   ebx
c00123ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123cd:	83 c4 20             	add    esp,0x20
c00123d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123e0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00123f0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00123f4:	0f 86 aa 00 00 00    	jbe    c00124a4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00123fa:	0f b7 f5             	movzx  esi,bp
c00123fd:	6b f6 28             	imul   esi,esi,0x28
c0012400:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012404:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001240b:	50                   	push   eax
c001240c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012410:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012414:	8b 16                	mov    edx,DWORD PTR [esi]
c0012416:	6b c0 28             	imul   eax,eax,0x28
c0012419:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001241d:	89 d0                	mov    eax,edx
c001241f:	31 d2                	xor    edx,edx
c0012421:	52                   	push   edx
c0012422:	50                   	push   eax
c0012423:	53                   	push   ebx
c0012424:	e8 a3 87 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012429:	83 c4 0c             	add    esp,0xc
c001242c:	6a 20                	push   0x20
c001242e:	6a 00                	push   0x0
c0012430:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012434:	52                   	push   edx
c0012435:	e8 96 e0 fe ff       	call   c00004d0 <memset>
c001243a:	58                   	pop    eax
c001243b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001243d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012441:	51                   	push   ecx
c0012442:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012446:	52                   	push   edx
c0012447:	6a 00                	push   0x0
c0012449:	6a 1f                	push   0x1f
c001244b:	53                   	push   ebx
c001244c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001244f:	83 c4 18             	add    esp,0x18
c0012452:	68 14 eb 01 c0       	push   0xc001eb14
c0012457:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001245b:	52                   	push   edx
c001245c:	e8 7f e2 fe ff       	call   c00006e0 <strcmp>
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	85 c0                	test   eax,eax
c0012466:	75 0f                	jne    c0012477 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012468:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001246b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001246f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012477:	50                   	push   eax
c0012478:	50                   	push   eax
c0012479:	68 1c eb 01 c0       	push   0xc001eb1c
c001247e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012482:	50                   	push   eax
c0012483:	e8 58 e2 fe ff       	call   c00006e0 <strcmp>
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	85 c0                	test   eax,eax
c001248d:	75 0f                	jne    c001249e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001248f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012492:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012496:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001249a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001249e:	45                   	inc    ebp
c001249f:	e9 4c ff ff ff       	jmp    c00123f0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124a9:	75 10                	jne    c00124bb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124ab:	83 ec 0c             	sub    esp,0xc
c00124ae:	68 24 eb 01 c0       	push   0xc001eb24
c00124b3:	e8 6b dc ff ff       	call   c0010123 <KePanic(char const*)>
c00124b8:	83 c4 10             	add    esp,0x10
c00124bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124c0:	75 10                	jne    c00124d2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	68 24 eb 01 c0       	push   0xc001eb24
c00124ca:	e8 54 dc ff ff       	call   c0010123 <KePanic(char const*)>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	31 d2                	xor    edx,edx
c00124d4:	50                   	push   eax
c00124d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d9:	52                   	push   edx
c00124da:	50                   	push   eax
c00124db:	53                   	push   ebx
c00124dc:	e8 eb 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00124e1:	5a                   	pop    edx
c00124e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124e6:	e8 ce 52 ff ff       	call   c00077b9 <malloc>
c00124eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124f3:	31 c9                	xor    ecx,ecx
c00124f5:	5e                   	pop    esi
c00124f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124f8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00124fc:	55                   	push   ebp
c00124fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012501:	51                   	push   ecx
c0012502:	52                   	push   edx
c0012503:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012507:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001250b:	53                   	push   ebx
c001250c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001250f:	83 c4 14             	add    esp,0x14
c0012512:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012516:	e8 9e 52 ff ff       	call   c00077b9 <malloc>
c001251b:	89 c6                	mov    esi,eax
c001251d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001251f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012522:	56                   	push   esi
c0012523:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012527:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001252b:	51                   	push   ecx
c001252c:	52                   	push   edx
c001252d:	53                   	push   ebx
c001252e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012531:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012535:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c001253b:	83 c4 1c             	add    esp,0x1c
c001253e:	c1 e8 04             	shr    eax,0x4
c0012541:	89 04 95 40 3d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc2c0],eax
c0012548:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001254c:	31 d2                	xor    edx,edx
c001254e:	52                   	push   edx
c001254f:	50                   	push   eax
c0012550:	53                   	push   ebx
c0012551:	e8 76 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012556:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012558:	31 d2                	xor    edx,edx
c001255a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001255d:	56                   	push   esi
c001255e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012562:	52                   	push   edx
c0012563:	50                   	push   eax
c0012564:	53                   	push   ebx
c0012565:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012568:	83 c4 14             	add    esp,0x14
c001256b:	53                   	push   ebx
c001256c:	e8 fb 85 ff ff       	call   c000ab6c <File::close()>
c0012571:	5d                   	pop    ebp
c0012572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012576:	e8 4e 52 ff ff       	call   c00077c9 <free>
c001257b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001257e:	e8 46 52 ff ff       	call   c00077c9 <free>
c0012583:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0012588:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001258c:	8d 50 01             	lea    edx,[eax+0x1]
c001258f:	89 0c 85 40 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1c0],ecx
c0012596:	89 34 85 c0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc240],esi
c001259d:	89 15 c0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec0,edx
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	b0 01                	mov    al,0x1
c00125a8:	83 c4 5c             	add    esp,0x5c
c00125ab:	5b                   	pop    ebx
c00125ac:	5e                   	pop    esi
c00125ad:	5f                   	pop    edi
c00125ae:	5d                   	pop    ebp
c00125af:	c3                   	ret    

c00125b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125b0:	55                   	push   ebp
c00125b1:	57                   	push   edi
c00125b2:	56                   	push   esi
c00125b3:	53                   	push   ebx
c00125b4:	81 ec 68 03 00 00    	sub    esp,0x368
c00125ba:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125c1:	8b 1d 10 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f10
c00125c7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125cb:	68 14 01 00 00       	push   0x114
c00125d0:	e8 e4 51 ff ff       	call   c00077b9 <malloc>
c00125d5:	83 c4 0c             	add    esp,0xc
c00125d8:	89 c5                	mov    ebp,eax
c00125da:	53                   	push   ebx
c00125db:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125e2:	50                   	push   eax
c00125e3:	e8 66 84 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00125e8:	5e                   	pop    esi
c00125e9:	5f                   	pop    edi
c00125ea:	6a 01                	push   0x1
c00125ec:	55                   	push   ebp
c00125ed:	e8 1c 85 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00125f2:	83 c4 10             	add    esp,0x10
c00125f5:	85 c0                	test   eax,eax
c00125f7:	0f 85 a7 06 00 00    	jne    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00125fd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012605:	83 ec 0c             	sub    esp,0xc
c0012608:	6a 34                	push   0x34
c001260a:	e8 aa 51 ff ff       	call   c00077b9 <malloc>
c001260f:	5b                   	pop    ebx
c0012610:	89 c7                	mov    edi,eax
c0012612:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012616:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012619:	53                   	push   ebx
c001261a:	57                   	push   edi
c001261b:	6a 00                	push   0x0
c001261d:	6a 34                	push   0x34
c001261f:	55                   	push   ebp
c0012620:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012623:	83 c4 20             	add    esp,0x20
c0012626:	85 c0                	test   eax,eax
c0012628:	0f 85 76 06 00 00    	jne    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001262e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012634:	0f 85 6a 06 00 00    	jne    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001263a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001263d:	85 c0                	test   eax,eax
c001263f:	0f 84 5f 06 00 00    	je     c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012645:	31 d2                	xor    edx,edx
c0012647:	51                   	push   ecx
c0012648:	52                   	push   edx
c0012649:	50                   	push   eax
c001264a:	55                   	push   ebp
c001264b:	e8 7c 85 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012650:	83 c4 10             	add    esp,0x10
c0012653:	85 c0                	test   eax,eax
c0012655:	0f 85 49 06 00 00    	jne    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265b:	83 ec 0c             	sub    esp,0xc
c001265e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012661:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012665:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012669:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001266d:	0f af c2             	imul   eax,edx
c0012670:	50                   	push   eax
c0012671:	e8 43 51 ff ff       	call   c00077b9 <malloc>
c0012676:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012679:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001267d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012680:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012684:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012688:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001268c:	0f af c2             	imul   eax,edx
c001268f:	99                   	cdq    
c0012690:	52                   	push   edx
c0012691:	50                   	push   eax
c0012692:	55                   	push   ebp
c0012693:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012696:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012699:	83 c4 20             	add    esp,0x20
c001269c:	85 c0                	test   eax,eax
c001269e:	0f 84 00 06 00 00    	je     c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a4:	52                   	push   edx
c00126a5:	31 d2                	xor    edx,edx
c00126a7:	52                   	push   edx
c00126a8:	50                   	push   eax
c00126a9:	55                   	push   ebp
c00126aa:	e8 1d 85 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	85 c0                	test   eax,eax
c00126b4:	0f 85 ea 05 00 00    	jne    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126ba:	83 ec 0c             	sub    esp,0xc
c00126bd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126c1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126c5:	31 f6                	xor    esi,esi
c00126c7:	0f af c2             	imul   eax,edx
c00126ca:	50                   	push   eax
c00126cb:	e8 e9 50 ff ff       	call   c00077b9 <malloc>
c00126d0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126de:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126e2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126e6:	0f af c2             	imul   eax,edx
c00126e9:	99                   	cdq    
c00126ea:	52                   	push   edx
c00126eb:	50                   	push   eax
c00126ec:	55                   	push   ebp
c00126ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126f0:	83 c4 20             	add    esp,0x20
c00126f3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00126f7:	0f 86 8a 00 00 00    	jbe    c0012787 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00126fd:	0f b7 de             	movzx  ebx,si
c0012700:	c1 e3 05             	shl    ebx,0x5
c0012703:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012707:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001270a:	75 75                	jne    c0012781 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001270c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001270f:	31 d2                	xor    edx,edx
c0012711:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012715:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012718:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001271c:	50                   	push   eax
c001271d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012720:	52                   	push   edx
c0012721:	50                   	push   eax
c0012722:	55                   	push   ebp
c0012723:	e8 a4 84 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	85 c0                	test   eax,eax
c001272d:	0f 85 71 05 00 00    	jne    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012733:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001273a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001273d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012741:	31 d2                	xor    edx,edx
c0012743:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012747:	83 ec 0c             	sub    esp,0xc
c001274a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001274e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012755:	50                   	push   eax
c0012756:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001275a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001275e:	52                   	push   edx
c001275f:	50                   	push   eax
c0012760:	55                   	push   ebp
c0012761:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012764:	83 c4 1c             	add    esp,0x1c
c0012767:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001276a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001276d:	50                   	push   eax
c001276e:	6a 00                	push   0x0
c0012770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012774:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012778:	50                   	push   eax
c0012779:	e8 52 dd fe ff       	call   c00004d0 <memset>
c001277e:	83 c4 10             	add    esp,0x10
c0012781:	46                   	inc    esi
c0012782:	e9 6c ff ff ff       	jmp    c00126f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012787:	53                   	push   ebx
c0012788:	31 db                	xor    ebx,ebx
c001278a:	68 00 01 00 00       	push   0x100
c001278f:	6a 00                	push   0x0
c0012791:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012795:	50                   	push   eax
c0012796:	e8 35 dd fe ff       	call   c00004d0 <memset>
c001279b:	83 c4 0c             	add    esp,0xc
c001279e:	68 00 01 00 00       	push   0x100
c00127a3:	6a 00                	push   0x0
c00127a5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127ac:	50                   	push   eax
c00127ad:	e8 1e dd fe ff       	call   c00004d0 <memset>
c00127b2:	83 c4 10             	add    esp,0x10
c00127b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127c5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127dd:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127e1:	0f 86 30 01 00 00    	jbe    c0012917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127e7:	0f b7 f3             	movzx  esi,bx
c00127ea:	6b f6 28             	imul   esi,esi,0x28
c00127ed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00127f1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00127f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f8:	52                   	push   edx
c00127f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00127fd:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012801:	8b 06                	mov    eax,DWORD PTR [esi]
c0012803:	6b d2 28             	imul   edx,edx,0x28
c0012806:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001280a:	31 d2                	xor    edx,edx
c001280c:	52                   	push   edx
c001280d:	50                   	push   eax
c001280e:	55                   	push   ebp
c001280f:	e8 b8 83 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012814:	83 c4 0c             	add    esp,0xc
c0012817:	6a 20                	push   0x20
c0012819:	6a 00                	push   0x0
c001281b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012822:	51                   	push   ecx
c0012823:	e8 a8 dc fe ff       	call   c00004d0 <memset>
c0012828:	59                   	pop    ecx
c0012829:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001282c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012830:	52                   	push   edx
c0012831:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012838:	51                   	push   ecx
c0012839:	6a 00                	push   0x0
c001283b:	6a 1f                	push   0x1f
c001283d:	55                   	push   ebp
c001283e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012841:	83 c4 1c             	add    esp,0x1c
c0012844:	6a 09                	push   0x9
c0012846:	68 3e eb 01 c0       	push   0xc001eb3e
c001284b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012852:	51                   	push   ecx
c0012853:	e8 38 db fe ff       	call   c0000390 <memcmp>
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	85 c0                	test   eax,eax
c001285d:	75 21                	jne    c0012880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001285f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012867:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001286b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001286f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012872:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012879:	89 d0                	mov    eax,edx
c001287b:	40                   	inc    eax
c001287c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012880:	50                   	push   eax
c0012881:	6a 09                	push   0x9
c0012883:	68 48 eb 01 c0       	push   0xc001eb48
c0012888:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001288f:	50                   	push   eax
c0012890:	e8 fb da fe ff       	call   c0000390 <memcmp>
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	85 c0                	test   eax,eax
c001289a:	75 21                	jne    c00128bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001289c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128a4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128af:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128b6:	89 d0                	mov    eax,edx
c00128b8:	40                   	inc    eax
c00128b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128bd:	50                   	push   eax
c00128be:	50                   	push   eax
c00128bf:	68 14 eb 01 c0       	push   0xc001eb14
c00128c4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128cb:	50                   	push   eax
c00128cc:	e8 0f de fe ff       	call   c00006e0 <strcmp>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	85 c0                	test   eax,eax
c00128d6:	75 0f                	jne    c00128e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128d8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128e7:	50                   	push   eax
c00128e8:	50                   	push   eax
c00128e9:	68 1c eb 01 c0       	push   0xc001eb1c
c00128ee:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128f5:	50                   	push   eax
c00128f6:	e8 e5 dd fe ff       	call   c00006e0 <strcmp>
c00128fb:	83 c4 10             	add    esp,0x10
c00128fe:	85 c0                	test   eax,eax
c0012900:	75 0f                	jne    c0012911 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012902:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001290d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012911:	43                   	inc    ebx
c0012912:	e9 c6 fe ff ff       	jmp    c00127dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012917:	31 d2                	xor    edx,edx
c0012919:	50                   	push   eax
c001291a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001291e:	52                   	push   edx
c001291f:	50                   	push   eax
c0012920:	55                   	push   ebp
c0012921:	e8 a6 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012926:	58                   	pop    eax
c0012927:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001292b:	e8 89 4e ff ff       	call   c00077b9 <malloc>
c0012930:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012933:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012937:	31 d2                	xor    edx,edx
c0012939:	58                   	pop    eax
c001293a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001293e:	53                   	push   ebx
c001293f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012943:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012947:	52                   	push   edx
c0012948:	50                   	push   eax
c0012949:	55                   	push   ebp
c001294a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001294d:	83 c4 14             	add    esp,0x14
c0012950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012954:	e8 60 4e ff ff       	call   c00077b9 <malloc>
c0012959:	31 d2                	xor    edx,edx
c001295b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001295f:	83 c4 0c             	add    esp,0xc
c0012962:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012966:	52                   	push   edx
c0012967:	50                   	push   eax
c0012968:	55                   	push   ebp
c0012969:	e8 5e 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c001296e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012971:	31 d2                	xor    edx,edx
c0012973:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012976:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001297e:	52                   	push   edx
c001297f:	50                   	push   eax
c0012980:	55                   	push   ebp
c0012981:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012984:	83 c4 20             	add    esp,0x20
c0012987:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001298f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012993:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012997:	0f 84 0b 03 00 00    	je     c0012ca8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001299d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129a4:	31 d2                	xor    edx,edx
c00129a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129aa:	c1 e8 03             	shr    eax,0x3
c00129ad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129b1:	51                   	push   ecx
c00129b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129b6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129ba:	52                   	push   edx
c00129bb:	50                   	push   eax
c00129bc:	55                   	push   ebp
c00129bd:	e8 0a 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00129c2:	5b                   	pop    ebx
c00129c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129c7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129ce:	e8 e6 4d ff ff       	call   c00077b9 <malloc>
c00129d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129da:	31 d2                	xor    edx,edx
c00129dc:	5e                   	pop    esi
c00129dd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129e1:	50                   	push   eax
c00129e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129ea:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00129f1:	52                   	push   edx
c00129f2:	50                   	push   eax
c00129f3:	55                   	push   ebp
c00129f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129f7:	83 c4 20             	add    esp,0x20
c00129fa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a02:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a06:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a0a:	0f 8d 7c 02 00 00    	jge    c0012c8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a18:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a1d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a28:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a2c:	89 d8                	mov    eax,ebx
c0012a2e:	c1 e8 08             	shr    eax,0x8
c0012a31:	89 c6                	mov    esi,eax
c0012a33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a37:	c1 e6 04             	shl    esi,0x4
c0012a3a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a3e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a41:	85 d2                	test   edx,edx
c0012a43:	0f 85 bf 00 00 00    	jne    c0012b08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a49:	83 ec 0c             	sub    esp,0xc
c0012a4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a50:	03 06                	add    eax,DWORD PTR [esi]
c0012a52:	50                   	push   eax
c0012a53:	e8 4b f8 ff ff       	call   c00122a3 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	89 c2                	mov    edx,eax
c0012a5d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a62:	85 c0                	test   eax,eax
c0012a64:	0f 85 9e 00 00 00    	jne    c0012b08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a6a:	83 ec 0c             	sub    esp,0xc
c0012a6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a71:	03 06                	add    eax,DWORD PTR [esi]
c0012a73:	50                   	push   eax
c0012a74:	e8 fb d7 ff ff       	call   c0010274 <KeResolveCompatibilitySymbol(char*)>
c0012a79:	83 c4 10             	add    esp,0x10
c0012a7c:	89 c2                	mov    edx,eax
c0012a7e:	85 c0                	test   eax,eax
c0012a80:	0f 85 82 00 00 00    	jne    c0012b08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a86:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a8a:	50                   	push   eax
c0012a8b:	50                   	push   eax
c0012a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a90:	03 06                	add    eax,DWORD PTR [esi]
c0012a92:	50                   	push   eax
c0012a93:	68 52 eb 01 c0       	push   0xc001eb52
c0012a98:	e8 3b 7a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012a9d:	58                   	pop    eax
c0012a9e:	5a                   	pop    edx
c0012a9f:	68 6c eb 01 c0       	push   0xc001eb6c
c0012aa4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012aab:	50                   	push   eax
c0012aac:	e8 4f db fe ff       	call   c0000600 <strcpy>
c0012ab1:	59                   	pop    ecx
c0012ab2:	58                   	pop    eax
c0012ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab7:	03 06                	add    eax,DWORD PTR [esi]
c0012ab9:	50                   	push   eax
c0012aba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ac1:	50                   	push   eax
c0012ac2:	e8 f9 dc fe ff       	call   c00007c0 <strcat>
c0012ac7:	58                   	pop    eax
c0012ac8:	5a                   	pop    edx
c0012ac9:	68 02 ec 01 c0       	push   0xc001ec02
c0012ace:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ad5:	50                   	push   eax
c0012ad6:	e8 e5 dc fe ff       	call   c00007c0 <strcat>
c0012adb:	83 c4 10             	add    esp,0x10
c0012ade:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ae3:	0f 84 5d 01 00 00    	je     c0012c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ae9:	83 ec 0c             	sub    esp,0xc
c0012aec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af3:	50                   	push   eax
c0012af4:	e8 2a d6 ff ff       	call   c0010123 <KePanic(char const*)>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b04:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b08:	80 fb 01             	cmp    bl,0x1
c0012b0b:	0f 85 88 00 00 00    	jne    c0012b99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b11:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b18:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b1c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b20:	01 ce                	add    esi,ecx
c0012b22:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b28:	0f 94 c0             	sete   al
c0012b2b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b31:	0f 94 c3             	sete   bl
c0012b34:	09 c3                	or     ebx,eax
c0012b36:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b38:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b3d:	74 41                	je     c0012b80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b3f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b42:	84 db                	test   bl,bl
c0012b44:	75 15                	jne    c0012b5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b4a:	66 83 f8 0c          	cmp    ax,0xc
c0012b4e:	76 05                	jbe    c0012b55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b50:	b8 0c 00 00 00       	mov    eax,0xc
c0012b55:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b59:	76 37                	jbe    c0012b92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b5b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b5f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b64:	0f 84 dc 00 00 00    	je     c0012c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	68 83 eb 01 c0       	push   0xc001eb83
c0012b72:	e8 ac d5 ff ff       	call   c0010123 <KePanic(char const*)>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b7e:	eb 12                	jmp    c0012b92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b80:	01 c1                	add    ecx,eax
c0012b82:	84 db                	test   bl,bl
c0012b84:	75 0c                	jne    c0012b92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b86:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b8a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b8e:	77 02                	ja     c0012b92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b90:	01 d1                	add    ecx,edx
c0012b92:	89 0e                	mov    DWORD PTR [esi],ecx
c0012b94:	e9 ea 00 00 00       	jmp    c0012c83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012b99:	80 fb 02             	cmp    bl,0x2
c0012b9c:	75 7c                	jne    c0012c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012b9e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012ba5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012ba9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bad:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bb3:	74 20                	je     c0012bd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bb5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bbb:	74 18                	je     c0012bd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bbd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bc1:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bc6:	66 83 f8 0e          	cmp    ax,0xe
c0012bca:	77 03                	ja     c0012bcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bcc:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bcf:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bd3:	76 1f                	jbe    c0012bf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bd5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012bd9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bde:	74 66                	je     c0012c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012be0:	83 ec 0c             	sub    esp,0xc
c0012be3:	68 9f eb 01 c0       	push   0xc001eb9f
c0012be8:	e8 36 d5 ff ff       	call   c0010123 <KePanic(char const*)>
c0012bed:	83 c4 10             	add    esp,0x10
c0012bf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012bf4:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bf6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012bfb:	74 13                	je     c0012c10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012bfd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c01:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c08:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c0c:	01 c8                	add    eax,ecx
c0012c0e:	eb 04                	jmp    c0012c14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c10:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c14:	01 c2                	add    edx,eax
c0012c16:	89 16                	mov    DWORD PTR [esi],edx
c0012c18:	eb 69                	jmp    c0012c83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c1a:	0f b6 db             	movzx  ebx,bl
c0012c1d:	50                   	push   eax
c0012c1e:	50                   	push   eax
c0012c1f:	53                   	push   ebx
c0012c20:	68 bb eb 01 c0       	push   0xc001ebbb
c0012c25:	e8 ae 78 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c32:	74 12                	je     c0012c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	68 c6 eb 01 c0       	push   0xc001ebc6
c0012c3c:	e8 e2 d4 ff ff       	call   c0010123 <KePanic(char const*)>
c0012c41:	83 c4 10             	add    esp,0x10
c0012c44:	eb 3d                	jmp    c0012c83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c46:	83 ec 0c             	sub    esp,0xc
c0012c49:	55                   	push   ebp
c0012c4a:	e8 1d 7f ff ff       	call   c000ab6c <File::close()>
c0012c4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c52:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c58:	59                   	pop    ecx
c0012c59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c5d:	e8 67 4b ff ff       	call   c00077c9 <free>
c0012c62:	5b                   	pop    ebx
c0012c63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c67:	e8 5d 4b ff ff       	call   c00077c9 <free>
c0012c6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c6f:	e8 55 4b ff ff       	call   c00077c9 <free>
c0012c74:	5e                   	pop    esi
c0012c75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c79:	e8 4b 4b ff ff       	call   c00077c9 <free>
c0012c7e:	83 c4 10             	add    esp,0x10
c0012c81:	eb 21                	jmp    c0012ca4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c83:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c87:	e9 76 fd ff ff       	jmp    c0012a02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c93:	e8 31 4b ff ff       	call   c00077c9 <free>
c0012c98:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	e9 eb fc ff ff       	jmp    c001298f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012ca4:	31 c0                	xor    eax,eax
c0012ca6:	eb 33                	jmp    c0012cdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	55                   	push   ebp
c0012cac:	e8 bb 7e ff ff       	call   c000ab6c <File::close()>
c0012cb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cb4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cba:	58                   	pop    eax
c0012cbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cbf:	e8 05 4b ff ff       	call   c00077c9 <free>
c0012cc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cc7:	e8 fd 4a ff ff       	call   c00077c9 <free>
c0012ccc:	5a                   	pop    edx
c0012ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd1:	e8 f3 4a ff ff       	call   c00077c9 <free>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	b0 01                	mov    al,0x1
c0012cdb:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012ce1:	5b                   	pop    ebx
c0012ce2:	5e                   	pop    esi
c0012ce3:	5f                   	pop    edi
c0012ce4:	5d                   	pop    ebp
c0012ce5:	c3                   	ret    

c0012ce6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012ce6:	56                   	push   esi
c0012ce7:	31 d2                	xor    edx,edx
c0012ce9:	53                   	push   ebx
c0012cea:	8b 1d 20 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023720
c0012cf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cf4:	39 d3                	cmp    ebx,edx
c0012cf6:	7e 1b                	jle    c0012d13 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012cf8:	8b 04 95 40 39 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc6c0]
c0012cff:	39 c8                	cmp    eax,ecx
c0012d01:	77 0d                	ja     c0012d10 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d03:	8b 34 95 40 37 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc8c0]
c0012d0a:	01 c6                	add    esi,eax
c0012d0c:	39 ce                	cmp    esi,ecx
c0012d0e:	77 05                	ja     c0012d15 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d10:	42                   	inc    edx
c0012d11:	eb e1                	jmp    c0012cf4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d13:	31 c0                	xor    eax,eax
c0012d15:	5b                   	pop    ebx
c0012d16:	5e                   	pop    esi
c0012d17:	c3                   	ret    

c0012d18 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d18:	53                   	push   ebx
c0012d19:	31 c0                	xor    eax,eax
c0012d1b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d1f:	8b 1d 20 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023720
c0012d25:	39 c3                	cmp    ebx,eax
c0012d27:	7e 22                	jle    c0012d4b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d29:	8b 14 85 40 39 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc6c0]
c0012d30:	39 ca                	cmp    edx,ecx
c0012d32:	77 14                	ja     c0012d48 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d34:	03 14 85 40 37 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc8c0]
c0012d3b:	39 ca                	cmp    edx,ecx
c0012d3d:	76 09                	jbe    c0012d48 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d3f:	8b 04 85 40 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc4c0]
c0012d46:	eb 05                	jmp    c0012d4d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d48:	40                   	inc    eax
c0012d49:	eb da                	jmp    c0012d25 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d4b:	31 c0                	xor    eax,eax
c0012d4d:	5b                   	pop    ebx
c0012d4e:	c3                   	ret    

c0012d4f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d4f:	53                   	push   ebx
c0012d50:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d54:	53                   	push   ebx
c0012d55:	e8 8c ff ff ff       	call   c0012ce6 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d5a:	5a                   	pop    edx
c0012d5b:	31 d2                	xor    edx,edx
c0012d5d:	85 c0                	test   eax,eax
c0012d5f:	74 04                	je     c0012d65 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d61:	89 da                	mov    edx,ebx
c0012d63:	29 c2                	sub    edx,eax
c0012d65:	89 d0                	mov    eax,edx
c0012d67:	5b                   	pop    ebx
c0012d68:	c3                   	ret    

c0012d69 <Thr::loadDLL(char const*, bool)>:
c0012d69:	55                   	push   ebp
c0012d6a:	57                   	push   edi
c0012d6b:	56                   	push   esi
c0012d6c:	53                   	push   ebx
c0012d6d:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d73:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d7a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d81:	56                   	push   esi
c0012d82:	68 de eb 01 c0       	push   0xc001ebde
c0012d87:	e8 4c 77 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012d8c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d93:	e8 21 4a ff ff       	call   c00077b9 <malloc>
c0012d98:	83 c4 0c             	add    esp,0xc
c0012d9b:	89 c3                	mov    ebx,eax
c0012d9d:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c0012da3:	56                   	push   esi
c0012da4:	50                   	push   eax
c0012da5:	e8 a4 7c ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0012daa:	83 c4 10             	add    esp,0x10
c0012dad:	85 db                	test   ebx,ebx
c0012daf:	75 3c                	jne    c0012ded <Thr::loadDLL(char const*, bool)+0x84>
c0012db1:	89 f8                	mov    eax,edi
c0012db3:	84 c0                	test   al,al
c0012db5:	0f 84 d2 01 00 00    	je     c0012f8d <Thr::loadDLL(char const*, bool)+0x224>
c0012dbb:	55                   	push   ebp
c0012dbc:	55                   	push   ebp
c0012dbd:	68 ef eb 01 c0       	push   0xc001ebef
c0012dc2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012dc6:	55                   	push   ebp
c0012dc7:	e8 34 d8 fe ff       	call   c0000600 <strcpy>
c0012dcc:	58                   	pop    eax
c0012dcd:	5a                   	pop    edx
c0012dce:	56                   	push   esi
c0012dcf:	55                   	push   ebp
c0012dd0:	e8 eb d9 fe ff       	call   c00007c0 <strcat>
c0012dd5:	59                   	pop    ecx
c0012dd6:	58                   	pop    eax
c0012dd7:	68 02 ec 01 c0       	push   0xc001ec02
c0012ddc:	55                   	push   ebp
c0012ddd:	e8 de d9 fe ff       	call   c00007c0 <strcat>
c0012de2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012de5:	e8 39 d3 ff ff       	call   c0010123 <KePanic(char const*)>
c0012dea:	83 c4 10             	add    esp,0x10
c0012ded:	51                   	push   ecx
c0012dee:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012df2:	50                   	push   eax
c0012df3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012df7:	50                   	push   eax
c0012df8:	53                   	push   ebx
c0012df9:	e8 bc 7f ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	85 db                	test   ebx,ebx
c0012e03:	74 0c                	je     c0012e11 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e05:	83 ec 0c             	sub    esp,0xc
c0012e08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e0a:	53                   	push   ebx
c0012e0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e16:	75 0a                	jne    c0012e22 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e1c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e20:	75 3c                	jne    c0012e5e <Thr::loadDLL(char const*, bool)+0xf5>
c0012e22:	89 f8                	mov    eax,edi
c0012e24:	84 c0                	test   al,al
c0012e26:	0f 84 49 01 00 00    	je     c0012f75 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e2c:	51                   	push   ecx
c0012e2d:	51                   	push   ecx
c0012e2e:	68 ef eb 01 c0       	push   0xc001ebef
c0012e33:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e37:	53                   	push   ebx
c0012e38:	e8 c3 d7 fe ff       	call   c0000600 <strcpy>
c0012e3d:	5d                   	pop    ebp
c0012e3e:	58                   	pop    eax
c0012e3f:	56                   	push   esi
c0012e40:	53                   	push   ebx
c0012e41:	e8 7a d9 fe ff       	call   c00007c0 <strcat>
c0012e46:	58                   	pop    eax
c0012e47:	5a                   	pop    edx
c0012e48:	68 02 ec 01 c0       	push   0xc001ec02
c0012e4d:	53                   	push   ebx
c0012e4e:	e8 6d d9 fe ff       	call   c00007c0 <strcat>
c0012e53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e56:	e8 c8 d2 ff ff       	call   c0010123 <KePanic(char const*)>
c0012e5b:	83 c4 10             	add    esp,0x10
c0012e5e:	52                   	push   edx
c0012e5f:	6a 03                	push   0x3
c0012e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e69:	05 ff 0f 00 00       	add    eax,0xfff
c0012e6e:	83 d2 00             	adc    edx,0x0
c0012e71:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e75:	50                   	push   eax
c0012e76:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c0012e7c:	e8 9d 6b ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0012e81:	59                   	pop    ecx
c0012e82:	89 c3                	mov    ebx,eax
c0012e84:	5d                   	pop    ebp
c0012e85:	50                   	push   eax
c0012e86:	68 56 d7 01 c0       	push   0xc001d756
c0012e8b:	e8 48 76 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012e90:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e93:	e8 a8 d6 fe ff       	call   c0000540 <strlen>
c0012e98:	8b 2d 20 37 02 c0    	mov    ebp,DWORD PTR ds:0xc0023720
c0012e9e:	40                   	inc    eax
c0012e9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea2:	e8 12 49 ff ff       	call   c00077b9 <malloc>
c0012ea7:	89 04 ad 40 3b 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc4c0],eax
c0012eae:	58                   	pop    eax
c0012eaf:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c0012eb4:	5a                   	pop    edx
c0012eb5:	56                   	push   esi
c0012eb6:	ff 34 85 40 3b 02 c0 	push   DWORD PTR [eax*4-0x3ffdc4c0]
c0012ebd:	e8 3e d7 fe ff       	call   c0000600 <strcpy>
c0012ec2:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c0012ec7:	8d 50 01             	lea    edx,[eax+0x1]
c0012eca:	89 1c 85 40 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6c0],ebx
c0012ed1:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c0012ed7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012edb:	83 c4 0c             	add    esp,0xc
c0012ede:	89 14 85 40 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8c0],edx
c0012ee5:	6a 01                	push   0x1
c0012ee7:	53                   	push   ebx
c0012ee8:	56                   	push   esi
c0012ee9:	e8 c2 f6 ff ff       	call   c00125b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012eee:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012efa:	0f 85 89 00 00 00    	jne    c0012f89 <Thr::loadDLL(char const*, bool)+0x220>
c0012f00:	89 f8                	mov    eax,edi
c0012f02:	84 c0                	test   al,al
c0012f04:	74 73                	je     c0012f79 <Thr::loadDLL(char const*, bool)+0x210>
c0012f06:	83 ec 0c             	sub    esp,0xc
c0012f09:	68 04 ec 01 c0       	push   0xc001ec04
c0012f0e:	e8 10 d2 ff ff       	call   c0010123 <KePanic(char const*)>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	eb 61                	jmp    c0012f79 <Thr::loadDLL(char const*, bool)+0x210>
c0012f18:	50                   	push   eax
c0012f19:	50                   	push   eax
c0012f1a:	89 e8                	mov    eax,ebp
c0012f1c:	c1 e0 0c             	shl    eax,0xc
c0012f1f:	01 d8                	add    eax,ebx
c0012f21:	50                   	push   eax
c0012f22:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c0012f28:	e8 69 66 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012f2d:	83 c4 10             	add    esp,0x10
c0012f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f32:	a8 60                	test   al,0x60
c0012f34:	75 11                	jne    c0012f47 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f36:	83 ec 0c             	sub    esp,0xc
c0012f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f3e:	50                   	push   eax
c0012f3f:	e8 ef 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f44:	83 c4 10             	add    esp,0x10
c0012f47:	45                   	inc    ebp
c0012f48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f50:	05 ff 0f 00 00       	add    eax,0xfff
c0012f55:	bf 00 00 00 00       	mov    edi,0x0
c0012f5a:	83 d2 00             	adc    edx,0x0
c0012f5d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f61:	c1 ea 0c             	shr    edx,0xc
c0012f64:	39 c5                	cmp    ebp,eax
c0012f66:	89 d1                	mov    ecx,edx
c0012f68:	89 f8                	mov    eax,edi
c0012f6a:	19 c8                	sbb    eax,ecx
c0012f6c:	72 aa                	jb     c0012f18 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f6e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f73:	75 18                	jne    c0012f8d <Thr::loadDLL(char const*, bool)+0x224>
c0012f75:	31 db                	xor    ebx,ebx
c0012f77:	eb 14                	jmp    c0012f8d <Thr::loadDLL(char const*, bool)+0x224>
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	68 23 ec 01 c0       	push   0xc001ec23
c0012f81:	e8 9d d1 ff ff       	call   c0010123 <KePanic(char const*)>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	31 ed                	xor    ebp,ebp
c0012f8b:	eb bb                	jmp    c0012f48 <Thr::loadDLL(char const*, bool)+0x1df>
c0012f8d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f93:	89 d8                	mov    eax,ebx
c0012f95:	5b                   	pop    ebx
c0012f96:	5e                   	pop    esi
c0012f97:	5f                   	pop    edi
c0012f98:	5d                   	pop    ebp
c0012f99:	c3                   	ret    

c0012f9a <Thr::executeDLL(unsigned long, void*)>:
c0012f9a:	56                   	push   esi
c0012f9b:	53                   	push   ebx
c0012f9c:	52                   	push   edx
c0012f9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fa1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fa5:	85 db                	test   ebx,ebx
c0012fa7:	75 10                	jne    c0012fb9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fa9:	83 ec 0c             	sub    esp,0xc
c0012fac:	68 3f ec 01 c0       	push   0xc001ec3f
c0012fb1:	e8 6d d1 ff ff       	call   c0010123 <KePanic(char const*)>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	50                   	push   eax
c0012fba:	50                   	push   eax
c0012fbb:	53                   	push   ebx
c0012fbc:	68 69 ec 01 c0       	push   0xc001ec69
c0012fc1:	e8 12 75 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012fc6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fca:	89 d8                	mov    eax,ebx
c0012fcc:	83 c4 14             	add    esp,0x14
c0012fcf:	5b                   	pop    ebx
c0012fd0:	5e                   	pop    esi
c0012fd1:	ff e0                	jmp    eax
c0012fd3:	90                   	nop

c0012fd4 <userModeEntryPoint(void*)>:
c0012fd4:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0012fd9:	48                   	dec    eax
c0012fda:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0012fdf:	75 03                	jne    c0012fe4 <userModeEntryPoint(void*)+0x10>
c0012fe1:	fb                   	sti    
c0012fe2:	66 90                	xchg   ax,ax
c0012fe4:	fb                   	sti    
c0012fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fed:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ff7:	e9 43 d2 fe ff       	jmp    c000023f <goToUsermode>

c0012ffc <changeTSS>:
c0012ffc:	83 ec 14             	sub    esp,0x14
c0012fff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013004:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013007:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001300c:	c1 e2 15             	shl    edx,0x15
c001300f:	29 d0                	sub    eax,edx
c0013011:	50                   	push   eax
c0013012:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0013017:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001301d:	05 7c 11 00 00       	add    eax,0x117c
c0013022:	50                   	push   eax
c0013023:	e8 b0 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013028:	83 c4 1c             	add    esp,0x1c
c001302b:	c3                   	ret    

c001302c <switchToThread(ThreadControlBlock*)>:
c001302c:	57                   	push   edi
c001302d:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0013032:	56                   	push   esi
c0013033:	85 c0                	test   eax,eax
c0013035:	53                   	push   ebx
c0013036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001303a:	0f 85 90 00 00 00    	jne    c00130d0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013040:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013043:	80 fa ff             	cmp    dl,0xff
c0013046:	0f 84 80 00 00 00    	je     c00130cc <switchToThread(ThreadControlBlock*)+0xa0>
c001304c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013052:	b8 00 04 00 00       	mov    eax,0x400
c0013057:	29 d0                	sub    eax,edx
c0013059:	d1 f8                	sar    eax,1
c001305b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001305e:	66 90                	xchg   ax,ax
c0013060:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013063:	e8 ad 26 00 00       	call   c0015715 <HalQueryPerformanceCounter()>
c0013068:	a3 28 3f 02 c0       	mov    ds:0xc0023f28,eax
c001306d:	89 15 2c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f2c,edx
c0013073:	89 c6                	mov    esi,eax
c0013075:	89 d7                	mov    edi,edx
c0013077:	2b 35 18 3f 02 c0    	sub    esi,DWORD PTR ds:0xc0023f18
c001307d:	a3 18 3f 02 c0       	mov    ds:0xc0023f18,eax
c0013082:	1b 3d 1c 3f 02 c0    	sbb    edi,DWORD PTR ds:0xc0023f1c
c0013088:	89 35 20 3f 02 c0    	mov    DWORD PTR ds:0xc0023f20,esi
c001308e:	89 3d 24 3f 02 c0    	mov    DWORD PTR ds:0xc0023f24,edi
c0013094:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001309a:	89 15 1c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f1c,edx
c00130a0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130a3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130a6:	01 c6                	add    esi,eax
c00130a8:	11 d7                	adc    edi,edx
c00130aa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130ad:	83 ec 0c             	sub    esp,0xc
c00130b0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130b3:	53                   	push   ebx
c00130b4:	e8 be d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130b9:	0f 20 c0             	mov    eax,cr0
c00130bc:	83 c8 08             	or     eax,0x8
c00130bf:	0f 22 c0             	mov    cr0,eax
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	5b                   	pop    ebx
c00130c6:	5e                   	pop    esi
c00130c7:	5f                   	pop    edi
c00130c8:	c3                   	ret    
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	31 c0                	xor    eax,eax
c00130ce:	eb 90                	jmp    c0013060 <switchToThread(ThreadControlBlock*)+0x34>
c00130d0:	5b                   	pop    ebx
c00130d1:	c7 05 e0 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x1
c00130db:	5e                   	pop    esi
c00130dc:	5f                   	pop    edi
c00130dd:	c3                   	ret    
c00130de:	66 90                	xchg   ax,ax

c00130e0 <Process::addArgs(char**)>:
c00130e0:	57                   	push   edi
c00130e1:	56                   	push   esi
c00130e2:	53                   	push   ebx
c00130e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130eb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00130f5:	85 ff                	test   edi,edi
c00130f7:	74 43                	je     c001313c <Process::addArgs(char**)+0x5c>
c00130f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00130fb:	85 c0                	test   eax,eax
c00130fd:	74 3d                	je     c001313c <Process::addArgs(char**)+0x5c>
c00130ff:	31 db                	xor    ebx,ebx
c0013101:	8d 76 00             	lea    esi,[esi+0x0]
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	50                   	push   eax
c0013108:	e8 33 d4 fe ff       	call   c0000540 <strlen>
c001310d:	40                   	inc    eax
c001310e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013111:	e8 a3 46 ff ff       	call   c00077b9 <malloc>
c0013116:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001311d:	5a                   	pop    edx
c001311e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013121:	59                   	pop    ecx
c0013122:	43                   	inc    ebx
c0013123:	52                   	push   edx
c0013124:	50                   	push   eax
c0013125:	e8 d6 d4 fe ff       	call   c0000600 <strcpy>
c001312a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013136:	85 c0                	test   eax,eax
c0013138:	75 ca                	jne    c0013104 <Process::addArgs(char**)+0x24>
c001313a:	66 90                	xchg   ax,ax
c001313c:	5b                   	pop    ebx
c001313d:	5e                   	pop    esi
c001313e:	5f                   	pop    edi
c001313f:	c3                   	ret    

c0013140 <Process::Process(char const*, Process*, char**)>:
c0013140:	56                   	push   esi
c0013141:	53                   	push   ebx
c0013142:	83 ec 14             	sub    esp,0x14
c0013145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013149:	05 0c 02 00 00       	add    eax,0x20c
c001314e:	bb 07 00 00 00       	mov    ebx,0x7
c0013153:	89 c6                	mov    esi,eax
c0013155:	8d 76 00             	lea    esi,[esi+0x0]
c0013158:	85 db                	test   ebx,ebx
c001315a:	78 14                	js     c0013170 <Process::Process(char const*, Process*, char**)+0x30>
c001315c:	83 ec 0c             	sub    esp,0xc
c001315f:	56                   	push   esi
c0013160:	e8 c7 98 00 00       	call   c001ca2c <ThreadControlBlock::ThreadControlBlock()>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	83 c6 5f             	add    esi,0x5f
c001316b:	4b                   	dec    ebx
c001316c:	eb ea                	jmp    c0013158 <Process::Process(char const*, Process*, char**)+0x18>
c001316e:	66 90                	xchg   ax,ax
c0013170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013174:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001317b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001317f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001318d:	e8 86 cd ff ff       	call   c000ff18 <Krnl::newProcessEnv(Process*)>
c0013192:	83 c4 10             	add    esp,0x10
c0013195:	89 c2                	mov    edx,eax
c0013197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131ae:	a1 0c fc 01 c0       	mov    eax,ds:0xc001fc0c
c00131b3:	8d 50 01             	lea    edx,[eax+0x1]
c00131b6:	89 15 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,edx
c00131bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131c0:	89 02                	mov    DWORD PTR [edx],eax
c00131c2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131ca:	83 ec 0c             	sub    esp,0xc
c00131cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131d1:	e8 e3 45 ff ff       	call   c00077b9 <malloc>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	89 c3                	mov    ebx,eax
c00131db:	83 ec 08             	sub    esp,0x8
c00131de:	6a 00                	push   0x0
c00131e0:	53                   	push   ebx
c00131e1:	e8 e2 6b ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c00131e6:	83 c4 10             	add    esp,0x10
c00131e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131ed:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00131f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013205:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013209:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001320f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013213:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013219:	85 c0                	test   eax,eax
c001321b:	74 43                	je     c0013260 <Process::Process(char const*, Process*, char**)+0x120>
c001321d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013221:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013227:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001322d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013231:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001323b:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013241:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324b:	05 0c 01 00 00       	add    eax,0x10c
c0013250:	83 ec 08             	sub    esp,0x8
c0013253:	52                   	push   edx
c0013254:	50                   	push   eax
c0013255:	e8 a6 d3 fe ff       	call   c0000600 <strcpy>
c001325a:	83 c4 10             	add    esp,0x10
c001325d:	eb 65                	jmp    c00132c4 <Process::Process(char const*, Process*, char**)+0x184>
c001325f:	90                   	nop
c0013260:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013268:	83 ec 0c             	sub    esp,0xc
c001326b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001326f:	e8 45 45 ff ff       	call   c00077b9 <malloc>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	89 c3                	mov    ebx,eax
c0013279:	83 ec 08             	sub    esp,0x8
c001327c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013280:	53                   	push   ebx
c0013281:	e8 74 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013297:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001329d:	83 ec 0c             	sub    esp,0xc
c00132a0:	50                   	push   eax
c00132a1:	e8 f4 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ad:	05 0c 01 00 00       	add    eax,0x10c
c00132b2:	83 ec 08             	sub    esp,0x8
c00132b5:	68 88 ec 01 c0       	push   0xc001ec88
c00132ba:	50                   	push   eax
c00132bb:	e8 40 d3 fe ff       	call   c0000600 <strcpy>
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	90                   	nop
c00132c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c8:	83 c0 0c             	add    eax,0xc
c00132cb:	83 ec 08             	sub    esp,0x8
c00132ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132d2:	50                   	push   eax
c00132d3:	e8 28 d3 fe ff       	call   c0000600 <strcpy>
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	83 ec 08             	sub    esp,0x8
c00132de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132e6:	e8 f5 fd ff ff       	call   c00130e0 <Process::addArgs(char**)>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	83 ec 08             	sub    esp,0x8
c00132f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f9:	e8 7c ed ff ff       	call   c001207a <Thr::loadProgramIntoMemory(Process*, char const*)>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013305:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013309:	83 f0 01             	xor    eax,0x1
c001330c:	88 c2                	mov    dl,al
c001330e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013312:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013318:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001331c:	25 ff 00 00 00       	and    eax,0xff
c0013321:	83 ec 08             	sub    esp,0x8
c0013324:	50                   	push   eax
c0013325:	68 e0 ec 01 c0       	push   0xc001ece0
c001332a:	e8 a9 71 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001332f:	83 c4 10             	add    esp,0x10
c0013332:	90                   	nop
c0013333:	83 c4 14             	add    esp,0x14
c0013336:	5b                   	pop    ebx
c0013337:	5e                   	pop    esi
c0013338:	c3                   	ret    
c0013339:	90                   	nop
c001333a:	66 90                	xchg   ax,ax

c001333c <Process::Process(bool, char const*, Process*, char**)>:
c001333c:	57                   	push   edi
c001333d:	56                   	push   esi
c001333e:	53                   	push   ebx
c001333f:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013345:	8b 84 24 04 01 00 00 	mov    eax,DWORD PTR [esp+0x104]
c001334c:	88 84 24 dc 00 00 00 	mov    BYTE PTR [esp+0xdc],al
c0013353:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001335a:	05 0c 02 00 00       	add    eax,0x20c
c001335f:	bb 07 00 00 00       	mov    ebx,0x7
c0013364:	89 c6                	mov    esi,eax
c0013366:	66 90                	xchg   ax,ax
c0013368:	85 db                	test   ebx,ebx
c001336a:	78 14                	js     c0013380 <Process::Process(bool, char const*, Process*, char**)+0x44>
c001336c:	83 ec 0c             	sub    esp,0xc
c001336f:	56                   	push   esi
c0013370:	e8 b7 96 00 00       	call   c001ca2c <ThreadControlBlock::ThreadControlBlock()>
c0013375:	83 c4 10             	add    esp,0x10
c0013378:	83 c6 5f             	add    esi,0x5f
c001337b:	4b                   	dec    ebx
c001337c:	eb ea                	jmp    c0013368 <Process::Process(bool, char const*, Process*, char**)+0x2c>
c001337e:	66 90                	xchg   ax,ax
c0013380:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013387:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001338e:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013395:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00133a6:	e8 6d cb ff ff       	call   c000ff18 <Krnl::newProcessEnv(Process*)>
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	89 c2                	mov    edx,eax
c00133b0:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00133b7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133bd:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00133c4:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133cd:	a1 0c fc 01 c0       	mov    eax,ds:0xc001fc0c
c00133d2:	8d 50 01             	lea    edx,[eax+0x1]
c00133d5:	89 15 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,edx
c00133db:	8b 94 24 00 01 00 00 	mov    edx,DWORD PTR [esp+0x100]
c00133e2:	89 02                	mov    DWORD PTR [edx],eax
c00133e4:	c7 84 24 ec 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xec],0x14
c00133ef:	83 ec 0c             	sub    esp,0xc
c00133f2:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
c00133f9:	e8 bb 43 ff ff       	call   c00077b9 <malloc>
c00133fe:	83 c4 10             	add    esp,0x10
c0013401:	89 c3                	mov    ebx,eax
c0013403:	8a 84 24 dc 00 00 00 	mov    al,BYTE PTR [esp+0xdc]
c001340a:	25 ff 00 00 00       	and    eax,0xff
c001340f:	83 ec 08             	sub    esp,0x8
c0013412:	50                   	push   eax
c0013413:	53                   	push   ebx
c0013414:	e8 af 69 ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013423:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013429:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013430:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001343a:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013441:	8b 94 24 0c 01 00 00 	mov    edx,DWORD PTR [esp+0x10c]
c0013448:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001344e:	8b 9c 24 00 01 00 00 	mov    ebx,DWORD PTR [esp+0x100]
c0013455:	89 e0                	mov    eax,esp
c0013457:	83 ec 0c             	sub    esp,0xc
c001345a:	50                   	push   eax
c001345b:	e8 e6 cf ff ff       	call   c0010446 <KeInitSignals()>
c0013460:	83 c4 0c             	add    esp,0xc
c0013463:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013469:	89 e0                	mov    eax,esp
c001346b:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013470:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013472:	89 1a                	mov    DWORD PTR [edx],ebx
c0013474:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c0013478:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c001347c:	8d 5a 04             	lea    ebx,[edx+0x4]
c001347f:	83 e3 fc             	and    ebx,0xfffffffc
c0013482:	29 da                	sub    edx,ebx
c0013484:	29 d0                	sub    eax,edx
c0013486:	01 d1                	add    ecx,edx
c0013488:	83 e1 fc             	and    ecx,0xfffffffc
c001348b:	c1 e9 02             	shr    ecx,0x2
c001348e:	89 ca                	mov    edx,ecx
c0013490:	fc                   	cld    
c0013491:	89 df                	mov    edi,ebx
c0013493:	89 c6                	mov    esi,eax
c0013495:	89 d1                	mov    ecx,edx
c0013497:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013499:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134a6:	85 c0                	test   eax,eax
c00134a8:	74 4e                	je     c00134f8 <Process::Process(bool, char const*, Process*, char**)+0x1bc>
c00134aa:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134b1:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134b7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134bd:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134c4:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00134ca:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134d1:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134d7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134dd:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134e4:	05 0c 01 00 00       	add    eax,0x10c
c00134e9:	83 ec 08             	sub    esp,0x8
c00134ec:	52                   	push   edx
c00134ed:	50                   	push   eax
c00134ee:	e8 0d d1 fe ff       	call   c0000600 <strcpy>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	eb 78                	jmp    c0013570 <Process::Process(bool, char const*, Process*, char**)+0x234>
c00134f8:	c7 84 24 e8 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xe8],0x134
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	ff b4 24 f4 00 00 00 	push   DWORD PTR [esp+0xf4]
c001350d:	e8 a7 42 ff ff       	call   c00077b9 <malloc>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	89 c3                	mov    ebx,eax
c0013517:	83 ec 08             	sub    esp,0x8
c001351a:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c0013521:	53                   	push   ebx
c0013522:	e8 d3 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013527:	83 c4 10             	add    esp,0x10
c001352a:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013531:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013537:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001353e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013544:	83 ec 0c             	sub    esp,0xc
c0013547:	50                   	push   eax
c0013548:	e8 4d 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013557:	05 0c 01 00 00       	add    eax,0x10c
c001355c:	83 ec 08             	sub    esp,0x8
c001355f:	68 88 ec 01 c0       	push   0xc001ec88
c0013564:	50                   	push   eax
c0013565:	e8 96 d0 fe ff       	call   c0000600 <strcpy>
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	8d 76 00             	lea    esi,[esi+0x0]
c0013570:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013577:	83 c0 0c             	add    eax,0xc
c001357a:	83 ec 08             	sub    esp,0x8
c001357d:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c0013584:	50                   	push   eax
c0013585:	e8 76 d0 fe ff       	call   c0000600 <strcpy>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	83 ec 08             	sub    esp,0x8
c0013590:	ff b4 24 18 01 00 00 	push   DWORD PTR [esp+0x118]
c0013597:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001359e:	e8 3d fb ff ff       	call   c00130e0 <Process::addArgs(char**)>
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	90                   	nop
c00135a7:	81 c4 f0 00 00 00    	add    esp,0xf0
c00135ad:	5b                   	pop    ebx
c00135ae:	5e                   	pop    esi
c00135af:	5f                   	pop    edi
c00135b0:	c3                   	ret    
c00135b1:	8d 76 00             	lea    esi,[esi+0x0]

c00135b4 <taskStartupFunction>:
c00135b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop
c00135be:	66 90                	xchg   ax,ax

c00135c0 <Semaphore::Semaphore(int)>:
c00135c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135c8:	89 10                	mov    DWORD PTR [eax],edx
c00135ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135ce:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00135d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135eb:	90                   	nop
c00135ec:	c3                   	ret    
c00135ed:	90                   	nop
c00135ee:	66 90                	xchg   ax,ax

c00135f0 <Mutex::Mutex()>:
c00135f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f4:	6a 01                	push   0x1
c00135f6:	50                   	push   eax
c00135f7:	e8 c4 ff ff ff       	call   c00135c0 <Semaphore::Semaphore(int)>
c00135fc:	83 c4 08             	add    esp,0x8
c00135ff:	90                   	nop
c0013600:	c3                   	ret    
c0013601:	90                   	nop
c0013602:	66 90                	xchg   ax,ax

c0013604 <Process::createThread(void (*)(void*), void*, int)>:
c0013604:	57                   	push   edi
c0013605:	31 c9                	xor    ecx,ecx
c0013607:	56                   	push   esi
c0013608:	53                   	push   ebx
c0013609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001360d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013614:	89 f2                	mov    edx,esi
c0013616:	66 90                	xchg   ax,ax
c0013618:	31 c0                	xor    eax,eax
c001361a:	66 89 d0             	mov    ax,dx
c001361d:	83 e2 01             	and    edx,0x1
c0013620:	74 12                	je     c0013634 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013622:	d1 f8                	sar    eax,1
c0013624:	41                   	inc    ecx
c0013625:	89 c2                	mov    edx,eax
c0013627:	83 f9 10             	cmp    ecx,0x10
c001362a:	75 ec                	jne    c0013618 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001362c:	31 db                	xor    ebx,ebx
c001362e:	89 d8                	mov    eax,ebx
c0013630:	5b                   	pop    ebx
c0013631:	5e                   	pop    esi
c0013632:	5f                   	pop    edi
c0013633:	c3                   	ret    
c0013634:	b8 01 00 00 00       	mov    eax,0x1
c0013639:	d3 e0                	shl    eax,cl
c001363b:	09 c6                	or     esi,eax
c001363d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013640:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013647:	01 c0                	add    eax,eax
c0013649:	01 c8                	add    eax,ecx
c001364b:	8d 04 80             	lea    eax,[eax+eax*4]
c001364e:	01 d8                	add    eax,ebx
c0013650:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013657:	75 0b                	jne    c0013664 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013659:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013663:	90                   	nop
c0013664:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001366a:	83 ec 08             	sub    esp,0x8
c001366d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013670:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013673:	01 c0                	add    eax,eax
c0013675:	01 c8                	add    eax,ecx
c0013677:	8d 3c 80             	lea    edi,[eax+eax*4]
c001367a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001367d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013683:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013689:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001368d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013693:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013699:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00136a0:	89 ca                	mov    edx,ecx
c00136a2:	f7 da                	neg    edx
c00136a4:	c1 e2 15             	shl    edx,0x15
c00136a7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00136ad:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00136b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136b7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00136c1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00136c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00136cb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00136d1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00136db:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00136e5:	53                   	push   ebx
c00136e6:	68 04 3f 02 c0       	push   0xc0023f04
c00136eb:	e8 dc 90 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	89 d8                	mov    eax,ebx
c00136f5:	5b                   	pop    ebx
c00136f6:	5e                   	pop    esi
c00136f7:	5f                   	pop    edi
c00136f8:	c3                   	ret    
c00136f9:	90                   	nop
c00136fa:	66 90                	xchg   ax,ax

c00136fc <Process::createUserThread()>:
c00136fc:	83 ec 0c             	sub    esp,0xc
c00136ff:	68 80 00 00 00       	push   0x80
c0013704:	6a 00                	push   0x0
c0013706:	68 d4 2f 01 c0       	push   0xc0012fd4
c001370b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001370f:	50                   	push   eax
c0013710:	e8 ef fe ff ff       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c0013715:	83 c4 1c             	add    esp,0x1c
c0013718:	c3                   	ret    
c0013719:	8d 76 00             	lea    esi,[esi+0x0]

c001371c <setupMultitasking(void (*)())>:
c001371c:	56                   	push   esi
c001371d:	53                   	push   ebx
c001371e:	53                   	push   ebx
c001371f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013723:	eb 13                	jmp    c0013738 <setupMultitasking(void (*)())+0x1c>
c0013725:	8d 76 00             	lea    esi,[esi+0x0]
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	68 04 3f 02 c0       	push   0xc0023f04
c0013730:	e8 df 8f 00 00       	call   c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013735:	83 c4 10             	add    esp,0x10
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	68 04 3f 02 c0       	push   0xc0023f04
c0013740:	e8 ab 8f 00 00       	call   c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	84 c0                	test   al,al
c001374a:	74 dc                	je     c0013728 <setupMultitasking(void (*)())+0xc>
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	68 e8 07 00 00       	push   0x7e8
c0013754:	e8 60 40 ff ff       	call   c00077b9 <malloc>
c0013759:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013760:	89 c3                	mov    ebx,eax
c0013762:	6a 00                	push   0x0
c0013764:	68 8c ec 01 c0       	push   0xc001ec8c
c0013769:	6a 01                	push   0x1
c001376b:	50                   	push   eax
c001376c:	e8 cb fb ff ff       	call   c001333c <Process::Process(bool, char const*, Process*, char**)>
c0013771:	83 c4 14             	add    esp,0x14
c0013774:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001377a:	89 1d 10 3f 02 c0    	mov    DWORD PTR ds:0xc0023f10,ebx
c0013780:	50                   	push   eax
c0013781:	e8 71 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013786:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001378e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013798:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001379e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137a1:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00137ab:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00137b1:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00137b7:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00137c1:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00137cb:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00137d5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00137db:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00137e1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00137eb:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00137f1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00137fb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013801:	5a                   	pop    edx
c0013802:	59                   	pop    ecx
c0013803:	68 88 ec 01 c0       	push   0xc001ec88
c0013808:	50                   	push   eax
c0013809:	e8 f2 cd fe ff       	call   c0000600 <strcpy>
c001380e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013815:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013819:	83 c4 14             	add    esp,0x14
c001381c:	5b                   	pop    ebx
c001381d:	5e                   	pop    esi
c001381e:	e9 46 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013823:	90                   	nop

c0013824 <schedule()>:
c0013824:	8b 15 e4 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee4
c001382a:	85 d2                	test   edx,edx
c001382c:	74 0e                	je     c001383c <schedule()+0x18>
c001382e:	c7 05 e0 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x1
c0013838:	c3                   	ret    
c0013839:	8d 76 00             	lea    esi,[esi+0x0]
c001383c:	53                   	push   ebx
c001383d:	83 ec 14             	sub    esp,0x14
c0013840:	68 04 3f 02 c0       	push   0xc0023f04
c0013845:	e8 a6 8e 00 00       	call   c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	84 c0                	test   al,al
c001384f:	75 3b                	jne    c001388c <schedule()+0x68>
c0013851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013856:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013859:	4a                   	dec    edx
c001385a:	74 38                	je     c0013894 <schedule()+0x70>
c001385c:	83 ec 0c             	sub    esp,0xc
c001385f:	68 04 3f 02 c0       	push   0xc0023f04
c0013864:	e8 a3 8e 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013869:	c7 04 24 04 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f04
c0013870:	89 c3                	mov    ebx,eax
c0013872:	e8 9d 8e 00 00       	call   c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013877:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001387e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013881:	e8 a6 f7 ff ff       	call   c001302c <switchToThread(ThreadControlBlock*)>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	8d 76 00             	lea    esi,[esi+0x0]
c001388c:	83 c4 08             	add    esp,0x8
c001388f:	5b                   	pop    ebx
c0013890:	c3                   	ret    
c0013891:	8d 76 00             	lea    esi,[esi+0x0]
c0013894:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001389b:	83 ec 08             	sub    esp,0x8
c001389e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138a3:	50                   	push   eax
c00138a4:	68 04 3f 02 c0       	push   0xc0023f04
c00138a9:	e8 1e 8f 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	eb a9                	jmp    c001385c <schedule()+0x38>
c00138b3:	90                   	nop

c00138b4 <Semaphore::tryAcquire()>:
c00138b4:	53                   	push   ebx
c00138b5:	83 ec 08             	sub    esp,0x8
c00138b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138bc:	fa                   	cli    
c00138bd:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00138c2:	8d 50 01             	lea    edx,[eax+0x1]
c00138c5:	89 15 e8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee8,edx
c00138cb:	8b 15 e4 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee4
c00138d1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00138d4:	89 1d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ebx
c00138da:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00138dd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00138df:	7c 33                	jl     c0013914 <Semaphore::tryAcquire()+0x60>
c00138e1:	89 15 e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,edx
c00138e7:	85 d2                	test   edx,edx
c00138e9:	75 0d                	jne    c00138f8 <Semaphore::tryAcquire()+0x44>
c00138eb:	8b 15 e0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee0
c00138f1:	85 d2                	test   edx,edx
c00138f3:	75 6b                	jne    c0013960 <Semaphore::tryAcquire()+0xac>
c00138f5:	8d 76 00             	lea    esi,[esi+0x0]
c00138f8:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00138fd:	85 c0                	test   eax,eax
c00138ff:	74 0b                	je     c001390c <Semaphore::tryAcquire()+0x58>
c0013901:	8d 76 00             	lea    esi,[esi+0x0]
c0013904:	31 c0                	xor    eax,eax
c0013906:	83 c4 08             	add    esp,0x8
c0013909:	5b                   	pop    ebx
c001390a:	c3                   	ret    
c001390b:	90                   	nop
c001390c:	fb                   	sti    
c001390d:	83 c4 08             	add    esp,0x8
c0013910:	5b                   	pop    ebx
c0013911:	c3                   	ret    
c0013912:	66 90                	xchg   ax,ax
c0013914:	43                   	inc    ebx
c0013915:	89 15 e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,edx
c001391b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001391e:	85 d2                	test   edx,edx
c0013920:	75 22                	jne    c0013944 <Semaphore::tryAcquire()+0x90>
c0013922:	8b 0d e0 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee0
c0013928:	85 c9                	test   ecx,ecx
c001392a:	74 18                	je     c0013944 <Semaphore::tryAcquire()+0x90>
c001392c:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c0013936:	e8 e9 fe ff ff       	call   c0013824 <schedule()>
c001393b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013940:	48                   	dec    eax
c0013941:	8d 76 00             	lea    esi,[esi+0x0]
c0013944:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013949:	85 c0                	test   eax,eax
c001394b:	75 0b                	jne    c0013958 <Semaphore::tryAcquire()+0xa4>
c001394d:	fb                   	sti    
c001394e:	b0 01                	mov    al,0x1
c0013950:	83 c4 08             	add    esp,0x8
c0013953:	5b                   	pop    ebx
c0013954:	c3                   	ret    
c0013955:	8d 76 00             	lea    esi,[esi+0x0]
c0013958:	b0 01                	mov    al,0x1
c001395a:	83 c4 08             	add    esp,0x8
c001395d:	5b                   	pop    ebx
c001395e:	c3                   	ret    
c001395f:	90                   	nop
c0013960:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c001396a:	e8 b5 fe ff ff       	call   c0013824 <schedule()>
c001396f:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013974:	48                   	dec    eax
c0013975:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001397a:	85 c0                	test   eax,eax
c001397c:	75 86                	jne    c0013904 <Semaphore::tryAcquire()+0x50>
c001397e:	eb 8c                	jmp    c001390c <Semaphore::tryAcquire()+0x58>

c0013980 <Semaphore::assertLocked(char const*)>:
c0013980:	83 ec 0c             	sub    esp,0xc
c0013983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013987:	fa                   	cli    
c0013988:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c001398e:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0013993:	8d 48 01             	lea    ecx,[eax+0x1]
c0013996:	89 0d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ecx
c001399c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001399e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00139a1:	7c 29                	jl     c00139cc <Semaphore::assertLocked(char const*)+0x4c>
c00139a3:	90                   	nop
c00139a4:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c00139a9:	85 c0                	test   eax,eax
c00139ab:	75 0b                	jne    c00139b8 <Semaphore::assertLocked(char const*)+0x38>
c00139ad:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c00139b2:	85 c0                	test   eax,eax
c00139b4:	75 2e                	jne    c00139e4 <Semaphore::assertLocked(char const*)+0x64>
c00139b6:	66 90                	xchg   ax,ax
c00139b8:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00139bd:	48                   	dec    eax
c00139be:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00139c3:	75 03                	jne    c00139c8 <Semaphore::assertLocked(char const*)+0x48>
c00139c5:	fb                   	sti    
c00139c6:	66 90                	xchg   ax,ax
c00139c8:	83 c4 0c             	add    esp,0xc
c00139cb:	c3                   	ret    
c00139cc:	83 ec 0c             	sub    esp,0xc
c00139cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139d3:	52                   	push   edx
c00139d4:	e8 4a c7 ff ff       	call   c0010123 <KePanic(char const*)>
c00139d9:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c00139de:	83 c4 10             	add    esp,0x10
c00139e1:	48                   	dec    eax
c00139e2:	eb c0                	jmp    c00139a4 <Semaphore::assertLocked(char const*)+0x24>
c00139e4:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c00139ee:	e8 31 fe ff ff       	call   c0013824 <schedule()>
c00139f3:	eb c3                	jmp    c00139b8 <Semaphore::assertLocked(char const*)+0x38>
c00139f5:	8d 76 00             	lea    esi,[esi+0x0]

c00139f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a04:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a07:	e8 18 fe ff ff       	call   c0013824 <schedule()>
c0013a0c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013a11:	48                   	dec    eax
c0013a12:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013a17:	75 03                	jne    c0013a1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013a19:	fb                   	sti    
c0013a1a:	66 90                	xchg   ax,ax
c0013a1c:	83 c4 0c             	add    esp,0xc
c0013a1f:	c3                   	ret    

c0013a20 <blockTask(TaskState)>:
c0013a20:	83 ec 0c             	sub    esp,0xc
c0013a23:	fa                   	cli    
c0013a24:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0013a2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a33:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a36:	e8 e9 fd ff ff       	call   c0013824 <schedule()>
c0013a3b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013a40:	48                   	dec    eax
c0013a41:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013a46:	75 04                	jne    c0013a4c <blockTask(TaskState)+0x2c>
c0013a48:	fb                   	sti    
c0013a49:	8d 76 00             	lea    esi,[esi+0x0]
c0013a4c:	83 c4 0c             	add    esp,0xc
c0013a4f:	c3                   	ret    

c0013a50 <waitTask(int, int*, int)>:
c0013a50:	83 ec 18             	sub    esp,0x18
c0013a53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a5c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a68:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a6b:	6a 07                	push   0x7
c0013a6d:	e8 ae ff ff ff       	call   c0013a20 <blockTask(TaskState)>
c0013a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a7d:	85 d2                	test   edx,edx
c0013a7f:	74 0b                	je     c0013a8c <waitTask(int, int*, int)+0x3c>
c0013a81:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a84:	89 02                	mov    DWORD PTR [edx],eax
c0013a86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a8b:	90                   	nop
c0013a8c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a8f:	83 c4 0c             	add    esp,0xc
c0013a92:	c3                   	ret    
c0013a93:	90                   	nop

c0013a94 <milliTenthSleepUntil(unsigned int)>:
c0013a94:	83 ec 0c             	sub    esp,0xc
c0013a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9b:	39 05 0c 32 02 c0    	cmp    DWORD PTR ds:0xc002320c,eax
c0013aa1:	76 05                	jbe    c0013aa8 <milliTenthSleepUntil(unsigned int)+0x14>
c0013aa3:	90                   	nop
c0013aa4:	83 c4 0c             	add    esp,0xc
c0013aa7:	c3                   	ret    
c0013aa8:	fa                   	cli    
c0013aa9:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0013aaf:	83 ec 08             	sub    esp,0x8
c0013ab2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0013ab8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013abe:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013ac1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ac7:	52                   	push   edx
c0013ac8:	68 f8 3e 02 c0       	push   0xc0023ef8
c0013acd:	e8 fa 8c 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ad2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ad9:	e8 42 ff ff ff       	call   c0013a20 <blockTask(TaskState)>
c0013ade:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	48                   	dec    eax
c0013ae7:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0013aec:	85 c0                	test   eax,eax
c0013aee:	75 0c                	jne    c0013afc <milliTenthSleepUntil(unsigned int)+0x68>
c0013af0:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c0013af5:	85 c0                	test   eax,eax
c0013af7:	75 17                	jne    c0013b10 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013af9:	8d 76 00             	lea    esi,[esi+0x0]
c0013afc:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013b01:	48                   	dec    eax
c0013b02:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013b07:	75 9b                	jne    c0013aa4 <milliTenthSleepUntil(unsigned int)+0x10>
c0013b09:	fb                   	sti    
c0013b0a:	83 c4 0c             	add    esp,0xc
c0013b0d:	c3                   	ret    
c0013b0e:	66 90                	xchg   ax,ax
c0013b10:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c0013b1a:	e8 05 fd ff ff       	call   c0013824 <schedule()>
c0013b1f:	eb db                	jmp    c0013afc <milliTenthSleepUntil(unsigned int)+0x68>
c0013b21:	8d 76 00             	lea    esi,[esi+0x0]

c0013b24 <milliTenthSleep(unsigned int)>:
c0013b24:	a1 0c 32 02 c0       	mov    eax,ds:0xc002320c
c0013b29:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b2d:	e9 62 ff ff ff       	jmp    c0013a94 <milliTenthSleepUntil(unsigned int)>
c0013b32:	66 90                	xchg   ax,ax

c0013b34 <sleep(unsigned int)>:
c0013b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b38:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b3b:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b3e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b41:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b44:	c1 e0 04             	shl    eax,0x4
c0013b47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b4b:	eb d7                	jmp    c0013b24 <milliTenthSleep(unsigned int)>
c0013b4d:	90                   	nop
c0013b4e:	66 90                	xchg   ax,ax

c0013b50 <Semaphore::acquire()>:
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b57:	fa                   	cli    
c0013b58:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0013b5d:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0013b63:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b66:	89 0d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ecx
c0013b6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b6f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b71:	7d 2d                	jge    c0013ba0 <Semaphore::acquire()+0x50>
c0013b73:	41                   	inc    ecx
c0013b74:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b77:	90                   	nop
c0013b78:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0013b7d:	85 c0                	test   eax,eax
c0013b7f:	75 0b                	jne    c0013b8c <Semaphore::acquire()+0x3c>
c0013b81:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c0013b86:	85 c0                	test   eax,eax
c0013b88:	75 62                	jne    c0013bec <Semaphore::acquire()+0x9c>
c0013b8a:	66 90                	xchg   ax,ax
c0013b8c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013b91:	48                   	dec    eax
c0013b92:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013b97:	75 03                	jne    c0013b9c <Semaphore::acquire()+0x4c>
c0013b99:	fb                   	sti    
c0013b9a:	66 90                	xchg   ax,ax
c0013b9c:	83 c4 0c             	add    esp,0xc
c0013b9f:	c3                   	ret    
c0013ba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ba5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013bac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013baf:	85 c9                	test   ecx,ecx
c0013bb1:	74 4d                	je     c0013c00 <Semaphore::acquire()+0xb0>
c0013bb3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013bb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013bbc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013bbf:	90                   	nop
c0013bc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bc5:	83 ec 0c             	sub    esp,0xc
c0013bc8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013bcb:	68 08 ed 01 c0       	push   0xc001ed08
c0013bd0:	e8 03 69 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013bd5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013bdc:	e8 3f fe ff ff       	call   c0013a20 <blockTask(TaskState)>
c0013be1:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	48                   	dec    eax
c0013bea:	eb 8c                	jmp    c0013b78 <Semaphore::acquire()+0x28>
c0013bec:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c0013bf6:	e8 29 fc ff ff       	call   c0013824 <schedule()>
c0013bfb:	eb 8f                	jmp    c0013b8c <Semaphore::acquire()+0x3c>
c0013bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0013c00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013c08:	eb b6                	jmp    c0013bc0 <Semaphore::acquire()+0x70>
c0013c0a:	66 90                	xchg   ax,ax

c0013c0c <taskReturned>:
c0013c0c:	83 ec 18             	sub    esp,0x18
c0013c0f:	68 28 ed 01 c0       	push   0xc001ed28
c0013c14:	e8 0a c5 ff ff       	call   c0010123 <KePanic(char const*)>
c0013c19:	83 c4 10             	add    esp,0x10
c0013c1c:	83 ec 0c             	sub    esp,0xc
c0013c1f:	6a 02                	push   0x2
c0013c21:	e8 fa fd ff ff       	call   c0013a20 <blockTask(TaskState)>
c0013c26:	fa                   	cli    
c0013c27:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0013c2d:	e8 f2 fb ff ff       	call   c0013824 <schedule()>
c0013c32:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	48                   	dec    eax
c0013c3b:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013c40:	85 c0                	test   eax,eax
c0013c42:	75 d8                	jne    c0013c1c <taskReturned+0x10>
c0013c44:	fb                   	sti    
c0013c45:	eb d5                	jmp    c0013c1c <taskReturned+0x10>
c0013c47:	90                   	nop

c0013c48 <Thr::processFromPID(int)>:
c0013c48:	57                   	push   edi
c0013c49:	56                   	push   esi
c0013c4a:	53                   	push   ebx
c0013c4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c4f:	fa                   	cli    
c0013c50:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	68 04 3f 02 c0       	push   0xc0023f04
c0013c5e:	e8 a9 8a 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c63:	83 c4 10             	add    esp,0x10
c0013c66:	89 c7                	mov    edi,eax
c0013c68:	eb 16                	jmp    c0013c80 <Thr::processFromPID(int)+0x38>
c0013c6a:	66 90                	xchg   ax,ax
c0013c6c:	83 ec 0c             	sub    esp,0xc
c0013c6f:	68 04 3f 02 c0       	push   0xc0023f04
c0013c74:	e8 93 8a 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c79:	83 c4 10             	add    esp,0x10
c0013c7c:	39 f8                	cmp    eax,edi
c0013c7e:	74 4c                	je     c0013ccc <Thr::processFromPID(int)+0x84>
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	68 04 3f 02 c0       	push   0xc0023f04
c0013c88:	e8 7f 8a 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c8d:	c7 04 24 04 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f04
c0013c94:	89 c3                	mov    ebx,eax
c0013c96:	e8 79 8a 00 00       	call   c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c9b:	58                   	pop    eax
c0013c9c:	5a                   	pop    edx
c0013c9d:	53                   	push   ebx
c0013c9e:	68 04 3f 02 c0       	push   0xc0023f04
c0013ca3:	e8 24 8b 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ca8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	39 30                	cmp    DWORD PTR [eax],esi
c0013cb0:	75 ba                	jne    c0013c6c <Thr::processFromPID(int)+0x24>
c0013cb2:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013cb7:	48                   	dec    eax
c0013cb8:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013cbd:	74 09                	je     c0013cc8 <Thr::processFromPID(int)+0x80>
c0013cbf:	90                   	nop
c0013cc0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cc3:	5b                   	pop    ebx
c0013cc4:	5e                   	pop    esi
c0013cc5:	5f                   	pop    edi
c0013cc6:	c3                   	ret    
c0013cc7:	90                   	nop
c0013cc8:	fb                   	sti    
c0013cc9:	eb f5                	jmp    c0013cc0 <Thr::processFromPID(int)+0x78>
c0013ccb:	90                   	nop
c0013ccc:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013cd1:	48                   	dec    eax
c0013cd2:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013cd7:	75 07                	jne    c0013ce0 <Thr::processFromPID(int)+0x98>
c0013cd9:	fb                   	sti    
c0013cda:	5b                   	pop    ebx
c0013cdb:	5e                   	pop    esi
c0013cdc:	5f                   	pop    edi
c0013cdd:	c3                   	ret    
c0013cde:	66 90                	xchg   ax,ax
c0013ce0:	5b                   	pop    ebx
c0013ce1:	31 c0                	xor    eax,eax
c0013ce3:	5e                   	pop    esi
c0013ce4:	5f                   	pop    edi
c0013ce5:	c3                   	ret    
c0013ce6:	66 90                	xchg   ax,ax

c0013ce8 <unblockTask(ThreadControlBlock*)>:
c0013ce8:	53                   	push   ebx
c0013ce9:	83 ec 08             	sub    esp,0x8
c0013cec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cf0:	fa                   	cli    
c0013cf1:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0013cf7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cfa:	85 c0                	test   eax,eax
c0013cfc:	74 66                	je     c0013d64 <unblockTask(ThreadControlBlock*)+0x7c>
c0013cfe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d01:	48                   	dec    eax
c0013d02:	74 38                	je     c0013d3c <unblockTask(ThreadControlBlock*)+0x54>
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	68 04 3f 02 c0       	push   0xc0023f04
c0013d0c:	e8 fb 89 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d11:	83 c4 10             	add    esp,0x10
c0013d14:	85 c0                	test   eax,eax
c0013d16:	75 1c                	jne    c0013d34 <unblockTask(ThreadControlBlock*)+0x4c>
c0013d18:	eb 5e                	jmp    c0013d78 <unblockTask(ThreadControlBlock*)+0x90>
c0013d1a:	66 90                	xchg   ax,ax
c0013d1c:	83 ec 08             	sub    esp,0x8
c0013d1f:	50                   	push   eax
c0013d20:	68 04 3f 02 c0       	push   0xc0023f04
c0013d25:	e8 92 8d 00 00       	call   c001cabc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d2a:	83 c4 10             	add    esp,0x10
c0013d2d:	85 c0                	test   eax,eax
c0013d2f:	74 47                	je     c0013d78 <unblockTask(ThreadControlBlock*)+0x90>
c0013d31:	8d 76 00             	lea    esi,[esi+0x0]
c0013d34:	39 c3                	cmp    ebx,eax
c0013d36:	75 e4                	jne    c0013d1c <unblockTask(ThreadControlBlock*)+0x34>
c0013d38:	eb 12                	jmp    c0013d4c <unblockTask(ThreadControlBlock*)+0x64>
c0013d3a:	66 90                	xchg   ax,ax
c0013d3c:	83 ec 0c             	sub    esp,0xc
c0013d3f:	68 aa ec 01 c0       	push   0xc001ecaa
c0013d44:	e8 8f 67 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013d49:	83 c4 10             	add    esp,0x10
c0013d4c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013d51:	48                   	dec    eax
c0013d52:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0013d57:	75 03                	jne    c0013d5c <unblockTask(ThreadControlBlock*)+0x74>
c0013d59:	fb                   	sti    
c0013d5a:	66 90                	xchg   ax,ax
c0013d5c:	83 c4 08             	add    esp,0x8
c0013d5f:	5b                   	pop    ebx
c0013d60:	c3                   	ret    
c0013d61:	8d 76 00             	lea    esi,[esi+0x0]
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 93 ec 01 c0       	push   0xc001ec93
c0013d6c:	e8 67 67 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	eb d6                	jmp    c0013d4c <unblockTask(ThreadControlBlock*)+0x64>
c0013d76:	66 90                	xchg   ax,ax
c0013d78:	83 ec 08             	sub    esp,0x8
c0013d7b:	53                   	push   ebx
c0013d7c:	68 04 3f 02 c0       	push   0xc0023f04
c0013d81:	e8 46 8a 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	eb c1                	jmp    c0013d4c <unblockTask(ThreadControlBlock*)+0x64>
c0013d8b:	90                   	nop

c0013d8c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d8c:	55                   	push   ebp
c0013d8d:	57                   	push   edi
c0013d8e:	56                   	push   esi
c0013d8f:	53                   	push   ebx
c0013d90:	83 ec 1c             	sub    esp,0x1c
c0013d93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d97:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d9a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013da0:	85 ed                	test   ebp,ebp
c0013da2:	7e 24                	jle    c0013dc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013da4:	31 f6                	xor    esi,esi
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	83 ec 0c             	sub    esp,0xc
c0013dab:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013db2:	46                   	inc    esi
c0013db3:	57                   	push   edi
c0013db4:	e8 10 3a ff ff       	call   c00077c9 <free>
c0013db9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013dc5:	7f e1                	jg     c0013da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013dc7:	90                   	nop
c0013dc8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013dd2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013dd7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013dda:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ddd:	d3 c0                	rol    eax,cl
c0013ddf:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013de6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013de9:	89 f7                	mov    edi,esi
c0013deb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013df3:	0f 85 77 01 00 00    	jne    c0013f70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013df9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013dff:	85 ed                	test   ebp,ebp
c0013e01:	74 1d                	je     c0013e20 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013e03:	83 ec 0c             	sub    esp,0xc
c0013e06:	55                   	push   ebp
c0013e07:	e8 28 c0 ff ff       	call   c000fe34 <EnvVarContainer::~EnvVarContainer()>
c0013e0c:	59                   	pop    ecx
c0013e0d:	5e                   	pop    esi
c0013e0e:	6a 0c                	push   0xc
c0013e10:	55                   	push   ebp
c0013e11:	e8 cc 65 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0013e16:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	89 f7                	mov    edi,esi
c0013e1e:	66 90                	xchg   ax,ax
c0013e20:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e26:	85 c0                	test   eax,eax
c0013e28:	0f 84 b6 00 00 00    	je     c0013ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e2e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e31:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e35:	31 c9                	xor    ecx,ecx
c0013e37:	eb 17                	jmp    c0013e50 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e39:	8d 76 00             	lea    esi,[esi+0x0]
c0013e3c:	41                   	inc    ecx
c0013e3d:	83 f9 10             	cmp    ecx,0x10
c0013e40:	0f 84 9e 00 00 00    	je     c0013ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e46:	66 90                	xchg   ax,ax
c0013e48:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e4e:	66 90                	xchg   ax,ax
c0013e50:	31 d2                	xor    edx,edx
c0013e52:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e59:	d3 fa                	sar    edx,cl
c0013e5b:	83 e2 01             	and    edx,0x1
c0013e5e:	74 dc                	je     c0013e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e60:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e63:	01 d2                	add    edx,edx
c0013e65:	01 ca                	add    edx,ecx
c0013e67:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e6a:	01 d0                	add    eax,edx
c0013e6c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e72:	83 fd 07             	cmp    ebp,0x7
c0013e75:	75 c5                	jne    c0013e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e77:	05 40 02 00 00       	add    eax,0x240
c0013e7c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e7f:	83 fd ff             	cmp    ebp,0xffffffff
c0013e82:	0f 8c f0 00 00 00    	jl     c0013f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e88:	0f 84 ae 01 00 00    	je     c001403c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e8e:	85 ed                	test   ebp,ebp
c0013e90:	0f 84 92 01 00 00    	je     c0014028 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e96:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e98:	75 a2                	jne    c0013e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e9a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013ea0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ea4:	01 d0                	add    eax,edx
c0013ea6:	66 90                	xchg   ax,ax
c0013ea8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013eac:	83 ec 0c             	sub    esp,0xc
c0013eaf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013eb5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eb8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013ebe:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013ec5:	50                   	push   eax
c0013ec6:	e8 1d fe ff ff       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ed1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ed5:	89 f7                	mov    edi,esi
c0013ed7:	41                   	inc    ecx
c0013ed8:	83 f9 10             	cmp    ecx,0x10
c0013edb:	0f 85 67 ff ff ff    	jne    c0013e48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ee4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013eea:	85 c0                	test   eax,eax
c0013eec:	74 62                	je     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013eee:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013ef4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013efa:	74 54                	je     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	68 04 3f 02 c0       	push   0xc0023f04
c0013f04:	e8 03 88 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f09:	c7 04 24 04 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f04
c0013f10:	89 c7                	mov    edi,eax
c0013f12:	e8 d9 87 00 00       	call   c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	84 c0                	test   al,al
c0013f1c:	0f 84 ce 00 00 00    	je     c0013ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013f22:	66 90                	xchg   ax,ax
c0013f24:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f27:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f2d:	85 d2                	test   edx,edx
c0013f2f:	74 0f                	je     c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f31:	83 ec 0c             	sub    esp,0xc
c0013f34:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f36:	52                   	push   edx
c0013f37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f3a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f3d:	83 c4 10             	add    esp,0x10
c0013f40:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f4a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f50:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f56:	85 db                	test   ebx,ebx
c0013f58:	74 16                	je     c0013f70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f5a:	83 ec 0c             	sub    esp,0xc
c0013f5d:	53                   	push   ebx
c0013f5e:	e8 53 58 ff ff       	call   c00097b6 <VAS::~VAS()>
c0013f63:	58                   	pop    eax
c0013f64:	5a                   	pop    edx
c0013f65:	6a 14                	push   0x14
c0013f67:	53                   	push   ebx
c0013f68:	e8 75 64 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	83 c4 1c             	add    esp,0x1c
c0013f73:	5b                   	pop    ebx
c0013f74:	5e                   	pop    esi
c0013f75:	5f                   	pop    edi
c0013f76:	5d                   	pop    ebp
c0013f77:	c3                   	ret    
c0013f78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	68 5c ed 01 c0       	push   0xc001ed5c
c0013f84:	e8 9a c1 ff ff       	call   c0010123 <KePanic(char const*)>
c0013f89:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f8c:	83 c4 10             	add    esp,0x10
c0013f8f:	89 f7                	mov    edi,esi
c0013f91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f95:	e9 a2 fe ff ff       	jmp    c0013e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f9a:	66 90                	xchg   ax,ax
c0013f9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fa2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013fa8:	75 1e                	jne    c0013fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013faa:	83 ec 0c             	sub    esp,0xc
c0013fad:	68 c4 ed 01 c0       	push   0xc001edc4
c0013fb2:	e8 21 65 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013fb7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013fbe:	e8 5d fa ff ff       	call   c0013a20 <blockTask(TaskState)>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	66 90                	xchg   ax,ax
c0013fc8:	83 ec 08             	sub    esp,0x8
c0013fcb:	56                   	push   esi
c0013fcc:	68 04 3f 02 c0       	push   0xc0023f04
c0013fd1:	e8 f6 87 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fd6:	c7 04 24 04 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f04
c0013fdd:	e8 2a 87 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	39 f8                	cmp    eax,edi
c0013fe7:	0f 84 37 ff ff ff    	je     c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013fed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff0:	83 ec 0c             	sub    esp,0xc
c0013ff3:	68 04 3f 02 c0       	push   0xc0023f04
c0013ff8:	e8 0f 87 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ffd:	c7 04 24 04 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f04
c0014004:	89 c6                	mov    esi,eax
c0014006:	e8 09 87 00 00       	call   c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	39 f3                	cmp    ebx,esi
c0014010:	74 b6                	je     c0013fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014012:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014015:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014018:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001401e:	75 a8                	jne    c0013fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014020:	e9 77 ff ff ff       	jmp    c0013f9c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014025:	8d 76 00             	lea    esi,[esi+0x0]
c0014028:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001402c:	83 ec 0c             	sub    esp,0xc
c001402f:	68 90 ed 01 c0       	push   0xc001ed90
c0014034:	e9 4b ff ff ff       	jmp    c0013f84 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014039:	8d 76 00             	lea    esi,[esi+0x0]
c001403c:	8b 36                	mov    esi,DWORD PTR [esi]
c001403e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014042:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014045:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014048:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001404e:	01 d7                	add    edi,edx
c0014050:	89 f8                	mov    eax,edi
c0014052:	e9 51 fe ff ff       	jmp    c0013ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014057:	90                   	nop

c0014058 <cleanerTaskFunction(void*)>:
c0014058:	53                   	push   ebx
c0014059:	83 ec 08             	sub    esp,0x8
c001405c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014061:	48                   	dec    eax
c0014062:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0014067:	75 03                	jne    c001406c <cleanerTaskFunction(void*)+0x14>
c0014069:	fb                   	sti    
c001406a:	66 90                	xchg   ax,ax
c001406c:	fa                   	cli    
c001406d:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014072:	80 3d cc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ecc,0x0
c0014079:	8d 50 01             	lea    edx,[eax+0x1]
c001407c:	89 15 e8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee8,edx
c0014082:	0f 84 ac 00 00 00    	je     c0014134 <cleanerTaskFunction(void*)+0xdc>
c0014088:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001408d:	85 c0                	test   eax,eax
c001408f:	75 03                	jne    c0014094 <cleanerTaskFunction(void*)+0x3c>
c0014091:	fb                   	sti    
c0014092:	66 90                	xchg   ax,ax
c0014094:	c6 05 cc 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ecc,0x0
c001409b:	fa                   	cli    
c001409c:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00140a2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c00140a8:	fa                   	cli    
c00140a9:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00140af:	eb 2b                	jmp    c00140dc <cleanerTaskFunction(void*)+0x84>
c00140b1:	8d 76 00             	lea    esi,[esi+0x0]
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	68 ec 3e 02 c0       	push   0xc0023eec
c00140bc:	e8 4b 86 00 00       	call   c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140c1:	c7 04 24 ec 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eec
c00140c8:	89 c3                	mov    ebx,eax
c00140ca:	e8 45 86 00 00       	call   c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140d2:	e8 b5 fc ff ff       	call   c0013d8c <cleanupTerminatedTask(ThreadControlBlock*)>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	66 90                	xchg   ax,ax
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	68 ec 3e 02 c0       	push   0xc0023eec
c00140e4:	e8 07 86 00 00       	call   c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	84 c0                	test   al,al
c00140ee:	74 c4                	je     c00140b4 <cleanerTaskFunction(void*)+0x5c>
c00140f0:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00140f5:	48                   	dec    eax
c00140f6:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00140fb:	75 03                	jne    c0014100 <cleanerTaskFunction(void*)+0xa8>
c00140fd:	fb                   	sti    
c00140fe:	66 90                	xchg   ax,ax
c0014100:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0014105:	48                   	dec    eax
c0014106:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c001410b:	0f 85 4b ff ff ff    	jne    c001405c <cleanerTaskFunction(void*)+0x4>
c0014111:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c0014116:	85 c0                	test   eax,eax
c0014118:	0f 84 3e ff ff ff    	je     c001405c <cleanerTaskFunction(void*)+0x4>
c001411e:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c0014128:	e8 f7 f6 ff ff       	call   c0013824 <schedule()>
c001412d:	e9 2a ff ff ff       	jmp    c001405c <cleanerTaskFunction(void*)+0x4>
c0014132:	66 90                	xchg   ax,ax
c0014134:	83 ec 0c             	sub    esp,0xc
c0014137:	6a 02                	push   0x2
c0014139:	e8 ba f8 ff ff       	call   c00139f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	e9 4e ff ff ff       	jmp    c0014094 <cleanerTaskFunction(void*)+0x3c>
c0014146:	66 90                	xchg   ax,ax

c0014148 <terminateTask(int)>:
c0014148:	83 ec 14             	sub    esp,0x14
c001414b:	fa                   	cli    
c001414c:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0014152:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0014158:	fa                   	cli    
c0014159:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c001415f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014168:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001416b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014170:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014173:	50                   	push   eax
c0014174:	68 ec 3e 02 c0       	push   0xc0023eec
c0014179:	e8 4e 86 00 00       	call   c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001417e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014183:	83 c4 10             	add    esp,0x10
c0014186:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001418d:	a1 c8 3e 02 c0       	mov    eax,ds:0xc0023ec8
c0014192:	85 c0                	test   eax,eax
c0014194:	74 5e                	je     c00141f4 <terminateTask(int)+0xac>
c0014196:	83 ec 0c             	sub    esp,0xc
c0014199:	c6 05 cc 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ecc,0x1
c00141a0:	50                   	push   eax
c00141a1:	e8 42 fb ff ff       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c00141a6:	83 c4 10             	add    esp,0x10
c00141a9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ac:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00141b1:	48                   	dec    eax
c00141b2:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00141b7:	75 03                	jne    c00141bc <terminateTask(int)+0x74>
c00141b9:	fb                   	sti    
c00141ba:	66 90                	xchg   ax,ax
c00141bc:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c00141c1:	48                   	dec    eax
c00141c2:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c00141c7:	75 0b                	jne    c00141d4 <terminateTask(int)+0x8c>
c00141c9:	83 3d e0 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023ee0,0x0
c00141d0:	75 36                	jne    c0014208 <terminateTask(int)+0xc0>
c00141d2:	66 90                	xchg   ax,ax
c00141d4:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00141d9:	48                   	dec    eax
c00141da:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00141df:	75 03                	jne    c00141e4 <terminateTask(int)+0x9c>
c00141e1:	fb                   	sti    
c00141e2:	66 90                	xchg   ax,ax
c00141e4:	fa                   	cli    
c00141e5:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00141eb:	90                   	nop
c00141ec:	e8 33 f6 ff ff       	call   c0013824 <schedule()>
c00141f1:	eb e1                	jmp    c00141d4 <terminateTask(int)+0x8c>
c00141f3:	90                   	nop
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	68 c1 ec 01 c0       	push   0xc001ecc1
c00141fc:	e8 d7 62 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014201:	83 c4 10             	add    esp,0x10
c0014204:	eb a6                	jmp    c00141ac <terminateTask(int)+0x64>
c0014206:	66 90                	xchg   ax,ax
c0014208:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c0014212:	eb d8                	jmp    c00141ec <terminateTask(int)+0xa4>

c0014214 <Thr::terminateFromIRQ(int)>:
c0014214:	83 ec 18             	sub    esp,0x18
c0014217:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001421b:	50                   	push   eax
c001421c:	e8 27 ff ff ff       	call   c0014148 <terminateTask(int)>
c0014221:	90                   	nop
c0014222:	66 90                	xchg   ax,ax

c0014224 <Semaphore::release()>:
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001422b:	fa                   	cli    
c001422c:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0014231:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0014237:	8d 48 01             	lea    ecx,[eax+0x1]
c001423a:	89 0d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ecx
c0014240:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014243:	85 c9                	test   ecx,ecx
c0014245:	74 41                	je     c0014288 <Semaphore::release()+0x64>
c0014247:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001424a:	83 ec 0c             	sub    esp,0xc
c001424d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014250:	51                   	push   ecx
c0014251:	e8 92 fa ff ff       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c0014256:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	48                   	dec    eax
c001425f:	90                   	nop
c0014260:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0014265:	85 c0                	test   eax,eax
c0014267:	75 0b                	jne    c0014274 <Semaphore::release()+0x50>
c0014269:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c001426e:	85 c0                	test   eax,eax
c0014270:	75 1e                	jne    c0014290 <Semaphore::release()+0x6c>
c0014272:	66 90                	xchg   ax,ax
c0014274:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014279:	48                   	dec    eax
c001427a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001427f:	75 03                	jne    c0014284 <Semaphore::release()+0x60>
c0014281:	fb                   	sti    
c0014282:	66 90                	xchg   ax,ax
c0014284:	83 c4 0c             	add    esp,0xc
c0014287:	c3                   	ret    
c0014288:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001428b:	eb d3                	jmp    c0014260 <Semaphore::release()+0x3c>
c001428d:	8d 76 00             	lea    esi,[esi+0x0]
c0014290:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c001429a:	e8 85 f5 ff ff       	call   c0013824 <schedule()>
c001429f:	eb d3                	jmp    c0014274 <Semaphore::release()+0x50>
c00142a1:	8d 76 00             	lea    esi,[esi+0x0]

c00142a4 <__static_initialization_and_destruction_0(int, int)>:
c00142a4:	83 ec 0c             	sub    esp,0xc
c00142a7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00142ac:	0f 85 8e 00 00 00    	jne    c0014340 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00142ba:	0f 85 80 00 00 00    	jne    c0014340 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142c0:	83 ec 0c             	sub    esp,0xc
c00142c3:	68 04 3f 02 c0       	push   0xc0023f04
c00142c8:	e8 ab 87 00 00       	call   c001ca78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142cd:	83 c4 10             	add    esp,0x10
c00142d0:	83 ec 04             	sub    esp,0x4
c00142d3:	68 74 f8 01 c0       	push   0xc001f874
c00142d8:	68 04 3f 02 c0       	push   0xc0023f04
c00142dd:	68 28 ca 01 c0       	push   0xc001ca28
c00142e2:	e8 ab 60 ff ff       	call   c000a392 <__cxa_atexit>
c00142e7:	83 c4 10             	add    esp,0x10
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	68 f8 3e 02 c0       	push   0xc0023ef8
c00142f2:	e8 81 87 00 00       	call   c001ca78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	83 ec 04             	sub    esp,0x4
c00142fd:	68 74 f8 01 c0       	push   0xc001f874
c0014302:	68 f8 3e 02 c0       	push   0xc0023ef8
c0014307:	68 28 ca 01 c0       	push   0xc001ca28
c001430c:	e8 81 60 ff ff       	call   c000a392 <__cxa_atexit>
c0014311:	83 c4 10             	add    esp,0x10
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	68 ec 3e 02 c0       	push   0xc0023eec
c001431c:	e8 57 87 00 00       	call   c001ca78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	83 ec 04             	sub    esp,0x4
c0014327:	68 74 f8 01 c0       	push   0xc001f874
c001432c:	68 ec 3e 02 c0       	push   0xc0023eec
c0014331:	68 28 ca 01 c0       	push   0xc001ca28
c0014336:	e8 57 60 ff ff       	call   c000a392 <__cxa_atexit>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	66 90                	xchg   ax,ax
c0014340:	90                   	nop
c0014341:	83 c4 0c             	add    esp,0xc
c0014344:	c3                   	ret    
c0014345:	8d 76 00             	lea    esi,[esi+0x0]

c0014348 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014348:	83 ec 0c             	sub    esp,0xc
c001434b:	83 ec 08             	sub    esp,0x8
c001434e:	68 ff ff 00 00       	push   0xffff
c0014353:	6a 01                	push   0x1
c0014355:	e8 4a ff ff ff       	call   c00142a4 <__static_initialization_and_destruction_0(int, int)>
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	83 c4 0c             	add    esp,0xc
c0014360:	c3                   	ret    

c0014361 <Vm::inbv(unsigned short)>:
c0014361:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014365:	66 81 fa fe fe       	cmp    dx,0xfefe
c001436a:	75 06                	jne    c0014372 <Vm::inbv(unsigned short)+0x11>
c001436c:	a0 4c 3f 02 c0       	mov    al,ds:0xc0023f4c
c0014371:	c3                   	ret    
c0014372:	ec                   	in     al,dx
c0014373:	c3                   	ret    

c0014374 <Vm::outbv(unsigned short, unsigned char)>:
c0014374:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001437c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014381:	75 25                	jne    c00143a8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014383:	8b 0d 4c 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f4c
c0014389:	8d 51 01             	lea    edx,[ecx+0x1]
c001438c:	88 81 60 3f 02 c0    	mov    BYTE PTR [ecx-0x3ffdc0a0],al
c0014392:	89 15 4c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f4c,edx
c0014398:	83 fa 20             	cmp    edx,0x20
c001439b:	75 0c                	jne    c00143a9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001439d:	c7 05 4c 3f 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023f4c,0x1f
c00143a7:	c3                   	ret    
c00143a8:	ee                   	out    dx,al
c00143a9:	c3                   	ret    

c00143aa <Vm::realToLinear(unsigned short, unsigned short)>:
c00143aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00143b4:	c1 e0 04             	shl    eax,0x4
c00143b7:	01 d0                	add    eax,edx
c00143b9:	c3                   	ret    

c00143ba <Vm::getSegment(unsigned int)>:
c00143ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143be:	c1 e8 10             	shr    eax,0x10
c00143c1:	c3                   	ret    

c00143c2 <Vm::getOffset(unsigned int)>:
c00143c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143c6:	c3                   	ret    

c00143c7 <Vm::mainloop2()>:
c00143c7:	83 ec 18             	sub    esp,0x18
c00143ca:	fa                   	cli    
c00143cb:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00143d1:	6a 02                	push   0x2
c00143d3:	c6 05 45 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f45,0x1
c00143da:	e8 19 f6 ff ff       	call   c00139f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00143e8:	52                   	push   edx
c00143e9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00143ed:	52                   	push   edx
c00143ee:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00143f2:	52                   	push   edx
c00143f3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00143f7:	50                   	push   eax
c00143f8:	e8 12 be fe ff       	call   c000020f <goToVM86>
c00143fd:	83 c4 2c             	add    esp,0x2c
c0014400:	c3                   	ret    

c0014401 <Vm::mainVm8086Loop(void*)>:
c0014401:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014406:	48                   	dec    eax
c0014407:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001440c:	75 01                	jne    c001440f <Vm::mainVm8086Loop(void*)+0xe>
c001440e:	fb                   	sti    
c001440f:	eb b6                	jmp    c00143c7 <Vm::mainloop2()>

c0014411 <Vm::mainloop3(unsigned long)>:
c0014411:	83 ec 18             	sub    esp,0x18
c0014414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014418:	fa                   	cli    
c0014419:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c001441f:	6a 02                	push   0x2
c0014421:	c6 05 44 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f44,0x1
c0014428:	a3 40 3f 02 c0       	mov    ds:0xc0023f40,eax
c001442d:	e8 c6 f5 ff ff       	call   c00139f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014432:	83 c4 1c             	add    esp,0x1c
c0014435:	eb 90                	jmp    c00143c7 <Vm::mainloop2()>

c0014437 <Vm::initialise8086()>:
c0014437:	83 ec 0c             	sub    esp,0xc
c001443a:	68 80 00 00 00       	push   0x80
c001443f:	6a 00                	push   0x0
c0014441:	68 01 44 01 c0       	push   0xc0014401
c0014446:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c001444c:	e8 b3 f1 ff ff       	call   c0013604 <Process::createThread(void (*)(void*), void*, int)>
c0014451:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014458:	a3 48 3f 02 c0       	mov    ds:0xc0023f48,eax
c001445d:	68 00 01 00 00       	push   0x100
c0014462:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0014467:	6a 00                	push   0x0
c0014469:	6a 00                	push   0x0
c001446b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014471:	e8 9e 57 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014476:	83 c4 2c             	add    esp,0x2c
c0014479:	c3                   	ret    

c001447a <Vm::finish8086()>:
c001447a:	53                   	push   ebx
c001447b:	83 ec 08             	sub    esp,0x8
c001447e:	fa                   	cli    
c001447f:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c0014485:	80 3d 44 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f44,0x0
c001448c:	75 15                	jne    c00144a3 <Vm::finish8086()+0x29>
c001448e:	e8 91 f3 ff ff       	call   c0013824 <schedule()>
c0014493:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014498:	48                   	dec    eax
c0014499:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001449e:	75 de                	jne    c001447e <Vm::finish8086()+0x4>
c00144a0:	fb                   	sti    
c00144a1:	eb db                	jmp    c001447e <Vm::finish8086()+0x4>
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	8b 1d 40 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f40
c00144ac:	ff 35 48 3f 02 c0    	push   DWORD PTR ds:0xc0023f48
c00144b2:	c6 05 44 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023f44,0x0
c00144b9:	e8 2a f8 ff ff       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c00144be:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00144c3:	83 c4 10             	add    esp,0x10
c00144c6:	8d 50 ff             	lea    edx,[eax-0x1]
c00144c9:	89 15 e8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee8,edx
c00144cf:	85 d2                	test   edx,edx
c00144d1:	75 01                	jne    c00144d4 <Vm::finish8086()+0x5a>
c00144d3:	fb                   	sti    
c00144d4:	89 d8                	mov    eax,ebx
c00144d6:	83 c4 08             	add    esp,0x8
c00144d9:	5b                   	pop    ebx
c00144da:	c3                   	ret    

c00144db <Vm::getOutput8086(unsigned char*)>:
c00144db:	57                   	push   edi
c00144dc:	8b 0d 4c 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f4c
c00144e2:	56                   	push   esi
c00144e3:	be 60 3f 02 c0       	mov    esi,0xc0023f60
c00144e8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144ee:	a1 4c 3f 02 c0       	mov    eax,ds:0xc0023f4c
c00144f3:	5e                   	pop    esi
c00144f4:	c7 05 4c 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f4c,0x0
c00144fe:	5f                   	pop    edi
c00144ff:	c3                   	ret    

c0014500 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014500:	55                   	push   ebp
c0014501:	57                   	push   edi
c0014502:	56                   	push   esi
c0014503:	53                   	push   ebx
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001450b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001450f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014513:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014517:	fa                   	cli    
c0014518:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c001451e:	80 3d 45 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f45,0x0
c0014525:	75 15                	jne    c001453c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014527:	e8 f8 f2 ff ff       	call   c0013824 <schedule()>
c001452c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014531:	48                   	dec    eax
c0014532:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0014537:	75 de                	jne    c0014517 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014539:	fb                   	sti    
c001453a:	eb db                	jmp    c0014517 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001453c:	a1 48 3f 02 c0       	mov    eax,ds:0xc0023f48
c0014541:	c7 05 4c 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f4c,0x0
c001454b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001454f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014553:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014557:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001455b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001455f:	0f b7 ff             	movzx  edi,di
c0014562:	0f b7 f6             	movzx  esi,si
c0014565:	50                   	push   eax
c0014566:	6a 20                	push   0x20
c0014568:	6a 00                	push   0x0
c001456a:	68 60 3f 02 c0       	push   0xc0023f60
c001456f:	e8 5c bf fe ff       	call   c00004d0 <memset>
c0014574:	5a                   	pop    edx
c0014575:	59                   	pop    ecx
c0014576:	57                   	push   edi
c0014577:	56                   	push   esi
c0014578:	e8 2d fe ff ff       	call   c00143aa <Vm::realToLinear(unsigned short, unsigned short)>
c001457d:	83 c4 10             	add    esp,0x10
c0014580:	89 c7                	mov    edi,eax
c0014582:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014586:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001458a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001458c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014591:	c6 05 45 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023f45,0x0
c0014598:	48                   	dec    eax
c0014599:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001459e:	75 01                	jne    c00145a1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00145a0:	fb                   	sti    
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	ff 35 48 3f 02 c0    	push   DWORD PTR ds:0xc0023f48
c00145aa:	e8 39 f7 ff ff       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c00145af:	83 c4 1c             	add    esp,0x1c
c00145b2:	b0 01                	mov    al,0x1
c00145b4:	5b                   	pop    ebx
c00145b5:	5e                   	pop    esi
c00145b6:	5f                   	pop    edi
c00145b7:	5d                   	pop    ebp
c00145b8:	c3                   	ret    

c00145b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145b9:	55                   	push   ebp
c00145ba:	57                   	push   edi
c00145bb:	56                   	push   esi
c00145bc:	53                   	push   ebx
c00145bd:	83 ec 2c             	sub    esp,0x2c
c00145c0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00145c4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00145c8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00145cc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00145d0:	fa                   	cli    
c00145d1:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c00145d7:	0f b6 35 45 3f 02 c0 	movzx  esi,BYTE PTR ds:0xc0023f45
c00145de:	89 f0                	mov    eax,esi
c00145e0:	84 c0                	test   al,al
c00145e2:	75 1d                	jne    c0014601 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00145e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00145e8:	e8 37 f2 ff ff       	call   c0013824 <schedule()>
c00145ed:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00145f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145f6:	48                   	dec    eax
c00145f7:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00145fc:	75 d2                	jne    c00145d0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145fe:	fb                   	sti    
c00145ff:	eb cf                	jmp    c00145d0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014601:	a1 48 3f 02 c0       	mov    eax,ds:0xc0023f48
c0014606:	c7 05 4c 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f4c,0x0
c0014610:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014614:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014618:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001461c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014620:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014624:	50                   	push   eax
c0014625:	6a 20                	push   0x20
c0014627:	6a 00                	push   0x0
c0014629:	68 60 3f 02 c0       	push   0xc0023f60
c001462e:	e8 9d be fe ff       	call   c00004d0 <memset>
c0014633:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001463a:	e8 7a 31 ff ff       	call   c00077b9 <malloc>
c001463f:	83 c4 0c             	add    esp,0xc
c0014642:	89 c3                	mov    ebx,eax
c0014644:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c001464a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001464e:	50                   	push   eax
c001464f:	e8 fa 63 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0014654:	83 c4 10             	add    esp,0x10
c0014657:	85 db                	test   ebx,ebx
c0014659:	75 0a                	jne    c0014665 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001465b:	83 ec 0c             	sub    esp,0xc
c001465e:	68 ec ed 01 c0       	push   0xc001edec
c0014663:	eb 3e                	jmp    c00146a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014665:	50                   	push   eax
c0014666:	8d 44 24 17          	lea    eax,[esp+0x17]
c001466a:	50                   	push   eax
c001466b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001466f:	50                   	push   eax
c0014670:	53                   	push   ebx
c0014671:	e8 44 67 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0014676:	83 c4 10             	add    esp,0x10
c0014679:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001467e:	74 0a                	je     c001468a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014680:	83 ec 0c             	sub    esp,0xc
c0014683:	68 00 ee 01 c0       	push   0xc001ee00
c0014688:	eb 19                	jmp    c00146a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001468a:	51                   	push   ecx
c001468b:	51                   	push   ecx
c001468c:	6a 01                	push   0x1
c001468e:	53                   	push   ebx
c001468f:	e8 7a 64 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0014694:	83 c4 10             	add    esp,0x10
c0014697:	85 c0                	test   eax,eax
c0014699:	74 24                	je     c00146bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001469b:	83 ec 0c             	sub    esp,0xc
c001469e:	68 19 ee 01 c0       	push   0xc001ee19
c00146a3:	e8 7b ba ff ff       	call   c0010123 <KePanic(char const*)>
c00146a8:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	48                   	dec    eax
c00146b1:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c00146b6:	85 c0                	test   eax,eax
c00146b8:	75 01                	jne    c00146bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00146ba:	fb                   	sti    
c00146bb:	31 f6                	xor    esi,esi
c00146bd:	eb 58                	jmp    c0014717 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00146bf:	0f b7 ed             	movzx  ebp,bp
c00146c2:	50                   	push   eax
c00146c3:	0f b7 ff             	movzx  edi,di
c00146c6:	50                   	push   eax
c00146c7:	55                   	push   ebp
c00146c8:	57                   	push   edi
c00146c9:	e8 dc fc ff ff       	call   c00143aa <Vm::realToLinear(unsigned short, unsigned short)>
c00146ce:	5a                   	pop    edx
c00146cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00146d1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00146d5:	51                   	push   ecx
c00146d6:	50                   	push   eax
c00146d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146df:	53                   	push   ebx
c00146e0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00146e3:	83 c4 14             	add    esp,0x14
c00146e6:	53                   	push   ebx
c00146e7:	e8 80 64 ff ff       	call   c000ab6c <File::close()>
c00146ec:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00146f1:	83 c4 10             	add    esp,0x10
c00146f4:	48                   	dec    eax
c00146f5:	c6 05 45 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023f45,0x0
c00146fc:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0014701:	85 c0                	test   eax,eax
c0014703:	75 01                	jne    c0014706 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014705:	fb                   	sti    
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	ff 35 48 3f 02 c0    	push   DWORD PTR ds:0xc0023f48
c001470f:	e8 d4 f5 ff ff       	call   c0013ce8 <unblockTask(ThreadControlBlock*)>
c0014714:	83 c4 10             	add    esp,0x10
c0014717:	83 c4 2c             	add    esp,0x2c
c001471a:	89 f0                	mov    eax,esi
c001471c:	5b                   	pop    ebx
c001471d:	5e                   	pop    esi
c001471e:	5f                   	pop    edi
c001471f:	5d                   	pop    ebp
c0014720:	c3                   	ret    

c0014721 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014721:	57                   	push   edi
c0014722:	56                   	push   esi
c0014723:	53                   	push   ebx
c0014724:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001472c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014730:	83 e8 06             	sub    eax,0x6
c0014733:	0f b7 c0             	movzx  eax,ax
c0014736:	50                   	push   eax
c0014737:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001473c:	50                   	push   eax
c001473d:	e8 68 fc ff ff       	call   c00143aa <Vm::realToLinear(unsigned short, unsigned short)>
c0014742:	5a                   	pop    edx
c0014743:	5e                   	pop    esi
c0014744:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014747:	8d 56 fa             	lea    edx,[esi-0x6]
c001474a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014750:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014753:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014756:	83 c2 02             	add    edx,0x2
c0014759:	66 89 10             	mov    WORD PTR [eax],dx
c001475c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001475f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014763:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014766:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001476a:	89 d6                	mov    esi,edx
c001476c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014772:	66 81 e6 ff fd       	and    si,0xfdff
c0014777:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001477b:	74 07                	je     c0014784 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001477d:	89 d6                	mov    esi,edx
c001477f:	66 81 ce 00 02       	or     si,0x200
c0014784:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001478d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014791:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014799:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001479c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00147a4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00147a7:	5b                   	pop    ebx
c00147a8:	5e                   	pop    esi
c00147a9:	5f                   	pop    edi
c00147aa:	c3                   	ret    

c00147ab <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00147ab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147b0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147b5:	c1 e0 04             	shl    eax,0x4
c00147b8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00147bb:	c3                   	ret    

c00147bc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00147bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147c1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147c6:	c1 e0 04             	shl    eax,0x4
c00147c9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00147cd:	c3                   	ret    

c00147ce <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00147ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147d8:	c1 e0 04             	shl    eax,0x4
c00147db:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00147de:	c3                   	ret    

c00147df <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00147df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147e9:	c1 e0 04             	shl    eax,0x4
c00147ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147f0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00147f3:	c3                   	ret    

c00147f4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00147f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147fe:	c1 e0 04             	shl    eax,0x4
c0014801:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014805:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014809:	c3                   	ret    

c001480a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001480a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001480f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014814:	c1 e0 04             	shl    eax,0x4
c0014817:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001481b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001481e:	c3                   	ret    

c001481f <Vm::faultHandler(regs*)>:
c001481f:	55                   	push   ebp
c0014820:	57                   	push   edi
c0014821:	56                   	push   esi
c0014822:	53                   	push   ebx
c0014823:	83 ec 1c             	sub    esp,0x1c
c0014826:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001482a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001482d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014831:	0f b7 f8             	movzx  edi,ax
c0014834:	52                   	push   edx
c0014835:	0f b7 c0             	movzx  eax,ax
c0014838:	50                   	push   eax
c0014839:	e8 6c fb ff ff       	call   c00143aa <Vm::realToLinear(unsigned short, unsigned short)>
c001483e:	5a                   	pop    edx
c001483f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014842:	59                   	pop    ecx
c0014843:	89 c1                	mov    ecx,eax
c0014845:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001484c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014851:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014855:	0f b7 c5             	movzx  eax,bp
c0014858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014860:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014864:	e8 41 fb ff ff       	call   c00143aa <Vm::realToLinear(unsigned short, unsigned short)>
c0014869:	5e                   	pop    esi
c001486a:	be 06 00 00 00       	mov    esi,0x6
c001486f:	5a                   	pop    edx
c0014870:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014875:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001487a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001487d:	80 fa 9d             	cmp    dl,0x9d
c0014880:	0f 84 2c 02 00 00    	je     c0014ab2 <Vm::faultHandler(regs*)+0x293>
c0014886:	0f 87 91 00 00 00    	ja     c001491d <Vm::faultHandler(regs*)+0xfe>
c001488c:	80 fa 66             	cmp    dl,0x66
c001488f:	0f 84 98 01 00 00    	je     c0014a2d <Vm::faultHandler(regs*)+0x20e>
c0014895:	77 47                	ja     c00148de <Vm::faultHandler(regs*)+0xbf>
c0014897:	80 fa 36             	cmp    dl,0x36
c001489a:	0f 84 80 01 00 00    	je     c0014a20 <Vm::faultHandler(regs*)+0x201>
c00148a0:	77 1a                	ja     c00148bc <Vm::faultHandler(regs*)+0x9d>
c00148a2:	80 fa 26             	cmp    dl,0x26
c00148a5:	0f 84 4e 01 00 00    	je     c00149f9 <Vm::faultHandler(regs*)+0x1da>
c00148ab:	80 fa 2e             	cmp    dl,0x2e
c00148ae:	0f 85 e2 05 00 00    	jne    c0014e96 <Vm::faultHandler(regs*)+0x677>
c00148b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148b7:	31 f6                	xor    esi,esi
c00148b9:	41                   	inc    ecx
c00148ba:	eb be                	jmp    c001487a <Vm::faultHandler(regs*)+0x5b>
c00148bc:	80 fa 64             	cmp    dl,0x64
c00148bf:	0f 84 41 01 00 00    	je     c0014a06 <Vm::faultHandler(regs*)+0x1e7>
c00148c5:	0f 87 48 01 00 00    	ja     c0014a13 <Vm::faultHandler(regs*)+0x1f4>
c00148cb:	80 fa 3e             	cmp    dl,0x3e
c00148ce:	0f 85 c2 05 00 00    	jne    c0014e96 <Vm::faultHandler(regs*)+0x677>
c00148d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148d7:	be 01 00 00 00       	mov    esi,0x1
c00148dc:	eb db                	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c00148de:	80 fa 6d             	cmp    dl,0x6d
c00148e1:	0f 84 ec 02 00 00    	je     c0014bd3 <Vm::faultHandler(regs*)+0x3b4>
c00148e7:	77 17                	ja     c0014900 <Vm::faultHandler(regs*)+0xe1>
c00148e9:	80 fa 67             	cmp    dl,0x67
c00148ec:	0f 84 48 01 00 00    	je     c0014a3a <Vm::faultHandler(regs*)+0x21b>
c00148f2:	80 fa 6c             	cmp    dl,0x6c
c00148f5:	0f 84 69 02 00 00    	je     c0014b64 <Vm::faultHandler(regs*)+0x345>
c00148fb:	e9 96 05 00 00       	jmp    c0014e96 <Vm::faultHandler(regs*)+0x677>
c0014900:	80 fa 6f             	cmp    dl,0x6f
c0014903:	0f 84 f4 03 00 00    	je     c0014cfd <Vm::faultHandler(regs*)+0x4de>
c0014909:	0f 82 59 03 00 00    	jb     c0014c68 <Vm::faultHandler(regs*)+0x449>
c001490f:	80 fa 9c             	cmp    dl,0x9c
c0014912:	0f 84 2f 01 00 00    	je     c0014a47 <Vm::faultHandler(regs*)+0x228>
c0014918:	e9 79 05 00 00       	jmp    c0014e96 <Vm::faultHandler(regs*)+0x677>
c001491d:	80 fa ec             	cmp    dl,0xec
c0014920:	0f 84 14 05 00 00    	je     c0014e3a <Vm::faultHandler(regs*)+0x61b>
c0014926:	77 7b                	ja     c00149a3 <Vm::faultHandler(regs*)+0x184>
c0014928:	80 fa e4             	cmp    dl,0xe4
c001492b:	0f 84 93 04 00 00    	je     c0014dc4 <Vm::faultHandler(regs*)+0x5a5>
c0014931:	77 53                	ja     c0014986 <Vm::faultHandler(regs*)+0x167>
c0014933:	80 fa cd             	cmp    dl,0xcd
c0014936:	0f 84 d9 01 00 00    	je     c0014b15 <Vm::faultHandler(regs*)+0x2f6>
c001493c:	80 fa cf             	cmp    dl,0xcf
c001493f:	0f 85 51 05 00 00    	jne    c0014e96 <Vm::faultHandler(regs*)+0x677>
c0014945:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014948:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001494b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001494f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014952:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014956:	81 ca 00 02 02 00    	or     edx,0x20200
c001495c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001495f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014963:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014969:	66 c1 e8 09          	shr    ax,0x9
c001496d:	83 e0 01             	and    eax,0x1
c0014970:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014973:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014976:	83 c0 06             	add    eax,0x6
c0014979:	25 ff ff 00 00       	and    eax,0xffff
c001497e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014981:	e9 0c 05 00 00       	jmp    c0014e92 <Vm::faultHandler(regs*)+0x673>
c0014986:	80 fa e6             	cmp    dl,0xe6
c0014989:	0f 84 7f 04 00 00    	je     c0014e0e <Vm::faultHandler(regs*)+0x5ef>
c001498f:	0f 82 4b 04 00 00    	jb     c0014de0 <Vm::faultHandler(regs*)+0x5c1>
c0014995:	80 fa e7             	cmp    dl,0xe7
c0014998:	0f 84 87 04 00 00    	je     c0014e25 <Vm::faultHandler(regs*)+0x606>
c001499e:	e9 f3 04 00 00       	jmp    c0014e96 <Vm::faultHandler(regs*)+0x677>
c00149a3:	80 fa ef             	cmp    dl,0xef
c00149a6:	0f 84 d1 04 00 00    	je     c0014e7d <Vm::faultHandler(regs*)+0x65e>
c00149ac:	77 28                	ja     c00149d6 <Vm::faultHandler(regs*)+0x1b7>
c00149ae:	80 fa ed             	cmp    dl,0xed
c00149b1:	0f 84 9f 04 00 00    	je     c0014e56 <Vm::faultHandler(regs*)+0x637>
c00149b7:	80 fa ee             	cmp    dl,0xee
c00149ba:	0f 85 d6 04 00 00    	jne    c0014e96 <Vm::faultHandler(regs*)+0x677>
c00149c0:	50                   	push   eax
c00149c1:	50                   	push   eax
c00149c2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00149c6:	50                   	push   eax
c00149c7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149cb:	50                   	push   eax
c00149cc:	e8 a3 f9 ff ff       	call   c0014374 <Vm::outbv(unsigned short, unsigned char)>
c00149d1:	e9 9f 04 00 00       	jmp    c0014e75 <Vm::faultHandler(regs*)+0x656>
c00149d6:	80 fa fa             	cmp    dl,0xfa
c00149d9:	0f 84 69 01 00 00    	je     c0014b48 <Vm::faultHandler(regs*)+0x329>
c00149df:	80 fa fb             	cmp    dl,0xfb
c00149e2:	0f 84 6e 01 00 00    	je     c0014b56 <Vm::faultHandler(regs*)+0x337>
c00149e8:	80 fa f3             	cmp    dl,0xf3
c00149eb:	0f 85 a5 04 00 00    	jne    c0014e96 <Vm::faultHandler(regs*)+0x677>
c00149f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149f4:	e9 c0 fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c00149f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149fc:	be 02 00 00 00       	mov    esi,0x2
c0014a01:	e9 b3 fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c0014a06:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a09:	be 03 00 00 00       	mov    esi,0x3
c0014a0e:	e9 a6 fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c0014a13:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a16:	be 04 00 00 00       	mov    esi,0x4
c0014a1b:	e9 99 fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c0014a20:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a23:	be 05 00 00 00       	mov    esi,0x5
c0014a28:	e9 8c fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c0014a2d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a30:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a35:	e9 7f fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c0014a3a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a3d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a42:	e9 72 fe ff ff       	jmp    c00148b9 <Vm::faultHandler(regs*)+0x9a>
c0014a47:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a53:	74 30                	je     c0014a85 <Vm::faultHandler(regs*)+0x266>
c0014a55:	83 e9 04             	sub    ecx,0x4
c0014a58:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a5e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a64:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a67:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a6a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a70:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a74:	0f 84 15 04 00 00    	je     c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014a7a:	80 ce 02             	or     dh,0x2
c0014a7d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a80:	e9 0a 04 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014a85:	83 e9 02             	sub    ecx,0x2
c0014a88:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a8e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a91:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a95:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a9b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a9f:	74 05                	je     c0014aa6 <Vm::faultHandler(regs*)+0x287>
c0014aa1:	80 ce 02             	or     dh,0x2
c0014aa4:	eb 03                	jmp    c0014aa9 <Vm::faultHandler(regs*)+0x28a>
c0014aa6:	80 e6 fd             	and    dh,0xfd
c0014aa9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014aad:	e9 dd 03 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014ab2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ab7:	74 2a                	je     c0014ae3 <Vm::faultHandler(regs*)+0x2c4>
c0014ab9:	8b 10                	mov    edx,DWORD PTR [eax]
c0014abb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014ac1:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ac7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014acc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014ad2:	c1 e8 09             	shr    eax,0x9
c0014ad5:	83 e0 01             	and    eax,0x1
c0014ad8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014adb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ade:	83 c0 04             	add    eax,0x4
c0014ae1:	eb 25                	jmp    c0014b08 <Vm::faultHandler(regs*)+0x2e9>
c0014ae3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014ae6:	81 ca 00 02 02 00    	or     edx,0x20200
c0014aec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014aef:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014af2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014af8:	66 c1 e8 09          	shr    ax,0x9
c0014afc:	83 e0 01             	and    eax,0x1
c0014aff:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b02:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b05:	83 c0 02             	add    eax,0x2
c0014b08:	25 ff ff 00 00       	and    eax,0xffff
c0014b0d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b10:	e9 7a 03 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014b15:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b19:	3c ee                	cmp    al,0xee
c0014b1b:	75 10                	jne    c0014b2d <Vm::faultHandler(regs*)+0x30e>
c0014b1d:	83 ec 0c             	sub    esp,0xc
c0014b20:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014b23:	e8 e9 f8 ff ff       	call   c0014411 <Vm::mainloop3(unsigned long)>
c0014b28:	e9 4b 03 00 00       	jmp    c0014e78 <Vm::faultHandler(regs*)+0x659>
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b38:	51                   	push   ecx
c0014b39:	50                   	push   eax
c0014b3a:	53                   	push   ebx
c0014b3b:	e8 e1 fb ff ff       	call   c0014721 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b40:	83 c4 20             	add    esp,0x20
c0014b43:	e9 4a 03 00 00       	jmp    c0014e92 <Vm::faultHandler(regs*)+0x673>
c0014b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b4d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b51:	e9 39 03 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014b56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b5b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b5f:	e9 2b 03 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014b64:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b67:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b6c:	74 2b                	je     c0014b99 <Vm::faultHandler(regs*)+0x37a>
c0014b6e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b75:	76 22                	jbe    c0014b99 <Vm::faultHandler(regs*)+0x37a>
c0014b77:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b7b:	50                   	push   eax
c0014b7c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b80:	50                   	push   eax
c0014b81:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b85:	50                   	push   eax
c0014b86:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b8a:	50                   	push   eax
c0014b8b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b8f:	50                   	push   eax
c0014b90:	6a 6c                	push   0x6c
c0014b92:	6a 6c                	push   0x6c
c0014b94:	e9 b9 01 00 00       	jmp    c0014d52 <Vm::faultHandler(regs*)+0x533>
c0014b99:	83 ec 0c             	sub    esp,0xc
c0014b9c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ba0:	0f b7 f6             	movzx  esi,si
c0014ba3:	50                   	push   eax
c0014ba4:	e8 b8 f7 ff ff       	call   c0014361 <Vm::inbv(unsigned short)>
c0014ba9:	83 c4 0c             	add    esp,0xc
c0014bac:	0f b6 c0             	movzx  eax,al
c0014baf:	50                   	push   eax
c0014bb0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014bb4:	50                   	push   eax
c0014bb5:	56                   	push   esi
c0014bb6:	e8 24 fc ff ff       	call   c00147df <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bc1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bc5:	74 03                	je     c0014bca <Vm::faultHandler(regs*)+0x3ab>
c0014bc7:	48                   	dec    eax
c0014bc8:	eb 01                	jmp    c0014bcb <Vm::faultHandler(regs*)+0x3ac>
c0014bca:	40                   	inc    eax
c0014bcb:	0f b7 c0             	movzx  eax,ax
c0014bce:	e9 8d 00 00 00       	jmp    c0014c60 <Vm::faultHandler(regs*)+0x441>
c0014bd3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014bd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bd9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bde:	74 29                	je     c0014c09 <Vm::faultHandler(regs*)+0x3ea>
c0014be0:	3d ff ff 00 00       	cmp    eax,0xffff
c0014be5:	76 22                	jbe    c0014c09 <Vm::faultHandler(regs*)+0x3ea>
c0014be7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014beb:	50                   	push   eax
c0014bec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bf0:	50                   	push   eax
c0014bf1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bf5:	50                   	push   eax
c0014bf6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bfa:	50                   	push   eax
c0014bfb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bff:	50                   	push   eax
c0014c00:	6a 6d                	push   0x6d
c0014c02:	6a 6d                	push   0x6d
c0014c04:	e9 49 01 00 00       	jmp    c0014d52 <Vm::faultHandler(regs*)+0x533>
c0014c09:	0f b7 c8             	movzx  ecx,ax
c0014c0c:	0f b7 f6             	movzx  esi,si
c0014c0f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c12:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c17:	74 20                	je     c0014c39 <Vm::faultHandler(regs*)+0x41a>
c0014c19:	ed                   	in     eax,dx
c0014c1a:	55                   	push   ebp
c0014c1b:	50                   	push   eax
c0014c1c:	51                   	push   ecx
c0014c1d:	56                   	push   esi
c0014c1e:	e8 e7 fb ff ff       	call   c001480a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014c23:	83 c4 10             	add    esp,0x10
c0014c26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c29:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c2d:	74 05                	je     c0014c34 <Vm::faultHandler(regs*)+0x415>
c0014c2f:	83 e8 04             	sub    eax,0x4
c0014c32:	eb 27                	jmp    c0014c5b <Vm::faultHandler(regs*)+0x43c>
c0014c34:	83 c0 04             	add    eax,0x4
c0014c37:	eb 22                	jmp    c0014c5b <Vm::faultHandler(regs*)+0x43c>
c0014c39:	66 ed                	in     ax,dx
c0014c3b:	0f b7 c0             	movzx  eax,ax
c0014c3e:	57                   	push   edi
c0014c3f:	50                   	push   eax
c0014c40:	51                   	push   ecx
c0014c41:	56                   	push   esi
c0014c42:	e8 ad fb ff ff       	call   c00147f4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c47:	83 c4 10             	add    esp,0x10
c0014c4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c4d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c51:	74 05                	je     c0014c58 <Vm::faultHandler(regs*)+0x439>
c0014c53:	83 e8 02             	sub    eax,0x2
c0014c56:	eb 03                	jmp    c0014c5b <Vm::faultHandler(regs*)+0x43c>
c0014c58:	83 c0 02             	add    eax,0x2
c0014c5b:	25 ff ff 00 00       	and    eax,0xffff
c0014c60:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c63:	e9 27 02 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014c68:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c6b:	3c 05                	cmp    al,0x5
c0014c6d:	77 24                	ja     c0014c93 <Vm::faultHandler(regs*)+0x474>
c0014c6f:	0f b6 c0             	movzx  eax,al
c0014c72:	ff 24 85 8c ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1174]
c0014c79:	0f b7 fd             	movzx  edi,bp
c0014c7c:	eb 15                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x474>
c0014c7e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c82:	eb 0f                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x474>
c0014c84:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c88:	eb 09                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x474>
c0014c8a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c8e:	eb 03                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x474>
c0014c90:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c96:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c9b:	74 29                	je     c0014cc6 <Vm::faultHandler(regs*)+0x4a7>
c0014c9d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ca2:	76 22                	jbe    c0014cc6 <Vm::faultHandler(regs*)+0x4a7>
c0014ca4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ca8:	50                   	push   eax
c0014ca9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cad:	50                   	push   eax
c0014cae:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cb2:	50                   	push   eax
c0014cb3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cb7:	50                   	push   eax
c0014cb8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cbc:	50                   	push   eax
c0014cbd:	6a 6e                	push   0x6e
c0014cbf:	6a 6e                	push   0x6e
c0014cc1:	e9 8c 00 00 00       	jmp    c0014d52 <Vm::faultHandler(regs*)+0x533>
c0014cc6:	0f b7 c0             	movzx  eax,ax
c0014cc9:	52                   	push   edx
c0014cca:	52                   	push   edx
c0014ccb:	50                   	push   eax
c0014ccc:	57                   	push   edi
c0014ccd:	e8 d9 fa ff ff       	call   c00147ab <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014cd2:	59                   	pop    ecx
c0014cd3:	0f b6 c0             	movzx  eax,al
c0014cd6:	5e                   	pop    esi
c0014cd7:	50                   	push   eax
c0014cd8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cdc:	50                   	push   eax
c0014cdd:	e8 92 f6 ff ff       	call   c0014374 <Vm::outbv(unsigned short, unsigned char)>
c0014ce2:	83 c4 10             	add    esp,0x10
c0014ce5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ce8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cec:	74 03                	je     c0014cf1 <Vm::faultHandler(regs*)+0x4d2>
c0014cee:	48                   	dec    eax
c0014cef:	eb 01                	jmp    c0014cf2 <Vm::faultHandler(regs*)+0x4d3>
c0014cf1:	40                   	inc    eax
c0014cf2:	0f b7 c0             	movzx  eax,ax
c0014cf5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014cf8:	e9 92 01 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014cfd:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d00:	3c 05                	cmp    al,0x5
c0014d02:	77 1f                	ja     c0014d23 <Vm::faultHandler(regs*)+0x504>
c0014d04:	0f b6 c0             	movzx  eax,al
c0014d07:	ff 24 85 a4 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe115c]
c0014d0e:	89 ef                	mov    edi,ebp
c0014d10:	eb 11                	jmp    c0014d23 <Vm::faultHandler(regs*)+0x504>
c0014d12:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014d15:	eb 0c                	jmp    c0014d23 <Vm::faultHandler(regs*)+0x504>
c0014d17:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014d1a:	eb 07                	jmp    c0014d23 <Vm::faultHandler(regs*)+0x504>
c0014d1c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014d1f:	eb 02                	jmp    c0014d23 <Vm::faultHandler(regs*)+0x504>
c0014d21:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014d23:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014d26:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d2b:	74 37                	je     c0014d64 <Vm::faultHandler(regs*)+0x545>
c0014d2d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d33:	76 2f                	jbe    c0014d64 <Vm::faultHandler(regs*)+0x545>
c0014d35:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d39:	50                   	push   eax
c0014d3a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d3e:	50                   	push   eax
c0014d3f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d43:	50                   	push   eax
c0014d44:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d48:	50                   	push   eax
c0014d49:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d4d:	50                   	push   eax
c0014d4e:	6a 6f                	push   0x6f
c0014d50:	6a 6f                	push   0x6f
c0014d52:	68 32 ee 01 c0       	push   0xc001ee32
c0014d57:	e8 7c 57 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014d5c:	83 c4 20             	add    esp,0x20
c0014d5f:	e9 86 01 00 00       	jmp    c0014eea <Vm::faultHandler(regs*)+0x6cb>
c0014d64:	0f b7 d7             	movzx  edx,di
c0014d67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d6a:	0f b7 c6             	movzx  eax,si
c0014d6d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d73:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d76:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d7b:	74 1d                	je     c0014d9a <Vm::faultHandler(regs*)+0x57b>
c0014d7d:	55                   	push   ebp
c0014d7e:	55                   	push   ebp
c0014d7f:	50                   	push   eax
c0014d80:	52                   	push   edx
c0014d81:	e8 48 fa ff ff       	call   c00147ce <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d86:	83 c4 10             	add    esp,0x10
c0014d89:	89 fa                	mov    edx,edi
c0014d8b:	ef                   	out    dx,eax
c0014d8c:	85 c9                	test   ecx,ecx
c0014d8e:	74 05                	je     c0014d95 <Vm::faultHandler(regs*)+0x576>
c0014d90:	83 ee 04             	sub    esi,0x4
c0014d93:	eb 21                	jmp    c0014db6 <Vm::faultHandler(regs*)+0x597>
c0014d95:	83 c6 04             	add    esi,0x4
c0014d98:	eb 1c                	jmp    c0014db6 <Vm::faultHandler(regs*)+0x597>
c0014d9a:	55                   	push   ebp
c0014d9b:	55                   	push   ebp
c0014d9c:	50                   	push   eax
c0014d9d:	52                   	push   edx
c0014d9e:	e8 19 fa ff ff       	call   c00147bc <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	89 fa                	mov    edx,edi
c0014da8:	66 ef                	out    dx,ax
c0014daa:	85 c9                	test   ecx,ecx
c0014dac:	74 05                	je     c0014db3 <Vm::faultHandler(regs*)+0x594>
c0014dae:	83 ee 02             	sub    esi,0x2
c0014db1:	eb 03                	jmp    c0014db6 <Vm::faultHandler(regs*)+0x597>
c0014db3:	83 c6 02             	add    esi,0x2
c0014db6:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014dbc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014dbf:	e9 cb 00 00 00       	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014dc4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014dcb:	83 ec 0c             	sub    esp,0xc
c0014dce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dd2:	50                   	push   eax
c0014dd3:	e8 89 f5 ff ff       	call   c0014361 <Vm::inbv(unsigned short)>
c0014dd8:	0f b6 c0             	movzx  eax,al
c0014ddb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dde:	eb 3f                	jmp    c0014e1f <Vm::faultHandler(regs*)+0x600>
c0014de0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014de5:	74 07                	je     c0014dee <Vm::faultHandler(regs*)+0x5cf>
c0014de7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014deb:	ed                   	in     eax,dx
c0014dec:	eb 14                	jmp    c0014e02 <Vm::faultHandler(regs*)+0x5e3>
c0014dee:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014df1:	66 31 f6             	xor    si,si
c0014df4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014df7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dfb:	66 ed                	in     ax,dx
c0014dfd:	0f b7 c0             	movzx  eax,ax
c0014e00:	09 f0                	or     eax,esi
c0014e02:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e05:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e09:	e9 84 00 00 00       	jmp    c0014e92 <Vm::faultHandler(regs*)+0x673>
c0014e0e:	52                   	push   edx
c0014e0f:	52                   	push   edx
c0014e10:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014e14:	50                   	push   eax
c0014e15:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e19:	50                   	push   eax
c0014e1a:	e8 55 f5 ff ff       	call   c0014374 <Vm::outbv(unsigned short, unsigned char)>
c0014e1f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e23:	eb 53                	jmp    c0014e78 <Vm::faultHandler(regs*)+0x659>
c0014e25:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e28:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e2c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e31:	74 03                	je     c0014e36 <Vm::faultHandler(regs*)+0x617>
c0014e33:	ef                   	out    dx,eax
c0014e34:	eb cf                	jmp    c0014e05 <Vm::faultHandler(regs*)+0x5e6>
c0014e36:	66 ef                	out    dx,ax
c0014e38:	eb cb                	jmp    c0014e05 <Vm::faultHandler(regs*)+0x5e6>
c0014e3a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e41:	83 ec 0c             	sub    esp,0xc
c0014e44:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e48:	50                   	push   eax
c0014e49:	e8 13 f5 ff ff       	call   c0014361 <Vm::inbv(unsigned short)>
c0014e4e:	0f b6 c0             	movzx  eax,al
c0014e51:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e54:	eb 1f                	jmp    c0014e75 <Vm::faultHandler(regs*)+0x656>
c0014e56:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e5e:	74 03                	je     c0014e63 <Vm::faultHandler(regs*)+0x644>
c0014e60:	ed                   	in     eax,dx
c0014e61:	eb 0d                	jmp    c0014e70 <Vm::faultHandler(regs*)+0x651>
c0014e63:	66 ed                	in     ax,dx
c0014e65:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e68:	0f b7 c0             	movzx  eax,ax
c0014e6b:	66 31 d2             	xor    dx,dx
c0014e6e:	09 d0                	or     eax,edx
c0014e70:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e73:	eb 1a                	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014e75:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e78:	83 c4 10             	add    esp,0x10
c0014e7b:	eb 15                	jmp    c0014e92 <Vm::faultHandler(regs*)+0x673>
c0014e7d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e80:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e83:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e88:	74 03                	je     c0014e8d <Vm::faultHandler(regs*)+0x66e>
c0014e8a:	ef                   	out    dx,eax
c0014e8b:	eb 02                	jmp    c0014e8f <Vm::faultHandler(regs*)+0x670>
c0014e8d:	66 ef                	out    dx,ax
c0014e8f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e92:	b0 01                	mov    al,0x1
c0014e94:	eb 56                	jmp    c0014eec <Vm::faultHandler(regs*)+0x6cd>
c0014e96:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e9a:	50                   	push   eax
c0014e9b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e9f:	50                   	push   eax
c0014ea0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ea4:	50                   	push   eax
c0014ea5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ea9:	50                   	push   eax
c0014eaa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eae:	50                   	push   eax
c0014eaf:	52                   	push   edx
c0014eb0:	52                   	push   edx
c0014eb1:	68 5f ee 01 c0       	push   0xc001ee5f
c0014eb6:	e8 1d 56 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014ebb:	83 c4 20             	add    esp,0x20
c0014ebe:	83 ec 0c             	sub    esp,0xc
c0014ec1:	6a 60                	push   0x60
c0014ec3:	e8 99 f4 ff ff       	call   c0014361 <Vm::inbv(unsigned short)>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	3c 1c                	cmp    al,0x1c
c0014ecd:	74 04                	je     c0014ed3 <Vm::faultHandler(regs*)+0x6b4>
c0014ecf:	3c 5a                	cmp    al,0x5a
c0014ed1:	75 eb                	jne    c0014ebe <Vm::faultHandler(regs*)+0x69f>
c0014ed3:	3c 5a                	cmp    al,0x5a
c0014ed5:	74 04                	je     c0014edb <Vm::faultHandler(regs*)+0x6bc>
c0014ed7:	3c 1c                	cmp    al,0x1c
c0014ed9:	75 0f                	jne    c0014eea <Vm::faultHandler(regs*)+0x6cb>
c0014edb:	83 ec 0c             	sub    esp,0xc
c0014ede:	6a 60                	push   0x60
c0014ee0:	e8 7c f4 ff ff       	call   c0014361 <Vm::inbv(unsigned short)>
c0014ee5:	83 c4 10             	add    esp,0x10
c0014ee8:	eb e9                	jmp    c0014ed3 <Vm::faultHandler(regs*)+0x6b4>
c0014eea:	31 c0                	xor    eax,eax
c0014eec:	83 c4 1c             	add    esp,0x1c
c0014eef:	5b                   	pop    ebx
c0014ef0:	5e                   	pop    esi
c0014ef1:	5f                   	pop    edi
c0014ef2:	5d                   	pop    ebp
c0014ef3:	c3                   	ret    

c0014ef4 <noCopro(unsigned long)>:
c0014ef4:	c3                   	ret    

c0014ef5 <nmiHandler(regs*, void*)>:
c0014ef5:	83 ec 0c             	sub    esp,0xc
c0014ef8:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0014efd:	83 ec 0c             	sub    esp,0xc
c0014f00:	50                   	push   eax
c0014f01:	e8 d4 20 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014f06:	83 c4 10             	add    esp,0x10
c0014f09:	90                   	nop
c0014f0a:	83 c4 0c             	add    esp,0xc
c0014f0d:	c3                   	ret    

c0014f0e <doubleFault(regs*, void*)>:
c0014f0e:	55                   	push   ebp
c0014f0f:	89 e5                	mov    ebp,esp
c0014f11:	83 ec 08             	sub    esp,0x8
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	68 bc ee 01 c0       	push   0xc001eebc
c0014f1c:	e8 02 b2 ff ff       	call   c0010123 <KePanic(char const*)>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	90                   	nop
c0014f25:	c9                   	leave  
c0014f26:	c3                   	ret    

c0014f27 <displayDebugInfo(regs*)>:
c0014f27:	83 ec 1c             	sub    esp,0x1c
c0014f2a:	0f 20 c0             	mov    eax,cr0
c0014f2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f31:	0f 20 d0             	mov    eax,cr2
c0014f34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f38:	0f 20 d8             	mov    eax,cr3
c0014f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f3f:	0f 20 e0             	mov    eax,cr4
c0014f42:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f49:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f4c:	83 ec 08             	sub    esp,0x8
c0014f4f:	50                   	push   eax
c0014f50:	68 d8 ee 01 c0       	push   0xc001eed8
c0014f55:	e8 7e 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f5a:	83 c4 10             	add    esp,0x10
c0014f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f61:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f64:	83 ec 08             	sub    esp,0x8
c0014f67:	50                   	push   eax
c0014f68:	68 c9 ee 01 c0       	push   0xc001eec9
c0014f6d:	e8 66 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f79:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f7c:	83 ec 08             	sub    esp,0x8
c0014f7f:	50                   	push   eax
c0014f80:	68 d4 ee 01 c0       	push   0xc001eed4
c0014f85:	e8 4e 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f94:	83 ec 08             	sub    esp,0x8
c0014f97:	50                   	push   eax
c0014f98:	68 e3 ee 01 c0       	push   0xc001eee3
c0014f9d:	e8 36 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fa9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014fac:	83 ec 08             	sub    esp,0x8
c0014faf:	50                   	push   eax
c0014fb0:	68 ee ee 01 c0       	push   0xc001eeee
c0014fb5:	e8 1e 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	83 ec 08             	sub    esp,0x8
c0014fc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fc4:	68 f9 ee 01 c0       	push   0xc001eef9
c0014fc9:	e8 0a 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014fce:	83 c4 10             	add    esp,0x10
c0014fd1:	83 ec 08             	sub    esp,0x8
c0014fd4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fd8:	68 04 ef 01 c0       	push   0xc001ef04
c0014fdd:	e8 f6 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014fe2:	83 c4 10             	add    esp,0x10
c0014fe5:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0014fea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff0:	83 ec 0c             	sub    esp,0xc
c0014ff3:	50                   	push   eax
c0014ff4:	e8 fe 33 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014ff9:	83 c4 10             	add    esp,0x10
c0014ffc:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015001:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015007:	83 ec 08             	sub    esp,0x8
c001500a:	68 0f ef 01 c0       	push   0xc001ef0f
c001500f:	50                   	push   eax
c0015010:	e8 21 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001501d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015023:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015028:	8b 12                	mov    edx,DWORD PTR [edx]
c001502a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001502d:	83 c2 0c             	add    edx,0xc
c0015030:	83 ec 08             	sub    esp,0x8
c0015033:	52                   	push   edx
c0015034:	50                   	push   eax
c0015035:	e8 fc 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001503a:	83 c4 10             	add    esp,0x10
c001503d:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015042:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015048:	83 ec 08             	sub    esp,0x8
c001504b:	68 18 ef 01 c0       	push   0xc001ef18
c0015050:	50                   	push   eax
c0015051:	e8 e0 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015056:	83 c4 10             	add    esp,0x10
c0015059:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001505e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015064:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015068:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001506b:	83 ec 08             	sub    esp,0x8
c001506e:	52                   	push   edx
c001506f:	50                   	push   eax
c0015070:	e8 7b 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001507d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015083:	83 ec 08             	sub    esp,0x8
c0015086:	68 20 ef 01 c0       	push   0xc001ef20
c001508b:	50                   	push   eax
c001508c:	e8 a5 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015099:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001509f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150a3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00150a6:	83 ec 08             	sub    esp,0x8
c00150a9:	52                   	push   edx
c00150aa:	50                   	push   eax
c00150ab:	e8 40 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00150b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150be:	83 ec 08             	sub    esp,0x8
c00150c1:	68 28 ef 01 c0       	push   0xc001ef28
c00150c6:	50                   	push   eax
c00150c7:	e8 6a 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150cc:	83 c4 10             	add    esp,0x10
c00150cf:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00150d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150de:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150e1:	83 ec 08             	sub    esp,0x8
c00150e4:	52                   	push   edx
c00150e5:	50                   	push   eax
c00150e6:	e8 05 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150eb:	83 c4 10             	add    esp,0x10
c00150ee:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00150f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f9:	83 ec 08             	sub    esp,0x8
c00150fc:	68 30 ef 01 c0       	push   0xc001ef30
c0015101:	50                   	push   eax
c0015102:	e8 2f 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015107:	83 c4 10             	add    esp,0x10
c001510a:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001510f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015115:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015119:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001511c:	83 ec 08             	sub    esp,0x8
c001511f:	52                   	push   edx
c0015120:	50                   	push   eax
c0015121:	e8 ca 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015126:	83 c4 10             	add    esp,0x10
c0015129:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001512e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015134:	83 ec 08             	sub    esp,0x8
c0015137:	68 38 ef 01 c0       	push   0xc001ef38
c001513c:	50                   	push   eax
c001513d:	e8 f4 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001514a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015150:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015154:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015157:	83 ec 08             	sub    esp,0x8
c001515a:	52                   	push   edx
c001515b:	50                   	push   eax
c001515c:	e8 8f 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015161:	83 c4 10             	add    esp,0x10
c0015164:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015169:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001516f:	83 ec 08             	sub    esp,0x8
c0015172:	68 40 ef 01 c0       	push   0xc001ef40
c0015177:	50                   	push   eax
c0015178:	e8 b9 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001518b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001518f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015192:	83 ec 08             	sub    esp,0x8
c0015195:	52                   	push   edx
c0015196:	50                   	push   eax
c0015197:	e8 54 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001519c:	83 c4 10             	add    esp,0x10
c001519f:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00151a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151aa:	83 ec 08             	sub    esp,0x8
c00151ad:	68 48 ef 01 c0       	push   0xc001ef48
c00151b2:	50                   	push   eax
c00151b3:	e8 7e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151b8:	83 c4 10             	add    esp,0x10
c00151bb:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00151c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151c6:	83 ec 08             	sub    esp,0x8
c00151c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151cd:	50                   	push   eax
c00151ce:	e8 1d 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151d3:	83 c4 10             	add    esp,0x10
c00151d6:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00151db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151e1:	83 ec 08             	sub    esp,0x8
c00151e4:	68 51 ef 01 c0       	push   0xc001ef51
c00151e9:	50                   	push   eax
c00151ea:	e8 47 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c00151f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151fd:	83 ec 08             	sub    esp,0x8
c0015200:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015204:	50                   	push   eax
c0015205:	e8 e6 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015212:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015218:	83 ec 08             	sub    esp,0x8
c001521b:	68 59 ef 01 c0       	push   0xc001ef59
c0015220:	50                   	push   eax
c0015221:	e8 10 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001522e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015234:	83 ec 08             	sub    esp,0x8
c0015237:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001523b:	50                   	push   eax
c001523c:	e8 af 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015241:	83 c4 10             	add    esp,0x10
c0015244:	fa                   	cli    
c0015245:	f4                   	hlt    
c0015246:	eb fe                	jmp    c0015246 <displayDebugInfo(regs*)+0x31f>

c0015248 <HalSystemIdle()>:
c0015248:	56                   	push   esi
c0015249:	53                   	push   ebx
c001524a:	83 ec 14             	sub    esp,0x14
c001524d:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0015252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015258:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001525e:	83 e0 04             	and    eax,0x4
c0015261:	84 c0                	test   al,al
c0015263:	0f 95 c0             	setne  al
c0015266:	84 c0                	test   al,al
c0015268:	74 4c                	je     c00152b6 <HalSystemIdle()+0x6e>
c001526a:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001526f:	83 ec 08             	sub    esp,0x8
c0015272:	68 e1 00 00 00       	push   0xe1
c0015277:	50                   	push   eax
c0015278:	e8 75 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001527d:	83 c4 10             	add    esp,0x10
c0015280:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015284:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015288:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001528d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015291:	83 e2 02             	and    edx,0x2
c0015294:	89 d3                	mov    ebx,edx
c0015296:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001529a:	83 e2 00             	and    edx,0x0
c001529d:	89 d6                	mov    esi,edx
c001529f:	56                   	push   esi
c00152a0:	53                   	push   ebx
c00152a1:	68 e1 00 00 00       	push   0xe1
c00152a6:	50                   	push   eax
c00152a7:	e8 72 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	e8 e0 ae fe ff       	call   c0000194 <doTPAUSE>
c00152b4:	eb 01                	jmp    c00152b7 <HalSystemIdle()+0x6f>
c00152b6:	f4                   	hlt    
c00152b7:	90                   	nop
c00152b8:	83 c4 14             	add    esp,0x14
c00152bb:	5b                   	pop    ebx
c00152bc:	5e                   	pop    esi
c00152bd:	c3                   	ret    

c00152be <displayProgramFault(char const*)>:
c00152be:	83 ec 0c             	sub    esp,0xc
c00152c1:	83 ec 0c             	sub    esp,0xc
c00152c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c8:	e8 0b 52 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00152cd:	83 c4 10             	add    esp,0x10
c00152d0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e0:	85 c0                	test   eax,eax
c00152e2:	74 21                	je     c0015305 <displayProgramFault(char const*)+0x47>
c00152e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f4:	6a 04                	push   0x4
c00152f6:	6a 0f                	push   0xf
c00152f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152fc:	50                   	push   eax
c00152fd:	e8 a6 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	90                   	nop
c0015306:	83 c4 0c             	add    esp,0xc
c0015309:	c3                   	ret    

c001530a <gpFault(regs*, void*)>:
c001530a:	83 ec 1c             	sub    esp,0x1c
c001530d:	c7 05 90 3f 02 c0 1f 48 01 c0 	mov    DWORD PTR ds:0xc0023f90,0xc001481f
c0015317:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c001531c:	85 c0                	test   eax,eax
c001531e:	74 1c                	je     c001533c <gpFault(regs*, void*)+0x32>
c0015320:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c0015325:	83 ec 0c             	sub    esp,0xc
c0015328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001532c:	ff d0                	call   eax
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015335:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001533a:	75 2e                	jne    c001536a <gpFault(regs*, void*)+0x60>
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015343:	e8 df fb ff ff       	call   c0014f27 <displayDebugInfo(regs*)>
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	83 ec 0c             	sub    esp,0xc
c001534e:	68 61 ef 01 c0       	push   0xc001ef61
c0015353:	e8 66 ff ff ff       	call   c00152be <displayProgramFault(char const*)>
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	83 ec 0c             	sub    esp,0xc
c001535e:	6a 00                	push   0x0
c0015360:	e8 af ee ff ff       	call   c0014214 <Thr::terminateFromIRQ(int)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	eb 01                	jmp    c001536b <gpFault(regs*, void*)+0x61>
c001536a:	90                   	nop
c001536b:	83 c4 1c             	add    esp,0x1c
c001536e:	c3                   	ret    

c001536f <pgFault(regs*, void*)>:
c001536f:	83 ec 1c             	sub    esp,0x1c
c0015372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015376:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015379:	0f 20 d0             	mov    eax,cr2
c001537c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015384:	83 ec 04             	sub    esp,0x4
c0015387:	52                   	push   edx
c0015388:	50                   	push   eax
c0015389:	68 40 f0 01 c0       	push   0xc001f040
c001538e:	e8 45 51 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015393:	83 c4 10             	add    esp,0x10
c0015396:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001539b:	8b 00                	mov    eax,DWORD PTR [eax]
c001539d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153a0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00153a6:	0f 20 d2             	mov    edx,cr2
c00153a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153b1:	83 ec 08             	sub    esp,0x8
c00153b4:	52                   	push   edx
c00153b5:	50                   	push   eax
c00153b6:	e8 4f 4d ff ff       	call   c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	84 c0                	test   al,al
c00153c0:	75 2e                	jne    c00153f0 <pgFault(regs*, void*)+0x81>
c00153c2:	83 ec 0c             	sub    esp,0xc
c00153c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153c9:	e8 59 fb ff ff       	call   c0014f27 <displayDebugInfo(regs*)>
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	83 ec 0c             	sub    esp,0xc
c00153d4:	68 7a ef 01 c0       	push   0xc001ef7a
c00153d9:	e8 e0 fe ff ff       	call   c00152be <displayProgramFault(char const*)>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	83 ec 0c             	sub    esp,0xc
c00153e4:	6a 00                	push   0x0
c00153e6:	e8 29 ee ff ff       	call   c0014214 <Thr::terminateFromIRQ(int)>
c00153eb:	83 c4 10             	add    esp,0x10
c00153ee:	eb 01                	jmp    c00153f1 <pgFault(regs*, void*)+0x82>
c00153f0:	90                   	nop
c00153f1:	83 c4 1c             	add    esp,0x1c
c00153f4:	c3                   	ret    

c00153f5 <otherISRHandler(regs*, void*)>:
c00153f5:	83 ec 0c             	sub    esp,0xc
c00153f8:	83 ec 0c             	sub    esp,0xc
c00153fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153ff:	e8 23 fb ff ff       	call   c0014f27 <displayDebugInfo(regs*)>
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	83 ec 0c             	sub    esp,0xc
c001540a:	68 68 f0 01 c0       	push   0xc001f068
c001540f:	e8 aa fe ff ff       	call   c00152be <displayProgramFault(char const*)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	6a 00                	push   0x0
c001541c:	e8 f3 ed ff ff       	call   c0014214 <Thr::terminateFromIRQ(int)>
c0015421:	83 c4 10             	add    esp,0x10
c0015424:	90                   	nop
c0015425:	83 c4 0c             	add    esp,0xc
c0015428:	c3                   	ret    

c0015429 <opcodeFault(regs*, void*)>:
c0015429:	55                   	push   ebp
c001542a:	89 e5                	mov    ebp,esp
c001542c:	83 ec 08             	sub    esp,0x8
c001542f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015432:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015435:	83 ec 08             	sub    esp,0x8
c0015438:	50                   	push   eax
c0015439:	68 85 ef 01 c0       	push   0xc001ef85
c001543e:	e8 95 50 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001544b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015451:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015457:	84 c0                	test   al,al
c0015459:	74 21                	je     c001547c <opcodeFault(regs*, void*)+0x53>
c001545b:	83 ec 0c             	sub    esp,0xc
c001545e:	68 90 f0 01 c0       	push   0xc001f090
c0015463:	e8 70 50 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015471:	8d 50 19             	lea    edx,[eax+0x19]
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547a:	eb 2b                	jmp    c00154a7 <opcodeFault(regs*, void*)+0x7e>
c001547c:	83 ec 0c             	sub    esp,0xc
c001547f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015482:	e8 a0 fa ff ff       	call   c0014f27 <displayDebugInfo(regs*)>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	83 ec 0c             	sub    esp,0xc
c001548d:	68 93 ef 01 c0       	push   0xc001ef93
c0015492:	e8 27 fe ff ff       	call   c00152be <displayProgramFault(char const*)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	83 ec 0c             	sub    esp,0xc
c001549d:	6a 00                	push   0x0
c001549f:	e8 70 ed ff ff       	call   c0014214 <Thr::terminateFromIRQ(int)>
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	c9                   	leave  
c00154a8:	c3                   	ret    

c00154a9 <i386SaveCoprocessor(void*)>:
c00154a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154ad:	83 c0 3f             	add    eax,0x3f
c00154b0:	83 e0 c0             	and    eax,0xffffffc0
c00154b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154b7:	ff 25 8c 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f8c

c00154bd <i386LoadCoprocessor(void*)>:
c00154bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154c1:	83 c0 3f             	add    eax,0x3f
c00154c4:	83 e0 c0             	and    eax,0xffffffc0
c00154c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154cb:	ff 25 88 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f88

c00154d1 <x87EmulHandler(regs*, void*)>:
c00154d1:	53                   	push   ebx
c00154d2:	83 ec 08             	sub    esp,0x8
c00154d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154da:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00154de:	74 10                	je     c00154f0 <x87EmulHandler(regs*, void*)+0x1f>
c00154e0:	83 ec 0c             	sub    esp,0xc
c00154e3:	68 a0 ef 01 c0       	push   0xc001efa0
c00154e8:	e8 36 ac ff ff       	call   c0010123 <KePanic(char const*)>
c00154ed:	83 c4 10             	add    esp,0x10
c00154f0:	0f 20 c0             	mov    eax,cr0
c00154f3:	a8 08                	test   al,0x8
c00154f5:	74 59                	je     c0015550 <x87EmulHandler(regs*, void*)+0x7f>
c00154f7:	0f 06                	clts   
c00154f9:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c00154fe:	85 c0                	test   eax,eax
c0015500:	74 0e                	je     c0015510 <x87EmulHandler(regs*, void*)+0x3f>
c0015502:	83 ec 0c             	sub    esp,0xc
c0015505:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015508:	e8 9c ff ff ff       	call   c00154a9 <i386SaveCoprocessor(void*)>
c001550d:	83 c4 10             	add    esp,0x10
c0015510:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015516:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001551a:	75 12                	jne    c001552e <x87EmulHandler(regs*, void*)+0x5d>
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	68 40 02 00 00       	push   0x240
c0015524:	e8 90 22 ff ff       	call   c00077b9 <malloc>
c0015529:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001552c:	eb 10                	jmp    c001553e <x87EmulHandler(regs*, void*)+0x6d>
c001552e:	83 ec 0c             	sub    esp,0xc
c0015531:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0015536:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015539:	e8 7f ff ff ff       	call   c00154bd <i386LoadCoprocessor(void*)>
c001553e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	a3 84 3f 02 c0       	mov    ds:0xc0023f84,eax
c001554b:	83 c4 08             	add    esp,0x8
c001554e:	5b                   	pop    ebx
c001554f:	c3                   	ret    
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	68 b4 ef 01 c0       	push   0xc001efb4
c0015558:	e8 7b 4f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001555d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015565:	83 c4 18             	add    esp,0x18
c0015568:	5b                   	pop    ebx
c0015569:	e9 a6 ec ff ff       	jmp    c0014214 <Thr::terminateFromIRQ(int)>

c001556e <HalInitialiseCoprocessor()>:
c001556e:	83 ec 10             	sub    esp,0x10
c0015571:	c7 05 84 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f84,0x0
c001557b:	6a 00                	push   0x0
c001557d:	68 d1 54 01 c0       	push   0xc00154d1
c0015582:	6a 07                	push   0x7
c0015584:	e8 c3 68 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015589:	e8 92 65 00 00       	call   c001bb20 <avxDetect>
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	85 c0                	test   eax,eax
c0015593:	74 1c                	je     c00155b1 <HalInitialiseCoprocessor()+0x43>
c0015595:	c7 05 8c 3f 02 c0 4a bb 01 c0 	mov    DWORD PTR ds:0xc0023f8c,0xc001bb4a
c001559f:	c7 05 88 3f 02 c0 5b bb 01 c0 	mov    DWORD PTR ds:0xc0023f88,0xc001bb5b
c00155a9:	83 c4 0c             	add    esp,0xc
c00155ac:	e9 bb 65 00 00       	jmp    c001bb6c <avxInit>
c00155b1:	e8 ea 67 00 00       	call   c001bda0 <absolutelyNoChanceInHell>
c00155b6:	85 c0                	test   eax,eax
c00155b8:	74 1c                	je     c00155d6 <HalInitialiseCoprocessor()+0x68>
c00155ba:	c7 05 8c 3f 02 c0 b8 bd 01 c0 	mov    DWORD PTR ds:0xc0023f8c,0xc001bdb8
c00155c4:	c7 05 88 3f 02 c0 c0 bd 01 c0 	mov    DWORD PTR ds:0xc0023f88,0xc001bdc0
c00155ce:	83 c4 0c             	add    esp,0xc
c00155d1:	e9 f2 67 00 00       	jmp    c001bdc8 <sseInit>
c00155d6:	e8 0b 68 00 00       	call   c001bde6 <x87Detect>
c00155db:	85 c0                	test   eax,eax
c00155dd:	74 1c                	je     c00155fb <HalInitialiseCoprocessor()+0x8d>
c00155df:	c7 05 8c 3f 02 c0 01 be 01 c0 	mov    DWORD PTR ds:0xc0023f8c,0xc001be01
c00155e9:	c7 05 88 3f 02 c0 08 be 01 c0 	mov    DWORD PTR ds:0xc0023f88,0xc001be08
c00155f3:	83 c4 0c             	add    esp,0xc
c00155f6:	e9 14 68 00 00       	jmp    c001be0f <x87Init>
c00155fb:	c7 05 8c 3f 02 c0 f4 4e 01 c0 	mov    DWORD PTR ds:0xc0023f8c,0xc0014ef4
c0015605:	c7 05 88 3f 02 c0 f4 4e 01 c0 	mov    DWORD PTR ds:0xc0023f88,0xc0014ef4
c001560f:	0f 20 c0             	mov    eax,cr0
c0015612:	83 c8 04             	or     eax,0x4
c0015615:	0f 22 c0             	mov    cr0,eax
c0015618:	83 c4 0c             	add    esp,0xc
c001561b:	c3                   	ret    

c001561c <HalPanic(char const*)>:
c001561c:	53                   	push   ebx
c001561d:	83 ec 10             	sub    esp,0x10
c0015620:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015624:	fa                   	cli    
c0015625:	53                   	push   ebx
c0015626:	68 ca ef 01 c0       	push   0xc001efca
c001562b:	e8 a8 4e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015630:	83 c4 0c             	add    esp,0xc
c0015633:	6a 01                	push   0x1
c0015635:	6a 0f                	push   0xf
c0015637:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c001563d:	e8 08 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015642:	58                   	pop    eax
c0015643:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c0015649:	e8 f4 2d ff ff       	call   c0008442 <VgaText::clearScreen()>
c001564e:	5a                   	pop    edx
c001564f:	59                   	pop    ecx
c0015650:	68 08 d8 01 c0       	push   0xc001d808
c0015655:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c001565b:	e8 22 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015660:	83 c4 0c             	add    esp,0xc
c0015663:	6a 01                	push   0x1
c0015665:	6a 0f                	push   0xf
c0015667:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c001566d:	e8 d8 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015672:	58                   	pop    eax
c0015673:	5a                   	pop    edx
c0015674:	68 e3 ef 01 c0       	push   0xc001efe3
c0015679:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c001567f:	e8 b2 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015684:	83 c4 0c             	add    esp,0xc
c0015687:	6a 0f                	push   0xf
c0015689:	6a 01                	push   0x1
c001568b:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c0015691:	e8 b4 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015696:	59                   	pop    ecx
c0015697:	58                   	pop    eax
c0015698:	68 ec ef 01 c0       	push   0xc001efec
c001569d:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c00156a3:	e8 8e 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156a8:	83 c4 0c             	add    esp,0xc
c00156ab:	6a 01                	push   0x1
c00156ad:	6a 0f                	push   0xf
c00156af:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c00156b5:	e8 90 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156ba:	58                   	pop    eax
c00156bb:	5a                   	pop    edx
c00156bc:	68 30 f0 01 c0       	push   0xc001f030
c00156c1:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c00156c7:	e8 6a 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156cc:	59                   	pop    ecx
c00156cd:	58                   	pop    eax
c00156ce:	68 f9 ef 01 c0       	push   0xc001eff9
c00156d3:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c00156d9:	e8 58 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156de:	58                   	pop    eax
c00156df:	5a                   	pop    edx
c00156e0:	68 33 f0 01 c0       	push   0xc001f033
c00156e5:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c00156eb:	e8 46 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156f0:	59                   	pop    ecx
c00156f1:	58                   	pop    eax
c00156f2:	53                   	push   ebx
c00156f3:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c00156f9:	e8 38 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156fe:	58                   	pop    eax
c00156ff:	5a                   	pop    edx
c0015700:	68 30 f0 01 c0       	push   0xc001f030
c0015705:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c001570b:	e8 26 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	eb fe                	jmp    c0015713 <HalPanic(char const*)+0xf7>

c0015715 <HalQueryPerformanceCounter()>:
c0015715:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001571a:	31 d2                	xor    edx,edx
c001571c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015722:	31 c0                	xor    eax,eax
c0015724:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001572b:	74 02                	je     c001572f <HalQueryPerformanceCounter()+0x1a>
c001572d:	0f 31                	rdtsc  
c001572f:	c3                   	ret    

c0015730 <HalInitialise()>:
c0015730:	53                   	push   ebx
c0015731:	83 ec 08             	sub    esp,0x8
c0015734:	e8 46 69 ff ff       	call   c000c07f <setupINTS()>
c0015739:	80 3d 00 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023500,0x0
c0015740:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0015745:	75 07                	jne    c001574e <HalInitialise()+0x1e>
c0015747:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001574e:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015754:	83 e0 01             	and    eax,0x1
c0015757:	a2 80 3f 02 c0       	mov    ds:0xc0023f80,al
c001575c:	e8 a7 02 00 00       	call   c0015a08 <picOpen()>
c0015761:	80 3d 80 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f80,0x0
c0015768:	74 0a                	je     c0015774 <HalInitialise()+0x44>
c001576a:	e8 e1 01 00 00       	call   c0015950 <picDisable()>
c001576f:	e8 26 5d 00 00       	call   c001b49a <apicOpen()>
c0015774:	bb 0f 00 00 00       	mov    ebx,0xf
c0015779:	50                   	push   eax
c001577a:	6a 00                	push   0x0
c001577c:	68 f5 53 01 c0       	push   0xc00153f5
c0015781:	6a 00                	push   0x0
c0015783:	e8 c4 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015788:	83 c4 0c             	add    esp,0xc
c001578b:	6a 00                	push   0x0
c001578d:	68 f5 53 01 c0       	push   0xc00153f5
c0015792:	6a 01                	push   0x1
c0015794:	e8 b3 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015799:	83 c4 0c             	add    esp,0xc
c001579c:	6a 00                	push   0x0
c001579e:	68 f5 4e 01 c0       	push   0xc0014ef5
c00157a3:	6a 02                	push   0x2
c00157a5:	e8 a2 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157aa:	83 c4 0c             	add    esp,0xc
c00157ad:	6a 00                	push   0x0
c00157af:	68 f5 53 01 c0       	push   0xc00153f5
c00157b4:	6a 03                	push   0x3
c00157b6:	e8 91 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157bb:	83 c4 0c             	add    esp,0xc
c00157be:	6a 00                	push   0x0
c00157c0:	68 f5 53 01 c0       	push   0xc00153f5
c00157c5:	6a 04                	push   0x4
c00157c7:	e8 80 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157cc:	83 c4 0c             	add    esp,0xc
c00157cf:	6a 00                	push   0x0
c00157d1:	68 f5 53 01 c0       	push   0xc00153f5
c00157d6:	6a 05                	push   0x5
c00157d8:	e8 6f 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157dd:	83 c4 0c             	add    esp,0xc
c00157e0:	6a 00                	push   0x0
c00157e2:	68 29 54 01 c0       	push   0xc0015429
c00157e7:	6a 06                	push   0x6
c00157e9:	e8 5e 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ee:	83 c4 0c             	add    esp,0xc
c00157f1:	6a 00                	push   0x0
c00157f3:	68 0e 4f 01 c0       	push   0xc0014f0e
c00157f8:	6a 08                	push   0x8
c00157fa:	e8 4d 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ff:	83 c4 0c             	add    esp,0xc
c0015802:	6a 00                	push   0x0
c0015804:	68 f5 53 01 c0       	push   0xc00153f5
c0015809:	6a 09                	push   0x9
c001580b:	e8 3c 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015810:	83 c4 0c             	add    esp,0xc
c0015813:	6a 00                	push   0x0
c0015815:	68 f5 53 01 c0       	push   0xc00153f5
c001581a:	6a 0a                	push   0xa
c001581c:	e8 2b 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015821:	83 c4 0c             	add    esp,0xc
c0015824:	6a 00                	push   0x0
c0015826:	68 f5 53 01 c0       	push   0xc00153f5
c001582b:	6a 0b                	push   0xb
c001582d:	e8 1a 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015832:	83 c4 0c             	add    esp,0xc
c0015835:	6a 00                	push   0x0
c0015837:	68 0a 53 01 c0       	push   0xc001530a
c001583c:	6a 0d                	push   0xd
c001583e:	e8 09 66 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015843:	83 c4 0c             	add    esp,0xc
c0015846:	6a 00                	push   0x0
c0015848:	68 6f 53 01 c0       	push   0xc001536f
c001584d:	6a 0e                	push   0xe
c001584f:	e8 f8 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015854:	83 c4 10             	add    esp,0x10
c0015857:	50                   	push   eax
c0015858:	6a 00                	push   0x0
c001585a:	68 f5 53 01 c0       	push   0xc00153f5
c001585f:	53                   	push   ebx
c0015860:	43                   	inc    ebx
c0015861:	e8 e6 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	83 fb 1e             	cmp    ebx,0x1e
c001586c:	75 e9                	jne    c0015857 <HalInitialise()+0x127>
c001586e:	50                   	push   eax
c001586f:	6a 00                	push   0x0
c0015871:	68 ef 13 01 c0       	push   0xc00113ef
c0015876:	6a 60                	push   0x60
c0015878:	e8 cf 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001587d:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0015882:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001588c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015893:	e8 21 1f ff ff       	call   c00077b9 <malloc>
c0015898:	89 04 24             	mov    DWORD PTR [esp],eax
c001589b:	89 c3                	mov    ebx,eax
c001589d:	e8 2e 09 00 00       	call   c00161d0 <RTC::RTC()>
c00158a2:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00158ac:	5a                   	pop    edx
c00158ad:	59                   	pop    ecx
c00158ae:	53                   	push   ebx
c00158af:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c00158b5:	e8 5e 60 ff ff       	call   c000b918 <Device::addChild(Device*)>
c00158ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158bc:	6a 00                	push   0x0
c00158be:	6a 00                	push   0x0
c00158c0:	6a 00                	push   0x0
c00158c2:	53                   	push   ebx
c00158c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158c6:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c00158cb:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00158d1:	83 c4 28             	add    esp,0x28
c00158d4:	5b                   	pop    ebx
c00158d5:	c3                   	ret    

c00158d6 <HalMakeBeep(int)>:
c00158d6:	53                   	push   ebx
c00158d7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00158db:	85 db                	test   ebx,ebx
c00158dd:	75 07                	jne    c00158e6 <HalMakeBeep(int)+0x10>
c00158df:	e4 61                	in     al,0x61
c00158e1:	83 e0 fc             	and    eax,0xfffffffc
c00158e4:	eb 26                	jmp    c001590c <HalMakeBeep(int)+0x36>
c00158e6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00158eb:	99                   	cdq    
c00158ec:	f7 fb                	idiv   ebx
c00158ee:	89 c1                	mov    ecx,eax
c00158f0:	b0 b6                	mov    al,0xb6
c00158f2:	e6 43                	out    0x43,al
c00158f4:	88 c8                	mov    al,cl
c00158f6:	e6 42                	out    0x42,al
c00158f8:	89 c8                	mov    eax,ecx
c00158fa:	c1 e8 08             	shr    eax,0x8
c00158fd:	e6 42                	out    0x42,al
c00158ff:	e4 61                	in     al,0x61
c0015901:	88 c2                	mov    dl,al
c0015903:	83 ca 03             	or     edx,0x3
c0015906:	38 c2                	cmp    dl,al
c0015908:	74 04                	je     c001590e <HalMakeBeep(int)+0x38>
c001590a:	88 d0                	mov    al,dl
c001590c:	e6 61                	out    0x61,al
c001590e:	5b                   	pop    ebx
c001590f:	c3                   	ret    

c0015910 <HalGetRand()>:
c0015910:	31 c0                	xor    eax,eax
c0015912:	c3                   	ret    

c0015913 <HalEndOfInterrupt(int)>:
c0015913:	80 3d 80 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f80,0x0
c001591a:	74 23                	je     c001593f <HalEndOfInterrupt(int)+0x2c>
c001591c:	83 ec 14             	sub    esp,0x14
c001591f:	6a 1b                	push   0x1b
c0015921:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015927:	e8 c6 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001592c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015931:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001593b:	83 c4 1c             	add    esp,0x1c
c001593e:	c3                   	ret    
c001593f:	e9 54 02 00 00       	jmp    c0015b98 <picEOI(int)>

c0015944 <HalRestart()>:
c0015944:	c3                   	ret    

c0015945 <HalShutdown()>:
c0015945:	c3                   	ret    

c0015946 <HalSleep()>:
c0015946:	c3                   	ret    
c0015947:	90                   	nop

c0015948 <picIoWait()>:
c0015948:	eb 00                	jmp    c001594a <picIoWait()+0x2>
c001594a:	eb 00                	jmp    c001594c <picIoWait()+0x4>
c001594c:	90                   	nop
c001594d:	c3                   	ret    
c001594e:	66 90                	xchg   ax,ax

c0015950 <picDisable()>:
c0015950:	83 ec 10             	sub    esp,0x10
c0015953:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001595a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001595f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015963:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015968:	ee                   	out    dx,al
c0015969:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015970:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015975:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015979:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001597e:	ee                   	out    dx,al
c001597f:	90                   	nop
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	c3                   	ret    

c0015984 <picGetIRQReg(int)>:
c0015984:	83 ec 10             	sub    esp,0x10
c0015987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001598b:	25 ff 00 00 00       	and    eax,0xff
c0015990:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015997:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001599b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001599f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00159a4:	ee                   	out    dx,al
c00159a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159a9:	25 ff 00 00 00       	and    eax,0xff
c00159ae:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00159b5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00159b9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00159bd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00159c2:	ee                   	out    dx,al
c00159c3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00159ca:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00159cf:	89 c2                	mov    edx,eax
c00159d1:	ec                   	in     al,dx
c00159d2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00159d6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159da:	25 ff 00 00 00       	and    eax,0xff
c00159df:	c1 e0 08             	shl    eax,0x8
c00159e2:	89 c1                	mov    ecx,eax
c00159e4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00159eb:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00159f0:	89 c2                	mov    edx,eax
c00159f2:	ec                   	in     al,dx
c00159f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00159f7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159fb:	25 ff 00 00 00       	and    eax,0xff
c0015a00:	09 c8                	or     eax,ecx
c0015a02:	83 c4 10             	add    esp,0x10
c0015a05:	c3                   	ret    
c0015a06:	66 90                	xchg   ax,ax

c0015a08 <picOpen()>:
c0015a08:	83 ec 50             	sub    esp,0x50
c0015a0b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015a12:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015a17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a1f:	ee                   	out    dx,al
c0015a20:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015a27:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a2c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a34:	ee                   	out    dx,al
c0015a35:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a3d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a45:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a50:	89 c2                	mov    edx,eax
c0015a52:	ec                   	in     al,dx
c0015a53:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a57:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a5b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a5f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a6a:	89 c2                	mov    edx,eax
c0015a6c:	ec                   	in     al,dx
c0015a6d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a71:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a75:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a79:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a80:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a85:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a8d:	ee                   	out    dx,al
c0015a8e:	e8 b5 fe ff ff       	call   c0015948 <picIoWait()>
c0015a93:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a9a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a9f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015aa3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015aa7:	ee                   	out    dx,al
c0015aa8:	e8 9b fe ff ff       	call   c0015948 <picIoWait()>
c0015aad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ab1:	25 ff 00 00 00       	and    eax,0xff
c0015ab6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015abd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015ac1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015ac5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ac9:	ee                   	out    dx,al
c0015aca:	e8 79 fe ff ff       	call   c0015948 <picIoWait()>
c0015acf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015ad3:	25 ff 00 00 00       	and    eax,0xff
c0015ad8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015adf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ae3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015ae7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015aeb:	ee                   	out    dx,al
c0015aec:	e8 57 fe ff ff       	call   c0015948 <picIoWait()>
c0015af1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015af8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015afd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b01:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b05:	ee                   	out    dx,al
c0015b06:	e8 3d fe ff ff       	call   c0015948 <picIoWait()>
c0015b0b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015b12:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015b17:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015b1b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015b1f:	ee                   	out    dx,al
c0015b20:	e8 23 fe ff ff       	call   c0015948 <picIoWait()>
c0015b25:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b2c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b31:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b35:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b39:	ee                   	out    dx,al
c0015b3a:	e8 09 fe ff ff       	call   c0015948 <picIoWait()>
c0015b3f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b46:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b4b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b4f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b53:	ee                   	out    dx,al
c0015b54:	e8 ef fd ff ff       	call   c0015948 <picIoWait()>
c0015b59:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b5d:	25 ff 00 00 00       	and    eax,0xff
c0015b62:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b69:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b6d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b75:	ee                   	out    dx,al
c0015b76:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b7a:	25 ff 00 00 00       	and    eax,0xff
c0015b7f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b86:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b8a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b8e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b92:	ee                   	out    dx,al
c0015b93:	90                   	nop
c0015b94:	83 c4 50             	add    esp,0x50
c0015b97:	c3                   	ret    

c0015b98 <picEOI(int)>:
c0015b98:	83 ec 10             	sub    esp,0x10
c0015b9b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ba0:	75 22                	jne    c0015bc4 <picEOI(int)+0x2c>
c0015ba2:	6a 0b                	push   0xb
c0015ba4:	e8 db fd ff ff       	call   c0015984 <picGetIRQReg(int)>
c0015ba9:	83 c4 04             	add    esp,0x4
c0015bac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015bb1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015bb6:	25 ff ff 00 00       	and    eax,0xffff
c0015bbb:	25 80 00 00 00       	and    eax,0x80
c0015bc0:	74 72                	je     c0015c34 <picEOI(int)+0x9c>
c0015bc2:	66 90                	xchg   ax,ax
c0015bc4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015bc9:	75 31                	jne    c0015bfc <picEOI(int)+0x64>
c0015bcb:	6a 0b                	push   0xb
c0015bcd:	e8 b2 fd ff ff       	call   c0015984 <picGetIRQReg(int)>
c0015bd2:	83 c4 04             	add    esp,0x4
c0015bd5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015bda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bde:	66 85 c0             	test   ax,ax
c0015be1:	78 19                	js     c0015bfc <picEOI(int)+0x64>
c0015be3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015bea:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015bef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015bf3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015bf8:	ee                   	out    dx,al
c0015bf9:	eb 3d                	jmp    c0015c38 <picEOI(int)+0xa0>
c0015bfb:	90                   	nop
c0015bfc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c01:	7e 19                	jle    c0015c1c <picEOI(int)+0x84>
c0015c03:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c0a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015c0f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c13:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c18:	ee                   	out    dx,al
c0015c19:	8d 76 00             	lea    esi,[esi+0x0]
c0015c1c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c23:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c28:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c2c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c31:	ee                   	out    dx,al
c0015c32:	eb 04                	jmp    c0015c38 <picEOI(int)+0xa0>
c0015c34:	90                   	nop
c0015c35:	8d 76 00             	lea    esi,[esi+0x0]
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	c3                   	ret    

c0015c3c <RTC::open(int, int, void*)>:
c0015c3c:	31 c0                	xor    eax,eax
c0015c3e:	c3                   	ret    
c0015c3f:	90                   	nop

c0015c40 <RTC::close(int, int, void*)>:
c0015c40:	31 c0                	xor    eax,eax
c0015c42:	c3                   	ret    
c0015c43:	90                   	nop

c0015c44 <RTC::timeInSecondsUTC()>:
c0015c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c48:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c54:	c3                   	ret    
c0015c55:	90                   	nop

c0015c56 <RTC::timeInDatetimeUTC()>:
c0015c56:	53                   	push   ebx
c0015c57:	83 ec 14             	sub    esp,0x14
c0015c5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c62:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c64:	50                   	push   eax
c0015c65:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c68:	83 c4 0c             	add    esp,0xc
c0015c6b:	52                   	push   edx
c0015c6c:	50                   	push   eax
c0015c6d:	53                   	push   ebx
c0015c6e:	e8 19 5a ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c0015c73:	89 d8                	mov    eax,ebx
c0015c75:	83 c4 14             	add    esp,0x14
c0015c78:	5b                   	pop    ebx
c0015c79:	c2 04 00             	ret    0x4

c0015c7c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c7c:	56                   	push   esi
c0015c7d:	53                   	push   ebx
c0015c7e:	83 ec 14             	sub    esp,0x14
c0015c81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c87:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c8e:	52                   	push   edx
c0015c8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c97:	50                   	push   eax
c0015c98:	e8 ef 59 ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c0015c9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ca1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015ca5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ca9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015cad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cb1:	89 f0                	mov    eax,esi
c0015cb3:	83 c4 20             	add    esp,0x20
c0015cb6:	5b                   	pop    ebx
c0015cb7:	5e                   	pop    esi
c0015cb8:	ff e0                	jmp    eax

c0015cba <RTC::~RTC()>:
c0015cba:	83 ec 0c             	sub    esp,0xc
c0015cbd:	ba d0 f0 01 c0       	mov    edx,0xc001f0d0
c0015cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc6:	89 10                	mov    DWORD PTR [eax],edx
c0015cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ccc:	83 ec 0c             	sub    esp,0xc
c0015ccf:	50                   	push   eax
c0015cd0:	e8 3b 57 ff ff       	call   c000b410 <Clock::~Clock()>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	90                   	nop
c0015cd9:	83 c4 0c             	add    esp,0xc
c0015cdc:	c3                   	ret    
c0015cdd:	90                   	nop

c0015cde <RTC::~RTC()>:
c0015cde:	83 ec 0c             	sub    esp,0xc
c0015ce1:	83 ec 0c             	sub    esp,0xc
c0015ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ce8:	e8 cd ff ff ff       	call   c0015cba <RTC::~RTC()>
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	83 ec 08             	sub    esp,0x8
c0015cf3:	68 60 01 00 00       	push   0x160
c0015cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cfc:	e8 e1 46 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	83 c4 0c             	add    esp,0xc
c0015d07:	c3                   	ret    

c0015d08 <RTC::get_update_in_progress_flag()>:
c0015d08:	83 ec 14             	sub    esp,0x14
c0015d0b:	6a 0a                	push   0xa
c0015d0d:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015d13:	e8 8e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d18:	83 c4 1c             	add    esp,0x1c
c0015d1b:	c0 e8 07             	shr    al,0x7
c0015d1e:	c3                   	ret    
c0015d1f:	90                   	nop

c0015d20 <RTC::completeRTCRefresh()>:
c0015d20:	55                   	push   ebp
c0015d21:	57                   	push   edi
c0015d22:	56                   	push   esi
c0015d23:	53                   	push   ebx
c0015d24:	83 ec 2c             	sub    esp,0x2c
c0015d27:	8b 1d 0c 32 02 c0    	mov    ebx,DWORD PTR ds:0xc002320c
c0015d2d:	83 ec 0c             	sub    esp,0xc
c0015d30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d34:	e8 cf ff ff ff       	call   c0015d08 <RTC::get_update_in_progress_flag()>
c0015d39:	83 c4 10             	add    esp,0x10
c0015d3c:	84 c0                	test   al,al
c0015d3e:	74 0e                	je     c0015d4e <RTC::completeRTCRefresh()+0x2e>
c0015d40:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d46:	3b 05 0c 32 02 c0    	cmp    eax,DWORD PTR ds:0xc002320c
c0015d4c:	73 df                	jae    c0015d2d <RTC::completeRTCRefresh()+0xd>
c0015d4e:	55                   	push   ebp
c0015d4f:	55                   	push   ebp
c0015d50:	6a 00                	push   0x0
c0015d52:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015d58:	e8 49 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d5d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d61:	58                   	pop    eax
c0015d62:	5a                   	pop    edx
c0015d63:	6a 02                	push   0x2
c0015d65:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015d6b:	e8 36 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d70:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d74:	59                   	pop    ecx
c0015d75:	5b                   	pop    ebx
c0015d76:	6a 04                	push   0x4
c0015d78:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015d7e:	e8 23 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d83:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d87:	5e                   	pop    esi
c0015d88:	5f                   	pop    edi
c0015d89:	6a 07                	push   0x7
c0015d8b:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015d91:	e8 10 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d96:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d9a:	5d                   	pop    ebp
c0015d9b:	58                   	pop    eax
c0015d9c:	6a 08                	push   0x8
c0015d9e:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015da4:	e8 fd 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015da9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015dad:	58                   	pop    eax
c0015dae:	5a                   	pop    edx
c0015daf:	6a 09                	push   0x9
c0015db1:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015db7:	e8 ea 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	0f b6 e8             	movzx  ebp,al
c0015dc2:	8b 1d 0c 32 02 c0    	mov    ebx,DWORD PTR ds:0xc002320c
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015dcf:	e8 34 ff ff ff       	call   c0015d08 <RTC::get_update_in_progress_flag()>
c0015dd4:	83 c4 10             	add    esp,0x10
c0015dd7:	84 c0                	test   al,al
c0015dd9:	74 0e                	je     c0015de9 <RTC::completeRTCRefresh()+0xc9>
c0015ddb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015de1:	3b 05 0c 32 02 c0    	cmp    eax,DWORD PTR ds:0xc002320c
c0015de7:	73 df                	jae    c0015dc8 <RTC::completeRTCRefresh()+0xa8>
c0015de9:	50                   	push   eax
c0015dea:	50                   	push   eax
c0015deb:	6a 00                	push   0x0
c0015ded:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015df3:	e8 ae 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015df8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015dfc:	58                   	pop    eax
c0015dfd:	5a                   	pop    edx
c0015dfe:	6a 02                	push   0x2
c0015e00:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015e06:	e8 9b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e0f:	59                   	pop    ecx
c0015e10:	5b                   	pop    ebx
c0015e11:	6a 04                	push   0x4
c0015e13:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015e19:	e8 88 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e1e:	5e                   	pop    esi
c0015e1f:	88 c3                	mov    bl,al
c0015e21:	5f                   	pop    edi
c0015e22:	6a 07                	push   0x7
c0015e24:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015e2a:	e8 77 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e2f:	89 c6                	mov    esi,eax
c0015e31:	58                   	pop    eax
c0015e32:	5a                   	pop    edx
c0015e33:	6a 08                	push   0x8
c0015e35:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015e3b:	e8 66 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e40:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e44:	59                   	pop    ecx
c0015e45:	5f                   	pop    edi
c0015e46:	6a 09                	push   0x9
c0015e48:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015e4e:	e8 53 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e53:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e57:	0f b6 f8             	movzx  edi,al
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e61:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e65:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e69:	89 f1                	mov    ecx,esi
c0015e6b:	0f 94 c0             	sete   al
c0015e6e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e72:	0f 94 c2             	sete   dl
c0015e75:	21 d0                	and    eax,edx
c0015e77:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e7b:	0f 94 c2             	sete   dl
c0015e7e:	21 c2                	and    edx,eax
c0015e80:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e84:	0f 94 c0             	sete   al
c0015e87:	21 d0                	and    eax,edx
c0015e89:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e8d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e91:	0f 94 c1             	sete   cl
c0015e94:	84 c8                	test   al,cl
c0015e96:	75 29                	jne    c0015ec1 <RTC::completeRTCRefresh()+0x1a1>
c0015e98:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e9c:	89 fd                	mov    ebp,edi
c0015e9e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015ea2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015ea6:	89 f0                	mov    eax,esi
c0015ea8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015eac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015eb0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015eb4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015eb8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ebc:	e9 01 ff ff ff       	jmp    c0015dc2 <RTC::completeRTCRefresh()+0xa2>
c0015ec1:	39 fd                	cmp    ebp,edi
c0015ec3:	75 d3                	jne    c0015e98 <RTC::completeRTCRefresh()+0x178>
c0015ec5:	55                   	push   ebp
c0015ec6:	55                   	push   ebp
c0015ec7:	6a 0b                	push   0xb
c0015ec9:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015ecf:	e8 d2 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	89 c5                	mov    ebp,eax
c0015ed9:	a8 04                	test   al,0x4
c0015edb:	75 78                	jne    c0015f55 <RTC::completeRTCRefresh()+0x235>
c0015edd:	b1 0a                	mov    cl,0xa
c0015edf:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015ee3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ee7:	83 e2 0f             	and    edx,0xf
c0015eea:	c0 e8 04             	shr    al,0x4
c0015eed:	c1 ef 04             	shr    edi,0x4
c0015ef0:	f6 e1                	mul    cl
c0015ef2:	6b ff 0a             	imul   edi,edi,0xa
c0015ef5:	01 d0                	add    eax,edx
c0015ef7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015efb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015eff:	83 e2 0f             	and    edx,0xf
c0015f02:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f06:	c0 e8 04             	shr    al,0x4
c0015f09:	f6 e1                	mul    cl
c0015f0b:	01 d0                	add    eax,edx
c0015f0d:	88 da                	mov    dl,bl
c0015f0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f13:	83 e2 0f             	and    edx,0xf
c0015f16:	88 d8                	mov    al,bl
c0015f18:	83 e3 80             	and    ebx,0xffffff80
c0015f1b:	c0 e8 04             	shr    al,0x4
c0015f1e:	83 e0 07             	and    eax,0x7
c0015f21:	f6 e1                	mul    cl
c0015f23:	01 d0                	add    eax,edx
c0015f25:	89 f2                	mov    edx,esi
c0015f27:	09 c3                	or     ebx,eax
c0015f29:	83 e2 0f             	and    edx,0xf
c0015f2c:	89 f0                	mov    eax,esi
c0015f2e:	c0 e8 04             	shr    al,0x4
c0015f31:	f6 e1                	mul    cl
c0015f33:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f36:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f3a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f3e:	83 e2 0f             	and    edx,0xf
c0015f41:	c0 e8 04             	shr    al,0x4
c0015f44:	f6 e1                	mul    cl
c0015f46:	01 d0                	add    eax,edx
c0015f48:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f50:	83 e0 0f             	and    eax,0xf
c0015f53:	01 c7                	add    edi,eax
c0015f55:	83 e5 02             	and    ebp,0x2
c0015f58:	75 14                	jne    c0015f6e <RTC::completeRTCRefresh()+0x24e>
c0015f5a:	84 db                	test   bl,bl
c0015f5c:	79 10                	jns    c0015f6e <RTC::completeRTCRefresh()+0x24e>
c0015f5e:	83 e3 7f             	and    ebx,0x7f
c0015f61:	b9 18 00 00 00       	mov    ecx,0x18
c0015f66:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f69:	99                   	cdq    
c0015f6a:	f7 f9                	idiv   ecx
c0015f6c:	88 d3                	mov    bl,dl
c0015f6e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f74:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f7a:	77 06                	ja     c0015f82 <RTC::completeRTCRefresh()+0x262>
c0015f7c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f82:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f87:	31 d2                	xor    edx,edx
c0015f89:	c1 e1 10             	shl    ecx,0x10
c0015f8c:	89 d7                	mov    edi,edx
c0015f8e:	c1 e5 10             	shl    ebp,0x10
c0015f91:	31 c0                	xor    eax,eax
c0015f93:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f99:	09 cf                	or     edi,ecx
c0015f9b:	89 fa                	mov    edx,edi
c0015f9d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015fa1:	88 da                	mov    dl,bl
c0015fa3:	89 f3                	mov    ebx,esi
c0015fa5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015fa9:	88 d8                	mov    al,bl
c0015fab:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015faf:	0f b7 c8             	movzx  ecx,ax
c0015fb2:	09 e9                	or     ecx,ebp
c0015fb4:	89 c8                	mov    eax,ecx
c0015fb6:	51                   	push   ecx
c0015fb7:	51                   	push   ecx
c0015fb8:	52                   	push   edx
c0015fb9:	50                   	push   eax
c0015fba:	e8 40 55 ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c0015fbf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015fc3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015fc9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015fcf:	83 c4 3c             	add    esp,0x3c
c0015fd2:	5b                   	pop    ebx
c0015fd3:	5e                   	pop    esi
c0015fd4:	5f                   	pop    edi
c0015fd5:	5d                   	pop    ebp
c0015fd6:	c3                   	ret    
c0015fd7:	90                   	nop

c0015fd8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015fd8:	55                   	push   ebp
c0015fd9:	57                   	push   edi
c0015fda:	56                   	push   esi
c0015fdb:	53                   	push   ebx
c0015fdc:	83 ec 30             	sub    esp,0x30
c0015fdf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fe3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015fe7:	6a 00                	push   0x0
c0015fe9:	6a 00                	push   0x0
c0015feb:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0015ff1:	e8 c6 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ff6:	83 c4 0c             	add    esp,0xc
c0015ff9:	6a 00                	push   0x0
c0015ffb:	6a 02                	push   0x2
c0015ffd:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0016003:	e8 b4 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016008:	31 d2                	xor    edx,edx
c001600a:	89 f9                	mov    ecx,edi
c001600c:	89 f8                	mov    eax,edi
c001600e:	c1 e9 10             	shr    ecx,0x10
c0016011:	0f b6 c4             	movzx  eax,ah
c0016014:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016018:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001601c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016020:	b9 64 00 00 00       	mov    ecx,0x64
c0016025:	89 f0                	mov    eax,esi
c0016027:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001602b:	89 f0                	mov    eax,esi
c001602d:	0f b6 c4             	movzx  eax,ah
c0016030:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016034:	89 f0                	mov    eax,esi
c0016036:	c1 e8 10             	shr    eax,0x10
c0016039:	66 f7 f1             	div    cx
c001603c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016041:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016046:	59                   	pop    ecx
c0016047:	5b                   	pop    ebx
c0016048:	89 fb                	mov    ebx,edi
c001604a:	6a 0b                	push   0xb
c001604c:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0016052:	e8 4f 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016057:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001605b:	83 c4 10             	add    esp,0x10
c001605e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016063:	75 74                	jne    c00160d9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016065:	b2 0a                	mov    dl,0xa
c0016067:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001606b:	0f b6 c1             	movzx  eax,cl
c001606e:	f6 f2                	div    dl
c0016070:	88 c3                	mov    bl,al
c0016072:	88 e0                	mov    al,ah
c0016074:	c1 e3 04             	shl    ebx,0x4
c0016077:	09 c3                	or     ebx,eax
c0016079:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001607e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016082:	f6 f2                	div    dl
c0016084:	88 c1                	mov    cl,al
c0016086:	88 e0                	mov    al,ah
c0016088:	c1 e1 04             	shl    ecx,0x4
c001608b:	09 c1                	or     ecx,eax
c001608d:	89 f8                	mov    eax,edi
c001608f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016093:	0f b6 c0             	movzx  eax,al
c0016096:	f6 f2                	div    dl
c0016098:	88 c3                	mov    bl,al
c001609a:	88 e0                	mov    al,ah
c001609c:	c1 e3 04             	shl    ebx,0x4
c001609f:	09 c3                	or     ebx,eax
c00160a1:	89 f0                	mov    eax,esi
c00160a3:	0f b6 c0             	movzx  eax,al
c00160a6:	f6 f2                	div    dl
c00160a8:	88 c1                	mov    cl,al
c00160aa:	88 e0                	mov    al,ah
c00160ac:	c1 e1 04             	shl    ecx,0x4
c00160af:	09 c1                	or     ecx,eax
c00160b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160b6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00160ba:	f6 f2                	div    dl
c00160bc:	88 c1                	mov    cl,al
c00160be:	88 e0                	mov    al,ah
c00160c0:	c1 e1 04             	shl    ecx,0x4
c00160c3:	09 c1                	or     ecx,eax
c00160c5:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00160ca:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00160ce:	f6 f2                	div    dl
c00160d0:	89 c5                	mov    ebp,eax
c00160d2:	88 e0                	mov    al,ah
c00160d4:	c1 e5 04             	shl    ebp,0x4
c00160d7:	09 c5                	or     ebp,eax
c00160d9:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00160de:	75 17                	jne    c00160f7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160e0:	80 fb 0b             	cmp    bl,0xb
c00160e3:	76 0c                	jbe    c00160f1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00160e5:	80 eb 0c             	sub    bl,0xc
c00160e8:	75 02                	jne    c00160ec <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00160ea:	b3 0c                	mov    bl,0xc
c00160ec:	83 cb 80             	or     ebx,0xffffff80
c00160ef:	eb 06                	jmp    c00160f7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160f1:	84 db                	test   bl,bl
c00160f3:	75 02                	jne    c00160f7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160f5:	b3 0c                	mov    bl,0xc
c00160f7:	0f b6 db             	movzx  ebx,bl
c00160fa:	50                   	push   eax
c00160fb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016100:	50                   	push   eax
c0016101:	6a 00                	push   0x0
c0016103:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0016109:	e8 ae 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001610e:	83 c4 0c             	add    esp,0xc
c0016111:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016116:	50                   	push   eax
c0016117:	6a 02                	push   0x2
c0016119:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c001611f:	e8 98 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016124:	83 c4 0c             	add    esp,0xc
c0016127:	53                   	push   ebx
c0016128:	6a 04                	push   0x4
c001612a:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0016130:	e8 87 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016135:	83 c4 0c             	add    esp,0xc
c0016138:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001613d:	50                   	push   eax
c001613e:	6a 07                	push   0x7
c0016140:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0016146:	e8 71 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001614b:	83 c4 0c             	add    esp,0xc
c001614e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016153:	50                   	push   eax
c0016154:	6a 08                	push   0x8
c0016156:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c001615c:	e8 5b 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016161:	83 c4 0c             	add    esp,0xc
c0016164:	89 e8                	mov    eax,ebp
c0016166:	0f b6 e8             	movzx  ebp,al
c0016169:	55                   	push   ebp
c001616a:	6a 09                	push   0x9
c001616c:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c0016172:	e8 45 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016177:	5a                   	pop    edx
c0016178:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001617c:	e8 9f fb ff ff       	call   c0015d20 <RTC::completeRTCRefresh()>
c0016181:	83 c4 3c             	add    esp,0x3c
c0016184:	b0 01                	mov    al,0x1
c0016186:	5b                   	pop    ebx
c0016187:	5e                   	pop    esi
c0016188:	5f                   	pop    edi
c0016189:	5d                   	pop    ebp
c001618a:	c3                   	ret    

c001618b <rtcIRQHandler(regs*, void*)>:
c001618b:	53                   	push   ebx
c001618c:	83 ec 10             	sub    esp,0x10
c001618f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016193:	6a 0c                	push   0xc
c0016195:	ff 35 38 0c 02 c0    	push   DWORD PTR ds:0xc0020c38
c001619b:	e8 06 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161a0:	83 c4 10             	add    esp,0x10
c00161a3:	84 c0                	test   al,al
c00161a5:	79 24                	jns    c00161cb <rtcIRQHandler(regs*, void*)+0x40>
c00161a7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00161ae:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00161b5:	66 ff 05 94 3f 02 c0 	inc    WORD PTR ds:0xc0023f94
c00161bc:	75 0d                	jne    c00161cb <rtcIRQHandler(regs*, void*)+0x40>
c00161be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00161c2:	83 c4 08             	add    esp,0x8
c00161c5:	5b                   	pop    ebx
c00161c6:	e9 55 fb ff ff       	jmp    c0015d20 <RTC::completeRTCRefresh()>
c00161cb:	83 c4 08             	add    esp,0x8
c00161ce:	5b                   	pop    ebx
c00161cf:	c3                   	ret    

c00161d0 <RTC::RTC()>:
c00161d0:	83 ec 1c             	sub    esp,0x1c
c00161d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d7:	83 ec 08             	sub    esp,0x8
c00161da:	68 b3 f0 01 c0       	push   0xc001f0b3
c00161df:	50                   	push   eax
c00161e0:	e8 f5 51 ff ff       	call   c000b3da <Clock::Clock(char const*)>
c00161e5:	83 c4 10             	add    esp,0x10
c00161e8:	ba d0 f0 01 c0       	mov    edx,0xc001f0d0
c00161ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f1:	89 10                	mov    DWORD PTR [eax],edx
c00161f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f7:	83 ec 0c             	sub    esp,0xc
c00161fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161fe:	6a 01                	push   0x1
c0016200:	68 8b 61 01 c0       	push   0xc001618b
c0016205:	6a 08                	push   0x8
c0016207:	50                   	push   eax
c0016208:	e8 b7 56 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001620d:	83 c4 20             	add    esp,0x20
c0016210:	89 c2                	mov    edx,eax
c0016212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016216:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001621c:	fa                   	cli    
c001621d:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0016222:	40                   	inc    eax
c0016223:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0016228:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001622d:	83 ec 08             	sub    esp,0x8
c0016230:	6a 0b                	push   0xb
c0016232:	50                   	push   eax
c0016233:	e8 6e 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016238:	83 c4 10             	add    esp,0x10
c001623b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001623f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0016244:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016248:	83 ca 10             	or     edx,0x10
c001624b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016251:	83 ec 04             	sub    esp,0x4
c0016254:	52                   	push   edx
c0016255:	6a 0b                	push   0xb
c0016257:	50                   	push   eax
c0016258:	e8 5f 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	83 ec 0c             	sub    esp,0xc
c0016263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016267:	e8 b4 fa ff ff       	call   c0015d20 <RTC::completeRTCRefresh()>
c001626c:	83 c4 10             	add    esp,0x10
c001626f:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0016274:	48                   	dec    eax
c0016275:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001627a:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c001627f:	85 c0                	test   eax,eax
c0016281:	75 01                	jne    c0016284 <RTC::RTC()+0xb4>
c0016283:	fb                   	sti    
c0016284:	90                   	nop
c0016285:	83 c4 1c             	add    esp,0x1c
c0016288:	c3                   	ret    
c0016289:	66 90                	xchg   ax,ax
c001628b:	90                   	nop

c001628c <HalConsoleScroll(int, int)>:
c001628c:	83 ec 10             	sub    esp,0x10
c001628f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016297:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001629f:	90                   	nop
c00162a0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162a5:	0f 8f e1 00 00 00    	jg     c001638c <HalConsoleScroll(int, int)+0x100>
c00162ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00162b3:	90                   	nop
c00162b4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00162bc:	0f 8f be 00 00 00    	jg     c0016380 <HalConsoleScroll(int, int)+0xf4>
c00162c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162c6:	89 d0                	mov    eax,edx
c00162c8:	c1 e0 02             	shl    eax,0x2
c00162cb:	01 d0                	add    eax,edx
c00162cd:	c1 e0 05             	shl    eax,0x5
c00162d0:	89 c2                	mov    edx,eax
c00162d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162d6:	01 d0                	add    eax,edx
c00162d8:	89 c2                	mov    edx,eax
c00162da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162de:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00162e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162e5:	89 d0                	mov    eax,edx
c00162e7:	c1 e0 02             	shl    eax,0x2
c00162ea:	01 d0                	add    eax,edx
c00162ec:	c1 e0 05             	shl    eax,0x5
c00162ef:	89 c2                	mov    edx,eax
c00162f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162f5:	01 d0                	add    eax,edx
c00162f7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00162fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016301:	01 c2                	add    edx,eax
c0016303:	8a 01                	mov    al,BYTE PTR [ecx]
c0016305:	88 02                	mov    BYTE PTR [edx],al
c0016307:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001630c:	75 66                	jne    c0016374 <HalConsoleScroll(int, int)+0xe8>
c001630e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016312:	83 e0 01             	and    eax,0x1
c0016315:	74 39                	je     c0016350 <HalConsoleScroll(int, int)+0xc4>
c0016317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001631b:	83 e0 0f             	and    eax,0xf
c001631e:	88 c2                	mov    dl,al
c0016320:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016324:	c1 e0 04             	shl    eax,0x4
c0016327:	88 d1                	mov    cl,dl
c0016329:	09 c1                	or     ecx,eax
c001632b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001632f:	89 d0                	mov    eax,edx
c0016331:	c1 e0 02             	shl    eax,0x2
c0016334:	01 d0                	add    eax,edx
c0016336:	c1 e0 05             	shl    eax,0x5
c0016339:	89 c2                	mov    edx,eax
c001633b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001633f:	01 d0                	add    eax,edx
c0016341:	89 c2                	mov    edx,eax
c0016343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016347:	01 d0                	add    eax,edx
c0016349:	88 ca                	mov    dl,cl
c001634b:	88 10                	mov    BYTE PTR [eax],dl
c001634d:	eb 25                	jmp    c0016374 <HalConsoleScroll(int, int)+0xe8>
c001634f:	90                   	nop
c0016350:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016354:	89 d0                	mov    eax,edx
c0016356:	c1 e0 02             	shl    eax,0x2
c0016359:	01 d0                	add    eax,edx
c001635b:	c1 e0 05             	shl    eax,0x5
c001635e:	89 c2                	mov    edx,eax
c0016360:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016364:	01 d0                	add    eax,edx
c0016366:	89 c2                	mov    edx,eax
c0016368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001636c:	01 d0                	add    eax,edx
c001636e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016371:	8d 76 00             	lea    esi,[esi+0x0]
c0016374:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016378:	e9 37 ff ff ff       	jmp    c00162b4 <HalConsoleScroll(int, int)+0x28>
c001637d:	8d 76 00             	lea    esi,[esi+0x0]
c0016380:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016384:	e9 17 ff ff ff       	jmp    c00162a0 <HalConsoleScroll(int, int)+0x14>
c0016389:	8d 76 00             	lea    esi,[esi+0x0]
c001638c:	90                   	nop
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	c3                   	ret    
c0016391:	8d 76 00             	lea    esi,[esi+0x0]

c0016394 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016394:	83 ec 14             	sub    esp,0x14
c0016397:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001639b:	88 04 24             	mov    BYTE PTR [esp],al
c001639e:	8a 04 24             	mov    al,BYTE PTR [esp]
c00163a1:	25 ff 00 00 00       	and    eax,0xff
c00163a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163aa:	89 d1                	mov    ecx,edx
c00163ac:	83 e1 0f             	and    ecx,0xf
c00163af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163b3:	c1 e2 04             	shl    edx,0x4
c00163b6:	81 e2 ff 00 00 00    	and    edx,0xff
c00163bc:	09 ca                	or     edx,ecx
c00163be:	c1 e2 08             	shl    edx,0x8
c00163c1:	09 d0                	or     eax,edx
c00163c3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00163c8:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00163d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163d4:	89 d0                	mov    eax,edx
c00163d6:	c1 e0 02             	shl    eax,0x2
c00163d9:	01 d0                	add    eax,edx
c00163db:	c1 e0 04             	shl    eax,0x4
c00163de:	89 c2                	mov    edx,eax
c00163e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163e4:	01 d0                	add    eax,edx
c00163e6:	01 c0                	add    eax,eax
c00163e8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00163ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163f0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00163f5:	66 89 02             	mov    WORD PTR [edx],ax
c00163f8:	90                   	nop
c00163f9:	83 c4 14             	add    esp,0x14
c00163fc:	c3                   	ret    
c00163fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016400 <HalConsoleCursorUpdate(int, int)>:
c0016400:	83 ec 20             	sub    esp,0x20
c0016403:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016407:	89 c2                	mov    edx,eax
c0016409:	89 d0                	mov    eax,edx
c001640b:	c1 e0 02             	shl    eax,0x2
c001640e:	01 d0                	add    eax,edx
c0016410:	c1 e0 04             	shl    eax,0x4
c0016413:	89 c2                	mov    edx,eax
c0016415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016419:	01 d0                	add    eax,edx
c001641b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016420:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016427:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001642c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016430:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016434:	ee                   	out    dx,al
c0016435:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001643a:	25 ff 00 00 00       	and    eax,0xff
c001643f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016446:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001644a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001644e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016452:	ee                   	out    dx,al
c0016453:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001645a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001645f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016463:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016467:	ee                   	out    dx,al
c0016468:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001646d:	66 c1 e8 08          	shr    ax,0x8
c0016471:	25 ff 00 00 00       	and    eax,0xff
c0016476:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001647d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016481:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016485:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016489:	ee                   	out    dx,al
c001648a:	90                   	nop
c001648b:	83 c4 20             	add    esp,0x20
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <FAT::getName()>:
c0016490:	b8 04 f1 01 c0       	mov    eax,0xc001f104
c0016495:	c3                   	ret    
c0016496:	66 90                	xchg   ax,ax

c0016498 <FAT::tell(void*, unsigned long long*)>:
c0016498:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001649d:	75 09                	jne    c00164a8 <FAT::tell(void*, unsigned long long*)+0x10>
c001649f:	b8 04 00 00 00       	mov    eax,0x4
c00164a4:	c3                   	ret    
c00164a5:	8d 76 00             	lea    esi,[esi+0x0]
c00164a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164ad:	75 09                	jne    c00164b8 <FAT::tell(void*, unsigned long long*)+0x20>
c00164af:	b8 04 00 00 00       	mov    eax,0x4
c00164b4:	c3                   	ret    
c00164b5:	8d 76 00             	lea    esi,[esi+0x0]
c00164b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164bc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00164bf:	ba 00 00 00 00       	mov    edx,0x0
c00164c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164c8:	89 01                	mov    DWORD PTR [ecx],eax
c00164ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164cd:	b8 00 00 00 00       	mov    eax,0x0
c00164d2:	c3                   	ret    
c00164d3:	90                   	nop

c00164d4 <FAT::stat(void*, unsigned long long*)>:
c00164d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164d9:	75 09                	jne    c00164e4 <FAT::stat(void*, unsigned long long*)+0x10>
c00164db:	b8 04 00 00 00       	mov    eax,0x4
c00164e0:	c3                   	ret    
c00164e1:	8d 76 00             	lea    esi,[esi+0x0]
c00164e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164e9:	75 09                	jne    c00164f4 <FAT::stat(void*, unsigned long long*)+0x20>
c00164eb:	b8 04 00 00 00       	mov    eax,0x4
c00164f0:	c3                   	ret    
c00164f1:	8d 76 00             	lea    esi,[esi+0x0]
c00164f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00164fb:	ba 00 00 00 00       	mov    edx,0x0
c0016500:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016504:	89 01                	mov    DWORD PTR [ecx],eax
c0016506:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016509:	b8 00 00 00 00       	mov    eax,0x0
c001650e:	c3                   	ret    
c001650f:	90                   	nop

c0016510 <FAT::~FAT()>:
c0016510:	83 ec 0c             	sub    esp,0xc
c0016513:	ba 50 f1 01 c0       	mov    edx,0xc001f150
c0016518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001651c:	89 10                	mov    DWORD PTR [eax],edx
c001651e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016522:	83 ec 0c             	sub    esp,0xc
c0016525:	50                   	push   eax
c0016526:	e8 f3 42 ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c001652b:	83 c4 10             	add    esp,0x10
c001652e:	90                   	nop
c001652f:	83 c4 0c             	add    esp,0xc
c0016532:	c3                   	ret    
c0016533:	90                   	nop

c0016534 <FAT::~FAT()>:
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	83 ec 0c             	sub    esp,0xc
c001653a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001653e:	e8 cd ff ff ff       	call   c0016510 <FAT::~FAT()>
c0016543:	83 c4 10             	add    esp,0x10
c0016546:	83 ec 08             	sub    esp,0x8
c0016549:	6a 08                	push   0x8
c001654b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654f:	e8 8e 3e ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0016554:	83 c4 10             	add    esp,0x10
c0016557:	83 c4 0c             	add    esp,0xc
c001655a:	c3                   	ret    
c001655b:	90                   	nop

c001655c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001655c:	83 ec 1c             	sub    esp,0x1c
c001655f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016566:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001656b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001656f:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c0016576:	83 f8 ff             	cmp    eax,0xffffffff
c0016579:	75 35                	jne    c00165b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001657b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001657f:	88 c2                	mov    dl,al
c0016581:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0016586:	01 d0                	add    eax,edx
c0016588:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001658c:	8b 15 a0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa0
c0016592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016596:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c001659d:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c00165a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165a6:	89 14 85 40 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfc0],edx
c00165ad:	eb 19                	jmp    c00165c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00165af:	90                   	nop
c00165b0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165b4:	88 c2                	mov    dl,al
c00165b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165ba:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c00165c1:	01 d0                	add    eax,edx
c00165c3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165c7:	90                   	nop
c00165c8:	83 ec 04             	sub    esp,0x4
c00165cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165d3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00165d7:	50                   	push   eax
c00165d8:	e8 77 e8 fe ff       	call   c0004e54 <f_getlabel>
c00165dd:	83 c4 10             	add    esp,0x10
c00165e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165e9:	75 09                	jne    c00165f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00165eb:	b8 00 00 00 00       	mov    eax,0x0
c00165f0:	eb 0a                	jmp    c00165fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00165f2:	66 90                	xchg   ax,ax
c00165f4:	b8 01 00 00 00       	mov    eax,0x1
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]
c00165fc:	83 c4 1c             	add    esp,0x1c
c00165ff:	c3                   	ret    

c0016600 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016600:	57                   	push   edi
c0016601:	83 ec 58             	sub    esp,0x58
c0016604:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001660c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016610:	b8 00 00 00 00       	mov    eax,0x0
c0016615:	b9 0f 00 00 00       	mov    ecx,0xf
c001661a:	fc                   	cld    
c001661b:	89 d7                	mov    edi,edx
c001661d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001661f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016623:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c001662a:	83 f8 ff             	cmp    eax,0xffffffff
c001662d:	75 35                	jne    c0016664 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001662f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016633:	88 c2                	mov    dl,al
c0016635:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c001663a:	01 d0                	add    eax,edx
c001663c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016640:	8b 15 a0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa0
c0016646:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001664a:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c0016651:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0016656:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001665a:	89 14 85 40 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfc0],edx
c0016661:	eb 19                	jmp    c001667c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016663:	90                   	nop
c0016664:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016668:	88 c2                	mov    dl,al
c001666a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001666e:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c0016675:	01 d0                	add    eax,edx
c0016677:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001667b:	90                   	nop
c001667c:	83 ec 08             	sub    esp,0x8
c001667f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016683:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016687:	50                   	push   eax
c0016688:	e8 33 a1 fe ff       	call   c00007c0 <strcat>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	83 ec 0c             	sub    esp,0xc
c0016693:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016697:	50                   	push   eax
c0016698:	e8 08 e9 fe ff       	call   c0004fa5 <f_setlabel>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00166a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00166a9:	75 09                	jne    c00166b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00166ab:	b8 00 00 00 00       	mov    eax,0x0
c00166b0:	eb 0a                	jmp    c00166bc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	b8 01 00 00 00       	mov    eax,0x1
c00166b9:	8d 76 00             	lea    esi,[esi+0x0]
c00166bc:	83 c4 58             	add    esp,0x58
c00166bf:	5f                   	pop    edi
c00166c0:	c3                   	ret    
c00166c1:	90                   	nop
c00166c2:	66 90                	xchg   ax,ax

c00166c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00166c4:	83 ec 2c             	sub    esp,0x2c
c00166c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00166cf:	83 ec 08             	sub    esp,0x8
c00166d2:	68 28 f1 01 c0       	push   0xc001f128
c00166d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166db:	e8 00 a0 fe ff       	call   c00006e0 <strcmp>
c00166e0:	83 c4 10             	add    esp,0x10
c00166e3:	85 c0                	test   eax,eax
c00166e5:	0f 94 c0             	sete   al
c00166e8:	84 c0                	test   al,al
c00166ea:	74 10                	je     c00166fc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00166ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166f4:	e9 b3 00 00 00       	jmp    c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166f9:	8d 76 00             	lea    esi,[esi+0x0]
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	68 1a f1 01 c0       	push   0xc001f11a
c0016704:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016708:	e8 d3 9f fe ff       	call   c00006e0 <strcmp>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	85 c0                	test   eax,eax
c0016712:	0f 94 c0             	sete   al
c0016715:	84 c0                	test   al,al
c0016717:	74 0f                	je     c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016719:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016721:	e9 86 00 00 00       	jmp    c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016726:	66 90                	xchg   ax,ax
c0016728:	83 ec 08             	sub    esp,0x8
c001672b:	68 20 f1 01 c0       	push   0xc001f120
c0016730:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016734:	e8 a7 9f fe ff       	call   c00006e0 <strcmp>
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	85 c0                	test   eax,eax
c001673e:	0f 94 c0             	sete   al
c0016741:	84 c0                	test   al,al
c0016743:	74 0b                	je     c0016750 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016745:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001674d:	eb 5d                	jmp    c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001674f:	90                   	nop
c0016750:	83 ec 08             	sub    esp,0x8
c0016753:	68 1c cf 01 c0       	push   0xc001cf1c
c0016758:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001675c:	e8 7f 9f fe ff       	call   c00006e0 <strcmp>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	85 c0                	test   eax,eax
c0016766:	0f 94 c0             	sete   al
c0016769:	84 c0                	test   al,al
c001676b:	74 0b                	je     c0016778 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001676d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016775:	eb 35                	jmp    c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016777:	90                   	nop
c0016778:	83 ec 08             	sub    esp,0x8
c001677b:	68 26 f1 01 c0       	push   0xc001f126
c0016780:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016784:	e8 57 9f fe ff       	call   c00006e0 <strcmp>
c0016789:	83 c4 10             	add    esp,0x10
c001678c:	85 c0                	test   eax,eax
c001678e:	0f 94 c0             	sete   al
c0016791:	84 c0                	test   al,al
c0016793:	74 0b                	je     c00167a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016795:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001679d:	eb 0d                	jmp    c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001679f:	90                   	nop
c00167a0:	b8 08 00 00 00       	mov    eax,0x8
c00167a5:	e9 ea 00 00 00       	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00167b3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00167b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167bc:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c00167c3:	83 f8 ff             	cmp    eax,0xffffffff
c00167c6:	75 34                	jne    c00167fc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00167c8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167cc:	88 c2                	mov    dl,al
c00167ce:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c00167d3:	01 d0                	add    eax,edx
c00167d5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167d9:	8b 15 a0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa0
c00167df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167e3:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c00167ea:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c00167ef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00167f3:	89 14 85 40 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfc0],edx
c00167fa:	eb 18                	jmp    c0016814 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00167fc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016800:	88 c2                	mov    dl,al
c0016802:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016806:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c001680d:	01 d0                	add    eax,edx
c001680f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016813:	90                   	nop
c0016814:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016818:	88 04 24             	mov    BYTE PTR [esp],al
c001681b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001681f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016823:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001682b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016830:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016838:	83 ec 0c             	sub    esp,0xc
c001683b:	68 00 20 00 00       	push   0x2000
c0016840:	e8 74 0f ff ff       	call   c00077b9 <malloc>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001684c:	68 00 20 00 00       	push   0x2000
c0016851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016855:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016859:	50                   	push   eax
c001685a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001685e:	50                   	push   eax
c001685f:	e8 31 ea fe ff       	call   c0005295 <f_mkfs>
c0016864:	83 c4 10             	add    esp,0x10
c0016867:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001686b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016870:	75 0a                	jne    c001687c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016872:	b8 00 00 00 00       	mov    eax,0x0
c0016877:	eb 1b                	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016879:	8d 76 00             	lea    esi,[esi+0x0]
c001687c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016881:	75 09                	jne    c001688c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016883:	b8 09 00 00 00       	mov    eax,0x9
c0016888:	eb 0a                	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001688a:	66 90                	xchg   ax,ax
c001688c:	b8 01 00 00 00       	mov    eax,0x1
c0016891:	8d 76 00             	lea    esi,[esi+0x0]
c0016894:	83 c4 2c             	add    esp,0x2c
c0016897:	c3                   	ret    

c0016898 <FAT::tryMount(LogicalDisk*, int)>:
c0016898:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001689e:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c00168a3:	83 f8 14             	cmp    eax,0x14
c00168a6:	75 18                	jne    c00168c0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	68 2c f1 01 c0       	push   0xc001f12c
c00168b0:	e8 6e 98 ff ff       	call   c0010123 <KePanic(char const*)>
c00168b5:	83 c4 10             	add    esp,0x10
c00168b8:	b0 00                	mov    al,0x0
c00168ba:	e9 e9 01 00 00       	jmp    c0016aa8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168bf:	90                   	nop
c00168c0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00168c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00168cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168d3:	3d 00 02 00 00       	cmp    eax,0x200
c00168d8:	74 0a                	je     c00168e4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00168da:	b0 00                	mov    al,0x0
c00168dc:	e9 c7 01 00 00       	jmp    c0016aa8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168e1:	8d 76 00             	lea    esi,[esi+0x0]
c00168e4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00168ec:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168f3:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c00168fa:	83 f8 ff             	cmp    eax,0xffffffff
c00168fd:	74 09                	je     c0016908 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00168ff:	b0 01                	mov    al,0x1
c0016901:	e9 a2 01 00 00       	jmp    c0016aa8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016906:	66 90                	xchg   ax,ax
c0016908:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016912:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001691a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016921:	88 c2                	mov    dl,al
c0016923:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0016928:	01 d0                	add    eax,edx
c001692a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016931:	8b 15 a0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa0
c0016937:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001693e:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c0016945:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c001694a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016951:	89 14 85 40 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfc0],edx
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	68 34 02 00 00       	push   0x234
c0016960:	e8 54 0e ff ff       	call   c00077b9 <malloc>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001696f:	83 ec 04             	sub    esp,0x4
c0016972:	6a 00                	push   0x0
c0016974:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001697b:	50                   	push   eax
c001697c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016983:	e8 33 d1 fe ff       	call   c0003abb <f_mount>
c0016988:	83 c4 10             	add    esp,0x10
c001698b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016992:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001699a:	74 1c                	je     c00169b8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169a6:	e8 2e 0e ff ff       	call   c00077d9 <rfree>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	b0 00                	mov    al,0x0
c00169b0:	e9 f3 00 00 00       	jmp    c0016aa8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169b5:	8d 76 00             	lea    esi,[esi+0x0]
c00169b8:	83 ec 04             	sub    esp,0x4
c00169bb:	68 00 01 00 00       	push   0x100
c00169c0:	6a 00                	push   0x0
c00169c2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169c9:	50                   	push   eax
c00169ca:	e8 01 9b fe ff       	call   c00004d0 <memset>
c00169cf:	83 c4 10             	add    esp,0x10
c00169d2:	83 ec 08             	sub    esp,0x8
c00169d5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169dc:	50                   	push   eax
c00169dd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169e4:	50                   	push   eax
c00169e5:	e8 d6 9d fe ff       	call   c00007c0 <strcat>
c00169ea:	83 c4 10             	add    esp,0x10
c00169ed:	83 ec 08             	sub    esp,0x8
c00169f0:	68 3a f1 01 c0       	push   0xc001f13a
c00169f5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169fc:	50                   	push   eax
c00169fd:	e8 be 9d fe ff       	call   c00007c0 <strcat>
c0016a02:	83 c4 10             	add    esp,0x10
c0016a05:	83 ec 04             	sub    esp,0x4
c0016a08:	6a 01                	push   0x1
c0016a0a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016a11:	50                   	push   eax
c0016a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a16:	50                   	push   eax
c0016a17:	e8 01 d1 fe ff       	call   c0003b1d <f_open>
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a26:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a2d:	85 c0                	test   eax,eax
c0016a2f:	74 0b                	je     c0016a3c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a31:	78 31                	js     c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a33:	83 e8 04             	sub    eax,0x4
c0016a36:	83 f8 01             	cmp    eax,0x1
c0016a39:	77 29                	ja     c0016a64 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a3b:	90                   	nop
c0016a3c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a44:	83 ec 0c             	sub    esp,0xc
c0016a47:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a4b:	50                   	push   eax
c0016a4c:	e8 7f d8 fe ff       	call   c00042d0 <f_close>
c0016a51:	83 c4 10             	add    esp,0x10
c0016a54:	90                   	nop
c0016a55:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a5d:	74 41                	je     c0016aa0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a5f:	eb 33                	jmp    c0016a94 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a61:	8d 76 00             	lea    esi,[esi+0x0]
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a6e:	e8 66 0d ff ff       	call   c00077d9 <rfree>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	83 ec 04             	sub    esp,0x4
c0016a79:	6a 00                	push   0x0
c0016a7b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a82:	50                   	push   eax
c0016a83:	6a 00                	push   0x0
c0016a85:	e8 31 d0 fe ff       	call   c0003abb <f_mount>
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	b0 00                	mov    al,0x0
c0016a8f:	eb 17                	jmp    c0016aa8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a91:	8d 76 00             	lea    esi,[esi+0x0]
c0016a94:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0016a99:	40                   	inc    eax
c0016a9a:	a3 a0 3f 02 c0       	mov    ds:0xc0023fa0,eax
c0016a9f:	90                   	nop
c0016aa0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016aa7:	90                   	nop
c0016aa8:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016aae:	c3                   	ret    
c0016aaf:	90                   	nop

c0016ab0 <FAT::allocateSwapfile(char const*, int)>:
c0016ab0:	55                   	push   ebp
c0016ab1:	57                   	push   edi
c0016ab2:	56                   	push   esi
c0016ab3:	53                   	push   ebx
c0016ab4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016aba:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016ac5:	83 ec 0c             	sub    esp,0xc
c0016ac8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016acf:	e8 e5 0c ff ff       	call   c00077b9 <malloc>
c0016ad4:	83 c4 10             	add    esp,0x10
c0016ad7:	89 c7                	mov    edi,eax
c0016ad9:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0016ade:	83 ec 04             	sub    esp,0x4
c0016ae1:	50                   	push   eax
c0016ae2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016ae9:	57                   	push   edi
c0016aea:	e8 5f 3f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016af9:	83 ec 04             	sub    esp,0x4
c0016afc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b00:	50                   	push   eax
c0016b01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b05:	50                   	push   eax
c0016b06:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b0d:	e8 a8 42 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b1c:	c1 e0 14             	shl    eax,0x14
c0016b1f:	89 c7                	mov    edi,eax
c0016b21:	89 c5                	mov    ebp,eax
c0016b23:	c1 fd 1f             	sar    ebp,0x1f
c0016b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b2e:	89 f9                	mov    ecx,edi
c0016b30:	31 c1                	xor    ecx,eax
c0016b32:	89 cb                	mov    ebx,ecx
c0016b34:	89 e9                	mov    ecx,ebp
c0016b36:	31 d1                	xor    ecx,edx
c0016b38:	89 ce                	mov    esi,ecx
c0016b3a:	89 f0                	mov    eax,esi
c0016b3c:	09 d8                	or     eax,ebx
c0016b3e:	0f 84 9c 00 00 00    	je     c0016be0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b44:	83 ec 0c             	sub    esp,0xc
c0016b47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b4e:	e8 33 41 ff ff       	call   c000ac86 <File::unlink()>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	83 ec 08             	sub    esp,0x8
c0016b59:	6a 12                	push   0x12
c0016b5b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b62:	e8 a7 3f ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016b67:	83 c4 10             	add    esp,0x10
c0016b6a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b71:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b77:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b7e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b85:	c1 e0 14             	shl    eax,0x14
c0016b88:	83 ec 04             	sub    esp,0x4
c0016b8b:	6a 01                	push   0x1
c0016b8d:	50                   	push   eax
c0016b8e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b95:	e8 9b e5 fe ff       	call   c0005135 <f_expand>
c0016b9a:	83 c4 10             	add    esp,0x10
c0016b9d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ba6:	83 c0 10             	add    eax,0x10
c0016ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bab:	83 ec 0c             	sub    esp,0xc
c0016bae:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bb2:	52                   	push   edx
c0016bb3:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016bb7:	52                   	push   edx
c0016bb8:	6a 00                	push   0x0
c0016bba:	68 00 04 00 00       	push   0x400
c0016bbf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bc6:	ff d0                	call   eax
c0016bc8:	83 c4 20             	add    esp,0x20
c0016bcb:	83 ec 0c             	sub    esp,0xc
c0016bce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bd5:	e8 92 3f ff ff       	call   c000ab6c <File::close()>
c0016bda:	83 c4 10             	add    esp,0x10
c0016bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016be0:	83 ec 08             	sub    esp,0x8
c0016be3:	6a 01                	push   0x1
c0016be5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bec:	e8 1d 3f ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016bf1:	83 c4 10             	add    esp,0x10
c0016bf4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bfd:	83 c0 0c             	add    eax,0xc
c0016c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c09:	52                   	push   edx
c0016c0a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016c0e:	52                   	push   edx
c0016c0f:	6a 00                	push   0x0
c0016c11:	6a 04                	push   0x4
c0016c13:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c1a:	ff d0                	call   eax
c0016c1c:	83 c4 20             	add    esp,0x20
c0016c1f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c26:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c2c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c33:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c3a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c3d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c4e:	e8 19 3f ff ff       	call   c000ab6c <File::close()>
c0016c53:	83 c4 10             	add    esp,0x10
c0016c56:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c5d:	ba 00 00 00 00       	mov    edx,0x0
c0016c62:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c68:	5b                   	pop    ebx
c0016c69:	5e                   	pop    esi
c0016c6a:	5f                   	pop    edi
c0016c6b:	5d                   	pop    ebp
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop
c0016c6e:	66 90                	xchg   ax,ax

c0016c70 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c70:	57                   	push   edi
c0016c71:	56                   	push   esi
c0016c72:	53                   	push   ebx
c0016c73:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c79:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c81:	74 0d                	je     c0016c90 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c83:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c8b:	75 0f                	jne    c0016c9c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c90:	b8 04 00 00 00       	mov    eax,0x4
c0016c95:	e9 36 01 00 00       	jmp    c0016dd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c9a:	66 90                	xchg   ax,ax
c0016c9c:	83 ec 08             	sub    esp,0x8
c0016c9f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016ca6:	50                   	push   eax
c0016ca7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016cae:	e8 e0 d8 fe ff       	call   c0004593 <f_readdir>
c0016cb3:	83 c4 10             	add    esp,0x10
c0016cb6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016cbd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016cc4:	83 ec 0c             	sub    esp,0xc
c0016cc7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016cce:	83 c0 16             	add    eax,0x16
c0016cd1:	50                   	push   eax
c0016cd2:	e8 69 98 fe ff       	call   c0000540 <strlen>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	ba 00 00 00 00       	mov    edx,0x0
c0016cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ce3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ce7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016cee:	25 ff 00 00 00       	and    eax,0xff
c0016cf3:	83 e0 10             	and    eax,0x10
c0016cf6:	74 08                	je     c0016d00 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016cf8:	b8 02 00 00 00       	mov    eax,0x2
c0016cfd:	eb 09                	jmp    c0016d08 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016cff:	90                   	nop
c0016d00:	b8 01 00 00 00       	mov    eax,0x1
c0016d05:	8d 76 00             	lea    esi,[esi+0x0]
c0016d08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d0c:	83 ec 08             	sub    esp,0x8
c0016d0f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d16:	83 c0 16             	add    eax,0x16
c0016d19:	50                   	push   eax
c0016d1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d1e:	83 c0 10             	add    eax,0x10
c0016d21:	50                   	push   eax
c0016d22:	e8 d9 98 fe ff       	call   c0000600 <strcpy>
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d31:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d3c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d43:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d4a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d51:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d58:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d5f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d66:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d6d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d74:	89 c6                	mov    esi,eax
c0016d76:	89 d7                	mov    edi,edx
c0016d78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d7a:	89 c8                	mov    eax,ecx
c0016d7c:	89 fa                	mov    edx,edi
c0016d7e:	89 f3                	mov    ebx,esi
c0016d80:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d87:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d8e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d95:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d9c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016da2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016da9:	84 c0                	test   al,al
c0016dab:	75 07                	jne    c0016db4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016dad:	b8 07 00 00 00       	mov    eax,0x7
c0016db2:	eb 1c                	jmp    c0016dd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016db4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016dbb:	85 c0                	test   eax,eax
c0016dbd:	75 09                	jne    c0016dc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016dbf:	b8 00 00 00 00       	mov    eax,0x0
c0016dc4:	eb 0a                	jmp    c0016dd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dc6:	66 90                	xchg   ax,ax
c0016dc8:	b8 01 00 00 00       	mov    eax,0x1
c0016dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd0:	81 c4 50 02 00 00    	add    esp,0x250
c0016dd6:	5b                   	pop    ebx
c0016dd7:	5e                   	pop    esi
c0016dd8:	5f                   	pop    edi
c0016dd9:	c3                   	ret    
c0016dda:	66 90                	xchg   ax,ax

c0016ddc <FAT::read(void*, unsigned long, void*, int*)>:
c0016ddc:	83 ec 1c             	sub    esp,0x1c
c0016ddf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016de4:	74 0a                	je     c0016df0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016de6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016deb:	75 0b                	jne    c0016df8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ded:	8d 76 00             	lea    esi,[esi+0x0]
c0016df0:	b8 04 00 00 00       	mov    eax,0x4
c0016df5:	eb 41                	jmp    c0016e38 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016df7:	90                   	nop
c0016df8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dfc:	50                   	push   eax
c0016dfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e09:	e8 da cf fe ff       	call   c0003de8 <f_read>
c0016e0e:	83 c4 10             	add    esp,0x10
c0016e11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e19:	89 c2                	mov    edx,eax
c0016e1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e1f:	89 10                	mov    DWORD PTR [eax],edx
c0016e21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e25:	85 c0                	test   eax,eax
c0016e27:	75 07                	jne    c0016e30 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e29:	b8 00 00 00 00       	mov    eax,0x0
c0016e2e:	eb 08                	jmp    c0016e38 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e30:	b8 01 00 00 00       	mov    eax,0x1
c0016e35:	8d 76 00             	lea    esi,[esi+0x0]
c0016e38:	83 c4 1c             	add    esp,0x1c
c0016e3b:	c3                   	ret    

c0016e3c <FAT::write(void*, unsigned long, void*, int*)>:
c0016e3c:	83 ec 1c             	sub    esp,0x1c
c0016e3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e44:	74 0a                	je     c0016e50 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e4b:	75 0b                	jne    c0016e58 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e50:	b8 04 00 00 00       	mov    eax,0x4
c0016e55:	eb 41                	jmp    c0016e98 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e57:	90                   	nop
c0016e58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e5c:	50                   	push   eax
c0016e5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e69:	e8 79 d1 fe ff       	call   c0003fe7 <f_write>
c0016e6e:	83 c4 10             	add    esp,0x10
c0016e71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e79:	89 c2                	mov    edx,eax
c0016e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e7f:	89 10                	mov    DWORD PTR [eax],edx
c0016e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e85:	85 c0                	test   eax,eax
c0016e87:	75 07                	jne    c0016e90 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e89:	b8 00 00 00 00       	mov    eax,0x0
c0016e8e:	eb 08                	jmp    c0016e98 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e90:	b8 01 00 00 00       	mov    eax,0x1
c0016e95:	8d 76 00             	lea    esi,[esi+0x0]
c0016e98:	83 c4 1c             	add    esp,0x1c
c0016e9b:	c3                   	ret    

c0016e9c <FAT::close(void*)>:
c0016e9c:	83 ec 1c             	sub    esp,0x1c
c0016e9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ea4:	75 0a                	jne    c0016eb0 <FAT::close(void*)+0x14>
c0016ea6:	b8 04 00 00 00       	mov    eax,0x4
c0016eab:	eb 3f                	jmp    c0016eec <FAT::close(void*)+0x50>
c0016ead:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb0:	83 ec 0c             	sub    esp,0xc
c0016eb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eb7:	e8 14 d4 fe ff       	call   c00042d0 <f_close>
c0016ebc:	83 c4 10             	add    esp,0x10
c0016ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec3:	83 ec 0c             	sub    esp,0xc
c0016ec6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eca:	e8 fa 08 ff ff       	call   c00077c9 <free>
c0016ecf:	83 c4 10             	add    esp,0x10
c0016ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ed6:	85 c0                	test   eax,eax
c0016ed8:	75 0a                	jne    c0016ee4 <FAT::close(void*)+0x48>
c0016eda:	b8 00 00 00 00       	mov    eax,0x0
c0016edf:	eb 0b                	jmp    c0016eec <FAT::close(void*)+0x50>
c0016ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee4:	b8 01 00 00 00       	mov    eax,0x1
c0016ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0016eec:	83 c4 1c             	add    esp,0x1c
c0016eef:	c3                   	ret    

c0016ef0 <FAT::closeDir(void*)>:
c0016ef0:	83 ec 1c             	sub    esp,0x1c
c0016ef3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ef8:	75 0a                	jne    c0016f04 <FAT::closeDir(void*)+0x14>
c0016efa:	b8 04 00 00 00       	mov    eax,0x4
c0016eff:	eb 3f                	jmp    c0016f40 <FAT::closeDir(void*)+0x50>
c0016f01:	8d 76 00             	lea    esi,[esi+0x0]
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f0b:	e8 61 d6 fe ff       	call   c0004571 <f_closedir>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f1e:	e8 a6 08 ff ff       	call   c00077c9 <free>
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f2a:	85 c0                	test   eax,eax
c0016f2c:	75 0a                	jne    c0016f38 <FAT::closeDir(void*)+0x48>
c0016f2e:	b8 00 00 00 00       	mov    eax,0x0
c0016f33:	eb 0b                	jmp    c0016f40 <FAT::closeDir(void*)+0x50>
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	b8 01 00 00 00       	mov    eax,0x1
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	83 c4 1c             	add    esp,0x1c
c0016f43:	c3                   	ret    

c0016f44 <FAT::seek(void*, unsigned long long)>:
c0016f44:	83 ec 2c             	sub    esp,0x2c
c0016f47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f57:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f5c:	75 0a                	jne    c0016f68 <FAT::seek(void*, unsigned long long)+0x24>
c0016f5e:	b8 04 00 00 00       	mov    eax,0x4
c0016f63:	eb 33                	jmp    c0016f98 <FAT::seek(void*, unsigned long long)+0x54>
c0016f65:	8d 76 00             	lea    esi,[esi+0x0]
c0016f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f6c:	83 ec 08             	sub    esp,0x8
c0016f6f:	50                   	push   eax
c0016f70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f74:	e8 86 d3 fe ff       	call   c00042ff <f_lseek>
c0016f79:	83 c4 10             	add    esp,0x10
c0016f7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f84:	85 c0                	test   eax,eax
c0016f86:	75 08                	jne    c0016f90 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f88:	b8 00 00 00 00       	mov    eax,0x0
c0016f8d:	eb 09                	jmp    c0016f98 <FAT::seek(void*, unsigned long long)+0x54>
c0016f8f:	90                   	nop
c0016f90:	b8 01 00 00 00       	mov    eax,0x1
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	83 c4 2c             	add    esp,0x2c
c0016f9b:	c3                   	ret    

c0016f9c <fatWrapperReadDisk>:
c0016f9c:	53                   	push   ebx
c0016f9d:	83 ec 18             	sub    esp,0x18
c0016fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fa8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fac:	25 ff 00 00 00       	and    eax,0xff
c0016fb1:	8b 0c 85 a0 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce60]
c0016fb8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fc0:	ba 00 00 00 00       	mov    edx,0x0
c0016fc5:	83 ec 0c             	sub    esp,0xc
c0016fc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fcc:	53                   	push   ebx
c0016fcd:	52                   	push   edx
c0016fce:	50                   	push   eax
c0016fcf:	51                   	push   ecx
c0016fd0:	e8 f1 5b ff ff       	call   c000cbc6 <LogicalDisk::read(unsigned long long, int, void*)>
c0016fd5:	83 c4 20             	add    esp,0x20
c0016fd8:	83 c4 18             	add    esp,0x18
c0016fdb:	5b                   	pop    ebx
c0016fdc:	c3                   	ret    
c0016fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0016fe0 <fatWrapperWriteDisk>:
c0016fe0:	53                   	push   ebx
c0016fe1:	83 ec 18             	sub    esp,0x18
c0016fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ff0:	25 ff 00 00 00       	and    eax,0xff
c0016ff5:	8b 0c 85 a0 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce60]
c0016ffc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017004:	ba 00 00 00 00       	mov    edx,0x0
c0017009:	83 ec 0c             	sub    esp,0xc
c001700c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017010:	53                   	push   ebx
c0017011:	52                   	push   edx
c0017012:	50                   	push   eax
c0017013:	51                   	push   ecx
c0017014:	e8 19 5c ff ff       	call   c000cc32 <LogicalDisk::write(unsigned long long, int, void*)>
c0017019:	83 c4 20             	add    esp,0x20
c001701c:	83 c4 18             	add    esp,0x18
c001701f:	5b                   	pop    ebx
c0017020:	c3                   	ret    
c0017021:	8d 76 00             	lea    esi,[esi+0x0]

c0017024 <fatWrapperIoctl>:
c0017024:	53                   	push   ebx
c0017025:	83 ec 28             	sub    esp,0x28
c0017028:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001702c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017030:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017034:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017038:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001703d:	75 35                	jne    c0017074 <fatWrapperIoctl+0x50>
c001703f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017043:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017047:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001704b:	25 ff 00 00 00       	and    eax,0xff
c0017050:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c0017057:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001705d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017063:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017067:	66 89 02             	mov    WORD PTR [edx],ax
c001706a:	b8 00 00 00 00       	mov    eax,0x0
c001706f:	e9 c4 00 00 00       	jmp    c0017138 <fatWrapperIoctl+0x114>
c0017074:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017079:	75 75                	jne    c00170f0 <fatWrapperIoctl+0xcc>
c001707b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001707f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017083:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017087:	25 ff 00 00 00       	and    eax,0xff
c001708c:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c0017093:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017099:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001709f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00170a5:	89 c8                	mov    eax,ecx
c00170a7:	89 da                	mov    edx,ebx
c00170a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00170ad:	c1 e0 0a             	shl    eax,0xa
c00170b0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170b4:	81 e1 ff 00 00 00    	and    ecx,0xff
c00170ba:	8b 0c 8d a0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce60]
c00170c1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00170c7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00170cd:	89 cb                	mov    ebx,ecx
c00170cf:	c1 fb 1f             	sar    ebx,0x1f
c00170d2:	53                   	push   ebx
c00170d3:	51                   	push   ecx
c00170d4:	52                   	push   edx
c00170d5:	50                   	push   eax
c00170d6:	e8 45 50 00 00       	call   c001c120 <__udivdi3>
c00170db:	83 c4 10             	add    esp,0x10
c00170de:	89 c2                	mov    edx,eax
c00170e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170e4:	89 10                	mov    DWORD PTR [eax],edx
c00170e6:	b8 00 00 00 00       	mov    eax,0x0
c00170eb:	eb 4b                	jmp    c0017138 <fatWrapperIoctl+0x114>
c00170ed:	8d 76 00             	lea    esi,[esi+0x0]
c00170f0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00170f5:	75 09                	jne    c0017100 <fatWrapperIoctl+0xdc>
c00170f7:	b8 00 00 00 00       	mov    eax,0x0
c00170fc:	eb 3a                	jmp    c0017138 <fatWrapperIoctl+0x114>
c00170fe:	66 90                	xchg   ax,ax
c0017100:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017105:	75 19                	jne    c0017120 <fatWrapperIoctl+0xfc>
c0017107:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001710b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001710f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017113:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017119:	b8 00 00 00 00       	mov    eax,0x0
c001711e:	eb 18                	jmp    c0017138 <fatWrapperIoctl+0x114>
c0017120:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017125:	75 09                	jne    c0017130 <fatWrapperIoctl+0x10c>
c0017127:	b8 00 00 00 00       	mov    eax,0x0
c001712c:	eb 0a                	jmp    c0017138 <fatWrapperIoctl+0x114>
c001712e:	66 90                	xchg   ax,ax
c0017130:	b8 04 00 00 00       	mov    eax,0x4
c0017135:	8d 76 00             	lea    esi,[esi+0x0]
c0017138:	83 c4 28             	add    esp,0x28
c001713b:	5b                   	pop    ebx
c001713c:	c3                   	ret    
c001713d:	90                   	nop
c001713e:	66 90                	xchg   ax,ax

c0017140 <FAT::FAT()>:
c0017140:	83 ec 1c             	sub    esp,0x1c
c0017143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017147:	83 ec 0c             	sub    esp,0xc
c001714a:	50                   	push   eax
c001714b:	e8 aa 36 ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c0017150:	83 c4 10             	add    esp,0x10
c0017153:	ba 50 f1 01 c0       	mov    edx,0xc001f150
c0017158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715c:	89 10                	mov    DWORD PTR [eax],edx
c001715e:	c7 05 a0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fa0,0x0
c0017168:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017170:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017175:	7f 15                	jg     c001718c <FAT::FAT()+0x4c>
c0017177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001717b:	c7 04 85 c0 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc040],0xffffffff
c0017186:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001718a:	eb e4                	jmp    c0017170 <FAT::FAT()+0x30>
c001718c:	90                   	nop
c001718d:	83 c4 1c             	add    esp,0x1c
c0017190:	c3                   	ret    
c0017191:	90                   	nop
c0017192:	66 90                	xchg   ax,ax

c0017194 <FAT::fixFilepath(char*)>:
c0017194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017198:	8a 00                	mov    al,BYTE PTR [eax]
c001719a:	3c 40                	cmp    al,0x40
c001719c:	7e 2e                	jle    c00171cc <FAT::fixFilepath(char*)+0x38>
c001719e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171a2:	8a 00                	mov    al,BYTE PTR [eax]
c00171a4:	83 e8 41             	sub    eax,0x41
c00171a7:	88 c2                	mov    dl,al
c00171a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171ad:	88 10                	mov    BYTE PTR [eax],dl
c00171af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b3:	8a 00                	mov    al,BYTE PTR [eax]
c00171b5:	0f be c0             	movsx  eax,al
c00171b8:	8b 04 85 c0 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc040]
c00171bf:	83 c0 30             	add    eax,0x30
c00171c2:	88 c2                	mov    dl,al
c00171c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171c8:	88 10                	mov    BYTE PTR [eax],dl
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	90                   	nop
c00171cd:	c3                   	ret    
c00171ce:	66 90                	xchg   ax,ax

c00171d0 <FAT::open(char const*, void**, FileOpenMode)>:
c00171d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00171d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00171de:	74 0c                	je     c00171ec <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00171e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00171e8:	75 0e                	jne    c00171f8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00171ea:	66 90                	xchg   ax,ax
c00171ec:	b8 04 00 00 00       	mov    eax,0x4
c00171f1:	e9 0a 01 00 00       	jmp    c0017300 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00171f6:	66 90                	xchg   ax,ax
c00171f8:	83 ec 08             	sub    esp,0x8
c00171fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017202:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017206:	50                   	push   eax
c0017207:	e8 f4 93 fe ff       	call   c0000600 <strcpy>
c001720c:	83 c4 10             	add    esp,0x10
c001720f:	83 ec 08             	sub    esp,0x8
c0017212:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017216:	50                   	push   eax
c0017217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001721e:	e8 71 ff ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001722e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017235:	83 e0 01             	and    eax,0x1
c0017238:	74 0a                	je     c0017244 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001723a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017242:	66 90                	xchg   ax,ax
c0017244:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001724b:	83 e0 04             	and    eax,0x4
c001724e:	74 10                	je     c0017260 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017250:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017258:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017260:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017267:	83 e0 02             	and    eax,0x2
c001726a:	74 08                	je     c0017274 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001726c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017274:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001727b:	83 e0 08             	and    eax,0x8
c001727e:	74 08                	je     c0017288 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017280:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017288:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001728f:	83 e0 10             	and    eax,0x10
c0017292:	74 08                	je     c001729c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017294:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001729c:	83 ec 0c             	sub    esp,0xc
c001729f:	68 28 02 00 00       	push   0x228
c00172a4:	e8 10 05 ff ff       	call   c00077b9 <malloc>
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	89 c2                	mov    edx,eax
c00172ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172b5:	89 10                	mov    DWORD PTR [eax],edx
c00172b7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00172be:	31 d2                	xor    edx,edx
c00172c0:	88 c2                	mov    dl,al
c00172c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00172cb:	83 ec 04             	sub    esp,0x4
c00172ce:	52                   	push   edx
c00172cf:	8d 54 24 10          	lea    edx,[esp+0x10]
c00172d3:	52                   	push   edx
c00172d4:	50                   	push   eax
c00172d5:	e8 43 c8 fe ff       	call   c0003b1d <f_open>
c00172da:	83 c4 10             	add    esp,0x10
c00172dd:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00172e4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00172ec:	74 0a                	je     c00172f8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00172ee:	b8 01 00 00 00       	mov    eax,0x1
c00172f3:	eb 0b                	jmp    c0017300 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172f5:	8d 76 00             	lea    esi,[esi+0x0]
c00172f8:	b8 00 00 00 00       	mov    eax,0x0
c00172fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017300:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017306:	c3                   	ret    
c0017307:	90                   	nop

c0017308 <FAT::openDir(char const*, void**)>:
c0017308:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001730e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017316:	74 0c                	je     c0017324 <FAT::openDir(char const*, void**)+0x1c>
c0017318:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017320:	75 0e                	jne    c0017330 <FAT::openDir(char const*, void**)+0x28>
c0017322:	66 90                	xchg   ax,ax
c0017324:	b8 04 00 00 00       	mov    eax,0x4
c0017329:	e9 82 00 00 00       	jmp    c00173b0 <FAT::openDir(char const*, void**)+0xa8>
c001732e:	66 90                	xchg   ax,ax
c0017330:	83 ec 08             	sub    esp,0x8
c0017333:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001733a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001733e:	50                   	push   eax
c001733f:	e8 bc 92 fe ff       	call   c0000600 <strcpy>
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	83 ec 08             	sub    esp,0x8
c001734a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001734e:	50                   	push   eax
c001734f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017356:	e8 39 fe ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c001735b:	83 c4 10             	add    esp,0x10
c001735e:	83 ec 0c             	sub    esp,0xc
c0017361:	6a 30                	push   0x30
c0017363:	e8 51 04 ff ff       	call   c00077b9 <malloc>
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	89 c2                	mov    edx,eax
c001736d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017374:	89 10                	mov    DWORD PTR [eax],edx
c0017376:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001737d:	8b 00                	mov    eax,DWORD PTR [eax]
c001737f:	83 ec 08             	sub    esp,0x8
c0017382:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017386:	52                   	push   edx
c0017387:	50                   	push   eax
c0017388:	e8 19 d1 fe ff       	call   c00044a6 <f_opendir>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017397:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001739f:	74 07                	je     c00173a8 <FAT::openDir(char const*, void**)+0xa0>
c00173a1:	b8 01 00 00 00       	mov    eax,0x1
c00173a6:	eb 08                	jmp    c00173b0 <FAT::openDir(char const*, void**)+0xa8>
c00173a8:	b8 00 00 00 00       	mov    eax,0x0
c00173ad:	8d 76 00             	lea    esi,[esi+0x0]
c00173b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173b6:	c3                   	ret    
c00173b7:	90                   	nop

c00173b8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00173b8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00173be:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00173c6:	75 0c                	jne    c00173d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00173c8:	b8 04 00 00 00       	mov    eax,0x4
c00173cd:	e9 d6 00 00 00       	jmp    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173d2:	66 90                	xchg   ax,ax
c00173d4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00173dc:	75 0a                	jne    c00173e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00173de:	b8 04 00 00 00       	mov    eax,0x4
c00173e3:	e9 c0 00 00 00       	jmp    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173e8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00173f0:	75 0a                	jne    c00173fc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00173f2:	b8 04 00 00 00       	mov    eax,0x4
c00173f7:	e9 ac 00 00 00       	jmp    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173fc:	83 ec 08             	sub    esp,0x8
c00173ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017406:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001740d:	50                   	push   eax
c001740e:	e8 ed 91 fe ff       	call   c0000600 <strcpy>
c0017413:	83 c4 10             	add    esp,0x10
c0017416:	83 ec 08             	sub    esp,0x8
c0017419:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017420:	50                   	push   eax
c0017421:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017428:	e8 67 fd ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c001742d:	83 c4 10             	add    esp,0x10
c0017430:	83 ec 08             	sub    esp,0x8
c0017433:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017437:	50                   	push   eax
c0017438:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001743f:	50                   	push   eax
c0017440:	e8 e0 d1 fe ff       	call   c0004625 <f_stat>
c0017445:	83 c4 10             	add    esp,0x10
c0017448:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001744f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017456:	85 c0                	test   eax,eax
c0017458:	74 0a                	je     c0017464 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001745a:	83 f8 04             	cmp    eax,0x4
c001745d:	74 39                	je     c0017498 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001745f:	eb 3f                	jmp    c00174a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017461:	8d 76 00             	lea    esi,[esi+0x0]
c0017464:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017468:	25 ff 00 00 00       	and    eax,0xff
c001746d:	83 e0 10             	and    eax,0x10
c0017470:	0f 95 c2             	setne  dl
c0017473:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001747a:	88 10                	mov    BYTE PTR [eax],dl
c001747c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017480:	ba 00 00 00 00       	mov    edx,0x0
c0017485:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001748c:	89 01                	mov    DWORD PTR [ecx],eax
c001748e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017491:	b8 00 00 00 00       	mov    eax,0x0
c0017496:	eb 10                	jmp    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017498:	b8 02 00 00 00       	mov    eax,0x2
c001749d:	eb 09                	jmp    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001749f:	90                   	nop
c00174a0:	b8 01 00 00 00       	mov    eax,0x1
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <FAT::unlink(char const*)>:
c00174b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00174b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00174be:	75 08                	jne    c00174c8 <FAT::unlink(char const*)+0x18>
c00174c0:	b8 04 00 00 00       	mov    eax,0x4
c00174c5:	eb 61                	jmp    c0017528 <FAT::unlink(char const*)+0x78>
c00174c7:	90                   	nop
c00174c8:	83 ec 08             	sub    esp,0x8
c00174cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174d6:	50                   	push   eax
c00174d7:	e8 24 91 fe ff       	call   c0000600 <strcpy>
c00174dc:	83 c4 10             	add    esp,0x10
c00174df:	83 ec 08             	sub    esp,0x8
c00174e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00174e6:	50                   	push   eax
c00174e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174ee:	e8 a1 fc ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	83 ec 0c             	sub    esp,0xc
c00174f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174fd:	50                   	push   eax
c00174fe:	e8 87 d3 fe ff       	call   c000488a <f_unlink>
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001750d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017514:	85 c0                	test   eax,eax
c0017516:	75 08                	jne    c0017520 <FAT::unlink(char const*)+0x70>
c0017518:	b8 00 00 00 00       	mov    eax,0x0
c001751d:	eb 09                	jmp    c0017528 <FAT::unlink(char const*)+0x78>
c001751f:	90                   	nop
c0017520:	b8 01 00 00 00       	mov    eax,0x1
c0017525:	8d 76 00             	lea    esi,[esi+0x0]
c0017528:	81 c4 1c 01 00 00    	add    esp,0x11c
c001752e:	c3                   	ret    
c001752f:	90                   	nop

c0017530 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017530:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017536:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001753d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017544:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017548:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001754c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017554:	75 0a                	jne    c0017560 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017556:	b8 04 00 00 00       	mov    eax,0x4
c001755b:	e9 54 01 00 00       	jmp    c00176b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017560:	83 ec 08             	sub    esp,0x8
c0017563:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001756a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001756e:	50                   	push   eax
c001756f:	e8 8c 90 fe ff       	call   c0000600 <strcpy>
c0017574:	83 c4 10             	add    esp,0x10
c0017577:	83 ec 08             	sub    esp,0x8
c001757a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001757e:	50                   	push   eax
c001757f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017586:	e8 09 fc ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017596:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001759e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175a2:	25 ff 00 00 00       	and    eax,0xff
c00175a7:	83 e0 01             	and    eax,0x1
c00175aa:	74 08                	je     c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00175ac:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00175b4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175b8:	25 ff 00 00 00       	and    eax,0xff
c00175bd:	83 e0 02             	and    eax,0x2
c00175c0:	74 0a                	je     c00175cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00175c2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00175ca:	66 90                	xchg   ax,ax
c00175cc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175d0:	25 ff 00 00 00       	and    eax,0xff
c00175d5:	83 e0 04             	and    eax,0x4
c00175d8:	74 0a                	je     c00175e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00175da:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175e8:	25 ff 00 00 00       	and    eax,0xff
c00175ed:	83 e0 08             	and    eax,0x8
c00175f0:	74 0a                	je     c00175fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00175f2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00175fa:	66 90                	xchg   ax,ax
c00175fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017600:	25 ff 00 00 00       	and    eax,0xff
c0017605:	83 e0 01             	and    eax,0x1
c0017608:	74 0a                	je     c0017614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001760a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017612:	66 90                	xchg   ax,ax
c0017614:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017618:	25 ff 00 00 00       	and    eax,0xff
c001761d:	83 e0 02             	and    eax,0x2
c0017620:	74 0a                	je     c001762c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017622:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001762a:	66 90                	xchg   ax,ax
c001762c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017630:	25 ff 00 00 00       	and    eax,0xff
c0017635:	83 e0 04             	and    eax,0x4
c0017638:	74 0a                	je     c0017644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001763a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017642:	66 90                	xchg   ax,ax
c0017644:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017648:	25 ff 00 00 00       	and    eax,0xff
c001764d:	83 e0 08             	and    eax,0x8
c0017650:	74 0a                	je     c001765c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017652:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001765a:	66 90                	xchg   ax,ax
c001765c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017663:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001766a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017671:	31 d2                	xor    edx,edx
c0017673:	88 c2                	mov    dl,al
c0017675:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001767c:	25 ff 00 00 00       	and    eax,0xff
c0017681:	83 ec 04             	sub    esp,0x4
c0017684:	52                   	push   edx
c0017685:	50                   	push   eax
c0017686:	8d 44 24 24          	lea    eax,[esp+0x24]
c001768a:	50                   	push   eax
c001768b:	e8 6d d6 fe ff       	call   c0004cfd <f_chmod>
c0017690:	83 c4 10             	add    esp,0x10
c0017693:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001769a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00176a1:	85 c0                	test   eax,eax
c00176a3:	75 07                	jne    c00176ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00176a5:	b8 00 00 00 00       	mov    eax,0x0
c00176aa:	eb 08                	jmp    c00176b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00176ac:	b8 01 00 00 00       	mov    eax,0x1
c00176b1:	8d 76 00             	lea    esi,[esi+0x0]
c00176b4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00176ba:	c3                   	ret    
c00176bb:	90                   	nop

c00176bc <FAT::rename(char const*, char const*)>:
c00176bc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00176c2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00176ca:	74 0c                	je     c00176d8 <FAT::rename(char const*, char const*)+0x1c>
c00176cc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00176d4:	75 0e                	jne    c00176e4 <FAT::rename(char const*, char const*)+0x28>
c00176d6:	66 90                	xchg   ax,ax
c00176d8:	b8 04 00 00 00       	mov    eax,0x4
c00176dd:	e9 9e 00 00 00       	jmp    c0017780 <FAT::rename(char const*, char const*)+0xc4>
c00176e2:	66 90                	xchg   ax,ax
c00176e4:	83 ec 08             	sub    esp,0x8
c00176e7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176f5:	50                   	push   eax
c00176f6:	e8 05 8f fe ff       	call   c0000600 <strcpy>
c00176fb:	83 c4 10             	add    esp,0x10
c00176fe:	83 ec 08             	sub    esp,0x8
c0017701:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017708:	50                   	push   eax
c0017709:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017710:	e8 7f fa ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	83 ec 08             	sub    esp,0x8
c001771b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017722:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017726:	50                   	push   eax
c0017727:	e8 d4 8e fe ff       	call   c0000600 <strcpy>
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	83 ec 08             	sub    esp,0x8
c0017732:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017736:	50                   	push   eax
c0017737:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001773e:	e8 51 fa ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	83 ec 08             	sub    esp,0x8
c0017749:	8d 44 24 14          	lea    eax,[esp+0x14]
c001774d:	50                   	push   eax
c001774e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017755:	50                   	push   eax
c0017756:	e8 ec d3 fe ff       	call   c0004b47 <f_rename>
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017765:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001776c:	85 c0                	test   eax,eax
c001776e:	75 08                	jne    c0017778 <FAT::rename(char const*, char const*)+0xbc>
c0017770:	b8 00 00 00 00       	mov    eax,0x0
c0017775:	eb 09                	jmp    c0017780 <FAT::rename(char const*, char const*)+0xc4>
c0017777:	90                   	nop
c0017778:	b8 01 00 00 00       	mov    eax,0x1
c001777d:	8d 76 00             	lea    esi,[esi+0x0]
c0017780:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017786:	c3                   	ret    
c0017787:	90                   	nop

c0017788 <FAT::mkdir(char const*)>:
c0017788:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001778e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017796:	75 08                	jne    c00177a0 <FAT::mkdir(char const*)+0x18>
c0017798:	b8 04 00 00 00       	mov    eax,0x4
c001779d:	eb 61                	jmp    c0017800 <FAT::mkdir(char const*)+0x78>
c001779f:	90                   	nop
c00177a0:	83 ec 08             	sub    esp,0x8
c00177a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ae:	50                   	push   eax
c00177af:	e8 4c 8e fe ff       	call   c0000600 <strcpy>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	83 ec 08             	sub    esp,0x8
c00177ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177be:	50                   	push   eax
c00177bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177c6:	e8 c9 f9 ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c00177cb:	83 c4 10             	add    esp,0x10
c00177ce:	83 ec 0c             	sub    esp,0xc
c00177d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177d5:	50                   	push   eax
c00177d6:	e8 d1 d1 fe ff       	call   c00049ac <f_mkdir>
c00177db:	83 c4 10             	add    esp,0x10
c00177de:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00177e5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00177ec:	85 c0                	test   eax,eax
c00177ee:	75 08                	jne    c00177f8 <FAT::mkdir(char const*)+0x70>
c00177f0:	b8 00 00 00 00       	mov    eax,0x0
c00177f5:	eb 09                	jmp    c0017800 <FAT::mkdir(char const*)+0x78>
c00177f7:	90                   	nop
c00177f8:	b8 01 00 00 00       	mov    eax,0x1
c00177fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017800:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017806:	c3                   	ret    
c0017807:	90                   	nop

c0017808 <FAT::exists(char const*)>:
c0017808:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001780e:	83 ec 08             	sub    esp,0x8
c0017811:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017818:	8d 44 24 10          	lea    eax,[esp+0x10]
c001781c:	50                   	push   eax
c001781d:	e8 de 8d fe ff       	call   c0000600 <strcpy>
c0017822:	83 c4 10             	add    esp,0x10
c0017825:	83 ec 08             	sub    esp,0x8
c0017828:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001782c:	50                   	push   eax
c001782d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017834:	e8 5b f9 ff ff       	call   c0017194 <FAT::fixFilepath(char*)>
c0017839:	83 c4 10             	add    esp,0x10
c001783c:	83 ec 08             	sub    esp,0x8
c001783f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017846:	50                   	push   eax
c0017847:	8d 44 24 10          	lea    eax,[esp+0x10]
c001784b:	50                   	push   eax
c001784c:	e8 d4 cd fe ff       	call   c0004625 <f_stat>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001785b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017862:	85 c0                	test   eax,eax
c0017864:	75 06                	jne    c001786c <FAT::exists(char const*)+0x64>
c0017866:	b0 01                	mov    al,0x1
c0017868:	eb 06                	jmp    c0017870 <FAT::exists(char const*)+0x68>
c001786a:	66 90                	xchg   ax,ax
c001786c:	b0 00                	mov    al,0x0
c001786e:	66 90                	xchg   ax,ax
c0017870:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017876:	c3                   	ret    
c0017877:	90                   	nop

c0017878 <isoReadDiscSectorHelper>:
c0017878:	83 ec 2c             	sub    esp,0x2c
c001787b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001787f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017883:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017888:	83 e8 41             	sub    eax,0x41
c001788b:	8b 0c 85 a0 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce60]
c0017892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017896:	ba 00 00 00 00       	mov    edx,0x0
c001789b:	83 ec 0c             	sub    esp,0xc
c001789e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178a6:	52                   	push   edx
c00178a7:	50                   	push   eax
c00178a8:	51                   	push   ecx
c00178a9:	e8 18 53 ff ff       	call   c000cbc6 <LogicalDisk::read(unsigned long long, int, void*)>
c00178ae:	83 c4 20             	add    esp,0x20
c00178b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00178ba:	74 0c                	je     c00178c8 <isoReadDiscSectorHelper+0x50>
c00178bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178c0:	c1 e0 0b             	shl    eax,0xb
c00178c3:	eb 0b                	jmp    c00178d0 <isoReadDiscSectorHelper+0x58>
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]
c00178c8:	b8 00 00 00 00       	mov    eax,0x0
c00178cd:	8d 76 00             	lea    esi,[esi+0x0]
c00178d0:	83 c4 2c             	add    esp,0x2c
c00178d3:	c3                   	ret    

c00178d4 <iso_kprintf>:
c00178d4:	83 ec 0c             	sub    esp,0xc
c00178d7:	a1 84 0c 02 c0       	mov    eax,ds:0xc0020c84
c00178dc:	83 ec 08             	sub    esp,0x8
c00178df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178e3:	50                   	push   eax
c00178e4:	e8 4d 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178e9:	83 c4 10             	add    esp,0x10
c00178ec:	90                   	nop
c00178ed:	83 c4 0c             	add    esp,0xc
c00178f0:	c3                   	ret    
c00178f1:	8d 76 00             	lea    esi,[esi+0x0]

c00178f4 <iso_kprintfd>:
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	a1 84 0c 02 c0       	mov    eax,ds:0xc0020c84
c00178fc:	83 ec 08             	sub    esp,0x8
c00178ff:	68 b0 f1 01 c0       	push   0xc001f1b0
c0017904:	50                   	push   eax
c0017905:	e8 2c 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	a1 84 0c 02 c0       	mov    eax,ds:0xc0020c84
c0017912:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017916:	83 ec 08             	sub    esp,0x8
c0017919:	52                   	push   edx
c001791a:	50                   	push   eax
c001791b:	e8 d0 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017920:	83 c4 10             	add    esp,0x10
c0017923:	a1 84 0c 02 c0       	mov    eax,ds:0xc0020c84
c0017928:	83 ec 08             	sub    esp,0x8
c001792b:	68 31 f0 01 c0       	push   0xc001f031
c0017930:	50                   	push   eax
c0017931:	e8 00 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	90                   	nop
c001793a:	83 c4 0c             	add    esp,0xc
c001793d:	c3                   	ret    

c001793e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001793e:	b8 08 00 00 00       	mov    eax,0x8
c0017943:	c3                   	ret    

c0017944 <ISO9660::getName()>:
c0017944:	b8 b3 f1 01 c0       	mov    eax,0xc001f1b3
c0017949:	c3                   	ret    

c001794a <ISO9660::closeDir(void*)>:
c001794a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001794e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017950:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017953:	90                   	nop

c0017954 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017954:	b8 01 00 00 00       	mov    eax,0x1
c0017959:	c3                   	ret    

c001795a <ISO9660::unlink(char const*)>:
c001795a:	b8 01 00 00 00       	mov    eax,0x1
c001795f:	c3                   	ret    

c0017960 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017960:	b8 03 00 00 00       	mov    eax,0x3
c0017965:	c3                   	ret    

c0017966 <ISO9660::rename(char const*, char const*)>:
c0017966:	b8 01 00 00 00       	mov    eax,0x1
c001796b:	c3                   	ret    

c001796c <ISO9660::mkdir(char const*)>:
c001796c:	b8 01 00 00 00       	mov    eax,0x1
c0017971:	c3                   	ret    

c0017972 <ISO9660::~ISO9660()>:
c0017972:	83 ec 0c             	sub    esp,0xc
c0017975:	ba 04 f2 01 c0       	mov    edx,0xc001f204
c001797a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001797e:	89 10                	mov    DWORD PTR [eax],edx
c0017980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017984:	83 ec 0c             	sub    esp,0xc
c0017987:	50                   	push   eax
c0017988:	e8 91 2e ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	90                   	nop
c0017991:	83 c4 0c             	add    esp,0xc
c0017994:	c3                   	ret    
c0017995:	90                   	nop

c0017996 <ISO9660::~ISO9660()>:
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	83 ec 0c             	sub    esp,0xc
c001799c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179a0:	e8 cd ff ff ff       	call   c0017972 <ISO9660::~ISO9660()>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	83 ec 08             	sub    esp,0x8
c00179ab:	6a 08                	push   0x8
c00179ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179b1:	e8 2c 2a ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	83 c4 0c             	add    esp,0xc
c00179bc:	c3                   	ret    
c00179bd:	90                   	nop

c00179be <ISO9660::exists(char const*)>:
c00179be:	83 ec 18             	sub    esp,0x18
c00179c1:	68 ce f1 01 c0       	push   0xc001f1ce
c00179c6:	e8 58 87 ff ff       	call   c0010123 <KePanic(char const*)>
c00179cb:	31 c0                	xor    eax,eax
c00179cd:	83 c4 1c             	add    esp,0x1c
c00179d0:	c3                   	ret    
c00179d1:	90                   	nop

c00179d2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00179d2:	56                   	push   esi
c00179d3:	53                   	push   ebx
c00179d4:	50                   	push   eax
c00179d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179dd:	85 db                	test   ebx,ebx
c00179df:	0f 84 82 00 00 00    	je     c0017a67 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179e5:	85 f6                	test   esi,esi
c00179e7:	74 7e                	je     c0017a67 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179e9:	ba 03 00 00 00       	mov    edx,0x3
c00179ee:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00179f3:	75 77                	jne    c0017a6c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179f8:	3a 05 a0 40 02 c0    	cmp    al,BYTE PTR ds:0xc00240a0
c00179fe:	74 34                	je     c0017a34 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	50                   	push   eax
c0017a04:	e8 b6 ed fe ff       	call   c00067bf <init_percd>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	ba 0b 00 00 00       	mov    edx,0xb
c0017a11:	40                   	inc    eax
c0017a12:	74 58                	je     c0017a6c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a14:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c0017a1b:	74 10                	je     c0017a2d <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017a1d:	83 ec 0c             	sub    esp,0xc
c0017a20:	68 ec f1 01 c0       	push   0xc001f1ec
c0017a25:	e8 f9 86 ff ff       	call   c0010123 <KePanic(char const*)>
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a2f:	a2 a0 40 02 c0       	mov    ds:0xc00240a0,al
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	0f be 05 a0 40 02 c0 	movsx  eax,BYTE PTR ds:0xc00240a0
c0017a3e:	83 c3 03             	add    ebx,0x3
c0017a41:	50                   	push   eax
c0017a42:	e8 78 ed fe ff       	call   c00067bf <init_percd>
c0017a47:	59                   	pop    ecx
c0017a48:	58                   	pop    eax
c0017a49:	6a 00                	push   0x0
c0017a4b:	53                   	push   ebx
c0017a4c:	e8 ac e8 fe ff       	call   c00062fd <iso_open>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	ba 01 00 00 00       	mov    edx,0x1
c0017a59:	83 f8 ff             	cmp    eax,0xffffffff
c0017a5c:	74 0e                	je     c0017a6c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a5e:	83 c0 64             	add    eax,0x64
c0017a61:	31 d2                	xor    edx,edx
c0017a63:	89 06                	mov    DWORD PTR [esi],eax
c0017a65:	eb 05                	jmp    c0017a6c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a67:	ba 04 00 00 00       	mov    edx,0x4
c0017a6c:	89 d0                	mov    eax,edx
c0017a6e:	5a                   	pop    edx
c0017a6f:	5b                   	pop    ebx
c0017a70:	5e                   	pop    esi
c0017a71:	c3                   	ret    

c0017a72 <ISO9660::openDir(char const*, void**)>:
c0017a72:	56                   	push   esi
c0017a73:	53                   	push   ebx
c0017a74:	50                   	push   eax
c0017a75:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a79:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a7d:	85 db                	test   ebx,ebx
c0017a7f:	74 76                	je     c0017af7 <ISO9660::openDir(char const*, void**)+0x85>
c0017a81:	85 f6                	test   esi,esi
c0017a83:	74 72                	je     c0017af7 <ISO9660::openDir(char const*, void**)+0x85>
c0017a85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a88:	3a 05 a0 40 02 c0    	cmp    al,BYTE PTR ds:0xc00240a0
c0017a8e:	74 34                	je     c0017ac4 <ISO9660::openDir(char const*, void**)+0x52>
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	50                   	push   eax
c0017a94:	e8 26 ed fe ff       	call   c00067bf <init_percd>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	ba 0b 00 00 00       	mov    edx,0xb
c0017aa1:	40                   	inc    eax
c0017aa2:	74 58                	je     c0017afc <ISO9660::openDir(char const*, void**)+0x8a>
c0017aa4:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c0017aab:	74 10                	je     c0017abd <ISO9660::openDir(char const*, void**)+0x4b>
c0017aad:	83 ec 0c             	sub    esp,0xc
c0017ab0:	68 ec f1 01 c0       	push   0xc001f1ec
c0017ab5:	e8 69 86 ff ff       	call   c0010123 <KePanic(char const*)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	8a 03                	mov    al,BYTE PTR [ebx]
c0017abf:	a2 a0 40 02 c0       	mov    ds:0xc00240a0,al
c0017ac4:	83 ec 0c             	sub    esp,0xc
c0017ac7:	0f be 05 a0 40 02 c0 	movsx  eax,BYTE PTR ds:0xc00240a0
c0017ace:	83 c3 03             	add    ebx,0x3
c0017ad1:	50                   	push   eax
c0017ad2:	e8 e8 ec fe ff       	call   c00067bf <init_percd>
c0017ad7:	59                   	pop    ecx
c0017ad8:	58                   	pop    eax
c0017ad9:	6a 01                	push   0x1
c0017adb:	53                   	push   ebx
c0017adc:	e8 1c e8 fe ff       	call   c00062fd <iso_open>
c0017ae1:	83 c4 10             	add    esp,0x10
c0017ae4:	ba 01 00 00 00       	mov    edx,0x1
c0017ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0017aec:	74 0e                	je     c0017afc <ISO9660::openDir(char const*, void**)+0x8a>
c0017aee:	83 c0 64             	add    eax,0x64
c0017af1:	31 d2                	xor    edx,edx
c0017af3:	89 06                	mov    DWORD PTR [esi],eax
c0017af5:	eb 05                	jmp    c0017afc <ISO9660::openDir(char const*, void**)+0x8a>
c0017af7:	ba 04 00 00 00       	mov    edx,0x4
c0017afc:	89 d0                	mov    eax,edx
c0017afe:	5a                   	pop    edx
c0017aff:	5b                   	pop    ebx
c0017b00:	5e                   	pop    esi
c0017b01:	c3                   	ret    

c0017b02 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b02:	53                   	push   ebx
c0017b03:	83 ec 08             	sub    esp,0x8
c0017b06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b0e:	85 c0                	test   eax,eax
c0017b10:	74 25                	je     c0017b37 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b12:	85 db                	test   ebx,ebx
c0017b14:	74 21                	je     c0017b37 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b16:	83 e8 64             	sub    eax,0x64
c0017b19:	52                   	push   edx
c0017b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b22:	50                   	push   eax
c0017b23:	e8 7d e8 fe ff       	call   c00063a5 <iso_read>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	89 03                	mov    DWORD PTR [ebx],eax
c0017b2d:	09 d0                	or     eax,edx
c0017b2f:	0f 94 c0             	sete   al
c0017b32:	0f b6 c0             	movzx  eax,al
c0017b35:	eb 05                	jmp    c0017b3c <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b37:	b8 04 00 00 00       	mov    eax,0x4
c0017b3c:	83 c4 08             	add    esp,0x8
c0017b3f:	5b                   	pop    ebx
c0017b40:	c3                   	ret    
c0017b41:	90                   	nop

c0017b42 <ISO9660::seek(void*, unsigned long long)>:
c0017b42:	57                   	push   edi
c0017b43:	56                   	push   esi
c0017b44:	b8 04 00 00 00       	mov    eax,0x4
c0017b49:	51                   	push   ecx
c0017b4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b4e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b52:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b56:	85 d2                	test   edx,edx
c0017b58:	74 1c                	je     c0017b76 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b5a:	6a 00                	push   0x0
c0017b5c:	83 ea 64             	sub    edx,0x64
c0017b5f:	57                   	push   edi
c0017b60:	56                   	push   esi
c0017b61:	52                   	push   edx
c0017b62:	e8 54 e9 fe ff       	call   c00064bb <iso_seek>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	31 f0                	xor    eax,esi
c0017b6c:	31 fa                	xor    edx,edi
c0017b6e:	09 d0                	or     eax,edx
c0017b70:	0f 95 c0             	setne  al
c0017b73:	0f b6 c0             	movzx  eax,al
c0017b76:	5a                   	pop    edx
c0017b77:	5e                   	pop    esi
c0017b78:	5f                   	pop    edi
c0017b79:	c3                   	ret    

c0017b7a <ISO9660::tell(void*, unsigned long long*)>:
c0017b7a:	53                   	push   ebx
c0017b7b:	83 ec 08             	sub    esp,0x8
c0017b7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b86:	85 c0                	test   eax,eax
c0017b88:	74 1c                	je     c0017ba6 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b8a:	85 db                	test   ebx,ebx
c0017b8c:	74 18                	je     c0017ba6 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b8e:	83 ec 0c             	sub    esp,0xc
c0017b91:	83 e8 64             	sub    eax,0x64
c0017b94:	50                   	push   eax
c0017b95:	e8 a5 e9 fe ff       	call   c000653f <iso_tell>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b9f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017ba2:	31 c0                	xor    eax,eax
c0017ba4:	eb 05                	jmp    c0017bab <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017ba6:	b8 04 00 00 00       	mov    eax,0x4
c0017bab:	83 c4 08             	add    esp,0x8
c0017bae:	5b                   	pop    ebx
c0017baf:	c3                   	ret    

c0017bb0 <ISO9660::stat(void*, unsigned long long*)>:
c0017bb0:	53                   	push   ebx
c0017bb1:	83 ec 08             	sub    esp,0x8
c0017bb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bbc:	85 c0                	test   eax,eax
c0017bbe:	74 20                	je     c0017be0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017bc0:	85 db                	test   ebx,ebx
c0017bc2:	74 1c                	je     c0017be0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017bc4:	83 ec 0c             	sub    esp,0xc
c0017bc7:	83 e8 64             	sub    eax,0x64
c0017bca:	50                   	push   eax
c0017bcb:	e8 a0 e9 fe ff       	call   c0006570 <iso_total>
c0017bd0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017bd7:	89 03                	mov    DWORD PTR [ebx],eax
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	31 c0                	xor    eax,eax
c0017bde:	eb 05                	jmp    c0017be5 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017be0:	b8 04 00 00 00       	mov    eax,0x4
c0017be5:	83 c4 08             	add    esp,0x8
c0017be8:	5b                   	pop    ebx
c0017be9:	c3                   	ret    

c0017bea <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017bea:	55                   	push   ebp
c0017beb:	57                   	push   edi
c0017bec:	56                   	push   esi
c0017bed:	53                   	push   ebx
c0017bee:	83 ec 0c             	sub    esp,0xc
c0017bf1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017bf5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017bf9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bfd:	85 ff                	test   edi,edi
c0017bff:	0f 94 c2             	sete   dl
c0017c02:	85 f6                	test   esi,esi
c0017c04:	0f 94 c0             	sete   al
c0017c07:	08 c2                	or     dl,al
c0017c09:	0f 85 9e 00 00 00    	jne    c0017cad <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c0f:	85 db                	test   ebx,ebx
c0017c11:	0f 84 96 00 00 00    	je     c0017cad <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c17:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c1a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c20:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c27:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c2a:	3a 05 a0 40 02 c0    	cmp    al,BYTE PTR ds:0xc00240a0
c0017c30:	74 34                	je     c0017c66 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	50                   	push   eax
c0017c36:	e8 84 eb fe ff       	call   c00067bf <init_percd>
c0017c3b:	83 c4 10             	add    esp,0x10
c0017c3e:	ba 0b 00 00 00       	mov    edx,0xb
c0017c43:	40                   	inc    eax
c0017c44:	74 6c                	je     c0017cb2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c46:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c0017c4d:	74 10                	je     c0017c5f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017c4f:	83 ec 0c             	sub    esp,0xc
c0017c52:	68 ec f1 01 c0       	push   0xc001f1ec
c0017c57:	e8 c7 84 ff ff       	call   c0010123 <KePanic(char const*)>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c61:	a2 a0 40 02 c0       	mov    ds:0xc00240a0,al
c0017c66:	83 c3 03             	add    ebx,0x3
c0017c69:	52                   	push   edx
c0017c6a:	52                   	push   edx
c0017c6b:	6a 00                	push   0x0
c0017c6d:	53                   	push   ebx
c0017c6e:	e8 8a e6 fe ff       	call   c00062fd <iso_open>
c0017c73:	83 c4 10             	add    esp,0x10
c0017c76:	89 c5                	mov    ebp,eax
c0017c78:	83 f8 ff             	cmp    eax,0xffffffff
c0017c7b:	75 0f                	jne    c0017c8c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017c7d:	50                   	push   eax
c0017c7e:	50                   	push   eax
c0017c7f:	6a 01                	push   0x1
c0017c81:	53                   	push   ebx
c0017c82:	e8 76 e6 fe ff       	call   c00062fd <iso_open>
c0017c87:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c8a:	eb 1a                	jmp    c0017ca6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c8c:	83 ec 0c             	sub    esp,0xc
c0017c8f:	50                   	push   eax
c0017c90:	e8 db e8 fe ff       	call   c0006570 <iso_total>
c0017c95:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c9c:	89 06                	mov    DWORD PTR [esi],eax
c0017c9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ca1:	e8 e1 e6 fe ff       	call   c0006387 <iso_close>
c0017ca6:	83 c4 10             	add    esp,0x10
c0017ca9:	31 d2                	xor    edx,edx
c0017cab:	eb 05                	jmp    c0017cb2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017cad:	ba 04 00 00 00       	mov    edx,0x4
c0017cb2:	83 c4 0c             	add    esp,0xc
c0017cb5:	89 d0                	mov    eax,edx
c0017cb7:	5b                   	pop    ebx
c0017cb8:	5e                   	pop    esi
c0017cb9:	5f                   	pop    edi
c0017cba:	5d                   	pop    ebp
c0017cbb:	c3                   	ret    

c0017cbc <ISO9660::close(void*)>:
c0017cbc:	83 ec 0c             	sub    esp,0xc
c0017cbf:	b8 04 00 00 00       	mov    eax,0x4
c0017cc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cc8:	85 d2                	test   edx,edx
c0017cca:	74 11                	je     c0017cdd <ISO9660::close(void*)+0x21>
c0017ccc:	83 ec 0c             	sub    esp,0xc
c0017ccf:	83 ea 64             	sub    edx,0x64
c0017cd2:	52                   	push   edx
c0017cd3:	e8 af e6 fe ff       	call   c0006387 <iso_close>
c0017cd8:	83 c4 10             	add    esp,0x10
c0017cdb:	31 c0                	xor    eax,eax
c0017cdd:	83 c4 0c             	add    esp,0xc
c0017ce0:	c3                   	ret    
c0017ce1:	90                   	nop

c0017ce2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017ce2:	55                   	push   ebp
c0017ce3:	57                   	push   edi
c0017ce4:	56                   	push   esi
c0017ce5:	53                   	push   ebx
c0017ce6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017cec:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017cf3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017cfa:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d01:	85 c0                	test   eax,eax
c0017d03:	0f 84 96 00 00 00    	je     c0017d9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d09:	85 db                	test   ebx,ebx
c0017d0b:	0f 84 8e 00 00 00    	je     c0017d9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d11:	83 ec 0c             	sub    esp,0xc
c0017d14:	83 e8 64             	sub    eax,0x64
c0017d17:	50                   	push   eax
c0017d18:	e8 a4 e8 fe ff       	call   c00065c1 <iso_readdir>
c0017d1d:	83 c4 10             	add    esp,0x10
c0017d20:	89 c6                	mov    esi,eax
c0017d22:	85 c0                	test   eax,eax
c0017d24:	75 18                	jne    c0017d3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017d26:	52                   	push   edx
c0017d27:	68 10 01 00 00       	push   0x110
c0017d2c:	6a 00                	push   0x0
c0017d2e:	57                   	push   edi
c0017d2f:	e8 9c 87 fe ff       	call   c00004d0 <memset>
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	b8 01 00 00 00       	mov    eax,0x1
c0017d3c:	eb 66                	jmp    c0017da4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d3e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d44:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d47:	83 ec 0c             	sub    esp,0xc
c0017d4a:	55                   	push   ebp
c0017d4b:	e8 f0 87 fe ff       	call   c0000540 <strlen>
c0017d50:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d63:	75 0a                	jne    c0017d6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017d65:	b8 02 00 00 00       	mov    eax,0x2
c0017d6a:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d6d:	74 05                	je     c0017d74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017d6f:	b8 01 00 00 00       	mov    eax,0x1
c0017d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d78:	50                   	push   eax
c0017d79:	50                   	push   eax
c0017d7a:	55                   	push   ebp
c0017d7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d7f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d83:	50                   	push   eax
c0017d84:	e8 77 88 fe ff       	call   c0000600 <strcpy>
c0017d89:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d92:	31 c0                	xor    eax,eax
c0017d94:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d9a:	83 c4 10             	add    esp,0x10
c0017d9d:	eb 05                	jmp    c0017da4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d9f:	b8 04 00 00 00       	mov    eax,0x4
c0017da4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017daa:	5b                   	pop    ebx
c0017dab:	5e                   	pop    esi
c0017dac:	5f                   	pop    edi
c0017dad:	5d                   	pop    ebp
c0017dae:	c3                   	ret    

c0017daf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017daf:	57                   	push   edi
c0017db0:	56                   	push   esi
c0017db1:	53                   	push   ebx
c0017db2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017db6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017dba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017dbe:	39 35 a4 40 02 c0    	cmp    DWORD PTR ds:0xc00240a4,esi
c0017dc4:	75 08                	jne    c0017dce <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017dc6:	38 1d 10 fc 01 c0    	cmp    BYTE PTR ds:0xc001fc10,bl
c0017dcc:	74 4a                	je     c0017e18 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017dce:	83 ec 0c             	sub    esp,0xc
c0017dd1:	31 d2                	xor    edx,edx
c0017dd3:	68 c0 40 02 c0       	push   0xc00240c0
c0017dd8:	0f be c3             	movsx  eax,bl
c0017ddb:	6a 01                	push   0x1
c0017ddd:	52                   	push   edx
c0017dde:	56                   	push   esi
c0017ddf:	ff 34 85 9c 30 02 c0 	push   DWORD PTR [eax*4-0x3ffdcf64]
c0017de6:	e8 db 4d ff ff       	call   c000cbc6 <LogicalDisk::read(unsigned long long, int, void*)>
c0017deb:	83 c4 20             	add    esp,0x20
c0017dee:	85 c0                	test   eax,eax
c0017df0:	75 0e                	jne    c0017e00 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017df2:	89 35 a4 40 02 c0    	mov    DWORD PTR ds:0xc00240a4,esi
c0017df8:	88 1d 10 fc 01 c0    	mov    BYTE PTR ds:0xc001fc10,bl
c0017dfe:	eb 18                	jmp    c0017e18 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e00:	50                   	push   eax
c0017e01:	68 00 08 00 00       	push   0x800
c0017e06:	6a 00                	push   0x0
c0017e08:	57                   	push   edi
c0017e09:	e8 c2 86 fe ff       	call   c00004d0 <memset>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	b8 01 00 00 00       	mov    eax,0x1
c0017e16:	eb 0e                	jmp    c0017e26 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017e18:	be c0 40 02 c0       	mov    esi,0xc00240c0
c0017e1d:	b9 00 08 00 00       	mov    ecx,0x800
c0017e22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e24:	31 c0                	xor    eax,eax
c0017e26:	5b                   	pop    ebx
c0017e27:	5e                   	pop    esi
c0017e28:	5f                   	pop    edi
c0017e29:	c3                   	ret    

c0017e2a <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e2a:	53                   	push   ebx
c0017e2b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e31:	c7 05 a4 40 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00240a4,0xdeadbeef
c0017e3b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e42:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e45:	0f be db             	movsx  ebx,bl
c0017e48:	53                   	push   ebx
c0017e49:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e4d:	50                   	push   eax
c0017e4e:	6a 10                	push   0x10
c0017e50:	e8 5a ff ff ff       	call   c0017daf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e55:	83 c4 10             	add    esp,0x10
c0017e58:	31 d2                	xor    edx,edx
c0017e5a:	85 c0                	test   eax,eax
c0017e5c:	75 33                	jne    c0017e91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e5e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e63:	75 2c                	jne    c0017e91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e65:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017e6a:	75 25                	jne    c0017e91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e6c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017e71:	75 1e                	jne    c0017e91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e73:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017e78:	75 17                	jne    c0017e91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e7a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e7f:	75 10                	jne    c0017e91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e81:	83 ec 0c             	sub    esp,0xc
c0017e84:	53                   	push   ebx
c0017e85:	e8 35 e9 fe ff       	call   c00067bf <init_percd>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	40                   	inc    eax
c0017e8e:	0f 95 c2             	setne  dl
c0017e91:	88 d0                	mov    al,dl
c0017e93:	81 c4 08 08 00 00    	add    esp,0x808
c0017e99:	5b                   	pop    ebx
c0017e9a:	c3                   	ret    
c0017e9b:	90                   	nop

c0017e9c <ISO9660::ISO9660()>:
c0017e9c:	83 ec 0c             	sub    esp,0xc
c0017e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea3:	83 ec 0c             	sub    esp,0xc
c0017ea6:	50                   	push   eax
c0017ea7:	e8 4e 29 ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	ba 04 f2 01 c0       	mov    edx,0xc001f204
c0017eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eb8:	89 10                	mov    DWORD PTR [eax],edx
c0017eba:	e8 02 ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017ebf:	90                   	nop
c0017ec0:	83 c4 0c             	add    esp,0xc
c0017ec3:	c3                   	ret    

c0017ec4 <SoundCard::beginPlayback()>:
c0017ec4:	c7 44 24 04 64 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f264
c0017ecc:	e9 52 82 ff ff       	jmp    c0010123 <KePanic(char const*)>
c0017ed1:	90                   	nop

c0017ed2 <SoundCard::stopPlayback()>:
c0017ed2:	c7 44 24 04 64 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f264
c0017eda:	e9 44 82 ff ff       	jmp    c0010123 <KePanic(char const*)>
c0017edf:	90                   	nop

c0017ee0 <SoundCard::SoundCard(char const*)>:
c0017ee0:	83 ec 1c             	sub    esp,0x1c
c0017ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee7:	83 ec 08             	sub    esp,0x8
c0017eea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eee:	50                   	push   eax
c0017eef:	e8 bc 3b ff ff       	call   c000bab0 <Device::Device(char const*)>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	ba b0 f2 01 c0       	mov    edx,0xc001f2b0
c0017efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f00:	89 10                	mov    DWORD PTR [eax],edx
c0017f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f06:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f11:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f4d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f52:	7f 19                	jg     c0017f6d <SoundCard::SoundCard(char const*)+0x8d>
c0017f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f5c:	83 c2 54             	add    edx,0x54
c0017f5f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017f67:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f6b:	eb e0                	jmp    c0017f4d <SoundCard::SoundCard(char const*)+0x6d>
c0017f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f71:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f78:	90                   	nop
c0017f79:	83 c4 1c             	add    esp,0x1c
c0017f7c:	c3                   	ret    
c0017f7d:	90                   	nop

c0017f7e <SoundCard::~SoundCard()>:
c0017f7e:	83 ec 0c             	sub    esp,0xc
c0017f81:	ba b0 f2 01 c0       	mov    edx,0xc001f2b0
c0017f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8a:	89 10                	mov    DWORD PTR [eax],edx
c0017f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f90:	83 ec 0c             	sub    esp,0xc
c0017f93:	50                   	push   eax
c0017f94:	e8 81 38 ff ff       	call   c000b81a <Device::~Device()>
c0017f99:	83 c4 10             	add    esp,0x10
c0017f9c:	90                   	nop
c0017f9d:	83 c4 0c             	add    esp,0xc
c0017fa0:	c3                   	ret    
c0017fa1:	90                   	nop

c0017fa2 <SoundCard::~SoundCard()>:
c0017fa2:	83 ec 0c             	sub    esp,0xc
c0017fa5:	83 ec 0c             	sub    esp,0xc
c0017fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fac:	e8 cd ff ff ff       	call   c0017f7e <SoundCard::~SoundCard()>
c0017fb1:	83 c4 10             	add    esp,0x10
c0017fb4:	83 ec 08             	sub    esp,0x8
c0017fb7:	68 e8 01 00 00       	push   0x1e8
c0017fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fc0:	e8 1d 24 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	83 c4 0c             	add    esp,0xc
c0017fcb:	c3                   	ret    

c0017fcc <SoundCard::configureRates(int, int, int)>:
c0017fcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017fd0:	31 c0                	xor    eax,eax
c0017fd2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017fd9:	75 20                	jne    c0017ffb <SoundCard::configureRates(int, int, int)+0x2f>
c0017fdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fdf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fe9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017ff9:	b0 01                	mov    al,0x1
c0017ffb:	c3                   	ret    

c0017ffc <SoundCard::getSamples16(int, short*)>:
c0017ffc:	55                   	push   ebp
c0017ffd:	57                   	push   edi
c0017ffe:	31 ff                	xor    edi,edi
c0018000:	56                   	push   esi
c0018001:	53                   	push   ebx
c0018002:	31 db                	xor    ebx,ebx
c0018004:	83 ec 10             	sub    esp,0x10
c0018007:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001800b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001800f:	8d 04 36             	lea    eax,[esi+esi*1]
c0018012:	50                   	push   eax
c0018013:	6a 00                	push   0x0
c0018015:	55                   	push   ebp
c0018016:	e8 b5 84 fe ff       	call   c00004d0 <memset>
c001801b:	83 c4 10             	add    esp,0x10
c001801e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018022:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018029:	85 c0                	test   eax,eax
c001802b:	74 1b                	je     c0018048 <SoundCard::getSamples16(int, short*)+0x4c>
c001802d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018031:	75 15                	jne    c0018048 <SoundCard::getSamples16(int, short*)+0x4c>
c0018033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018037:	55                   	push   ebp
c0018038:	56                   	push   esi
c0018039:	50                   	push   eax
c001803a:	e8 ed 02 00 00       	call   c001832c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001803f:	83 c4 10             	add    esp,0x10
c0018042:	39 c7                	cmp    edi,eax
c0018044:	7d 02                	jge    c0018048 <SoundCard::getSamples16(int, short*)+0x4c>
c0018046:	89 c7                	mov    edi,eax
c0018048:	43                   	inc    ebx
c0018049:	83 fb 20             	cmp    ebx,0x20
c001804c:	75 d0                	jne    c001801e <SoundCard::getSamples16(int, short*)+0x22>
c001804e:	83 c4 0c             	add    esp,0xc
c0018051:	89 f8                	mov    eax,edi
c0018053:	5b                   	pop    ebx
c0018054:	5e                   	pop    esi
c0018055:	5f                   	pop    edi
c0018056:	5d                   	pop    ebp
c0018057:	c3                   	ret    

c0018058 <SoundCard::getSamples32(int, int*)>:
c0018058:	55                   	push   ebp
c0018059:	57                   	push   edi
c001805a:	31 ff                	xor    edi,edi
c001805c:	56                   	push   esi
c001805d:	31 f6                	xor    esi,esi
c001805f:	53                   	push   ebx
c0018060:	83 ec 10             	sub    esp,0x10
c0018063:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018067:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001806b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001806f:	c1 e0 02             	shl    eax,0x2
c0018072:	50                   	push   eax
c0018073:	6a 00                	push   0x0
c0018075:	55                   	push   ebp
c0018076:	e8 55 84 fe ff       	call   c00004d0 <memset>
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018085:	85 c0                	test   eax,eax
c0018087:	74 1b                	je     c00180a4 <SoundCard::getSamples32(int, int*)+0x4c>
c0018089:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001808d:	75 15                	jne    c00180a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001808f:	53                   	push   ebx
c0018090:	55                   	push   ebp
c0018091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018095:	50                   	push   eax
c0018096:	e8 55 03 00 00       	call   c00183f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001809b:	83 c4 10             	add    esp,0x10
c001809e:	39 c6                	cmp    esi,eax
c00180a0:	7d 02                	jge    c00180a4 <SoundCard::getSamples32(int, int*)+0x4c>
c00180a2:	89 c6                	mov    esi,eax
c00180a4:	47                   	inc    edi
c00180a5:	83 ff 20             	cmp    edi,0x20
c00180a8:	75 d4                	jne    c001807e <SoundCard::getSamples32(int, int*)+0x26>
c00180aa:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180b0:	85 f6                	test   esi,esi
c00180b2:	75 0f                	jne    c00180c3 <SoundCard::getSamples32(int, int*)+0x6b>
c00180b4:	84 c0                	test   al,al
c00180b6:	74 1b                	je     c00180d3 <SoundCard::getSamples32(int, int*)+0x7b>
c00180b8:	83 ec 0c             	sub    esp,0xc
c00180bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180bd:	53                   	push   ebx
c00180be:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00180c1:	eb 0d                	jmp    c00180d0 <SoundCard::getSamples32(int, int*)+0x78>
c00180c3:	84 c0                	test   al,al
c00180c5:	75 0c                	jne    c00180d3 <SoundCard::getSamples32(int, int*)+0x7b>
c00180c7:	83 ec 0c             	sub    esp,0xc
c00180ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180cc:	53                   	push   ebx
c00180cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00180d0:	83 c4 10             	add    esp,0x10
c00180d3:	83 c4 0c             	add    esp,0xc
c00180d6:	89 f0                	mov    eax,esi
c00180d8:	5b                   	pop    ebx
c00180d9:	5e                   	pop    esi
c00180da:	5f                   	pop    edi
c00180db:	5d                   	pop    ebp
c00180dc:	c3                   	ret    
c00180dd:	90                   	nop

c00180de <SoundCard::addChannel(SoundPort*)>:
c00180de:	83 ec 0c             	sub    esp,0xc
c00180e1:	31 c0                	xor    eax,eax
c00180e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180e7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00180ef:	74 1b                	je     c001810c <SoundCard::addChannel(SoundPort*)+0x2e>
c00180f1:	40                   	inc    eax
c00180f2:	83 f8 20             	cmp    eax,0x20
c00180f5:	75 f0                	jne    c00180e7 <SoundCard::addChannel(SoundPort*)+0x9>
c00180f7:	83 ec 0c             	sub    esp,0xc
c00180fa:	68 89 f2 01 c0       	push   0xc001f289
c00180ff:	e8 1f 80 ff ff       	call   c0010123 <KePanic(char const*)>
c0018104:	83 c4 10             	add    esp,0x10
c0018107:	83 c8 ff             	or     eax,0xffffffff
c001810a:	eb 0b                	jmp    c0018117 <SoundCard::addChannel(SoundPort*)+0x39>
c001810c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018110:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018117:	83 c4 0c             	add    esp,0xc
c001811a:	c3                   	ret    
c001811b:	90                   	nop

c001811c <SoundCard::removeChannel(int)>:
c001811c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018124:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001812f:	c3                   	ret    

c0018130 <SoundPort::SoundPort(int, int, int, int)>:
c0018130:	83 ec 0c             	sub    esp,0xc
c0018133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018137:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001813e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018142:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001814e:	89 10                	mov    DWORD PTR [eax],edx
c0018150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018154:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018158:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001815b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018163:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018166:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001816b:	75 13                	jne    c0018180 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018171:	8b 00                	mov    eax,DWORD PTR [eax]
c0018173:	05 a0 0f 00 00       	add    eax,0xfa0
c0018178:	01 c0                	add    eax,eax
c001817a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001817e:	66 90                	xchg   ax,ax
c0018180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018184:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018188:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001818b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001819d:	c1 e0 02             	shl    eax,0x2
c00181a0:	83 ec 0c             	sub    esp,0xc
c00181a3:	50                   	push   eax
c00181a4:	e8 10 f6 fe ff       	call   c00077b9 <malloc>
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	89 c2                	mov    edx,eax
c00181ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00181b5:	90                   	nop
c00181b6:	83 c4 0c             	add    esp,0xc
c00181b9:	c3                   	ret    
c00181ba:	66 90                	xchg   ax,ax

c00181bc <SoundPort::~SoundPort()>:
c00181bc:	83 ec 0c             	sub    esp,0xc
c00181bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181c6:	85 c0                	test   eax,eax
c00181c8:	74 1e                	je     c00181e8 <SoundPort::~SoundPort()+0x2c>
c00181ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181d1:	83 ec 0c             	sub    esp,0xc
c00181d4:	50                   	push   eax
c00181d5:	e8 ef f5 fe ff       	call   c00077c9 <free>
c00181da:	83 c4 10             	add    esp,0x10
c00181dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181e8:	90                   	nop
c00181e9:	83 c4 0c             	add    esp,0xc
c00181ec:	c3                   	ret    
c00181ed:	90                   	nop
c00181ee:	66 90                	xchg   ax,ax

c00181f0 <SoundPort::unpause()>:
c00181f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181f4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00181f8:	c3                   	ret    
c00181f9:	90                   	nop
c00181fa:	66 90                	xchg   ax,ax

c00181fc <SoundPort::pause()>:
c00181fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018200:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018204:	c3                   	ret    
c0018205:	90                   	nop
c0018206:	66 90                	xchg   ax,ax

c0018208 <SoundPort::getBufferUsed()>:
c0018208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001820c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001820f:	c3                   	ret    

c0018210 <SoundPort::getBufferSize()>:
c0018210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018214:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018217:	c3                   	ret    

c0018218 <SoundPort::buffer16(short*, int)>:
c0018218:	55                   	push   ebp
c0018219:	57                   	push   edi
c001821a:	56                   	push   esi
c001821b:	53                   	push   ebx
c001821c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018220:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018224:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018227:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001822a:	74 68                	je     c0018294 <SoundPort::buffer16(short*, int)+0x7c>
c001822c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018230:	85 c9                	test   ecx,ecx
c0018232:	7e 60                	jle    c0018294 <SoundPort::buffer16(short*, int)+0x7c>
c0018234:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018238:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001823b:	c1 e1 0f             	shl    ecx,0xf
c001823e:	8d 70 01             	lea    esi,[eax+0x1]
c0018241:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018244:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018247:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001824a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001824d:	74 4d                	je     c001829c <SoundPort::buffer16(short*, int)+0x84>
c001824f:	31 f6                	xor    esi,esi
c0018251:	eb 21                	jmp    c0018274 <SoundPort::buffer16(short*, int)+0x5c>
c0018253:	90                   	nop
c0018254:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018259:	8d 79 01             	lea    edi,[ecx+0x1]
c001825c:	c1 e3 0f             	shl    ebx,0xf
c001825f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018262:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018265:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018268:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001826b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001826e:	74 1c                	je     c001828c <SoundPort::buffer16(short*, int)+0x74>
c0018270:	89 c6                	mov    esi,eax
c0018272:	66 90                	xchg   ax,ax
c0018274:	8d 46 01             	lea    eax,[esi+0x1]
c0018277:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001827b:	75 d7                	jne    c0018254 <SoundPort::buffer16(short*, int)+0x3c>
c001827d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018281:	8d 76 00             	lea    esi,[esi+0x0]
c0018284:	5b                   	pop    ebx
c0018285:	5e                   	pop    esi
c0018286:	5f                   	pop    edi
c0018287:	5d                   	pop    ebp
c0018288:	c3                   	ret    
c0018289:	8d 76 00             	lea    esi,[esi+0x0]
c001828c:	5b                   	pop    ebx
c001828d:	8d 46 02             	lea    eax,[esi+0x2]
c0018290:	5e                   	pop    esi
c0018291:	5f                   	pop    edi
c0018292:	5d                   	pop    ebp
c0018293:	c3                   	ret    
c0018294:	5b                   	pop    ebx
c0018295:	31 c0                	xor    eax,eax
c0018297:	5e                   	pop    esi
c0018298:	5f                   	pop    edi
c0018299:	5d                   	pop    ebp
c001829a:	c3                   	ret    
c001829b:	90                   	nop
c001829c:	b8 01 00 00 00       	mov    eax,0x1
c00182a1:	eb e1                	jmp    c0018284 <SoundPort::buffer16(short*, int)+0x6c>
c00182a3:	90                   	nop

c00182a4 <SoundPort::buffer32(int*, int)>:
c00182a4:	55                   	push   ebp
c00182a5:	57                   	push   edi
c00182a6:	56                   	push   esi
c00182a7:	53                   	push   ebx
c00182a8:	51                   	push   ecx
c00182a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182b1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00182bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182be:	74 5c                	je     c001831c <SoundPort::buffer32(int*, int)+0x78>
c00182c0:	85 c0                	test   eax,eax
c00182c2:	7e 58                	jle    c001831c <SoundPort::buffer32(int*, int)+0x78>
c00182c4:	8d 71 01             	lea    esi,[ecx+0x1]
c00182c7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182ca:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182cd:	8b 37                	mov    esi,DWORD PTR [edi]
c00182cf:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00182d2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182d5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182d8:	74 4a                	je     c0018324 <SoundPort::buffer32(int*, int)+0x80>
c00182da:	31 f6                	xor    esi,esi
c00182dc:	eb 1e                	jmp    c00182fc <SoundPort::buffer32(int*, int)+0x58>
c00182de:	66 90                	xchg   ax,ax
c00182e0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00182e3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00182e6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00182e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00182ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00182f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182f6:	74 18                	je     c0018310 <SoundPort::buffer32(int*, int)+0x6c>
c00182f8:	89 de                	mov    esi,ebx
c00182fa:	66 90                	xchg   ax,ax
c00182fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00182ff:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018302:	75 dc                	jne    c00182e0 <SoundPort::buffer32(int*, int)+0x3c>
c0018304:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018307:	90                   	nop
c0018308:	5a                   	pop    edx
c0018309:	5b                   	pop    ebx
c001830a:	5e                   	pop    esi
c001830b:	5f                   	pop    edi
c001830c:	5d                   	pop    ebp
c001830d:	c3                   	ret    
c001830e:	66 90                	xchg   ax,ax
c0018310:	5a                   	pop    edx
c0018311:	8d 46 02             	lea    eax,[esi+0x2]
c0018314:	5b                   	pop    ebx
c0018315:	5e                   	pop    esi
c0018316:	5f                   	pop    edi
c0018317:	5d                   	pop    ebp
c0018318:	c3                   	ret    
c0018319:	8d 76 00             	lea    esi,[esi+0x0]
c001831c:	5a                   	pop    edx
c001831d:	31 c0                	xor    eax,eax
c001831f:	5b                   	pop    ebx
c0018320:	5e                   	pop    esi
c0018321:	5f                   	pop    edi
c0018322:	5d                   	pop    ebp
c0018323:	c3                   	ret    
c0018324:	b8 01 00 00 00       	mov    eax,0x1
c0018329:	eb dd                	jmp    c0018308 <SoundPort::buffer32(int*, int)+0x64>
c001832b:	90                   	nop

c001832c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001832c:	57                   	push   edi
c001832d:	56                   	push   esi
c001832e:	53                   	push   ebx
c001832f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018333:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018337:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001833d:	39 03                	cmp    DWORD PTR [ebx],eax
c001833f:	74 13                	je     c0018354 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018341:	83 ec 0c             	sub    esp,0xc
c0018344:	68 dc f2 01 c0       	push   0xc001f2dc
c0018349:	e8 d5 7d ff ff       	call   c0010123 <KePanic(char const*)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	8d 76 00             	lea    esi,[esi+0x0]
c0018354:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001835a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001835d:	74 11                	je     c0018370 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001835f:	83 ec 0c             	sub    esp,0xc
c0018362:	68 1b f3 01 c0       	push   0xc001f31b
c0018367:	e8 b7 7d ff ff       	call   c0010123 <KePanic(char const*)>
c001836c:	83 c4 10             	add    esp,0x10
c001836f:	90                   	nop
c0018370:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018376:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018379:	74 11                	je     c001838c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001837b:	83 ec 0c             	sub    esp,0xc
c001837e:	68 1b f3 01 c0       	push   0xc001f31b
c0018383:	e8 9b 7d ff ff       	call   c0010123 <KePanic(char const*)>
c0018388:	83 c4 10             	add    esp,0x10
c001838b:	90                   	nop
c001838c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001838f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018393:	7e 07                	jle    c001839c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018395:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018399:	8d 76 00             	lea    esi,[esi+0x0]
c001839c:	85 f6                	test   esi,esi
c001839e:	7e 2c                	jle    c00183cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a4:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183a7:	31 c9                	xor    ecx,ecx
c00183a9:	01 d7                	add    edi,edx
c00183ab:	90                   	nop
c00183ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183af:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183b2:	85 c0                	test   eax,eax
c00183b4:	79 06                	jns    c00183bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00183b6:	05 ff 7f 00 00       	add    eax,0x7fff
c00183bb:	90                   	nop
c00183bc:	c1 f8 0f             	sar    eax,0xf
c00183bf:	83 c1 04             	add    ecx,0x4
c00183c2:	66 01 02             	add    WORD PTR [edx],ax
c00183c5:	83 c2 02             	add    edx,0x2
c00183c8:	39 d7                	cmp    edi,edx
c00183ca:	75 e0                	jne    c00183ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00183cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00183cf:	50                   	push   eax
c00183d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183d3:	29 f0                	sub    eax,esi
c00183d5:	c1 e0 02             	shl    eax,0x2
c00183d8:	50                   	push   eax
c00183d9:	8d 04 b2             	lea    eax,[edx+esi*4]
c00183dc:	50                   	push   eax
c00183dd:	52                   	push   edx
c00183de:	e8 fd 7f fe ff       	call   c00003e0 <memmove>
c00183e3:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	89 f0                	mov    eax,esi
c00183eb:	5b                   	pop    ebx
c00183ec:	5e                   	pop    esi
c00183ed:	5f                   	pop    edi
c00183ee:	c3                   	ret    
c00183ef:	90                   	nop

c00183f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00183f0:	57                   	push   edi
c00183f1:	56                   	push   esi
c00183f2:	53                   	push   ebx
c00183f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183ff:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018405:	39 06                	cmp    DWORD PTR [esi],eax
c0018407:	74 13                	je     c001841c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018409:	83 ec 0c             	sub    esp,0xc
c001840c:	68 fc f2 01 c0       	push   0xc001f2fc
c0018411:	e8 0d 7d ff ff       	call   c0010123 <KePanic(char const*)>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	8d 76 00             	lea    esi,[esi+0x0]
c001841c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018422:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018425:	74 11                	je     c0018438 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018427:	83 ec 0c             	sub    esp,0xc
c001842a:	68 37 f3 01 c0       	push   0xc001f337
c001842f:	e8 ef 7c ff ff       	call   c0010123 <KePanic(char const*)>
c0018434:	83 c4 10             	add    esp,0x10
c0018437:	90                   	nop
c0018438:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001843e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018441:	74 11                	je     c0018454 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018443:	83 ec 0c             	sub    esp,0xc
c0018446:	68 37 f3 01 c0       	push   0xc001f337
c001844b:	e8 d3 7c ff ff       	call   c0010123 <KePanic(char const*)>
c0018450:	83 c4 10             	add    esp,0x10
c0018453:	90                   	nop
c0018454:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018457:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001845b:	7e 07                	jle    c0018464 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001845d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018461:	8d 76 00             	lea    esi,[esi+0x0]
c0018464:	85 ff                	test   edi,edi
c0018466:	7e 1c                	jle    c0018484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018468:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001846f:	31 c0                	xor    eax,eax
c0018471:	8d 76 00             	lea    esi,[esi+0x0]
c0018474:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018477:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001847a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001847d:	83 c0 04             	add    eax,0x4
c0018480:	39 c1                	cmp    ecx,eax
c0018482:	75 f0                	jne    c0018474 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018484:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018487:	50                   	push   eax
c0018488:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001848b:	29 f8                	sub    eax,edi
c001848d:	c1 e0 02             	shl    eax,0x2
c0018490:	50                   	push   eax
c0018491:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018494:	50                   	push   eax
c0018495:	52                   	push   edx
c0018496:	e8 45 7f fe ff       	call   c00003e0 <memmove>
c001849b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001849e:	83 c4 10             	add    esp,0x10
c00184a1:	89 f8                	mov    eax,edi
c00184a3:	5b                   	pop    ebx
c00184a4:	5e                   	pop    esi
c00184a5:	5f                   	pop    edi
c00184a6:	c3                   	ret    
c00184a7:	90                   	nop

c00184a8 <PCI::open(int, int, void*)>:
c00184a8:	83 ec 18             	sub    esp,0x18
c00184ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00184b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00184bb:	50                   	push   eax
c00184bc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00184bf:	31 c0                	xor    eax,eax
c00184c1:	83 c4 1c             	add    esp,0x1c
c00184c4:	c3                   	ret    
c00184c5:	90                   	nop

c00184c6 <PCI::close(int, int, void*)>:
c00184c6:	31 c0                	xor    eax,eax
c00184c8:	c3                   	ret    
c00184c9:	90                   	nop

c00184ca <PCI::PCI()>:
c00184ca:	83 ec 0c             	sub    esp,0xc
c00184cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d1:	83 ec 08             	sub    esp,0x8
c00184d4:	68 53 f3 01 c0       	push   0xc001f353
c00184d9:	50                   	push   eax
c00184da:	e8 8d 2d ff ff       	call   c000b26c <Bus::Bus(char const*)>
c00184df:	83 c4 10             	add    esp,0x10
c00184e2:	ba fc f3 01 c0       	mov    edx,0xc001f3fc
c00184e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184eb:	89 10                	mov    DWORD PTR [eax],edx
c00184ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00184fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ff:	a3 c0 48 02 c0       	mov    ds:0xc00248c0,eax
c0018504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018508:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001850e:	31 d2                	xor    edx,edx
c0018510:	88 c2                	mov    dl,al
c0018512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018516:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018521:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018527:	31 d2                	xor    edx,edx
c0018529:	88 c2                	mov    dl,al
c001852b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001852f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018538:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001853e:	8d 50 01             	lea    edx,[eax+0x1]
c0018541:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018545:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001854b:	31 d2                	xor    edx,edx
c001854d:	88 c2                	mov    dl,al
c001854f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018553:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018557:	83 c9 c0             	or     ecx,0xffffffc0
c001855a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001855e:	90                   	nop
c001855f:	83 c4 0c             	add    esp,0xc
c0018562:	c3                   	ret    
c0018563:	90                   	nop

c0018564 <PCI::readBAR8(unsigned int, int)>:
c0018564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001856c:	f6 c2 01             	test   dl,0x1
c001856f:	74 07                	je     c0018578 <PCI::readBAR8(unsigned int, int)+0x14>
c0018571:	83 e2 fc             	and    edx,0xfffffffc
c0018574:	01 c2                	add    edx,eax
c0018576:	ec                   	in     al,dx
c0018577:	c3                   	ret    
c0018578:	83 e2 f0             	and    edx,0xfffffff0
c001857b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001857e:	c3                   	ret    
c001857f:	90                   	nop

c0018580 <PCI::readBAR16(unsigned int, int)>:
c0018580:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018588:	f6 c2 01             	test   dl,0x1
c001858b:	74 08                	je     c0018595 <PCI::readBAR16(unsigned int, int)+0x15>
c001858d:	83 e2 fc             	and    edx,0xfffffffc
c0018590:	01 c2                	add    edx,eax
c0018592:	66 ed                	in     ax,dx
c0018594:	c3                   	ret    
c0018595:	83 e2 f0             	and    edx,0xfffffff0
c0018598:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001859c:	c3                   	ret    
c001859d:	90                   	nop

c001859e <PCI::readBAR32(unsigned int, int)>:
c001859e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185a6:	f6 c2 01             	test   dl,0x1
c00185a9:	74 07                	je     c00185b2 <PCI::readBAR32(unsigned int, int)+0x14>
c00185ab:	83 e2 fc             	and    edx,0xfffffffc
c00185ae:	01 c2                	add    edx,eax
c00185b0:	ed                   	in     eax,dx
c00185b1:	c3                   	ret    
c00185b2:	83 e2 f0             	and    edx,0xfffffff0
c00185b5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00185b8:	c3                   	ret    
c00185b9:	90                   	nop

c00185ba <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00185ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185c6:	f6 c2 01             	test   dl,0x1
c00185c9:	74 07                	je     c00185d2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00185cb:	83 e2 fc             	and    edx,0xfffffffc
c00185ce:	01 ca                	add    edx,ecx
c00185d0:	ee                   	out    dx,al
c00185d1:	c3                   	ret    
c00185d2:	83 e2 f0             	and    edx,0xfffffff0
c00185d5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00185d8:	c3                   	ret    
c00185d9:	90                   	nop

c00185da <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00185da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185e6:	f6 c2 01             	test   dl,0x1
c00185e9:	74 08                	je     c00185f3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00185eb:	83 e2 fc             	and    edx,0xfffffffc
c00185ee:	01 ca                	add    edx,ecx
c00185f0:	66 ef                	out    dx,ax
c00185f2:	c3                   	ret    
c00185f3:	83 e2 f0             	and    edx,0xfffffff0
c00185f6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00185fa:	c3                   	ret    
c00185fb:	90                   	nop

c00185fc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00185fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018608:	f6 c2 01             	test   dl,0x1
c001860b:	74 07                	je     c0018614 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001860d:	83 e2 fc             	and    edx,0xfffffffc
c0018610:	01 ca                	add    edx,ecx
c0018612:	ef                   	out    dx,eax
c0018613:	c3                   	ret    
c0018614:	83 e2 f0             	and    edx,0xfffffff0
c0018617:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001861a:	c3                   	ret    
c001861b:	90                   	nop

c001861c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001861c:	55                   	push   ebp
c001861d:	57                   	push   edi
c001861e:	56                   	push   esi
c001861f:	53                   	push   ebx
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018627:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001862b:	89 f0                	mov    eax,esi
c001862d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018631:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018635:	3c 07                	cmp    al,0x7
c0018637:	76 10                	jbe    c0018649 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018639:	83 ec 0c             	sub    esp,0xc
c001863c:	68 5b f3 01 c0       	push   0xc001f35b
c0018641:	e8 dd 7a ff ff       	call   c0010123 <KePanic(char const*)>
c0018646:	83 c4 10             	add    esp,0x10
c0018649:	80 fb 0f             	cmp    bl,0xf
c001864c:	76 10                	jbe    c001865e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001864e:	83 ec 0c             	sub    esp,0xc
c0018651:	68 8b f3 01 c0       	push   0xc001f38b
c0018656:	e8 c8 7a ff ff       	call   c0010123 <KePanic(char const*)>
c001865b:	83 c4 10             	add    esp,0x10
c001865e:	8d 04 36             	lea    eax,[esi+esi*1]
c0018661:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018666:	83 c8 f0             	or     eax,0xfffffff0
c0018669:	ee                   	out    dx,al
c001866a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001866f:	89 e8                	mov    eax,ebp
c0018671:	ee                   	out    dx,al
c0018672:	83 c4 0c             	add    esp,0xc
c0018675:	89 d8                	mov    eax,ebx
c0018677:	66 81 e7 fc 00       	and    di,0xfc
c001867c:	5b                   	pop    ebx
c001867d:	c1 e0 08             	shl    eax,0x8
c0018680:	5e                   	pop    esi
c0018681:	09 f8                	or     eax,edi
c0018683:	5f                   	pop    edi
c0018684:	66 0d 00 c0          	or     ax,0xc000
c0018688:	5d                   	pop    ebp
c0018689:	c3                   	ret    

c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001868a:	57                   	push   edi
c001868b:	56                   	push   esi
c001868c:	53                   	push   ebx
c001868d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018695:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001869b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001869f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186a7:	83 ff 01             	cmp    edi,0x1
c00186aa:	75 3e                	jne    c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186ac:	89 de                	mov    esi,ebx
c00186ae:	0f b6 c0             	movzx  eax,al
c00186b1:	81 e6 fc 00 00 00    	and    esi,0xfc
c00186b7:	c1 e0 10             	shl    eax,0x10
c00186ba:	0f b6 c9             	movzx  ecx,cl
c00186bd:	09 f0                	or     eax,esi
c00186bf:	c1 e1 08             	shl    ecx,0x8
c00186c2:	0f b6 d2             	movzx  edx,dl
c00186c5:	09 c8                	or     eax,ecx
c00186c7:	c1 e2 0b             	shl    edx,0xb
c00186ca:	09 d0                	or     eax,edx
c00186cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186d1:	0d 00 00 00 80       	or     eax,0x80000000
c00186d6:	ef                   	out    dx,eax
c00186d7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00186dc:	ed                   	in     eax,dx
c00186dd:	83 e3 02             	and    ebx,0x2
c00186e0:	0f b6 cb             	movzx  ecx,bl
c00186e3:	c1 e1 03             	shl    ecx,0x3
c00186e6:	d3 e8                	shr    eax,cl
c00186e8:	eb 43                	jmp    c001872d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186ea:	83 ff 02             	cmp    edi,0x2
c00186ed:	75 2c                	jne    c001871b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00186ef:	83 ec 0c             	sub    esp,0xc
c00186f2:	0f b6 c9             	movzx  ecx,cl
c00186f5:	0f b6 d2             	movzx  edx,dl
c00186f8:	0f b6 fb             	movzx  edi,bl
c00186fb:	0f b6 c0             	movzx  eax,al
c00186fe:	57                   	push   edi
c00186ff:	51                   	push   ecx
c0018700:	52                   	push   edx
c0018701:	50                   	push   eax
c0018702:	56                   	push   esi
c0018703:	e8 14 ff ff ff       	call   c001861c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018708:	89 c2                	mov    edx,eax
c001870a:	ed                   	in     eax,dx
c001870b:	83 e3 02             	and    ebx,0x2
c001870e:	83 c4 20             	add    esp,0x20
c0018711:	0f b6 cb             	movzx  ecx,bl
c0018714:	c1 e1 03             	shl    ecx,0x3
c0018717:	d3 e8                	shr    eax,cl
c0018719:	eb 12                	jmp    c001872d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001871b:	83 ec 0c             	sub    esp,0xc
c001871e:	68 bb f3 01 c0       	push   0xc001f3bb
c0018723:	e8 fb 79 ff ff       	call   c0010123 <KePanic(char const*)>
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	31 c0                	xor    eax,eax
c001872d:	5b                   	pop    ebx
c001872e:	5e                   	pop    esi
c001872f:	5f                   	pop    edi
c0018730:	c3                   	ret    
c0018731:	90                   	nop

c0018732 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018732:	83 ec 18             	sub    esp,0x18
c0018735:	6a 00                	push   0x0
c0018737:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873c:	50                   	push   eax
c001873d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018742:	50                   	push   eax
c0018743:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018748:	50                   	push   eax
c0018749:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001874d:	e8 38 ff ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018752:	83 c4 2c             	add    esp,0x2c
c0018755:	c3                   	ret    

c0018756 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018756:	83 ec 18             	sub    esp,0x18
c0018759:	6a 0e                	push   0xe
c001875b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018760:	50                   	push   eax
c0018761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018766:	50                   	push   eax
c0018767:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001876c:	50                   	push   eax
c001876d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018771:	e8 14 ff ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018776:	83 c4 2c             	add    esp,0x2c
c0018779:	0f b6 c0             	movzx  eax,al
c001877c:	c3                   	ret    
c001877d:	90                   	nop

c001877e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001877e:	55                   	push   ebp
c001877f:	57                   	push   edi
c0018780:	56                   	push   esi
c0018781:	53                   	push   ebx
c0018782:	83 ec 18             	sub    esp,0x18
c0018785:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001878a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001878f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018794:	6a 0a                	push   0xa
c0018796:	56                   	push   esi
c0018797:	55                   	push   ebp
c0018798:	57                   	push   edi
c0018799:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001879d:	e8 e8 fe ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187a2:	83 c4 14             	add    esp,0x14
c00187a5:	89 c3                	mov    ebx,eax
c00187a7:	6a 0a                	push   0xa
c00187a9:	0f b6 db             	movzx  ebx,bl
c00187ac:	56                   	push   esi
c00187ad:	55                   	push   ebp
c00187ae:	57                   	push   edi
c00187af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187b3:	e8 d2 fe ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b8:	83 c4 2c             	add    esp,0x2c
c00187bb:	25 00 ff 00 00       	and    eax,0xff00
c00187c0:	09 d8                	or     eax,ebx
c00187c2:	5b                   	pop    ebx
c00187c3:	5e                   	pop    esi
c00187c4:	5f                   	pop    edi
c00187c5:	5d                   	pop    ebp
c00187c6:	c3                   	ret    
c00187c7:	90                   	nop

c00187c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00187c8:	83 ec 18             	sub    esp,0x18
c00187cb:	6a 08                	push   0x8
c00187cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d2:	50                   	push   eax
c00187d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d8:	50                   	push   eax
c00187d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187de:	50                   	push   eax
c00187df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e3:	e8 a2 fe ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e8:	83 c4 2c             	add    esp,0x2c
c00187eb:	0f b6 c4             	movzx  eax,ah
c00187ee:	c3                   	ret    
c00187ef:	90                   	nop

c00187f0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00187f0:	83 ec 18             	sub    esp,0x18
c00187f3:	6a 08                	push   0x8
c00187f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fa:	50                   	push   eax
c00187fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018800:	50                   	push   eax
c0018801:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018806:	50                   	push   eax
c0018807:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001880b:	e8 7a fe ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018810:	83 c4 2c             	add    esp,0x2c
c0018813:	c3                   	ret    

c0018814 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018814:	83 ec 18             	sub    esp,0x18
c0018817:	6a 3c                	push   0x3c
c0018819:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881e:	50                   	push   eax
c001881f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018824:	50                   	push   eax
c0018825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001882a:	50                   	push   eax
c001882b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882f:	e8 56 fe ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018834:	83 c4 2c             	add    esp,0x2c
c0018837:	c3                   	ret    

c0018838 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018838:	83 ec 18             	sub    esp,0x18
c001883b:	6a 18                	push   0x18
c001883d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018842:	50                   	push   eax
c0018843:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018848:	50                   	push   eax
c0018849:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884e:	50                   	push   eax
c001884f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018853:	e8 32 fe ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018858:	83 c4 2c             	add    esp,0x2c
c001885b:	0f b6 c4             	movzx  eax,ah
c001885e:	c3                   	ret    
c001885f:	90                   	nop

c0018860 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018860:	55                   	push   ebp
c0018861:	57                   	push   edi
c0018862:	56                   	push   esi
c0018863:	53                   	push   ebx
c0018864:	83 ec 28             	sub    esp,0x28
c0018867:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001886b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018870:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018875:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001887a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018881:	8d 43 12             	lea    eax,[ebx+0x12]
c0018884:	83 c3 10             	add    ebx,0x10
c0018887:	0f b6 c0             	movzx  eax,al
c001888a:	0f b6 db             	movzx  ebx,bl
c001888d:	50                   	push   eax
c001888e:	51                   	push   ecx
c001888f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018893:	57                   	push   edi
c0018894:	55                   	push   ebp
c0018895:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018899:	e8 ec fd ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001889e:	83 c4 14             	add    esp,0x14
c00188a1:	89 c6                	mov    esi,eax
c00188a3:	53                   	push   ebx
c00188a4:	c1 e6 10             	shl    esi,0x10
c00188a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188ab:	51                   	push   ecx
c00188ac:	57                   	push   edi
c00188ad:	55                   	push   ebp
c00188ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188b2:	e8 d3 fd ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188b7:	83 c4 3c             	add    esp,0x3c
c00188ba:	0f b7 c0             	movzx  eax,ax
c00188bd:	5b                   	pop    ebx
c00188be:	09 f0                	or     eax,esi
c00188c0:	5e                   	pop    esi
c00188c1:	5f                   	pop    edi
c00188c2:	5d                   	pop    ebp
c00188c3:	c3                   	ret    

c00188c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00188c4:	55                   	push   ebp
c00188c5:	57                   	push   edi
c00188c6:	56                   	push   esi
c00188c7:	53                   	push   ebx
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00188cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188d3:	89 f5                	mov    ebp,esi
c00188d5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00188db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00188e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00188eb:	83 f9 01             	cmp    ecx,0x1
c00188ee:	75 5d                	jne    c001894d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00188f0:	0f b6 c8             	movzx  ecx,al
c00188f3:	0f b6 d2             	movzx  edx,dl
c00188f6:	c1 e1 10             	shl    ecx,0x10
c00188f9:	c1 e2 0b             	shl    edx,0xb
c00188fc:	89 f0                	mov    eax,esi
c00188fe:	25 fc 00 00 00       	and    eax,0xfc
c0018903:	09 c1                	or     ecx,eax
c0018905:	89 e8                	mov    eax,ebp
c0018907:	0f b6 c0             	movzx  eax,al
c001890a:	c1 e0 08             	shl    eax,0x8
c001890d:	09 c1                	or     ecx,eax
c001890f:	09 d1                	or     ecx,edx
c0018911:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018916:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001891c:	89 c8                	mov    eax,ecx
c001891e:	ef                   	out    dx,eax
c001891f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018924:	ed                   	in     eax,dx
c0018925:	0f b7 db             	movzx  ebx,bx
c0018928:	83 e6 02             	and    esi,0x2
c001892b:	74 0a                	je     c0018937 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001892d:	0f b7 d0             	movzx  edx,ax
c0018930:	c1 e3 10             	shl    ebx,0x10
c0018933:	09 d3                	or     ebx,edx
c0018935:	eb 05                	jmp    c001893c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018937:	66 31 c0             	xor    ax,ax
c001893a:	09 c3                	or     ebx,eax
c001893c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018941:	89 c8                	mov    eax,ecx
c0018943:	ef                   	out    dx,eax
c0018944:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018949:	89 d8                	mov    eax,ebx
c001894b:	eb 41                	jmp    c001898e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001894d:	83 f9 02             	cmp    ecx,0x2
c0018950:	75 45                	jne    c0018997 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018952:	83 ec 0c             	sub    esp,0xc
c0018955:	0f b6 d2             	movzx  edx,dl
c0018958:	89 f1                	mov    ecx,esi
c001895a:	0f b6 c0             	movzx  eax,al
c001895d:	0f b6 f1             	movzx  esi,cl
c0018960:	89 e9                	mov    ecx,ebp
c0018962:	56                   	push   esi
c0018963:	0f b6 c9             	movzx  ecx,cl
c0018966:	51                   	push   ecx
c0018967:	52                   	push   edx
c0018968:	50                   	push   eax
c0018969:	57                   	push   edi
c001896a:	e8 ad fc ff ff       	call   c001861c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001896f:	89 c2                	mov    edx,eax
c0018971:	ed                   	in     eax,dx
c0018972:	83 c4 20             	add    esp,0x20
c0018975:	0f b7 db             	movzx  ebx,bx
c0018978:	f6 c2 02             	test   dl,0x2
c001897b:	74 0c                	je     c0018989 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001897d:	0f b7 c8             	movzx  ecx,ax
c0018980:	89 d8                	mov    eax,ebx
c0018982:	c1 e0 10             	shl    eax,0x10
c0018985:	09 c8                	or     eax,ecx
c0018987:	eb 05                	jmp    c001898e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018989:	66 31 c0             	xor    ax,ax
c001898c:	09 d8                	or     eax,ebx
c001898e:	ef                   	out    dx,eax
c001898f:	83 c4 0c             	add    esp,0xc
c0018992:	5b                   	pop    ebx
c0018993:	5e                   	pop    esi
c0018994:	5f                   	pop    edi
c0018995:	5d                   	pop    ebp
c0018996:	c3                   	ret    
c0018997:	c7 44 24 20 bb f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f3bb
c001899f:	83 c4 0c             	add    esp,0xc
c00189a2:	5b                   	pop    ebx
c00189a3:	5e                   	pop    esi
c00189a4:	5f                   	pop    edi
c00189a5:	5d                   	pop    ebp
c00189a6:	e9 78 77 ff ff       	jmp    c0010123 <KePanic(char const*)>
c00189ab:	90                   	nop

c00189ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189ac:	55                   	push   ebp
c00189ad:	57                   	push   edi
c00189ae:	56                   	push   esi
c00189af:	53                   	push   ebx
c00189b0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189b6:	80 3d cc 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248cc,0x0
c00189bd:	0f 85 84 00 00 00    	jne    c0018a47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00189c3:	83 ec 0c             	sub    esp,0xc
c00189c6:	68 14 01 00 00       	push   0x114
c00189cb:	e8 e9 ed fe ff       	call   c00077b9 <malloc>
c00189d0:	83 c4 0c             	add    esp,0xc
c00189d3:	89 c3                	mov    ebx,eax
c00189d5:	ff 35 10 3f 02 c0    	push   DWORD PTR ds:0xc0023f10
c00189db:	68 c1 f3 01 c0       	push   0xc001f3c1
c00189e0:	50                   	push   eax
c00189e1:	e8 68 20 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00189e6:	5a                   	pop    edx
c00189e7:	59                   	pop    ecx
c00189e8:	6a 01                	push   0x1
c00189ea:	53                   	push   ebx
c00189eb:	e8 1e 21 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00189f0:	83 c4 0c             	add    esp,0xc
c00189f3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00189f7:	50                   	push   eax
c00189f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189fc:	50                   	push   eax
c00189fd:	53                   	push   ebx
c00189fe:	e8 b7 23 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0018a03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a07:	40                   	inc    eax
c0018a08:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a0b:	e8 a9 ed fe ff       	call   c00077b9 <malloc>
c0018a10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a14:	a3 c8 48 02 c0       	mov    ds:0xc00248c8,eax
c0018a19:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a1d:	5e                   	pop    esi
c0018a1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a20:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a24:	51                   	push   ecx
c0018a25:	50                   	push   eax
c0018a26:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a2a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a2e:	53                   	push   ebx
c0018a2f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a32:	83 c4 14             	add    esp,0x14
c0018a35:	53                   	push   ebx
c0018a36:	e8 31 21 ff ff       	call   c000ab6c <File::close()>
c0018a3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a3f:	83 c4 10             	add    esp,0x10
c0018a42:	a3 c4 48 02 c0       	mov    ds:0xc00248c4,eax
c0018a47:	a1 c4 48 02 c0       	mov    eax,ds:0xc00248c4
c0018a4c:	8b 15 c8 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248c8
c0018a52:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a55:	31 ff                	xor    edi,edi
c0018a57:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a5f:	31 f6                	xor    esi,esi
c0018a61:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018a66:	31 db                	xor    ebx,ebx
c0018a68:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018a70:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018a75:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a7c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a80:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a8b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a8e:	0f 8e 6b 01 00 00    	jle    c0018bff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a94:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a97:	d4 40                	aam    0x40
c0018a99:	d5 39                	aad    0x39
c0018a9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a9f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018aa3:	d4 40                	aam    0x40
c0018aa5:	d5 39                	aad    0x39
c0018aa7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018aab:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018aaf:	d4 40                	aam    0x40
c0018ab1:	d5 39                	aad    0x39
c0018ab3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018ab7:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018abb:	d4 40                	aam    0x40
c0018abd:	d5 39                	aad    0x39
c0018abf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ac3:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018ac7:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018acb:	3c 56                	cmp    al,0x56
c0018acd:	74 45                	je     c0018b14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018acf:	d4 40                	aam    0x40
c0018ad1:	d5 39                	aad    0x39
c0018ad3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018ad6:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018ada:	0f b6 c9             	movzx  ecx,cl
c0018add:	c1 e1 04             	shl    ecx,0x4
c0018ae0:	d4 40                	aam    0x40
c0018ae2:	d5 39                	aad    0x39
c0018ae4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ae7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018aeb:	0f b6 db             	movzx  ebx,bl
c0018aee:	09 cb                	or     ebx,ecx
c0018af0:	c1 e3 04             	shl    ebx,0x4
c0018af3:	d4 40                	aam    0x40
c0018af5:	d5 39                	aad    0x39
c0018af7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018afa:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018afe:	0f b6 c9             	movzx  ecx,cl
c0018b01:	09 cb                	or     ebx,ecx
c0018b03:	c1 e3 04             	shl    ebx,0x4
c0018b06:	89 d9                	mov    ecx,ebx
c0018b08:	d4 40                	aam    0x40
c0018b0a:	d5 39                	aad    0x39
c0018b0c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b0f:	0f b6 db             	movzx  ebx,bl
c0018b12:	09 cb                	or     ebx,ecx
c0018b14:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b18:	80 f9 44             	cmp    cl,0x44
c0018b1b:	74 47                	je     c0018b64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b1d:	88 c8                	mov    al,cl
c0018b1f:	d4 40                	aam    0x40
c0018b21:	d5 39                	aad    0x39
c0018b23:	83 e8 30             	sub    eax,0x30
c0018b26:	0f b6 e8             	movzx  ebp,al
c0018b29:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b2d:	c1 e5 04             	shl    ebp,0x4
c0018b30:	d4 40                	aam    0x40
c0018b32:	d5 39                	aad    0x39
c0018b34:	83 e8 30             	sub    eax,0x30
c0018b37:	0f b6 f0             	movzx  esi,al
c0018b3a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b3e:	09 ee                	or     esi,ebp
c0018b40:	c1 e6 04             	shl    esi,0x4
c0018b43:	d4 40                	aam    0x40
c0018b45:	d5 39                	aad    0x39
c0018b47:	83 e8 30             	sub    eax,0x30
c0018b4a:	0f b6 e8             	movzx  ebp,al
c0018b4d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b51:	09 ee                	or     esi,ebp
c0018b53:	c1 e6 04             	shl    esi,0x4
c0018b56:	89 f5                	mov    ebp,esi
c0018b58:	d4 40                	aam    0x40
c0018b5a:	d5 39                	aad    0x39
c0018b5c:	83 e8 30             	sub    eax,0x30
c0018b5f:	0f b6 f0             	movzx  esi,al
c0018b62:	09 ee                	or     esi,ebp
c0018b64:	83 c7 10             	add    edi,0x10
c0018b67:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018b6b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b6e:	3c 0a                	cmp    al,0xa
c0018b70:	74 09                	je     c0018b7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018b72:	45                   	inc    ebp
c0018b73:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b76:	75 16                	jne    c0018b8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018b78:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018b7b:	3c 0a                	cmp    al,0xa
c0018b7d:	0f 94 c0             	sete   al
c0018b80:	0f b6 c0             	movzx  eax,al
c0018b83:	01 c7                	add    edi,eax
c0018b85:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b8a:	75 0c                	jne    c0018b98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b8c:	eb 15                	jmp    c0018ba3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b8e:	47                   	inc    edi
c0018b8f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b92:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b96:	eb d3                	jmp    c0018b6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b98:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b9d:	0f 85 e8 fe ff ff    	jne    c0018a8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ba3:	80 f9 44             	cmp    cl,0x44
c0018ba6:	74 0b                	je     c0018bb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018ba8:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018bad:	0f 85 d8 fe ff ff    	jne    c0018a8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bb3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018bb7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bbb:	c1 e1 04             	shl    ecx,0x4
c0018bbe:	83 e8 30             	sub    eax,0x30
c0018bc1:	09 c8                	or     eax,ecx
c0018bc3:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018bc7:	0f 85 be fe ff ff    	jne    c0018a8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bcd:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018bd1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018bd5:	c1 e1 04             	shl    ecx,0x4
c0018bd8:	83 e8 30             	sub    eax,0x30
c0018bdb:	09 c8                	or     eax,ecx
c0018bdd:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018be1:	0f 85 a4 fe ff ff    	jne    c0018a8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018be7:	50                   	push   eax
c0018be8:	50                   	push   eax
c0018be9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bed:	50                   	push   eax
c0018bee:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018bf5:	e8 06 7a fe ff       	call   c0000600 <strcpy>
c0018bfa:	83 c4 10             	add    esp,0x10
c0018bfd:	eb 15                	jmp    c0018c14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018bff:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c06:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c11:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c14:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c1b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c21:	5b                   	pop    ebx
c0018c22:	5e                   	pop    esi
c0018c23:	5f                   	pop    edi
c0018c24:	5d                   	pop    ebp
c0018c25:	c3                   	ret    

c0018c26 <PCI::checkBus(unsigned char)>:
c0018c26:	56                   	push   esi
c0018c27:	53                   	push   ebx
c0018c28:	31 f6                	xor    esi,esi
c0018c2a:	51                   	push   ecx
c0018c2b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c2f:	0f b6 c3             	movzx  eax,bl
c0018c32:	52                   	push   edx
c0018c33:	56                   	push   esi
c0018c34:	46                   	inc    esi
c0018c35:	50                   	push   eax
c0018c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c3a:	e8 f3 02 00 00       	call   c0018f32 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	83 fe 20             	cmp    esi,0x20
c0018c45:	75 e8                	jne    c0018c2f <PCI::checkBus(unsigned char)+0x9>
c0018c47:	58                   	pop    eax
c0018c48:	5b                   	pop    ebx
c0018c49:	5e                   	pop    esi
c0018c4a:	c3                   	ret    
c0018c4b:	90                   	nop

c0018c4c <PCI::foundDevice(PCIDeviceInfo)>:
c0018c4c:	55                   	push   ebp
c0018c4d:	57                   	push   edi
c0018c4e:	56                   	push   esi
c0018c4f:	53                   	push   ebx
c0018c50:	83 ec 1c             	sub    esp,0x1c
c0018c53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c57:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c5d:	0f 84 52 01 00 00    	je     c0018db5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c63:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018c67:	66 81 f9 06 04       	cmp    cx,0x406
c0018c6c:	75 2c                	jne    c0018c9a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018c6e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018c73:	50                   	push   eax
c0018c74:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018c79:	50                   	push   eax
c0018c7a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c7f:	50                   	push   eax
c0018c80:	56                   	push   esi
c0018c81:	e8 b2 fb ff ff       	call   c0018838 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c86:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c8a:	0f b6 c0             	movzx  eax,al
c0018c8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c91:	83 c4 2c             	add    esp,0x2c
c0018c94:	5b                   	pop    ebx
c0018c95:	5e                   	pop    esi
c0018c96:	5f                   	pop    edi
c0018c97:	5d                   	pop    ebp
c0018c98:	eb 8c                	jmp    c0018c26 <PCI::checkBus(unsigned char)>
c0018c9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c9e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018ca4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018ca8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018cac:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018cb0:	88 d3                	mov    bl,dl
c0018cb2:	85 c0                	test   eax,eax
c0018cb4:	74 33                	je     c0018ce9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018cb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018cb9:	85 d2                	test   edx,edx
c0018cbb:	74 28                	je     c0018ce5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cbd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018cc3:	31 ef                	xor    edi,ebp
c0018cc5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018ccb:	75 18                	jne    c0018ce5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018ccd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018cd1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018cd7:	75 0c                	jne    c0018ce5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cd9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018cdf:	0f 84 d0 00 00 00    	je     c0018db5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ce7:	eb c9                	jmp    c0018cb2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018ce9:	66 81 f9 01 06       	cmp    cx,0x601
c0018cee:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018cf2:	75 19                	jne    c0018d0d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018cf4:	83 ec 0c             	sub    esp,0xc
c0018cf7:	68 64 01 00 00       	push   0x164
c0018cfc:	e8 b8 ea fe ff       	call   c00077b9 <malloc>
c0018d01:	89 c5                	mov    ebp,eax
c0018d03:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d06:	e8 47 0e 00 00       	call   c0019b52 <SATABus::SATABus()>
c0018d0b:	eb 1e                	jmp    c0018d2b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d0d:	66 81 f9 01 01       	cmp    cx,0x101
c0018d12:	75 60                	jne    c0018d74 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d14:	83 ec 0c             	sub    esp,0xc
c0018d17:	68 70 02 00 00       	push   0x270
c0018d1c:	e8 98 ea fe ff       	call   c00077b9 <malloc>
c0018d21:	89 c5                	mov    ebp,eax
c0018d23:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d26:	e8 cb 02 00 00       	call   c0018ff6 <IDE::IDE()>
c0018d2b:	58                   	pop    eax
c0018d2c:	5a                   	pop    edx
c0018d2d:	55                   	push   ebp
c0018d2e:	56                   	push   esi
c0018d2f:	e8 e4 2b ff ff       	call   c000b918 <Device::addChild(Device*)>
c0018d34:	83 ec 1c             	sub    esp,0x1c
c0018d37:	b9 09 00 00 00       	mov    ecx,0x9
c0018d3c:	fc                   	cld    
c0018d3d:	89 e7                	mov    edi,esp
c0018d3f:	89 de                	mov    esi,ebx
c0018d41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d43:	55                   	push   ebp
c0018d44:	e8 15 2b ff ff       	call   c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018d49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d4c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d50:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d58:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d60:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018d68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d6b:	83 c4 4c             	add    esp,0x4c
c0018d6e:	5b                   	pop    ebx
c0018d6f:	5e                   	pop    esi
c0018d70:	5f                   	pop    edi
c0018d71:	5d                   	pop    ebp
c0018d72:	ff e0                	jmp    eax
c0018d74:	83 ec 0c             	sub    esp,0xc
c0018d77:	68 58 01 00 00       	push   0x158
c0018d7c:	e8 38 ea fe ff       	call   c00077b9 <malloc>
c0018d81:	89 c5                	mov    ebp,eax
c0018d83:	58                   	pop    eax
c0018d84:	5a                   	pop    edx
c0018d85:	68 da f3 01 c0       	push   0xc001f3da
c0018d8a:	55                   	push   ebp
c0018d8b:	e8 26 2e ff ff       	call   c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018d90:	59                   	pop    ecx
c0018d91:	5f                   	pop    edi
c0018d92:	55                   	push   ebp
c0018d93:	56                   	push   esi
c0018d94:	e8 7f 2b ff ff       	call   c000b918 <Device::addChild(Device*)>
c0018d99:	b9 09 00 00 00       	mov    ecx,0x9
c0018d9e:	fc                   	cld    
c0018d9f:	89 df                	mov    edi,ebx
c0018da1:	89 de                	mov    esi,ebx
c0018da3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018da5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018da9:	83 c4 2c             	add    esp,0x2c
c0018dac:	5b                   	pop    ebx
c0018dad:	5e                   	pop    esi
c0018dae:	5f                   	pop    edi
c0018daf:	5d                   	pop    ebp
c0018db0:	e9 a9 2a ff ff       	jmp    c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018db5:	83 c4 1c             	add    esp,0x1c
c0018db8:	5b                   	pop    ebx
c0018db9:	5e                   	pop    esi
c0018dba:	5f                   	pop    edi
c0018dbb:	5d                   	pop    ebp
c0018dbc:	c3                   	ret    
c0018dbd:	90                   	nop

c0018dbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018dbe:	55                   	push   ebp
c0018dbf:	57                   	push   edi
c0018dc0:	56                   	push   esi
c0018dc1:	53                   	push   ebx
c0018dc2:	83 ec 68             	sub    esp,0x68
c0018dc5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018dc9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018dd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018dd4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018ddb:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018de0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018de4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018deb:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018df0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018df4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018df9:	6a 0c                	push   0xc
c0018dfb:	57                   	push   edi
c0018dfc:	53                   	push   ebx
c0018dfd:	56                   	push   esi
c0018dfe:	55                   	push   ebp
c0018dff:	e8 86 f8 ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e04:	83 c4 20             	add    esp,0x20
c0018e07:	57                   	push   edi
c0018e08:	53                   	push   ebx
c0018e09:	56                   	push   esi
c0018e0a:	55                   	push   ebp
c0018e0b:	e8 6e f9 ff ff       	call   c001877e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e10:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e15:	57                   	push   edi
c0018e16:	53                   	push   ebx
c0018e17:	56                   	push   esi
c0018e18:	55                   	push   ebp
c0018e19:	e8 f6 f9 ff ff       	call   c0018814 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e1e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e22:	83 c4 14             	add    esp,0x14
c0018e25:	6a 3c                	push   0x3c
c0018e27:	57                   	push   edi
c0018e28:	53                   	push   ebx
c0018e29:	56                   	push   esi
c0018e2a:	55                   	push   ebp
c0018e2b:	e8 5a f8 ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e30:	0f b6 c4             	movzx  eax,ah
c0018e33:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e37:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e3b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e3f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c0018e44:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e4a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e54:	83 c4 20             	add    esp,0x20
c0018e57:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e5c:	74 30                	je     c0018e8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e5e:	31 c0                	xor    eax,eax
c0018e60:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018e64:	7e 28                	jle    c0018e8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e66:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018e6e:	39 cb                	cmp    ebx,ecx
c0018e70:	75 19                	jne    c0018e8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e72:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018e7a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e7e:	75 0b                	jne    c0018e8b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e80:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e87:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e8b:	40                   	inc    eax
c0018e8c:	eb d2                	jmp    c0018e60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e8e:	31 d2                	xor    edx,edx
c0018e90:	83 ec 0c             	sub    esp,0xc
c0018e93:	57                   	push   edi
c0018e94:	53                   	push   ebx
c0018e95:	56                   	push   esi
c0018e96:	52                   	push   edx
c0018e97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e9b:	55                   	push   ebp
c0018e9c:	e8 bf f9 ff ff       	call   c0018860 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ea1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ea5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ea9:	42                   	inc    edx
c0018eaa:	83 c4 20             	add    esp,0x20
c0018ead:	83 fa 06             	cmp    edx,0x6
c0018eb0:	75 de                	jne    c0018e90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018eb2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018eb7:	83 ec 0c             	sub    esp,0xc
c0018eba:	86 e0                	xchg   al,ah
c0018ebc:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018ec1:	6a 02                	push   0x2
c0018ec3:	57                   	push   edi
c0018ec4:	53                   	push   ebx
c0018ec5:	56                   	push   esi
c0018ec6:	55                   	push   ebp
c0018ec7:	e8 be f7 ff ff       	call   c001868a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ecc:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018ed1:	83 c4 20             	add    esp,0x20
c0018ed4:	57                   	push   edi
c0018ed5:	53                   	push   ebx
c0018ed6:	56                   	push   esi
c0018ed7:	55                   	push   ebp
c0018ed8:	e8 eb f8 ff ff       	call   c00187c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018edd:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018ee1:	57                   	push   edi
c0018ee2:	53                   	push   ebx
c0018ee3:	56                   	push   esi
c0018ee4:	55                   	push   ebp
c0018ee5:	e8 48 f8 ff ff       	call   c0018732 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018eea:	b9 09 00 00 00       	mov    ecx,0x9
c0018eef:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018ef4:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018ef8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018efc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f00:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f04:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f08:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f0c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f10:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f14:	83 ec 0c             	sub    esp,0xc
c0018f17:	fc                   	cld    
c0018f18:	89 e7                	mov    edi,esp
c0018f1a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f20:	55                   	push   ebp
c0018f21:	e8 26 fd ff ff       	call   c0018c4c <PCI::foundDevice(PCIDeviceInfo)>
c0018f26:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f2c:	5b                   	pop    ebx
c0018f2d:	5e                   	pop    esi
c0018f2e:	5f                   	pop    edi
c0018f2f:	5d                   	pop    ebp
c0018f30:	c3                   	ret    
c0018f31:	90                   	nop

c0018f32 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f32:	55                   	push   ebp
c0018f33:	57                   	push   edi
c0018f34:	56                   	push   esi
c0018f35:	53                   	push   ebx
c0018f36:	83 ec 0c             	sub    esp,0xc
c0018f39:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f3d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f42:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f47:	6a 00                	push   0x0
c0018f49:	56                   	push   esi
c0018f4a:	57                   	push   edi
c0018f4b:	55                   	push   ebp
c0018f4c:	e8 e1 f7 ff ff       	call   c0018732 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f51:	6a 00                	push   0x0
c0018f53:	56                   	push   esi
c0018f54:	57                   	push   edi
c0018f55:	55                   	push   ebp
c0018f56:	e8 63 fe ff ff       	call   c0018dbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f5b:	83 c4 20             	add    esp,0x20
c0018f5e:	6a 00                	push   0x0
c0018f60:	56                   	push   esi
c0018f61:	57                   	push   edi
c0018f62:	55                   	push   ebp
c0018f63:	e8 ee f7 ff ff       	call   c0018756 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f68:	83 c4 10             	add    esp,0x10
c0018f6b:	84 c0                	test   al,al
c0018f6d:	79 27                	jns    c0018f96 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018f6f:	bb 01 00 00 00       	mov    ebx,0x1
c0018f74:	53                   	push   ebx
c0018f75:	56                   	push   esi
c0018f76:	57                   	push   edi
c0018f77:	55                   	push   ebp
c0018f78:	e8 b5 f7 ff ff       	call   c0018732 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	66 40                	inc    ax
c0018f82:	74 0c                	je     c0018f90 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f84:	53                   	push   ebx
c0018f85:	56                   	push   esi
c0018f86:	57                   	push   edi
c0018f87:	55                   	push   ebp
c0018f88:	e8 31 fe ff ff       	call   c0018dbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	43                   	inc    ebx
c0018f91:	83 fb 08             	cmp    ebx,0x8
c0018f94:	75 de                	jne    c0018f74 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f96:	83 c4 0c             	add    esp,0xc
c0018f99:	5b                   	pop    ebx
c0018f9a:	5e                   	pop    esi
c0018f9b:	5f                   	pop    edi
c0018f9c:	5d                   	pop    ebp
c0018f9d:	c3                   	ret    

c0018f9e <PCI::detect()>:
c0018f9e:	56                   	push   esi
c0018f9f:	53                   	push   ebx
c0018fa0:	53                   	push   ebx
c0018fa1:	31 db                	xor    ebx,ebx
c0018fa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018fa7:	6a 00                	push   0x0
c0018fa9:	6a 00                	push   0x0
c0018fab:	6a 00                	push   0x0
c0018fad:	56                   	push   esi
c0018fae:	e8 a3 f7 ff ff       	call   c0018756 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fb3:	83 c4 10             	add    esp,0x10
c0018fb6:	a8 80                	test   al,0x80
c0018fb8:	75 21                	jne    c0018fdb <PCI::detect()+0x3d>
c0018fba:	51                   	push   ecx
c0018fbb:	51                   	push   ecx
c0018fbc:	6a 00                	push   0x0
c0018fbe:	56                   	push   esi
c0018fbf:	e8 62 fc ff ff       	call   c0018c26 <PCI::checkBus(unsigned char)>
c0018fc4:	83 c4 10             	add    esp,0x10
c0018fc7:	eb 24                	jmp    c0018fed <PCI::detect()+0x4f>
c0018fc9:	52                   	push   edx
c0018fca:	52                   	push   edx
c0018fcb:	53                   	push   ebx
c0018fcc:	43                   	inc    ebx
c0018fcd:	56                   	push   esi
c0018fce:	e8 53 fc ff ff       	call   c0018c26 <PCI::checkBus(unsigned char)>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	83 fb 08             	cmp    ebx,0x8
c0018fd9:	74 12                	je     c0018fed <PCI::detect()+0x4f>
c0018fdb:	53                   	push   ebx
c0018fdc:	6a 00                	push   0x0
c0018fde:	6a 00                	push   0x0
c0018fe0:	56                   	push   esi
c0018fe1:	e8 4c f7 ff ff       	call   c0018732 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	66 40                	inc    ax
c0018feb:	74 dc                	je     c0018fc9 <PCI::detect()+0x2b>
c0018fed:	58                   	pop    eax
c0018fee:	5b                   	pop    ebx
c0018fef:	5e                   	pop    esi
c0018ff0:	c3                   	ret    
c0018ff1:	90                   	nop

c0018ff2 <IDE::close(int, int, void*)>:
c0018ff2:	83 c8 ff             	or     eax,0xffffffff
c0018ff5:	c3                   	ret    

c0018ff6 <IDE::IDE()>:
c0018ff6:	83 ec 0c             	sub    esp,0xc
c0018ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ffd:	83 ec 08             	sub    esp,0x8
c0019000:	68 20 f4 01 c0       	push   0xc001f420
c0019005:	50                   	push   eax
c0019006:	e8 51 2c ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	ba b0 f4 01 c0       	mov    edx,0xc001f4b0
c0019013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019017:	89 10                	mov    DWORD PTR [eax],edx
c0019019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001901d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019024:	90                   	nop
c0019025:	83 c4 0c             	add    esp,0xc
c0019028:	c3                   	ret    
c0019029:	90                   	nop

c001902a <IDE::prepareInterrupt(unsigned char)>:
c001902a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001902f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019033:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001903b:	c3                   	ret    

c001903c <selectDrive(unsigned char, unsigned char)>:
c001903c:	c3                   	ret    
c001903d:	90                   	nop

c001903e <IDE::getBase(unsigned char)>:
c001903e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019047:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001904f:	c3                   	ret    

c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019050:	55                   	push   ebp
c0019051:	57                   	push   edi
c0019052:	56                   	push   esi
c0019053:	53                   	push   ebx
c0019054:	83 ec 1c             	sub    esp,0x1c
c0019057:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001905b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001905f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019062:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019066:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001906a:	80 f9 03             	cmp    cl,0x3
c001906d:	77 51                	ja     c00190c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001906f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019073:	0f b6 f2             	movzx  esi,dl
c0019076:	0f b6 db             	movzx  ebx,bl
c0019079:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001907c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019080:	83 ca 80             	or     edx,0xffffff80
c0019083:	0f b6 d2             	movzx  edx,dl
c0019086:	52                   	push   edx
c0019087:	6a 0c                	push   0xc
c0019089:	56                   	push   esi
c001908a:	57                   	push   edi
c001908b:	e8 c0 ff ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019090:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019099:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001909d:	ee                   	out    dx,al
c001909e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190a3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190a7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190ab:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190af:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00190b7:	83 c4 2c             	add    esp,0x2c
c00190ba:	5b                   	pop    ebx
c00190bb:	5e                   	pop    esi
c00190bc:	5f                   	pop    edi
c00190bd:	5d                   	pop    ebp
c00190be:	eb 90                	jmp    c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190c0:	80 fb 07             	cmp    bl,0x7
c00190c3:	77 12                	ja     c00190d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00190c5:	0f b6 d2             	movzx  edx,dl
c00190c8:	0f b6 db             	movzx  ebx,bl
c00190cb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00190d3:	89 da                	mov    edx,ebx
c00190d5:	eb 2f                	jmp    c0019106 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190d7:	80 fb 0d             	cmp    bl,0xd
c00190da:	77 13                	ja     c00190ef <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00190dc:	0f b6 d2             	movzx  edx,dl
c00190df:	0f b6 db             	movzx  ebx,bl
c00190e2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00190e9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00190ed:	eb 17                	jmp    c0019106 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190ef:	80 fb 15             	cmp    bl,0x15
c00190f2:	77 13                	ja     c0019107 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00190f4:	0f b6 d2             	movzx  edx,dl
c00190f7:	0f b6 db             	movzx  ebx,bl
c00190fa:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019102:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019106:	ee                   	out    dx,al
c0019107:	83 c4 1c             	add    esp,0x1c
c001910a:	5b                   	pop    ebx
c001910b:	5e                   	pop    esi
c001910c:	5f                   	pop    edi
c001910d:	5d                   	pop    ebp
c001910e:	c3                   	ret    
c001910f:	90                   	nop

c0019110 <IDE::read(unsigned char, unsigned char)>:
c0019110:	55                   	push   ebp
c0019111:	57                   	push   edi
c0019112:	56                   	push   esi
c0019113:	53                   	push   ebx
c0019114:	83 ec 1c             	sub    esp,0x1c
c0019117:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001911b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001911f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019122:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019126:	3c 03                	cmp    al,0x3
c0019128:	77 43                	ja     c001916d <IDE::read(unsigned char, unsigned char)+0x5d>
c001912a:	0f b6 f2             	movzx  esi,dl
c001912d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019130:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019134:	83 c8 80             	or     eax,0xffffff80
c0019137:	0f b6 c0             	movzx  eax,al
c001913a:	50                   	push   eax
c001913b:	6a 0c                	push   0xc
c001913d:	56                   	push   esi
c001913e:	57                   	push   edi
c001913f:	e8 0c ff ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019144:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019149:	0f b6 c3             	movzx  eax,bl
c001914c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019150:	ec                   	in     al,dx
c0019151:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019155:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001915a:	52                   	push   edx
c001915b:	6a 0c                	push   0xc
c001915d:	56                   	push   esi
c001915e:	57                   	push   edi
c001915f:	e8 ec fe ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019164:	83 c4 20             	add    esp,0x20
c0019167:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001916b:	eb 49                	jmp    c00191b6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001916d:	80 fb 07             	cmp    bl,0x7
c0019170:	77 12                	ja     c0019184 <IDE::read(unsigned char, unsigned char)+0x74>
c0019172:	0f b6 d2             	movzx  edx,dl
c0019175:	0f b6 c3             	movzx  eax,bl
c0019178:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019180:	89 c2                	mov    edx,eax
c0019182:	eb 31                	jmp    c00191b5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019184:	80 fb 0d             	cmp    bl,0xd
c0019187:	77 13                	ja     c001919c <IDE::read(unsigned char, unsigned char)+0x8c>
c0019189:	0f b6 d2             	movzx  edx,dl
c001918c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019193:	0f b6 d3             	movzx  edx,bl
c0019196:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001919a:	eb 19                	jmp    c00191b5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001919c:	31 c0                	xor    eax,eax
c001919e:	80 fb 15             	cmp    bl,0x15
c00191a1:	77 13                	ja     c00191b6 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191a3:	0f b6 d2             	movzx  edx,dl
c00191a6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191ae:	0f b6 d3             	movzx  edx,bl
c00191b1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00191b5:	ec                   	in     al,dx
c00191b6:	83 c4 1c             	add    esp,0x1c
c00191b9:	5b                   	pop    ebx
c00191ba:	5e                   	pop    esi
c00191bb:	5f                   	pop    edi
c00191bc:	5d                   	pop    ebp
c00191bd:	c3                   	ret    

c00191be <IDE::waitInterrupt(unsigned char)>:
c00191be:	57                   	push   edi
c00191bf:	56                   	push   esi
c00191c0:	31 f6                	xor    esi,esi
c00191c2:	53                   	push   ebx
c00191c3:	83 ec 10             	sub    esp,0x10
c00191c6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00191ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00191ce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00191d2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00191d7:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00191de:	84 db                	test   bl,bl
c00191e0:	75 33                	jne    c0019215 <IDE::waitInterrupt(unsigned char)+0x57>
c00191e2:	52                   	push   edx
c00191e3:	6a 0c                	push   0xc
c00191e5:	50                   	push   eax
c00191e6:	57                   	push   edi
c00191e7:	e8 24 ff ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	a8 01                	test   al,0x1
c00191f1:	75 2a                	jne    c001921d <IDE::waitInterrupt(unsigned char)+0x5f>
c00191f3:	f7 c6 04 00 00 00    	test   esi,0x4
c00191f9:	75 12                	jne    c001920d <IDE::waitInterrupt(unsigned char)+0x4f>
c00191fb:	83 fe 32             	cmp    esi,0x32
c00191fe:	7e 0d                	jle    c001920d <IDE::waitInterrupt(unsigned char)+0x4f>
c0019200:	83 ec 0c             	sub    esp,0xc
c0019203:	6a 64                	push   0x64
c0019205:	e8 1a a9 ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c001920a:	83 c4 10             	add    esp,0x10
c001920d:	83 fe 3c             	cmp    esi,0x3c
c0019210:	74 0b                	je     c001921d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019212:	46                   	inc    esi
c0019213:	eb bd                	jmp    c00191d2 <IDE::waitInterrupt(unsigned char)+0x14>
c0019215:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	88 d8                	mov    al,bl
c0019222:	5b                   	pop    ebx
c0019223:	5e                   	pop    esi
c0019224:	5f                   	pop    edi
c0019225:	c3                   	ret    

c0019226 <ideChannel0IRQHandler(regs*, void*)>:
c0019226:	83 ec 10             	sub    esp,0x10
c0019229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001922d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019234:	6a 07                	push   0x7
c0019236:	6a 00                	push   0x0
c0019238:	50                   	push   eax
c0019239:	e8 d2 fe ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001923e:	83 c4 1c             	add    esp,0x1c
c0019241:	c3                   	ret    

c0019242 <ideChannel1IRQHandler(regs*, void*)>:
c0019242:	83 ec 10             	sub    esp,0x10
c0019245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019249:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019250:	6a 07                	push   0x7
c0019252:	6a 01                	push   0x1
c0019254:	50                   	push   eax
c0019255:	e8 b6 fe ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001925a:	83 c4 1c             	add    esp,0x1c
c001925d:	c3                   	ret    

c001925e <IDE::enableIRQs(unsigned char, bool)>:
c001925e:	57                   	push   edi
c001925f:	56                   	push   esi
c0019260:	be 04 00 00 00       	mov    esi,0x4
c0019265:	53                   	push   ebx
c0019266:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001926b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001926f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019274:	0f 94 c0             	sete   al
c0019277:	01 c0                	add    eax,eax
c0019279:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019280:	0f b6 c0             	movzx  eax,al
c0019283:	50                   	push   eax
c0019284:	6a 0c                	push   0xc
c0019286:	57                   	push   edi
c0019287:	53                   	push   ebx
c0019288:	e8 c3 fd ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	50                   	push   eax
c0019291:	6a 0c                	push   0xc
c0019293:	57                   	push   edi
c0019294:	53                   	push   ebx
c0019295:	e8 76 fe ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001929a:	83 c4 10             	add    esp,0x10
c001929d:	4e                   	dec    esi
c001929e:	75 f0                	jne    c0019290 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192a0:	5b                   	pop    ebx
c00192a1:	5e                   	pop    esi
c00192a2:	5f                   	pop    edi
c00192a3:	c3                   	ret    

c00192a4 <IDE::open(int, int, void*)>:
c00192a4:	55                   	push   ebp
c00192a5:	57                   	push   edi
c00192a6:	56                   	push   esi
c00192a7:	53                   	push   ebx
c00192a8:	83 ec 1c             	sub    esp,0x1c
c00192ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192af:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00192b8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00192c1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00192c8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00192cf:	0f 85 b0 02 00 00    	jne    c0019585 <IDE::open(int, int, void*)+0x2e1>
c00192d5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00192db:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00192df:	83 e0 7f             	and    eax,0x7f
c00192e2:	3c 05                	cmp    al,0x5
c00192e4:	74 04                	je     c00192ea <IDE::open(int, int, void*)+0x46>
c00192e6:	3c 0f                	cmp    al,0xf
c00192e8:	75 32                	jne    c001931c <IDE::open(int, int, void*)+0x78>
c00192ea:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00192f0:	83 e0 fc             	and    eax,0xfffffffc
c00192f3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00192fa:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019300:	83 e0 fc             	and    eax,0xfffffffc
c0019303:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001930a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019310:	83 e0 fc             	and    eax,0xfffffffc
c0019313:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001931a:	eb 14                	jmp    c0019330 <IDE::open(int, int, void*)+0x8c>
c001931c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019326:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019330:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019337:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001933e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019342:	89 c6                	mov    esi,eax
c0019344:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019349:	c1 e6 10             	shl    esi,0x10
c001934c:	89 e8                	mov    eax,ebp
c001934e:	89 fa                	mov    edx,edi
c0019350:	c1 e0 0b             	shl    eax,0xb
c0019353:	09 f0                	or     eax,esi
c0019355:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001935c:	c1 e6 08             	shl    esi,0x8
c001935f:	09 c6                	or     esi,eax
c0019361:	89 f0                	mov    eax,esi
c0019363:	0d 08 00 00 80       	or     eax,0x80000008
c0019368:	ef                   	out    dx,eax
c0019369:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001936e:	89 ca                	mov    edx,ecx
c0019370:	ed                   	in     eax,dx
c0019371:	c1 e8 10             	shr    eax,0x10
c0019374:	3d ff ff 00 00       	cmp    eax,0xffff
c0019379:	0f 84 f5 00 00 00    	je     c0019474 <IDE::open(int, int, void*)+0x1d0>
c001937f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019385:	89 fa                	mov    edx,edi
c0019387:	89 f0                	mov    eax,esi
c0019389:	ef                   	out    dx,eax
c001938a:	b0 fe                	mov    al,0xfe
c001938c:	89 ca                	mov    edx,ecx
c001938e:	ee                   	out    dx,al
c001938f:	89 f0                	mov    eax,esi
c0019391:	89 fa                	mov    edx,edi
c0019393:	ef                   	out    dx,eax
c0019394:	89 ca                	mov    edx,ecx
c0019396:	ed                   	in     eax,dx
c0019397:	3c fe                	cmp    al,0xfe
c0019399:	0f 85 a9 00 00 00    	jne    c0019448 <IDE::open(int, int, void*)+0x1a4>
c001939f:	8b 15 38 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c38
c00193a5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193ac:	74 33                	je     c00193e1 <IDE::open(int, int, void*)+0x13d>
c00193ae:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00193b4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00193b8:	40                   	inc    eax
c00193b9:	83 ec 0c             	sub    esp,0xc
c00193bc:	0f b6 c0             	movzx  eax,al
c00193bf:	50                   	push   eax
c00193c0:	55                   	push   ebp
c00193c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193c5:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00193cb:	51                   	push   ecx
c00193cc:	e8 6b 52 ff ff       	call   c000e63c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00193d1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00193d6:	83 c4 1c             	add    esp,0x1c
c00193d9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00193df:	eb 0a                	jmp    c00193eb <IDE::open(int, int, void*)+0x147>
c00193e1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00193eb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00193f2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00193f9:	c1 e1 10             	shl    ecx,0x10
c00193fc:	c1 e0 08             	shl    eax,0x8
c00193ff:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019404:	09 c1                	or     ecx,eax
c0019406:	89 fa                	mov    edx,edi
c0019408:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001940f:	c1 e0 0b             	shl    eax,0xb
c0019412:	09 c1                	or     ecx,eax
c0019414:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001941a:	89 c8                	mov    eax,ecx
c001941c:	ef                   	out    dx,eax
c001941d:	be fc 0c 00 00       	mov    esi,0xcfc
c0019422:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019428:	89 f2                	mov    edx,esi
c001942a:	ee                   	out    dx,al
c001942b:	89 c8                	mov    eax,ecx
c001942d:	89 fa                	mov    edx,edi
c001942f:	ef                   	out    dx,eax
c0019430:	89 f2                	mov    edx,esi
c0019432:	ed                   	in     eax,dx
c0019433:	0f b6 c0             	movzx  eax,al
c0019436:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001943c:	74 46                	je     c0019484 <IDE::open(int, int, void*)+0x1e0>
c001943e:	83 ec 0c             	sub    esp,0xc
c0019441:	68 38 f4 01 c0       	push   0xc001f438
c0019446:	eb 34                	jmp    c001947c <IDE::open(int, int, void*)+0x1d8>
c0019448:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019451:	75 17                	jne    c001946a <IDE::open(int, int, void*)+0x1c6>
c0019453:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019458:	74 07                	je     c0019461 <IDE::open(int, int, void*)+0x1bd>
c001945a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001945f:	75 09                	jne    c001946a <IDE::open(int, int, void*)+0x1c6>
c0019461:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019468:	eb 1a                	jmp    c0019484 <IDE::open(int, int, void*)+0x1e0>
c001946a:	83 ec 0c             	sub    esp,0xc
c001946d:	68 40 f4 01 c0       	push   0xc001f440
c0019472:	eb 08                	jmp    c001947c <IDE::open(int, int, void*)+0x1d8>
c0019474:	83 ec 0c             	sub    esp,0xc
c0019477:	68 71 f4 01 c0       	push   0xc001f471
c001947c:	e8 a2 6c ff ff       	call   c0010123 <KePanic(char const*)>
c0019481:	83 c4 10             	add    esp,0x10
c0019484:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001948b:	79 1a                	jns    c00194a7 <IDE::open(int, int, void*)+0x203>
c001948d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019493:	83 e0 fc             	and    eax,0xfffffffc
c0019496:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001949d:	83 c0 08             	add    eax,0x8
c00194a0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194ad:	89 c2                	mov    edx,eax
c00194af:	83 e2 0f             	and    edx,0xf
c00194b2:	66 83 fa 08          	cmp    dx,0x8
c00194b6:	75 0a                	jne    c00194c2 <IDE::open(int, int, void*)+0x21e>
c00194b8:	83 e8 02             	sub    eax,0x2
c00194bb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194c2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00194c8:	89 c2                	mov    edx,eax
c00194ca:	83 e2 0f             	and    edx,0xf
c00194cd:	66 83 fa 08          	cmp    dx,0x8
c00194d1:	75 0a                	jne    c00194dd <IDE::open(int, int, void*)+0x239>
c00194d3:	83 e8 02             	sub    eax,0x2
c00194d6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194dd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194e4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00194eb:	89 d0                	mov    eax,edx
c00194ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194f0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194f4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00194f8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00194fb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019500:	0f b6 c9             	movzx  ecx,cl
c0019503:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001950a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001950d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019511:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019515:	8d 50 02             	lea    edx,[eax+0x2]
c0019518:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001951d:	0f b6 d2             	movzx  edx,dl
c0019520:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019526:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019529:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001952d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019531:	8d 48 03             	lea    ecx,[eax+0x3]
c0019534:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019539:	0f b6 c9             	movzx  ecx,cl
c001953c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019542:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019545:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019549:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001954d:	8d 50 04             	lea    edx,[eax+0x4]
c0019550:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019556:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001955b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019562:	66 85 f6             	test   si,si
c0019565:	74 5b                	je     c00195c2 <IDE::open(int, int, void*)+0x31e>
c0019567:	0f b6 d2             	movzx  edx,dl
c001956a:	83 c0 05             	add    eax,0x5
c001956d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019570:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019574:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019578:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001957e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019583:	eb 3d                	jmp    c00195c2 <IDE::open(int, int, void*)+0x31e>
c0019585:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001958b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019592:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019599:	66 05 06 02          	add    ax,0x206
c001959d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195a4:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195ab:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195b2:	66 05 06 02          	add    ax,0x206
c00195b6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195bd:	e9 e5 fe ff ff       	jmp    c00194a7 <IDE::open(int, int, void*)+0x203>
c00195c2:	50                   	push   eax
c00195c3:	50                   	push   eax
c00195c4:	6a 00                	push   0x0
c00195c6:	53                   	push   ebx
c00195c7:	e8 5e fa ff ff       	call   c001902a <IDE::prepareInterrupt(unsigned char)>
c00195cc:	5a                   	pop    edx
c00195cd:	59                   	pop    ecx
c00195ce:	6a 01                	push   0x1
c00195d0:	53                   	push   ebx
c00195d1:	e8 54 fa ff ff       	call   c001902a <IDE::prepareInterrupt(unsigned char)>
c00195d6:	83 c4 0c             	add    esp,0xc
c00195d9:	6a 00                	push   0x0
c00195db:	6a 00                	push   0x0
c00195dd:	53                   	push   ebx
c00195de:	e8 7b fc ff ff       	call   c001925e <IDE::enableIRQs(unsigned char, bool)>
c00195e3:	83 c4 0c             	add    esp,0xc
c00195e6:	6a 00                	push   0x0
c00195e8:	6a 01                	push   0x1
c00195ea:	53                   	push   ebx
c00195eb:	e8 6e fc ff ff       	call   c001925e <IDE::enableIRQs(unsigned char, bool)>
c00195f0:	83 c4 10             	add    esp,0x10
c00195f3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00195fa:	74 34                	je     c0019630 <IDE::open(int, int, void*)+0x38c>
c00195fc:	83 ec 0c             	sub    esp,0xc
c00195ff:	53                   	push   ebx
c0019600:	6a 01                	push   0x1
c0019602:	68 26 92 01 c0       	push   0xc0019226
c0019607:	6a 0e                	push   0xe
c0019609:	53                   	push   ebx
c001960a:	e8 b5 22 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001960f:	83 c4 14             	add    esp,0x14
c0019612:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019618:	53                   	push   ebx
c0019619:	6a 01                	push   0x1
c001961b:	68 42 92 01 c0       	push   0xc0019242
c0019620:	6a 0f                	push   0xf
c0019622:	53                   	push   ebx
c0019623:	e8 9c 22 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019628:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001962e:	eb 38                	jmp    c0019668 <IDE::open(int, int, void*)+0x3c4>
c0019630:	83 ec 0c             	sub    esp,0xc
c0019633:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001963d:	53                   	push   ebx
c001963e:	6a 00                	push   0x0
c0019640:	68 26 92 01 c0       	push   0xc0019226
c0019645:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001964b:	53                   	push   ebx
c001964c:	e8 73 22 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019651:	83 c4 14             	add    esp,0x14
c0019654:	53                   	push   ebx
c0019655:	6a 00                	push   0x0
c0019657:	68 42 92 01 c0       	push   0xc0019242
c001965c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019662:	53                   	push   ebx
c0019663:	e8 5c 22 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019668:	8b 03                	mov    eax,DWORD PTR [ebx]
c001966a:	83 c4 20             	add    esp,0x20
c001966d:	83 ec 0c             	sub    esp,0xc
c0019670:	53                   	push   ebx
c0019671:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019674:	83 c4 0c             	add    esp,0xc
c0019677:	6a 07                	push   0x7
c0019679:	6a 00                	push   0x0
c001967b:	53                   	push   ebx
c001967c:	e8 8f fa ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019681:	83 c4 0c             	add    esp,0xc
c0019684:	6a 07                	push   0x7
c0019686:	6a 01                	push   0x1
c0019688:	53                   	push   ebx
c0019689:	e8 82 fa ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001968e:	83 c4 0c             	add    esp,0xc
c0019691:	6a 01                	push   0x1
c0019693:	6a 00                	push   0x0
c0019695:	53                   	push   ebx
c0019696:	e8 c3 fb ff ff       	call   c001925e <IDE::enableIRQs(unsigned char, bool)>
c001969b:	83 c4 0c             	add    esp,0xc
c001969e:	6a 01                	push   0x1
c00196a0:	6a 01                	push   0x1
c00196a2:	53                   	push   ebx
c00196a3:	e8 b6 fb ff ff       	call   c001925e <IDE::enableIRQs(unsigned char, bool)>
c00196a8:	83 c4 2c             	add    esp,0x2c
c00196ab:	31 c0                	xor    eax,eax
c00196ad:	5b                   	pop    ebx
c00196ae:	5e                   	pop    esi
c00196af:	5f                   	pop    edi
c00196b0:	5d                   	pop    ebp
c00196b1:	c3                   	ret    

c00196b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196b2:	55                   	push   ebp
c00196b3:	57                   	push   edi
c00196b4:	56                   	push   esi
c00196b5:	53                   	push   ebx
c00196b6:	83 ec 1c             	sub    esp,0x1c
c00196b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00196c1:	8d 50 f8             	lea    edx,[eax-0x8]
c00196c4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00196c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00196cc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00196d0:	80 fa 03             	cmp    dl,0x3
c00196d3:	77 5d                	ja     c0019732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00196d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196dd:	0f b6 db             	movzx  ebx,bl
c00196e0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00196e3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00196e7:	83 ca 80             	or     edx,0xffffff80
c00196ea:	0f b6 d2             	movzx  edx,dl
c00196ed:	52                   	push   edx
c00196ee:	6a 0c                	push   0xc
c00196f0:	53                   	push   ebx
c00196f1:	56                   	push   esi
c00196f2:	e8 59 f9 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196f7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00196fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019700:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019704:	0f b6 c0             	movzx  eax,al
c0019707:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001970b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001970d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019712:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019716:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001971a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001971e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019726:	83 c4 2c             	add    esp,0x2c
c0019729:	5b                   	pop    ebx
c001972a:	5e                   	pop    esi
c001972b:	5f                   	pop    edi
c001972c:	5d                   	pop    ebp
c001972d:	e9 1e f9 ff ff       	jmp    c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019732:	3c 07                	cmp    al,0x7
c0019734:	77 10                	ja     c0019746 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019736:	0f b6 db             	movzx  ebx,bl
c0019739:	0f b6 d0             	movzx  edx,al
c001973c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019744:	eb 2d                	jmp    c0019773 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019746:	3c 0d                	cmp    al,0xd
c0019748:	77 13                	ja     c001975d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001974a:	0f b6 db             	movzx  ebx,bl
c001974d:	0f b6 c0             	movzx  eax,al
c0019750:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019757:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001975b:	eb 16                	jmp    c0019773 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001975d:	3c 15                	cmp    al,0x15
c001975f:	77 14                	ja     c0019775 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019761:	0f b6 db             	movzx  ebx,bl
c0019764:	0f b6 c0             	movzx  eax,al
c0019767:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001976f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019773:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019775:	83 c4 1c             	add    esp,0x1c
c0019778:	5b                   	pop    ebx
c0019779:	5e                   	pop    esi
c001977a:	5f                   	pop    edi
c001977b:	5d                   	pop    ebp
c001977c:	c3                   	ret    
c001977d:	90                   	nop

c001977e <IDE::detect()>:
c001977e:	55                   	push   ebp
c001977f:	57                   	push   edi
c0019780:	56                   	push   esi
c0019781:	53                   	push   ebx
c0019782:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019788:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001978f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019796:	0f 85 97 02 00 00    	jne    c0019a33 <IDE::detect()+0x2b5>
c001979c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197a3:	31 f6                	xor    esi,esi
c00197a5:	31 ed                	xor    ebp,ebp
c00197a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197af:	89 e8                	mov    eax,ebp
c00197b1:	c1 e0 06             	shl    eax,0x6
c00197b4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00197bc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00197c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197c4:	c1 e0 04             	shl    eax,0x4
c00197c7:	83 c8 a0             	or     eax,0xffffffa0
c00197ca:	0f b6 c0             	movzx  eax,al
c00197cd:	50                   	push   eax
c00197ce:	6a 06                	push   0x6
c00197d0:	56                   	push   esi
c00197d1:	53                   	push   ebx
c00197d2:	e8 79 f8 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197d7:	83 c4 0c             	add    esp,0xc
c00197da:	6a 0c                	push   0xc
c00197dc:	56                   	push   esi
c00197dd:	53                   	push   ebx
c00197de:	e8 2d f9 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c00197e3:	83 c4 0c             	add    esp,0xc
c00197e6:	6a 0c                	push   0xc
c00197e8:	56                   	push   esi
c00197e9:	53                   	push   ebx
c00197ea:	e8 21 f9 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c00197ef:	83 c4 0c             	add    esp,0xc
c00197f2:	6a 0c                	push   0xc
c00197f4:	56                   	push   esi
c00197f5:	53                   	push   ebx
c00197f6:	e8 15 f9 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c00197fb:	83 c4 0c             	add    esp,0xc
c00197fe:	6a 0c                	push   0xc
c0019800:	56                   	push   esi
c0019801:	53                   	push   ebx
c0019802:	e8 09 f9 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019807:	68 ec 00 00 00       	push   0xec
c001980c:	6a 07                	push   0x7
c001980e:	56                   	push   esi
c001980f:	53                   	push   ebx
c0019810:	e8 3b f8 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019815:	83 c4 1c             	add    esp,0x1c
c0019818:	6a 0c                	push   0xc
c001981a:	56                   	push   esi
c001981b:	53                   	push   ebx
c001981c:	e8 ef f8 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019821:	83 c4 0c             	add    esp,0xc
c0019824:	6a 0c                	push   0xc
c0019826:	56                   	push   esi
c0019827:	53                   	push   ebx
c0019828:	e8 e3 f8 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001982d:	83 c4 0c             	add    esp,0xc
c0019830:	6a 0c                	push   0xc
c0019832:	56                   	push   esi
c0019833:	53                   	push   ebx
c0019834:	e8 d7 f8 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019839:	83 c4 0c             	add    esp,0xc
c001983c:	6a 0c                	push   0xc
c001983e:	56                   	push   esi
c001983f:	53                   	push   ebx
c0019840:	e8 cb f8 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019845:	83 c4 0c             	add    esp,0xc
c0019848:	6a 0c                	push   0xc
c001984a:	56                   	push   esi
c001984b:	53                   	push   ebx
c001984c:	e8 bf f8 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019851:	83 c4 10             	add    esp,0x10
c0019854:	84 c0                	test   al,al
c0019856:	0f 84 5f 01 00 00    	je     c00199bb <IDE::detect()+0x23d>
c001985c:	31 ff                	xor    edi,edi
c001985e:	50                   	push   eax
c001985f:	6a 0c                	push   0xc
c0019861:	56                   	push   esi
c0019862:	53                   	push   ebx
c0019863:	e8 a8 f8 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019868:	83 c4 10             	add    esp,0x10
c001986b:	a8 01                	test   al,0x1
c001986d:	0f 85 69 01 00 00    	jne    c00199dc <IDE::detect()+0x25e>
c0019873:	84 c0                	test   al,al
c0019875:	78 04                	js     c001987b <IDE::detect()+0xfd>
c0019877:	a8 08                	test   al,0x8
c0019879:	75 23                	jne    c001989e <IDE::detect()+0x120>
c001987b:	47                   	inc    edi
c001987c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019882:	7e da                	jle    c001985e <IDE::detect()+0xe0>
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	6a 32                	push   0x32
c0019889:	e8 96 a2 ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c001988e:	83 c4 10             	add    esp,0x10
c0019891:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019897:	75 c5                	jne    c001985e <IDE::detect()+0xe0>
c0019899:	e9 3e 01 00 00       	jmp    c00199dc <IDE::detect()+0x25e>
c001989e:	31 c9                	xor    ecx,ecx
c00198a0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	68 80 00 00 00       	push   0x80
c00198b0:	57                   	push   edi
c00198b1:	6a 00                	push   0x0
c00198b3:	56                   	push   esi
c00198b4:	53                   	push   ebx
c00198b5:	e8 f8 fd ff ff       	call   c00196b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00198ba:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00198bf:	89 e8                	mov    eax,ebp
c00198c1:	89 d1                	mov    ecx,edx
c00198c3:	c1 e0 06             	shl    eax,0x6
c00198c6:	01 d8                	add    eax,ebx
c00198c8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00198cf:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00198d6:	89 f2                	mov    edx,esi
c00198d8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00198de:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00198e2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00198e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00198ec:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00198f3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00198fb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019902:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001990a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019910:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019917:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001991d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019921:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019925:	83 c4 20             	add    esp,0x20
c0019928:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001992b:	83 c0 02             	add    eax,0x2
c001992e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019934:	83 c7 02             	add    edi,0x2
c0019937:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001993a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019940:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019944:	75 e2                	jne    c0019928 <IDE::detect()+0x1aa>
c0019946:	89 e8                	mov    eax,ebp
c0019948:	c1 e0 06             	shl    eax,0x6
c001994b:	01 d8                	add    eax,ebx
c001994d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019953:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001995a:	66 c1 ea 09          	shr    dx,0x9
c001995e:	83 e2 01             	and    edx,0x1
c0019961:	84 c9                	test   cl,cl
c0019963:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019969:	75 22                	jne    c001998d <IDE::detect()+0x20f>
c001996b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019972:	74 46                	je     c00199ba <IDE::detect()+0x23c>
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	68 7c 01 00 00       	push   0x17c
c001997c:	e8 38 de fe ff       	call   c00077b9 <malloc>
c0019981:	89 c7                	mov    edi,eax
c0019983:	89 04 24             	mov    DWORD PTR [esp],eax
c0019986:	e8 11 05 00 00       	call   c0019e9c <ATA::ATA()>
c001998b:	eb 17                	jmp    c00199a4 <IDE::detect()+0x226>
c001998d:	83 ec 0c             	sub    esp,0xc
c0019990:	68 84 01 00 00       	push   0x184
c0019995:	e8 1f de fe ff       	call   c00077b9 <malloc>
c001999a:	89 c7                	mov    edi,eax
c001999c:	89 04 24             	mov    DWORD PTR [esp],eax
c001999f:	e8 f0 0a 00 00       	call   c001a494 <ATAPI::ATAPI()>
c00199a4:	5a                   	pop    edx
c00199a5:	59                   	pop    ecx
c00199a6:	57                   	push   edi
c00199a7:	53                   	push   ebx
c00199a8:	e8 6b 1f ff ff       	call   c000b918 <Device::addChild(Device*)>
c00199ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00199af:	53                   	push   ebx
c00199b0:	55                   	push   ebp
c00199b1:	6a 00                	push   0x0
c00199b3:	57                   	push   edi
c00199b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199b7:	83 c4 20             	add    esp,0x20
c00199ba:	45                   	inc    ebp
c00199bb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00199c0:	74 0d                	je     c00199cf <IDE::detect()+0x251>
c00199c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00199ca:	e9 e0 fd ff ff       	jmp    c00197af <IDE::detect()+0x31>
c00199cf:	4e                   	dec    esi
c00199d0:	74 61                	je     c0019a33 <IDE::detect()+0x2b5>
c00199d2:	be 01 00 00 00       	mov    esi,0x1
c00199d7:	e9 cb fd ff ff       	jmp    c00197a7 <IDE::detect()+0x29>
c00199dc:	50                   	push   eax
c00199dd:	6a 04                	push   0x4
c00199df:	56                   	push   esi
c00199e0:	53                   	push   ebx
c00199e1:	e8 2a f7 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c00199e6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00199ea:	83 c4 0c             	add    esp,0xc
c00199ed:	6a 05                	push   0x5
c00199ef:	56                   	push   esi
c00199f0:	53                   	push   ebx
c00199f1:	e8 1a f7 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c00199f6:	83 c4 10             	add    esp,0x10
c00199f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00199fd:	80 fa 14             	cmp    dl,0x14
c0019a00:	75 04                	jne    c0019a06 <IDE::detect()+0x288>
c0019a02:	3c eb                	cmp    al,0xeb
c0019a04:	eb 07                	jmp    c0019a0d <IDE::detect()+0x28f>
c0019a06:	3c 96                	cmp    al,0x96
c0019a08:	75 b1                	jne    c00199bb <IDE::detect()+0x23d>
c0019a0a:	80 fa 69             	cmp    dl,0x69
c0019a0d:	75 ac                	jne    c00199bb <IDE::detect()+0x23d>
c0019a0f:	68 a1 00 00 00       	push   0xa1
c0019a14:	6a 07                	push   0x7
c0019a16:	56                   	push   esi
c0019a17:	53                   	push   ebx
c0019a18:	e8 33 f6 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a1d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a24:	e8 fb a0 ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c0019a29:	83 c4 10             	add    esp,0x10
c0019a2c:	b1 01                	mov    cl,0x1
c0019a2e:	e9 6d fe ff ff       	jmp    c00198a0 <IDE::detect()+0x122>
c0019a33:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a39:	5b                   	pop    ebx
c0019a3a:	5e                   	pop    esi
c0019a3b:	5f                   	pop    edi
c0019a3c:	5d                   	pop    ebp
c0019a3d:	c3                   	ret    

c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a3e:	55                   	push   ebp
c0019a3f:	57                   	push   edi
c0019a40:	56                   	push   esi
c0019a41:	53                   	push   ebx
c0019a42:	83 ec 1c             	sub    esp,0x1c
c0019a45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a49:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a4d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a51:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a55:	88 c3                	mov    bl,al
c0019a57:	84 c0                	test   al,al
c0019a59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a5d:	0f 84 81 00 00 00    	je     c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a63:	83 ec 0c             	sub    esp,0xc
c0019a66:	68 9b f4 01 c0       	push   0xc001f49b
c0019a6b:	e8 68 0a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0019a70:	83 c4 10             	add    esp,0x10
c0019a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a77:	3c 01                	cmp    al,0x1
c0019a79:	74 63                	je     c0019ade <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019a7b:	3c 02                	cmp    al,0x2
c0019a7d:	75 53                	jne    c0019ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a7f:	01 f6                	add    esi,esi
c0019a81:	09 ee                	or     esi,ebp
c0019a83:	50                   	push   eax
c0019a84:	89 f0                	mov    eax,esi
c0019a86:	6a 01                	push   0x1
c0019a88:	0f b6 f0             	movzx  esi,al
c0019a8b:	c1 e6 06             	shl    esi,0x6
c0019a8e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a96:	50                   	push   eax
c0019a97:	57                   	push   edi
c0019a98:	e8 73 f6 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019a9d:	83 c4 10             	add    esp,0x10
c0019aa0:	a8 01                	test   al,0x1
c0019aa2:	74 02                	je     c0019aa6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019aa4:	b3 07                	mov    bl,0x7
c0019aa6:	a8 02                	test   al,0x2
c0019aa8:	74 02                	je     c0019aac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019aaa:	b3 03                	mov    bl,0x3
c0019aac:	a8 04                	test   al,0x4
c0019aae:	74 02                	je     c0019ab2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019ab0:	b3 14                	mov    bl,0x14
c0019ab2:	a8 08                	test   al,0x8
c0019ab4:	74 02                	je     c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019ab6:	b3 03                	mov    bl,0x3
c0019ab8:	a8 10                	test   al,0x10
c0019aba:	74 02                	je     c0019abe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019abc:	b3 15                	mov    bl,0x15
c0019abe:	a8 20                	test   al,0x20
c0019ac0:	74 02                	je     c0019ac4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019ac2:	b3 03                	mov    bl,0x3
c0019ac4:	a8 40                	test   al,0x40
c0019ac6:	74 02                	je     c0019aca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019ac8:	b3 16                	mov    bl,0x16
c0019aca:	84 c0                	test   al,al
c0019acc:	79 16                	jns    c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ace:	b3 0d                	mov    bl,0xd
c0019ad0:	eb 12                	jmp    c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ad2:	3c 03                	cmp    al,0x3
c0019ad4:	74 0c                	je     c0019ae2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019ad6:	3c 04                	cmp    al,0x4
c0019ad8:	75 0a                	jne    c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ada:	b3 08                	mov    bl,0x8
c0019adc:	eb 06                	jmp    c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ade:	b3 13                	mov    bl,0x13
c0019ae0:	eb 02                	jmp    c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ae2:	b3 17                	mov    bl,0x17
c0019ae4:	83 c4 1c             	add    esp,0x1c
c0019ae7:	88 d8                	mov    al,bl
c0019ae9:	5b                   	pop    ebx
c0019aea:	5e                   	pop    esi
c0019aeb:	5f                   	pop    edi
c0019aec:	5d                   	pop    ebp
c0019aed:	c3                   	ret    

c0019aee <IDE::polling(unsigned char, unsigned int)>:
c0019aee:	55                   	push   ebp
c0019aef:	bd 04 00 00 00       	mov    ebp,0x4
c0019af4:	57                   	push   edi
c0019af5:	56                   	push   esi
c0019af6:	53                   	push   ebx
c0019af7:	83 ec 0c             	sub    esp,0xc
c0019afa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019afe:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b02:	0f b6 f3             	movzx  esi,bl
c0019b05:	52                   	push   edx
c0019b06:	6a 0c                	push   0xc
c0019b08:	56                   	push   esi
c0019b09:	57                   	push   edi
c0019b0a:	e8 01 f6 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019b0f:	83 c4 10             	add    esp,0x10
c0019b12:	4d                   	dec    ebp
c0019b13:	75 ed                	jne    c0019b02 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b15:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b1a:	50                   	push   eax
c0019b1b:	6a 0c                	push   0xc
c0019b1d:	56                   	push   esi
c0019b1e:	57                   	push   edi
c0019b1f:	e8 ec f5 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019b24:	83 c4 10             	add    esp,0x10
c0019b27:	a8 01                	test   al,0x1
c0019b29:	75 17                	jne    c0019b42 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b2b:	a8 20                	test   al,0x20
c0019b2d:	75 0f                	jne    c0019b3e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b2f:	4b                   	dec    ebx
c0019b30:	74 10                	je     c0019b42 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b32:	84 c0                	test   al,al
c0019b34:	78 e4                	js     c0019b1a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b36:	a8 08                	test   al,0x8
c0019b38:	74 e0                	je     c0019b1a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b3a:	31 c0                	xor    eax,eax
c0019b3c:	eb 06                	jmp    c0019b44 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b3e:	b0 01                	mov    al,0x1
c0019b40:	eb 02                	jmp    c0019b44 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b42:	b0 02                	mov    al,0x2
c0019b44:	83 c4 0c             	add    esp,0xc
c0019b47:	5b                   	pop    ebx
c0019b48:	5e                   	pop    esi
c0019b49:	5f                   	pop    edi
c0019b4a:	5d                   	pop    ebp
c0019b4b:	c3                   	ret    

c0019b4c <SATABus::close(int, int, void*)>:
c0019b4c:	31 c0                	xor    eax,eax
c0019b4e:	c3                   	ret    
c0019b4f:	90                   	nop

c0019b50 <SATABus::detect()>:
c0019b50:	c3                   	ret    
c0019b51:	90                   	nop

c0019b52 <SATABus::SATABus()>:
c0019b52:	83 ec 0c             	sub    esp,0xc
c0019b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b59:	83 ec 08             	sub    esp,0x8
c0019b5c:	68 d4 f4 01 c0       	push   0xc001f4d4
c0019b61:	50                   	push   eax
c0019b62:	e8 f5 20 ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c0019b67:	83 c4 10             	add    esp,0x10
c0019b6a:	ba 00 f5 01 c0       	mov    edx,0xc001f500
c0019b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b73:	89 10                	mov    DWORD PTR [eax],edx
c0019b75:	83 ec 0c             	sub    esp,0xc
c0019b78:	6a 50                	push   0x50
c0019b7a:	e8 d4 df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019b7f:	83 c4 10             	add    esp,0x10
c0019b82:	89 c2                	mov    edx,eax
c0019b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b88:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b8e:	83 ec 0c             	sub    esp,0xc
c0019b91:	6a 50                	push   0x50
c0019b93:	e8 ed f6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b98:	83 c4 10             	add    esp,0x10
c0019b9b:	89 c2                	mov    edx,eax
c0019b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ba1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019ba7:	a1 30 0d 02 c0       	mov    eax,ds:0xc0020d30
c0019bac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019bb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bba:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019bc0:	83 ec 0c             	sub    esp,0xc
c0019bc3:	6a 03                	push   0x3
c0019bc5:	6a 50                	push   0x50
c0019bc7:	51                   	push   ecx
c0019bc8:	52                   	push   edx
c0019bc9:	50                   	push   eax
c0019bca:	e8 45 00 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019bcf:	83 c4 20             	add    esp,0x20
c0019bd2:	90                   	nop
c0019bd3:	83 c4 0c             	add    esp,0xc
c0019bd6:	c3                   	ret    
c0019bd7:	90                   	nop

c0019bd8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bdc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019bdf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019be2:	09 c2                	or     edx,eax
c0019be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019bee:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019bf0:	31 c0                	xor    eax,eax
c0019bf2:	c1 e9 08             	shr    ecx,0x8
c0019bf5:	83 e1 0f             	and    ecx,0xf
c0019bf8:	39 c8                	cmp    eax,ecx
c0019bfa:	74 0a                	je     c0019c06 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019bfc:	f6 c2 01             	test   dl,0x1
c0019bff:	74 08                	je     c0019c09 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c01:	d1 ea                	shr    edx,1
c0019c03:	40                   	inc    eax
c0019c04:	eb f2                	jmp    c0019bf8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c06:	83 c8 ff             	or     eax,0xffffffff
c0019c09:	c3                   	ret    

c0019c0a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c0e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c11:	89 c2                	mov    edx,eax
c0019c13:	c1 ea 08             	shr    edx,0x8
c0019c16:	83 e2 0f             	and    edx,0xf
c0019c19:	fe ca                	dec    dl
c0019c1b:	75 31                	jne    c0019c4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c1d:	83 e0 0f             	and    eax,0xf
c0019c20:	3c 03                	cmp    al,0x3
c0019c22:	75 2a                	jne    c0019c4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c24:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c27:	b8 02 00 00 00       	mov    eax,0x2
c0019c2c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c32:	74 1c                	je     c0019c50 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c34:	b8 04 00 00 00       	mov    eax,0x4
c0019c39:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c3f:	74 0f                	je     c0019c50 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c41:	31 c0                	xor    eax,eax
c0019c43:	83 fa 03             	cmp    edx,0x3
c0019c46:	0f 94 c0             	sete   al
c0019c49:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c4d:	c3                   	ret    
c0019c4e:	31 c0                	xor    eax,eax
c0019c50:	c3                   	ret    
c0019c51:	90                   	nop

c0019c52 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c56:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c59:	0f ba e2 0f          	bt     edx,0xf
c0019c5d:	72 f7                	jb     c0019c56 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c5f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c62:	83 ca 10             	or     edx,0x10
c0019c65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c6b:	83 ca 01             	or     edx,0x1
c0019c6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c71:	c3                   	ret    

c0019c72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c76:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c79:	83 e2 fe             	and    edx,0xfffffffe
c0019c7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c7f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c82:	83 e2 ef             	and    edx,0xffffffef
c0019c85:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c8b:	0f ba e2 0e          	bt     edx,0xe
c0019c8f:	72 f7                	jb     c0019c88 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c91:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c94:	0f ba e2 0f          	bt     edx,0xf
c0019c98:	72 ee                	jb     c0019c88 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c9a:	c3                   	ret    
c0019c9b:	90                   	nop

c0019c9c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c9c:	55                   	push   ebp
c0019c9d:	57                   	push   edi
c0019c9e:	56                   	push   esi
c0019c9f:	53                   	push   ebx
c0019ca0:	83 ec 1c             	sub    esp,0x1c
c0019ca3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019ca7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019cab:	53                   	push   ebx
c0019cac:	56                   	push   esi
c0019cad:	e8 c0 ff ff ff       	call   c0019c72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cb2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019cb6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cbc:	83 ec 0c             	sub    esp,0xc
c0019cbf:	c1 e5 0a             	shl    ebp,0xa
c0019cc2:	01 e8                	add    eax,ebp
c0019cc4:	89 03                	mov    DWORD PTR [ebx],eax
c0019cc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cc8:	68 00 04 00 00       	push   0x400
c0019ccd:	6a 00                	push   0x0
c0019ccf:	50                   	push   eax
c0019cd0:	e8 fb 67 fe ff       	call   c00004d0 <memset>
c0019cd5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019cdb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019cdf:	01 e8                	add    eax,ebp
c0019ce1:	83 c4 1c             	add    esp,0x1c
c0019ce4:	89 03                	mov    DWORD PTR [ebx],eax
c0019ce6:	c1 e2 08             	shl    edx,0x8
c0019ce9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019cf0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019cf6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cfc:	01 f8                	add    eax,edi
c0019cfe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d01:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d04:	68 00 01 00 00       	push   0x100
c0019d09:	6a 00                	push   0x0
c0019d0b:	50                   	push   eax
c0019d0c:	e8 bf 67 fe ff       	call   c00004d0 <memset>
c0019d11:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d17:	01 fa                	add    edx,edi
c0019d19:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d1d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d20:	c1 e7 0d             	shl    edi,0xd
c0019d23:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d2a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d30:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d3a:	31 ff                	xor    edi,edi
c0019d3c:	83 c4 10             	add    esp,0x10
c0019d3f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d49:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d4f:	83 c5 20             	add    ebp,0x20
c0019d52:	01 f8                	add    eax,edi
c0019d54:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d57:	52                   	push   edx
c0019d58:	68 00 01 00 00       	push   0x100
c0019d5d:	6a 00                	push   0x0
c0019d5f:	50                   	push   eax
c0019d60:	e8 6b 67 fe ff       	call   c00004d0 <memset>
c0019d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d69:	83 c4 10             	add    esp,0x10
c0019d6c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019d72:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019d79:	01 f8                	add    eax,edi
c0019d7b:	81 c7 00 01 00 00    	add    edi,0x100
c0019d81:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d84:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d8a:	75 b3                	jne    c0019d3f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d8c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d93:	50                   	push   eax
c0019d94:	50                   	push   eax
c0019d95:	53                   	push   ebx
c0019d96:	56                   	push   esi
c0019d97:	e8 b6 fe ff ff       	call   c0019c52 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d9c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019da3:	83 c4 2c             	add    esp,0x2c
c0019da6:	5b                   	pop    ebx
c0019da7:	5e                   	pop    esi
c0019da8:	5f                   	pop    edi
c0019da9:	5d                   	pop    ebp
c0019daa:	c3                   	ret    
c0019dab:	90                   	nop

c0019dac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019dac:	55                   	push   ebp
c0019dad:	57                   	push   edi
c0019dae:	56                   	push   esi
c0019daf:	53                   	push   ebx
c0019db0:	31 db                	xor    ebx,ebx
c0019db2:	83 ec 0c             	sub    esp,0xc
c0019db5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019db9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019dbd:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019dc0:	f7 c7 01 00 00 00    	test   edi,0x1
c0019dc6:	74 7a                	je     c0019e42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019dc8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019dcc:	89 d8                	mov    eax,ebx
c0019dce:	c1 e0 07             	shl    eax,0x7
c0019dd1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019dd8:	55                   	push   ebp
c0019dd9:	56                   	push   esi
c0019dda:	e8 2b fe ff ff       	call   c0019c0a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ddf:	5a                   	pop    edx
c0019de0:	83 f8 01             	cmp    eax,0x1
c0019de3:	59                   	pop    ecx
c0019de4:	75 21                	jne    c0019e07 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019de6:	50                   	push   eax
c0019de7:	53                   	push   ebx
c0019de8:	55                   	push   ebp
c0019de9:	56                   	push   esi
c0019dea:	e8 ad fe ff ff       	call   c0019c9c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019def:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019df6:	e8 be d9 fe ff       	call   c00077b9 <malloc>
c0019dfb:	89 c5                	mov    ebp,eax
c0019dfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e00:	e8 43 0d 00 00       	call   c001ab48 <SATA::SATA()>
c0019e05:	eb 24                	jmp    c0019e2b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e07:	83 f8 04             	cmp    eax,0x4
c0019e0a:	75 36                	jne    c0019e42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e0c:	51                   	push   ecx
c0019e0d:	53                   	push   ebx
c0019e0e:	55                   	push   ebp
c0019e0f:	56                   	push   esi
c0019e10:	e8 87 fe ff ff       	call   c0019c9c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e15:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e1c:	e8 98 d9 fe ff       	call   c00077b9 <malloc>
c0019e21:	89 c5                	mov    ebp,eax
c0019e23:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e26:	e8 79 10 00 00       	call   c001aea4 <SATAPI::SATAPI()>
c0019e2b:	58                   	pop    eax
c0019e2c:	5a                   	pop    edx
c0019e2d:	55                   	push   ebp
c0019e2e:	56                   	push   esi
c0019e2f:	e8 e4 1a ff ff       	call   c000b918 <Device::addChild(Device*)>
c0019e34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e37:	56                   	push   esi
c0019e38:	6a 00                	push   0x0
c0019e3a:	53                   	push   ebx
c0019e3b:	55                   	push   ebp
c0019e3c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e3f:	83 c4 20             	add    esp,0x20
c0019e42:	d1 ef                	shr    edi,1
c0019e44:	43                   	inc    ebx
c0019e45:	83 fb 20             	cmp    ebx,0x20
c0019e48:	0f 85 72 ff ff ff    	jne    c0019dc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e4e:	83 c4 0c             	add    esp,0xc
c0019e51:	5b                   	pop    ebx
c0019e52:	5e                   	pop    esi
c0019e53:	5f                   	pop    edi
c0019e54:	5d                   	pop    ebp
c0019e55:	c3                   	ret    

c0019e56 <SATABus::open(int, int, void*)>:
c0019e56:	83 ec 14             	sub    esp,0x14
c0019e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e5d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e63:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019e69:	52                   	push   edx
c0019e6a:	50                   	push   eax
c0019e6b:	e8 3c ff ff ff       	call   c0019dac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019e70:	31 c0                	xor    eax,eax
c0019e72:	83 c4 1c             	add    esp,0x1c
c0019e75:	c3                   	ret    

c0019e76 <ATA::close(int, int, void*)>:
c0019e76:	83 ec 0c             	sub    esp,0xc
c0019e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e7d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e83:	85 c0                	test   eax,eax
c0019e85:	74 0c                	je     c0019e93 <ATA::close(int, int, void*)+0x1d>
c0019e87:	83 ec 0c             	sub    esp,0xc
c0019e8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e8c:	50                   	push   eax
c0019e8d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e90:	83 c4 10             	add    esp,0x10
c0019e93:	31 c0                	xor    eax,eax
c0019e95:	83 c4 0c             	add    esp,0xc
c0019e98:	c3                   	ret    
c0019e99:	90                   	nop

c0019e9a <ATA::powerSaving(PowerSavingLevel)>:
c0019e9a:	c3                   	ret    
c0019e9b:	90                   	nop

c0019e9c <ATA::ATA()>:
c0019e9c:	83 ec 0c             	sub    esp,0xc
c0019e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ea3:	83 ec 04             	sub    esp,0x4
c0019ea6:	68 00 02 00 00       	push   0x200
c0019eab:	68 cd f5 01 c0       	push   0xc001f5cd
c0019eb0:	50                   	push   eax
c0019eb1:	e8 30 1e ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019eb6:	83 c4 10             	add    esp,0x10
c0019eb9:	ba 40 f5 01 c0       	mov    edx,0xc001f540
c0019ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec2:	89 10                	mov    DWORD PTR [eax],edx
c0019ec4:	90                   	nop
c0019ec5:	83 c4 0c             	add    esp,0xc
c0019ec8:	c3                   	ret    
c0019ec9:	90                   	nop

c0019eca <ATA::flush(bool)>:
c0019eca:	53                   	push   ebx
c0019ecb:	83 ec 08             	sub    esp,0x8
c0019ece:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019ed3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ed7:	19 c0                	sbb    eax,eax
c0019ed9:	83 e0 fd             	and    eax,0xfffffffd
c0019edc:	05 ea 00 00 00       	add    eax,0xea
c0019ee1:	50                   	push   eax
c0019ee2:	6a 07                	push   0x7
c0019ee4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019eeb:	50                   	push   eax
c0019eec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ef2:	e8 59 f1 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ef7:	83 c4 0c             	add    esp,0xc
c0019efa:	6a 00                	push   0x0
c0019efc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f03:	50                   	push   eax
c0019f04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f0a:	e8 df fb ff ff       	call   c0019aee <IDE::polling(unsigned char, unsigned int)>
c0019f0f:	83 c4 18             	add    esp,0x18
c0019f12:	5b                   	pop    ebx
c0019f13:	c3                   	ret    

c0019f14 <ATA::readyForCommand()>:
c0019f14:	56                   	push   esi
c0019f15:	53                   	push   ebx
c0019f16:	53                   	push   ebx
c0019f17:	31 db                	xor    ebx,ebx
c0019f19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f1d:	51                   	push   ecx
c0019f1e:	6a 0c                	push   0xc
c0019f20:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f27:	50                   	push   eax
c0019f28:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f2e:	e8 dd f1 ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	a8 88                	test   al,0x88
c0019f38:	74 1f                	je     c0019f59 <ATA::readyForCommand()+0x45>
c0019f3a:	43                   	inc    ebx
c0019f3b:	83 fb 63             	cmp    ebx,0x63
c0019f3e:	7e dd                	jle    c0019f1d <ATA::readyForCommand()+0x9>
c0019f40:	83 ec 0c             	sub    esp,0xc
c0019f43:	6a 0a                	push   0xa
c0019f45:	e8 da 9b ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f53:	75 c8                	jne    c0019f1d <ATA::readyForCommand()+0x9>
c0019f55:	31 c0                	xor    eax,eax
c0019f57:	eb 02                	jmp    c0019f5b <ATA::readyForCommand()+0x47>
c0019f59:	b0 01                	mov    al,0x1
c0019f5b:	5a                   	pop    edx
c0019f5c:	5b                   	pop    ebx
c0019f5d:	5e                   	pop    esi
c0019f5e:	c3                   	ret    
c0019f5f:	90                   	nop

c0019f60 <ATA::access(unsigned long long, int, void*, bool)>:
c0019f60:	55                   	push   ebp
c0019f61:	57                   	push   edi
c0019f62:	56                   	push   esi
c0019f63:	53                   	push   ebx
c0019f64:	83 ec 2c             	sub    esp,0x2c
c0019f67:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f6f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019f73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f77:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019f7b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f7f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f83:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f8d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f97:	c1 e0 06             	shl    eax,0x6
c0019f9a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fa2:	74 5d                	je     c001a001 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019fa4:	89 fa                	mov    edx,edi
c0019fa6:	89 f0                	mov    eax,esi
c0019fa8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019fac:	c1 ea 1c             	shr    edx,0x1c
c0019faf:	89 d1                	mov    ecx,edx
c0019fb1:	09 c1                	or     ecx,eax
c0019fb3:	74 25                	je     c0019fda <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019fb5:	31 ed                	xor    ebp,ebp
c0019fb7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019fbe:	89 fa                	mov    edx,edi
c0019fc0:	89 f0                	mov    eax,esi
c0019fc2:	0f ad d0             	shrd   eax,edx,cl
c0019fc5:	d3 ea                	shr    edx,cl
c0019fc7:	f6 c1 20             	test   cl,0x20
c0019fca:	74 02                	je     c0019fce <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019fcc:	89 d0                	mov    eax,edx
c0019fce:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019fd2:	45                   	inc    ebp
c0019fd3:	83 fd 06             	cmp    ebp,0x6
c0019fd6:	75 df                	jne    c0019fb7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019fd8:	eb 76                	jmp    c001a050 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019fda:	89 f0                	mov    eax,esi
c0019fdc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019fe1:	89 fa                	mov    edx,edi
c0019fe3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fea:	0f ac d0 10          	shrd   eax,edx,0x10
c0019fee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019ff3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019ff7:	c1 ee 18             	shr    esi,0x18
c0019ffa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019fff:	eb 56                	jmp    c001a057 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a001:	6a 00                	push   0x0
c001a003:	6a 3f                	push   0x3f
c001a005:	57                   	push   edi
c001a006:	56                   	push   esi
c001a007:	e8 14 22 00 00       	call   c001c220 <__umoddi3>
c001a00c:	83 c4 10             	add    esp,0x10
c001a00f:	40                   	inc    eax
c001a010:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a014:	6a 00                	push   0x0
c001a016:	68 f0 03 00 00       	push   0x3f0
c001a01b:	57                   	push   edi
c001a01c:	56                   	push   esi
c001a01d:	e8 fe 20 00 00       	call   c001c120 <__udivdi3>
c001a022:	83 c4 10             	add    esp,0x10
c001a025:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a02a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a031:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a036:	6a 00                	push   0x0
c001a038:	6a 3f                	push   0x3f
c001a03a:	57                   	push   edi
c001a03b:	56                   	push   esi
c001a03c:	e8 df 20 00 00       	call   c001c120 <__udivdi3>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	89 c6                	mov    esi,eax
c001a046:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a04b:	83 e6 0f             	and    esi,0xf
c001a04e:	eb 07                	jmp    c001a057 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a050:	31 f6                	xor    esi,esi
c001a052:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a057:	bf 01 00 00 00       	mov    edi,0x1
c001a05c:	50                   	push   eax
c001a05d:	6a 00                	push   0x0
c001a05f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a066:	50                   	push   eax
c001a067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a06b:	e8 ee f1 ff ff       	call   c001925e <IDE::enableIRQs(unsigned char, bool)>
c001a070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a073:	e8 9c fe ff ff       	call   c0019f14 <ATA::readyForCommand()>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	84 c0                	test   al,al
c001a07d:	0f 84 4e 02 00 00    	je     c001a2d1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a083:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a089:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a08f:	c1 e0 04             	shl    eax,0x4
c001a092:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a099:	09 c6                	or     esi,eax
c001a09b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0a0:	75 05                	jne    c001a0a7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0a2:	83 ce a0             	or     esi,0xffffffa0
c001a0a5:	eb 03                	jmp    c001a0aa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0a7:	83 ce e0             	or     esi,0xffffffe0
c001a0aa:	89 f0                	mov    eax,esi
c001a0ac:	0f b6 f0             	movzx  esi,al
c001a0af:	56                   	push   esi
c001a0b0:	6a 06                	push   0x6
c001a0b2:	51                   	push   ecx
c001a0b3:	52                   	push   edx
c001a0b4:	e8 97 ef ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	6a 00                	push   0x0
c001a0be:	6a 01                	push   0x1
c001a0c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0c7:	50                   	push   eax
c001a0c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0ce:	e8 7d ef ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0d3:	83 c4 10             	add    esp,0x10
c001a0d6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0db:	75 6e                	jne    c001a14b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a0dd:	6a 00                	push   0x0
c001a0df:	6a 08                	push   0x8
c001a0e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0e8:	50                   	push   eax
c001a0e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0ef:	e8 5c ef ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a0f9:	50                   	push   eax
c001a0fa:	6a 09                	push   0x9
c001a0fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a103:	50                   	push   eax
c001a104:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a10a:	e8 41 ef ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10f:	83 c4 20             	add    esp,0x20
c001a112:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a117:	50                   	push   eax
c001a118:	6a 0a                	push   0xa
c001a11a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a121:	50                   	push   eax
c001a122:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a128:	e8 23 ef ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a12d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a132:	50                   	push   eax
c001a133:	6a 0b                	push   0xb
c001a135:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a13c:	50                   	push   eax
c001a13d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a143:	e8 08 ef ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a148:	83 c4 20             	add    esp,0x20
c001a14b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a150:	50                   	push   eax
c001a151:	6a 02                	push   0x2
c001a153:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a15a:	50                   	push   eax
c001a15b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a161:	e8 ea ee ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a166:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a16b:	50                   	push   eax
c001a16c:	6a 03                	push   0x3
c001a16e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a175:	50                   	push   eax
c001a176:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a17c:	e8 cf ee ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a181:	83 c4 20             	add    esp,0x20
c001a184:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a189:	50                   	push   eax
c001a18a:	6a 04                	push   0x4
c001a18c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a193:	50                   	push   eax
c001a194:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a19a:	e8 b1 ee ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a19f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1a4:	50                   	push   eax
c001a1a5:	6a 05                	push   0x5
c001a1a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ae:	50                   	push   eax
c001a1af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b5:	e8 96 ee ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ba:	83 c4 20             	add    esp,0x20
c001a1bd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1c2:	0f 94 c0             	sete   al
c001a1c5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a1ca:	74 09                	je     c001a1d5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a1cc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a1d3:	eb 07                	jmp    c001a1dc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a1d5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a1dc:	0f b6 c0             	movzx  eax,al
c001a1df:	50                   	push   eax
c001a1e0:	6a 07                	push   0x7
c001a1e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e9:	50                   	push   eax
c001a1ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1f0:	e8 5b ee ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	85 f6                	test   esi,esi
c001a1fe:	0f 84 ae 00 00 00    	je     c001a2b2 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a204:	50                   	push   eax
c001a205:	6a 01                	push   0x1
c001a207:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a20e:	50                   	push   eax
c001a20f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a215:	e8 d4 f8 ff ff       	call   c0019aee <IDE::polling(unsigned char, unsigned int)>
c001a21a:	83 c4 10             	add    esp,0x10
c001a21d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a223:	84 c0                	test   al,al
c001a225:	74 20                	je     c001a247 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a227:	0f b6 f8             	movzx  edi,al
c001a22a:	0f b6 d2             	movzx  edx,dl
c001a22d:	57                   	push   edi
c001a22e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a235:	50                   	push   eax
c001a236:	52                   	push   edx
c001a237:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23d:	e8 fc f7 ff ff       	call   c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a242:	e9 87 00 00 00       	jmp    c001a2ce <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a247:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a24c:	74 33                	je     c001a281 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a24e:	31 ed                	xor    ebp,ebp
c001a250:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a254:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a258:	50                   	push   eax
c001a259:	50                   	push   eax
c001a25a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a261:	50                   	push   eax
c001a262:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a268:	e8 d1 ed ff ff       	call   c001903e <IDE::getBase(unsigned char)>
c001a26d:	89 c2                	mov    edx,eax
c001a26f:	89 f8                	mov    eax,edi
c001a271:	66 ef                	out    dx,ax
c001a273:	45                   	inc    ebp
c001a274:	83 c4 10             	add    esp,0x10
c001a277:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a27d:	75 d1                	jne    c001a250 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a27f:	eb 23                	jmp    c001a2a4 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a281:	0f b6 d2             	movzx  edx,dl
c001a284:	51                   	push   ecx
c001a285:	51                   	push   ecx
c001a286:	52                   	push   edx
c001a287:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a28d:	e8 ac ed ff ff       	call   c001903e <IDE::getBase(unsigned char)>
c001a292:	b9 00 01 00 00       	mov    ecx,0x100
c001a297:	89 c2                	mov    edx,eax
c001a299:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a29d:	fc                   	cld    
c001a29e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2a1:	83 c4 10             	add    esp,0x10
c001a2a4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2ac:	4e                   	dec    esi
c001a2ad:	e9 4a ff ff ff       	jmp    c001a1fc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2b2:	31 ff                	xor    edi,edi
c001a2b4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2b9:	74 16                	je     c001a2d1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a2bb:	50                   	push   eax
c001a2bc:	50                   	push   eax
c001a2bd:	31 c0                	xor    eax,eax
c001a2bf:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a2c4:	0f 94 c0             	sete   al
c001a2c7:	50                   	push   eax
c001a2c8:	53                   	push   ebx
c001a2c9:	e8 fc fb ff ff       	call   c0019eca <ATA::flush(bool)>
c001a2ce:	83 c4 10             	add    esp,0x10
c001a2d1:	83 c4 2c             	add    esp,0x2c
c001a2d4:	89 f8                	mov    eax,edi
c001a2d6:	5b                   	pop    ebx
c001a2d7:	5e                   	pop    esi
c001a2d8:	5f                   	pop    edi
c001a2d9:	5d                   	pop    ebp
c001a2da:	c3                   	ret    
c001a2db:	90                   	nop

c001a2dc <ATA::read(unsigned long long, int, void*)>:
c001a2dc:	57                   	push   edi
c001a2dd:	b8 04 00 00 00       	mov    eax,0x4
c001a2e2:	56                   	push   esi
c001a2e3:	53                   	push   ebx
c001a2e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2ec:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2f7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2fd:	77 25                	ja     c001a324 <ATA::read(unsigned long long, int, void*)+0x48>
c001a2ff:	b8 06 00 00 00       	mov    eax,0x6
c001a304:	85 f6                	test   esi,esi
c001a306:	74 1c                	je     c001a324 <ATA::read(unsigned long long, int, void*)+0x48>
c001a308:	50                   	push   eax
c001a309:	50                   	push   eax
c001a30a:	6a 00                	push   0x0
c001a30c:	56                   	push   esi
c001a30d:	52                   	push   edx
c001a30e:	53                   	push   ebx
c001a30f:	51                   	push   ecx
c001a310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a314:	e8 47 fc ff ff       	call   c0019f60 <ATA::access(unsigned long long, int, void*, bool)>
c001a319:	83 c4 20             	add    esp,0x20
c001a31c:	85 c0                	test   eax,eax
c001a31e:	0f 95 c0             	setne  al
c001a321:	0f b6 c0             	movzx  eax,al
c001a324:	5b                   	pop    ebx
c001a325:	5e                   	pop    esi
c001a326:	5f                   	pop    edi
c001a327:	c3                   	ret    

c001a328 <ATA::write(unsigned long long, int, void*)>:
c001a328:	57                   	push   edi
c001a329:	b8 04 00 00 00       	mov    eax,0x4
c001a32e:	56                   	push   esi
c001a32f:	53                   	push   ebx
c001a330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a338:	8d 7a ff             	lea    edi,[edx-0x1]
c001a33b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a33f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a343:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a349:	77 25                	ja     c001a370 <ATA::write(unsigned long long, int, void*)+0x48>
c001a34b:	b8 06 00 00 00       	mov    eax,0x6
c001a350:	85 f6                	test   esi,esi
c001a352:	74 1c                	je     c001a370 <ATA::write(unsigned long long, int, void*)+0x48>
c001a354:	50                   	push   eax
c001a355:	50                   	push   eax
c001a356:	6a 01                	push   0x1
c001a358:	56                   	push   esi
c001a359:	52                   	push   edx
c001a35a:	53                   	push   ebx
c001a35b:	51                   	push   ecx
c001a35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a360:	e8 fb fb ff ff       	call   c0019f60 <ATA::access(unsigned long long, int, void*, bool)>
c001a365:	83 c4 20             	add    esp,0x20
c001a368:	85 c0                	test   eax,eax
c001a36a:	0f 95 c0             	setne  al
c001a36d:	0f b6 c0             	movzx  eax,al
c001a370:	5b                   	pop    ebx
c001a371:	5e                   	pop    esi
c001a372:	5f                   	pop    edi
c001a373:	c3                   	ret    

c001a374 <ATA::detectCHS()>:
c001a374:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a378:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a37e:	c1 e0 06             	shl    eax,0x6
c001a381:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a387:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a391:	c7 44 24 04 24 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f524
c001a399:	e9 85 5d ff ff       	jmp    c0010123 <KePanic(char const*)>

c001a39e <ATA::open(int, int, void*)>:
c001a39e:	53                   	push   ebx
c001a39f:	83 ec 08             	sub    esp,0x8
c001a3a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3ae:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3ba:	c1 e0 06             	shl    eax,0x6
c001a3bd:	01 d0                	add    eax,edx
c001a3bf:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a3c6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a3cc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a3d3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3dd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3e3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3ea:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a3f1:	75 0c                	jne    c001a3ff <ATA::open(int, int, void*)+0x61>
c001a3f3:	83 ec 0c             	sub    esp,0xc
c001a3f6:	53                   	push   ebx
c001a3f7:	e8 78 ff ff ff       	call   c001a374 <ATA::detectCHS()>
c001a3fc:	83 c4 10             	add    esp,0x10
c001a3ff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a405:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a40b:	c1 e0 06             	shl    eax,0x6
c001a40e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a415:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a41f:	d1 e8                	shr    eax,1
c001a421:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a427:	6a 04                	push   0x4
c001a429:	6a 0c                	push   0xc
c001a42b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a432:	50                   	push   eax
c001a433:	52                   	push   edx
c001a434:	e8 17 ec ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a439:	90                   	nop
c001a43a:	90                   	nop
c001a43b:	6a 00                	push   0x0
c001a43d:	6a 0c                	push   0xc
c001a43f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a446:	50                   	push   eax
c001a447:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a44d:	e8 fe eb ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a452:	83 c4 14             	add    esp,0x14
c001a455:	53                   	push   ebx
c001a456:	e8 f3 18 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a45b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a45e:	e8 6b 29 ff ff       	call   c000cdce <createPartitionsForDisk(PhysicalDisk*)>
c001a463:	31 c0                	xor    eax,eax
c001a465:	83 c4 18             	add    esp,0x18
c001a468:	5b                   	pop    ebx
c001a469:	c3                   	ret    

c001a46a <ATAPI::write(unsigned long long, int, void*)>:
c001a46a:	b8 03 00 00 00       	mov    eax,0x3
c001a46f:	c3                   	ret    

c001a470 <ATAPI::close(int, int, void*)>:
c001a470:	83 ec 0c             	sub    esp,0xc
c001a473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a477:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a47d:	85 c0                	test   eax,eax
c001a47f:	74 0c                	je     c001a48d <ATAPI::close(int, int, void*)+0x1d>
c001a481:	83 ec 0c             	sub    esp,0xc
c001a484:	8b 10                	mov    edx,DWORD PTR [eax]
c001a486:	50                   	push   eax
c001a487:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	31 c0                	xor    eax,eax
c001a48f:	83 c4 0c             	add    esp,0xc
c001a492:	c3                   	ret    
c001a493:	90                   	nop

c001a494 <ATAPI::ATAPI()>:
c001a494:	83 ec 0c             	sub    esp,0xc
c001a497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a49b:	83 ec 04             	sub    esp,0x4
c001a49e:	68 00 08 00 00       	push   0x800
c001a4a3:	68 6d f6 01 c0       	push   0xc001f66d
c001a4a8:	50                   	push   eax
c001a4a9:	e8 38 18 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4ae:	83 c4 10             	add    esp,0x10
c001a4b1:	ba 88 f5 01 c0       	mov    edx,0xc001f588
c001a4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ba:	89 10                	mov    DWORD PTR [eax],edx
c001a4bc:	90                   	nop
c001a4bd:	83 c4 0c             	add    esp,0xc
c001a4c0:	c3                   	ret    
c001a4c1:	90                   	nop

c001a4c2 <ATAPI::readyForCommand()>:
c001a4c2:	56                   	push   esi
c001a4c3:	53                   	push   ebx
c001a4c4:	53                   	push   ebx
c001a4c5:	31 db                	xor    ebx,ebx
c001a4c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4cb:	51                   	push   ecx
c001a4cc:	6a 0c                	push   0xc
c001a4ce:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a4d5:	50                   	push   eax
c001a4d6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a4dc:	e8 2f ec ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001a4e1:	83 c4 10             	add    esp,0x10
c001a4e4:	a8 88                	test   al,0x88
c001a4e6:	74 25                	je     c001a50d <ATAPI::readyForCommand()+0x4b>
c001a4e8:	43                   	inc    ebx
c001a4e9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a4ef:	7e da                	jle    c001a4cb <ATAPI::readyForCommand()+0x9>
c001a4f1:	83 ec 0c             	sub    esp,0xc
c001a4f4:	68 5e 01 00 00       	push   0x15e
c001a4f9:	e8 26 96 ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c001a4fe:	83 c4 10             	add    esp,0x10
c001a501:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a507:	75 c2                	jne    c001a4cb <ATAPI::readyForCommand()+0x9>
c001a509:	31 c0                	xor    eax,eax
c001a50b:	eb 02                	jmp    c001a50f <ATAPI::readyForCommand()+0x4d>
c001a50d:	b0 01                	mov    al,0x1
c001a50f:	5a                   	pop    edx
c001a510:	5b                   	pop    ebx
c001a511:	5e                   	pop    esi
c001a512:	c3                   	ret    
c001a513:	90                   	nop

c001a514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a514:	55                   	push   ebp
c001a515:	57                   	push   edi
c001a516:	56                   	push   esi
c001a517:	53                   	push   ebx
c001a518:	83 ec 20             	sub    esp,0x20
c001a51b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a51f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a523:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a527:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a52b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a52f:	6a 01                	push   0x1
c001a531:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a538:	50                   	push   eax
c001a539:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a53f:	e8 1a ed ff ff       	call   c001925e <IDE::enableIRQs(unsigned char, bool)>
c001a544:	5e                   	pop    esi
c001a545:	58                   	pop    eax
c001a546:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a54d:	50                   	push   eax
c001a54e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a554:	e8 d1 ea ff ff       	call   c001902a <IDE::prepareInterrupt(unsigned char)>
c001a559:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a55c:	e8 61 ff ff ff       	call   c001a4c2 <ATAPI::readyForCommand()>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	84 c0                	test   al,al
c001a566:	75 0a                	jne    c001a572 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a568:	bb 01 00 00 00       	mov    ebx,0x1
c001a56d:	e9 57 02 00 00       	jmp    c001a7c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a572:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a578:	c1 e0 04             	shl    eax,0x4
c001a57b:	0f b6 c0             	movzx  eax,al
c001a57e:	50                   	push   eax
c001a57f:	6a 06                	push   0x6
c001a581:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a588:	50                   	push   eax
c001a589:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a58f:	e8 bc ea ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a594:	6a 00                	push   0x0
c001a596:	6a 01                	push   0x1
c001a598:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a59f:	50                   	push   eax
c001a5a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5a6:	e8 a5 ea ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5ab:	83 c4 20             	add    esp,0x20
c001a5ae:	0f b6 c3             	movzx  eax,bl
c001a5b1:	0f b6 df             	movzx  ebx,bh
c001a5b4:	50                   	push   eax
c001a5b5:	6a 04                	push   0x4
c001a5b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5be:	50                   	push   eax
c001a5bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5c5:	e8 86 ea ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5ca:	53                   	push   ebx
c001a5cb:	6a 05                	push   0x5
c001a5cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d4:	50                   	push   eax
c001a5d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5db:	e8 70 ea ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5e0:	83 c4 20             	add    esp,0x20
c001a5e3:	68 a0 00 00 00       	push   0xa0
c001a5e8:	6a 07                	push   0x7
c001a5ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f1:	50                   	push   eax
c001a5f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5f8:	e8 53 ea ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5fd:	83 c4 0c             	add    esp,0xc
c001a600:	6a 01                	push   0x1
c001a602:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a609:	50                   	push   eax
c001a60a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a610:	e8 d9 f4 ff ff       	call   c0019aee <IDE::polling(unsigned char, unsigned int)>
c001a615:	83 c4 10             	add    esp,0x10
c001a618:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a61e:	84 c0                	test   al,al
c001a620:	74 23                	je     c001a645 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a622:	0f b6 d8             	movzx  ebx,al
c001a625:	0f b6 d2             	movzx  edx,dl
c001a628:	53                   	push   ebx
c001a629:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a630:	50                   	push   eax
c001a631:	52                   	push   edx
c001a632:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a638:	e8 01 f4 ff ff       	call   c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a63d:	83 c4 10             	add    esp,0x10
c001a640:	e9 84 01 00 00       	jmp    c001a7c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a645:	0f b6 d2             	movzx  edx,dl
c001a648:	53                   	push   ebx
c001a649:	53                   	push   ebx
c001a64a:	52                   	push   edx
c001a64b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a651:	e8 e8 e9 ff ff       	call   c001903e <IDE::getBase(unsigned char)>
c001a656:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a65a:	b9 06 00 00 00       	mov    ecx,0x6
c001a65f:	89 c2                	mov    edx,eax
c001a661:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a664:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a668:	83 c4 10             	add    esp,0x10
c001a66b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a671:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a678:	85 db                	test   ebx,ebx
c001a67a:	0f 84 ec 00 00 00    	je     c001a76c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a680:	51                   	push   ecx
c001a681:	51                   	push   ecx
c001a682:	52                   	push   edx
c001a683:	50                   	push   eax
c001a684:	e8 35 eb ff ff       	call   c00191be <IDE::waitInterrupt(unsigned char)>
c001a689:	83 c4 10             	add    esp,0x10
c001a68c:	84 c0                	test   al,al
c001a68e:	0f 84 d4 fe ff ff    	je     c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a694:	56                   	push   esi
c001a695:	56                   	push   esi
c001a696:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a69d:	50                   	push   eax
c001a69e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a4:	e8 81 e9 ff ff       	call   c001902a <IDE::prepareInterrupt(unsigned char)>
c001a6a9:	83 c4 0c             	add    esp,0xc
c001a6ac:	6a 04                	push   0x4
c001a6ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6b5:	50                   	push   eax
c001a6b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6bc:	e8 4f ea ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001a6c1:	83 c4 0c             	add    esp,0xc
c001a6c4:	89 c6                	mov    esi,eax
c001a6c6:	6a 05                	push   0x5
c001a6c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6cf:	50                   	push   eax
c001a6d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d6:	e8 35 ea ff ff       	call   c0019110 <IDE::read(unsigned char, unsigned char)>
c001a6db:	89 f1                	mov    ecx,esi
c001a6dd:	0f b6 c0             	movzx  eax,al
c001a6e0:	0f b6 f1             	movzx  esi,cl
c001a6e3:	c1 e0 08             	shl    eax,0x8
c001a6e6:	09 c6                	or     esi,eax
c001a6e8:	d1 fe                	sar    esi,1
c001a6ea:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a6f6:	74 41                	je     c001a739 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a6f8:	31 c9                	xor    ecx,ecx
c001a6fa:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a700:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a707:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a70b:	75 0a                	jne    c001a717 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a70d:	01 c9                	add    ecx,ecx
c001a70f:	01 cd                	add    ebp,ecx
c001a711:	4b                   	dec    ebx
c001a712:	e9 54 ff ff ff       	jmp    c001a66b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a717:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a71c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a720:	51                   	push   ecx
c001a721:	51                   	push   ecx
c001a722:	52                   	push   edx
c001a723:	50                   	push   eax
c001a724:	e8 15 e9 ff ff       	call   c001903e <IDE::getBase(unsigned char)>
c001a729:	89 c2                	mov    edx,eax
c001a72b:	89 f0                	mov    eax,esi
c001a72d:	66 ef                	out    dx,ax
c001a72f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a733:	83 c4 10             	add    esp,0x10
c001a736:	41                   	inc    ecx
c001a737:	eb c1                	jmp    c001a6fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a739:	31 f6                	xor    esi,esi
c001a73b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a741:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a748:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a74c:	75 06                	jne    c001a754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a74e:	01 f6                	add    esi,esi
c001a750:	01 f5                	add    ebp,esi
c001a752:	eb bd                	jmp    c001a711 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a754:	51                   	push   ecx
c001a755:	51                   	push   ecx
c001a756:	52                   	push   edx
c001a757:	50                   	push   eax
c001a758:	e8 e1 e8 ff ff       	call   c001903e <IDE::getBase(unsigned char)>
c001a75d:	89 c2                	mov    edx,eax
c001a75f:	66 ed                	in     ax,dx
c001a761:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	46                   	inc    esi
c001a76a:	eb cf                	jmp    c001a73b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a76c:	51                   	push   ecx
c001a76d:	51                   	push   ecx
c001a76e:	52                   	push   edx
c001a76f:	50                   	push   eax
c001a770:	e8 49 ea ff ff       	call   c00191be <IDE::waitInterrupt(unsigned char)>
c001a775:	83 c4 10             	add    esp,0x10
c001a778:	84 c0                	test   al,al
c001a77a:	0f 84 e8 fd ff ff    	je     c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a780:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a785:	52                   	push   edx
c001a786:	52                   	push   edx
c001a787:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a78e:	50                   	push   eax
c001a78f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a795:	e8 90 e8 ff ff       	call   c001902a <IDE::prepareInterrupt(unsigned char)>
c001a79a:	83 c4 10             	add    esp,0x10
c001a79d:	50                   	push   eax
c001a79e:	50                   	push   eax
c001a79f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7a6:	50                   	push   eax
c001a7a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7ad:	e8 8c e8 ff ff       	call   c001903e <IDE::getBase(unsigned char)>
c001a7b2:	8d 50 07             	lea    edx,[eax+0x7]
c001a7b5:	ec                   	in     al,dx
c001a7b6:	83 c4 10             	add    esp,0x10
c001a7b9:	a8 88                	test   al,0x88
c001a7bb:	74 0a                	je     c001a7c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a7bd:	4b                   	dec    ebx
c001a7be:	75 dd                	jne    c001a79d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a7c0:	bb 02 00 00 00       	mov    ebx,0x2
c001a7c5:	eb 02                	jmp    c001a7c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a7c7:	31 db                	xor    ebx,ebx
c001a7c9:	83 c4 1c             	add    esp,0x1c
c001a7cc:	89 d8                	mov    eax,ebx
c001a7ce:	5b                   	pop    ebx
c001a7cf:	5e                   	pop    esi
c001a7d0:	5f                   	pop    edi
c001a7d1:	5d                   	pop    ebp
c001a7d2:	c3                   	ret    
c001a7d3:	90                   	nop

c001a7d4 <ATAPI::diskRemoved()>:
c001a7d4:	53                   	push   ebx
c001a7d5:	83 ec 14             	sub    esp,0x14
c001a7d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7dc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a7e3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a7e9:	e8 5e 23 ff ff       	call   c000cb4c <LogicalDisk::unmount()>
c001a7ee:	58                   	pop    eax
c001a7ef:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a7f5:	e8 9a 2c ff ff       	call   c000d494 <VCache::writeWriteBuffer()>
c001a7fa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a800:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a804:	83 c4 18             	add    esp,0x18
c001a807:	5b                   	pop    ebx
c001a808:	e9 77 2c ff ff       	jmp    c000d484 <VCache::invalidateReadBuffer()>
c001a80d:	90                   	nop

c001a80e <ATAPI::eject()>:
c001a80e:	57                   	push   edi
c001a80f:	b9 03 00 00 00       	mov    ecx,0x3
c001a814:	53                   	push   ebx
c001a815:	83 ec 14             	sub    esp,0x14
c001a818:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a81c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a820:	fc                   	cld    
c001a821:	31 c0                	xor    eax,eax
c001a823:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a825:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a82a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a82f:	50                   	push   eax
c001a830:	50                   	push   eax
c001a831:	6a 00                	push   0x0
c001a833:	6a 00                	push   0x0
c001a835:	6a 00                	push   0x0
c001a837:	6a 02                	push   0x2
c001a839:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a83d:	50                   	push   eax
c001a83e:	53                   	push   ebx
c001a83f:	e8 d0 fc ff ff       	call   c001a514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a844:	83 c4 14             	add    esp,0x14
c001a847:	53                   	push   ebx
c001a848:	e8 87 ff ff ff       	call   c001a7d4 <ATAPI::diskRemoved()>
c001a84d:	83 c4 24             	add    esp,0x24
c001a850:	31 c0                	xor    eax,eax
c001a852:	5b                   	pop    ebx
c001a853:	5f                   	pop    edi
c001a854:	c3                   	ret    
c001a855:	90                   	nop

c001a856 <ATAPI::diskInserted()>:
c001a856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a85a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a861:	c3                   	ret    

c001a862 <ATAPI::detectMedia()>:
c001a862:	56                   	push   esi
c001a863:	53                   	push   ebx
c001a864:	83 ec 28             	sub    esp,0x28
c001a867:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a86b:	6a 0c                	push   0xc
c001a86d:	6a 00                	push   0x0
c001a86f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a873:	56                   	push   esi
c001a874:	e8 57 5c fe ff       	call   c00004d0 <memset>
c001a879:	58                   	pop    eax
c001a87a:	5a                   	pop    edx
c001a87b:	6a 00                	push   0x0
c001a87d:	6a 00                	push   0x0
c001a87f:	6a 00                	push   0x0
c001a881:	6a 00                	push   0x0
c001a883:	56                   	push   esi
c001a884:	53                   	push   ebx
c001a885:	e8 8a fc ff ff       	call   c001a514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a88a:	83 c4 1c             	add    esp,0x1c
c001a88d:	6a 0c                	push   0xc
c001a88f:	6a 00                	push   0x0
c001a891:	56                   	push   esi
c001a892:	e8 39 5c fe ff       	call   c00004d0 <memset>
c001a897:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a89c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8a1:	59                   	pop    ecx
c001a8a2:	58                   	pop    eax
c001a8a3:	6a 01                	push   0x1
c001a8a5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8a9:	50                   	push   eax
c001a8aa:	6a 00                	push   0x0
c001a8ac:	6a 12                	push   0x12
c001a8ae:	56                   	push   esi
c001a8af:	53                   	push   ebx
c001a8b0:	e8 5f fc ff ff       	call   c001a514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8b5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a8b9:	83 c4 20             	add    esp,0x20
c001a8bc:	83 e0 7f             	and    eax,0x7f
c001a8bf:	3c 70                	cmp    al,0x70
c001a8c1:	74 15                	je     c001a8d8 <ATAPI::detectMedia()+0x76>
c001a8c3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8ca:	75 0c                	jne    c001a8d8 <ATAPI::detectMedia()+0x76>
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	53                   	push   ebx
c001a8d0:	e8 81 ff ff ff       	call   c001a856 <ATAPI::diskInserted()>
c001a8d5:	83 c4 10             	add    esp,0x10
c001a8d8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8dc:	83 e0 0f             	and    eax,0xf
c001a8df:	3c 02                	cmp    al,0x2
c001a8e1:	75 1b                	jne    c001a8fe <ATAPI::detectMedia()+0x9c>
c001a8e3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a8e8:	75 2d                	jne    c001a917 <ATAPI::detectMedia()+0xb5>
c001a8ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8f1:	74 24                	je     c001a917 <ATAPI::detectMedia()+0xb5>
c001a8f3:	83 ec 0c             	sub    esp,0xc
c001a8f6:	53                   	push   ebx
c001a8f7:	e8 d8 fe ff ff       	call   c001a7d4 <ATAPI::diskRemoved()>
c001a8fc:	eb 16                	jmp    c001a914 <ATAPI::detectMedia()+0xb2>
c001a8fe:	84 c0                	test   al,al
c001a900:	75 15                	jne    c001a917 <ATAPI::detectMedia()+0xb5>
c001a902:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a909:	75 0c                	jne    c001a917 <ATAPI::detectMedia()+0xb5>
c001a90b:	83 ec 0c             	sub    esp,0xc
c001a90e:	53                   	push   ebx
c001a90f:	e8 42 ff ff ff       	call   c001a856 <ATAPI::diskInserted()>
c001a914:	83 c4 10             	add    esp,0x10
c001a917:	83 c4 24             	add    esp,0x24
c001a91a:	5b                   	pop    ebx
c001a91b:	5e                   	pop    esi
c001a91c:	c3                   	ret    
c001a91d:	90                   	nop

c001a91e <ATAPI::open(int, int, void*)>:
c001a91e:	56                   	push   esi
c001a91f:	53                   	push   ebx
c001a920:	50                   	push   eax
c001a921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a925:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a929:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a92d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a933:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a939:	c1 e0 06             	shl    eax,0x6
c001a93c:	01 d0                	add    eax,edx
c001a93e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a945:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a94b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a952:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a95c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a962:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a969:	6a 04                	push   0x4
c001a96b:	6a 0c                	push   0xc
c001a96d:	51                   	push   ecx
c001a96e:	52                   	push   edx
c001a96f:	e8 dc e6 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a974:	90                   	nop
c001a975:	90                   	nop
c001a976:	6a 00                	push   0x0
c001a978:	6a 0c                	push   0xc
c001a97a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a981:	50                   	push   eax
c001a982:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a988:	e8 c3 e6 ff ff       	call   c0019050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a98d:	83 c4 14             	add    esp,0x14
c001a990:	68 74 01 00 00       	push   0x174
c001a995:	e8 1f ce fe ff       	call   c00077b9 <malloc>
c001a99a:	83 c4 0c             	add    esp,0xc
c001a99d:	89 c6                	mov    esi,eax
c001a99f:	6a 00                	push   0x0
c001a9a1:	68 ff ff ff 7f       	push   0x7fffffff
c001a9a6:	6a 00                	push   0x0
c001a9a8:	6a 00                	push   0x0
c001a9aa:	53                   	push   ebx
c001a9ab:	68 24 f7 01 c0       	push   0xc001f724
c001a9b0:	50                   	push   eax
c001a9b1:	e8 e2 1f ff ff       	call   c000c998 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9b6:	83 c4 14             	add    esp,0x14
c001a9b9:	56                   	push   esi
c001a9ba:	e8 8f 20 ff ff       	call   c000ca4e <LogicalDisk::assignDriveLetter()>
c001a9bf:	5a                   	pop    edx
c001a9c0:	0f be c0             	movsx  eax,al
c001a9c3:	59                   	pop    ecx
c001a9c4:	50                   	push   eax
c001a9c5:	68 70 f5 01 c0       	push   0xc001f570
c001a9ca:	e8 09 fb fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001a9cf:	58                   	pop    eax
c001a9d0:	5a                   	pop    edx
c001a9d1:	56                   	push   esi
c001a9d2:	53                   	push   ebx
c001a9d3:	e8 40 0f ff ff       	call   c000b918 <Device::addChild(Device*)>
c001a9d8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a9de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9e1:	e8 68 13 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a9e6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a9ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9f0:	e8 6d fe ff ff       	call   c001a862 <ATAPI::detectMedia()>
c001a9f5:	83 c4 14             	add    esp,0x14
c001a9f8:	31 c0                	xor    eax,eax
c001a9fa:	5b                   	pop    ebx
c001a9fb:	5e                   	pop    esi
c001a9fc:	c3                   	ret    
c001a9fd:	90                   	nop

c001a9fe <ATAPI::read(unsigned long long, int, void*)>:
c001a9fe:	55                   	push   ebp
c001a9ff:	57                   	push   edi
c001aa00:	56                   	push   esi
c001aa01:	53                   	push   ebx
c001aa02:	83 ec 1c             	sub    esp,0x1c
c001aa05:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa09:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa0d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa11:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa18:	74 3c                	je     c001aa56 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa1a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa1e:	b9 03 00 00 00       	mov    ecx,0x3
c001aa23:	fc                   	cld    
c001aa24:	31 c0                	xor    eax,eax
c001aa26:	0f ce                	bswap  esi
c001aa28:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa2a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa2f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa33:	89 e8                	mov    eax,ebp
c001aa35:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa39:	50                   	push   eax
c001aa3a:	50                   	push   eax
c001aa3b:	55                   	push   ebp
c001aa3c:	c1 e5 0b             	shl    ebp,0xb
c001aa3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa43:	6a 00                	push   0x0
c001aa45:	55                   	push   ebp
c001aa46:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa4a:	50                   	push   eax
c001aa4b:	53                   	push   ebx
c001aa4c:	e8 c3 fa ff ff       	call   c001a514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa51:	83 c4 20             	add    esp,0x20
c001aa54:	eb 1a                	jmp    c001aa70 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa56:	83 ec 0c             	sub    esp,0xc
c001aa59:	53                   	push   ebx
c001aa5a:	e8 03 fe ff ff       	call   c001a862 <ATAPI::detectMedia()>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa69:	75 af                	jne    c001aa1a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aa6b:	b8 02 00 00 00       	mov    eax,0x2
c001aa70:	83 c4 1c             	add    esp,0x1c
c001aa73:	5b                   	pop    ebx
c001aa74:	5e                   	pop    esi
c001aa75:	5f                   	pop    edi
c001aa76:	5d                   	pop    ebp
c001aa77:	c3                   	ret    

c001aa78 <SATA::close(int, int, void*)>:
c001aa78:	83 ec 0c             	sub    esp,0xc
c001aa7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa7f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa85:	85 c0                	test   eax,eax
c001aa87:	74 0c                	je     c001aa95 <SATA::close(int, int, void*)+0x1d>
c001aa89:	83 ec 0c             	sub    esp,0xc
c001aa8c:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa8e:	50                   	push   eax
c001aa8f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa92:	83 c4 10             	add    esp,0x10
c001aa95:	31 c0                	xor    eax,eax
c001aa97:	83 c4 0c             	add    esp,0xc
c001aa9a:	c3                   	ret    
c001aa9b:	90                   	nop

c001aa9c <SATA::powerSaving(PowerSavingLevel)>:
c001aa9c:	c3                   	ret    
c001aa9d:	90                   	nop

c001aa9e <SATA::open(int, int, void*)>:
c001aa9e:	56                   	push   esi
c001aa9f:	53                   	push   ebx
c001aaa0:	50                   	push   eax
c001aaa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaa9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aab3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aab9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aac7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aad1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aad7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aade:	e8 b2 cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aae3:	89 c6                	mov    esi,eax
c001aae5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aaeb:	81 c6 00 10 00 00    	add    esi,0x1000
c001aaf1:	e8 9f cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aaf6:	39 c6                	cmp    esi,eax
c001aaf8:	74 10                	je     c001ab0a <SATA::open(int, int, void*)+0x6c>
c001aafa:	83 ec 0c             	sub    esp,0xc
c001aafd:	68 b8 f5 01 c0       	push   0xc001f5b8
c001ab02:	e8 1c 56 ff ff       	call   c0010123 <KePanic(char const*)>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	83 ec 0c             	sub    esp,0xc
c001ab0d:	6a 02                	push   0x2
c001ab0f:	e8 71 e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001ab14:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab1a:	6a 03                	push   0x3
c001ab1c:	50                   	push   eax
c001ab1d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab23:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c001ab29:	e8 ec ed fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab2e:	83 c4 14             	add    esp,0x14
c001ab31:	53                   	push   ebx
c001ab32:	e8 17 12 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001ab37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab3a:	e8 8f 22 ff ff       	call   c000cdce <createPartitionsForDisk(PhysicalDisk*)>
c001ab3f:	83 c4 14             	add    esp,0x14
c001ab42:	31 c0                	xor    eax,eax
c001ab44:	5b                   	pop    ebx
c001ab45:	5e                   	pop    esi
c001ab46:	c3                   	ret    
c001ab47:	90                   	nop

c001ab48 <SATA::SATA()>:
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4f:	83 ec 04             	sub    esp,0x4
c001ab52:	68 00 02 00 00       	push   0x200
c001ab57:	68 cc f5 01 c0       	push   0xc001f5cc
c001ab5c:	50                   	push   eax
c001ab5d:	e8 84 11 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	ba 3c f6 01 c0       	mov    edx,0xc001f63c
c001ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6e:	89 10                	mov    DWORD PTR [eax],edx
c001ab70:	90                   	nop
c001ab71:	83 c4 0c             	add    esp,0xc
c001ab74:	c3                   	ret    
c001ab75:	90                   	nop

c001ab76 <SATA::access(unsigned long long, int, void*, bool)>:
c001ab76:	55                   	push   ebp
c001ab77:	57                   	push   edi
c001ab78:	56                   	push   esi
c001ab79:	53                   	push   ebx
c001ab7a:	83 ec 2c             	sub    esp,0x2c
c001ab7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab81:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab89:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab8d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab91:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab9a:	7e 10                	jle    c001abac <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	68 dc f5 01 c0       	push   0xc001f5dc
c001aba4:	e8 7a 55 ff ff       	call   c0010123 <KePanic(char const*)>
c001aba9:	83 c4 10             	add    esp,0x10
c001abac:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001abb2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001abb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abc2:	89 d0                	mov    eax,edx
c001abc4:	c1 e0 07             	shl    eax,0x7
c001abc7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abcb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001abd5:	51                   	push   ecx
c001abd6:	8d 42 02             	lea    eax,[edx+0x2]
c001abd9:	51                   	push   ecx
c001abda:	c1 e0 07             	shl    eax,0x7
c001abdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abe1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001abe5:	50                   	push   eax
c001abe6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001abec:	e8 e7 ef ff ff       	call   c0019bd8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001abf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001abfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac01:	0f 84 4f 01 00 00    	je     c001ad56 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac0b:	c1 e0 09             	shl    eax,0x9
c001ac0e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac17:	74 0e                	je     c001ac27 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac19:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac1f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac23:	89 c1                	mov    ecx,eax
c001ac25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac27:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac2b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac31:	8d 42 02             	lea    eax,[edx+0x2]
c001ac34:	c1 e0 07             	shl    eax,0x7
c001ac37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac3d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac43:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac4d:	c1 e1 05             	shl    ecx,0x5
c001ac50:	01 c8                	add    eax,ecx
c001ac52:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac56:	83 e1 01             	and    ecx,0x1
c001ac59:	89 ce                	mov    esi,ecx
c001ac5b:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac5d:	c1 e6 06             	shl    esi,0x6
c001ac60:	83 e1 bf             	and    ecx,0xffffffbf
c001ac63:	09 f1                	or     ecx,esi
c001ac65:	88 08                	mov    BYTE PTR [eax],cl
c001ac67:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac69:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ac6f:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ac75:	89 08                	mov    DWORD PTR [eax],ecx
c001ac77:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac7d:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac83:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac89:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac8c:	50                   	push   eax
c001ac8d:	68 90 00 00 00       	push   0x90
c001ac92:	6a 00                	push   0x0
c001ac94:	56                   	push   esi
c001ac95:	e8 36 58 fe ff       	call   c00004d0 <memset>
c001ac9a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001aca0:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001aca4:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001acaa:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001acae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acb2:	83 c4 10             	add    esp,0x10
c001acb5:	48                   	dec    eax
c001acb6:	25 ff ff 3f 00       	and    eax,0x3fffff
c001acbb:	89 c1                	mov    ecx,eax
c001acbd:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001acc3:	25 00 00 c0 ff       	and    eax,0xffc00000
c001acc8:	09 c8                	or     eax,ecx
c001acca:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001acd0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001acd3:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001acda:	66 25 00 7f          	and    ax,0x7f00
c001acde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ace2:	66 0d 27 80          	or     ax,0x8027
c001ace6:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001aceb:	66 89 06             	mov    WORD PTR [esi],ax
c001acee:	19 c0                	sbb    eax,eax
c001acf0:	83 e0 f0             	and    eax,0xfffffff0
c001acf3:	83 c0 35             	add    eax,0x35
c001acf6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001acf9:	89 e8                	mov    eax,ebp
c001acfb:	c1 e8 10             	shr    eax,0x10
c001acfe:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad01:	89 e8                	mov    eax,ebp
c001ad03:	c1 e8 18             	shr    eax,0x18
c001ad06:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad09:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad0d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad14:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad17:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad1b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad1f:	89 d6                	mov    esi,edx
c001ad21:	31 c0                	xor    eax,eax
c001ad23:	c1 e6 07             	shl    esi,0x7
c001ad26:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad2a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad30:	80 e1 88             	and    cl,0x88
c001ad33:	74 0a                	je     c001ad3f <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad35:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad3a:	74 0a                	je     c001ad46 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad3c:	40                   	inc    eax
c001ad3d:	eb eb                	jmp    c001ad2a <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad3f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad44:	75 17                	jne    c001ad5d <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad46:	83 ec 0c             	sub    esp,0xc
c001ad49:	68 15 f6 01 c0       	push   0xc001f615
c001ad4e:	e8 85 f7 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	b8 01 00 00 00       	mov    eax,0x1
c001ad5b:	eb 5d                	jmp    c001adba <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad5d:	b8 01 00 00 00       	mov    eax,0x1
c001ad62:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad66:	c1 e2 07             	shl    edx,0x7
c001ad69:	d3 e0                	shl    eax,cl
c001ad6b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ad6f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ad75:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ad7b:	85 c8                	test   eax,ecx
c001ad7d:	74 16                	je     c001ad95 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad7f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad85:	0f ba e1 1e          	bt     ecx,0x1e
c001ad89:	73 ea                	jae    c001ad75 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad8b:	83 ec 0c             	sub    esp,0xc
c001ad8e:	68 23 f6 01 c0       	push   0xc001f623
c001ad93:	eb b9                	jmp    c001ad4e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad95:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad9b:	0f ba e0 1e          	bt     eax,0x1e
c001ad9f:	72 b5                	jb     c001ad56 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ada1:	31 c0                	xor    eax,eax
c001ada3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ada8:	75 10                	jne    c001adba <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adaa:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001adb0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001adb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adba:	83 c4 2c             	add    esp,0x2c
c001adbd:	5b                   	pop    ebx
c001adbe:	5e                   	pop    esi
c001adbf:	5f                   	pop    edi
c001adc0:	5d                   	pop    ebp
c001adc1:	c3                   	ret    

c001adc2 <SATA::read(unsigned long long, int, void*)>:
c001adc2:	57                   	push   edi
c001adc3:	b8 04 00 00 00       	mov    eax,0x4
c001adc8:	56                   	push   esi
c001adc9:	53                   	push   ebx
c001adca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001add2:	8d 7a ff             	lea    edi,[edx-0x1]
c001add5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001add9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001addd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ade3:	77 25                	ja     c001ae0a <SATA::read(unsigned long long, int, void*)+0x48>
c001ade5:	b8 06 00 00 00       	mov    eax,0x6
c001adea:	85 f6                	test   esi,esi
c001adec:	74 1c                	je     c001ae0a <SATA::read(unsigned long long, int, void*)+0x48>
c001adee:	50                   	push   eax
c001adef:	50                   	push   eax
c001adf0:	6a 00                	push   0x0
c001adf2:	56                   	push   esi
c001adf3:	52                   	push   edx
c001adf4:	53                   	push   ebx
c001adf5:	51                   	push   ecx
c001adf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adfa:	e8 77 fd ff ff       	call   c001ab76 <SATA::access(unsigned long long, int, void*, bool)>
c001adff:	83 c4 20             	add    esp,0x20
c001ae02:	85 c0                	test   eax,eax
c001ae04:	0f 95 c0             	setne  al
c001ae07:	0f b6 c0             	movzx  eax,al
c001ae0a:	5b                   	pop    ebx
c001ae0b:	5e                   	pop    esi
c001ae0c:	5f                   	pop    edi
c001ae0d:	c3                   	ret    

c001ae0e <SATA::write(unsigned long long, int, void*)>:
c001ae0e:	55                   	push   ebp
c001ae0f:	b8 04 00 00 00       	mov    eax,0x4
c001ae14:	57                   	push   edi
c001ae15:	56                   	push   esi
c001ae16:	53                   	push   ebx
c001ae17:	83 ec 0c             	sub    esp,0xc
c001ae1a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae22:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae2d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae33:	77 3d                	ja     c001ae72 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae35:	b8 06 00 00 00       	mov    eax,0x6
c001ae3a:	85 ed                	test   ebp,ebp
c001ae3c:	74 34                	je     c001ae72 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae3e:	c1 e3 09             	shl    ebx,0x9
c001ae41:	01 eb                	add    ebx,ebp
c001ae43:	89 d6                	mov    esi,edx
c001ae45:	89 cf                	mov    edi,ecx
c001ae47:	83 c6 01             	add    esi,0x1
c001ae4a:	83 d7 00             	adc    edi,0x0
c001ae4d:	50                   	push   eax
c001ae4e:	50                   	push   eax
c001ae4f:	6a 01                	push   0x1
c001ae51:	55                   	push   ebp
c001ae52:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae58:	6a 01                	push   0x1
c001ae5a:	51                   	push   ecx
c001ae5b:	52                   	push   edx
c001ae5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae60:	e8 11 fd ff ff       	call   c001ab76 <SATA::access(unsigned long long, int, void*, bool)>
c001ae65:	83 c4 20             	add    esp,0x20
c001ae68:	89 f2                	mov    edx,esi
c001ae6a:	89 f9                	mov    ecx,edi
c001ae6c:	39 dd                	cmp    ebp,ebx
c001ae6e:	75 d3                	jne    c001ae43 <SATA::write(unsigned long long, int, void*)+0x35>
c001ae70:	31 c0                	xor    eax,eax
c001ae72:	83 c4 0c             	add    esp,0xc
c001ae75:	5b                   	pop    ebx
c001ae76:	5e                   	pop    esi
c001ae77:	5f                   	pop    edi
c001ae78:	5d                   	pop    ebp
c001ae79:	c3                   	ret    

c001ae7a <SATAPI::write(unsigned long long, int, void*)>:
c001ae7a:	b8 03 00 00 00       	mov    eax,0x3
c001ae7f:	c3                   	ret    

c001ae80 <SATAPI::close(int, int, void*)>:
c001ae80:	83 ec 0c             	sub    esp,0xc
c001ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae8d:	85 c0                	test   eax,eax
c001ae8f:	74 0c                	je     c001ae9d <SATAPI::close(int, int, void*)+0x1d>
c001ae91:	83 ec 0c             	sub    esp,0xc
c001ae94:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae96:	50                   	push   eax
c001ae97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae9a:	83 c4 10             	add    esp,0x10
c001ae9d:	31 c0                	xor    eax,eax
c001ae9f:	83 c4 0c             	add    esp,0xc
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop

c001aea4 <SATAPI::SATAPI()>:
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeab:	83 ec 04             	sub    esp,0x4
c001aeae:	68 00 08 00 00       	push   0x800
c001aeb3:	68 6c f6 01 c0       	push   0xc001f66c
c001aeb8:	50                   	push   eax
c001aeb9:	e8 28 0e ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aebe:	83 c4 10             	add    esp,0x10
c001aec1:	ba 74 f7 01 c0       	mov    edx,0xc001f774
c001aec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeca:	89 10                	mov    DWORD PTR [eax],edx
c001aecc:	90                   	nop
c001aecd:	83 c4 0c             	add    esp,0xc
c001aed0:	c3                   	ret    
c001aed1:	90                   	nop

c001aed2 <SATAPI::diskRemoved()>:
c001aed2:	c3                   	ret    
c001aed3:	90                   	nop

c001aed4 <SATAPI::diskInserted()>:
c001aed4:	83 ec 18             	sub    esp,0x18
c001aed7:	68 78 f6 01 c0       	push   0xc001f678
c001aedc:	e8 f7 f5 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001aee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aee5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aeec:	83 c4 1c             	add    esp,0x1c
c001aeef:	c3                   	ret    

c001aef0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aef0:	55                   	push   ebp
c001aef1:	57                   	push   edi
c001aef2:	56                   	push   esi
c001aef3:	53                   	push   ebx
c001aef4:	83 ec 38             	sub    esp,0x38
c001aef7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aefb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aeff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af0b:	68 90 f6 01 c0       	push   0xc001f690
c001af10:	e8 c3 f5 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001af15:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af25:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af2f:	83 c0 02             	add    eax,0x2
c001af32:	c1 e0 07             	shl    eax,0x7
c001af35:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af41:	c1 e0 07             	shl    eax,0x7
c001af44:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af4c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af56:	58                   	pop    eax
c001af57:	5a                   	pop    edx
c001af58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001af5c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af62:	e8 71 ec ff ff       	call   c0019bd8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af67:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af6b:	83 c4 10             	add    esp,0x10
c001af6e:	b8 01 00 00 00       	mov    eax,0x1
c001af73:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af78:	0f 84 49 02 00 00    	je     c001b1c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001af7e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af88:	8b 00                	mov    eax,DWORD PTR [eax]
c001af8a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af90:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af9a:	c1 e1 05             	shl    ecx,0x5
c001af9d:	01 c8                	add    eax,ecx
c001af9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afa1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001afa7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001afad:	89 08                	mov    DWORD PTR [eax],ecx
c001afaf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afb5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001afbb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001afc1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001afc4:	8d 7b 40             	lea    edi,[ebx+0x40]
c001afc7:	50                   	push   eax
c001afc8:	68 90 00 00 00       	push   0x90
c001afcd:	6a 00                	push   0x0
c001afcf:	53                   	push   ebx
c001afd0:	e8 fb 54 fe ff       	call   c00004d0 <memset>
c001afd5:	b9 0c 00 00 00       	mov    ecx,0xc
c001afda:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001afde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afe0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001afe6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001afea:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001aff0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001aff4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aff8:	48                   	dec    eax
c001aff9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001affe:	89 c1                	mov    ecx,eax
c001b000:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b006:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b00b:	09 c8                	or     eax,ecx
c001b00d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b013:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b016:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b01d:	66 25 00 7f          	and    ax,0x7f00
c001b021:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b025:	66 0d 27 80          	or     ax,0x8027
c001b029:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b02d:	66 89 03             	mov    WORD PTR [ebx],ax
c001b030:	89 d0                	mov    eax,edx
c001b032:	c1 ea 18             	shr    edx,0x18
c001b035:	c1 e8 10             	shr    eax,0x10
c001b038:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b03b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b03e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b042:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b049:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b04c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b057:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b05b:	31 c0                	xor    eax,eax
c001b05d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b063:	80 e1 88             	and    cl,0x88
c001b066:	74 0a                	je     c001b072 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b068:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b06d:	74 0a                	je     c001b079 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b06f:	40                   	inc    eax
c001b070:	eb eb                	jmp    c001b05d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b072:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b077:	75 43                	jne    c001b0bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b079:	83 ec 0c             	sub    esp,0xc
c001b07c:	68 aa f6 01 c0       	push   0xc001f6aa
c001b081:	e8 52 f4 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b086:	58                   	pop    eax
c001b087:	5a                   	pop    edx
c001b088:	68 bf f6 01 c0       	push   0xc001f6bf
c001b08d:	ff 35 84 0c 02 c0    	push   DWORD PTR ds:0xc0020c84
c001b093:	e8 9e d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b098:	59                   	pop    ecx
c001b099:	5b                   	pop    ebx
c001b09a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b09e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b0a4:	e8 c9 eb ff ff       	call   c0019c72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b0a9:	5e                   	pop    esi
c001b0aa:	5f                   	pop    edi
c001b0ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b0af:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b0b5:	e8 98 eb ff ff       	call   c0019c52 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b0ba:	eb 48                	jmp    c001b104 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b0bc:	be 01 00 00 00       	mov    esi,0x1
c001b0c1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b0c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b0c9:	d3 e6                	shl    esi,cl
c001b0cb:	c1 e7 07             	shl    edi,0x7
c001b0ce:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0d4:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0d9:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0dd:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0e3:	85 c6                	test   esi,eax
c001b0e5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0eb:	0f 84 a3 00 00 00    	je     c001b194 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b0f1:	0f ba e0 1e          	bt     eax,0x1e
c001b0f5:	73 1a                	jae    c001b111 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	68 d1 f6 01 c0       	push   0xc001f6d1
c001b0ff:	e8 d4 f3 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b104:	83 c4 10             	add    esp,0x10
c001b107:	b8 01 00 00 00       	mov    eax,0x1
c001b10c:	e9 b6 00 00 00       	jmp    c001b1c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b111:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b117:	83 f8 0d             	cmp    eax,0xd
c001b11a:	77 0a                	ja     c001b126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	68 c8 00 00 00       	push   0xc8
c001b124:	eb 28                	jmp    c001b14e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b126:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b12c:	83 f8 0d             	cmp    eax,0xd
c001b12f:	77 0a                	ja     c001b13b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b131:	83 ec 0c             	sub    esp,0xc
c001b134:	68 58 02 00 00       	push   0x258
c001b139:	eb 13                	jmp    c001b14e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b13b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b141:	83 f8 06             	cmp    eax,0x6
c001b144:	77 10                	ja     c001b156 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b146:	83 ec 0c             	sub    esp,0xc
c001b149:	68 dc 05 00 00       	push   0x5dc
c001b14e:	e8 d1 89 ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c001b153:	83 c4 10             	add    esp,0x10
c001b156:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b15a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b15d:	75 06                	jne    c001b165 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b15f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b163:	74 15                	je     c001b17a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b165:	83 fb 06             	cmp    ebx,0x6
c001b168:	77 10                	ja     c001b17a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b16a:	83 ec 0c             	sub    esp,0xc
c001b16d:	68 c4 09 00 00       	push   0x9c4
c001b172:	e8 ad 89 ff ff       	call   c0013b24 <milliTenthSleep(unsigned int)>
c001b177:	83 c4 10             	add    esp,0x10
c001b17a:	43                   	inc    ebx
c001b17b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b181:	0f 85 56 ff ff ff    	jne    c001b0dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b187:	83 ec 0c             	sub    esp,0xc
c001b18a:	68 e4 f6 01 c0       	push   0xc001f6e4
c001b18f:	e9 6b ff ff ff       	jmp    c001b0ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b194:	0f ba e0 1e          	bt     eax,0x1e
c001b198:	73 0d                	jae    c001b1a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b19a:	83 ec 0c             	sub    esp,0xc
c001b19d:	68 f8 f6 01 c0       	push   0xc001f6f8
c001b1a2:	e9 58 ff ff ff       	jmp    c001b0ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b1a7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b1ac:	74 17                	je     c001b1c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b1ae:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b1b3:	74 10                	je     c001b1c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b1b5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b1bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b1bf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b1c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1c5:	31 c0                	xor    eax,eax
c001b1c7:	83 c4 2c             	add    esp,0x2c
c001b1ca:	5b                   	pop    ebx
c001b1cb:	5e                   	pop    esi
c001b1cc:	5f                   	pop    edi
c001b1cd:	5d                   	pop    ebp
c001b1ce:	c3                   	ret    
c001b1cf:	90                   	nop

c001b1d0 <SATAPI::eject()>:
c001b1d0:	57                   	push   edi
c001b1d1:	b9 03 00 00 00       	mov    ecx,0x3
c001b1d6:	83 ec 18             	sub    esp,0x18
c001b1d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1dd:	fc                   	cld    
c001b1de:	31 c0                	xor    eax,eax
c001b1e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b1e2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b1e7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b1ec:	50                   	push   eax
c001b1ed:	6a 00                	push   0x0
c001b1ef:	6a 00                	push   0x0
c001b1f1:	6a 00                	push   0x0
c001b1f3:	6a 00                	push   0x0
c001b1f5:	6a 02                	push   0x2
c001b1f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1fb:	50                   	push   eax
c001b1fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b200:	e8 eb fc ff ff       	call   c001aef0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b205:	31 c0                	xor    eax,eax
c001b207:	83 c4 38             	add    esp,0x38
c001b20a:	5f                   	pop    edi
c001b20b:	c3                   	ret    

c001b20c <SATAPI::detectMedia()>:
c001b20c:	53                   	push   ebx
c001b20d:	83 ec 14             	sub    esp,0x14
c001b210:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b214:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b21a:	e8 75 22 ff ff       	call   c000d494 <VCache::writeWriteBuffer()>
c001b21f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b225:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b229:	83 c4 18             	add    esp,0x18
c001b22c:	5b                   	pop    ebx
c001b22d:	e9 52 22 ff ff       	jmp    c000d484 <VCache::invalidateReadBuffer()>

c001b232 <SATAPI::open(int, int, void*)>:
c001b232:	56                   	push   esi
c001b233:	53                   	push   ebx
c001b234:	51                   	push   ecx
c001b235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b23d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b247:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b24d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b25b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b265:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b26b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b272:	e8 1e c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b277:	89 c6                	mov    esi,eax
c001b279:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b27f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b285:	e8 0b c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b28a:	39 c6                	cmp    esi,eax
c001b28c:	74 10                	je     c001b29e <SATAPI::open(int, int, void*)+0x6c>
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	68 0d f7 01 c0       	push   0xc001f70d
c001b296:	e8 88 4e ff ff       	call   c0010123 <KePanic(char const*)>
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	83 ec 0c             	sub    esp,0xc
c001b2a1:	6a 02                	push   0x2
c001b2a3:	e8 dd df fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b2a8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b2ae:	6a 03                	push   0x3
c001b2b0:	50                   	push   eax
c001b2b1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b2b7:	ff 35 30 0d 02 c0    	push   DWORD PTR ds:0xc0020d30
c001b2bd:	e8 58 e6 fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b2c2:	83 c4 14             	add    esp,0x14
c001b2c5:	68 74 01 00 00       	push   0x174
c001b2ca:	e8 ea c4 fe ff       	call   c00077b9 <malloc>
c001b2cf:	83 c4 0c             	add    esp,0xc
c001b2d2:	89 c6                	mov    esi,eax
c001b2d4:	6a 00                	push   0x0
c001b2d6:	68 ff ff ff 7f       	push   0x7fffffff
c001b2db:	6a 00                	push   0x0
c001b2dd:	6a 00                	push   0x0
c001b2df:	53                   	push   ebx
c001b2e0:	68 23 f7 01 c0       	push   0xc001f723
c001b2e5:	50                   	push   eax
c001b2e6:	e8 ad 16 ff ff       	call   c000c998 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b2eb:	83 c4 14             	add    esp,0x14
c001b2ee:	56                   	push   esi
c001b2ef:	e8 5a 17 ff ff       	call   c000ca4e <LogicalDisk::assignDriveLetter()>
c001b2f4:	5a                   	pop    edx
c001b2f5:	0f be c0             	movsx  eax,al
c001b2f8:	59                   	pop    ecx
c001b2f9:	50                   	push   eax
c001b2fa:	68 70 f5 01 c0       	push   0xc001f570
c001b2ff:	e8 d4 f1 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b304:	58                   	pop    eax
c001b305:	5a                   	pop    edx
c001b306:	56                   	push   esi
c001b307:	53                   	push   ebx
c001b308:	e8 0b 06 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b30d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b313:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b316:	e8 33 0a ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001b31b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b325:	e8 e2 fe ff ff       	call   c001b20c <SATAPI::detectMedia()>
c001b32a:	83 c4 14             	add    esp,0x14
c001b32d:	31 c0                	xor    eax,eax
c001b32f:	5b                   	pop    ebx
c001b330:	5e                   	pop    esi
c001b331:	c3                   	ret    

c001b332 <SATAPI::read(unsigned long long, int, void*)>:
c001b332:	57                   	push   edi
c001b333:	56                   	push   esi
c001b334:	53                   	push   ebx
c001b335:	83 ec 3c             	sub    esp,0x3c
c001b338:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b33c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b340:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b344:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b348:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b34c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b350:	68 31 f7 01 c0       	push   0xc001f731
c001b355:	e8 7e f1 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b35a:	83 c4 10             	add    esp,0x10
c001b35d:	83 fe 04             	cmp    esi,0x4
c001b360:	7e 10                	jle    c001b372 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b362:	83 ec 0c             	sub    esp,0xc
c001b365:	68 42 f7 01 c0       	push   0xc001f742
c001b36a:	e8 b4 4d ff ff       	call   c0010123 <KePanic(char const*)>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b378:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b37e:	51                   	push   ecx
c001b37f:	50                   	push   eax
c001b380:	83 c0 02             	add    eax,0x2
c001b383:	c1 e0 07             	shl    eax,0x7
c001b386:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b38c:	50                   	push   eax
c001b38d:	52                   	push   edx
c001b38e:	e8 09 e9 ff ff       	call   c0019c9c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b393:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b397:	b9 03 00 00 00       	mov    ecx,0x3
c001b39c:	fc                   	cld    
c001b39d:	31 c0                	xor    eax,eax
c001b39f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3a1:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3a6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3ab:	83 c4 0c             	add    esp,0xc
c001b3ae:	6a 00                	push   0x0
c001b3b0:	6a 00                	push   0x0
c001b3b2:	6a 00                	push   0x0
c001b3b4:	6a 00                	push   0x0
c001b3b6:	6a 02                	push   0x2
c001b3b8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b3bc:	50                   	push   eax
c001b3bd:	53                   	push   ebx
c001b3be:	e8 2d fb ff ff       	call   c001aef0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3c3:	83 c4 20             	add    esp,0x20
c001b3c6:	85 c0                	test   eax,eax
c001b3c8:	75 44                	jne    c001b40e <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b3ca:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3ce:	b9 03 00 00 00       	mov    ecx,0x3
c001b3d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3d9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b3de:	0f c8                	bswap  eax
c001b3e0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b3e4:	89 f0                	mov    eax,esi
c001b3e6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3ea:	50                   	push   eax
c001b3eb:	56                   	push   esi
c001b3ec:	c1 e6 0b             	shl    esi,0xb
c001b3ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3fb:	56                   	push   esi
c001b3fc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b400:	50                   	push   eax
c001b401:	53                   	push   ebx
c001b402:	e8 e9 fa ff ff       	call   c001aef0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b407:	83 c4 20             	add    esp,0x20
c001b40a:	85 c0                	test   eax,eax
c001b40c:	74 14                	je     c001b422 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b412:	83 ec 0c             	sub    esp,0xc
c001b415:	53                   	push   ebx
c001b416:	e8 f1 fd ff ff       	call   c001b20c <SATAPI::detectMedia()>
c001b41b:	83 c4 10             	add    esp,0x10
c001b41e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b422:	83 c4 30             	add    esp,0x30
c001b425:	5b                   	pop    ebx
c001b426:	5e                   	pop    esi
c001b427:	5f                   	pop    edi
c001b428:	c3                   	ret    
c001b429:	90                   	nop

c001b42a <IOAPIC::close(int, int, void*)>:
c001b42a:	b8 00 00 00 00       	mov    eax,0x0
c001b42f:	c3                   	ret    

c001b430 <apicGetBase()>:
c001b430:	55                   	push   ebp
c001b431:	89 e5                	mov    ebp,esp
c001b433:	83 ec 18             	sub    esp,0x18
c001b436:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001b43b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b441:	83 e0 08             	and    eax,0x8
c001b444:	84 c0                	test   al,al
c001b446:	75 07                	jne    c001b44f <apicGetBase()+0x1f>
c001b448:	b8 00 00 00 00       	mov    eax,0x0
c001b44d:	eb 21                	jmp    c001b470 <apicGetBase()+0x40>
c001b44f:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001b454:	83 ec 08             	sub    esp,0x8
c001b457:	6a 1b                	push   0x1b
c001b459:	50                   	push   eax
c001b45a:	e8 93 b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b465:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b468:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b46b:	25 00 00 ff ff       	and    eax,0xffff0000
c001b470:	c9                   	leave  
c001b471:	c3                   	ret    

c001b472 <IOAPIC::IOAPIC()>:
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b479:	83 ec 08             	sub    esp,0x8
c001b47c:	68 a4 f7 01 c0       	push   0xc001f7a4
c001b481:	50                   	push   eax
c001b482:	e8 29 06 ff ff       	call   c000bab0 <Device::Device(char const*)>
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	ba b4 f7 01 c0       	mov    edx,0xc001f7b4
c001b48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b493:	89 10                	mov    DWORD PTR [eax],edx
c001b495:	90                   	nop
c001b496:	83 c4 0c             	add    esp,0xc
c001b499:	c3                   	ret    

c001b49a <apicOpen()>:
c001b49a:	55                   	push   ebp
c001b49b:	89 e5                	mov    ebp,esp
c001b49d:	53                   	push   ebx
c001b49e:	83 ec 34             	sub    esp,0x34
c001b4a1:	a0 20 49 02 c0       	mov    al,ds:0xc0024920
c001b4a6:	83 f0 01             	xor    eax,0x1
c001b4a9:	84 c0                	test   al,al
c001b4ab:	0f 84 9d 00 00 00    	je     c001b54e <apicOpen()+0xb4>
c001b4b1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b4b5:	a0 00 35 02 c0       	mov    al,ds:0xc0023500
c001b4ba:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b4bd:	0f 83 84 00 00 00    	jae    c001b547 <apicOpen()+0xad>
c001b4c3:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b4ca:	83 ec 0c             	sub    esp,0xc
c001b4cd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b4d0:	e8 e4 c2 fe ff       	call   c00077b9 <malloc>
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	89 c3                	mov    ebx,eax
c001b4da:	83 ec 0c             	sub    esp,0xc
c001b4dd:	53                   	push   ebx
c001b4de:	e8 8f ff ff ff       	call   c001b472 <IOAPIC::IOAPIC()>
c001b4e3:	83 c4 10             	add    esp,0x10
c001b4e6:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b4e9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4ec:	25 ff 00 00 00       	and    eax,0xff
c001b4f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b4f4:	89 14 85 00 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb700],edx
c001b4fb:	a1 e0 48 02 c0       	mov    eax,ds:0xc00248e0
c001b500:	40                   	inc    eax
c001b501:	a3 e0 48 02 c0       	mov    ds:0xc00248e0,eax
c001b506:	a1 38 0c 02 c0       	mov    eax,ds:0xc0020c38
c001b50b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b511:	83 ec 08             	sub    esp,0x8
c001b514:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b517:	50                   	push   eax
c001b518:	e8 fb 03 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b523:	8b 00                	mov    eax,DWORD PTR [eax]
c001b525:	83 c0 08             	add    eax,0x8
c001b528:	8b 10                	mov    edx,DWORD PTR [eax]
c001b52a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b52d:	25 ff 00 00 00       	and    eax,0xff
c001b532:	6a 00                	push   0x0
c001b534:	6a 00                	push   0x0
c001b536:	50                   	push   eax
c001b537:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b53a:	ff d2                	call   edx
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b542:	e9 6e ff ff ff       	jmp    c001b4b5 <apicOpen()+0x1b>
c001b547:	c6 05 20 49 02 c0 01 	mov    BYTE PTR ds:0xc0024920,0x1
c001b54e:	e8 dd fe ff ff       	call   c001b430 <apicGetBase()>
c001b553:	05 f0 00 00 00       	add    eax,0xf0
c001b558:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b55b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b55e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b560:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b563:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b56a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b571:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b574:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b577:	89 10                	mov    DWORD PTR [eax],edx
c001b579:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b580:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c001b585:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b588:	7d 70                	jge    c001b5fa <apicOpen()+0x160>
c001b58a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b58d:	8b 04 85 60 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcba0]
c001b594:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b597:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b59a:	8b 04 85 60 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcba0]
c001b5a1:	c1 e8 08             	shr    eax,0x8
c001b5a4:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b5a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5ab:	8b 04 85 60 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcba0]
c001b5b2:	c1 e8 18             	shr    eax,0x18
c001b5b5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b5b8:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b5bc:	75 37                	jne    c001b5f5 <apicOpen()+0x15b>
c001b5be:	e8 6d fe ff ff       	call   c001b430 <apicGetBase()>
c001b5c3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b5c7:	75 07                	jne    c001b5d0 <apicOpen()+0x136>
c001b5c9:	ba 60 03 00 00       	mov    edx,0x360
c001b5ce:	eb 05                	jmp    c001b5d5 <apicOpen()+0x13b>
c001b5d0:	ba 50 03 00 00       	mov    edx,0x350
c001b5d5:	01 d0                	add    eax,edx
c001b5d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b5da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5df:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b5e2:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b5e9:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b5ed:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5f0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b5f3:	89 10                	mov    DWORD PTR [eax],edx
c001b5f5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b5f8:	eb 86                	jmp    c001b580 <apicOpen()+0xe6>
c001b5fa:	90                   	nop
c001b5fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b5fe:	c9                   	leave  
c001b5ff:	c3                   	ret    

c001b600 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b600:	55                   	push   ebp
c001b601:	89 e5                	mov    ebp,esp
c001b603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b60c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b60f:	72 1d                	jb     c001b62e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b614:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b61a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b61d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b623:	01 d0                	add    eax,edx
c001b625:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b628:	73 04                	jae    c001b62e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b62a:	b0 01                	mov    al,0x1
c001b62c:	eb 02                	jmp    c001b630 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b62e:	b0 00                	mov    al,0x0
c001b630:	5d                   	pop    ebp
c001b631:	c3                   	ret    

c001b632 <IOAPIC::read(int)>:
c001b632:	55                   	push   ebp
c001b633:	89 e5                	mov    ebp,esp
c001b635:	83 ec 10             	sub    esp,0x10
c001b638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b63b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b641:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b644:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b647:	31 d2                	xor    edx,edx
c001b649:	88 c2                	mov    dl,al
c001b64b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b64e:	89 10                	mov    DWORD PTR [eax],edx
c001b650:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b653:	83 c0 10             	add    eax,0x10
c001b656:	8b 00                	mov    eax,DWORD PTR [eax]
c001b658:	c9                   	leave  
c001b659:	c3                   	ret    

c001b65a <IOAPIC::open(int, int, void*)>:
c001b65a:	55                   	push   ebp
c001b65b:	89 e5                	mov    ebp,esp
c001b65d:	57                   	push   edi
c001b65e:	56                   	push   esi
c001b65f:	53                   	push   ebx
c001b660:	83 ec 04             	sub    esp,0x4
c001b663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b666:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b669:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b672:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b678:	8b 14 85 40 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcac0]
c001b67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b682:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b68b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b691:	8b 14 85 c0 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdca40]
c001b698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b69b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6b3:	89 c6                	mov    esi,eax
c001b6b5:	81 e6 ff 00 00 00    	and    esi,0xff
c001b6bb:	89 d0                	mov    eax,edx
c001b6bd:	ba 00 00 00 00       	mov    edx,0x0
c001b6c2:	89 c7                	mov    edi,eax
c001b6c4:	83 e7 ff             	and    edi,0xffffffff
c001b6c7:	89 f9                	mov    ecx,edi
c001b6c9:	89 d0                	mov    eax,edx
c001b6cb:	25 ff 00 00 00       	and    eax,0xff
c001b6d0:	89 c3                	mov    ebx,eax
c001b6d2:	89 c8                	mov    eax,ecx
c001b6d4:	89 da                	mov    edx,ebx
c001b6d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6d9:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b6dc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b6e0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b6e4:	83 e0 00             	and    eax,0x0
c001b6e7:	09 d0                	or     eax,edx
c001b6e9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6f6:	8d 50 01             	lea    edx,[eax+0x1]
c001b6f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6fc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b702:	31 d2                	xor    edx,edx
c001b704:	88 c2                	mov    dl,al
c001b706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b709:	83 c2 08             	add    edx,0x8
c001b70c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b710:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b716:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b71c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b720:	6a 01                	push   0x1
c001b722:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b725:	e8 08 ff ff ff       	call   c001b632 <IOAPIC::read(int)>
c001b72a:	83 c4 08             	add    esp,0x8
c001b72d:	c1 f8 10             	sar    eax,0x10
c001b730:	25 ff 00 00 00       	and    eax,0xff
c001b735:	8d 50 01             	lea    edx,[eax+0x1]
c001b738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b73b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b741:	b8 00 00 00 00       	mov    eax,0x0
c001b746:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b749:	5b                   	pop    ebx
c001b74a:	5e                   	pop    esi
c001b74b:	5f                   	pop    edi
c001b74c:	5d                   	pop    ebp
c001b74d:	c3                   	ret    

c001b74e <IOAPIC::write(int, int)>:
c001b74e:	55                   	push   ebp
c001b74f:	89 e5                	mov    ebp,esp
c001b751:	83 ec 10             	sub    esp,0x10
c001b754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b757:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b75d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b760:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b763:	31 d2                	xor    edx,edx
c001b765:	88 c2                	mov    dl,al
c001b767:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b76a:	89 10                	mov    DWORD PTR [eax],edx
c001b76c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b76f:	8d 50 10             	lea    edx,[eax+0x10]
c001b772:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b775:	89 02                	mov    DWORD PTR [edx],eax
c001b777:	90                   	nop
c001b778:	c9                   	leave  
c001b779:	c3                   	ret    

c001b77a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b77a:	55                   	push   ebp
c001b77b:	89 e5                	mov    ebp,esp
c001b77d:	53                   	push   ebx
c001b77e:	83 ec 2c             	sub    esp,0x2c
c001b781:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b784:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b787:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b78a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b78d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b790:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b793:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b796:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b799:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b79c:	88 d8                	mov    al,bl
c001b79e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b7a1:	88 c8                	mov    al,cl
c001b7a3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b7a6:	88 d0                	mov    al,dl
c001b7a8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b7ab:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b7ae:	25 ff 00 00 00       	and    eax,0xff
c001b7b3:	83 c0 08             	add    eax,0x8
c001b7b6:	01 c0                	add    eax,eax
c001b7b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b7bb:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b7be:	25 ff 00 00 00       	and    eax,0xff
c001b7c3:	83 c0 08             	add    eax,0x8
c001b7c6:	01 c0                	add    eax,eax
c001b7c8:	40                   	inc    eax
c001b7c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b7cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7cf:	50                   	push   eax
c001b7d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7d3:	e8 5a fe ff ff       	call   c001b632 <IOAPIC::read(int)>
c001b7d8:	83 c4 08             	add    esp,0x8
c001b7db:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b7de:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b7e5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b7e8:	c1 e0 18             	shl    eax,0x18
c001b7eb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b7ee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b7f1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7f4:	52                   	push   edx
c001b7f5:	50                   	push   eax
c001b7f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7f9:	e8 50 ff ff ff       	call   c001b74e <IOAPIC::write(int, int)>
c001b7fe:	83 c4 0c             	add    esp,0xc
c001b801:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b804:	50                   	push   eax
c001b805:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b808:	e8 25 fe ff ff       	call   c001b632 <IOAPIC::read(int)>
c001b80d:	83 c4 08             	add    esp,0x8
c001b810:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b813:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b81a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b821:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b828:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b82c:	74 09                	je     c001b837 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b82e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b835:	eb 07                	jmp    c001b83e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b837:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b83e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b842:	74 09                	je     c001b84d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b844:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b84b:	eb 07                	jmp    c001b854 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b84d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b854:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b85b:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b85e:	25 ff 00 00 00       	and    eax,0xff
c001b863:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b866:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b869:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b86c:	52                   	push   edx
c001b86d:	50                   	push   eax
c001b86e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b871:	e8 d8 fe ff ff       	call   c001b74e <IOAPIC::write(int, int)>
c001b876:	83 c4 0c             	add    esp,0xc
c001b879:	90                   	nop
c001b87a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b87d:	c9                   	leave  
c001b87e:	c3                   	ret    
c001b87f:	90                   	nop

c001b880 <APICTimer::close(int, int, void*)>:
c001b880:	b8 00 00 00 00       	mov    eax,0x0
c001b885:	c3                   	ret    
c001b886:	66 90                	xchg   ax,ax

c001b888 <apicTimerHandler(regs*, void*)>:
c001b888:	83 ec 0c             	sub    esp,0xc
c001b88b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b88f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b891:	b8 10 27 00 00       	mov    eax,0x2710
c001b896:	ba 00 00 00 00       	mov    edx,0x0
c001b89b:	f7 f1                	div    ecx
c001b89d:	83 ec 0c             	sub    esp,0xc
c001b8a0:	50                   	push   eax
c001b8a1:	e8 0e 19 ff ff       	call   c000d1b4 <timerHandler(unsigned int)>
c001b8a6:	83 c4 10             	add    esp,0x10
c001b8a9:	90                   	nop
c001b8aa:	83 c4 0c             	add    esp,0xc
c001b8ad:	c3                   	ret    
c001b8ae:	66 90                	xchg   ax,ax

c001b8b0 <APICTimer::open(int, int, void*)>:
c001b8b0:	83 ec 0c             	sub    esp,0xc
c001b8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8b9:	83 c0 24             	add    eax,0x24
c001b8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8be:	83 ec 08             	sub    esp,0x8
c001b8c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c9:	ff d0                	call   eax
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8d6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8e4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b8ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8ee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b8f4:	83 ec 0c             	sub    esp,0xc
c001b8f7:	51                   	push   ecx
c001b8f8:	6a 01                	push   0x1
c001b8fa:	68 88 b8 01 c0       	push   0xc001b888
c001b8ff:	52                   	push   edx
c001b900:	50                   	push   eax
c001b901:	e8 be ff fe ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b906:	83 c4 20             	add    esp,0x20
c001b909:	89 c2                	mov    edx,eax
c001b90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b915:	b8 00 00 00 00       	mov    eax,0x0
c001b91a:	83 c4 0c             	add    esp,0xc
c001b91d:	c3                   	ret    
c001b91e:	66 90                	xchg   ax,ax

c001b920 <APICTimer::write(int)>:
c001b920:	83 ec 0c             	sub    esp,0xc
c001b923:	83 ec 0c             	sub    esp,0xc
c001b926:	68 d8 f7 01 c0       	push   0xc001f7d8
c001b92b:	e8 f3 47 ff ff       	call   c0010123 <KePanic(char const*)>
c001b930:	83 c4 10             	add    esp,0x10
c001b933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b937:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b93b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b941:	90                   	nop
c001b942:	83 c4 0c             	add    esp,0xc
c001b945:	c3                   	ret    
c001b946:	66 90                	xchg   ax,ax

c001b948 <APICTimer::APICTimer()>:
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94f:	83 ec 08             	sub    esp,0x8
c001b952:	68 e8 f7 01 c0       	push   0xc001f7e8
c001b957:	50                   	push   eax
c001b958:	e8 8b 17 ff ff       	call   c000d0e8 <Timer::Timer(char const*)>
c001b95d:	83 c4 10             	add    esp,0x10
c001b960:	ba fc f7 01 c0       	mov    edx,0xc001f7fc
c001b965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b969:	89 10                	mov    DWORD PTR [eax],edx
c001b96b:	90                   	nop
c001b96c:	83 c4 0c             	add    esp,0xc
c001b96f:	c3                   	ret    

c001b970 <PIT::write(int)>:
c001b970:	83 ec 10             	sub    esp,0x10
c001b973:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b977:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b97b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b981:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b985:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c001b98a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b98f:	99                   	cdq    
c001b990:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b994:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b998:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b99f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b9a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b9a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b9ad:	ee                   	out    dx,al
c001b9ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9b2:	25 ff 00 00 00       	and    eax,0xff
c001b9b7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b9be:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b9c2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b9c6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b9cb:	ee                   	out    dx,al
c001b9cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d0:	c1 f8 08             	sar    eax,0x8
c001b9d3:	25 ff 00 00 00       	and    eax,0xff
c001b9d8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b9df:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b9e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b9e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b9ec:	ee                   	out    dx,al
c001b9ed:	90                   	nop
c001b9ee:	83 c4 10             	add    esp,0x10
c001b9f1:	c3                   	ret    
c001b9f2:	66 90                	xchg   ax,ax

c001b9f4 <pitHandler(regs*, void*)>:
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	8b 0d 24 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024924
c001b9fd:	b8 10 27 00 00       	mov    eax,0x2710
c001ba02:	99                   	cdq    
c001ba03:	f7 f9                	idiv   ecx
c001ba05:	83 ec 0c             	sub    esp,0xc
c001ba08:	50                   	push   eax
c001ba09:	e8 a6 17 ff ff       	call   c000d1b4 <timerHandler(unsigned int)>
c001ba0e:	83 c4 10             	add    esp,0x10
c001ba11:	90                   	nop
c001ba12:	83 c4 0c             	add    esp,0xc
c001ba15:	c3                   	ret    
c001ba16:	66 90                	xchg   ax,ax

c001ba18 <PIT::open(int, int, void*)>:
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba21:	83 c0 24             	add    eax,0x24
c001ba24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba26:	83 ec 08             	sub    esp,0x8
c001ba29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba31:	ff d0                	call   eax
c001ba33:	83 c4 10             	add    esp,0x10
c001ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	6a 00                	push   0x0
c001ba3f:	6a 01                	push   0x1
c001ba41:	68 f4 b9 01 c0       	push   0xc001b9f4
c001ba46:	6a 00                	push   0x0
c001ba48:	50                   	push   eax
c001ba49:	e8 76 fe fe ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba4e:	83 c4 20             	add    esp,0x20
c001ba51:	89 c2                	mov    edx,eax
c001ba53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba57:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba5d:	b8 00 00 00 00       	mov    eax,0x0
c001ba62:	83 c4 0c             	add    esp,0xc
c001ba65:	c3                   	ret    
c001ba66:	66 90                	xchg   ax,ax

c001ba68 <PIT::close(int, int, void*)>:
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ba79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7d:	6a 01                	push   0x1
c001ba7f:	68 f4 b9 01 c0       	push   0xc001b9f4
c001ba84:	6a 00                	push   0x0
c001ba86:	50                   	push   eax
c001ba87:	e8 6e fe fe ff       	call   c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	b8 00 00 00 00       	mov    eax,0x0
c001ba94:	83 c4 0c             	add    esp,0xc
c001ba97:	c3                   	ret    

c001ba98 <PIT::PIT()>:
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9f:	83 ec 08             	sub    esp,0x8
c001baa2:	68 24 f8 01 c0       	push   0xc001f824
c001baa7:	50                   	push   eax
c001baa8:	e8 3b 16 ff ff       	call   c000d0e8 <Timer::Timer(char const*)>
c001baad:	83 c4 10             	add    esp,0x10
c001bab0:	ba 4c f8 01 c0       	mov    edx,0xc001f84c
c001bab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab9:	89 10                	mov    DWORD PTR [eax],edx
c001babb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bac5:	31 d2                	xor    edx,edx
c001bac7:	88 c2                	mov    dl,al
c001bac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bacd:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bade:	31 d2                	xor    edx,edx
c001bae0:	88 c2                	mov    dl,al
c001bae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001baeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001baf5:	8d 50 01             	lea    edx,[eax+0x1]
c001baf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bafc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb02:	31 d2                	xor    edx,edx
c001bb04:	88 c2                	mov    dl,al
c001bb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb0e:	83 e1 3f             	and    ecx,0x3f
c001bb11:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb15:	90                   	nop
c001bb16:	83 c4 0c             	add    esp,0xc
c001bb19:	c3                   	ret    
c001bb1a:	66 90                	xchg   ax,ax
c001bb1c:	66 90                	xchg   ax,ax
c001bb1e:	66 90                	xchg   ax,ax

c001bb20 <avxDetect>:
c001bb20:	b8 01 00 00 00       	mov    eax,0x1
c001bb25:	0f a2                	cpuid  
c001bb27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb2d:	74 15                	je     c001bb44 <avxDetect.noAVX>
c001bb2f:	b8 01 00 00 00       	mov    eax,0x1
c001bb34:	0f a2                	cpuid  
c001bb36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb3c:	74 06                	je     c001bb44 <avxDetect.noAVX>
c001bb3e:	b8 01 00 00 00       	mov    eax,0x1
c001bb43:	c3                   	ret    

c001bb44 <avxDetect.noAVX>:
c001bb44:	b8 00 00 00 00       	mov    eax,0x0
c001bb49:	c3                   	ret    

c001bb4a <avxSave>:
c001bb4a:	53                   	push   ebx
c001bb4b:	52                   	push   edx
c001bb4c:	31 c0                	xor    eax,eax
c001bb4e:	48                   	dec    eax
c001bb4f:	89 c2                	mov    edx,eax
c001bb51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb55:	0f ae 23             	xsave  [ebx]
c001bb58:	5a                   	pop    edx
c001bb59:	5b                   	pop    ebx
c001bb5a:	c3                   	ret    

c001bb5b <avxLoad>:
c001bb5b:	53                   	push   ebx
c001bb5c:	52                   	push   edx
c001bb5d:	31 c0                	xor    eax,eax
c001bb5f:	48                   	dec    eax
c001bb60:	89 c2                	mov    edx,eax
c001bb62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb66:	0f ae 2b             	xrstor [ebx]
c001bb69:	5a                   	pop    edx
c001bb6a:	5b                   	pop    ebx
c001bb6b:	c3                   	ret    

c001bb6c <avxInit>:
c001bb6c:	e8 57 02 00 00       	call   c001bdc8 <sseInit>
c001bb71:	50                   	push   eax
c001bb72:	51                   	push   ecx
c001bb73:	0f 20 e0             	mov    eax,cr4
c001bb76:	0d 00 00 04 00       	or     eax,0x40000
c001bb7b:	0f 22 e0             	mov    cr4,eax
c001bb7e:	31 c9                	xor    ecx,ecx
c001bb80:	0f 01 d0             	xgetbv 
c001bb83:	0d 07 00 00 00       	or     eax,0x7
c001bb88:	0f 01 d1             	xsetbv 
c001bb8b:	59                   	pop    ecx
c001bb8c:	58                   	pop    eax
c001bb8d:	c3                   	ret    

c001bb8e <avxClose>:
c001bb8e:	c3                   	ret    

c001bb8f <wouldSheSayYes>:
c001bb8f:	c3                   	ret    
c001bb90:	49                   	dec    ecx
c001bb91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb99:	75 20                	jne    c001bbbb <isr0+0xb>
c001bb9b:	4e                   	dec    esi
c001bb9c:	79 61                	jns    c001bbff <isr7+0x3>
c001bb9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bba3:	66 90                	xchg   ax,ax
c001bba5:	66 90                	xchg   ax,ax
c001bba7:	66 90                	xchg   ax,ax
c001bba9:	66 90                	xchg   ax,ax
c001bbab:	66 90                	xchg   ax,ax
c001bbad:	66 90                	xchg   ax,ax
c001bbaf:	90                   	nop

c001bbb0 <isr0>:
c001bbb0:	fa                   	cli    
c001bbb1:	68 00 00 00 00       	push   0x0
c001bbb6:	68 00 00 00 00       	push   0x0
c001bbbb:	e9 44 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbc0 <isr1>:
c001bbc0:	fa                   	cli    
c001bbc1:	6a 00                	push   0x0
c001bbc3:	6a 01                	push   0x1
c001bbc5:	e9 3a 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbca <isr2>:
c001bbca:	fa                   	cli    
c001bbcb:	6a 00                	push   0x0
c001bbcd:	6a 02                	push   0x2
c001bbcf:	e9 30 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbd4 <isr3>:
c001bbd4:	fa                   	cli    
c001bbd5:	6a 00                	push   0x0
c001bbd7:	6a 03                	push   0x3
c001bbd9:	e9 26 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbde <isr4>:
c001bbde:	fa                   	cli    
c001bbdf:	6a 00                	push   0x0
c001bbe1:	6a 04                	push   0x4
c001bbe3:	e9 1c 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbe8 <isr5>:
c001bbe8:	fa                   	cli    
c001bbe9:	6a 00                	push   0x0
c001bbeb:	6a 05                	push   0x5
c001bbed:	e9 12 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbf2 <isr6>:
c001bbf2:	fa                   	cli    
c001bbf3:	6a 00                	push   0x0
c001bbf5:	6a 06                	push   0x6
c001bbf7:	e9 08 01 00 00       	jmp    c001bd04 <int_common_stub>

c001bbfc <isr7>:
c001bbfc:	fa                   	cli    
c001bbfd:	6a 00                	push   0x0
c001bbff:	6a 07                	push   0x7
c001bc01:	e9 fe 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc06 <isr8>:
c001bc06:	fa                   	cli    
c001bc07:	6a 08                	push   0x8
c001bc09:	e9 f6 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc0e <isr9>:
c001bc0e:	fa                   	cli    
c001bc0f:	6a 00                	push   0x0
c001bc11:	6a 09                	push   0x9
c001bc13:	e9 ec 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc18 <isr10>:
c001bc18:	fa                   	cli    
c001bc19:	6a 0a                	push   0xa
c001bc1b:	e9 e4 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc20 <isr11>:
c001bc20:	fa                   	cli    
c001bc21:	6a 0b                	push   0xb
c001bc23:	e9 dc 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc28 <isr12>:
c001bc28:	fa                   	cli    
c001bc29:	6a 0c                	push   0xc
c001bc2b:	e9 d4 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc30 <isr13>:
c001bc30:	fa                   	cli    
c001bc31:	6a 0d                	push   0xd
c001bc33:	e9 cc 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc38 <isr14>:
c001bc38:	fa                   	cli    
c001bc39:	6a 0e                	push   0xe
c001bc3b:	e9 c4 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc40 <isr15>:
c001bc40:	fa                   	cli    
c001bc41:	6a 00                	push   0x0
c001bc43:	6a 0f                	push   0xf
c001bc45:	e9 ba 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc4a <isr16>:
c001bc4a:	fa                   	cli    
c001bc4b:	6a 00                	push   0x0
c001bc4d:	6a 10                	push   0x10
c001bc4f:	e9 b0 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc54 <isr17>:
c001bc54:	fa                   	cli    
c001bc55:	6a 00                	push   0x0
c001bc57:	6a 11                	push   0x11
c001bc59:	e9 a6 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc5e <isr18>:
c001bc5e:	fa                   	cli    
c001bc5f:	6a 00                	push   0x0
c001bc61:	6a 12                	push   0x12
c001bc63:	e9 9c 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc68 <irq3>:
c001bc68:	fa                   	cli    
c001bc69:	6a 00                	push   0x0
c001bc6b:	6a 23                	push   0x23
c001bc6d:	e9 92 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc72 <irq4>:
c001bc72:	fa                   	cli    
c001bc73:	6a 00                	push   0x0
c001bc75:	6a 24                	push   0x24
c001bc77:	e9 88 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc7c <irq5>:
c001bc7c:	fa                   	cli    
c001bc7d:	6a 00                	push   0x0
c001bc7f:	6a 25                	push   0x25
c001bc81:	e9 7e 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc86 <irq6>:
c001bc86:	fa                   	cli    
c001bc87:	6a 00                	push   0x0
c001bc89:	6a 26                	push   0x26
c001bc8b:	e9 74 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc90 <irq7>:
c001bc90:	fa                   	cli    
c001bc91:	6a 00                	push   0x0
c001bc93:	6a 27                	push   0x27
c001bc95:	e9 6a 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bc9a <irq8>:
c001bc9a:	fa                   	cli    
c001bc9b:	6a 00                	push   0x0
c001bc9d:	6a 28                	push   0x28
c001bc9f:	e9 60 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bca4 <irq9>:
c001bca4:	fa                   	cli    
c001bca5:	6a 00                	push   0x0
c001bca7:	6a 29                	push   0x29
c001bca9:	e9 56 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bcae <irq10>:
c001bcae:	fa                   	cli    
c001bcaf:	6a 00                	push   0x0
c001bcb1:	6a 2a                	push   0x2a
c001bcb3:	e9 4c 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bcb8 <irq11>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 00                	push   0x0
c001bcbb:	6a 2b                	push   0x2b
c001bcbd:	e9 42 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bcc2 <irq12>:
c001bcc2:	fa                   	cli    
c001bcc3:	6a 00                	push   0x0
c001bcc5:	6a 2c                	push   0x2c
c001bcc7:	e9 38 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bccc <irq13>:
c001bccc:	fa                   	cli    
c001bccd:	6a 00                	push   0x0
c001bccf:	6a 2d                	push   0x2d
c001bcd1:	e9 2e 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bcd6 <irq14>:
c001bcd6:	fa                   	cli    
c001bcd7:	6a 00                	push   0x0
c001bcd9:	6a 2e                	push   0x2e
c001bcdb:	e9 24 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bce0 <irq15>:
c001bce0:	fa                   	cli    
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 2f                	push   0x2f
c001bce5:	e9 1a 00 00 00       	jmp    c001bd04 <int_common_stub>

c001bcea <irq1>:
c001bcea:	fa                   	cli    
c001bceb:	6a 00                	push   0x0
c001bced:	6a 21                	push   0x21
c001bcef:	eb 13                	jmp    c001bd04 <int_common_stub>

c001bcf1 <irq2>:
c001bcf1:	fa                   	cli    
c001bcf2:	6a 00                	push   0x0
c001bcf4:	6a 22                	push   0x22
c001bcf6:	eb 0c                	jmp    c001bd04 <int_common_stub>

c001bcf8 <isr96>:
c001bcf8:	6a 00                	push   0x0
c001bcfa:	6a 60                	push   0x60
c001bcfc:	fb                   	sti    
c001bcfd:	eb 05                	jmp    c001bd04 <int_common_stub>

c001bcff <irq0>:
c001bcff:	fa                   	cli    
c001bd00:	6a 00                	push   0x0
c001bd02:	6a 20                	push   0x20

c001bd04 <int_common_stub>:
c001bd04:	60                   	pusha  
c001bd05:	1e                   	push   ds
c001bd06:	06                   	push   es
c001bd07:	0f a0                	push   fs
c001bd09:	0f a8                	push   gs
c001bd0b:	66 b8 10 00          	mov    ax,0x10
c001bd0f:	66 8e d8             	mov    ds,ax
c001bd12:	66 8e c0             	mov    es,ax
c001bd15:	66 8e e0             	mov    fs,ax
c001bd18:	66 8e e8             	mov    gs,ax
c001bd1b:	54                   	push   esp
c001bd1c:	fc                   	cld    
c001bd1d:	e8 a2 00 ff ff       	call   c000bdc4 <int_handler>
c001bd22:	81 c4 04 00 00 00    	add    esp,0x4
c001bd28:	0f a9                	pop    gs
c001bd2a:	0f a1                	pop    fs
c001bd2c:	07                   	pop    es
c001bd2d:	1f                   	pop    ds
c001bd2e:	61                   	popa   
c001bd2f:	81 c4 08 00 00 00    	add    esp,0x8
c001bd35:	cf                   	iret   

c001bd36 <irq16>:
c001bd36:	fa                   	cli    
c001bd37:	6a 00                	push   0x0
c001bd39:	6a 30                	push   0x30
c001bd3b:	e9 c4 ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd40 <irq17>:
c001bd40:	fa                   	cli    
c001bd41:	6a 00                	push   0x0
c001bd43:	6a 31                	push   0x31
c001bd45:	e9 ba ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd4a <irq18>:
c001bd4a:	fa                   	cli    
c001bd4b:	6a 00                	push   0x0
c001bd4d:	6a 32                	push   0x32
c001bd4f:	e9 b0 ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd54 <irq19>:
c001bd54:	fa                   	cli    
c001bd55:	6a 00                	push   0x0
c001bd57:	6a 33                	push   0x33
c001bd59:	e9 a6 ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd5e <irq20>:
c001bd5e:	fa                   	cli    
c001bd5f:	6a 00                	push   0x0
c001bd61:	6a 34                	push   0x34
c001bd63:	e9 9c ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd68 <irq21>:
c001bd68:	fa                   	cli    
c001bd69:	6a 00                	push   0x0
c001bd6b:	6a 35                	push   0x35
c001bd6d:	e9 92 ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd72 <irq22>:
c001bd72:	fa                   	cli    
c001bd73:	6a 00                	push   0x0
c001bd75:	6a 36                	push   0x36
c001bd77:	e9 88 ff ff ff       	jmp    c001bd04 <int_common_stub>

c001bd7c <irq23>:
c001bd7c:	fa                   	cli    
c001bd7d:	6a 00                	push   0x0
c001bd7f:	6a 37                	push   0x37
c001bd81:	e9 7e ff ff ff       	jmp    c001bd04 <int_common_stub>
c001bd86:	66 90                	xchg   ax,ax
c001bd88:	66 90                	xchg   ax,ax
c001bd8a:	66 90                	xchg   ax,ax
c001bd8c:	66 90                	xchg   ax,ax
c001bd8e:	66 90                	xchg   ax,ax

c001bd90 <i386GetRDRAND>:
c001bd90:	b9 64 00 00 00       	mov    ecx,0x64

c001bd95 <retry>:
c001bd95:	0f c7 f0             	rdrand eax
c001bd98:	72 05                	jb     c001bd9f <retry.done>
c001bd9a:	e2 f9                	loop   c001bd95 <retry>

c001bd9c <retry.fail>:
c001bd9c:	31 c0                	xor    eax,eax
c001bd9e:	c3                   	ret    

c001bd9f <retry.done>:
c001bd9f:	c3                   	ret    

c001bda0 <absolutelyNoChanceInHell>:
c001bda0:	b8 01 00 00 00       	mov    eax,0x1
c001bda5:	0f a2                	cpuid  
c001bda7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bdad:	74 06                	je     c001bdb5 <sseDetect.noSSE>
c001bdaf:	b8 01 00 00 00       	mov    eax,0x1
c001bdb4:	c3                   	ret    

c001bdb5 <sseDetect.noSSE>:
c001bdb5:	31 c0                	xor    eax,eax
c001bdb7:	c3                   	ret    

c001bdb8 <sseSave>:
c001bdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdbc:	0f ae 00             	fxsave [eax]
c001bdbf:	c3                   	ret    

c001bdc0 <sseLoad>:
c001bdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdc4:	0f ae 08             	fxrstor [eax]
c001bdc7:	c3                   	ret    

c001bdc8 <sseInit>:
c001bdc8:	e8 42 00 00 00       	call   c001be0f <x87Init>
c001bdcd:	0f 20 e0             	mov    eax,cr4
c001bdd0:	66 0d 00 06          	or     ax,0x600
c001bdd4:	0f 22 e0             	mov    cr4,eax
c001bdd7:	c3                   	ret    

c001bdd8 <sseClose>:
c001bdd8:	c3                   	ret    
c001bdd9:	66 90                	xchg   ax,ax
c001bddb:	66 90                	xchg   ax,ax
c001bddd:	66 90                	xchg   ax,ax
c001bddf:	90                   	nop

c001bde0 <value_37F>:
c001bde0:	7f 03                	jg     c001bde5 <value_37A+0x1>

c001bde2 <value_37E>:
c001bde2:	7e 03                	jle    c001bde7 <x87Detect+0x1>

c001bde4 <value_37A>:
c001bde4:	7a 03                	jp     c001bde9 <x87Detect+0x3>

c001bde6 <x87Detect>:
c001bde6:	b8 01 00 00 00       	mov    eax,0x1
c001bdeb:	0f a2                	cpuid  
c001bded:	f7 c2 01 00 00 00    	test   edx,0x1
c001bdf3:	74 06                	je     c001bdfb <x87Detect.nox87>
c001bdf5:	b8 01 00 00 00       	mov    eax,0x1
c001bdfa:	c3                   	ret    

c001bdfb <x87Detect.nox87>:
c001bdfb:	b8 00 00 00 00       	mov    eax,0x0
c001be00:	c3                   	ret    

c001be01 <x87Save>:
c001be01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be05:	dd 30                	fnsave [eax]
c001be07:	c3                   	ret    

c001be08 <x87Load>:
c001be08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be0c:	dd 20                	frstor [eax]
c001be0e:	c3                   	ret    

c001be0f <x87Init>:
c001be0f:	0f 20 c0             	mov    eax,cr0
c001be12:	66 25 fb ff          	and    ax,0xfffb
c001be16:	66 0d 22 00          	or     ax,0x22
c001be1a:	0f 22 c0             	mov    cr0,eax
c001be1d:	db e3                	fninit 
c001be1f:	0f 06                	clts   
c001be21:	d9 2d e4 bd 01 c0    	fldcw  WORD PTR ds:0xc001bde4
c001be27:	c3                   	ret    

c001be28 <x87Close>:
c001be28:	c3                   	ret    
c001be29:	66 90                	xchg   ax,ax
c001be2b:	90                   	nop

c001be2c <__do_global_ctors_aux>:
c001be2c:	a1 dc cd 01 c0       	mov    eax,ds:0xc001cddc
c001be31:	83 f8 ff             	cmp    eax,0xffffffff
c001be34:	74 1a                	je     c001be50 <__do_global_ctors_aux+0x24>
c001be36:	55                   	push   ebp
c001be37:	89 e5                	mov    ebp,esp
c001be39:	53                   	push   ebx
c001be3a:	52                   	push   edx
c001be3b:	bb dc cd 01 c0       	mov    ebx,0xc001cddc
c001be40:	ff d0                	call   eax
c001be42:	83 eb 04             	sub    ebx,0x4
c001be45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be47:	83 f8 ff             	cmp    eax,0xffffffff
c001be4a:	75 f4                	jne    c001be40 <__do_global_ctors_aux+0x14>
c001be4c:	58                   	pop    eax
c001be4d:	5b                   	pop    ebx
c001be4e:	5d                   	pop    ebp
c001be4f:	c3                   	ret    
c001be50:	c3                   	ret    
c001be51:	66 90                	xchg   ax,ax
c001be53:	90                   	nop

c001be54 <__divdi3>:
c001be54:	55                   	push   ebp
c001be55:	57                   	push   edi
c001be56:	56                   	push   esi
c001be57:	53                   	push   ebx
c001be58:	83 ec 1c             	sub    esp,0x1c
c001be5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be72:	85 db                	test   ebx,ebx
c001be74:	0f 88 8e 00 00 00    	js     c001bf08 <__divdi3+0xb4>
c001be7a:	89 dd                	mov    ebp,ebx
c001be7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be84:	89 d3                	mov    ebx,edx
c001be86:	85 d2                	test   edx,edx
c001be88:	79 0d                	jns    c001be97 <__divdi3+0x43>
c001be8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be8e:	f7 d8                	neg    eax
c001be90:	83 d2 00             	adc    edx,0x0
c001be93:	f7 da                	neg    edx
c001be95:	89 d3                	mov    ebx,edx
c001be97:	89 c7                	mov    edi,eax
c001be99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be9c:	85 db                	test   ebx,ebx
c001be9e:	75 48                	jne    c001bee8 <__divdi3+0x94>
c001bea0:	39 ef                	cmp    edi,ebp
c001bea2:	76 24                	jbe    c001bec8 <__divdi3+0x74>
c001bea4:	89 ea                	mov    edx,ebp
c001bea6:	f7 f7                	div    edi
c001bea8:	89 c1                	mov    ecx,eax
c001beaa:	31 f6                	xor    esi,esi
c001beac:	89 c8                	mov    eax,ecx
c001beae:	89 f2                	mov    edx,esi
c001beb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001beb4:	85 c9                	test   ecx,ecx
c001beb6:	74 07                	je     c001bebf <__divdi3+0x6b>
c001beb8:	f7 d8                	neg    eax
c001beba:	83 d2 00             	adc    edx,0x0
c001bebd:	f7 da                	neg    edx
c001bebf:	83 c4 1c             	add    esp,0x1c
c001bec2:	5b                   	pop    ebx
c001bec3:	5e                   	pop    esi
c001bec4:	5f                   	pop    edi
c001bec5:	5d                   	pop    ebp
c001bec6:	c3                   	ret    
c001bec7:	90                   	nop
c001bec8:	85 ff                	test   edi,edi
c001beca:	75 0b                	jne    c001bed7 <__divdi3+0x83>
c001becc:	b8 01 00 00 00       	mov    eax,0x1
c001bed1:	31 d2                	xor    edx,edx
c001bed3:	f7 f3                	div    ebx
c001bed5:	89 c7                	mov    edi,eax
c001bed7:	31 d2                	xor    edx,edx
c001bed9:	89 e8                	mov    eax,ebp
c001bedb:	f7 f7                	div    edi
c001bedd:	89 c6                	mov    esi,eax
c001bedf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bee2:	f7 f7                	div    edi
c001bee4:	89 c1                	mov    ecx,eax
c001bee6:	eb c4                	jmp    c001beac <__divdi3+0x58>
c001bee8:	39 eb                	cmp    ebx,ebp
c001beea:	77 3c                	ja     c001bf28 <__divdi3+0xd4>
c001beec:	0f bd f3             	bsr    esi,ebx
c001beef:	83 f6 1f             	xor    esi,0x1f
c001bef2:	75 40                	jne    c001bf34 <__divdi3+0xe0>
c001bef4:	39 eb                	cmp    ebx,ebp
c001bef6:	72 09                	jb     c001bf01 <__divdi3+0xad>
c001bef8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001befb:	0f 87 97 00 00 00    	ja     c001bf98 <__divdi3+0x144>
c001bf01:	b9 01 00 00 00       	mov    ecx,0x1
c001bf06:	eb a4                	jmp    c001beac <__divdi3+0x58>
c001bf08:	f7 d9                	neg    ecx
c001bf0a:	83 d3 00             	adc    ebx,0x0
c001bf0d:	f7 db                	neg    ebx
c001bf0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf16:	89 dd                	mov    ebp,ebx
c001bf18:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf20:	e9 5f ff ff ff       	jmp    c001be84 <__divdi3+0x30>
c001bf25:	8d 76 00             	lea    esi,[esi+0x0]
c001bf28:	31 f6                	xor    esi,esi
c001bf2a:	31 c9                	xor    ecx,ecx
c001bf2c:	e9 7b ff ff ff       	jmp    c001beac <__divdi3+0x58>
c001bf31:	8d 76 00             	lea    esi,[esi+0x0]
c001bf34:	b8 20 00 00 00       	mov    eax,0x20
c001bf39:	29 f0                	sub    eax,esi
c001bf3b:	89 f1                	mov    ecx,esi
c001bf3d:	d3 e3                	shl    ebx,cl
c001bf3f:	89 fa                	mov    edx,edi
c001bf41:	88 c1                	mov    cl,al
c001bf43:	d3 ea                	shr    edx,cl
c001bf45:	09 da                	or     edx,ebx
c001bf47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf4b:	89 f1                	mov    ecx,esi
c001bf4d:	d3 e7                	shl    edi,cl
c001bf4f:	89 eb                	mov    ebx,ebp
c001bf51:	88 c1                	mov    cl,al
c001bf53:	d3 eb                	shr    ebx,cl
c001bf55:	89 f1                	mov    ecx,esi
c001bf57:	d3 e5                	shl    ebp,cl
c001bf59:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf5c:	88 c1                	mov    cl,al
c001bf5e:	d3 ea                	shr    edx,cl
c001bf60:	09 d5                	or     ebp,edx
c001bf62:	89 e8                	mov    eax,ebp
c001bf64:	89 da                	mov    edx,ebx
c001bf66:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf6a:	89 d3                	mov    ebx,edx
c001bf6c:	89 c5                	mov    ebp,eax
c001bf6e:	f7 e7                	mul    edi
c001bf70:	39 d3                	cmp    ebx,edx
c001bf72:	72 18                	jb     c001bf8c <__divdi3+0x138>
c001bf74:	74 0a                	je     c001bf80 <__divdi3+0x12c>
c001bf76:	89 e9                	mov    ecx,ebp
c001bf78:	31 f6                	xor    esi,esi
c001bf7a:	e9 2d ff ff ff       	jmp    c001beac <__divdi3+0x58>
c001bf7f:	90                   	nop
c001bf80:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf83:	89 f1                	mov    ecx,esi
c001bf85:	d3 e7                	shl    edi,cl
c001bf87:	39 c7                	cmp    edi,eax
c001bf89:	73 eb                	jae    c001bf76 <__divdi3+0x122>
c001bf8b:	90                   	nop
c001bf8c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf8f:	31 f6                	xor    esi,esi
c001bf91:	e9 16 ff ff ff       	jmp    c001beac <__divdi3+0x58>
c001bf96:	66 90                	xchg   ax,ax
c001bf98:	31 c9                	xor    ecx,ecx
c001bf9a:	e9 0d ff ff ff       	jmp    c001beac <__divdi3+0x58>
c001bf9f:	90                   	nop

c001bfa0 <__moddi3>:
c001bfa0:	55                   	push   ebp
c001bfa1:	57                   	push   edi
c001bfa2:	56                   	push   esi
c001bfa3:	53                   	push   ebx
c001bfa4:	83 ec 2c             	sub    esp,0x2c
c001bfa7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bfaf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfb3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bfb7:	85 db                	test   ebx,ebx
c001bfb9:	0f 88 85 00 00 00    	js     c001c044 <__moddi3+0xa4>
c001bfbf:	89 de                	mov    esi,ebx
c001bfc1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfc9:	89 d7                	mov    edi,edx
c001bfcb:	85 d2                	test   edx,edx
c001bfcd:	79 09                	jns    c001bfd8 <__moddi3+0x38>
c001bfcf:	f7 d8                	neg    eax
c001bfd1:	83 d2 00             	adc    edx,0x0
c001bfd4:	f7 da                	neg    edx
c001bfd6:	89 d7                	mov    edi,edx
c001bfd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfdc:	89 cd                	mov    ebp,ecx
c001bfde:	85 ff                	test   edi,edi
c001bfe0:	75 52                	jne    c001c034 <__moddi3+0x94>
c001bfe2:	89 c3                	mov    ebx,eax
c001bfe4:	39 f0                	cmp    eax,esi
c001bfe6:	76 24                	jbe    c001c00c <__moddi3+0x6c>
c001bfe8:	89 c8                	mov    eax,ecx
c001bfea:	89 f2                	mov    edx,esi
c001bfec:	f7 f3                	div    ebx
c001bfee:	89 d6                	mov    esi,edx
c001bff0:	89 f0                	mov    eax,esi
c001bff2:	31 d2                	xor    edx,edx
c001bff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bff8:	85 c9                	test   ecx,ecx
c001bffa:	74 07                	je     c001c003 <__moddi3+0x63>
c001bffc:	f7 d8                	neg    eax
c001bffe:	83 d2 00             	adc    edx,0x0
c001c001:	f7 da                	neg    edx
c001c003:	83 c4 2c             	add    esp,0x2c
c001c006:	5b                   	pop    ebx
c001c007:	5e                   	pop    esi
c001c008:	5f                   	pop    edi
c001c009:	5d                   	pop    ebp
c001c00a:	c3                   	ret    
c001c00b:	90                   	nop
c001c00c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c010:	85 db                	test   ebx,ebx
c001c012:	75 0d                	jne    c001c021 <__moddi3+0x81>
c001c014:	b8 01 00 00 00       	mov    eax,0x1
c001c019:	31 d2                	xor    edx,edx
c001c01b:	f7 f7                	div    edi
c001c01d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c021:	89 f0                	mov    eax,esi
c001c023:	31 d2                	xor    edx,edx
c001c025:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c029:	f7 f7                	div    edi
c001c02b:	89 e8                	mov    eax,ebp
c001c02d:	f7 f7                	div    edi
c001c02f:	89 d6                	mov    esi,edx
c001c031:	eb bd                	jmp    c001bff0 <__moddi3+0x50>
c001c033:	90                   	nop
c001c034:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c038:	39 f7                	cmp    edi,esi
c001c03a:	76 20                	jbe    c001c05c <__moddi3+0xbc>
c001c03c:	89 c8                	mov    eax,ecx
c001c03e:	89 f2                	mov    edx,esi
c001c040:	eb b2                	jmp    c001bff4 <__moddi3+0x54>
c001c042:	66 90                	xchg   ax,ax
c001c044:	f7 d9                	neg    ecx
c001c046:	83 d3 00             	adc    ebx,0x0
c001c049:	f7 db                	neg    ebx
c001c04b:	89 de                	mov    esi,ebx
c001c04d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c055:	e9 6f ff ff ff       	jmp    c001bfc9 <__moddi3+0x29>
c001c05a:	66 90                	xchg   ax,ax
c001c05c:	0f bd c7             	bsr    eax,edi
c001c05f:	83 f0 1f             	xor    eax,0x1f
c001c062:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c066:	75 24                	jne    c001c08c <__moddi3+0xec>
c001c068:	39 f7                	cmp    edi,esi
c001c06a:	72 06                	jb     c001c072 <__moddi3+0xd2>
c001c06c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c070:	77 0c                	ja     c001c07e <__moddi3+0xde>
c001c072:	89 e9                	mov    ecx,ebp
c001c074:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c078:	19 fe                	sbb    esi,edi
c001c07a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c07e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c082:	89 f2                	mov    edx,esi
c001c084:	e9 6b ff ff ff       	jmp    c001bff4 <__moddi3+0x54>
c001c089:	8d 76 00             	lea    esi,[esi+0x0]
c001c08c:	b8 20 00 00 00       	mov    eax,0x20
c001c091:	89 c2                	mov    edx,eax
c001c093:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c097:	29 da                	sub    edx,ebx
c001c099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c09d:	88 d9                	mov    cl,bl
c001c09f:	d3 e7                	shl    edi,cl
c001c0a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0a5:	88 d1                	mov    cl,dl
c001c0a7:	d3 e8                	shr    eax,cl
c001c0a9:	09 c7                	or     edi,eax
c001c0ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c0af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0b3:	89 d8                	mov    eax,ebx
c001c0b5:	88 d9                	mov    cl,bl
c001c0b7:	d3 e7                	shl    edi,cl
c001c0b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c0bd:	89 f3                	mov    ebx,esi
c001c0bf:	88 d1                	mov    cl,dl
c001c0c1:	d3 eb                	shr    ebx,cl
c001c0c3:	89 c7                	mov    edi,eax
c001c0c5:	88 c1                	mov    cl,al
c001c0c7:	d3 e6                	shl    esi,cl
c001c0c9:	89 e8                	mov    eax,ebp
c001c0cb:	88 d1                	mov    cl,dl
c001c0cd:	d3 e8                	shr    eax,cl
c001c0cf:	09 f0                	or     eax,esi
c001c0d1:	89 f9                	mov    ecx,edi
c001c0d3:	d3 e5                	shl    ebp,cl
c001c0d5:	89 da                	mov    edx,ebx
c001c0d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c0db:	89 d3                	mov    ebx,edx
c001c0dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c0e1:	89 c6                	mov    esi,eax
c001c0e3:	89 d1                	mov    ecx,edx
c001c0e5:	39 d3                	cmp    ebx,edx
c001c0e7:	72 27                	jb     c001c110 <__moddi3+0x170>
c001c0e9:	74 21                	je     c001c10c <__moddi3+0x16c>
c001c0eb:	29 f5                	sub    ebp,esi
c001c0ed:	19 cb                	sbb    ebx,ecx
c001c0ef:	89 de                	mov    esi,ebx
c001c0f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c0f5:	d3 e6                	shl    esi,cl
c001c0f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0fb:	89 f9                	mov    ecx,edi
c001c0fd:	d3 ed                	shr    ebp,cl
c001c0ff:	09 ee                	or     esi,ebp
c001c101:	89 f0                	mov    eax,esi
c001c103:	d3 eb                	shr    ebx,cl
c001c105:	89 da                	mov    edx,ebx
c001c107:	e9 e8 fe ff ff       	jmp    c001bff4 <__moddi3+0x54>
c001c10c:	39 c5                	cmp    ebp,eax
c001c10e:	73 db                	jae    c001c0eb <__moddi3+0x14b>
c001c110:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c114:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c118:	89 d1                	mov    ecx,edx
c001c11a:	89 c6                	mov    esi,eax
c001c11c:	eb cd                	jmp    c001c0eb <__moddi3+0x14b>
c001c11e:	66 90                	xchg   ax,ax

c001c120 <__udivdi3>:
c001c120:	55                   	push   ebp
c001c121:	57                   	push   edi
c001c122:	56                   	push   esi
c001c123:	53                   	push   ebx
c001c124:	83 ec 1c             	sub    esp,0x1c
c001c127:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c12b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c12f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c133:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c137:	85 d2                	test   edx,edx
c001c139:	75 41                	jne    c001c17c <__udivdi3+0x5c>
c001c13b:	39 f7                	cmp    edi,esi
c001c13d:	76 15                	jbe    c001c154 <__udivdi3+0x34>
c001c13f:	89 e8                	mov    eax,ebp
c001c141:	89 f2                	mov    edx,esi
c001c143:	f7 f7                	div    edi
c001c145:	31 db                	xor    ebx,ebx
c001c147:	89 da                	mov    edx,ebx
c001c149:	83 c4 1c             	add    esp,0x1c
c001c14c:	5b                   	pop    ebx
c001c14d:	5e                   	pop    esi
c001c14e:	5f                   	pop    edi
c001c14f:	5d                   	pop    ebp
c001c150:	c3                   	ret    
c001c151:	8d 76 00             	lea    esi,[esi+0x0]
c001c154:	89 f9                	mov    ecx,edi
c001c156:	85 ff                	test   edi,edi
c001c158:	75 0b                	jne    c001c165 <__udivdi3+0x45>
c001c15a:	b8 01 00 00 00       	mov    eax,0x1
c001c15f:	31 d2                	xor    edx,edx
c001c161:	f7 f7                	div    edi
c001c163:	89 c1                	mov    ecx,eax
c001c165:	31 d2                	xor    edx,edx
c001c167:	89 f0                	mov    eax,esi
c001c169:	f7 f1                	div    ecx
c001c16b:	89 c3                	mov    ebx,eax
c001c16d:	89 e8                	mov    eax,ebp
c001c16f:	f7 f1                	div    ecx
c001c171:	89 da                	mov    edx,ebx
c001c173:	83 c4 1c             	add    esp,0x1c
c001c176:	5b                   	pop    ebx
c001c177:	5e                   	pop    esi
c001c178:	5f                   	pop    edi
c001c179:	5d                   	pop    ebp
c001c17a:	c3                   	ret    
c001c17b:	90                   	nop
c001c17c:	39 f2                	cmp    edx,esi
c001c17e:	77 1c                	ja     c001c19c <__udivdi3+0x7c>
c001c180:	0f bd da             	bsr    ebx,edx
c001c183:	83 f3 1f             	xor    ebx,0x1f
c001c186:	75 24                	jne    c001c1ac <__udivdi3+0x8c>
c001c188:	39 f2                	cmp    edx,esi
c001c18a:	72 08                	jb     c001c194 <__udivdi3+0x74>
c001c18c:	39 ef                	cmp    edi,ebp
c001c18e:	0f 87 84 00 00 00    	ja     c001c218 <__udivdi3+0xf8>
c001c194:	b8 01 00 00 00       	mov    eax,0x1
c001c199:	eb ac                	jmp    c001c147 <__udivdi3+0x27>
c001c19b:	90                   	nop
c001c19c:	31 db                	xor    ebx,ebx
c001c19e:	31 c0                	xor    eax,eax
c001c1a0:	89 da                	mov    edx,ebx
c001c1a2:	83 c4 1c             	add    esp,0x1c
c001c1a5:	5b                   	pop    ebx
c001c1a6:	5e                   	pop    esi
c001c1a7:	5f                   	pop    edi
c001c1a8:	5d                   	pop    ebp
c001c1a9:	c3                   	ret    
c001c1aa:	66 90                	xchg   ax,ax
c001c1ac:	b8 20 00 00 00       	mov    eax,0x20
c001c1b1:	29 d8                	sub    eax,ebx
c001c1b3:	88 d9                	mov    cl,bl
c001c1b5:	d3 e2                	shl    edx,cl
c001c1b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c1bb:	89 fa                	mov    edx,edi
c001c1bd:	88 c1                	mov    cl,al
c001c1bf:	d3 ea                	shr    edx,cl
c001c1c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1c5:	09 d1                	or     ecx,edx
c001c1c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1cb:	88 d9                	mov    cl,bl
c001c1cd:	d3 e7                	shl    edi,cl
c001c1cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1d3:	89 f7                	mov    edi,esi
c001c1d5:	88 c1                	mov    cl,al
c001c1d7:	d3 ef                	shr    edi,cl
c001c1d9:	88 d9                	mov    cl,bl
c001c1db:	d3 e6                	shl    esi,cl
c001c1dd:	89 ea                	mov    edx,ebp
c001c1df:	88 c1                	mov    cl,al
c001c1e1:	d3 ea                	shr    edx,cl
c001c1e3:	09 d6                	or     esi,edx
c001c1e5:	89 f0                	mov    eax,esi
c001c1e7:	89 fa                	mov    edx,edi
c001c1e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c1ed:	89 d7                	mov    edi,edx
c001c1ef:	89 c6                	mov    esi,eax
c001c1f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1f5:	39 d7                	cmp    edi,edx
c001c1f7:	72 13                	jb     c001c20c <__udivdi3+0xec>
c001c1f9:	74 09                	je     c001c204 <__udivdi3+0xe4>
c001c1fb:	89 f0                	mov    eax,esi
c001c1fd:	31 db                	xor    ebx,ebx
c001c1ff:	e9 43 ff ff ff       	jmp    c001c147 <__udivdi3+0x27>
c001c204:	88 d9                	mov    cl,bl
c001c206:	d3 e5                	shl    ebp,cl
c001c208:	39 c5                	cmp    ebp,eax
c001c20a:	73 ef                	jae    c001c1fb <__udivdi3+0xdb>
c001c20c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c20f:	31 db                	xor    ebx,ebx
c001c211:	e9 31 ff ff ff       	jmp    c001c147 <__udivdi3+0x27>
c001c216:	66 90                	xchg   ax,ax
c001c218:	31 c0                	xor    eax,eax
c001c21a:	e9 28 ff ff ff       	jmp    c001c147 <__udivdi3+0x27>
c001c21f:	90                   	nop

c001c220 <__umoddi3>:
c001c220:	55                   	push   ebp
c001c221:	57                   	push   edi
c001c222:	56                   	push   esi
c001c223:	53                   	push   ebx
c001c224:	83 ec 1c             	sub    esp,0x1c
c001c227:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c22b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c22f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c233:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c237:	89 da                	mov    edx,ebx
c001c239:	85 c0                	test   eax,eax
c001c23b:	75 37                	jne    c001c274 <__umoddi3+0x54>
c001c23d:	39 df                	cmp    edi,ebx
c001c23f:	76 13                	jbe    c001c254 <__umoddi3+0x34>
c001c241:	89 f0                	mov    eax,esi
c001c243:	f7 f7                	div    edi
c001c245:	89 d0                	mov    eax,edx
c001c247:	31 d2                	xor    edx,edx
c001c249:	83 c4 1c             	add    esp,0x1c
c001c24c:	5b                   	pop    ebx
c001c24d:	5e                   	pop    esi
c001c24e:	5f                   	pop    edi
c001c24f:	5d                   	pop    ebp
c001c250:	c3                   	ret    
c001c251:	8d 76 00             	lea    esi,[esi+0x0]
c001c254:	89 fd                	mov    ebp,edi
c001c256:	85 ff                	test   edi,edi
c001c258:	75 0b                	jne    c001c265 <__umoddi3+0x45>
c001c25a:	b8 01 00 00 00       	mov    eax,0x1
c001c25f:	31 d2                	xor    edx,edx
c001c261:	f7 f7                	div    edi
c001c263:	89 c5                	mov    ebp,eax
c001c265:	89 d8                	mov    eax,ebx
c001c267:	31 d2                	xor    edx,edx
c001c269:	f7 f5                	div    ebp
c001c26b:	89 f0                	mov    eax,esi
c001c26d:	f7 f5                	div    ebp
c001c26f:	89 d0                	mov    eax,edx
c001c271:	eb d4                	jmp    c001c247 <__umoddi3+0x27>
c001c273:	90                   	nop
c001c274:	89 f1                	mov    ecx,esi
c001c276:	39 d8                	cmp    eax,ebx
c001c278:	76 0a                	jbe    c001c284 <__umoddi3+0x64>
c001c27a:	89 f0                	mov    eax,esi
c001c27c:	83 c4 1c             	add    esp,0x1c
c001c27f:	5b                   	pop    ebx
c001c280:	5e                   	pop    esi
c001c281:	5f                   	pop    edi
c001c282:	5d                   	pop    ebp
c001c283:	c3                   	ret    
c001c284:	0f bd e8             	bsr    ebp,eax
c001c287:	83 f5 1f             	xor    ebp,0x1f
c001c28a:	75 1c                	jne    c001c2a8 <__umoddi3+0x88>
c001c28c:	39 d8                	cmp    eax,ebx
c001c28e:	72 04                	jb     c001c294 <__umoddi3+0x74>
c001c290:	39 f7                	cmp    edi,esi
c001c292:	77 08                	ja     c001c29c <__umoddi3+0x7c>
c001c294:	89 da                	mov    edx,ebx
c001c296:	29 fe                	sub    esi,edi
c001c298:	19 c2                	sbb    edx,eax
c001c29a:	89 f1                	mov    ecx,esi
c001c29c:	89 c8                	mov    eax,ecx
c001c29e:	83 c4 1c             	add    esp,0x1c
c001c2a1:	5b                   	pop    ebx
c001c2a2:	5e                   	pop    esi
c001c2a3:	5f                   	pop    edi
c001c2a4:	5d                   	pop    ebp
c001c2a5:	c3                   	ret    
c001c2a6:	66 90                	xchg   ax,ax
c001c2a8:	ba 20 00 00 00       	mov    edx,0x20
c001c2ad:	29 ea                	sub    edx,ebp
c001c2af:	89 e9                	mov    ecx,ebp
c001c2b1:	d3 e0                	shl    eax,cl
c001c2b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2b7:	89 f8                	mov    eax,edi
c001c2b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2bd:	88 d1                	mov    cl,dl
c001c2bf:	d3 e8                	shr    eax,cl
c001c2c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2c5:	09 c1                	or     ecx,eax
c001c2c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2cb:	89 e9                	mov    ecx,ebp
c001c2cd:	d3 e7                	shl    edi,cl
c001c2cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2d3:	89 d8                	mov    eax,ebx
c001c2d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2d9:	88 d1                	mov    cl,dl
c001c2db:	d3 e8                	shr    eax,cl
c001c2dd:	89 c7                	mov    edi,eax
c001c2df:	89 e9                	mov    ecx,ebp
c001c2e1:	d3 e3                	shl    ebx,cl
c001c2e3:	89 f0                	mov    eax,esi
c001c2e5:	88 d1                	mov    cl,dl
c001c2e7:	d3 e8                	shr    eax,cl
c001c2e9:	09 d8                	or     eax,ebx
c001c2eb:	89 e9                	mov    ecx,ebp
c001c2ed:	d3 e6                	shl    esi,cl
c001c2ef:	89 f3                	mov    ebx,esi
c001c2f1:	89 fa                	mov    edx,edi
c001c2f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2f7:	89 d1                	mov    ecx,edx
c001c2f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2fd:	89 c6                	mov    esi,eax
c001c2ff:	89 d7                	mov    edi,edx
c001c301:	39 d1                	cmp    ecx,edx
c001c303:	72 27                	jb     c001c32c <__umoddi3+0x10c>
c001c305:	74 21                	je     c001c328 <__umoddi3+0x108>
c001c307:	89 ca                	mov    edx,ecx
c001c309:	29 f3                	sub    ebx,esi
c001c30b:	19 fa                	sbb    edx,edi
c001c30d:	89 d0                	mov    eax,edx
c001c30f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c313:	d3 e0                	shl    eax,cl
c001c315:	89 e9                	mov    ecx,ebp
c001c317:	d3 eb                	shr    ebx,cl
c001c319:	09 d8                	or     eax,ebx
c001c31b:	d3 ea                	shr    edx,cl
c001c31d:	83 c4 1c             	add    esp,0x1c
c001c320:	5b                   	pop    ebx
c001c321:	5e                   	pop    esi
c001c322:	5f                   	pop    edi
c001c323:	5d                   	pop    ebp
c001c324:	c3                   	ret    
c001c325:	8d 76 00             	lea    esi,[esi+0x0]
c001c328:	39 c3                	cmp    ebx,eax
c001c32a:	73 db                	jae    c001c307 <__umoddi3+0xe7>
c001c32c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c330:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c334:	89 d7                	mov    edi,edx
c001c336:	89 c6                	mov    esi,eax
c001c338:	eb cd                	jmp    c001c307 <__umoddi3+0xe7>

Disassembly of section .init:

c001c33a <_init>:
c001c33a:	55                   	push   ebp
c001c33b:	89 e5                	mov    ebp,esp
c001c33d:	e8 b2 3d fe ff       	call   c00000f4 <frame_dummy>
c001c342:	e8 e5 fa ff ff       	call   c001be2c <__do_global_ctors_aux>
c001c347:	5d                   	pop    ebp
c001c348:	c3                   	ret    

Disassembly of section .fini:

c001c349 <_fini>:
c001c349:	55                   	push   ebp
c001c34a:	89 e5                	mov    ebp,esp
c001c34c:	e8 33 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c351:	5d                   	pop    ebp
c001c352:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c354 <Computer::~Computer()>:
c001c354:	83 ec 0c             	sub    esp,0xc
c001c357:	ba 18 d6 01 c0       	mov    edx,0xc001d618
c001c35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c360:	89 10                	mov    DWORD PTR [eax],edx
c001c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c366:	83 ec 0c             	sub    esp,0xc
c001c369:	50                   	push   eax
c001c36a:	e8 ab f4 fe ff       	call   c000b81a <Device::~Device()>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	90                   	nop
c001c373:	83 c4 0c             	add    esp,0xc
c001c376:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c378 <Computer::~Computer()>:
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	83 ec 0c             	sub    esp,0xc
c001c37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c382:	e8 cd ff ff ff       	call   c001c354 <Computer::~Computer()>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	83 ec 08             	sub    esp,0x8
c001c38d:	68 70 01 00 00       	push   0x170
c001c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c396:	e8 47 e0 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	83 c4 0c             	add    esp,0xc
c001c3a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c3a2 <idleCommon()>:
c001c3a2:	83 ec 0c             	sub    esp,0xc
c001c3a5:	fa                   	cli    
c001c3a6:	ff 05 e8 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee8
c001c3ac:	e8 73 74 ff ff       	call   c0013824 <schedule()>
c001c3b1:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c001c3b6:	48                   	dec    eax
c001c3b7:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001c3bc:	75 01                	jne    c001c3bf <idleCommon()+0x1d>
c001c3be:	fb                   	sti    
c001c3bf:	83 c4 0c             	add    esp,0xc
c001c3c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3c4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3c4:	90                   	nop
c001c3c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3c6 <LinkedList<UnixFile>::LinkedList()>:
c001c3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c406:	90                   	nop
c001c407:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c408 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c410:	75 10                	jne    c001c422 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c412:	83 ec 0c             	sub    esp,0xc
c001c415:	68 78 d8 01 c0       	push   0xc001d878
c001c41a:	e8 04 3d ff ff       	call   c0010123 <KePanic(char const*)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c426:	8b 00                	mov    eax,DWORD PTR [eax]
c001c428:	85 c0                	test   eax,eax
c001c42a:	74 34                	je     c001c460 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c433:	85 c0                	test   eax,eax
c001c435:	74 29                	je     c001c460 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c43e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c442:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c449:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c44d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c457:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c45e:	eb 65                	jmp    c001c4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c464:	8b 00                	mov    eax,DWORD PTR [eax]
c001c466:	85 c0                	test   eax,eax
c001c468:	75 4b                	jne    c001c4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c471:	85 c0                	test   eax,eax
c001c473:	75 40                	jne    c001c4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c479:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c47d:	89 10                	mov    DWORD PTR [eax],edx
c001c47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c483:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c487:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c491:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c49f:	85 c0                	test   eax,eax
c001c4a1:	74 22                	je     c001c4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4a3:	83 ec 0c             	sub    esp,0xc
c001c4a6:	68 9a d8 01 c0       	push   0xc001d89a
c001c4ab:	e8 73 3c ff ff       	call   c0010123 <KePanic(char const*)>
c001c4b0:	83 c4 10             	add    esp,0x10
c001c4b3:	eb 10                	jmp    c001c4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4b5:	83 ec 0c             	sub    esp,0xc
c001c4b8:	68 a4 d8 01 c0       	push   0xc001d8a4
c001c4bd:	e8 61 3c ff ff       	call   c0010123 <KePanic(char const*)>
c001c4c2:	83 c4 10             	add    esp,0x10
c001c4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4cc:	8d 50 01             	lea    edx,[eax+0x1]
c001c4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4d6:	90                   	nop
c001c4d7:	83 c4 0c             	add    esp,0xc
c001c4da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c4dc <LinkedList<UnixFile>::getFirstElement()>:
c001c4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c4e4 <LinkedList<UnixFile>::removeFirst()>:
c001c4e4:	83 ec 0c             	sub    esp,0xc
c001c4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ed:	85 c0                	test   eax,eax
c001c4ef:	75 12                	jne    c001c503 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c4f1:	83 ec 0c             	sub    esp,0xc
c001c4f4:	68 b0 d8 01 c0       	push   0xc001d8b0
c001c4f9:	e8 25 3c ff ff       	call   c0010123 <KePanic(char const*)>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	eb 7e                	jmp    c001c581 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c507:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c50a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c50d:	85 c0                	test   eax,eax
c001c50f:	74 10                	je     c001c521 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c511:	83 ec 0c             	sub    esp,0xc
c001c514:	68 fb d8 01 c0       	push   0xc001d8fb
c001c519:	e8 05 3c ff ff       	call   c0010123 <KePanic(char const*)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c525:	8b 00                	mov    eax,DWORD PTR [eax]
c001c527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52a:	85 c0                	test   eax,eax
c001c52c:	75 33                	jne    c001c561 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c532:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54a:	83 f8 01             	cmp    eax,0x1
c001c54d:	74 21                	je     c001c570 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c54f:	83 ec 0c             	sub    esp,0xc
c001c552:	68 d4 d8 01 c0       	push   0xc001d8d4
c001c557:	e8 c7 3b ff ff       	call   c0010123 <KePanic(char const*)>
c001c55c:	83 c4 10             	add    esp,0x10
c001c55f:	eb 0f                	jmp    c001c570 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c565:	8b 00                	mov    eax,DWORD PTR [eax]
c001c567:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56e:	89 10                	mov    DWORD PTR [eax],edx
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c577:	8d 50 ff             	lea    edx,[eax-0x1]
c001c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c581:	83 c4 0c             	add    esp,0xc
c001c584:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c586 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c58a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c58d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c58e <DriverlessDevice::~DriverlessDevice()>:
c001c58e:	ba 3c df 01 c0       	mov    edx,0xc001df3c
c001c593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c597:	89 10                	mov    DWORD PTR [eax],edx
c001c599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59d:	50                   	push   eax
c001c59e:	e8 77 f2 fe ff       	call   c000b81a <Device::~Device()>
c001c5a3:	83 c4 04             	add    esp,0x4
c001c5a6:	90                   	nop
c001c5a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c5a8 <DriverlessDevice::~DriverlessDevice()>:
c001c5a8:	83 ec 0c             	sub    esp,0xc
c001c5ab:	83 ec 0c             	sub    esp,0xc
c001c5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5b2:	e8 d7 ff ff ff       	call   c001c58e <DriverlessDevice::~DriverlessDevice()>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	83 ec 08             	sub    esp,0x8
c001c5bd:	68 58 01 00 00       	push   0x158
c001c5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c6:	e8 17 de fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	83 c4 0c             	add    esp,0xc
c001c5d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c5d2 <LinkedList<Device>::addElement(Device*)>:
c001c5d2:	83 ec 0c             	sub    esp,0xc
c001c5d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c5da:	75 10                	jne    c001c5ec <LinkedList<Device>::addElement(Device*)+0x1a>
c001c5dc:	83 ec 0c             	sub    esp,0xc
c001c5df:	68 78 d8 01 c0       	push   0xc001d878
c001c5e4:	e8 3a 3b ff ff       	call   c0010123 <KePanic(char const*)>
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5f2:	85 c0                	test   eax,eax
c001c5f4:	74 3a                	je     c001c630 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5fd:	85 c0                	test   eax,eax
c001c5ff:	74 2f                	je     c001c630 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c60c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c61a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c621:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c624:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c62e:	eb 68                	jmp    c001c698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c634:	8b 00                	mov    eax,DWORD PTR [eax]
c001c636:	85 c0                	test   eax,eax
c001c638:	75 4e                	jne    c001c688 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c641:	85 c0                	test   eax,eax
c001c643:	75 43                	jne    c001c688 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c64d:	89 10                	mov    DWORD PTR [eax],edx
c001c64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c657:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c661:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c672:	85 c0                	test   eax,eax
c001c674:	74 22                	je     c001c698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c676:	83 ec 0c             	sub    esp,0xc
c001c679:	68 9a d8 01 c0       	push   0xc001d89a
c001c67e:	e8 a0 3a ff ff       	call   c0010123 <KePanic(char const*)>
c001c683:	83 c4 10             	add    esp,0x10
c001c686:	eb 10                	jmp    c001c698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c688:	83 ec 0c             	sub    esp,0xc
c001c68b:	68 a4 d8 01 c0       	push   0xc001d8a4
c001c690:	e8 8e 3a ff ff       	call   c0010123 <KePanic(char const*)>
c001c695:	83 c4 10             	add    esp,0x10
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c69f:	8d 50 01             	lea    edx,[eax+0x1]
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6a9:	90                   	nop
c001c6aa:	83 c4 0c             	add    esp,0xc
c001c6ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c6ae <LinkedList<Device>::LinkedList()>:
c001c6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ee:	90                   	nop
c001c6ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f6:	85 c0                	test   eax,eax
c001c6f8:	75 0e                	jne    c001c708 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c701:	85 c0                	test   eax,eax
c001c703:	75 03                	jne    c001c708 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c705:	b0 01                	mov    al,0x1
c001c707:	c3                   	ret    
c001c708:	b0 00                	mov    al,0x0
c001c70a:	90                   	nop
c001c70b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c710:	8b 00                	mov    eax,DWORD PTR [eax]
c001c712:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c714:	83 ec 0c             	sub    esp,0xc
c001c717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c71d:	85 c0                	test   eax,eax
c001c71f:	75 17                	jne    c001c738 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c721:	83 ec 0c             	sub    esp,0xc
c001c724:	68 b0 d8 01 c0       	push   0xc001d8b0
c001c729:	e8 f5 39 ff ff       	call   c0010123 <KePanic(char const*)>
c001c72e:	83 c4 10             	add    esp,0x10
c001c731:	e9 92 00 00 00       	jmp    c001c7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c736:	66 90                	xchg   ax,ax
c001c738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c73f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c742:	85 c0                	test   eax,eax
c001c744:	0f 95 c0             	setne  al
c001c747:	84 c0                	test   al,al
c001c749:	74 11                	je     c001c75c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c74b:	83 ec 0c             	sub    esp,0xc
c001c74e:	68 fb d8 01 c0       	push   0xc001d8fb
c001c753:	e8 cb 39 ff ff       	call   c0010123 <KePanic(char const*)>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	90                   	nop
c001c75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c760:	8b 00                	mov    eax,DWORD PTR [eax]
c001c762:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c765:	85 c0                	test   eax,eax
c001c767:	0f 94 c0             	sete   al
c001c76a:	84 c0                	test   al,al
c001c76c:	74 36                	je     c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c772:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c787:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c78a:	83 f8 01             	cmp    eax,0x1
c001c78d:	74 25                	je     c001c7b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c78f:	83 ec 0c             	sub    esp,0xc
c001c792:	68 d4 d8 01 c0       	push   0xc001d8d4
c001c797:	e8 87 39 ff ff       	call   c0010123 <KePanic(char const*)>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	eb 13                	jmp    c001c7b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b1:	89 10                	mov    DWORD PTR [eax],edx
c001c7b3:	90                   	nop
c001c7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7bb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7c8:	83 c4 0c             	add    esp,0xc
c001c7cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7cc:	83 ec 0c             	sub    esp,0xc
c001c7cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7d4:	75 12                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c7d6:	83 ec 0c             	sub    esp,0xc
c001c7d9:	68 78 d8 01 c0       	push   0xc001d878
c001c7de:	e8 40 39 ff ff       	call   c0010123 <KePanic(char const*)>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	66 90                	xchg   ax,ax
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ee:	85 c0                	test   eax,eax
c001c7f0:	74 36                	je     c001c828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7f9:	85 c0                	test   eax,eax
c001c7fb:	74 2b                	je     c001c828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c801:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c804:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c808:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c813:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c81d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c824:	eb 6a                	jmp    c001c890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c826:	66 90                	xchg   ax,ax
c001c828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c82e:	85 c0                	test   eax,eax
c001c830:	75 4e                	jne    c001c880 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c839:	85 c0                	test   eax,eax
c001c83b:	75 43                	jne    c001c880 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c845:	89 10                	mov    DWORD PTR [eax],edx
c001c847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c84f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c859:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c867:	85 c0                	test   eax,eax
c001c869:	74 25                	je     c001c890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c86b:	83 ec 0c             	sub    esp,0xc
c001c86e:	68 9a d8 01 c0       	push   0xc001d89a
c001c873:	e8 ab 38 ff ff       	call   c0010123 <KePanic(char const*)>
c001c878:	83 c4 10             	add    esp,0x10
c001c87b:	eb 13                	jmp    c001c890 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c87d:	8d 76 00             	lea    esi,[esi+0x0]
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	68 a4 d8 01 c0       	push   0xc001d8a4
c001c888:	e8 96 38 ff ff       	call   c0010123 <KePanic(char const*)>
c001c88d:	83 c4 10             	add    esp,0x10
c001c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c894:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c897:	8d 50 01             	lea    edx,[eax+0x1]
c001c89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8a1:	90                   	nop
c001c8a2:	83 c4 0c             	add    esp,0xc
c001c8a5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c8a8 <ACPI::~ACPI()>:
c001c8a8:	83 ec 0c             	sub    esp,0xc
c001c8ab:	ba a4 e4 01 c0       	mov    edx,0xc001e4a4
c001c8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b4:	89 10                	mov    DWORD PTR [eax],edx
c001c8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ba:	83 ec 0c             	sub    esp,0xc
c001c8bd:	50                   	push   eax
c001c8be:	e8 57 ef fe ff       	call   c000b81a <Device::~Device()>
c001c8c3:	83 c4 10             	add    esp,0x10
c001c8c6:	90                   	nop
c001c8c7:	83 c4 0c             	add    esp,0xc
c001c8ca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8cc <ACPI::~ACPI()>:
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	83 ec 0c             	sub    esp,0xc
c001c8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8d6:	e8 cd ff ff ff       	call   c001c8a8 <ACPI::~ACPI()>
c001c8db:	83 c4 10             	add    esp,0x10
c001c8de:	83 ec 08             	sub    esp,0x8
c001c8e1:	68 64 12 00 00       	push   0x1264
c001c8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ea:	e8 f3 da fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c8ef:	83 c4 10             	add    esp,0x10
c001c8f2:	83 c4 0c             	add    esp,0xc
c001c8f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c8f8 <LinkedList<Device>::~LinkedList()>:
c001c8f8:	90                   	nop
c001c8f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c8fc <LinkedList<Device>::isEmpty()>:
c001c8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c900:	8b 00                	mov    eax,DWORD PTR [eax]
c001c902:	85 c0                	test   eax,eax
c001c904:	75 0e                	jne    c001c914 <LinkedList<Device>::isEmpty()+0x18>
c001c906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c90a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c90d:	85 c0                	test   eax,eax
c001c90f:	75 03                	jne    c001c914 <LinkedList<Device>::isEmpty()+0x18>
c001c911:	b0 01                	mov    al,0x1
c001c913:	c3                   	ret    
c001c914:	b0 00                	mov    al,0x0
c001c916:	90                   	nop
c001c917:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c918 <LinkedList<Device>::getFirstElement()>:
c001c918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c91c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c91e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c920 <LinkedList<Device>::removeFirst()>:
c001c920:	83 ec 0c             	sub    esp,0xc
c001c923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c927:	8b 00                	mov    eax,DWORD PTR [eax]
c001c929:	85 c0                	test   eax,eax
c001c92b:	75 17                	jne    c001c944 <LinkedList<Device>::removeFirst()+0x24>
c001c92d:	83 ec 0c             	sub    esp,0xc
c001c930:	68 b0 d8 01 c0       	push   0xc001d8b0
c001c935:	e8 e9 37 ff ff       	call   c0010123 <KePanic(char const*)>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	e9 92 00 00 00       	jmp    c001c9d4 <LinkedList<Device>::removeFirst()+0xb4>
c001c942:	66 90                	xchg   ax,ax
c001c944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c948:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c94b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c951:	85 c0                	test   eax,eax
c001c953:	74 13                	je     c001c968 <LinkedList<Device>::removeFirst()+0x48>
c001c955:	83 ec 0c             	sub    esp,0xc
c001c958:	68 fb d8 01 c0       	push   0xc001d8fb
c001c95d:	e8 c1 37 ff ff       	call   c0010123 <KePanic(char const*)>
c001c962:	83 c4 10             	add    esp,0x10
c001c965:	8d 76 00             	lea    esi,[esi+0x0]
c001c968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c96e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c974:	85 c0                	test   eax,eax
c001c976:	75 34                	jne    c001c9ac <LinkedList<Device>::removeFirst()+0x8c>
c001c978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c986:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c991:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c994:	83 f8 01             	cmp    eax,0x1
c001c997:	74 27                	je     c001c9c0 <LinkedList<Device>::removeFirst()+0xa0>
c001c999:	83 ec 0c             	sub    esp,0xc
c001c99c:	68 d4 d8 01 c0       	push   0xc001d8d4
c001c9a1:	e8 7d 37 ff ff       	call   c0010123 <KePanic(char const*)>
c001c9a6:	83 c4 10             	add    esp,0x10
c001c9a9:	eb 15                	jmp    c001c9c0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9ab:	90                   	nop
c001c9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9b2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bc:	89 10                	mov    DWORD PTR [eax],edx
c001c9be:	66 90                	xchg   ax,ax
c001c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9c7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9d4:	83 c4 0c             	add    esp,0xc
c001c9d7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c9d8 <CPU::~CPU()>:
c001c9d8:	83 ec 0c             	sub    esp,0xc
c001c9db:	ba 40 e6 01 c0       	mov    edx,0xc001e640
c001c9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e4:	89 10                	mov    DWORD PTR [eax],edx
c001c9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ea:	83 ec 0c             	sub    esp,0xc
c001c9ed:	50                   	push   eax
c001c9ee:	e8 27 ee fe ff       	call   c000b81a <Device::~Device()>
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	90                   	nop
c001c9f7:	83 c4 0c             	add    esp,0xc
c001c9fa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c9fc <CPU::~CPU()>:
c001c9fc:	83 ec 0c             	sub    esp,0xc
c001c9ff:	83 ec 0c             	sub    esp,0xc
c001ca02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca06:	e8 cd ff ff ff       	call   c001c9d8 <CPU::~CPU()>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	83 ec 08             	sub    esp,0x8
c001ca11:	68 94 11 00 00       	push   0x1194
c001ca16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca1a:	e8 c3 d9 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	83 c4 0c             	add    esp,0xc
c001ca25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca28 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca28:	90                   	nop
c001ca29:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca2c <ThreadControlBlock::ThreadControlBlock()>:
c001ca2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca30:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca46:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca51:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca67:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca6f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca73:	90                   	nop
c001ca74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cab8:	90                   	nop
c001cab9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cabc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cabc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cac0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cac3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cac4 <PCI::~PCI()>:
c001cac4:	83 ec 0c             	sub    esp,0xc
c001cac7:	ba fc f3 01 c0       	mov    edx,0xc001f3fc
c001cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad0:	89 10                	mov    DWORD PTR [eax],edx
c001cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad6:	83 ec 0c             	sub    esp,0xc
c001cad9:	50                   	push   eax
c001cada:	e8 c5 e7 fe ff       	call   c000b2a4 <Bus::~Bus()>
c001cadf:	83 c4 10             	add    esp,0x10
c001cae2:	90                   	nop
c001cae3:	83 c4 0c             	add    esp,0xc
c001cae6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cae8 <PCI::~PCI()>:
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	83 ec 0c             	sub    esp,0xc
c001caee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf2:	e8 cd ff ff ff       	call   c001cac4 <PCI::~PCI()>
c001caf7:	83 c4 10             	add    esp,0x10
c001cafa:	83 ec 08             	sub    esp,0x8
c001cafd:	68 5c 01 00 00       	push   0x15c
c001cb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb06:	e8 d7 d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	83 c4 0c             	add    esp,0xc
c001cb11:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb12 <IDE::~IDE()>:
c001cb12:	83 ec 0c             	sub    esp,0xc
c001cb15:	ba b0 f4 01 c0       	mov    edx,0xc001f4b0
c001cb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1e:	89 10                	mov    DWORD PTR [eax],edx
c001cb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	50                   	push   eax
c001cb28:	e8 67 f1 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001cb2d:	83 c4 10             	add    esp,0x10
c001cb30:	90                   	nop
c001cb31:	83 c4 0c             	add    esp,0xc
c001cb34:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb36 <IDE::~IDE()>:
c001cb36:	83 ec 0c             	sub    esp,0xc
c001cb39:	83 ec 0c             	sub    esp,0xc
c001cb3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb40:	e8 cd ff ff ff       	call   c001cb12 <IDE::~IDE()>
c001cb45:	83 c4 10             	add    esp,0x10
c001cb48:	83 ec 08             	sub    esp,0x8
c001cb4b:	68 70 02 00 00       	push   0x270
c001cb50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb54:	e8 89 d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	83 c4 0c             	add    esp,0xc
c001cb5f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb60 <SATABus::~SATABus()>:
c001cb60:	83 ec 0c             	sub    esp,0xc
c001cb63:	ba 00 f5 01 c0       	mov    edx,0xc001f500
c001cb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6c:	89 10                	mov    DWORD PTR [eax],edx
c001cb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	50                   	push   eax
c001cb76:	e8 19 f1 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	90                   	nop
c001cb7f:	83 c4 0c             	add    esp,0xc
c001cb82:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb84 <SATABus::~SATABus()>:
c001cb84:	83 ec 0c             	sub    esp,0xc
c001cb87:	83 ec 0c             	sub    esp,0xc
c001cb8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb8e:	e8 cd ff ff ff       	call   c001cb60 <SATABus::~SATABus()>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	83 ec 08             	sub    esp,0x8
c001cb99:	68 64 01 00 00       	push   0x164
c001cb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba2:	e8 3b d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	83 c4 0c             	add    esp,0xc
c001cbad:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cbae <ATA::~ATA()>:
c001cbae:	83 ec 0c             	sub    esp,0xc
c001cbb1:	ba 40 f5 01 c0       	mov    edx,0xc001f540
c001cbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbba:	89 10                	mov    DWORD PTR [eax],edx
c001cbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc0:	83 ec 0c             	sub    esp,0xc
c001cbc3:	50                   	push   eax
c001cbc4:	e8 ad f1 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cbc9:	83 c4 10             	add    esp,0x10
c001cbcc:	90                   	nop
c001cbcd:	83 c4 0c             	add    esp,0xc
c001cbd0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cbd2 <ATA::~ATA()>:
c001cbd2:	83 ec 0c             	sub    esp,0xc
c001cbd5:	83 ec 0c             	sub    esp,0xc
c001cbd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbdc:	e8 cd ff ff ff       	call   c001cbae <ATA::~ATA()>
c001cbe1:	83 c4 10             	add    esp,0x10
c001cbe4:	83 ec 08             	sub    esp,0x8
c001cbe7:	68 7c 01 00 00       	push   0x17c
c001cbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf0:	e8 ed d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cbf5:	83 c4 10             	add    esp,0x10
c001cbf8:	83 c4 0c             	add    esp,0xc
c001cbfb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cbfc <ATAPI::~ATAPI()>:
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	ba 88 f5 01 c0       	mov    edx,0xc001f588
c001cc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc08:	89 10                	mov    DWORD PTR [eax],edx
c001cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0e:	83 ec 0c             	sub    esp,0xc
c001cc11:	50                   	push   eax
c001cc12:	e8 5f f1 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	90                   	nop
c001cc1b:	83 c4 0c             	add    esp,0xc
c001cc1e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc20 <ATAPI::~ATAPI()>:
c001cc20:	83 ec 0c             	sub    esp,0xc
c001cc23:	83 ec 0c             	sub    esp,0xc
c001cc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc2a:	e8 cd ff ff ff       	call   c001cbfc <ATAPI::~ATAPI()>
c001cc2f:	83 c4 10             	add    esp,0x10
c001cc32:	83 ec 08             	sub    esp,0x8
c001cc35:	68 84 01 00 00       	push   0x184
c001cc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc3e:	e8 9f d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	83 c4 0c             	add    esp,0xc
c001cc49:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc4a <SATA::~SATA()>:
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	ba 3c f6 01 c0       	mov    edx,0xc001f63c
c001cc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc56:	89 10                	mov    DWORD PTR [eax],edx
c001cc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5c:	83 ec 0c             	sub    esp,0xc
c001cc5f:	50                   	push   eax
c001cc60:	e8 11 f1 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cc65:	83 c4 10             	add    esp,0x10
c001cc68:	90                   	nop
c001cc69:	83 c4 0c             	add    esp,0xc
c001cc6c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc6e <SATA::~SATA()>:
c001cc6e:	83 ec 0c             	sub    esp,0xc
c001cc71:	83 ec 0c             	sub    esp,0xc
c001cc74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc78:	e8 cd ff ff ff       	call   c001cc4a <SATA::~SATA()>
c001cc7d:	83 c4 10             	add    esp,0x10
c001cc80:	83 ec 08             	sub    esp,0x8
c001cc83:	68 7c 01 00 00       	push   0x17c
c001cc88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8c:	e8 51 d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	83 c4 0c             	add    esp,0xc
c001cc97:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc98 <SATAPI::~SATAPI()>:
c001cc98:	83 ec 0c             	sub    esp,0xc
c001cc9b:	ba 74 f7 01 c0       	mov    edx,0xc001f774
c001cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca4:	89 10                	mov    DWORD PTR [eax],edx
c001cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccaa:	83 ec 0c             	sub    esp,0xc
c001ccad:	50                   	push   eax
c001ccae:	e8 c3 f0 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	90                   	nop
c001ccb7:	83 c4 0c             	add    esp,0xc
c001ccba:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ccbc <SATAPI::~SATAPI()>:
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	83 ec 0c             	sub    esp,0xc
c001ccc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc6:	e8 cd ff ff ff       	call   c001cc98 <SATAPI::~SATAPI()>
c001cccb:	83 c4 10             	add    esp,0x10
c001ccce:	83 ec 08             	sub    esp,0x8
c001ccd1:	68 84 01 00 00       	push   0x184
c001ccd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccda:	e8 03 d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	83 c4 0c             	add    esp,0xc
c001cce5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cce6 <IOAPIC::~IOAPIC()>:
c001cce6:	83 ec 0c             	sub    esp,0xc
c001cce9:	ba b4 f7 01 c0       	mov    edx,0xc001f7b4
c001ccee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf2:	89 10                	mov    DWORD PTR [eax],edx
c001ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	50                   	push   eax
c001ccfc:	e8 19 eb fe ff       	call   c000b81a <Device::~Device()>
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	90                   	nop
c001cd05:	83 c4 0c             	add    esp,0xc
c001cd08:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd0a <IOAPIC::~IOAPIC()>:
c001cd0a:	83 ec 0c             	sub    esp,0xc
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd14:	e8 cd ff ff ff       	call   c001cce6 <IOAPIC::~IOAPIC()>
c001cd19:	83 c4 10             	add    esp,0x10
c001cd1c:	83 ec 08             	sub    esp,0x8
c001cd1f:	68 68 01 00 00       	push   0x168
c001cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd28:	e8 b5 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cd2d:	83 c4 10             	add    esp,0x10
c001cd30:	83 c4 0c             	add    esp,0xc
c001cd33:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd34 <APICTimer::~APICTimer()>:
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	ba fc f7 01 c0       	mov    edx,0xc001f7fc
c001cd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd40:	89 10                	mov    DWORD PTR [eax],edx
c001cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd46:	83 ec 0c             	sub    esp,0xc
c001cd49:	50                   	push   eax
c001cd4a:	e8 d1 03 ff ff       	call   c000d120 <Timer::~Timer()>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	90                   	nop
c001cd53:	83 c4 0c             	add    esp,0xc
c001cd56:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd58 <APICTimer::~APICTimer()>:
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	83 ec 0c             	sub    esp,0xc
c001cd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd62:	e8 cd ff ff ff       	call   c001cd34 <APICTimer::~APICTimer()>
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	83 ec 08             	sub    esp,0x8
c001cd6d:	68 60 01 00 00       	push   0x160
c001cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd76:	e8 67 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	83 c4 0c             	add    esp,0xc
c001cd81:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd84 <PIT::~PIT()>:
c001cd84:	83 ec 0c             	sub    esp,0xc
c001cd87:	ba 4c f8 01 c0       	mov    edx,0xc001f84c
c001cd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd90:	89 10                	mov    DWORD PTR [eax],edx
c001cd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	50                   	push   eax
c001cd9a:	e8 81 03 ff ff       	call   c000d120 <Timer::~Timer()>
c001cd9f:	83 c4 10             	add    esp,0x10
c001cda2:	90                   	nop
c001cda3:	83 c4 0c             	add    esp,0xc
c001cda6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cda8 <PIT::~PIT()>:
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb2:	e8 cd ff ff ff       	call   c001cd84 <PIT::~PIT()>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	83 ec 08             	sub    esp,0x8
c001cdbd:	68 5c 01 00 00       	push   0x15c
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	e8 17 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	83 c4 0c             	add    esp,0xc
c001cdd1:	c3                   	ret    
