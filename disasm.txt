
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 86 02 00       	call   c0028658 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 92 02 c0       	mov    ebx,0xc0029202
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 10 92 02 c0    	cmp    ebx,0xc0029210
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 db 02 c0       	mov    eax,0xc002db18
c0000049:	3d 18 db 02 c0       	cmp    eax,0xc002db18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 db 02 c0       	push   0xc002db18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 db 02 c0       	mov    eax,0xc002db18
c0000075:	2d 18 db 02 c0       	sub    eax,0xc002db18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 db 02 c0       	push   0xc002db18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e148,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 18 92 02 c0       	mov    ebx,0xc0029218
c00000bb:	81 eb 14 92 02 c0    	sub    ebx,0xc0029214
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 14 92 02 c0       	mov    esi,0xc0029214
c00000ca:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c e1 02 c0       	mov    ds:0xc002e14c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 db 02 c0       	push   0xc002db18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e148,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 e1 02 c0       	push   0xc002e150
c000012c:	68 18 db 02 c0       	push   0xc002db18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 03 d6 01 00       	call   c001d99e <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 3d 29 01 00       	call   c0012cf0 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 e1 d5 01 00       	call   c001d99e <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 2f da 01 00       	call   c001de0b <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 dd df 01 00       	call   c001e3c2 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e5 02 c0 	lgdtd  ds:0xc002e590
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 1a 46 01 00       	call   c0014bf3 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 e1 02 c0       	mov    ds:0xc002e168,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 e1 02 c0    	mov    DWORD PTR ds:0xc002e168,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e168
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e180
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 e1 02 c0    	mov    DWORD PTR ds:0xc002e180,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e7c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e7c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 e1 02 c0    	mov    DWORD PTR ds:0xc002e180,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1bc
c0000e60:	c7 42 0c b4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1b4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc e1 02 c0    	mov    DWORD PTR ds:0xc002e1bc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 e1 02 c0 02 	test   BYTE PTR ds:0xc002e180,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e180
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e7c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e7c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e4c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1c0
c00011e2:	81 fb b4 e1 02 c0    	cmp    ebx,0xc002e1b4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 e1 02 c0       	cmp    eax,0xc002e1b4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc e1 02 c0       	mov    ds:0xc002e1bc,eax
c000121e:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001223:	a3 b0 e1 02 c0       	mov    ds:0xc002e1b0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1b4
c0001231:	c7 40 0c b4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1b4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1b4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e88]
c0001282:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e80]
c000129d:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e4c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc e1 02 c0    	mov    DWORD PTR ds:0xc002e1bc,ecx
c0001357:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c000135d:	c7 41 08 b4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1b4
c0001364:	c7 41 0c b4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1b4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e54]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac e1 02 c0 	lea    edx,[eax*4-0x3ffd1e54]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc e1 02 c0    	mov    DWORD PTR ds:0xc002e1bc,edi
c000142a:	89 3d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,edi
c0001430:	c7 47 08 b4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1b4
c0001437:	c7 47 0c b4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1b4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 e1 02 c0       	mov    edx,0xc002e180
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e180,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e180,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e4 02 c0    	push   DWORD PTR ds:0xc002e4dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e180,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e4 02 c0       	mov    eax,ds:0xc002e4dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1ac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e7c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 e1 02 c0       	mov    eax,0xc002e1b4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e4 02 c0       	cmp    eax,0xc002e4ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 e1 02 c0       	mov    ds:0xc002e180,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e4 02 c0    	mov    DWORD PTR ds:0xc002e4cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 8e f1 01 00       	jmp    c0020dba <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 bf f1 01 00       	jmp    c0020e01 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 e7 f1 01 00       	jmp    c0020e48 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 78 4a 02 00       	call   c00269bc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 8c c9 02 c0       	mov    edx,0xc002c98c
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ae0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e5 02 c0    	mov    ax,ds:0xc002e500
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e5 02 c0    	mov    ds:0xc002e500,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 75 38 02 00       	call   c00269bc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 40 22 02 00       	call   c00269bc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ae0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ae0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 07 0c 02 00       	call   c00269bc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ed 0b 02 00       	call   c00269bc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 93 02 c0       	mov    eax,0xc0029390
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ae0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 93 02 c0       	mov    esi,0xc0029380
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 30 f3 01 00       	call   c00269bc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 94 02 c0       	mov    edx,0xc0029482
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 84 fc 01 00       	call   c002848f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 47 fc 01 00       	call   c0028471 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 1b fc 01 00       	call   c002848f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ce f2 01 00       	call   c0027b94 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 48 fd 01 00       	call   c0028620 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 95 fb 01 00       	call   c002848f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 d7 fa 01 00       	call   c002848f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 a4 fa 01 00       	call   c0028471 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 91 f9 01 00       	call   c002848f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 59 f9 01 00       	call   c0028471 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 65 f7 01 00       	call   c002848f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 2a f7 01 00       	call   c0028471 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 3a f4 01 00       	call   c0028223 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 b8 ed 01 00       	call   c0027bc0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 74 f6 01 00       	call   c0028493 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 62 f7 01 00       	call   c00285b7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 4c ed 01 00       	call   c0027bc0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 f7 f5 01 00       	call   c002848d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 d8 f5 01 00       	call   c0028491 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 66 f7 01 00       	call   c0028640 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 18 f3 01 00       	call   c0028223 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 96 ec 01 00       	call   c0027bc0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 52 f5 01 00       	call   c0028493 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 40 f6 01 00       	call   c00285b7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 2a ec 01 00       	call   c0027bc0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 d5 f4 01 00       	call   c002848d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 b5 f4 01 00       	call   c0028491 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 42 f6 01 00       	call   c0028640 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 f0 f3 01 00       	call   c002848f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ae f3 01 00       	call   c0028471 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 96 f3 01 00       	call   c002848f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 08 f1 01 00       	call   c0028223 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 0a e4 01 00       	call   c0027543 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 6d ea 01 00       	call   c0027bc0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 bf f0 01 00       	call   c0028223 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 c5 e3 01 00       	call   c0027543 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 94 f0 01 00       	call   c0028223 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 e4 f2 01 00       	call   c002848d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 c1 e9 01 00       	call   c0027b94 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 3b f4 01 00       	call   c0028620 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 6a f2 01 00       	call   c0028471 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 65 e9 01 00       	call   c0027b94 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 e3 ef 01 00       	call   c0028223 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 66 e9 01 00       	call   c0027bc0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 b8 ef 01 00       	call   c0028223 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 1f ec 01 00       	call   c0027ea4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 9e e2 01 00       	call   c0027543 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 fe db 01 00       	call   c0026ed8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 d5 f2 01 00       	call   c00285b7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 be e8 01 00       	call   c0027bc0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 a5 f2 01 00       	call   c00285b7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 17 e2 01 00       	call   c0027543 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 50 f1 01 00       	call   c0028493 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 38 eb 01 00       	call   c0027ea4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 be e1 01 00       	call   c0027543 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 a4 f2 01 00       	call   c0028640 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 7e ee 01 00       	call   c0028223 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 d5 e7 01 00       	call   c0027b94 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 b4 f0 01 00       	call   c002848f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 4d e1 01 00       	call   c0027543 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 79 e7 01 00       	call   c0027b94 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 13 f2 01 00       	call   c0028640 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 cc ed 01 00       	call   c0028223 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 49 e7 01 00       	call   c0027bc0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 9c ed 01 00       	call   c0028223 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 a2 e0 01 00       	call   c0027543 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 72 ed 01 00       	call   c0028223 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 c4 ef 01 00       	call   c002848f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 9b e6 01 00       	call   c0027b94 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 15 f1 01 00       	call   c0028620 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 44 ef 01 00       	call   c0028471 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 3e e6 01 00       	call   c0027b94 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 bc ec 01 00       	call   c0028223 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 3f e6 01 00       	call   c0027bc0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 91 ec 01 00       	call   c0028223 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 f8 e8 01 00       	call   c0027ea4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 77 df 01 00       	call   c0027543 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 c7 d8 01 00       	call   c0026ed8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 9e ef 01 00       	call   c00285b7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 87 e5 01 00       	call   c0027bc0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 6e ef 01 00       	call   c00285b7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 e0 de 01 00       	call   c0027543 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 19 ee 01 00       	call   c0028493 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 00 e8 01 00       	call   c0027ea4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 7f de 01 00       	call   c0027543 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 65 ef 01 00       	call   c0028640 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 3f eb 01 00       	call   c0028223 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 96 e4 01 00       	call   c0027b94 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 75 ed 01 00       	call   c002848f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 0e de 01 00       	call   c0027543 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 3a e4 01 00       	call   c0027b94 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 af ea 01 00       	call   c0028223 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 b5 dd 01 00       	call   c0027543 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 2a e9 01 00       	call   c0028223 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 a8 e2 01 00       	call   c0027bc0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 3a d5 01 00       	call   c0026ed8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 11 ec 01 00       	call   c00285b7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 fa e1 01 00       	call   c0027bc0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 dd eb 01 00       	call   c00285b7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 4f db 01 00       	call   c0027543 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 af eb 01 00       	call   c00285b7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 9e e1 01 00       	call   c0027bc0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 07 db 01 00       	call   c0027543 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 28 d4 01 00       	call   c0026ed8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ff ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 e8 e0 01 00       	call   c0027bc0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 cb ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 3d da 01 00       	call   c0027543 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 9d ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 8c e0 01 00       	call   c0027bc0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 f5 d9 01 00       	call   c0027543 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 d3 d9 01 00       	call   c0027543 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 af d2 01 00       	call   c0026ed8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 86 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 6f df 01 00       	call   c0027bc0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 52 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 c4 d8 01 00       	call   c0027543 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 24 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 0d df 01 00       	call   c0027bc0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 76 d8 01 00       	call   c0027543 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 d6 e8 01 00       	call   c00285b7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 bf de 01 00       	call   c0027bc0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 28 d8 01 00       	call   c0027543 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 3d d1 01 00       	call   c0026ed8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 14 e8 01 00       	call   c00285b7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 fd dd 01 00       	call   c0027bc0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 e4 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 56 d7 01 00       	call   c0027543 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 b6 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 9f dd 01 00       	call   c0027bc0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 08 d7 01 00       	call   c0027543 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 68 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 51 dd 01 00       	call   c0027bc0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ba d6 01 00       	call   c0027543 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 8e d6 01 00       	call   c0027543 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 eb dc 01 00       	call   c0027bc0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 a7 e5 01 00       	call   c0028493 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 36 d6 01 00       	call   c0027543 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 93 dc 01 00       	call   c0027bc0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 4f e5 01 00       	call   c0028493 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 c9 ce 01 00       	call   c0026ed8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 a0 e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 89 db 01 00       	call   c0027bc0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 6c e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 de d4 01 00       	call   c0027543 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 3e e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 27 db 01 00       	call   c0027bc0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 90 d4 01 00       	call   c0027543 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 f0 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 d9 da 01 00       	call   c0027bc0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 42 d4 01 00       	call   c0027543 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 a2 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 8b da 01 00       	call   c0027bc0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 f4 d3 01 00       	call   c0027543 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 54 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 3d da 01 00       	call   c0027bc0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 a6 d3 01 00       	call   c0027543 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 a8 cc 01 00       	call   c0026ed8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 7f e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 68 d9 01 00       	call   c0027bc0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 4f e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 c1 d2 01 00       	call   c0027543 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 21 e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 0a d9 01 00       	call   c0027bc0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 73 d2 01 00       	call   c0027543 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 d3 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 bc d8 01 00       	call   c0027bc0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 25 d2 01 00       	call   c0027543 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 85 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 6e d8 01 00       	call   c0027bc0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 d7 d1 01 00       	call   c0027543 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 37 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 20 d8 01 00       	call   c0027bc0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 89 d1 01 00       	call   c0027543 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 5d d1 01 00       	call   c0027543 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ba d7 01 00       	call   c0027bc0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 76 e0 01 00       	call   c0028493 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 05 d1 01 00       	call   c0027543 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 62 d7 01 00       	call   c0027bc0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 1e e0 01 00       	call   c0028493 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ac d0 01 00       	call   c0027543 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 09 d7 01 00       	call   c0027bc0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 c5 df 01 00       	call   c0028493 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 53 d0 01 00       	call   c0027543 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 b0 d6 01 00       	call   c0027bc0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 6c df 01 00       	call   c0028493 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ca c8 01 00       	call   c0026ed8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 a1 df 01 00       	call   c00285b7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 8a d5 01 00       	call   c0027bc0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 6d df 01 00       	call   c00285b7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 df ce 01 00       	call   c0027543 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 3f df 01 00       	call   c00285b7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 28 d5 01 00       	call   c0027bc0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 91 ce 01 00       	call   c0027543 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 f1 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 da d4 01 00       	call   c0027bc0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 43 ce 01 00       	call   c0027543 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 a3 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 8c d4 01 00       	call   c0027bc0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 f5 cd 01 00       	call   c0027543 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 55 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 3e d4 01 00       	call   c0027bc0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 a7 cd 01 00       	call   c0027543 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 07 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 f0 d3 01 00       	call   c0027bc0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 56 cd 01 00       	call   c0027543 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 b6 dd 01 00       	call   c00285b7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 9f d3 01 00       	call   c0027bc0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 08 cd 01 00       	call   c0027543 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 02 c6 01 00       	call   c0026ed8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 d9 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 c2 d2 01 00       	call   c0027bc0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 a2 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 14 cc 01 00       	call   c0027543 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 74 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 5d d2 01 00       	call   c0027bc0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 c6 cb 01 00       	call   c0027543 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 26 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 0f d2 01 00       	call   c0027bc0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 78 cb 01 00       	call   c0027543 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 d8 db 01 00       	call   c00285b7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 c1 d1 01 00       	call   c0027bc0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 2a cb 01 00       	call   c0027543 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 8a db 01 00       	call   c00285b7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 73 d1 01 00       	call   c0027bc0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 dc ca 01 00       	call   c0027543 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 3c db 01 00       	call   c00285b7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 25 d1 01 00       	call   c0027bc0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 8b ca 01 00       	call   c0027543 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 eb da 01 00       	call   c00285b7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 d4 d0 01 00       	call   c0027bc0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 43 ca 01 00       	call   c0027543 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 1c ca 01 00       	call   c0027543 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 7a d0 01 00       	call   c0027bc0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 36 d9 01 00       	call   c0028493 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 c5 c9 01 00       	call   c0027543 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 23 d0 01 00       	call   c0027bc0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 df d8 01 00       	call   c0028493 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 6d c9 01 00       	call   c0027543 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 cb cf 01 00       	call   c0027bc0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 87 d8 01 00       	call   c0028493 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 15 c9 01 00       	call   c0027543 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 73 cf 01 00       	call   c0027bc0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 2f d8 01 00       	call   c0028493 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 bd c8 01 00       	call   c0027543 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 1b cf 01 00       	call   c0027bc0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 d7 d7 01 00       	call   c0028493 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 6b c8 01 00       	call   c0027543 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 c9 ce 01 00       	call   c0027bc0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 85 d7 01 00       	call   c0028493 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 99 c0 01 00       	call   c0026ed8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 70 d7 01 00       	call   c00285b7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 59 cd 01 00       	call   c0027bc0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 40 d7 01 00       	call   c00285b7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 b2 c6 01 00       	call   c0027543 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 e6 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 cf cc 01 00       	call   c0027bc0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 3a c6 01 00       	call   c0027543 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 87 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 70 cc 01 00       	call   c0027bc0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 db c5 01 00       	call   c0027543 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 28 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 11 cc 01 00       	call   c0027bc0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 7c c5 01 00       	call   c0027543 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 c9 d5 01 00       	call   c00285b7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 b2 cb 01 00       	call   c0027bc0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 1d c5 01 00       	call   c0027543 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 6a d5 01 00       	call   c00285b7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 53 cb 01 00       	call   c0027bc0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 be c4 01 00       	call   c0027543 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 0b d5 01 00       	call   c00285b7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 f4 ca 01 00       	call   c0027bc0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 5f c4 01 00       	call   c0027543 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ac d4 01 00       	call   c00285b7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 95 ca 01 00       	call   c0027bc0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 00 c4 01 00       	call   c0027543 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 4d d4 01 00       	call   c00285b7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 36 ca 01 00       	call   c0027bc0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 a1 c3 01 00       	call   c0027543 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 ab bc 01 00       	call   c0026ed8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 82 d3 01 00       	call   c00285b7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 6b c9 01 00       	call   c0027bc0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 52 d3 01 00       	call   c00285b7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 c4 c2 01 00       	call   c0027543 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 f7 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 e0 c8 01 00       	call   c0027bc0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 4b c2 01 00       	call   c0027543 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 97 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 80 c8 01 00       	call   c0027bc0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 eb c1 01 00       	call   c0027543 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 37 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 20 c8 01 00       	call   c0027bc0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 8b c1 01 00       	call   c0027543 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 d7 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 c0 c7 01 00       	call   c0027bc0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 2b c1 01 00       	call   c0027543 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 77 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 60 c7 01 00       	call   c0027bc0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 cb c0 01 00       	call   c0027543 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 17 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 00 c7 01 00       	call   c0027bc0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 6b c0 01 00       	call   c0027543 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 b7 d0 01 00       	call   c00285b7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 a0 c6 01 00       	call   c0027bc0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 0b c0 01 00       	call   c0027543 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 57 d0 01 00       	call   c00285b7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 40 c6 01 00       	call   c0027bc0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 ab bf 01 00       	call   c0027543 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 50 bf 01 00       	call   c0027543 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ad c5 01 00       	call   c0027bc0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 69 ce 01 00       	call   c0028493 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 f3 be 01 00       	call   c0027543 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 50 c5 01 00       	call   c0027bc0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 0c ce 01 00       	call   c0028493 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 96 be 01 00       	call   c0027543 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 f3 c4 01 00       	call   c0027bc0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 af cd 01 00       	call   c0028493 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 39 be 01 00       	call   c0027543 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 96 c4 01 00       	call   c0027bc0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 52 cd 01 00       	call   c0028493 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 dc bd 01 00       	call   c0027543 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 39 c4 01 00       	call   c0027bc0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 f5 cc 01 00       	call   c0028493 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 7f bd 01 00       	call   c0027543 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 dc c3 01 00       	call   c0027bc0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 98 cc 01 00       	call   c0028493 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 22 bd 01 00       	call   c0027543 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 7f c3 01 00       	call   c0027bc0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 3b cc 01 00       	call   c0028493 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 c5 bc 01 00       	call   c0027543 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 22 c3 01 00       	call   c0027bc0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 de cb 01 00       	call   c0028493 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 da c2 01 00       	call   c0027bc0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 4a cd 01 00       	jmp    c0028640 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 bc c9 01 00       	call   c002848f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 7a c9 01 00       	call   c0028471 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 11 c7 01 00       	call   c0028223 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 12 ba 01 00       	call   c0027543 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 e1 c6 01 00       	call   c0028223 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 48 c3 01 00       	call   c0027ea4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 e7 c8 01 00       	call   c0028471 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ea c8 01 00       	call   c002848f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 bd c8 01 00       	call   c002848f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 b6 c2 01 00       	call   c0027ea4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 38 ca 01 00       	call   c0028640 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 13 ca 01 00       	call   c0028640 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ed c5 01 00       	call   c0028223 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 44 bf 01 00       	call   c0027b94 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 23 c8 01 00       	call   c002848f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 bc b8 01 00       	call   c0027543 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 e0 be 01 00       	call   c0027b94 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 7a c9 01 00       	call   c0028640 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ba c1 01 00       	call   c0027ea4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 37 b8 01 00       	call   c0027543 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 63 c4 01 00       	call   c0028223 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 63 b7 01 00       	call   c0027543 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 43 b7 01 00       	call   c0027543 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 13 c4 01 00       	call   c0028223 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 63 c6 01 00       	call   c002848d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 42 bd 01 00       	call   c0027b94 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 bc c7 01 00       	call   c0028620 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 eb c5 01 00       	call   c0028471 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 e9 bc 01 00       	call   c0027b94 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 67 c3 01 00       	call   c0028223 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ea bc 01 00       	call   c0027bc0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 3c c3 01 00       	call   c0028223 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 a3 bf 01 00       	call   c0027ea4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 22 b6 01 00       	call   c0027543 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ec c2 01 00       	call   c0028223 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 38 c5 01 00       	call   c002848f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 2d bc 01 00       	call   c0027bc0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ff bb 01 00       	call   c0027bc0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 38 c2 01 00       	call   c0028223 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 9c be 01 00       	call   c0027ea4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 64 be 01 00       	call   c0027ea4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 e3 b4 01 00       	call   c0027543 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 c8 c5 01 00       	call   c0028640 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 a2 c1 01 00       	call   c0028223 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 f9 ba 01 00       	call   c0027b94 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 d8 c3 01 00       	call   c002848f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 70 b4 01 00       	call   c0027543 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 94 ba 01 00       	call   c0027b94 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 2e c5 01 00       	call   c0028640 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 f7 c2 01 00       	call   c002848f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 b5 c2 01 00       	call   c0028471 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 4c c0 01 00       	call   c0028223 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 4d b3 01 00       	call   c0027543 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 1c c0 01 00       	call   c0028223 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 83 bc 01 00       	call   c0027ea4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 22 c2 01 00       	call   c0028471 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 25 c2 01 00       	call   c002848f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 f8 c1 01 00       	call   c002848f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 f1 bb 01 00       	call   c0027ea4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 73 c3 01 00       	call   c0028640 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 4e c3 01 00       	call   c0028640 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 28 bf 01 00       	call   c0028223 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 7f b8 01 00       	call   c0027b94 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 5e c1 01 00       	call   c002848f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 f7 b1 01 00       	call   c0027543 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 1b b8 01 00       	call   c0027b94 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 b5 c2 01 00       	call   c0028640 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 f5 ba 01 00       	call   c0027ea4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 72 b1 01 00       	call   c0027543 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 9d bd 01 00       	call   c0028223 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 9d b0 01 00       	call   c0027543 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 7d b0 01 00       	call   c0027543 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 4d bd 01 00       	call   c0028223 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 9d bf 01 00       	call   c002848d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 7b b6 01 00       	call   c0027b94 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 f5 c0 01 00       	call   c0028620 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 24 bf 01 00       	call   c0028471 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 21 b6 01 00       	call   c0027b94 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 9f bc 01 00       	call   c0028223 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 22 b6 01 00       	call   c0027bc0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 74 bc 01 00       	call   c0028223 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 db b8 01 00       	call   c0027ea4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 5a af 01 00       	call   c0027543 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 24 bc 01 00       	call   c0028223 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 70 be 01 00       	call   c002848f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 65 b5 01 00       	call   c0027bc0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 37 b5 01 00       	call   c0027bc0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 6e bb 01 00       	call   c0028223 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 d2 b7 01 00       	call   c0027ea4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 9f b7 01 00       	call   c0027ea4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 1e ae 01 00       	call   c0027543 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 03 bf 01 00       	call   c0028640 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 dd ba 01 00       	call   c0028223 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 34 b4 01 00       	call   c0027b94 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 13 bd 01 00       	call   c002848f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 ab ad 01 00       	call   c0027543 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 cf b3 01 00       	call   c0027b94 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 69 be 01 00       	call   c0028640 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 32 bc 01 00       	call   c002848f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 f0 bb 01 00       	call   c0028471 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 87 b9 01 00       	call   c0028223 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 88 ac 01 00       	call   c0027543 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 57 b9 01 00       	call   c0028223 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 be b5 01 00       	call   c0027ea4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 5d bb 01 00       	call   c0028471 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 60 bb 01 00       	call   c002848f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 33 bb 01 00       	call   c002848f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 2c b5 01 00       	call   c0027ea4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ae bc 01 00       	call   c0028640 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 89 bc 01 00       	call   c0028640 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 63 b8 01 00       	call   c0028223 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ba b1 01 00       	call   c0027b94 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 99 ba 01 00       	call   c002848f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 32 ab 01 00       	call   c0027543 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 56 b1 01 00       	call   c0027b94 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 f0 bb 01 00       	call   c0028640 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 30 b4 01 00       	call   c0027ea4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ad aa 01 00       	call   c0027543 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 d8 b6 01 00       	call   c0028223 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 d8 a9 01 00       	call   c0027543 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 b8 a9 01 00       	call   c0027543 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 88 b6 01 00       	call   c0028223 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 d8 b8 01 00       	call   c002848d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 b6 af 01 00       	call   c0027b94 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 30 ba 01 00       	call   c0028620 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 5f b8 01 00       	call   c0028471 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 5c af 01 00       	call   c0027b94 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 da b5 01 00       	call   c0028223 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 5d af 01 00       	call   c0027bc0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 af b5 01 00       	call   c0028223 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 16 b2 01 00       	call   c0027ea4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 95 a8 01 00       	call   c0027543 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 5f b5 01 00       	call   c0028223 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 ab b7 01 00       	call   c002848f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 a0 ae 01 00       	call   c0027bc0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 72 ae 01 00       	call   c0027bc0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 a9 b4 01 00       	call   c0028223 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 0d b1 01 00       	call   c0027ea4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 da b0 01 00       	call   c0027ea4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 59 a7 01 00       	call   c0027543 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 3e b8 01 00       	call   c0028640 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 18 b4 01 00       	call   c0028223 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 6f ad 01 00       	call   c0027b94 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 4e b6 01 00       	call   c002848f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 e6 a6 01 00       	call   c0027543 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 0a ad 01 00       	call   c0027b94 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 a4 b7 01 00       	call   c0028640 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 6d b5 01 00       	call   c002848f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 2b b5 01 00       	call   c0028471 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 c2 b2 01 00       	call   c0028223 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 c3 a5 01 00       	call   c0027543 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 92 b2 01 00       	call   c0028223 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 f9 ae 01 00       	call   c0027ea4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 98 b4 01 00       	call   c0028471 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 9b b4 01 00       	call   c002848f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 6e b4 01 00       	call   c002848f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 67 ae 01 00       	call   c0027ea4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 e9 b5 01 00       	call   c0028640 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 c4 b5 01 00       	call   c0028640 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 9e b1 01 00       	call   c0028223 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 f5 aa 01 00       	call   c0027b94 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 d4 b3 01 00       	call   c002848f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 6d a4 01 00       	call   c0027543 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 91 aa 01 00       	call   c0027b94 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 2b b5 01 00       	call   c0028640 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 6b ad 01 00       	call   c0027ea4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 e8 a3 01 00       	call   c0027543 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 13 b0 01 00       	call   c0028223 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 13 a3 01 00       	call   c0027543 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 f3 a2 01 00       	call   c0027543 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 c3 af 01 00       	call   c0028223 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 13 b2 01 00       	call   c002848d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 f1 a8 01 00       	call   c0027b94 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 6b b3 01 00       	call   c0028620 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 9a b1 01 00       	call   c0028471 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 97 a8 01 00       	call   c0027b94 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 15 af 01 00       	call   c0028223 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 98 a8 01 00       	call   c0027bc0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ea ae 01 00       	call   c0028223 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 51 ab 01 00       	call   c0027ea4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 d0 a1 01 00       	call   c0027543 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 9a ae 01 00       	call   c0028223 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 e6 b0 01 00       	call   c002848f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 db a7 01 00       	call   c0027bc0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ad a7 01 00       	call   c0027bc0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 e4 ad 01 00       	call   c0028223 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 48 aa 01 00       	call   c0027ea4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 15 aa 01 00       	call   c0027ea4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 94 a0 01 00       	call   c0027543 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 79 b1 01 00       	call   c0028640 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 53 ad 01 00       	call   c0028223 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 aa a6 01 00       	call   c0027b94 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 89 af 01 00       	call   c002848f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 21 a0 01 00       	call   c0027543 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 45 a6 01 00       	call   c0027b94 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 df b0 01 00       	call   c0028640 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 a5 ae 01 00       	call   c002848f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 63 ae 01 00       	call   c0028471 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 fa ab 01 00       	call   c0028223 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 fb 9e 01 00       	call   c0027543 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ca ab 01 00       	call   c0028223 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 31 a8 01 00       	call   c0027ea4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 d0 ad 01 00       	call   c0028471 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 d3 ad 01 00       	call   c002848f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 a6 ad 01 00       	call   c002848f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 9f a7 01 00       	call   c0027ea4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 21 af 01 00       	call   c0028640 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 f8 ae 01 00       	call   c0028640 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 d2 aa 01 00       	call   c0028223 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 29 a4 01 00       	call   c0027b94 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 08 ad 01 00       	call   c002848f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 a1 9d 01 00       	call   c0027543 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 c9 a3 01 00       	call   c0027b94 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 63 ae 01 00       	call   c0028640 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 a4 a6 01 00       	call   c0027ea4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 21 9d 01 00       	call   c0027543 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 4d a9 01 00       	call   c0028223 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 4d 9c 01 00       	call   c0027543 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 2d 9c 01 00       	call   c0027543 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 fd a8 01 00       	call   c0028223 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 31 ab 01 00       	call   c0028471 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 28 a2 01 00       	call   c0027b94 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 a2 ac 01 00       	call   c0028620 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 d1 aa 01 00       	call   c0028471 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 cb a1 01 00       	call   c0027b94 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 49 a8 01 00       	call   c0028223 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 cc a1 01 00       	call   c0027bc0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 1e a8 01 00       	call   c0028223 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 85 a4 01 00       	call   c0027ea4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 04 9b 01 00       	call   c0027543 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ce a7 01 00       	call   c0028223 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 1a aa 01 00       	call   c002848f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 0f a1 01 00       	call   c0027bc0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 e1 a0 01 00       	call   c0027bc0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 25 a7 01 00       	call   c0028223 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 8c a3 01 00       	call   c0027ea4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 75 a0 01 00       	call   c0027bc0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 31 a9 01 00       	call   c0028493 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 24 a3 01 00       	call   c0027ea4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 a3 99 01 00       	call   c0027543 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 88 aa 01 00       	call   c0028640 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 62 a6 01 00       	call   c0028223 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 b9 9f 01 00       	call   c0027b94 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 98 a8 01 00       	call   c002848f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 30 99 01 00       	call   c0027543 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 58 9f 01 00       	call   c0027b94 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 f2 a9 01 00       	call   c0028640 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ad a6 01 00       	call   c002848f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 6b a6 01 00       	call   c0028471 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 57 a6 01 00       	call   c002848f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 c9 a3 01 00       	call   c0028223 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 47 9d 01 00       	call   c0027bc0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 99 a3 01 00       	call   c0028223 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 9f 96 01 00       	call   c0027543 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 6e a3 01 00       	call   c0028223 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 be a5 01 00       	call   c002848d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 9f 9c 01 00       	call   c0027b94 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 19 a7 01 00       	call   c0028620 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 48 a5 01 00       	call   c0028471 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 47 9c 01 00       	call   c0027b94 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 c5 a2 01 00       	call   c0028223 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 48 9c 01 00       	call   c0027bc0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 9a a2 01 00       	call   c0028223 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 01 9f 01 00       	call   c0027ea4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 80 95 01 00       	call   c0027543 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 a8 9e 01 00       	call   c0027ea4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 2e 95 01 00       	call   c0027543 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 14 a6 01 00       	call   c0028640 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ee a1 01 00       	call   c0028223 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 45 9b 01 00       	call   c0027b94 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 24 a4 01 00       	call   c002848f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 bd 94 01 00       	call   c0027543 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 e9 9a 01 00       	call   c0027b94 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 83 a5 01 00       	call   c0028640 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 38 a1 01 00       	call   c0028223 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 b5 9a 01 00       	call   c0027bc0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 06 a1 01 00       	call   c0028223 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 0c 94 01 00       	call   c0027543 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 dc a0 01 00       	call   c0028223 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 30 a3 01 00       	call   c0028491 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 09 9a 01 00       	call   c0027b94 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 83 a4 01 00       	call   c0028620 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 b2 a2 01 00       	call   c0028471 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 b0 99 01 00       	call   c0027b94 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 2e a0 01 00       	call   c0028223 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 b1 99 01 00       	call   c0027bc0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 03 a0 01 00       	call   c0028223 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 6a 9c 01 00       	call   c0027ea4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 e9 92 01 00       	call   c0027543 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 05 9c 01 00       	call   c0027ea4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 84 92 01 00       	call   c0027543 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 6a a3 01 00       	call   c0028640 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 44 9f 01 00       	call   c0028223 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 9b 98 01 00       	call   c0027b94 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 7a a1 01 00       	call   c002848f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 13 92 01 00       	call   c0027543 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 3f 98 01 00       	call   c0027b94 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 b0 9e 01 00       	call   c0028223 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 b6 91 01 00       	call   c0027543 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 9f 02 c0       	push   0xc0029f86
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e5 02 c0       	mov    eax,0xc002e588
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 bc 69 02 c0       	mov    eax,0xc00269bc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 9f 02 c0       	push   0xc0029f99
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 f0 66 02 c0       	mov    eax,0xc00266f0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 bc 6a 02 c0       	mov    eax,0xc0026abc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 9f 02 c0       	push   0xc0029fac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 3c 68 02 c0       	mov    eax,0xc002683c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e5 02 c0       	mov    eax,0xc002e58c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e5 02 c0       	mov    eax,0xc002e58d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 8b 5e 00 00       	call   c00144ae <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c000e668:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 97 f5 00 00       	call   c001dc0c <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 80 f8 00 00       	call   c001df0a <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 68 e7 01 c0       	push   0xc001e768
c000e693:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c000e699:	e8 6c f8 00 00       	call   c001df0a <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c000e6a6:	c6 05 8d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e58d,0x1
c000e6ad:	e8 37 04 01 00       	call   c001eae9 <Vm::initialise8086()>
c000e6b2:	e8 df 4b 00 00       	call   c0013296 <Fs::initVFS()>
c000e6b7:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 c9 de 00 00       	call   c001c59c <Sys::loadSyscalls()>
c000e6d3:	e8 a2 bd 00 00       	call   c001a47a <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 9f 02 c0       	push   0xc0029fdc
c000e6e2:	68 e5 9f 02 c0       	push   0xc0029fe5
c000e6e7:	e8 b4 ca 00 00       	call   c001b1a0 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 8a 56 00 00       	call   c0013d7e <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 7d 5d 00 00       	call   c0014482 <Device::loadDriversForAll()>
c000e705:	e8 b6 b8 00 00       	call   c0019fc0 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed 9f 02 c0       	push   0xc0029fed
c000e719:	e8 12 f0 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 3d f2 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 3a fb 00 00       	call   c001e26e <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 a0 02 c0       	push   0xc002a009
c000e749:	50                   	push   eax
c000e74a:	e8 d9 5d 00 00       	call   c0014528 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 a3 7d 01 00       	call   c0026686 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 b4 a3 00 00       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 8d a3 00 00       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 6b a3 00 00       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 49 a3 00 00       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 57 a2 00 00       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 32 a2 00 00       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 0d 7c 01 00       	call   c0026640 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ca 7b 01 00       	call   c0026620 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 4e a2 00 00       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 a0 02 c0       	push   0xc002a019
c000eaaf:	e8 5e 44 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c a0 02 c0       	push   0xc002a02c
c000ead2:	e8 3b 44 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d a0 02 c0       	push   0xc002a03d
c000eaf5:	e8 18 44 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e a0 02 c0       	push   0xc002a04e
c000eb18:	e8 f5 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f a0 02 c0       	push   0xc002a05f
c000eb3b:	e8 d2 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 a0 02 c0       	push   0xc002a070
c000eb5e:	e8 af 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 a0 02 c0       	push   0xc002a081
c000eb81:	e8 8c 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 a0 02 c0       	push   0xc002a092
c000eba4:	e8 69 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 a0 02 c0       	push   0xc002a0a3
c000ebc7:	e8 46 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 a0 02 c0       	push   0xc002a0b4
c000ebea:	e8 23 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 a0 02 c0       	push   0xc002a0c5
c000ec0d:	e8 00 43 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 a0 02 c0       	push   0xc002a0d6
c000ec30:	e8 dd 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 a0 02 c0       	push   0xc002a0e7
c000ec53:	e8 ba 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 a0 02 c0       	push   0xc002a0f8
c000ec76:	e8 97 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a1 02 c0       	push   0xc002a109
c000ec99:	e8 74 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a1 02 c0       	push   0xc002a11a
c000ecbc:	e8 51 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a1 02 c0       	push   0xc002a12b
c000ecdf:	e8 2e 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a1 02 c0       	push   0xc002a13c
c000ed02:	e8 0b 42 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a1 02 c0       	push   0xc002a14d
c000ed21:	e8 ec 41 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 f0 bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bbf0
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 db 41 00 00       	jmp    c0012f12 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a1 02 c0       	push   0xc002a15e
c000ee0a:	e8 a4 b7 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a1 02 c0       	push   0xc002a164
c000ee42:	e8 6c b7 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d4 02 c0 	sete   BYTE PTR ds:0xc002d4c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 ed 92 00 00       	call   c00181a2 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 74 54 00 00       	call   c0014338 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 96 9e 00 00       	call   c0018d8a <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 35 54 00 00       	call   c0014338 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 9f 59 00 00       	call   c00148be <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 05 54 00 00       	call   c0014338 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 b5 f0 00 00       	call   c001e00a <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a1 02 c0       	push   0xc002a16a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 6f 3f 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a1 02 c0       	push   0xc002a17b
c000efc0:	e8 ee b5 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a1 02 c0       	push   0xc002a188
c000efd5:	e8 d9 b5 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a192
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 c2 b5 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a1 02 c0       	push   0xc002a1cc
c000f086:	e8 87 3e 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e5 02 c0       	mov    ds:0xc002e592,eax
c000f0c7:	66 89 15 90 e5 02 c0 	mov    WORD PTR ds:0xc002e590,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 fc eb 00 00       	call   c001ddda <unlockScheduler()>
c000f1de:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 94 94 01 00       	call   c00286c0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 8b 94 01 00       	call   c00286c0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e598,0x7ff
c000f323:	a3 9a e5 02 c0       	mov    ds:0xc002e59a,eax
c000f328:	0f 01 1d 98 e5 02 c0 	lidtd  ds:0xc002e598
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 29 28 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 5a 2e 00 00       	call   c001247a <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 c8 1e 00 00       	call   c0011506 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 f9 1e 00 00       	call   c0011546 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d a0 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4a0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a1 02 c0       	push   0xc002a1e8
c000f6f4:	e8 19 38 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 a0 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4a0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1f 27 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d a0 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4a0
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 41 2c 00 00       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d a0 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4a0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a2 02 c0       	push   0xc002a218
c000f7ad:	e8 01 ae 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a2 02 c0       	push   0xc002a21d
c000f7c3:	e8 eb ad 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 ff e5 00 00       	call   c001ddd8 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 f0 e5 00 00       	call   c001ddda <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 43 26 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 70 2c 00 00       	call   c001247a <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 28 26 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 13 29 00 00       	call   c0012136 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 e8 0c 00 00       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 aa 0c 00 00       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 41 0d 00 00       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4c0
c000fb46:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d4c0,0x8000
c000fba0:	c6 05 20 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e620,0x1
c000fba7:	c7 05 58 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e658,0xc000fa13
c000fbb1:	c7 05 44 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e644,0xc000f89a
c000fbbb:	c7 05 40 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e640,0xc000f8e5
c000fbc5:	c7 05 4c e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e64c,0xc000fa59
c000fbcf:	c7 05 54 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e654,0xc000f963
c000fbd9:	c7 05 48 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e648,0xc000f9c1
c000fbe3:	c7 05 50 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e650,0xc000f9c2
c000fbed:	c7 05 5c e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e65c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 28 0a 00 00       	call   c0010632 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 24 a2 02 c0       	push   0xc002a224
c000fc4a:	e8 c3 32 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 88 04 00 00       	call   c00100ee <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f7 20 00 00       	call   c0011d62 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 f1 bb 02 c0       	push   0xc002bbf1
c000fc92:	e8 1c a9 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c7 22 00 00       	call   c0011f74 <VAS::VAS()>
c000fcad:	89 1d 08 e7 02 c0    	mov    DWORD PTR ds:0xc002e708,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c000fcbf:	e8 4e 32 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 18 21 00 00       	call   c0011de1 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 88 e5 02 c0    	mov    DWORD PTR ds:0xc002e588,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 58 a2 02 c0       	push   0xc002a258
c000fced:	e8 20 32 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 02 25 00 00       	call   c001220e <VAS::~VAS()>
c000fd0c:	c7 04 24 6b a2 02 c0 	mov    DWORD PTR [esp],0xc002a26b
c000fd13:	e8 9b a8 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba e0 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a20],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be e0 e5 02 c0       	mov    esi,0xc002e5e0
c000fd89:	8d 90 e0 e5 02 c0    	lea    edx,[eax-0x3ffd1a20]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 e0 e5 02 c0    	lea    eax,[edx-0x3ffd1a20]
c000fdef:	8d 94 11 e0 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a20]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 a4 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4a4
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 a4 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4a4
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 a4 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4a4
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 cc e5 02 c0       	mov    ds:0xc002e5cc,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d d0 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5d0
c000fe91:	39 05 c8 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c8,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 c8 e5 02 c0       	mov    ds:0xc002e5c8,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 0c 0b 00 00       	call   c00109c6 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 86 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a286
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 d1 a6 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	55                   	push   ebp
c000fee3:	89 e5                	mov    ebp,esp
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 10             	sub    esp,0x10
c000feea:	8b 35 c0 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5c0
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x1c>
c000fef4:	89 1d c0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c0,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x40>
c000fefe:	53                   	push   ebx
c000feff:	e8 38 ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x85>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0x12>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 c0 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5c0,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x1c>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 b0 a2 02 c0       	push   0xc002a2b0
c000ff2a:	e8 e3 2f 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e4 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 ad 00 00 00    	jne    c000fff3 <Phys::allocatePage()+0x111>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 c1 a2 02 c0       	push   0xc002a2c1
c000ff4e:	e8 60 a6 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d c0 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c0
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 da fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x27>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9b fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c000ff74:	40                   	inc    eax
c000ff75:	a3 cc e5 02 c0       	mov    ds:0xc002e5cc,eax
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff80:	c1 e0 02             	shl    eax,0x2
c000ff83:	99                   	cdq    
c000ff84:	f7 3d d0 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5d0
c000ff8a:	5a                   	pop    edx
c000ff8b:	39 05 c8 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c8,eax
c000ff91:	59                   	pop    ecx
c000ff92:	75 66                	jne    c000fffa <Phys::allocatePage()+0x118>
c000ff94:	83 f8 46             	cmp    eax,0x46
c000ff97:	7e 52                	jle    c000ffeb <Phys::allocatePage()+0x109>
c000ff99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff9e:	85 c0                	test   eax,eax
c000ffa0:	74 76                	je     c0010018 <Phys::allocatePage()+0x136>
c000ffa2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffa5:	85 c0                	test   eax,eax
c000ffa7:	74 6f                	je     c0010018 <Phys::allocatePage()+0x136>
c000ffa9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffaf:	85 c0                	test   eax,eax
c000ffb1:	74 65                	je     c0010018 <Phys::allocatePage()+0x136>
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	68 9c a2 02 c0       	push   0xc002a29c
c000ffbb:	e8 52 2f 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c000ffc0:	83 c4 0c             	add    esp,0xc
c000ffc3:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c000ffc8:	85 c0                	test   eax,eax
c000ffca:	79 03                	jns    c000ffcf <Phys::allocatePage()+0xed>
c000ffcc:	83 c0 0f             	add    eax,0xf
c000ffcf:	c1 f8 04             	sar    eax,0x4
c000ffd2:	50                   	push   eax
c000ffd3:	6a 01                	push   0x1
c000ffd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffdd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffe3:	e8 04 2c 00 00       	call   c0012bec <VAS::scanForEviction(int, int)>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	a1 c0 e5 02 c0       	mov    eax,ds:0xc002e5c0
c000fff0:	c1 e0 0c             	shl    eax,0xc
c000fff3:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fff6:	5b                   	pop    ebx
c000fff7:	5e                   	pop    esi
c000fff8:	5d                   	pop    ebp
c000fff9:	c3                   	ret    
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	a3 c8 e5 02 c0       	mov    ds:0xc002e5c8,eax
c0010002:	50                   	push   eax
c0010003:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010006:	e8 bb 09 00 00       	call   c00109c6 <VgaText::updateRAMUsageDisplay(int)>
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010011:	83 f8 46             	cmp    eax,0x46
c0010014:	7e d5                	jle    c000ffeb <Phys::allocatePage()+0x109>
c0010016:	eb 81                	jmp    c000ff99 <Phys::allocatePage()+0xb7>
c0010018:	83 ec 0c             	sub    esp,0xc
c001001b:	68 fc a2 02 c0       	push   0xc002a2fc
c0010020:	e8 ed 2e 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0010025:	e8 14 1e 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c001002a:	83 c4 0c             	add    esp,0xc
c001002d:	8b 15 cc e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5cc
c0010033:	85 d2                	test   edx,edx
c0010035:	78 11                	js     c0010048 <Phys::allocatePage()+0x166>
c0010037:	c1 fa 04             	sar    edx,0x4
c001003a:	52                   	push   edx
c001003b:	6a 02                	push   0x2
c001003d:	50                   	push   eax
c001003e:	e8 a9 2b 00 00       	call   c0012bec <VAS::scanForEviction(int, int)>
c0010043:	83 c4 10             	add    esp,0x10
c0010046:	eb a3                	jmp    c000ffeb <Phys::allocatePage()+0x109>
c0010048:	83 c2 0f             	add    edx,0xf
c001004b:	c1 fa 04             	sar    edx,0x4
c001004e:	52                   	push   edx
c001004f:	6a 02                	push   0x2
c0010051:	50                   	push   eax
c0010052:	e8 95 2b 00 00       	call   c0012bec <VAS::scanForEviction(int, int)>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	eb 8f                	jmp    c000ffeb <Phys::allocatePage()+0x109>

c001005c <Phys::allocateContiguousPages(int)>:
c001005c:	57                   	push   edi
c001005d:	56                   	push   esi
c001005e:	53                   	push   ebx
c001005f:	31 db                	xor    ebx,ebx
c0010061:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010065:	e8 6e dd 00 00       	call   c001ddd8 <lockScheduler()>
c001006a:	85 db                	test   ebx,ebx
c001006c:	75 11                	jne    c001007f <Phys::allocateContiguousPages(int)+0x23>
c001006e:	e8 6f fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010073:	83 ff 01             	cmp    edi,0x1
c0010076:	89 c6                	mov    esi,eax
c0010078:	74 21                	je     c001009b <Phys::allocateContiguousPages(int)+0x3f>
c001007a:	bb 01 00 00 00       	mov    ebx,0x1
c001007f:	e8 5e fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010084:	89 da                	mov    edx,ebx
c0010086:	c1 e2 0c             	shl    edx,0xc
c0010089:	01 f2                	add    edx,esi
c001008b:	39 c2                	cmp    edx,eax
c001008d:	74 17                	je     c00100a6 <Phys::allocateContiguousPages(int)+0x4a>
c001008f:	bb 01 00 00 00       	mov    ebx,0x1
c0010094:	89 c6                	mov    esi,eax
c0010096:	83 ff 01             	cmp    edi,0x1
c0010099:	75 e4                	jne    c001007f <Phys::allocateContiguousPages(int)+0x23>
c001009b:	e8 3a dd 00 00       	call   c001ddda <unlockScheduler()>
c00100a0:	89 f0                	mov    eax,esi
c00100a2:	5b                   	pop    ebx
c00100a3:	5e                   	pop    esi
c00100a4:	5f                   	pop    edi
c00100a5:	c3                   	ret    
c00100a6:	43                   	inc    ebx
c00100a7:	39 fb                	cmp    ebx,edi
c00100a9:	75 bf                	jne    c001006a <Phys::allocateContiguousPages(int)+0xe>
c00100ab:	e8 2a dd 00 00       	call   c001ddda <unlockScheduler()>
c00100b0:	89 f0                	mov    eax,esi
c00100b2:	5b                   	pop    ebx
c00100b3:	5e                   	pop    esi
c00100b4:	5f                   	pop    edi
c00100b5:	c3                   	ret    

c00100b6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100b6:	56                   	push   esi
c00100b7:	53                   	push   ebx
c00100b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100bc:	39 1d c4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c4,ebx
c00100c2:	73 06                	jae    c00100ca <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100c4:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c00100ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100ce:	c1 eb 0c             	shr    ebx,0xc
c00100d1:	c1 e8 0c             	shr    eax,0xc
c00100d4:	39 d8                	cmp    eax,ebx
c00100d6:	73 13                	jae    c00100eb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100d8:	6a 00                	push   0x0
c00100da:	8d 70 01             	lea    esi,[eax+0x1]
c00100dd:	50                   	push   eax
c00100de:	e8 27 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100e3:	5a                   	pop    edx
c00100e4:	89 f0                	mov    eax,esi
c00100e6:	59                   	pop    ecx
c00100e7:	39 f3                	cmp    ebx,esi
c00100e9:	75 ed                	jne    c00100d8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100eb:	5b                   	pop    ebx
c00100ec:	5e                   	pop    esi
c00100ed:	c3                   	ret    

c00100ee <Phys::physicalMemorySetup(unsigned int)>:
c00100ee:	55                   	push   ebp
c00100ef:	57                   	push   edi
c00100f0:	56                   	push   esi
c00100f1:	53                   	push   ebx
c00100f2:	31 db                	xor    ebx,ebx
c00100f4:	83 ec 40             	sub    esp,0x40
c00100f7:	6a 30                	push   0x30
c00100f9:	6a 00                	push   0x0
c00100fb:	68 e0 e5 02 c0       	push   0xc002e5e0
c0010100:	e8 73 06 ff ff       	call   c0000778 <memset>
c0010105:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010109:	25 00 f0 ff ff       	and    eax,0xfffff000
c001010e:	05 00 10 00 00       	add    eax,0x1000
c0010113:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010117:	83 c4 10             	add    esp,0x10
c001011a:	83 ec 08             	sub    esp,0x8
c001011d:	6a 01                	push   0x1
c001011f:	53                   	push   ebx
c0010120:	43                   	inc    ebx
c0010121:	e8 e4 fc ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010126:	83 c4 10             	add    esp,0x10
c0010129:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001012f:	75 e9                	jne    c001011a <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010131:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010138:	66 85 c0             	test   ax,ax
c001013b:	0f 84 8e 01 00 00    	je     c00102cf <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010141:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010145:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001014d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010151:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010156:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001015a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010162:	eb 15                	jmp    c0010179 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010164:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010168:	83 c3 18             	add    ebx,0x18
c001016b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001016f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010173:	0f 84 66 01 00 00    	je     c00102df <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010179:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001017c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001017f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010186:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001018a:	8b 33                	mov    esi,DWORD PTR [ebx]
c001018c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001018f:	01 f0                	add    eax,esi
c0010191:	55                   	push   ebp
c0010192:	11 fa                	adc    edx,edi
c0010194:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010198:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001019c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101a0:	56                   	push   esi
c00101a1:	68 1c a3 02 c0       	push   0xc002a31c
c00101a6:	e8 67 2d 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00101ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	09 f8                	or     eax,edi
c00101b4:	0f 85 25 01 00 00    	jne    c00102df <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101ba:	4d                   	dec    ebp
c00101bb:	75 a7                	jne    c0010164 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101bd:	ba 00 00 08 00       	mov    edx,0x80000
c00101c2:	89 c1                	mov    ecx,eax
c00101c4:	39 f2                	cmp    edx,esi
c00101c6:	19 f9                	sbb    ecx,edi
c00101c8:	0f 82 a7 00 00 00    	jb     c0010275 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ce:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101d2:	89 c1                	mov    ecx,eax
c00101d4:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101d8:	0f 83 97 00 00 00    	jae    c0010275 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101de:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101e3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101e7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101eb:	39 fa                	cmp    edx,edi
c00101ed:	19 e8                	sbb    eax,ebp
c00101ef:	0f 82 14 01 00 00    	jb     c0010309 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101f5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101f9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101fd:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010203:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010208:	83 d5 ff             	adc    ebp,0xffffffff
c001020b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001020f:	31 c0                	xor    eax,eax
c0010211:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010215:	39 fa                	cmp    edx,edi
c0010217:	89 c1                	mov    ecx,eax
c0010219:	19 e9                	sbb    ecx,ebp
c001021b:	0f 83 43 ff ff ff    	jae    c0010164 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010221:	be 00 00 08 00       	mov    esi,0x80000
c0010226:	50                   	push   eax
c0010227:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001022b:	57                   	push   edi
c001022c:	56                   	push   esi
c001022d:	68 40 a3 02 c0       	push   0xc002a340
c0010232:	e8 db 2c 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0010237:	5a                   	pop    edx
c0010238:	59                   	pop    ecx
c0010239:	57                   	push   edi
c001023a:	56                   	push   esi
c001023b:	e8 76 fe ff ff       	call   c00100b6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010240:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010244:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010248:	83 c4 0c             	add    esp,0xc
c001024b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001024f:	03 05 d0 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5d0
c0010255:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001025c:	a3 d0 e5 02 c0       	mov    ds:0xc002e5d0,eax
c0010261:	52                   	push   edx
c0010262:	50                   	push   eax
c0010263:	68 dd a2 02 c0       	push   0xc002a2dd
c0010268:	e8 a5 2c 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001026d:	83 c4 10             	add    esp,0x10
c0010270:	e9 ef fe ff ff       	jmp    c0010164 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010275:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010279:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010281:	39 ea                	cmp    edx,ebp
c0010283:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010287:	0f 82 d7 fe ff ff    	jb     c0010164 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001028d:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010292:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010296:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001029a:	0f 83 c4 fe ff ff    	jae    c0010164 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102a0:	39 ee                	cmp    esi,ebp
c00102a2:	89 f8                	mov    eax,edi
c00102a4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102a8:	0f 83 78 ff ff ff    	jae    c0010226 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102b6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102ba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102be:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102ca:	e9 57 ff ff ff       	jmp    c0010226 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102cf:	83 ec 0c             	sub    esp,0xc
c00102d2:	68 cf a2 02 c0       	push   0xc002a2cf
c00102d7:	e8 d7 a2 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	bb 40 01 00 00       	mov    ebx,0x140
c00102e4:	83 ec 08             	sub    esp,0x8
c00102e7:	6a 00                	push   0x0
c00102e9:	53                   	push   ebx
c00102ea:	43                   	inc    ebx
c00102eb:	e8 1a fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102f0:	ff 05 d0 e5 02 c0    	inc    DWORD PTR ds:0xc002e5d0
c00102f6:	83 c4 10             	add    esp,0x10
c00102f9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102ff:	75 e3                	jne    c00102e4 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010301:	83 c4 3c             	add    esp,0x3c
c0010304:	5b                   	pop    ebx
c0010305:	5e                   	pop    esi
c0010306:	5f                   	pop    edi
c0010307:	5d                   	pop    ebp
c0010308:	c3                   	ret    
c0010309:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010311:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010319:	e9 d7 fe ff ff       	jmp    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001031e <Pipe::isAtty()>:
c001031e:	31 c0                	xor    eax,eax
c0010320:	c3                   	ret    
c0010321:	90                   	nop

c0010322 <Pipe::~Pipe()>:
c0010322:	83 ec 0c             	sub    esp,0xc
c0010325:	ba ac a3 02 c0       	mov    edx,0xc002a3ac
c001032a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001032e:	89 10                	mov    DWORD PTR [eax],edx
c0010330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010334:	83 ec 0c             	sub    esp,0xc
c0010337:	50                   	push   eax
c0010338:	e8 37 16 00 00       	call   c0011974 <UnixFile::~UnixFile()>
c001033d:	83 c4 10             	add    esp,0x10
c0010340:	90                   	nop
c0010341:	83 c4 0c             	add    esp,0xc
c0010344:	c3                   	ret    
c0010345:	90                   	nop

c0010346 <Pipe::~Pipe()>:
c0010346:	83 ec 0c             	sub    esp,0xc
c0010349:	83 ec 0c             	sub    esp,0xc
c001034c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010350:	e8 cd ff ff ff       	call   c0010322 <Pipe::~Pipe()>
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	6a 20                	push   0x20
c001035d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010361:	e8 cc 2a 00 00       	call   c0012e32 <operator delete(void*, unsigned long)>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	83 c4 0c             	add    esp,0xc
c001036c:	c3                   	ret    
c001036d:	90                   	nop

c001036e <Pipe::read(unsigned long long, void*, int*)>:
c001036e:	55                   	push   ebp
c001036f:	57                   	push   edi
c0010370:	56                   	push   esi
c0010371:	53                   	push   ebx
c0010372:	83 ec 1c             	sub    esp,0x1c
c0010375:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010379:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001037d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010381:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010384:	89 c8                	mov    eax,ecx
c0010386:	99                   	cdq    
c0010387:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001038b:	74 19                	je     c00103a6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001038d:	39 f9                	cmp    ecx,edi
c001038f:	89 d1                	mov    ecx,edx
c0010391:	19 f1                	sbb    ecx,esi
c0010393:	73 11                	jae    c00103a6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010395:	e8 3e da 00 00       	call   c001ddd8 <lockScheduler()>
c001039a:	e8 75 dd 00 00       	call   c001e114 <schedule()>
c001039f:	e8 36 da 00 00       	call   c001ddda <unlockScheduler()>
c00103a4:	eb db                	jmp    c0010381 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103a6:	39 f8                	cmp    eax,edi
c00103a8:	89 d1                	mov    ecx,edx
c00103aa:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103ae:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103b2:	19 f1                	sbb    ecx,esi
c00103b4:	73 08                	jae    c00103be <Pipe::read(unsigned long long, void*, int*)+0x50>
c00103b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103c1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c4:	29 c6                	sub    esi,eax
c00103c6:	89 f1                	mov    ecx,esi
c00103c8:	c1 f9 1f             	sar    ecx,0x1f
c00103cb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103cf:	89 ca                	mov    edx,ecx
c00103d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103d5:	19 d1                	sbb    ecx,edx
c00103d7:	73 04                	jae    c00103dd <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103d9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103dd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103e1:	89 fd                	mov    ebp,edi
c00103e3:	29 f5                	sub    ebp,esi
c00103e5:	85 f6                	test   esi,esi
c00103e7:	74 12                	je     c00103fb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103e9:	52                   	push   edx
c00103ea:	56                   	push   esi
c00103eb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103ee:	50                   	push   eax
c00103ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103f3:	e8 4c 03 ff ff       	call   c0000744 <memcpy>
c00103f8:	83 c4 10             	add    esp,0x10
c00103fb:	85 ed                	test   ebp,ebp
c00103fd:	74 12                	je     c0010411 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103ff:	50                   	push   eax
c0010400:	55                   	push   ebp
c0010401:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010404:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010408:	56                   	push   esi
c0010409:	e8 36 03 ff ff       	call   c0000744 <memcpy>
c001040e:	83 c4 10             	add    esp,0x10
c0010411:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010414:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010417:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001041a:	99                   	cdq    
c001041b:	89 f7                	mov    edi,esi
c001041d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010421:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010425:	c1 ff 1f             	sar    edi,0x1f
c0010428:	57                   	push   edi
c0010429:	56                   	push   esi
c001042a:	52                   	push   edx
c001042b:	50                   	push   eax
c001042c:	e8 8b 66 01 00       	call   c0026abc <__umoddi3>
c0010431:	83 c4 10             	add    esp,0x10
c0010434:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010437:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001043c:	75 10                	jne    c001044e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001043e:	83 ec 0c             	sub    esp,0xc
c0010441:	68 69 a3 02 c0       	push   0xc002a369
c0010446:	e8 68 a1 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c001044b:	83 c4 10             	add    esp,0x10
c001044e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010452:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010456:	89 10                	mov    DWORD PTR [eax],edx
c0010458:	83 c4 1c             	add    esp,0x1c
c001045b:	31 c0                	xor    eax,eax
c001045d:	5b                   	pop    ebx
c001045e:	5e                   	pop    esi
c001045f:	5f                   	pop    edi
c0010460:	5d                   	pop    ebp
c0010461:	c3                   	ret    

c0010462 <Pipe::write(unsigned long long, void*, int*)>:
c0010462:	55                   	push   ebp
c0010463:	57                   	push   edi
c0010464:	56                   	push   esi
c0010465:	53                   	push   ebx
c0010466:	83 ec 1c             	sub    esp,0x1c
c0010469:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001046d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010471:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010475:	89 04 24             	mov    DWORD PTR [esp],eax
c0010478:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001047b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001047e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010482:	89 de                	mov    esi,ebx
c0010484:	89 df                	mov    edi,ebx
c0010486:	c1 ff 1f             	sar    edi,0x1f
c0010489:	01 c6                	add    esi,eax
c001048b:	89 c8                	mov    eax,ecx
c001048d:	11 d7                	adc    edi,edx
c001048f:	99                   	cdq    
c0010490:	39 f1                	cmp    ecx,esi
c0010492:	89 d0                	mov    eax,edx
c0010494:	19 f8                	sbb    eax,edi
c0010496:	b8 01 00 00 00       	mov    eax,0x1
c001049b:	0f 82 80 00 00 00    	jb     c0010521 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104a4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104a7:	01 d8                	add    eax,ebx
c00104a9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104ad:	99                   	cdq    
c00104ae:	f7 f9                	idiv   ecx
c00104b0:	29 d1                	sub    ecx,edx
c00104b2:	89 d7                	mov    edi,edx
c00104b4:	89 c8                	mov    eax,ecx
c00104b6:	99                   	cdq    
c00104b7:	39 ce                	cmp    esi,ecx
c00104b9:	19 d3                	sbb    ebx,edx
c00104bb:	bb 00 00 00 00       	mov    ebx,0x0
c00104c0:	72 04                	jb     c00104c6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104c2:	89 f3                	mov    ebx,esi
c00104c4:	29 cb                	sub    ebx,ecx
c00104c6:	89 f1                	mov    ecx,esi
c00104c8:	29 d9                	sub    ecx,ebx
c00104ca:	74 1a                	je     c00104e6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104cc:	52                   	push   edx
c00104cd:	51                   	push   ecx
c00104ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104d6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104d9:	57                   	push   edi
c00104da:	e8 65 02 ff ff       	call   c0000744 <memcpy>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104e6:	85 db                	test   ebx,ebx
c00104e8:	74 12                	je     c00104fc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ea:	50                   	push   eax
c00104eb:	53                   	push   ebx
c00104ec:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104f0:	51                   	push   ecx
c00104f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104f4:	e8 4b 02 ff ff       	call   c0000744 <memcpy>
c00104f9:	83 c4 10             	add    esp,0x10
c00104fc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104ff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010504:	75 10                	jne    c0010516 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	68 85 a3 02 c0       	push   0xc002a385
c001050e:	e8 a0 a0 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001051a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001051d:	89 38                	mov    DWORD PTR [eax],edi
c001051f:	31 c0                	xor    eax,eax
c0010521:	83 c4 1c             	add    esp,0x1c
c0010524:	5b                   	pop    ebx
c0010525:	5e                   	pop    esi
c0010526:	5f                   	pop    edi
c0010527:	5d                   	pop    ebp
c0010528:	c3                   	ret    
c0010529:	90                   	nop

c001052a <Pipe::Pipe(int)>:
c001052a:	83 ec 0c             	sub    esp,0xc
c001052d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010531:	83 ec 08             	sub    esp,0x8
c0010534:	6a 00                	push   0x0
c0010536:	50                   	push   eax
c0010537:	e8 56 12 00 00       	call   c0011792 <UnixFile::UnixFile(int)>
c001053c:	83 c4 10             	add    esp,0x10
c001053f:	ba ac a3 02 c0       	mov    edx,0xc002a3ac
c0010544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010548:	89 10                	mov    DWORD PTR [eax],edx
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010552:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010559:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010564:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001056b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001056f:	83 ec 0c             	sub    esp,0xc
c0010572:	50                   	push   eax
c0010573:	e8 c8 f2 ff ff       	call   c000f840 <malloc>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	89 c2                	mov    edx,eax
c001057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010581:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010588:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001058c:	90                   	nop
c001058d:	83 c4 0c             	add    esp,0xc
c0010590:	c3                   	ret    
c0010591:	90                   	nop

c0010592 <VgaText::isAtty()>:
c0010592:	b0 01                	mov    al,0x1
c0010594:	c3                   	ret    
c0010595:	90                   	nop

c0010596 <VgaText::~VgaText()>:
c0010596:	83 ec 0c             	sub    esp,0xc
c0010599:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c001059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a2:	89 10                	mov    DWORD PTR [eax],edx
c00105a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a8:	83 ec 0c             	sub    esp,0xc
c00105ab:	50                   	push   eax
c00105ac:	e8 c3 13 00 00       	call   c0011974 <UnixFile::~UnixFile()>
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	90                   	nop
c00105b5:	83 c4 0c             	add    esp,0xc
c00105b8:	c3                   	ret    
c00105b9:	90                   	nop

c00105ba <VgaText::~VgaText()>:
c00105ba:	83 ec 0c             	sub    esp,0xc
c00105bd:	83 ec 0c             	sub    esp,0xc
c00105c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c4:	e8 cd ff ff ff       	call   c0010596 <VgaText::~VgaText()>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	83 ec 08             	sub    esp,0x8
c00105cf:	68 60 12 00 00       	push   0x1260
c00105d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d8:	e8 55 28 00 00       	call   c0012e32 <operator delete(void*, unsigned long)>
c00105dd:	83 c4 10             	add    esp,0x10
c00105e0:	83 c4 0c             	add    esp,0xc
c00105e3:	c3                   	ret    

c00105e4 <VgaText::read(unsigned long long, void*, int*)>:
c00105e4:	83 ec 10             	sub    esp,0x10
c00105e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f3:	e8 bc 5c 00 00       	call   c00162b4 <readKeyboard(VgaText*, char*, unsigned long)>
c00105f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105fc:	89 02                	mov    DWORD PTR [edx],eax
c00105fe:	31 c0                	xor    eax,eax
c0010600:	83 c4 1c             	add    esp,0x1c
c0010603:	c3                   	ret    

c0010604 <setTerminalScrollLock(bool)>:
c0010604:	c3                   	ret    

c0010605 <addToTerminalCycle(VgaText*)>:
c0010605:	8b 15 60 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e660
c001060b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060f:	85 d2                	test   edx,edx
c0010611:	75 0c                	jne    c001061f <addToTerminalCycle(VgaText*)+0x1a>
c0010613:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010619:	a3 60 e6 02 c0       	mov    ds:0xc002e660,eax
c001061e:	c3                   	ret    
c001061f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010625:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001062b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010631:	c3                   	ret    

c0010632 <installVgaTextImplementation()>:
c0010632:	83 ec 10             	sub    esp,0x10
c0010635:	6a 20                	push   0x20
c0010637:	6a 00                	push   0x0
c0010639:	68 40 e6 02 c0       	push   0xc002e640
c001063e:	e8 35 01 ff ff       	call   c0000778 <memset>
c0010643:	83 c4 1c             	add    esp,0x1c
c0010646:	c3                   	ret    

c0010647 <scrollTerminalScrollLock(int)>:
c0010647:	c3                   	ret    

c0010648 <VgaText::load()>:
c0010648:	53                   	push   ebx
c0010649:	31 c0                	xor    eax,eax
c001064b:	83 ec 58             	sub    esp,0x58
c001064e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010652:	89 e2                	mov    edx,esp
c0010654:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010658:	40                   	inc    eax
c0010659:	83 f8 50             	cmp    eax,0x50
c001065c:	75 f6                	jne    c0010654 <VgaText::load()+0xc>
c001065e:	31 c0                	xor    eax,eax
c0010660:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010667:	84 c9                	test   cl,cl
c0010669:	74 06                	je     c0010671 <VgaText::load()+0x29>
c001066b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001066e:	40                   	inc    eax
c001066f:	eb ef                	jmp    c0010660 <VgaText::load()+0x18>
c0010671:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010677:	85 c0                	test   eax,eax
c0010679:	74 09                	je     c0010684 <VgaText::load()+0x3c>
c001067b:	51                   	push   ecx
c001067c:	51                   	push   ecx
c001067d:	52                   	push   edx
c001067e:	53                   	push   ebx
c001067f:	ff d0                	call   eax
c0010681:	83 c4 10             	add    esp,0x10
c0010684:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001068a:	85 c0                	test   eax,eax
c001068c:	74 09                	je     c0010697 <VgaText::load()+0x4f>
c001068e:	83 ec 0c             	sub    esp,0xc
c0010691:	53                   	push   ebx
c0010692:	ff d0                	call   eax
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	83 c4 58             	add    esp,0x58
c001069a:	5b                   	pop    ebx
c001069b:	c3                   	ret    

c001069c <VgaText::updateCursor()>:
c001069c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a0:	39 05 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,eax
c00106a6:	75 0c                	jne    c00106b4 <VgaText::updateCursor()+0x18>
c00106a8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00106ae:	85 c0                	test   eax,eax
c00106b0:	74 02                	je     c00106b4 <VgaText::updateCursor()+0x18>
c00106b2:	ff e0                	jmp    eax
c00106b4:	c3                   	ret    
c00106b5:	90                   	nop

c00106b6 <VgaText::showCursor(bool)>:
c00106b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106be:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00106c4:	c3                   	ret    
c00106c5:	90                   	nop

c00106c6 <VgaText::disableBlink(bool)>:
c00106c6:	56                   	push   esi
c00106c7:	53                   	push   ebx
c00106c8:	51                   	push   ecx
c00106c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106d1:	39 1d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ebx
c00106d7:	75 18                	jne    c00106f1 <VgaText::disableBlink(bool)+0x2b>
c00106d9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106df:	85 c0                	test   eax,eax
c00106e1:	74 0e                	je     c00106f1 <VgaText::disableBlink(bool)+0x2b>
c00106e3:	89 f1                	mov    ecx,esi
c00106e5:	52                   	push   edx
c00106e6:	52                   	push   edx
c00106e7:	0f b6 d1             	movzx  edx,cl
c00106ea:	52                   	push   edx
c00106eb:	53                   	push   ebx
c00106ec:	ff d0                	call   eax
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	89 f0                	mov    eax,esi
c00106f3:	83 f0 01             	xor    eax,0x1
c00106f6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106fc:	58                   	pop    eax
c00106fd:	5b                   	pop    ebx
c00106fe:	5e                   	pop    esi
c00106ff:	c3                   	ret    

c0010700 <VgaText::doANSI_SGR(int)>:
c0010700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010708:	85 d2                	test   edx,edx
c001070a:	75 14                	jne    c0010720 <VgaText::doANSI_SGR(int)+0x20>
c001070c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010712:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010718:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001071e:	eb 65                	jmp    c0010785 <VgaText::doANSI_SGR(int)+0x85>
c0010720:	83 fa 07             	cmp    edx,0x7
c0010723:	75 14                	jne    c0010739 <VgaText::doANSI_SGR(int)+0x39>
c0010725:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001072b:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010731:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010737:	eb 4c                	jmp    c0010785 <VgaText::doANSI_SGR(int)+0x85>
c0010739:	83 fa 1b             	cmp    edx,0x1b
c001073c:	74 ce                	je     c001070c <VgaText::doANSI_SGR(int)+0xc>
c001073e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010741:	83 f9 07             	cmp    ecx,0x7
c0010744:	77 09                	ja     c001074f <VgaText::doANSI_SGR(int)+0x4f>
c0010746:	8b 14 8d e0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b20]
c001074d:	eb 20                	jmp    c001076f <VgaText::doANSI_SGR(int)+0x6f>
c001074f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010752:	83 f9 07             	cmp    ecx,0x7
c0010755:	77 09                	ja     c0010760 <VgaText::doANSI_SGR(int)+0x60>
c0010757:	8b 14 8d e0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b20]
c001075e:	eb 25                	jmp    c0010785 <VgaText::doANSI_SGR(int)+0x85>
c0010760:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010763:	83 f9 07             	cmp    ecx,0x7
c0010766:	77 0e                	ja     c0010776 <VgaText::doANSI_SGR(int)+0x76>
c0010768:	8b 14 95 98 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c68]
c001076f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010775:	c3                   	ret    
c0010776:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010779:	83 f9 07             	cmp    ecx,0x7
c001077c:	77 0d                	ja     c001078b <VgaText::doANSI_SGR(int)+0x8b>
c001077e:	8b 14 95 70 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c90]
c0010785:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001078b:	c3                   	ret    

c001078c <VgaText::setDefaultBgColour(VgaColour)>:
c001078c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010794:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001079a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107a0:	c3                   	ret    
c00107a1:	90                   	nop

c00107a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00107a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107aa:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00107b0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107b6:	c3                   	ret    
c00107b7:	90                   	nop

c00107b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107b8:	53                   	push   ebx
c00107b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107c5:	51                   	push   ecx
c00107c6:	e8 c1 ff ff ff       	call   c001078c <VgaText::setDefaultBgColour(VgaColour)>
c00107cb:	58                   	pop    eax
c00107cc:	5a                   	pop    edx
c00107cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107d5:	5b                   	pop    ebx
c00107d6:	eb ca                	jmp    c00107a2 <VgaText::setDefaultFgColour(VgaColour)>

c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107d8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107e1:	83 e0 0f             	and    eax,0xf
c00107e4:	c1 e2 04             	shl    edx,0x4
c00107e7:	09 d0                	or     eax,edx
c00107e9:	c3                   	ret    

c00107ea <VgaText::scrollScreen()>:
c00107ea:	57                   	push   edi
c00107eb:	56                   	push   esi
c00107ec:	be 01 00 00 00       	mov    esi,0x1
c00107f1:	53                   	push   ebx
c00107f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107f6:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107fc:	31 ff                	xor    edi,edi
c00107fe:	01 d9                	add    ecx,ebx
c0010800:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010803:	83 fe 17             	cmp    esi,0x17
c0010806:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001080c:	75 28                	jne    c0010836 <VgaText::scrollScreen()+0x4c>
c001080e:	f7 c7 01 00 00 00    	test   edi,0x1
c0010814:	74 1c                	je     c0010832 <VgaText::scrollScreen()+0x48>
c0010816:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001081d:	50                   	push   eax
c001081e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010825:	50                   	push   eax
c0010826:	e8 ad ff ff ff       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c001082b:	5a                   	pop    edx
c001082c:	5a                   	pop    edx
c001082d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010830:	eb 04                	jmp    c0010836 <VgaText::scrollScreen()+0x4c>
c0010832:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010836:	47                   	inc    edi
c0010837:	41                   	inc    ecx
c0010838:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001083e:	75 c0                	jne    c0010800 <VgaText::scrollScreen()+0x16>
c0010840:	46                   	inc    esi
c0010841:	83 fe 18             	cmp    esi,0x18
c0010844:	75 b0                	jne    c00107f6 <VgaText::scrollScreen()+0xc>
c0010846:	39 1d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ebx
c001084c:	75 24                	jne    c0010872 <VgaText::scrollScreen()+0x88>
c001084e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010855:	74 08                	je     c001085f <VgaText::scrollScreen()+0x75>
c0010857:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001085d:	eb 13                	jmp    c0010872 <VgaText::scrollScreen()+0x88>
c001085f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010865:	85 c0                	test   eax,eax
c0010867:	74 09                	je     c0010872 <VgaText::scrollScreen()+0x88>
c0010869:	83 ec 0c             	sub    esp,0xc
c001086c:	53                   	push   ebx
c001086d:	ff d0                	call   eax
c001086f:	83 c4 10             	add    esp,0x10
c0010872:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010876:	5b                   	pop    ebx
c0010877:	5e                   	pop    esi
c0010878:	5f                   	pop    edi
c0010879:	e9 1e fe ff ff       	jmp    c001069c <VgaText::updateCursor()>

c001087e <VgaText::combineCharAndColour(char, unsigned char)>:
c001087e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010883:	c1 e0 08             	shl    eax,0x8
c0010886:	89 c2                	mov    edx,eax
c0010888:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001088d:	09 d0                	or     eax,edx
c001088f:	c3                   	ret    

c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010890:	53                   	push   ebx
c0010891:	83 ec 08             	sub    esp,0x8
c0010894:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010898:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001089d:	50                   	push   eax
c001089e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108a3:	50                   	push   eax
c00108a4:	e8 2f ff ff ff       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00108a9:	5a                   	pop    edx
c00108aa:	0f b6 c0             	movzx  eax,al
c00108ad:	5b                   	pop    ebx
c00108ae:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00108b3:	50                   	push   eax
c00108b4:	53                   	push   ebx
c00108b5:	e8 c4 ff ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c00108ba:	5a                   	pop    edx
c00108bb:	5a                   	pop    edx
c00108bc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108c2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108c6:	0f b7 d2             	movzx  edx,dx
c00108c9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00108ce:	39 0d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ecx
c00108d4:	75 14                	jne    c00108ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108d6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108dc:	85 c0                	test   eax,eax
c00108de:	74 0a                	je     c00108ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108e0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108e4:	83 c4 08             	add    esp,0x8
c00108e7:	5b                   	pop    ebx
c00108e8:	ff e0                	jmp    eax
c00108ea:	83 c4 08             	add    esp,0x8
c00108ed:	5b                   	pop    ebx
c00108ee:	c3                   	ret    
c00108ef:	90                   	nop

c00108f0 <VgaText::getCursorX()>:
c00108f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f4:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108fa:	c3                   	ret    
c00108fb:	90                   	nop

c00108fc <VgaText::getCursorY()>:
c00108fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010900:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010906:	c3                   	ret    
c0010907:	90                   	nop

c0010908 <VgaText::setCursor(int, int)>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010910:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010916:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001091a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010920:	e9 77 fd ff ff       	jmp    c001069c <VgaText::updateCursor()>
c0010925:	90                   	nop

c0010926 <VgaText::setCursorX(int)>:
c0010926:	83 ec 10             	sub    esp,0x10
c0010929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001092d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010937:	50                   	push   eax
c0010938:	e8 cb ff ff ff       	call   c0010908 <VgaText::setCursor(int, int)>
c001093d:	83 c4 1c             	add    esp,0x1c
c0010940:	c3                   	ret    
c0010941:	90                   	nop

c0010942 <VgaText::setCursorY(int)>:
c0010942:	83 ec 10             	sub    esp,0x10
c0010945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001094d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010953:	50                   	push   eax
c0010954:	e8 af ff ff ff       	call   c0010908 <VgaText::setCursor(int, int)>
c0010959:	83 c4 1c             	add    esp,0x1c
c001095c:	c3                   	ret    
c001095d:	90                   	nop

c001095e <VgaText::incrementCursor(bool)>:
c001095e:	56                   	push   esi
c001095f:	53                   	push   ebx
c0010960:	51                   	push   ecx
c0010961:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010965:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010969:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001096f:	40                   	inc    eax
c0010970:	83 f8 50             	cmp    eax,0x50
c0010973:	74 08                	je     c001097d <VgaText::incrementCursor(bool)+0x1f>
c0010975:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001097b:	eb 33                	jmp    c00109b0 <VgaText::incrementCursor(bool)+0x52>
c001097d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010983:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001098d:	8d 50 01             	lea    edx,[eax+0x1]
c0010990:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010996:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001099c:	75 12                	jne    c00109b0 <VgaText::incrementCursor(bool)+0x52>
c001099e:	83 ec 0c             	sub    esp,0xc
c00109a1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109a7:	53                   	push   ebx
c00109a8:	e8 3d fe ff ff       	call   c00107ea <VgaText::scrollScreen()>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	89 f0                	mov    eax,esi
c00109b2:	84 c0                	test   al,al
c00109b4:	74 0c                	je     c00109c2 <VgaText::incrementCursor(bool)+0x64>
c00109b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109ba:	5a                   	pop    edx
c00109bb:	5b                   	pop    ebx
c00109bc:	5e                   	pop    esi
c00109bd:	e9 da fc ff ff       	jmp    c001069c <VgaText::updateCursor()>
c00109c2:	58                   	pop    eax
c00109c3:	5b                   	pop    ebx
c00109c4:	5e                   	pop    esi
c00109c5:	c3                   	ret    

c00109c6 <VgaText::updateRAMUsageDisplay(int)>:
c00109c6:	56                   	push   esi
c00109c7:	8b 35 c0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4c0
c00109cd:	53                   	push   ebx
c00109ce:	bb 0a 00 00 00       	mov    ebx,0xa
c00109d3:	6a 0f                	push   0xf
c00109d5:	6a 00                	push   0x0
c00109d7:	e8 fc fd ff ff       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00109dc:	5a                   	pop    edx
c00109dd:	59                   	pop    ecx
c00109de:	0f b6 c8             	movzx  ecx,al
c00109e1:	51                   	push   ecx
c00109e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e6:	99                   	cdq    
c00109e7:	f7 fb                	idiv   ebx
c00109e9:	89 d3                	mov    ebx,edx
c00109eb:	83 c0 30             	add    eax,0x30
c00109ee:	83 c3 30             	add    ebx,0x30
c00109f1:	0f be c0             	movsx  eax,al
c00109f4:	0f b6 db             	movzx  ebx,bl
c00109f7:	50                   	push   eax
c00109f8:	e8 81 fe ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c00109fd:	5a                   	pop    edx
c00109fe:	5a                   	pop    edx
c00109ff:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010a06:	51                   	push   ecx
c0010a07:	53                   	push   ebx
c0010a08:	e8 71 fe ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	5b                   	pop    ebx
c0010a0e:	5a                   	pop    edx
c0010a0f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010a16:	51                   	push   ecx
c0010a17:	6a 25                	push   0x25
c0010a19:	e8 60 fe ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1e:	59                   	pop    ecx
c0010a1f:	5b                   	pop    ebx
c0010a20:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a27:	5b                   	pop    ebx
c0010a28:	5e                   	pop    esi
c0010a29:	c3                   	ret    

c0010a2a <VgaText::updateDiskUsage()>:
c0010a2a:	55                   	push   ebp
c0010a2b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a30:	57                   	push   edi
c0010a31:	8b 3d c0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c0
c0010a37:	56                   	push   esi
c0010a38:	53                   	push   ebx
c0010a39:	6a 0f                	push   0xf
c0010a3b:	6a 00                	push   0x0
c0010a3d:	e8 96 fd ff ff       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a42:	5a                   	pop    edx
c0010a43:	0f b6 d8             	movzx  ebx,al
c0010a46:	59                   	pop    ecx
c0010a47:	8b 35 e8 28 03 c0    	mov    esi,DWORD PTR ds:0xc00328e8
c0010a4d:	53                   	push   ebx
c0010a4e:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a53:	89 f0                	mov    eax,esi
c0010a55:	99                   	cdq    
c0010a56:	f7 fd                	idiv   ebp
c0010a58:	99                   	cdq    
c0010a59:	f7 f9                	idiv   ecx
c0010a5b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a5e:	0f b6 c0             	movzx  eax,al
c0010a61:	50                   	push   eax
c0010a62:	e8 17 fe ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a67:	5d                   	pop    ebp
c0010a68:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a6d:	5a                   	pop    edx
c0010a6e:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a72:	53                   	push   ebx
c0010a73:	89 f0                	mov    eax,esi
c0010a75:	99                   	cdq    
c0010a76:	f7 fd                	idiv   ebp
c0010a78:	99                   	cdq    
c0010a79:	f7 f9                	idiv   ecx
c0010a7b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a7e:	0f b6 c0             	movzx  eax,al
c0010a81:	50                   	push   eax
c0010a82:	e8 f7 fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a87:	5d                   	pop    ebp
c0010a88:	bd 64 00 00 00       	mov    ebp,0x64
c0010a8d:	5a                   	pop    edx
c0010a8e:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a95:	53                   	push   ebx
c0010a96:	89 f0                	mov    eax,esi
c0010a98:	99                   	cdq    
c0010a99:	f7 fd                	idiv   ebp
c0010a9b:	99                   	cdq    
c0010a9c:	f7 f9                	idiv   ecx
c0010a9e:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa1:	0f b6 c0             	movzx  eax,al
c0010aa4:	50                   	push   eax
c0010aa5:	e8 d4 fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaa:	5d                   	pop    ebp
c0010aab:	5a                   	pop    edx
c0010aac:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010ab3:	53                   	push   ebx
c0010ab4:	89 f0                	mov    eax,esi
c0010ab6:	99                   	cdq    
c0010ab7:	f7 f9                	idiv   ecx
c0010ab9:	89 d6                	mov    esi,edx
c0010abb:	99                   	cdq    
c0010abc:	f7 f9                	idiv   ecx
c0010abe:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac1:	0f b6 c0             	movzx  eax,al
c0010ac4:	50                   	push   eax
c0010ac5:	e8 b4 fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010aca:	5d                   	pop    ebp
c0010acb:	5a                   	pop    edx
c0010acc:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010ad3:	53                   	push   ebx
c0010ad4:	8d 46 30             	lea    eax,[esi+0x30]
c0010ad7:	0f b6 f0             	movzx  esi,al
c0010ada:	56                   	push   esi
c0010adb:	e8 9e fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae0:	5e                   	pop    esi
c0010ae1:	8b 35 e4 28 03 c0    	mov    esi,DWORD PTR ds:0xc00328e4
c0010ae7:	5d                   	pop    ebp
c0010ae8:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aef:	bd 10 27 00 00       	mov    ebp,0x2710
c0010af4:	53                   	push   ebx
c0010af5:	89 f0                	mov    eax,esi
c0010af7:	99                   	cdq    
c0010af8:	f7 fd                	idiv   ebp
c0010afa:	99                   	cdq    
c0010afb:	f7 f9                	idiv   ecx
c0010afd:	8d 42 30             	lea    eax,[edx+0x30]
c0010b00:	0f b6 c0             	movzx  eax,al
c0010b03:	50                   	push   eax
c0010b04:	e8 75 fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b09:	5a                   	pop    edx
c0010b0a:	5d                   	pop    ebp
c0010b0b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010b12:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010b17:	53                   	push   ebx
c0010b18:	89 f0                	mov    eax,esi
c0010b1a:	99                   	cdq    
c0010b1b:	f7 fd                	idiv   ebp
c0010b1d:	99                   	cdq    
c0010b1e:	f7 f9                	idiv   ecx
c0010b20:	8d 42 30             	lea    eax,[edx+0x30]
c0010b23:	0f b6 c0             	movzx  eax,al
c0010b26:	50                   	push   eax
c0010b27:	e8 52 fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2c:	5a                   	pop    edx
c0010b2d:	5d                   	pop    ebp
c0010b2e:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b35:	bd 64 00 00 00       	mov    ebp,0x64
c0010b3a:	53                   	push   ebx
c0010b3b:	89 f0                	mov    eax,esi
c0010b3d:	99                   	cdq    
c0010b3e:	f7 fd                	idiv   ebp
c0010b40:	99                   	cdq    
c0010b41:	f7 f9                	idiv   ecx
c0010b43:	83 c2 30             	add    edx,0x30
c0010b46:	0f b6 d2             	movzx  edx,dl
c0010b49:	52                   	push   edx
c0010b4a:	e8 2f fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b4f:	5a                   	pop    edx
c0010b50:	5d                   	pop    ebp
c0010b51:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b58:	53                   	push   ebx
c0010b59:	89 f0                	mov    eax,esi
c0010b5b:	99                   	cdq    
c0010b5c:	f7 f9                	idiv   ecx
c0010b5e:	89 d6                	mov    esi,edx
c0010b60:	99                   	cdq    
c0010b61:	f7 f9                	idiv   ecx
c0010b63:	8d 42 30             	lea    eax,[edx+0x30]
c0010b66:	0f b6 c0             	movzx  eax,al
c0010b69:	50                   	push   eax
c0010b6a:	e8 0f fd ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b6f:	5a                   	pop    edx
c0010b70:	59                   	pop    ecx
c0010b71:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b78:	53                   	push   ebx
c0010b79:	8d 46 30             	lea    eax,[esi+0x30]
c0010b7c:	0f b6 f0             	movzx  esi,al
c0010b7f:	56                   	push   esi
c0010b80:	e8 f9 fc ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b85:	5b                   	pop    ebx
c0010b86:	5e                   	pop    esi
c0010b87:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b8e:	5b                   	pop    ebx
c0010b8f:	5e                   	pop    esi
c0010b90:	5f                   	pop    edi
c0010b91:	5d                   	pop    ebp
c0010b92:	c3                   	ret    
c0010b93:	90                   	nop

c0010b94 <VgaText::updateTitle()>:
c0010b94:	53                   	push   ebx
c0010b95:	31 c0                	xor    eax,eax
c0010b97:	83 ec 58             	sub    esp,0x58
c0010b9a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b9e:	89 e1                	mov    ecx,esp
c0010ba0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ba4:	40                   	inc    eax
c0010ba5:	83 f8 50             	cmp    eax,0x50
c0010ba8:	75 f6                	jne    c0010ba0 <VgaText::updateTitle()+0xc>
c0010baa:	31 c0                	xor    eax,eax
c0010bac:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010bb3:	84 db                	test   bl,bl
c0010bb5:	74 06                	je     c0010bbd <VgaText::updateTitle()+0x29>
c0010bb7:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010bba:	40                   	inc    eax
c0010bbb:	eb ef                	jmp    c0010bac <VgaText::updateTitle()+0x18>
c0010bbd:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010bc3:	85 c0                	test   eax,eax
c0010bc5:	74 09                	je     c0010bd0 <VgaText::updateTitle()+0x3c>
c0010bc7:	53                   	push   ebx
c0010bc8:	53                   	push   ebx
c0010bc9:	51                   	push   ecx
c0010bca:	52                   	push   edx
c0010bcb:	ff d0                	call   eax
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	e8 55 fe ff ff       	call   c0010a2a <VgaText::updateDiskUsage()>
c0010bd5:	83 c4 58             	add    esp,0x58
c0010bd8:	5b                   	pop    ebx
c0010bd9:	c3                   	ret    

c0010bda <VgaText::setTitleTextColour(VgaColour)>:
c0010bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010be2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010be8:	eb aa                	jmp    c0010b94 <VgaText::updateTitle()>

c0010bea <VgaText::setTitleColour(VgaColour)>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bf2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bf8:	eb 9a                	jmp    c0010b94 <VgaText::updateTitle()>

c0010bfa <VgaText::setTitle(char*)>:
c0010bfa:	53                   	push   ebx
c0010bfb:	83 ec 10             	sub    esp,0x10
c0010bfe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c06:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010c0c:	50                   	push   eax
c0010c0d:	e8 22 fc fe ff       	call   c0000834 <strcpy>
c0010c12:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010c16:	83 c4 18             	add    esp,0x18
c0010c19:	5b                   	pop    ebx
c0010c1a:	e9 75 ff ff ff       	jmp    c0010b94 <VgaText::updateTitle()>
c0010c1f:	90                   	nop

c0010c20 <VgaText::decrementCursor(bool)>:
c0010c20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c28:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010c2e:	85 c0                	test   eax,eax
c0010c30:	74 07                	je     c0010c39 <VgaText::decrementCursor(bool)+0x19>
c0010c32:	48                   	dec    eax
c0010c33:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c39:	84 c9                	test   cl,cl
c0010c3b:	74 09                	je     c0010c46 <VgaText::decrementCursor(bool)+0x26>
c0010c3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c41:	e9 56 fa ff ff       	jmp    c001069c <VgaText::updateCursor()>
c0010c46:	c3                   	ret    
c0010c47:	90                   	nop

c0010c48 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c48:	53                   	push   ebx
c0010c49:	83 ec 08             	sub    esp,0x8
c0010c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c5c:	3c 07                	cmp    al,0x7
c0010c5e:	75 2a                	jne    c0010c8a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c60:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c0010c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c6d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c75:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c81:	83 c4 08             	add    esp,0x8
c0010c84:	5b                   	pop    ebx
c0010c85:	e9 86 30 00 00       	jmp    c0013d10 <Buzzer::beep(int, int, bool)>
c0010c8a:	3c 0d                	cmp    al,0xd
c0010c8c:	75 0c                	jne    c0010c9a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c8e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c98:	eb 3b                	jmp    c0010cd5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c9a:	3c 0a                	cmp    al,0xa
c0010c9c:	75 40                	jne    c0010cde <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c9e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010ca4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010cae:	8d 50 01             	lea    edx,[eax+0x1]
c0010cb1:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010cb7:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010cbd:	75 12                	jne    c0010cd1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010cbf:	83 ec 0c             	sub    esp,0xc
c0010cc2:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010cc8:	53                   	push   ebx
c0010cc9:	e8 1c fb ff ff       	call   c00107ea <VgaText::scrollScreen()>
c0010cce:	83 c4 10             	add    esp,0x10
c0010cd1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cd5:	83 c4 08             	add    esp,0x8
c0010cd8:	5b                   	pop    ebx
c0010cd9:	e9 be f9 ff ff       	jmp    c001069c <VgaText::updateCursor()>
c0010cde:	3c 08                	cmp    al,0x8
c0010ce0:	75 31                	jne    c0010d13 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010ce2:	50                   	push   eax
c0010ce3:	50                   	push   eax
c0010ce4:	6a 01                	push   0x1
c0010ce6:	53                   	push   ebx
c0010ce7:	e8 34 ff ff ff       	call   c0010c20 <VgaText::decrementCursor(bool)>
c0010cec:	5a                   	pop    edx
c0010ced:	59                   	pop    ecx
c0010cee:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cf4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cfa:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d00:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d06:	6a 20                	push   0x20
c0010d08:	53                   	push   ebx
c0010d09:	e8 82 fb ff ff       	call   c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d0e:	83 c4 28             	add    esp,0x28
c0010d11:	5b                   	pop    ebx
c0010d12:	c3                   	ret    
c0010d13:	83 ec 08             	sub    esp,0x8
c0010d16:	0f be c0             	movsx  eax,al
c0010d19:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d1f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d25:	51                   	push   ecx
c0010d26:	52                   	push   edx
c0010d27:	50                   	push   eax
c0010d28:	53                   	push   ebx
c0010d29:	e8 62 fb ff ff       	call   c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d2e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d32:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d3a:	83 c4 28             	add    esp,0x28
c0010d3d:	5b                   	pop    ebx
c0010d3e:	e9 1b fc ff ff       	jmp    c001095e <VgaText::incrementCursor(bool)>
c0010d43:	90                   	nop

c0010d44 <VgaText::isShowingCursor()>:
c0010d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d48:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d4e:	c3                   	ret    
c0010d4f:	90                   	nop

c0010d50 <VgaText::isBlinkDisabled()>:
c0010d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d54:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d5a:	83 f0 01             	xor    eax,0x1
c0010d5d:	c3                   	ret    

c0010d5e <VgaText::setCursorHeight(int)>:
c0010d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d66:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d6c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d77:	e9 3a f9 ff ff       	jmp    c00106b6 <VgaText::showCursor(bool)>

c0010d7c <VgaText::getCursorHeight()>:
c0010d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d80:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d86:	c3                   	ret    

c0010d87 <setActiveTerminal(VgaText*)>:
c0010d87:	53                   	push   ebx
c0010d88:	83 ec 08             	sub    esp,0x8
c0010d8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d8f:	85 db                	test   ebx,ebx
c0010d91:	75 11                	jne    c0010da4 <setActiveTerminal(VgaText*)+0x1d>
c0010d93:	c7 44 24 10 c0 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3c0
c0010d9b:	83 c4 08             	add    esp,0x8
c0010d9e:	5b                   	pop    ebx
c0010d9f:	e9 0f 98 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>
c0010da4:	50                   	push   eax
c0010da5:	50                   	push   eax
c0010da6:	53                   	push   ebx
c0010da7:	68 ce a3 02 c0       	push   0xc002a3ce
c0010dac:	e8 61 21 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0010db1:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	85 c0                	test   eax,eax
c0010dbb:	74 0c                	je     c0010dc9 <setActiveTerminal(VgaText*)+0x42>
c0010dbd:	83 ec 0c             	sub    esp,0xc
c0010dc0:	50                   	push   eax
c0010dc1:	e8 d6 f8 ff ff       	call   c001069c <VgaText::updateCursor()>
c0010dc6:	83 c4 10             	add    esp,0x10
c0010dc9:	89 1d 64 e6 02 c0    	mov    DWORD PTR ds:0xc002e664,ebx
c0010dcf:	51                   	push   ecx
c0010dd0:	51                   	push   ecx
c0010dd1:	53                   	push   ebx
c0010dd2:	68 e6 a3 02 c0       	push   0xc002a3e6
c0010dd7:	e8 36 21 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0010ddc:	83 c4 0c             	add    esp,0xc
c0010ddf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010de5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010deb:	53                   	push   ebx
c0010dec:	e8 17 fb ff ff       	call   c0010908 <VgaText::setCursor(int, int)>
c0010df1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df4:	e8 57 ff ff ff       	call   c0010d50 <VgaText::isBlinkDisabled()>
c0010df9:	5a                   	pop    edx
c0010dfa:	0f b6 c0             	movzx  eax,al
c0010dfd:	59                   	pop    ecx
c0010dfe:	50                   	push   eax
c0010dff:	53                   	push   ebx
c0010e00:	e8 c1 f8 ff ff       	call   c00106c6 <VgaText::disableBlink(bool)>
c0010e05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e08:	e8 6f ff ff ff       	call   c0010d7c <VgaText::getCursorHeight()>
c0010e0d:	5a                   	pop    edx
c0010e0e:	59                   	pop    ecx
c0010e0f:	50                   	push   eax
c0010e10:	53                   	push   ebx
c0010e11:	e8 48 ff ff ff       	call   c0010d5e <VgaText::setCursorHeight(int)>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e20:	75 0a                	jne    c0010e2c <setActiveTerminal(VgaText*)+0xa5>
c0010e22:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e2c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e30:	83 c4 08             	add    esp,0x8
c0010e33:	5b                   	pop    ebx
c0010e34:	e9 0f f8 ff ff       	jmp    c0010648 <VgaText::load()>

c0010e39 <doTerminalCycle()>:
c0010e39:	83 ec 18             	sub    esp,0x18
c0010e3c:	a1 60 e6 02 c0       	mov    eax,ds:0xc002e660
c0010e41:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e47:	50                   	push   eax
c0010e48:	a3 60 e6 02 c0       	mov    ds:0xc002e660,eax
c0010e4d:	e8 35 ff ff ff       	call   c0010d87 <setActiveTerminal(VgaText*)>
c0010e52:	83 c4 1c             	add    esp,0x1c
c0010e55:	c3                   	ret    

c0010e56 <VgaText::doUpdate()>:
c0010e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e5a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e60:	85 c0                	test   eax,eax
c0010e62:	74 02                	je     c0010e66 <VgaText::doUpdate()+0x10>
c0010e64:	ff e0                	jmp    eax
c0010e66:	c3                   	ret    
c0010e67:	90                   	nop

c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e68:	55                   	push   ebp
c0010e69:	57                   	push   edi
c0010e6a:	56                   	push   esi
c0010e6b:	53                   	push   ebx
c0010e6c:	83 ec 1c             	sub    esp,0x1c
c0010e6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e73:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e78:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e7f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e82:	50                   	push   eax
c0010e83:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e88:	50                   	push   eax
c0010e89:	e8 4a f9 ff ff       	call   c00107d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e8e:	59                   	pop    ecx
c0010e8f:	0f b6 c0             	movzx  eax,al
c0010e92:	5b                   	pop    ebx
c0010e93:	31 c9                	xor    ecx,ecx
c0010e95:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e9d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010ea1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eab:	0f b7 db             	movzx  ebx,bx
c0010eae:	01 db                	add    ebx,ebx
c0010eb0:	01 fb                	add    ebx,edi
c0010eb2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010eb5:	84 c0                	test   al,al
c0010eb7:	0f 84 38 01 00 00    	je     c0010ff5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010ebd:	3c 0d                	cmp    al,0xd
c0010ebf:	75 0f                	jne    c0010ed0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010ec1:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ecb:	e9 1f 01 00 00       	jmp    c0010fef <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed0:	3c 0a                	cmp    al,0xa
c0010ed2:	75 5b                	jne    c0010f2f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ed4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010eda:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ee4:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ee7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eed:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ef3:	75 12                	jne    c0010f07 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ef5:	83 ec 0c             	sub    esp,0xc
c0010ef8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010efe:	55                   	push   ebp
c0010eff:	e8 e6 f8 ff ff       	call   c00107ea <VgaText::scrollScreen()>
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	83 ec 0c             	sub    esp,0xc
c0010f0a:	55                   	push   ebp
c0010f0b:	e8 8c f7 ff ff       	call   c001069c <VgaText::updateCursor()>
c0010f10:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f18:	83 c4 10             	add    esp,0x10
c0010f1b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f21:	31 c9                	xor    ecx,ecx
c0010f23:	0f b7 db             	movzx  ebx,bx
c0010f26:	01 db                	add    ebx,ebx
c0010f28:	01 fb                	add    ebx,edi
c0010f2a:	e9 c0 00 00 00       	jmp    c0010fef <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f2f:	3c 08                	cmp    al,0x8
c0010f31:	75 4e                	jne    c0010f81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f33:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f37:	53                   	push   ebx
c0010f38:	53                   	push   ebx
c0010f39:	6a 01                	push   0x1
c0010f3b:	55                   	push   ebp
c0010f3c:	e8 df fc ff ff       	call   c0010c20 <VgaText::decrementCursor(bool)>
c0010f41:	58                   	pop    eax
c0010f42:	5a                   	pop    edx
c0010f43:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f49:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f4f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f55:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f5b:	6a 20                	push   0x20
c0010f5d:	55                   	push   ebp
c0010f5e:	e8 2d f9 ff ff       	call   c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f63:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f6b:	83 c4 20             	add    esp,0x20
c0010f6e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f74:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f78:	0f b7 db             	movzx  ebx,bx
c0010f7b:	01 db                	add    ebx,ebx
c0010f7d:	01 fb                	add    ebx,edi
c0010f7f:	eb 6e                	jmp    c0010fef <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f81:	51                   	push   ecx
c0010f82:	51                   	push   ecx
c0010f83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f87:	50                   	push   eax
c0010f88:	e8 f1 f8 ff ff       	call   c001087e <VgaText::combineCharAndColour(char, unsigned char)>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f93:	39 2d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ebp
c0010f99:	75 2a                	jne    c0010fc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f9b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010fa1:	85 c0                	test   eax,eax
c0010fa3:	74 20                	je     c0010fc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fa5:	52                   	push   edx
c0010fa6:	52                   	push   edx
c0010fa7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010fad:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010fb3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fb7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fbb:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010fbe:	51                   	push   ecx
c0010fbf:	55                   	push   ebp
c0010fc0:	ff d0                	call   eax
c0010fc2:	83 c4 20             	add    esp,0x20
c0010fc5:	83 c3 02             	add    ebx,0x2
c0010fc8:	50                   	push   eax
c0010fc9:	50                   	push   eax
c0010fca:	6a 00                	push   0x0
c0010fcc:	55                   	push   ebp
c0010fcd:	e8 8c f9 ff ff       	call   c001095e <VgaText::incrementCursor(bool)>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fdc:	75 0f                	jne    c0010fed <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fde:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fe6:	0f b7 db             	movzx  ebx,bx
c0010fe9:	01 db                	add    ebx,ebx
c0010feb:	01 fb                	add    ebx,edi
c0010fed:	b1 01                	mov    cl,0x1
c0010fef:	46                   	inc    esi
c0010ff0:	e9 bd fe ff ff       	jmp    c0010eb2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010ff5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ff9:	83 ec 0c             	sub    esp,0xc
c0010ffc:	55                   	push   ebp
c0010ffd:	e8 9a f6 ff ff       	call   c001069c <VgaText::updateCursor()>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0011009:	84 c9                	test   cl,cl
c001100b:	74 0c                	je     c0011019 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001100d:	83 ec 0c             	sub    esp,0xc
c0011010:	55                   	push   ebp
c0011011:	e8 40 fe ff ff       	call   c0010e56 <VgaText::doUpdate()>
c0011016:	83 c4 10             	add    esp,0x10
c0011019:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0011020:	83 c4 1c             	add    esp,0x1c
c0011023:	5b                   	pop    ebx
c0011024:	5e                   	pop    esi
c0011025:	5f                   	pop    edi
c0011026:	5d                   	pop    ebp
c0011027:	c3                   	ret    

c0011028 <VgaText::clearScreen()>:
c0011028:	57                   	push   edi
c0011029:	56                   	push   esi
c001102a:	31 f6                	xor    esi,esi
c001102c:	53                   	push   ebx
c001102d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011031:	52                   	push   edx
c0011032:	6a 00                	push   0x0
c0011034:	6a 00                	push   0x0
c0011036:	53                   	push   ebx
c0011037:	e8 cc f8 ff ff       	call   c0010908 <VgaText::setCursor(int, int)>
c001103c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011043:	83 c4 10             	add    esp,0x10
c0011046:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001104c:	7e 26                	jle    c0011074 <VgaText::clearScreen()+0x4c>
c001104e:	31 ff                	xor    edi,edi
c0011050:	50                   	push   eax
c0011051:	50                   	push   eax
c0011052:	56                   	push   esi
c0011053:	57                   	push   edi
c0011054:	47                   	inc    edi
c0011055:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001105b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011061:	6a 20                	push   0x20
c0011063:	53                   	push   ebx
c0011064:	e8 27 f8 ff ff       	call   c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011069:	83 c4 20             	add    esp,0x20
c001106c:	83 ff 50             	cmp    edi,0x50
c001106f:	75 df                	jne    c0011050 <VgaText::clearScreen()+0x28>
c0011071:	46                   	inc    esi
c0011072:	eb d2                	jmp    c0011046 <VgaText::clearScreen()+0x1e>
c0011074:	83 ec 0c             	sub    esp,0xc
c0011077:	53                   	push   ebx
c0011078:	e8 d9 fd ff ff       	call   c0010e56 <VgaText::doUpdate()>
c001107d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011084:	83 c4 10             	add    esp,0x10
c0011087:	5b                   	pop    ebx
c0011088:	5e                   	pop    esi
c0011089:	5f                   	pop    edi
c001108a:	c3                   	ret    
c001108b:	90                   	nop

c001108c <VgaText::putchar(char)>:
c001108c:	56                   	push   esi
c001108d:	53                   	push   ebx
c001108e:	83 ec 14             	sub    esp,0x14
c0011091:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011099:	3c 5b                	cmp    al,0x5b
c001109b:	75 21                	jne    c00110be <VgaText::putchar(char)+0x32>
c001109d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00110a4:	74 28                	je     c00110ce <VgaText::putchar(char)+0x42>
c00110a6:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00110af:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00110b9:	e9 e2 00 00 00       	jmp    c00111a0 <VgaText::putchar(char)+0x114>
c00110be:	3c 1b                	cmp    al,0x1b
c00110c0:	75 0c                	jne    c00110ce <VgaText::putchar(char)+0x42>
c00110c2:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00110c9:	e9 d2 00 00 00       	jmp    c00111a0 <VgaText::putchar(char)+0x114>
c00110ce:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110d4:	84 c9                	test   cl,cl
c00110d6:	0f 84 ab 00 00 00    	je     c0011187 <VgaText::putchar(char)+0xfb>
c00110dc:	8d 50 c0             	lea    edx,[eax-0x40]
c00110df:	80 fa 3e             	cmp    dl,0x3e
c00110e2:	0f 87 82 00 00 00    	ja     c001116a <VgaText::putchar(char)+0xde>
c00110e8:	3c 6d                	cmp    al,0x6d
c00110ea:	75 4d                	jne    c0011139 <VgaText::putchar(char)+0xad>
c00110ec:	31 f6                	xor    esi,esi
c00110ee:	31 d2                	xor    edx,edx
c00110f0:	31 c0                	xor    eax,eax
c00110f2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110f8:	7e 30                	jle    c001112a <VgaText::putchar(char)+0x9e>
c00110fa:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011102:	80 fa 3b             	cmp    dl,0x3b
c0011105:	75 17                	jne    c001111e <VgaText::putchar(char)+0x92>
c0011107:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001110b:	50                   	push   eax
c001110c:	53                   	push   ebx
c001110d:	e8 ee f5 ff ff       	call   c0010700 <VgaText::doANSI_SGR(int)>
c0011112:	59                   	pop    ecx
c0011113:	31 d2                	xor    edx,edx
c0011115:	58                   	pop    eax
c0011116:	31 c0                	xor    eax,eax
c0011118:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001111c:	eb 09                	jmp    c0011127 <VgaText::putchar(char)+0x9b>
c001111e:	6b c0 0a             	imul   eax,eax,0xa
c0011121:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011125:	88 ca                	mov    dl,cl
c0011127:	46                   	inc    esi
c0011128:	eb c8                	jmp    c00110f2 <VgaText::putchar(char)+0x66>
c001112a:	84 d2                	test   dl,dl
c001112c:	74 31                	je     c001115f <VgaText::putchar(char)+0xd3>
c001112e:	50                   	push   eax
c001112f:	53                   	push   ebx
c0011130:	e8 cb f5 ff ff       	call   c0010700 <VgaText::doANSI_SGR(int)>
c0011135:	58                   	pop    eax
c0011136:	5a                   	pop    edx
c0011137:	eb 26                	jmp    c001115f <VgaText::putchar(char)+0xd3>
c0011139:	3c 4a                	cmp    al,0x4a
c001113b:	75 22                	jne    c001115f <VgaText::putchar(char)+0xd3>
c001113d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011144:	75 19                	jne    c001115f <VgaText::putchar(char)+0xd3>
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	53                   	push   ebx
c001114a:	e8 d9 fe ff ff       	call   c0011028 <VgaText::clearScreen()>
c001114f:	83 c4 0c             	add    esp,0xc
c0011152:	6a 00                	push   0x0
c0011154:	6a 00                	push   0x0
c0011156:	53                   	push   ebx
c0011157:	e8 ac f7 ff ff       	call   c0010908 <VgaText::setCursor(int, int)>
c001115c:	83 c4 10             	add    esp,0x10
c001115f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011168:	eb 36                	jmp    c00111a0 <VgaText::putchar(char)+0x114>
c001116a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011170:	83 fa 0e             	cmp    edx,0xe
c0011173:	7f 2b                	jg     c00111a0 <VgaText::putchar(char)+0x114>
c0011175:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011178:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001117e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011185:	eb 19                	jmp    c00111a0 <VgaText::putchar(char)+0x114>
c0011187:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001118d:	0f be c0             	movsx  eax,al
c0011190:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011196:	50                   	push   eax
c0011197:	53                   	push   ebx
c0011198:	e8 ab fa ff ff       	call   c0010c48 <VgaText::putchar(char, VgaColour, VgaColour)>
c001119d:	83 c4 10             	add    esp,0x10
c00111a0:	83 c4 14             	add    esp,0x14
c00111a3:	5b                   	pop    ebx
c00111a4:	5e                   	pop    esi
c00111a5:	c3                   	ret    

c00111a6 <VgaText::puts(char const*)>:
c00111a6:	53                   	push   ebx
c00111a7:	83 ec 08             	sub    esp,0x8
c00111aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00111b1:	84 c0                	test   al,al
c00111b3:	74 12                	je     c00111c7 <VgaText::puts(char const*)+0x21>
c00111b5:	43                   	inc    ebx
c00111b6:	51                   	push   ecx
c00111b7:	51                   	push   ecx
c00111b8:	50                   	push   eax
c00111b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111bd:	e8 ca fe ff ff       	call   c001108c <VgaText::putchar(char)>
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	eb e7                	jmp    c00111ae <VgaText::puts(char const*)+0x8>
c00111c7:	83 c4 08             	add    esp,0x8
c00111ca:	5b                   	pop    ebx
c00111cb:	c3                   	ret    

c00111cc <VgaText::putx(unsigned int)>:
c00111cc:	57                   	push   edi
c00111cd:	b9 11 00 00 00       	mov    ecx,0x11
c00111d2:	56                   	push   esi
c00111d3:	be 02 a4 02 c0       	mov    esi,0xc002a402
c00111d8:	53                   	push   ebx
c00111d9:	83 ec 20             	sub    esp,0x20
c00111dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111e0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111e4:	fc                   	cld    
c00111e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111e7:	be 08 00 00 00       	mov    esi,0x8
c00111ec:	50                   	push   eax
c00111ed:	50                   	push   eax
c00111ee:	89 d8                	mov    eax,ebx
c00111f0:	c1 e3 04             	shl    ebx,0x4
c00111f3:	c1 e8 1c             	shr    eax,0x1c
c00111f6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111fb:	50                   	push   eax
c00111fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011200:	e8 87 fe ff ff       	call   c001108c <VgaText::putchar(char)>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	4e                   	dec    esi
c0011209:	75 e1                	jne    c00111ec <VgaText::putx(unsigned int)+0x20>
c001120b:	83 c4 20             	add    esp,0x20
c001120e:	5b                   	pop    ebx
c001120f:	5e                   	pop    esi
c0011210:	5f                   	pop    edi
c0011211:	c3                   	ret    

c0011212 <VgaText::VgaText(char const*)>:
c0011212:	57                   	push   edi
c0011213:	56                   	push   esi
c0011214:	53                   	push   ebx
c0011215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011219:	83 ec 08             	sub    esp,0x8
c001121c:	6a 00                	push   0x0
c001121e:	50                   	push   eax
c001121f:	e8 6e 05 00 00       	call   c0011792 <UnixFile::UnixFile(int)>
c0011224:	83 c4 10             	add    esp,0x10
c0011227:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c001122c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011230:	89 10                	mov    DWORD PTR [eax],edx
c0011232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011236:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011252:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011268:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011276:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001128b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00112a0:	bb 40 e6 02 c0       	mov    ebx,0xc002e640
c00112a5:	b8 08 00 00 00       	mov    eax,0x8
c00112aa:	fc                   	cld    
c00112ab:	89 d7                	mov    edi,edx
c00112ad:	89 de                	mov    esi,ebx
c00112af:	89 c1                	mov    ecx,eax
c00112b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b7:	05 1e 10 00 00       	add    eax,0x101e
c00112bc:	83 ec 08             	sub    esp,0x8
c00112bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c3:	50                   	push   eax
c00112c4:	e8 6b f5 fe ff       	call   c0000834 <strcpy>
c00112c9:	83 c4 10             	add    esp,0x10
c00112cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112de:	83 c0 0c             	add    eax,0xc
c00112e1:	83 ec 04             	sub    esp,0x4
c00112e4:	68 00 0f 00 00       	push   0xf00
c00112e9:	6a 00                	push   0x0
c00112eb:	50                   	push   eax
c00112ec:	e8 87 f4 fe ff       	call   c0000778 <memset>
c00112f1:	83 c4 10             	add    esp,0x10
c00112f4:	83 ec 04             	sub    esp,0x4
c00112f7:	6a 00                	push   0x0
c00112f9:	6a 07                	push   0x7
c00112fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ff:	e8 b4 f4 ff ff       	call   c00107b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	83 ec 08             	sub    esp,0x8
c001130a:	6a 02                	push   0x2
c001130c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011310:	e8 49 fa ff ff       	call   c0010d5e <VgaText::setCursorHeight(int)>
c0011315:	83 c4 10             	add    esp,0x10
c0011318:	83 ec 04             	sub    esp,0x4
c001131b:	6a 00                	push   0x0
c001131d:	6a 00                	push   0x0
c001131f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011323:	e8 e0 f5 ff ff       	call   c0010908 <VgaText::setCursor(int, int)>
c0011328:	83 c4 10             	add    esp,0x10
c001132b:	83 ec 08             	sub    esp,0x8
c001132e:	6a 01                	push   0x1
c0011330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011334:	e8 7d f3 ff ff       	call   c00106b6 <VgaText::showCursor(bool)>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	83 ec 08             	sub    esp,0x8
c001133f:	6a 01                	push   0x1
c0011341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011345:	e8 7c f3 ff ff       	call   c00106c6 <VgaText::disableBlink(bool)>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	83 ec 0c             	sub    esp,0xc
c0011350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011354:	e8 cf fc ff ff       	call   c0011028 <VgaText::clearScreen()>
c0011359:	83 c4 10             	add    esp,0x10
c001135c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011360:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136b:	05 9e 10 00 00       	add    eax,0x109e
c0011370:	83 ec 04             	sub    esp,0x4
c0011373:	68 96 00 00 00       	push   0x96
c0011378:	6a 00                	push   0x0
c001137a:	50                   	push   eax
c001137b:	e8 f8 f3 fe ff       	call   c0000778 <memset>
c0011380:	83 c4 10             	add    esp,0x10
c0011383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011387:	05 34 11 00 00       	add    eax,0x1134
c001138c:	83 ec 04             	sub    esp,0x4
c001138f:	68 2c 01 00 00       	push   0x12c
c0011394:	6a 00                	push   0x0
c0011396:	50                   	push   eax
c0011397:	e8 dc f3 fe ff       	call   c0000778 <memset>
c001139c:	83 c4 10             	add    esp,0x10
c001139f:	90                   	nop
c00113a0:	5b                   	pop    ebx
c00113a1:	5e                   	pop    esi
c00113a2:	5f                   	pop    edi
c00113a3:	c3                   	ret    

c00113a4 <VgaText::receiveKey(unsigned char)>:
c00113a4:	55                   	push   ebp
c00113a5:	57                   	push   edi
c00113a6:	56                   	push   esi
c00113a7:	53                   	push   ebx
c00113a8:	83 ec 1c             	sub    esp,0x1c
c00113ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113b3:	84 db                	test   bl,bl
c00113b5:	0f 84 c9 00 00 00    	je     c0011484 <VgaText::receiveKey(unsigned char)+0xe0>
c00113bb:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00113c1:	80 fb 08             	cmp    bl,0x8
c00113c4:	75 2c                	jne    c00113f2 <VgaText::receiveKey(unsigned char)+0x4e>
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	57                   	push   edi
c00113ca:	e8 c5 f3 fe ff       	call   c0000794 <strlen>
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	85 c0                	test   eax,eax
c00113d4:	74 41                	je     c0011417 <VgaText::receiveKey(unsigned char)+0x73>
c00113d6:	50                   	push   eax
c00113d7:	50                   	push   eax
c00113d8:	6a 08                	push   0x8
c00113da:	56                   	push   esi
c00113db:	e8 ac fc ff ff       	call   c001108c <VgaText::putchar(char)>
c00113e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e3:	e8 ac f3 fe ff       	call   c0000794 <strlen>
c00113e8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113f0:	eb 22                	jmp    c0011414 <VgaText::receiveKey(unsigned char)+0x70>
c00113f2:	0f be c3             	movsx  eax,bl
c00113f5:	52                   	push   edx
c00113f6:	52                   	push   edx
c00113f7:	50                   	push   eax
c00113f8:	56                   	push   esi
c00113f9:	e8 8e fc ff ff       	call   c001108c <VgaText::putchar(char)>
c00113fe:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011402:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011407:	59                   	pop    ecx
c0011408:	5d                   	pop    ebp
c0011409:	8d 44 24 16          	lea    eax,[esp+0x16]
c001140d:	50                   	push   eax
c001140e:	57                   	push   edi
c001140f:	e8 60 f5 fe ff       	call   c0000974 <strcat>
c0011414:	83 c4 10             	add    esp,0x10
c0011417:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001141e:	75 05                	jne    c0011425 <VgaText::receiveKey(unsigned char)+0x81>
c0011420:	80 fb 0a             	cmp    bl,0xa
c0011423:	75 53                	jne    c0011478 <VgaText::receiveKey(unsigned char)+0xd4>
c0011425:	83 ec 0c             	sub    esp,0xc
c0011428:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001142e:	53                   	push   ebx
c001142f:	e8 60 f3 fe ff       	call   c0000794 <strlen>
c0011434:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011437:	89 c5                	mov    ebp,eax
c0011439:	e8 56 f3 fe ff       	call   c0000794 <strlen>
c001143e:	83 c4 10             	add    esp,0x10
c0011441:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011445:	3d 2c 01 00 00       	cmp    eax,0x12c
c001144a:	76 10                	jbe    c001145c <VgaText::receiveKey(unsigned char)+0xb8>
c001144c:	83 ec 0c             	sub    esp,0xc
c001144f:	68 13 a4 02 c0       	push   0xc002a413
c0011454:	e8 5a 91 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0011459:	83 c4 10             	add    esp,0x10
c001145c:	50                   	push   eax
c001145d:	50                   	push   eax
c001145e:	57                   	push   edi
c001145f:	53                   	push   ebx
c0011460:	e8 0f f5 fe ff       	call   c0000974 <strcat>
c0011465:	83 c4 0c             	add    esp,0xc
c0011468:	68 96 00 00 00       	push   0x96
c001146d:	6a 00                	push   0x0
c001146f:	57                   	push   edi
c0011470:	e8 03 f3 fe ff       	call   c0000778 <memset>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	56                   	push   esi
c001147c:	e8 d5 f9 ff ff       	call   c0010e56 <VgaText::doUpdate()>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	83 c4 1c             	add    esp,0x1c
c0011487:	5b                   	pop    ebx
c0011488:	5e                   	pop    esi
c0011489:	5f                   	pop    edi
c001148a:	5d                   	pop    ebp
c001148b:	c3                   	ret    

c001148c <VgaText::write(unsigned long long, void*, int*)>:
c001148c:	55                   	push   ebp
c001148d:	57                   	push   edi
c001148e:	56                   	push   esi
c001148f:	53                   	push   ebx
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011497:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001149b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001149f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00114a6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114a9:	39 eb                	cmp    ebx,ebp
c00114ab:	74 13                	je     c00114c0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114ad:	43                   	inc    ebx
c00114ae:	50                   	push   eax
c00114af:	50                   	push   eax
c00114b0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114b4:	50                   	push   eax
c00114b5:	56                   	push   esi
c00114b6:	e8 d1 fb ff ff       	call   c001108c <VgaText::putchar(char)>
c00114bb:	83 c4 10             	add    esp,0x10
c00114be:	eb e9                	jmp    c00114a9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00114ca:	56                   	push   esi
c00114cb:	e8 86 f9 ff ff       	call   c0010e56 <VgaText::doUpdate()>
c00114d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114d4:	89 38                	mov    DWORD PTR [eax],edi
c00114d6:	83 c4 1c             	add    esp,0x1c
c00114d9:	31 c0                	xor    eax,eax
c00114db:	5b                   	pop    ebx
c00114dc:	5e                   	pop    esi
c00114dd:	5f                   	pop    edi
c00114de:	5d                   	pop    ebp
c00114df:	c3                   	ret    

c00114e0 <newTerminal(char*)>:
c00114e0:	83 ec 28             	sub    esp,0x28
c00114e3:	68 60 12 00 00       	push   0x1260
c00114e8:	e8 53 e3 ff ff       	call   c000f840 <malloc>
c00114ed:	5a                   	pop    edx
c00114ee:	59                   	pop    ecx
c00114ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114f3:	50                   	push   eax
c00114f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f8:	e8 15 fd ff ff       	call   c0011212 <VgaText::VgaText(char const*)>
c00114fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011501:	83 c4 2c             	add    esp,0x2c
c0011504:	c3                   	ret    
c0011505:	90                   	nop

c0011506 <TSS::TSS()>:
c0011506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001150a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011511:	90                   	nop
c0011512:	c3                   	ret    
c0011513:	90                   	nop

c0011514 <TSS::setESP(unsigned long)>:
c0011514:	55                   	push   ebp
c0011515:	89 e5                	mov    ebp,esp
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011520:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011523:	90                   	nop
c0011524:	5d                   	pop    ebp
c0011525:	c3                   	ret    

c0011526 <TSS::flush()>:
c0011526:	55                   	push   ebp
c0011527:	89 e5                	mov    ebp,esp
c0011529:	83 ec 10             	sub    esp,0x10
c001152c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011531:	83 c8 03             	or     eax,0x3
c0011534:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011538:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001153c:	66 89 d0             	mov    ax,dx
c001153f:	0f 00 d8             	ltr    ax
c0011542:	90                   	nop
c0011543:	c9                   	leave  
c0011544:	c3                   	ret    
c0011545:	90                   	nop

c0011546 <TSS::setup(unsigned long, unsigned long)>:
c0011546:	55                   	push   ebp
c0011547:	89 e5                	mov    ebp,esp
c0011549:	83 ec 18             	sub    esp,0x18
c001154c:	83 ec 0c             	sub    esp,0xc
c001154f:	6a 68                	push   0x68
c0011551:	e8 ea e2 ff ff       	call   c000f840 <malloc>
c0011556:	83 c4 10             	add    esp,0x10
c0011559:	89 c2                	mov    edx,eax
c001155b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011567:	83 ec 04             	sub    esp,0x4
c001156a:	6a 68                	push   0x68
c001156c:	6a 00                	push   0x0
c001156e:	50                   	push   eax
c001156f:	e8 04 f2 fe ff       	call   c0000778 <memset>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011595:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011598:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ad:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00115b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115dd:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115ec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011601:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001160e:	0f 20 da             	mov    edx,cr3
c0011611:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011614:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011617:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001161a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011620:	83 ec 08             	sub    esp,0x8
c0011623:	50                   	push   eax
c0011624:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011627:	50                   	push   eax
c0011628:	e8 f1 d9 ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001162d:	83 c4 10             	add    esp,0x10
c0011630:	83 ec 08             	sub    esp,0x8
c0011633:	6a 68                	push   0x68
c0011635:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011638:	50                   	push   eax
c0011639:	e8 fc d9 ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001163e:	83 c4 10             	add    esp,0x10
c0011641:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011645:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011648:	83 e0 0f             	and    eax,0xf
c001164b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001164e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011651:	83 c8 40             	or     eax,0x40
c0011654:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011657:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001165c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011662:	05 78 01 00 00       	add    eax,0x178
c0011667:	83 ec 04             	sub    esp,0x4
c001166a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001166d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011670:	50                   	push   eax
c0011671:	e8 f8 d9 ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011676:	83 c4 10             	add    esp,0x10
c0011679:	89 c2                	mov    edx,eax
c001167b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167e:	89 10                	mov    DWORD PTR [eax],edx
c0011680:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0011685:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001168b:	05 78 01 00 00       	add    eax,0x178
c0011690:	83 ec 0c             	sub    esp,0xc
c0011693:	50                   	push   eax
c0011694:	e8 19 da ff ff       	call   c000f0b2 <GDT::flush()>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169f:	8b 00                	mov    eax,DWORD PTR [eax]
c00116a1:	83 ec 08             	sub    esp,0x8
c00116a4:	50                   	push   eax
c00116a5:	68 7c a4 02 c0       	push   0xc002a47c
c00116aa:	e8 63 18 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00116af:	83 c4 10             	add    esp,0x10
c00116b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00116b7:	c9                   	leave  
c00116b8:	c3                   	ret    
c00116b9:	90                   	nop

c00116ba <ReservedFilename::read(unsigned long long, void*, int*)>:
c00116ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116c5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ca:	75 08                	jne    c00116d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00116cc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116d2:	eb 38                	jmp    c001170c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116d9:	75 17                	jne    c00116f2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116ef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116f2:	89 c1                	mov    ecx,eax
c00116f4:	83 e1 fd             	and    ecx,0xfffffffd
c00116f7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116fd:	74 cd                	je     c00116cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116ff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011704:	83 e0 ef             	and    eax,0xffffffef
c0011707:	83 f8 08             	cmp    eax,0x8
c001170a:	76 c0                	jbe    c00116cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001170c:	31 c0                	xor    eax,eax
c001170e:	c3                   	ret    
c001170f:	90                   	nop

c0011710 <ReservedFilename::isAtty()>:
c0011710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011714:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011717:	31 c0                	xor    eax,eax
c0011719:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001171f:	74 09                	je     c001172a <ReservedFilename::isAtty()+0x1a>
c0011721:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011727:	0f 94 c0             	sete   al
c001172a:	c3                   	ret    
c001172b:	90                   	nop

c001172c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011730:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011737:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001173b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011740:	75 08                	jne    c001174a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011742:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011748:	eb 3d                	jmp    c0011787 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001174a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001174f:	75 17                	jne    c0011768 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011751:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011756:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011759:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001175f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011761:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011765:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011768:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001176d:	75 04                	jne    c0011773 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001176f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011771:	eb 14                	jmp    c0011787 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011773:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011778:	74 c8                	je     c0011742 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001177a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001177f:	83 e0 ef             	and    eax,0xffffffef
c0011782:	83 f8 08             	cmp    eax,0x8
c0011785:	76 bb                	jbe    c0011742 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011787:	31 c0                	xor    eax,eax
c0011789:	c3                   	ret    

c001178a <UnixFile::getFileDescriptor()>:
c001178a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011791:	c3                   	ret    

c0011792 <UnixFile::UnixFile(int)>:
c0011792:	53                   	push   ebx
c0011793:	83 ec 28             	sub    esp,0x28
c0011796:	ba 68 a5 02 c0       	mov    edx,0xc002a568
c001179b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001179f:	89 10                	mov    DWORD PTR [eax],edx
c00117a1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00117a9:	0f 8f 8c 01 00 00    	jg     c001193b <UnixFile::UnixFile(int)+0x1a9>
c00117af:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c00117b4:	8d 50 01             	lea    edx,[eax+0x1]
c00117b7:	89 15 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,edx
c00117bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117c4:	83 ec 08             	sub    esp,0x8
c00117c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00117cb:	68 f8 e6 02 c0       	push   0xc002e6f8
c00117d0:	e8 5b 6f 01 00       	call   c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	a0 f4 e6 02 c0       	mov    al,ds:0xc002e6f4
c00117dd:	83 f0 01             	xor    eax,0x1
c00117e0:	84 c0                	test   al,al
c00117e2:	0f 84 54 01 00 00    	je     c001193c <UnixFile::UnixFile(int)+0x1aa>
c00117e8:	c6 05 f4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6f4,0x1
c00117ef:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117f7:	83 ec 0c             	sub    esp,0xc
c00117fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117fe:	e8 3d e0 ff ff       	call   c000f840 <malloc>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	89 c3                	mov    ebx,eax
c0011808:	83 ec 08             	sub    esp,0x8
c001180b:	68 03 ff ff 0f       	push   0xfffff03
c0011810:	53                   	push   ebx
c0011811:	e8 2c 01 00 00       	call   c0011942 <ReservedFilename::ReservedFilename(int)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	89 1d ec e6 02 c0    	mov    DWORD PTR ds:0xc002e6ec,ebx
c001181f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001182e:	e8 0d e0 ff ff       	call   c000f840 <malloc>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	89 c3                	mov    ebx,eax
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	68 01 ff ff 0f       	push   0xfffff01
c0011840:	53                   	push   ebx
c0011841:	e8 fc 00 00 00       	call   c0011942 <ReservedFilename::ReservedFilename(int)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	89 1d f0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6f0,ebx
c001184f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001185e:	e8 dd df ff ff       	call   c000f840 <malloc>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	89 c3                	mov    ebx,eax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 00 ff ff 0f       	push   0xfffff00
c0011870:	53                   	push   ebx
c0011871:	e8 cc 00 00 00       	call   c0011942 <ReservedFilename::ReservedFilename(int)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 1d e4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e4,ebx
c001187f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011887:	83 ec 0c             	sub    esp,0xc
c001188a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001188e:	e8 ad df ff ff       	call   c000f840 <malloc>
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	89 c3                	mov    ebx,eax
c0011898:	83 ec 08             	sub    esp,0x8
c001189b:	68 02 ff ff 0f       	push   0xfffff02
c00118a0:	53                   	push   ebx
c00118a1:	e8 9c 00 00 00       	call   c0011942 <ReservedFilename::ReservedFilename(int)>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	89 1d e8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e8,ebx
c00118af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118b7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00118bc:	7f 7e                	jg     c001193c <UnixFile::UnixFile(int)+0x1aa>
c00118be:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00118c6:	83 ec 0c             	sub    esp,0xc
c00118c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118cd:	e8 6e df ff ff       	call   c000f840 <malloc>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	89 c3                	mov    ebx,eax
c00118d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118db:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118e0:	83 ec 08             	sub    esp,0x8
c00118e3:	50                   	push   eax
c00118e4:	53                   	push   ebx
c00118e5:	e8 58 00 00 00       	call   c0011942 <ReservedFilename::ReservedFilename(int)>
c00118ea:	83 c4 10             	add    esp,0x10
c00118ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f1:	89 1c 85 c0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1940],ebx
c00118f8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011900:	83 ec 0c             	sub    esp,0xc
c0011903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011907:	e8 34 df ff ff       	call   c000f840 <malloc>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	89 c3                	mov    ebx,eax
c0011911:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011915:	05 20 ff ff 0f       	add    eax,0xfffff20
c001191a:	83 ec 08             	sub    esp,0x8
c001191d:	50                   	push   eax
c001191e:	53                   	push   ebx
c001191f:	e8 1e 00 00 00       	call   c0011942 <ReservedFilename::ReservedFilename(int)>
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001192b:	89 1c 85 80 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1980],ebx
c0011932:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011936:	e9 7c ff ff ff       	jmp    c00118b7 <UnixFile::UnixFile(int)+0x125>
c001193b:	90                   	nop
c001193c:	83 c4 28             	add    esp,0x28
c001193f:	5b                   	pop    ebx
c0011940:	c3                   	ret    
c0011941:	90                   	nop

c0011942 <ReservedFilename::ReservedFilename(int)>:
c0011942:	83 ec 0c             	sub    esp,0xc
c0011945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011950:	50                   	push   eax
c0011951:	e8 3c fe ff ff       	call   c0011792 <UnixFile::UnixFile(int)>
c0011956:	83 c4 10             	add    esp,0x10
c0011959:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c001195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011962:	89 10                	mov    DWORD PTR [eax],edx
c0011964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011968:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001196c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001196f:	90                   	nop
c0011970:	83 c4 0c             	add    esp,0xc
c0011973:	c3                   	ret    

c0011974 <UnixFile::~UnixFile()>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	ba 68 a5 02 c0       	mov    edx,0xc002a568
c001197c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011980:	89 10                	mov    DWORD PTR [eax],edx
c0011982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011989:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001198e:	7f 73                	jg     c0011a03 <UnixFile::~UnixFile()+0x8f>
c0011990:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	68 f8 e6 02 c0       	push   0xc002e6f8
c00119a0:	e8 5f 6e 01 00       	call   c0028804 <LinkedList<UnixFile>::getFirstElement()>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	68 f8 e6 02 c0       	push   0xc002e6f8
c00119b4:	e8 53 6e 01 00       	call   c002880c <LinkedList<UnixFile>::removeFirst()>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00119c4:	74 40                	je     c0011a06 <UnixFile::~UnixFile()+0x92>
c00119c6:	83 ec 08             	sub    esp,0x8
c00119c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119cd:	68 f8 e6 02 c0       	push   0xc002e6f8
c00119d2:	e8 59 6d 01 00       	call   c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119d7:	83 c4 10             	add    esp,0x10
c00119da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119de:	8d 50 01             	lea    edx,[eax+0x1]
c00119e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119e5:	3d 88 13 00 00       	cmp    eax,0x1388
c00119ea:	0f 94 c0             	sete   al
c00119ed:	84 c0                	test   al,al
c00119ef:	74 a7                	je     c0011998 <UnixFile::~UnixFile()+0x24>
c00119f1:	83 ec 0c             	sub    esp,0xc
c00119f4:	68 40 a5 02 c0       	push   0xc002a540
c00119f9:	e8 b5 8b 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00119fe:	83 c4 10             	add    esp,0x10
c0011a01:	eb 95                	jmp    c0011998 <UnixFile::~UnixFile()+0x24>
c0011a03:	90                   	nop
c0011a04:	eb 01                	jmp    c0011a07 <UnixFile::~UnixFile()+0x93>
c0011a06:	90                   	nop
c0011a07:	90                   	nop
c0011a08:	83 c4 1c             	add    esp,0x1c
c0011a0b:	c3                   	ret    

c0011a0c <UnixFile::~UnixFile()>:
c0011a0c:	83 ec 0c             	sub    esp,0xc
c0011a0f:	83 ec 0c             	sub    esp,0xc
c0011a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a16:	e8 59 ff ff ff       	call   c0011974 <UnixFile::~UnixFile()>
c0011a1b:	83 c4 10             	add    esp,0x10
c0011a1e:	83 ec 08             	sub    esp,0x8
c0011a21:	6a 0c                	push   0xc
c0011a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a27:	e8 06 14 00 00       	call   c0012e32 <operator delete(void*, unsigned long)>
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	83 c4 0c             	add    esp,0xc
c0011a32:	c3                   	ret    
c0011a33:	90                   	nop

c0011a34 <ReservedFilename::~ReservedFilename()>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c0011a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a40:	89 10                	mov    DWORD PTR [eax],edx
c0011a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a46:	83 ec 0c             	sub    esp,0xc
c0011a49:	50                   	push   eax
c0011a4a:	e8 25 ff ff ff       	call   c0011974 <UnixFile::~UnixFile()>
c0011a4f:	83 c4 10             	add    esp,0x10
c0011a52:	90                   	nop
c0011a53:	83 c4 0c             	add    esp,0xc
c0011a56:	c3                   	ret    
c0011a57:	90                   	nop

c0011a58 <ReservedFilename::~ReservedFilename()>:
c0011a58:	83 ec 0c             	sub    esp,0xc
c0011a5b:	83 ec 0c             	sub    esp,0xc
c0011a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a62:	e8 cd ff ff ff       	call   c0011a34 <ReservedFilename::~ReservedFilename()>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	83 ec 08             	sub    esp,0x8
c0011a6d:	6a 0c                	push   0xc
c0011a6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a73:	e8 ba 13 00 00       	call   c0012e32 <operator delete(void*, unsigned long)>
c0011a78:	83 c4 10             	add    esp,0x10
c0011a7b:	83 c4 0c             	add    esp,0xc
c0011a7e:	c3                   	ret    

c0011a7f <getFromFileDescriptor(int)>:
c0011a7f:	53                   	push   ebx
c0011a80:	83 ec 08             	sub    esp,0x8
c0011a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a87:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a8d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a93:	7f 2c                	jg     c0011ac1 <getFromFileDescriptor(int)+0x42>
c0011a95:	83 ec 0c             	sub    esp,0xc
c0011a98:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011a9d:	e8 62 6d 01 00       	call   c0028804 <LinkedList<UnixFile>::getFirstElement()>
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	85 c0                	test   eax,eax
c0011aa7:	75 04                	jne    c0011aad <getFromFileDescriptor(int)+0x2e>
c0011aa9:	31 c0                	xor    eax,eax
c0011aab:	eb 6e                	jmp    c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011aad:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011ab0:	74 69                	je     c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011ab2:	52                   	push   edx
c0011ab3:	52                   	push   edx
c0011ab4:	50                   	push   eax
c0011ab5:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011aba:	e8 ef 6d 01 00       	call   c00288ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011abf:	eb e1                	jmp    c0011aa2 <getFromFileDescriptor(int)+0x23>
c0011ac1:	a1 ec e6 02 c0       	mov    eax,ds:0xc002e6ec
c0011ac6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011acc:	74 4d                	je     c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011ace:	a1 f0 e6 02 c0       	mov    eax,ds:0xc002e6f0
c0011ad3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011ad9:	74 40                	je     c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011adb:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0011ae0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ae6:	74 33                	je     c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011ae8:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0011aed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011af3:	74 26                	je     c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011af5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011afb:	83 f8 08             	cmp    eax,0x8
c0011afe:	77 09                	ja     c0011b09 <getFromFileDescriptor(int)+0x8a>
c0011b00:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0011b07:	eb 12                	jmp    c0011b1b <getFromFileDescriptor(int)+0x9c>
c0011b09:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011b0f:	83 fb 08             	cmp    ebx,0x8
c0011b12:	77 95                	ja     c0011aa9 <getFromFileDescriptor(int)+0x2a>
c0011b14:	8b 04 9d 80 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1980]
c0011b1b:	83 c4 08             	add    esp,0x8
c0011b1e:	5b                   	pop    ebx
c0011b1f:	c3                   	ret    

c0011b20 <__static_initialization_and_destruction_0(int, int)>:
c0011b20:	83 ec 0c             	sub    esp,0xc
c0011b23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b28:	75 34                	jne    c0011b5e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b2a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b32:	75 2a                	jne    c0011b5e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011b3c:	e8 97 6b 01 00       	call   c00286d8 <LinkedList<UnixFile>::LinkedList()>
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	83 ec 04             	sub    esp,0x4
c0011b47:	68 9c d4 02 c0       	push   0xc002d49c
c0011b4c:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011b51:	68 d6 86 02 c0       	push   0xc00286d6
c0011b56:	e8 51 12 00 00       	call   c0012dac <__cxa_atexit>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	90                   	nop
c0011b5f:	83 c4 0c             	add    esp,0xc
c0011b62:	c3                   	ret    

c0011b63 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b63:	83 ec 0c             	sub    esp,0xc
c0011b66:	83 ec 08             	sub    esp,0x8
c0011b69:	68 ff ff 00 00       	push   0xffff
c0011b6e:	6a 01                	push   0x1
c0011b70:	e8 ab ff ff ff       	call   c0011b20 <__static_initialization_and_destruction_0(int, int)>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	83 c4 0c             	add    esp,0xc
c0011b7b:	c3                   	ret    

c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b7c:	53                   	push   ebx
c0011b7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b85:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b8b:	89 c8                	mov    eax,ecx
c0011b8d:	d1 e8                	shr    eax,1
c0011b8f:	03 05 28 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d528
c0011b95:	83 e1 01             	and    ecx,0x1
c0011b98:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b9a:	75 09                	jne    c0011ba5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b9c:	83 e2 f0             	and    edx,0xfffffff0
c0011b9f:	09 da                	or     edx,ebx
c0011ba1:	88 10                	mov    BYTE PTR [eax],dl
c0011ba3:	5b                   	pop    ebx
c0011ba4:	c3                   	ret    
c0011ba5:	c1 e3 04             	shl    ebx,0x4
c0011ba8:	83 e2 0f             	and    edx,0xf
c0011bab:	09 da                	or     edx,ebx
c0011bad:	88 10                	mov    BYTE PTR [eax],dl
c0011baf:	5b                   	pop    ebx
c0011bb0:	c3                   	ret    

c0011bb1 <Virt::getPageState(unsigned long)>:
c0011bb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb5:	8b 0d 28 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d528
c0011bbb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011bc1:	89 d0                	mov    eax,edx
c0011bc3:	d1 e8                	shr    eax,1
c0011bc5:	83 e2 01             	and    edx,0x1
c0011bc8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011bcb:	75 04                	jne    c0011bd1 <Virt::getPageState(unsigned long)+0x20>
c0011bcd:	83 e0 0f             	and    eax,0xf
c0011bd0:	c3                   	ret    
c0011bd1:	c0 e8 04             	shr    al,0x4
c0011bd4:	c3                   	ret    

c0011bd5 <Virt::allocateKernelVirtualPages(int)>:
c0011bd5:	55                   	push   ebp
c0011bd6:	31 ed                	xor    ebp,ebp
c0011bd8:	57                   	push   edi
c0011bd9:	56                   	push   esi
c0011bda:	53                   	push   ebx
c0011bdb:	31 db                	xor    ebx,ebx
c0011bdd:	83 ec 1c             	sub    esp,0x1c
c0011be0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011be4:	8b 3d 24 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d524
c0011bea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bef:	57                   	push   edi
c0011bf0:	e8 bc ff ff ff       	call   c0011bb1 <Virt::getPageState(unsigned long)>
c0011bf5:	5a                   	pop    edx
c0011bf6:	84 c0                	test   al,al
c0011bf8:	75 3a                	jne    c0011c34 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bfa:	85 db                	test   ebx,ebx
c0011bfc:	75 02                	jne    c0011c00 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bfe:	89 fd                	mov    ebp,edi
c0011c00:	43                   	inc    ebx
c0011c01:	39 f3                	cmp    ebx,esi
c0011c03:	74 5a                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011c05:	47                   	inc    edi
c0011c06:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c0c:	76 31                	jbe    c0011c3f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011c0e:	c7 05 24 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d524,0xc8000
c0011c18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c1d:	75 28                	jne    c0011c47 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c1f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c24:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c29:	57                   	push   edi
c0011c2a:	e8 82 ff ff ff       	call   c0011bb1 <Virt::getPageState(unsigned long)>
c0011c2f:	5a                   	pop    edx
c0011c30:	84 c0                	test   al,al
c0011c32:	74 c6                	je     c0011bfa <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c34:	31 db                	xor    ebx,ebx
c0011c36:	47                   	inc    edi
c0011c37:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c3d:	77 cf                	ja     c0011c0e <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c3f:	89 3d 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,edi
c0011c45:	eb a8                	jmp    c0011bef <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c47:	83 ec 0c             	sub    esp,0xc
c0011c4a:	68 98 a5 02 c0       	push   0xc002a598
c0011c4f:	e8 5f 89 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0011c54:	8b 3d 24 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d524
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	eb 90                	jmp    c0011bef <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c5f:	89 2d 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,ebp
c0011c65:	4b                   	dec    ebx
c0011c66:	74 5f                	je     c0011cc7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c68:	85 f6                	test   esi,esi
c0011c6a:	74 3d                	je     c0011ca9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c6c:	89 e8                	mov    eax,ebp
c0011c6e:	31 db                	xor    ebx,ebx
c0011c70:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c73:	eb 14                	jmp    c0011c89 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c75:	6a 01                	push   0x1
c0011c77:	43                   	inc    ebx
c0011c78:	50                   	push   eax
c0011c79:	e8 fe fe ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c7e:	58                   	pop    eax
c0011c7f:	39 f3                	cmp    ebx,esi
c0011c81:	5a                   	pop    edx
c0011c82:	74 25                	je     c0011ca9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c84:	a1 24 d5 02 c0       	mov    eax,ds:0xc002d524
c0011c89:	8d 50 01             	lea    edx,[eax+0x1]
c0011c8c:	85 db                	test   ebx,ebx
c0011c8e:	89 15 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,edx
c0011c94:	74 20                	je     c0011cb6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c96:	39 df                	cmp    edi,ebx
c0011c98:	75 db                	jne    c0011c75 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c9a:	6a 03                	push   0x3
c0011c9c:	43                   	inc    ebx
c0011c9d:	50                   	push   eax
c0011c9e:	e8 d9 fe ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca3:	59                   	pop    ecx
c0011ca4:	39 f3                	cmp    ebx,esi
c0011ca6:	58                   	pop    eax
c0011ca7:	75 db                	jne    c0011c84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ca9:	83 c4 1c             	add    esp,0x1c
c0011cac:	89 e8                	mov    eax,ebp
c0011cae:	5b                   	pop    ebx
c0011caf:	c1 e0 0c             	shl    eax,0xc
c0011cb2:	5e                   	pop    esi
c0011cb3:	5f                   	pop    edi
c0011cb4:	5d                   	pop    ebp
c0011cb5:	c3                   	ret    
c0011cb6:	6a 02                	push   0x2
c0011cb8:	bb 01 00 00 00       	mov    ebx,0x1
c0011cbd:	50                   	push   eax
c0011cbe:	e8 b9 fe ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cc3:	58                   	pop    eax
c0011cc4:	5a                   	pop    edx
c0011cc5:	eb bd                	jmp    c0011c84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cc7:	6a 04                	push   0x4
c0011cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0011ccc:	55                   	push   ebp
c0011ccd:	a3 24 d5 02 c0       	mov    ds:0xc002d524,eax
c0011cd2:	e8 a5 fe ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cd7:	59                   	pop    ecx
c0011cd8:	89 e8                	mov    eax,ebp
c0011cda:	5b                   	pop    ebx
c0011cdb:	c1 e0 0c             	shl    eax,0xc
c0011cde:	83 c4 1c             	add    esp,0x1c
c0011ce1:	5b                   	pop    ebx
c0011ce2:	5e                   	pop    esi
c0011ce3:	5f                   	pop    edi
c0011ce4:	5d                   	pop    ebp
c0011ce5:	c3                   	ret    

c0011ce6 <Virt::freeSwapfilePage(unsigned long)>:
c0011ce6:	53                   	push   ebx
c0011ce7:	8b 15 04 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e704
c0011ced:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cf1:	b8 01 00 00 00       	mov    eax,0x1
c0011cf6:	89 cb                	mov    ebx,ecx
c0011cf8:	d3 e0                	shl    eax,cl
c0011cfa:	c1 eb 05             	shr    ebx,0x5
c0011cfd:	f7 d0                	not    eax
c0011cff:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011d02:	5b                   	pop    ebx
c0011d03:	c3                   	ret    

c0011d04 <Virt::swapIDToSector(unsigned long)>:
c0011d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d08:	0f af 05 2c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d52c
c0011d0f:	03 05 34 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d534
c0011d15:	c3                   	ret    

c0011d16 <Virt::allocateSwapfilePage()>:
c0011d16:	8b 0d 2c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d52c
c0011d1c:	31 d2                	xor    edx,edx
c0011d1e:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011d23:	f7 f1                	div    ecx
c0011d25:	39 0d 30 d5 02 c0    	cmp    DWORD PTR ds:0xc002d530,ecx
c0011d2b:	72 1b                	jb     c0011d48 <Virt::allocateSwapfilePage()+0x32>
c0011d2d:	88 c1                	mov    cl,al
c0011d2f:	ba 01 00 00 00       	mov    edx,0x1
c0011d34:	c1 e8 05             	shr    eax,0x5
c0011d37:	d3 e2                	shl    edx,cl
c0011d39:	8b 0d 04 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e704
c0011d3f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0011d42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d44:	85 ca                	test   edx,ecx
c0011d46:	74 13                	je     c0011d5b <Virt::allocateSwapfilePage()+0x45>
c0011d48:	83 ec 18             	sub    esp,0x18
c0011d4b:	68 0a a8 02 c0       	push   0xc002a80a
c0011d50:	e8 5e 88 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0011d55:	31 c0                	xor    eax,eax
c0011d57:	83 c4 1c             	add    esp,0x1c
c0011d5a:	c3                   	ret    
c0011d5b:	09 ca                	or     edx,ecx
c0011d5d:	89 10                	mov    DWORD PTR [eax],edx
c0011d5f:	31 c0                	xor    eax,eax
c0011d61:	c3                   	ret    

c0011d62 <Virt::virtualMemorySetup()>:
c0011d62:	53                   	push   ebx
c0011d63:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d68:	83 ec 08             	sub    esp,0x8
c0011d6b:	6a 0f                	push   0xf
c0011d6d:	53                   	push   ebx
c0011d6e:	43                   	inc    ebx
c0011d6f:	e8 08 fe ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d74:	59                   	pop    ecx
c0011d75:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d7b:	58                   	pop    eax
c0011d7c:	75 ed                	jne    c0011d6b <Virt::virtualMemorySetup()+0x9>
c0011d7e:	83 ec 08             	sub    esp,0x8
c0011d81:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d86:	68 00 00 00 c8       	push   0xc8000000
c0011d8b:	68 21 a8 02 c0       	push   0xc002a821
c0011d90:	e8 7d 11 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0011d95:	58                   	pop    eax
c0011d96:	5a                   	pop    edx
c0011d97:	68 00 f0 ff ef       	push   0xeffff000
c0011d9c:	68 35 a8 02 c0       	push   0xc002a835
c0011da1:	e8 6c 11 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	83 ec 08             	sub    esp,0x8
c0011dac:	6a 00                	push   0x0
c0011dae:	53                   	push   ebx
c0011daf:	43                   	inc    ebx
c0011db0:	e8 c7 fd ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dbe:	75 e9                	jne    c0011da9 <Virt::virtualMemorySetup()+0x47>
c0011dc0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc5:	83 ec 08             	sub    esp,0x8
c0011dc8:	6a 0f                	push   0xf
c0011dca:	53                   	push   ebx
c0011dcb:	43                   	inc    ebx
c0011dcc:	e8 ab fd ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dda:	75 e9                	jne    c0011dc5 <Virt::virtualMemorySetup()+0x63>
c0011ddc:	83 c4 08             	add    esp,0x8
c0011ddf:	5b                   	pop    ebx
c0011de0:	c3                   	ret    

c0011de1 <Virt::swappingSetup()>:
c0011de1:	83 ec 14             	sub    esp,0x14
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011deb:	f7 35 2c d5 02 c0    	div    DWORD PTR ds:0xc002d52c
c0011df1:	c1 e8 05             	shr    eax,0x5
c0011df4:	50                   	push   eax
c0011df5:	68 49 a8 02 c0       	push   0xc002a849
c0011dfa:	e8 13 11 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0011dff:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011e04:	31 d2                	xor    edx,edx
c0011e06:	f7 35 2c d5 02 c0    	div    DWORD PTR ds:0xc002d52c
c0011e0c:	c1 e8 05             	shr    eax,0x5
c0011e0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e12:	e8 29 da ff ff       	call   c000f840 <malloc>
c0011e17:	83 c4 0c             	add    esp,0xc
c0011e1a:	89 c1                	mov    ecx,eax
c0011e1c:	a3 04 e7 02 c0       	mov    ds:0xc002e704,eax
c0011e21:	31 d2                	xor    edx,edx
c0011e23:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011e28:	f7 35 2c d5 02 c0    	div    DWORD PTR ds:0xc002d52c
c0011e2e:	c1 e8 05             	shr    eax,0x5
c0011e31:	50                   	push   eax
c0011e32:	6a 00                	push   0x0
c0011e34:	51                   	push   ecx
c0011e35:	e8 3e e9 fe ff       	call   c0000778 <memset>
c0011e3a:	83 c4 1c             	add    esp,0x1c
c0011e3d:	c3                   	ret    

c0011e3e <Virt::getAKernelVAS()>:
c0011e3e:	a1 08 e7 02 c0       	mov    eax,ds:0xc002e708
c0011e43:	c3                   	ret    

c0011e44 <Virt::setupPageSwapping(int)>:
c0011e44:	57                   	push   edi
c0011e45:	56                   	push   esi
c0011e46:	53                   	push   ebx
c0011e47:	83 ec 1c             	sub    esp,0x1c
c0011e4a:	68 14 01 00 00       	push   0x114
c0011e4f:	e8 ec d9 ff ff       	call   c000f840 <malloc>
c0011e54:	83 c4 0c             	add    esp,0xc
c0011e57:	89 c6                	mov    esi,eax
c0011e59:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c0011e5f:	68 64 a8 02 c0       	push   0xc002a864
c0011e64:	50                   	push   eax
c0011e65:	e8 00 16 00 00       	call   c001346a <File::File(char const*, Process*)>
c0011e6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6d:	e8 d4 17 00 00       	call   c0013646 <File::unlink()>
c0011e72:	58                   	pop    eax
c0011e73:	5a                   	pop    edx
c0011e74:	6a 12                	push   0x12
c0011e76:	56                   	push   esi
c0011e77:	e8 52 16 00 00       	call   c00134ce <File::open(FileOpenMode)>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	85 c0                	test   eax,eax
c0011e81:	0f 85 ca 00 00 00    	jne    c0011f51 <Virt::setupPageSwapping(int)+0x10d>
c0011e87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e93:	c1 e3 08             	shl    ebx,0x8
c0011e96:	83 ec 0c             	sub    esp,0xc
c0011e99:	68 00 00 01 00       	push   0x10000
c0011e9e:	e8 9d d9 ff ff       	call   c000f840 <malloc>
c0011ea3:	83 c4 0c             	add    esp,0xc
c0011ea6:	89 c7                	mov    edi,eax
c0011ea8:	68 00 00 01 00       	push   0x10000
c0011ead:	6a 00                	push   0x0
c0011eaf:	50                   	push   eax
c0011eb0:	e8 c3 e8 fe ff       	call   c0000778 <memset>
c0011eb5:	83 c4 10             	add    esp,0x10
c0011eb8:	85 db                	test   ebx,ebx
c0011eba:	79 03                	jns    c0011ebf <Virt::setupPageSwapping(int)+0x7b>
c0011ebc:	83 c3 0f             	add    ebx,0xf
c0011ebf:	c1 fb 04             	sar    ebx,0x4
c0011ec2:	4b                   	dec    ebx
c0011ec3:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec6:	74 4b                	je     c0011f13 <Virt::setupPageSwapping(int)+0xcf>
c0011ec8:	83 ec 0c             	sub    esp,0xc
c0011ecb:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ecd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ed1:	52                   	push   edx
c0011ed2:	57                   	push   edi
c0011ed3:	6a 00                	push   0x0
c0011ed5:	68 00 00 01 00       	push   0x10000
c0011eda:	56                   	push   esi
c0011edb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ede:	83 c4 20             	add    esp,0x20
c0011ee1:	85 c0                	test   eax,eax
c0011ee3:	75 59                	jne    c0011f3e <Virt::setupPageSwapping(int)+0xfa>
c0011ee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee9:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eee:	74 d2                	je     c0011ec2 <Virt::setupPageSwapping(int)+0x7e>
c0011ef0:	83 ec 08             	sub    esp,0x8
c0011ef3:	4b                   	dec    ebx
c0011ef4:	50                   	push   eax
c0011ef5:	68 b7 a8 02 c0       	push   0xc002a8b7
c0011efa:	e8 13 10 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0011eff:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c0011f06:	e8 a8 86 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	83 fb ff             	cmp    ebx,0xffffffff
c0011f11:	75 b5                	jne    c0011ec8 <Virt::setupPageSwapping(int)+0x84>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	56                   	push   esi
c0011f17:	e8 10 16 00 00       	call   c001352c <File::close()>
c0011f1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1f:	e8 3c d9 ff ff       	call   c000f860 <rfree>
c0011f24:	83 c4 10             	add    esp,0x10
c0011f27:	85 f6                	test   esi,esi
c0011f29:	74 0c                	je     c0011f37 <Virt::setupPageSwapping(int)+0xf3>
c0011f2b:	83 ec 0c             	sub    esp,0xc
c0011f2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f30:	56                   	push   esi
c0011f31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	5b                   	pop    ebx
c0011f3b:	5e                   	pop    esi
c0011f3c:	5f                   	pop    edi
c0011f3d:	c3                   	ret    
c0011f3e:	83 ec 08             	sub    esp,0x8
c0011f41:	50                   	push   eax
c0011f42:	68 9f a8 02 c0       	push   0xc002a89f
c0011f47:	e8 c6 0f 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0011f4c:	83 c4 10             	add    esp,0x10
c0011f4f:	eb 94                	jmp    c0011ee5 <Virt::setupPageSwapping(int)+0xa1>
c0011f51:	83 ec 08             	sub    esp,0x8
c0011f54:	50                   	push   eax
c0011f55:	68 7b a8 02 c0       	push   0xc002a87b
c0011f5a:	e8 b3 0f 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0011f5f:	c7 04 24 84 a8 02 c0 	mov    DWORD PTR [esp],0xc002a884
c0011f66:	e8 48 86 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0011f6b:	83 c4 10             	add    esp,0x10
c0011f6e:	e9 14 ff ff ff       	jmp    c0011e87 <Virt::setupPageSwapping(int)+0x43>
c0011f73:	90                   	nop

c0011f74 <VAS::VAS()>:
c0011f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	a3 08 e7 02 c0       	mov    ds:0xc002e708,eax
c0011f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f94:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fa2:	90                   	nop
c0011fa3:	c3                   	ret    

c0011fa4 <VAS::VAS(VAS*)>:
c0011fa4:	83 ec 0c             	sub    esp,0xc
c0011fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011fba:	e8 f4 85 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	90                   	nop
c0011fc3:	83 c4 0c             	add    esp,0xc
c0011fc6:	c3                   	ret    
c0011fc7:	90                   	nop

c0011fc8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fcc:	89 c2                	mov    edx,eax
c0011fce:	c1 e8 0a             	shr    eax,0xa
c0011fd1:	c1 ea 16             	shr    edx,0x16
c0011fd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd9:	19 c9                	sbb    ecx,ecx
c0011fdb:	c1 e2 0c             	shl    edx,0xc
c0011fde:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe4:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ff0:	01 d0                	add    eax,edx
c0011ff2:	c3                   	ret    
c0011ff3:	90                   	nop

c0011ff4 <VAS::getPageTableEntry(unsigned long)>:
c0011ff4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff8:	89 ca                	mov    edx,ecx
c0011ffa:	c1 e9 0a             	shr    ecx,0xa
c0011ffd:	c1 ea 16             	shr    edx,0x16
c0012000:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012006:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001200c:	c1 e0 0c             	shl    eax,0xc
c001200f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012012:	c3                   	ret    

c0012013 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012013:	57                   	push   edi
c0012014:	56                   	push   esi
c0012015:	be 01 00 00 00       	mov    esi,0x1
c001201a:	53                   	push   ebx
c001201b:	83 ec 10             	sub    esp,0x10
c001201e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012022:	c1 eb 0c             	shr    ebx,0xc
c0012025:	eb 3f                	jmp    c0012066 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012027:	e8 12 fe ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001202c:	83 ec 08             	sub    esp,0x8
c001202f:	57                   	push   edi
c0012030:	50                   	push   eax
c0012031:	e8 be ff ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012036:	83 c4 10             	add    esp,0x10
c0012039:	8b 00                	mov    eax,DWORD PTR [eax]
c001203b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203f:	f6 c4 04             	test   ah,0x4
c0012042:	75 5f                	jne    c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012044:	80 fa 04             	cmp    dl,0x4
c0012047:	74 78                	je     c00120c1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012049:	80 fa 02             	cmp    dl,0x2
c001204c:	0f 84 88 00 00 00    	je     c00120da <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012052:	80 fa 03             	cmp    dl,0x3
c0012055:	0f 84 ad 00 00 00    	je     c0012108 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001205b:	fe ca                	dec    dl
c001205d:	0f 84 92 00 00 00    	je     c00120f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012063:	43                   	inc    ebx
c0012064:	31 f6                	xor    esi,esi
c0012066:	53                   	push   ebx
c0012067:	e8 45 fb ff ff       	call   c0011bb1 <Virt::getPageState(unsigned long)>
c001206c:	5f                   	pop    edi
c001206d:	89 df                	mov    edi,ebx
c001206f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012073:	c1 e7 0c             	shl    edi,0xc
c0012076:	84 c0                	test   al,al
c0012078:	75 ad                	jne    c0012027 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001207a:	83 ec 0c             	sub    esp,0xc
c001207d:	68 c6 a8 02 c0       	push   0xc002a8c6
c0012082:	e8 2c 85 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0012087:	e8 b2 fd ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001208c:	5a                   	pop    edx
c001208d:	59                   	pop    ecx
c001208e:	57                   	push   edi
c001208f:	50                   	push   eax
c0012090:	e8 5f ff ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	8b 00                	mov    eax,DWORD PTR [eax]
c001209a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209e:	f6 c4 04             	test   ah,0x4
c00120a1:	74 c0                	je     c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ac:	83 ec 0c             	sub    esp,0xc
c00120af:	50                   	push   eax
c00120b0:	e8 a3 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b5:	83 c4 10             	add    esp,0x10
c00120b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120bc:	80 fa 04             	cmp    dl,0x4
c00120bf:	75 88                	jne    c0012049 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120c1:	89 f0                	mov    eax,esi
c00120c3:	84 c0                	test   al,al
c00120c5:	75 47                	jne    c001210e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c7:	c7 44 24 20 dc a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5dc
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	5b                   	pop    ebx
c00120d3:	5e                   	pop    esi
c00120d4:	5f                   	pop    edi
c00120d5:	e9 d9 84 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>
c00120da:	89 f0                	mov    eax,esi
c00120dc:	84 c0                	test   al,al
c00120de:	75 15                	jne    c00120f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120e0:	83 ec 0c             	sub    esp,0xc
c00120e3:	68 e2 a8 02 c0       	push   0xc002a8e2
c00120e8:	e8 c6 84 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00120ed:	83 c4 10             	add    esp,0x10
c00120f0:	e9 6e ff ff ff       	jmp    c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f5:	83 ec 08             	sub    esp,0x8
c00120f8:	6a 00                	push   0x0
c00120fa:	53                   	push   ebx
c00120fb:	e8 7c fa ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012100:	83 c4 10             	add    esp,0x10
c0012103:	e9 5b ff ff ff       	jmp    c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012108:	89 f0                	mov    eax,esi
c001210a:	84 c0                	test   al,al
c001210c:	75 15                	jne    c0012123 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210e:	83 ec 08             	sub    esp,0x8
c0012111:	6a 00                	push   0x0
c0012113:	53                   	push   ebx
c0012114:	e8 63 fa ff ff       	call   c0011b7c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	83 c4 10             	add    esp,0x10
c001211f:	5b                   	pop    ebx
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	c3                   	ret    
c0012123:	c7 44 24 20 fe a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8fe
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	5b                   	pop    ebx
c001212f:	5e                   	pop    esi
c0012130:	5f                   	pop    edi
c0012131:	e9 7d 84 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>

c0012136 <VAS::freeAllocatedPages(unsigned long)>:
c0012136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012142:	74 09                	je     c001214d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012144:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012148:	e9 c6 fe ff ff       	jmp    c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001214d:	c7 44 24 04 00 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a600
c0012155:	e9 b8 0d 00 00       	jmp    c0012f12 <Dbg::kprintf(char const*, ...)>

c001215a <VAS::virtualToPhysical(unsigned long)>:
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012162:	e8 8d fe ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012167:	5a                   	pop    edx
c0012168:	8b 00                	mov    eax,DWORD PTR [eax]
c001216a:	59                   	pop    ecx
c001216b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012170:	c3                   	ret    
c0012171:	90                   	nop

c0012172 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012172:	55                   	push   ebp
c0012173:	57                   	push   edi
c0012174:	56                   	push   esi
c0012175:	53                   	push   ebx
c0012176:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001217a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012182:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012186:	85 db                	test   ebx,ebx
c0012188:	7e 22                	jle    c00121ac <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001218a:	c1 e3 0c             	shl    ebx,0xc
c001218d:	01 f3                	add    ebx,esi
c001218f:	56                   	push   esi
c0012190:	81 c6 00 10 00 00    	add    esi,0x1000
c0012196:	55                   	push   ebp
c0012197:	e8 58 fe ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c001219c:	5a                   	pop    edx
c001219d:	59                   	pop    ecx
c001219e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121a0:	21 f9                	and    ecx,edi
c00121a2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a6:	39 f3                	cmp    ebx,esi
c00121a8:	89 08                	mov    DWORD PTR [eax],ecx
c00121aa:	75 e3                	jne    c001218f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ac:	5b                   	pop    ebx
c00121ad:	5e                   	pop    esi
c00121ae:	5f                   	pop    edi
c00121af:	5d                   	pop    ebp
c00121b0:	c3                   	ret    
c00121b1:	90                   	nop

c00121b2 <VAS::setToWriteCombining(unsigned long, int)>:
c00121b2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00121b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c4:	75 01                	jne    c00121c7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c6:	c3                   	ret    
c00121c7:	68 80 00 00 00       	push   0x80
c00121cc:	6a ff                	push   0xffffffff
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121da:	e8 93 ff ff ff       	call   c0012172 <VAS::reflagRange(unsigned long, int, int, int)>
c00121df:	83 c4 14             	add    esp,0x14
c00121e2:	c3                   	ret    
c00121e3:	90                   	nop

c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ed:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f7:	19 c0                	sbb    eax,eax
c00121f9:	83 ca 03             	or     edx,0x3
c00121fc:	83 e0 fc             	and    eax,0xfffffffc
c00121ff:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012206:	0f 20 d8             	mov    eax,cr3
c0012209:	0f 22 d8             	mov    cr3,eax
c001220c:	c3                   	ret    
c001220d:	90                   	nop

c001220e <VAS::~VAS()>:
c001220e:	83 ec 2c             	sub    esp,0x2c
c0012211:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012219:	e8 ba bb 00 00       	call   c001ddd8 <lockScheduler()>
c001221e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012223:	8b 00                	mov    eax,DWORD PTR [eax]
c0012225:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012228:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222e:	83 ec 04             	sub    esp,0x4
c0012231:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012235:	6a 01                	push   0x1
c0012237:	50                   	push   eax
c0012238:	e8 a7 ff ff ff       	call   c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012248:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012250:	0f 8f d7 00 00 00    	jg     c001232d <VAS::~VAS()+0x11f>
c0012256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012261:	c1 e2 02             	shl    edx,0x2
c0012264:	01 d0                	add    eax,edx
c0012266:	8b 00                	mov    eax,DWORD PTR [eax]
c0012268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012270:	83 e0 01             	and    eax,0x1
c0012273:	0f 84 ab 00 00 00    	je     c0012324 <VAS::~VAS()+0x116>
c0012279:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012281:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012289:	7f 75                	jg     c0012300 <VAS::~VAS()+0xf2>
c001228b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228f:	c1 e0 0a             	shl    eax,0xa
c0012292:	89 c2                	mov    edx,eax
c0012294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012298:	01 d0                	add    eax,edx
c001229a:	c1 e0 0c             	shl    eax,0xc
c001229d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122ab:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122b1:	83 ec 04             	sub    esp,0x4
c00122b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b8:	6a 01                	push   0x1
c00122ba:	50                   	push   eax
c00122bb:	e8 08 fd ff ff       	call   c0011fc8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00122cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d5:	25 01 04 00 00       	and    eax,0x401
c00122da:	3d 01 04 00 00       	cmp    eax,0x401
c00122df:	75 19                	jne    c00122fa <VAS::~VAS()+0xec>
c00122e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	50                   	push   eax
c00122ee:	e8 65 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fe:	eb 81                	jmp    c0012281 <VAS::~VAS()+0x73>
c0012300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012304:	25 00 04 00 00       	and    eax,0x400
c0012309:	74 19                	je     c0012324 <VAS::~VAS()+0x116>
c001230b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012314:	83 ec 0c             	sub    esp,0xc
c0012317:	50                   	push   eax
c0012318:	e8 3b db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012324:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012328:	e9 1b ff ff ff       	jmp    c0012248 <VAS::~VAS()+0x3a>
c001232d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012331:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	50                   	push   eax
c0012338:	e8 d6 fc ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012347:	83 ec 0c             	sub    esp,0xc
c001234a:	50                   	push   eax
c001234b:	e8 08 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001235b:	c1 e0 02             	shl    eax,0x2
c001235e:	83 ec 08             	sub    esp,0x8
c0012361:	50                   	push   eax
c0012362:	68 24 a6 02 c0       	push   0xc002a624
c0012367:	e8 a6 0b 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	e8 66 ba 00 00       	call   c001ddda <unlockScheduler()>
c0012374:	90                   	nop
c0012375:	83 c4 2c             	add    esp,0x2c
c0012378:	c3                   	ret    
c0012379:	90                   	nop

c001237a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001237a:	55                   	push   ebp
c001237b:	57                   	push   edi
c001237c:	56                   	push   esi
c001237d:	53                   	push   ebx
c001237e:	83 ec 1c             	sub    esp,0x1c
c0012381:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012385:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012389:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238f:	77 08                	ja     c0012399 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012391:	0f 20 d8             	mov    eax,cr3
c0012394:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012397:	75 47                	jne    c00123e0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012399:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239d:	09 d8                	or     eax,ebx
c001239f:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a4:	75 57                	jne    c00123fd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a6:	89 de                	mov    esi,ebx
c00123a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ab:	c1 ee 16             	shr    esi,0x16
c00123ae:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b9:	74 54                	je     c001240f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bf:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c9:	c1 e6 0c             	shl    esi,0xc
c00123cc:	c1 eb 0a             	shr    ebx,0xa
c00123cf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d8:	83 c4 1c             	add    esp,0x1c
c00123db:	5b                   	pop    ebx
c00123dc:	5e                   	pop    esi
c00123dd:	5f                   	pop    edi
c00123de:	5d                   	pop    ebp
c00123df:	c3                   	ret    
c00123e0:	83 ec 0c             	sub    esp,0xc
c00123e3:	68 44 a6 02 c0       	push   0xc002a644
c00123e8:	e8 25 0b 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00123ed:	83 c4 10             	add    esp,0x10
c00123f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f4:	09 d8                	or     eax,ebx
c00123f6:	a9 ff 0f 00 00       	test   eax,0xfff
c00123fb:	74 a9                	je     c00123a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123fd:	83 ec 0c             	sub    esp,0xc
c0012400:	68 ac a6 02 c0       	push   0xc002a6ac
c0012405:	e8 a9 81 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c001240a:	83 c4 10             	add    esp,0x10
c001240d:	eb 97                	jmp    c00123a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012413:	e8 ca da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012418:	89 c5                	mov    ebp,eax
c001241a:	e8 1f fa ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012426:	6a 01                	push   0x1
c0012428:	e8 a8 f7 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c001242d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012434:	6a 01                	push   0x1
c0012436:	50                   	push   eax
c0012437:	55                   	push   ebp
c0012438:	81 cd 07 04 00 00    	or     ebp,0x407
c001243e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012442:	51                   	push   ecx
c0012443:	e8 26 02 00 00       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012448:	83 c4 1c             	add    esp,0x1c
c001244b:	68 00 10 00 00       	push   0x1000
c0012450:	6a 00                	push   0x0
c0012452:	50                   	push   eax
c0012453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012457:	e8 1c e3 fe ff       	call   c0000778 <memset>
c001245c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012460:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012463:	e8 ab fb ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c0012468:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001246c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012475:	e9 41 ff ff ff       	jmp    c00123bb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001247a <VAS::allocatePages(int, int)>:
c001247a:	55                   	push   ebp
c001247b:	57                   	push   edi
c001247c:	56                   	push   esi
c001247d:	53                   	push   ebx
c001247e:	83 ec 1c             	sub    esp,0x1c
c0012481:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012485:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001248a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012490:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012496:	83 e0 01             	and    eax,0x1
c0012499:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001249d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124a1:	0f 85 cc 00 00 00    	jne    c0012573 <VAS::allocatePages(int, int)+0xf9>
c00124a7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124ae:	85 c0                	test   eax,eax
c00124b0:	0f 84 a1 00 00 00    	je     c0012557 <VAS::allocatePages(int, int)+0xdd>
c00124b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124be:	c1 e6 0c             	shl    esi,0xc
c00124c1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c5:	85 c0                	test   eax,eax
c00124c7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124ca:	7e 33                	jle    c00124ff <VAS::allocatePages(int, int)+0x85>
c00124cc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d4:	81 cd 00 04 00 00    	or     ebp,0x400
c00124da:	e8 03 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124df:	55                   	push   ebp
c00124e0:	53                   	push   ebx
c00124e1:	50                   	push   eax
c00124e2:	57                   	push   edi
c00124e3:	e8 92 fe ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f0:	74 03                	je     c00124f5 <VAS::allocatePages(int, int)+0x7b>
c00124f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fb:	39 de                	cmp    esi,ebx
c00124fd:	75 db                	jne    c00124da <VAS::allocatePages(int, int)+0x60>
c00124ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012504:	75 12                	jne    c0012518 <VAS::allocatePages(int, int)+0x9e>
c0012506:	0f 20 d8             	mov    eax,cr3
c0012509:	0f 22 d8             	mov    cr3,eax
c001250c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012510:	83 c4 1c             	add    esp,0x1c
c0012513:	5b                   	pop    ebx
c0012514:	5e                   	pop    esi
c0012515:	5f                   	pop    edi
c0012516:	5d                   	pop    ebp
c0012517:	c3                   	ret    
c0012518:	c1 ee 0a             	shr    esi,0xa
c001251b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012525:	c1 eb 0a             	shr    ebx,0xa
c0012528:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012534:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001253a:	39 c3                	cmp    ebx,eax
c001253c:	77 ce                	ja     c001250c <VAS::allocatePages(int, int)+0x92>
c001253e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012541:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012547:	39 d8                	cmp    eax,ebx
c0012549:	73 f3                	jae    c001253e <VAS::allocatePages(int, int)+0xc4>
c001254b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254f:	83 c4 1c             	add    esp,0x1c
c0012552:	5b                   	pop    ebx
c0012553:	5e                   	pop    esi
c0012554:	5f                   	pop    edi
c0012555:	5d                   	pop    ebp
c0012556:	c3                   	ret    
c0012557:	83 ec 0c             	sub    esp,0xc
c001255a:	68 d0 a6 02 c0       	push   0xc002a6d0
c001255f:	e8 4f 80 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0012564:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	e9 43 ff ff ff       	jmp    c00124b6 <VAS::allocatePages(int, int)+0x3c>
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001257a:	e8 56 f6 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c001257f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001258b:	0f 87 9b 00 00 00    	ja     c001262c <VAS::allocatePages(int, int)+0x1b2>
c0012591:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012595:	85 d2                	test   edx,edx
c0012597:	7e 3c                	jle    c00125d5 <VAS::allocatePages(int, int)+0x15b>
c0012599:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001259d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a5:	c1 e5 0c             	shl    ebp,0xc
c00125a8:	81 ce 00 04 00 00    	or     esi,0x400
c00125ae:	01 dd                	add    ebp,ebx
c00125b0:	e8 2d d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b5:	56                   	push   esi
c00125b6:	53                   	push   ebx
c00125b7:	50                   	push   eax
c00125b8:	57                   	push   edi
c00125b9:	e8 bc fd ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c00125be:	83 c4 10             	add    esp,0x10
c00125c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c6:	74 03                	je     c00125cb <VAS::allocatePages(int, int)+0x151>
c00125c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d1:	39 dd                	cmp    ebp,ebx
c00125d3:	75 db                	jne    c00125b0 <VAS::allocatePages(int, int)+0x136>
c00125d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125da:	0f 84 26 ff ff ff    	je     c0012506 <VAS::allocatePages(int, int)+0x8c>
c00125e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e8:	89 d3                	mov    ebx,edx
c00125ea:	c1 e0 0c             	shl    eax,0xc
c00125ed:	c1 eb 0a             	shr    ebx,0xa
c00125f0:	01 d0                	add    eax,edx
c00125f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f8:	c1 e8 0a             	shr    eax,0xa
c00125fb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012601:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012606:	2d 00 00 40 00       	sub    eax,0x400000
c001260b:	39 c3                	cmp    ebx,eax
c001260d:	0f 87 f9 fe ff ff    	ja     c001250c <VAS::allocatePages(int, int)+0x92>
c0012613:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012616:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261c:	39 d8                	cmp    eax,ebx
c001261e:	73 f3                	jae    c0012613 <VAS::allocatePages(int, int)+0x199>
c0012620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012624:	83 c4 1c             	add    esp,0x1c
c0012627:	5b                   	pop    ebx
c0012628:	5e                   	pop    esi
c0012629:	5f                   	pop    edi
c001262a:	5d                   	pop    ebp
c001262b:	c3                   	ret    
c001262c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012631:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012637:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263e:	0f 84 4d ff ff ff    	je     c0012591 <VAS::allocatePages(int, int)+0x117>
c0012644:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001264c:	e9 40 ff ff ff       	jmp    c0012591 <VAS::allocatePages(int, int)+0x117>
c0012651:	90                   	nop

c0012652 <VAS::setCPUSpecific(unsigned long)>:
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	6a 05                	push   0x5
c0012657:	68 00 00 40 c2       	push   0xc2400000
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012664:	e8 11 fd ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012669:	83 c4 1c             	add    esp,0x1c
c001266c:	c3                   	ret    
c001266d:	90                   	nop

c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266e:	55                   	push   ebp
c001266f:	57                   	push   edi
c0012670:	56                   	push   esi
c0012671:	53                   	push   ebx
c0012672:	83 ec 1c             	sub    esp,0x1c
c0012675:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001267a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012684:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012688:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012692:	83 e0 01             	and    eax,0x1
c0012695:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012699:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269d:	85 c0                	test   eax,eax
c001269f:	7e 39                	jle    c00126da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a5:	89 f3                	mov    ebx,esi
c00126a7:	c1 e0 0c             	shl    eax,0xc
c00126aa:	01 f0                	add    eax,esi
c00126ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b0:	55                   	push   ebp
c00126b1:	53                   	push   ebx
c00126b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b6:	29 f0                	sub    eax,esi
c00126b8:	01 d8                	add    eax,ebx
c00126ba:	50                   	push   eax
c00126bb:	57                   	push   edi
c00126bc:	e8 b9 fc ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c1:	83 c4 10             	add    esp,0x10
c00126c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c9:	74 03                	je     c00126ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126cb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d8:	75 d6                	jne    c00126b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126df:	75 10                	jne    c00126f1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126e1:	0f 20 d8             	mov    eax,cr3
c00126e4:	0f 22 d8             	mov    cr3,eax
c00126e7:	83 c4 1c             	add    esp,0x1c
c00126ea:	89 f0                	mov    eax,esi
c00126ec:	5b                   	pop    ebx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	5d                   	pop    ebp
c00126f0:	c3                   	ret    
c00126f1:	89 f3                	mov    ebx,esi
c00126f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f7:	c1 eb 0a             	shr    ebx,0xa
c00126fa:	c1 e0 0c             	shl    eax,0xc
c00126fd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012703:	01 f0                	add    eax,esi
c0012705:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001270b:	c1 e8 0a             	shr    eax,0xa
c001270e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012713:	2d 00 00 40 00       	sub    eax,0x400000
c0012718:	39 c3                	cmp    ebx,eax
c001271a:	77 cb                	ja     c00126e7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001271c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012725:	39 d8                	cmp    eax,ebx
c0012727:	73 f3                	jae    c001271c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012729:	83 c4 1c             	add    esp,0x1c
c001272c:	89 f0                	mov    eax,esi
c001272e:	5b                   	pop    ebx
c001272f:	5e                   	pop    esi
c0012730:	5f                   	pop    edi
c0012731:	5d                   	pop    ebp
c0012732:	c3                   	ret    
c0012733:	90                   	nop

c0012734 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012734:	55                   	push   ebp
c0012735:	57                   	push   edi
c0012736:	56                   	push   esi
c0012737:	53                   	push   ebx
c0012738:	83 ec 1c             	sub    esp,0x1c
c001273b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012743:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012747:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012750:	75 4a                	jne    c001279c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012752:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012756:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012759:	c1 eb 16             	shr    ebx,0x16
c001275c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012763:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012767:	74 4d                	je     c00127b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012769:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001276d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012771:	c1 e8 0a             	shr    eax,0xa
c0012774:	80 fa 01             	cmp    dl,0x1
c0012777:	19 d2                	sbb    edx,edx
c0012779:	c1 e3 0c             	shl    ebx,0xc
c001277c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012780:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012786:	25 fc 0f 00 00       	and    eax,0xffc
c001278b:	01 d8                	add    eax,ebx
c001278d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012794:	83 c4 1c             	add    esp,0x1c
c0012797:	5b                   	pop    ebx
c0012798:	5e                   	pop    esi
c0012799:	5f                   	pop    edi
c001279a:	5d                   	pop    ebp
c001279b:	c3                   	ret    
c001279c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127a0:	83 ec 0c             	sub    esp,0xc
c00127a3:	68 fc a6 02 c0       	push   0xc002a6fc
c00127a8:	e8 06 7e 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b4:	eb 9c                	jmp    c0012752 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ba:	e8 23 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bf:	89 c5                	mov    ebp,eax
c00127c1:	e8 78 f6 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c00127c6:	83 ec 0c             	sub    esp,0xc
c00127c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cd:	6a 01                	push   0x1
c00127cf:	e8 01 f4 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c00127d4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127db:	6a 01                	push   0x1
c00127dd:	50                   	push   eax
c00127de:	55                   	push   ebp
c00127df:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e9:	51                   	push   ecx
c00127ea:	e8 7f fe ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127ef:	83 c4 1c             	add    esp,0x1c
c00127f2:	68 00 10 00 00       	push   0x1000
c00127f7:	6a 00                	push   0x0
c00127f9:	50                   	push   eax
c00127fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fe:	e8 75 df fe ff       	call   c0000778 <memset>
c0012803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012807:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001280a:	e8 04 f8 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001280f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281c:	e9 48 ff ff ff       	jmp    c0012769 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012821:	90                   	nop

c0012822 <VAS::VAS(bool)>:
c0012822:	53                   	push   ebx
c0012823:	83 ec 28             	sub    esp,0x28
c0012826:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001282a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012832:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012841:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012844:	e8 99 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012849:	89 c2                	mov    edx,eax
c001284b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012852:	e8 e7 f5 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0012857:	89 c3                	mov    ebx,eax
c0012859:	83 ec 0c             	sub    esp,0xc
c001285c:	6a 01                	push   0x1
c001285e:	e8 72 f3 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	89 c2                	mov    edx,eax
c0012868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286f:	83 ec 0c             	sub    esp,0xc
c0012872:	6a 03                	push   0x3
c0012874:	6a 01                	push   0x1
c0012876:	52                   	push   edx
c0012877:	50                   	push   eax
c0012878:	53                   	push   ebx
c0012879:	e8 f0 fd ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287e:	83 c4 20             	add    esp,0x20
c0012881:	89 c2                	mov    edx,eax
c0012883:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012887:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001288a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012892:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001289a:	7f 1c                	jg     c00128b8 <VAS::VAS(bool)+0x96>
c001289c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a7:	c1 e2 02             	shl    edx,0x2
c00128aa:	01 d0                	add    eax,edx
c00128ac:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b6:	eb da                	jmp    c0012892 <VAS::VAS(bool)+0x70>
c00128b8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128c0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c8:	7f 7a                	jg     c0012944 <VAS::VAS(bool)+0x122>
c00128ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ce:	2d 00 02 00 00       	sub    eax,0x200
c00128d3:	c1 e0 0c             	shl    eax,0xc
c00128d6:	83 c8 03             	or     eax,0x3
c00128d9:	89 c2                	mov    edx,eax
c00128db:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00128e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ec:	83 e0 10             	and    eax,0x10
c00128ef:	84 c0                	test   al,al
c00128f1:	74 07                	je     c00128fa <VAS::VAS(bool)+0xd8>
c00128f3:	b8 00 01 00 00       	mov    eax,0x100
c00128f8:	eb 05                	jmp    c00128ff <VAS::VAS(bool)+0xdd>
c00128fa:	b8 00 00 00 00       	mov    eax,0x0
c00128ff:	09 d0                	or     eax,edx
c0012901:	89 c1                	mov    ecx,eax
c0012903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012907:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290e:	c1 e2 02             	shl    edx,0x2
c0012911:	01 d0                	add    eax,edx
c0012913:	89 ca                	mov    edx,ecx
c0012915:	89 10                	mov    DWORD PTR [eax],edx
c0012917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001291b:	2d 40 03 00 00       	sub    eax,0x340
c0012920:	83 f8 7f             	cmp    eax,0x7f
c0012923:	77 16                	ja     c001293b <VAS::VAS(bool)+0x119>
c0012925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012929:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012930:	c1 e2 02             	shl    edx,0x2
c0012933:	01 d0                	add    eax,edx
c0012935:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001293b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293f:	e9 7c ff ff ff       	jmp    c00128c0 <VAS::VAS(bool)+0x9e>
c0012944:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012949:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012955:	83 e0 10             	and    eax,0x10
c0012958:	84 c0                	test   al,al
c001295a:	74 07                	je     c0012963 <VAS::VAS(bool)+0x141>
c001295c:	b8 03 41 00 00       	mov    eax,0x4103
c0012961:	eb 05                	jmp    c0012968 <VAS::VAS(bool)+0x146>
c0012963:	b8 03 40 00 00       	mov    eax,0x4003
c0012968:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001296c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012975:	89 02                	mov    DWORD PTR [edx],eax
c0012977:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001297c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012982:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012988:	83 ec 08             	sub    esp,0x8
c001298b:	50                   	push   eax
c001298c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012990:	e8 bd fc ff ff       	call   c0012652 <VAS::setCPUSpecific(unsigned long)>
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299f:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00129a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129aa:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129b0:	83 e0 10             	and    eax,0x10
c00129b3:	84 c0                	test   al,al
c00129b5:	74 07                	je     c00129be <VAS::VAS(bool)+0x19c>
c00129b7:	b8 00 01 00 00       	mov    eax,0x100
c00129bc:	eb 05                	jmp    c00129c3 <VAS::VAS(bool)+0x1a1>
c00129be:	b8 00 00 00 00       	mov    eax,0x0
c00129c3:	09 c2                	or     edx,eax
c00129c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129cc:	05 fc 0f 00 00       	add    eax,0xffc
c00129d1:	83 ca 03             	or     edx,0x3
c00129d4:	89 10                	mov    DWORD PTR [eax],edx
c00129d6:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00129db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e1:	83 ec 0c             	sub    esp,0xc
c00129e4:	50                   	push   eax
c00129e5:	e8 3a 1c 00 00       	call   c0014624 <Device::getName()>
c00129ea:	83 c4 10             	add    esp,0x10
c00129ed:	83 ec 08             	sub    esp,0x8
c00129f0:	68 18 a9 02 c0       	push   0xc002a918
c00129f5:	50                   	push   eax
c00129f6:	e8 c5 de fe ff       	call   c00008c0 <strcmp>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	85 c0                	test   eax,eax
c0012a00:	0f 94 c0             	sete   al
c0012a03:	84 c0                	test   al,al
c0012a05:	74 70                	je     c0012a77 <VAS::VAS(bool)+0x255>
c0012a07:	e8 af b3 00 00       	call   c001ddbb <disableIRQs()>
c0012a0c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012a11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a17:	05 7c 09 00 00       	add    eax,0x97c
c0012a1c:	83 ec 0c             	sub    esp,0xc
c0012a1f:	50                   	push   eax
c0012a20:	e8 97 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2d:	89 c3                	mov    ebx,eax
c0012a2f:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012a34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a3a:	05 7c 09 00 00       	add    eax,0x97c
c0012a3f:	83 ec 0c             	sub    esp,0xc
c0012a42:	50                   	push   eax
c0012a43:	e8 74 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	83 ec 08             	sub    esp,0x8
c0012a4e:	50                   	push   eax
c0012a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a53:	e8 9c f5 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a62:	6a 11                	push   0x11
c0012a64:	53                   	push   ebx
c0012a65:	50                   	push   eax
c0012a66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a6a:	e8 0b f9 ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	e8 52 b3 00 00       	call   c001ddc9 <enableIRQs()>
c0012a77:	90                   	nop
c0012a78:	83 c4 28             	add    esp,0x28
c0012a7b:	5b                   	pop    ebx
c0012a7c:	c3                   	ret    
c0012a7d:	90                   	nop

c0012a7e <VAS::evict(unsigned long)>:
c0012a7e:	57                   	push   edi
c0012a7f:	56                   	push   esi
c0012a80:	53                   	push   ebx
c0012a81:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a89:	e8 4a b3 00 00       	call   c001ddd8 <lockScheduler()>
c0012a8e:	83 ec 08             	sub    esp,0x8
c0012a91:	56                   	push   esi
c0012a92:	68 20 a7 02 c0       	push   0xc002a720
c0012a97:	e8 76 04 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012a9c:	e8 75 f2 ff ff       	call   c0011d16 <Virt::allocateSwapfilePage()>
c0012aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0012aa4:	89 c3                	mov    ebx,eax
c0012aa6:	e8 59 f2 ff ff       	call   c0011d04 <Virt::swapIDToSector(unsigned long)>
c0012aab:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aae:	31 d2                	xor    edx,edx
c0012ab0:	6a 08                	push   0x8
c0012ab2:	52                   	push   edx
c0012ab3:	50                   	push   eax
c0012ab4:	0f be 05 38 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d538
c0012abb:	ff 34 85 9c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1564]
c0012ac2:	e8 c7 3c 00 00       	call   c001678e <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac7:	83 c4 14             	add    esp,0x14
c0012aca:	53                   	push   ebx
c0012acb:	c1 e3 0b             	shl    ebx,0xb
c0012ace:	e8 31 f2 ff ff       	call   c0011d04 <Virt::swapIDToSector(unsigned long)>
c0012ad3:	5a                   	pop    edx
c0012ad4:	59                   	pop    ecx
c0012ad5:	50                   	push   eax
c0012ad6:	68 26 a9 02 c0       	push   0xc002a926
c0012adb:	e8 32 04 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012ae0:	58                   	pop    eax
c0012ae1:	5a                   	pop    edx
c0012ae2:	56                   	push   esi
c0012ae3:	57                   	push   edi
c0012ae4:	e8 0b f5 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012ae9:	89 c6                	mov    esi,eax
c0012aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aed:	c1 e8 0c             	shr    eax,0xc
c0012af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012af3:	e8 60 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012af8:	8b 16                	mov    edx,DWORD PTR [esi]
c0012afa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012b00:	09 da                	or     edx,ebx
c0012b02:	89 16                	mov    DWORD PTR [esi],edx
c0012b04:	c7 04 24 44 a9 02 c0 	mov    DWORD PTR [esp],0xc002a944
c0012b0b:	e8 02 04 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012b10:	83 c4 10             	add    esp,0x10
c0012b13:	5b                   	pop    ebx
c0012b14:	5e                   	pop    esi
c0012b15:	5f                   	pop    edi
c0012b16:	e9 bf b2 00 00       	jmp    c001ddda <unlockScheduler()>
c0012b1b:	90                   	nop

c0012b1c <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b1c:	55                   	push   ebp
c0012b1d:	57                   	push   edi
c0012b1e:	56                   	push   esi
c0012b1f:	53                   	push   ebx
c0012b20:	83 ec 18             	sub    esp,0x18
c0012b23:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012b27:	68 40 a7 02 c0       	push   0xc002a740
c0012b2c:	e8 e1 03 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012b31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012b35:	5e                   	pop    esi
c0012b36:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b3c:	5d                   	pop    ebp
c0012b3d:	53                   	push   ebx
c0012b3e:	57                   	push   edi
c0012b3f:	e8 b0 f4 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012b44:	5a                   	pop    edx
c0012b45:	89 c6                	mov    esi,eax
c0012b47:	59                   	pop    ecx
c0012b48:	ff 30                	push   DWORD PTR [eax]
c0012b4a:	68 54 a9 02 c0       	push   0xc002a954
c0012b4f:	e8 be 03 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	f7 06 00 04 00 00    	test   DWORD PTR [esi],0x400
c0012b5d:	75 0a                	jne    c0012b69 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012b5f:	83 c4 0c             	add    esp,0xc
c0012b62:	31 c0                	xor    eax,eax
c0012b64:	5b                   	pop    ebx
c0012b65:	5e                   	pop    esi
c0012b66:	5f                   	pop    edi
c0012b67:	5d                   	pop    ebp
c0012b68:	c3                   	ret    
c0012b69:	83 ec 0c             	sub    esp,0xc
c0012b6c:	68 65 a9 02 c0       	push   0xc002a965
c0012b71:	e8 9c 03 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012b76:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012b78:	e8 65 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b7d:	c1 ed 0b             	shr    ebp,0xb
c0012b80:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b82:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b88:	81 ca 01 08 00 00    	or     edx,0x801
c0012b8e:	52                   	push   edx
c0012b8f:	53                   	push   ebx
c0012b90:	50                   	push   eax
c0012b91:	57                   	push   edi
c0012b92:	e8 e3 f7 ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b97:	83 c4 14             	add    esp,0x14
c0012b9a:	55                   	push   ebp
c0012b9b:	e8 64 f1 ff ff       	call   c0011d04 <Virt::swapIDToSector(unsigned long)>
c0012ba0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ba3:	31 d2                	xor    edx,edx
c0012ba5:	ff 35 2c d5 02 c0    	push   DWORD PTR ds:0xc002d52c
c0012bab:	52                   	push   edx
c0012bac:	50                   	push   eax
c0012bad:	0f be 05 38 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d538
c0012bb4:	ff 34 85 9c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1564]
c0012bbb:	e8 62 3b 00 00       	call   c0016722 <LogicalDisk::read(unsigned long long, int, void*)>
c0012bc0:	83 c4 14             	add    esp,0x14
c0012bc3:	55                   	push   ebp
c0012bc4:	e8 1d f1 ff ff       	call   c0011ce6 <Virt::freeSwapfilePage(unsigned long)>
c0012bc9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012bcc:	e8 33 f1 ff ff       	call   c0011d04 <Virt::swapIDToSector(unsigned long)>
c0012bd1:	5a                   	pop    edx
c0012bd2:	59                   	pop    ecx
c0012bd3:	50                   	push   eax
c0012bd4:	68 6c a7 02 c0       	push   0xc002a76c
c0012bd9:	e8 34 03 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	b0 01                	mov    al,0x1
c0012be3:	83 c4 0c             	add    esp,0xc
c0012be6:	5b                   	pop    ebx
c0012be7:	5e                   	pop    esi
c0012be8:	5f                   	pop    edi
c0012be9:	5d                   	pop    ebp
c0012bea:	c3                   	ret    
c0012beb:	90                   	nop

c0012bec <VAS::scanForEviction(int, int)>:
c0012bec:	55                   	push   ebp
c0012bed:	57                   	push   edi
c0012bee:	56                   	push   esi
c0012bef:	53                   	push   ebx
c0012bf0:	83 ec 1c             	sub    esp,0x1c
c0012bf3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012bf7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012bfb:	85 c9                	test   ecx,ecx
c0012bfd:	75 08                	jne    c0012c07 <VAS::scanForEviction(int, int)+0x1b>
c0012bff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c07:	83 ec 0c             	sub    esp,0xc
c0012c0a:	be 00 00 40 00       	mov    esi,0x400000
c0012c0f:	68 8c a7 02 c0       	push   0xc002a78c
c0012c14:	31 ff                	xor    edi,edi
c0012c16:	e8 f7 02 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012c1b:	83 c4 10             	add    esp,0x10
c0012c1e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c2e:	eb 1a                	jmp    c0012c4a <VAS::scanForEviction(int, int)+0x5e>
c0012c30:	83 44 24 08 04       	add    DWORD PTR [esp+0x8],0x4
c0012c35:	81 c6 00 00 40 00    	add    esi,0x400000
c0012c3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c3f:	3d 00 10 00 00       	cmp    eax,0x1000
c0012c44:	0f 84 88 00 00 00    	je     c0012cd2 <VAS::scanForEviction(int, int)+0xe6>
c0012c4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012c4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012c51:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012c55:	74 d9                	je     c0012c30 <VAS::scanForEviction(int, int)+0x44>
c0012c57:	8d ae 00 00 c0 ff    	lea    ebp,[esi-0x400000]
c0012c5d:	eb 0a                	jmp    c0012c69 <VAS::scanForEviction(int, int)+0x7d>
c0012c5f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012c65:	39 ee                	cmp    esi,ebp
c0012c67:	74 c7                	je     c0012c30 <VAS::scanForEviction(int, int)+0x44>
c0012c69:	83 ec 08             	sub    esp,0x8
c0012c6c:	55                   	push   ebp
c0012c6d:	53                   	push   ebx
c0012c6e:	e8 81 f3 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c78:	89 c2                	mov    edx,eax
c0012c7a:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c80:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c86:	75 d7                	jne    c0012c5f <VAS::scanForEviction(int, int)+0x73>
c0012c88:	a8 01                	test   al,0x1
c0012c8a:	74 4e                	je     c0012cda <VAS::scanForEviction(int, int)+0xee>
c0012c8c:	83 ec 08             	sub    esp,0x8
c0012c8f:	55                   	push   ebp
c0012c90:	68 b0 a7 02 c0       	push   0xc002a7b0
c0012c95:	e8 78 02 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012c9a:	89 f8                	mov    eax,edi
c0012c9c:	99                   	cdq    
c0012c9d:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	85 d2                	test   edx,edx
c0012ca6:	74 03                	je     c0012cab <VAS::scanForEviction(int, int)+0xbf>
c0012ca8:	47                   	inc    edi
c0012ca9:	eb b4                	jmp    c0012c5f <VAS::scanForEviction(int, int)+0x73>
c0012cab:	83 ec 0c             	sub    esp,0xc
c0012cae:	68 7d a9 02 c0       	push   0xc002a97d
c0012cb3:	e8 5a 02 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012cb8:	58                   	pop    eax
c0012cb9:	5a                   	pop    edx
c0012cba:	55                   	push   ebp
c0012cbb:	53                   	push   ebx
c0012cbc:	e8 bd fd ff ff       	call   c0012a7e <VAS::evict(unsigned long)>
c0012cc1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012cc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012cd0:	75 d6                	jne    c0012ca8 <VAS::scanForEviction(int, int)+0xbc>
c0012cd2:	83 c4 1c             	add    esp,0x1c
c0012cd5:	5b                   	pop    ebx
c0012cd6:	5e                   	pop    esi
c0012cd7:	5f                   	pop    edi
c0012cd8:	5d                   	pop    ebp
c0012cd9:	c3                   	ret    
c0012cda:	83 ec 08             	sub    esp,0x8
c0012cdd:	55                   	push   ebp
c0012cde:	68 dc a7 02 c0       	push   0xc002a7dc
c0012ce3:	e8 2a 02 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	e9 6f ff ff ff       	jmp    c0012c5f <VAS::scanForEviction(int, int)+0x73>

c0012cf0 <mapVASFirstTime>:
c0012cf0:	55                   	push   ebp
c0012cf1:	57                   	push   edi
c0012cf2:	56                   	push   esi
c0012cf3:	53                   	push   ebx
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cfc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cff:	4a                   	dec    edx
c0012d00:	0f 84 8e 00 00 00    	je     c0012d94 <mapVASFirstTime+0xa4>
c0012d06:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d09:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d0c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d11:	c1 e5 15             	shl    ebp,0x15
c0012d14:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d19:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d1f:	29 eb                	sub    ebx,ebp
c0012d21:	29 ee                	sub    esi,ebp
c0012d23:	e8 ba d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	68 03 04 00 00       	push   0x403
c0012d30:	6a 01                	push   0x1
c0012d32:	53                   	push   ebx
c0012d33:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d39:	50                   	push   eax
c0012d3a:	57                   	push   edi
c0012d3b:	e8 2e f9 ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d40:	83 c4 20             	add    esp,0x20
c0012d43:	39 f3                	cmp    ebx,esi
c0012d45:	75 dc                	jne    c0012d23 <mapVASFirstTime+0x33>
c0012d47:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d4c:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d51:	29 ee                	sub    esi,ebp
c0012d53:	29 e8                	sub    eax,ebp
c0012d55:	89 c5                	mov    ebp,eax
c0012d57:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d5b:	19 db                	sbb    ebx,ebx
c0012d5d:	e8 80 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d62:	83 e3 04             	and    ebx,0x4
c0012d65:	83 ec 0c             	sub    esp,0xc
c0012d68:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d6e:	53                   	push   ebx
c0012d6f:	6a 01                	push   0x1
c0012d71:	56                   	push   esi
c0012d72:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d78:	50                   	push   eax
c0012d79:	57                   	push   edi
c0012d7a:	e8 ef f8 ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d7f:	83 c4 20             	add    esp,0x20
c0012d82:	39 f5                	cmp    ebp,esi
c0012d84:	75 d1                	jne    c0012d57 <mapVASFirstTime+0x67>
c0012d86:	0f 20 d8             	mov    eax,cr3
c0012d89:	0f 22 d8             	mov    cr3,eax
c0012d8c:	83 c4 0c             	add    esp,0xc
c0012d8f:	5b                   	pop    ebx
c0012d90:	5e                   	pop    esi
c0012d91:	5f                   	pop    edi
c0012d92:	5d                   	pop    ebp
c0012d93:	c3                   	ret    
c0012d94:	83 ec 0c             	sub    esp,0xc
c0012d97:	68 89 a9 02 c0       	push   0xc002a989
c0012d9c:	e8 71 01 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012da1:	83 c4 10             	add    esp,0x10
c0012da4:	83 c4 0c             	add    esp,0xc
c0012da7:	5b                   	pop    ebx
c0012da8:	5e                   	pop    esi
c0012da9:	5f                   	pop    edi
c0012daa:	5d                   	pop    ebp
c0012dab:	c3                   	ret    

c0012dac <__cxa_atexit>:
c0012dac:	31 c0                	xor    eax,eax
c0012dae:	c3                   	ret    

c0012daf <__cxa_finalize>:
c0012daf:	c3                   	ret    

c0012db0 <__stack_chk_fail>:
c0012db0:	55                   	push   ebp
c0012db1:	89 e5                	mov    ebp,esp
c0012db3:	83 ec 14             	sub    esp,0x14
c0012db6:	68 a2 a9 02 c0       	push   0xc002a9a2
c0012dbb:	e8 52 01 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012dc0:	58                   	pop    eax
c0012dc1:	5a                   	pop    edx
c0012dc2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012dc5:	68 f2 a9 02 c0       	push   0xc002a9f2
c0012dca:	e8 43 01 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012dcf:	59                   	pop    ecx
c0012dd0:	58                   	pop    eax
c0012dd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dd4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dd7:	68 f2 a9 02 c0       	push   0xc002a9f2
c0012ddc:	e8 31 01 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012de1:	5a                   	pop    edx
c0012de2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012de5:	59                   	pop    ecx
c0012de6:	8b 00                	mov    eax,DWORD PTR [eax]
c0012de8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012deb:	68 f2 a9 02 c0       	push   0xc002a9f2
c0012df0:	e8 1d 01 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012df5:	5a                   	pop    edx
c0012df6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012df9:	59                   	pop    ecx
c0012dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dfe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e01:	68 f2 a9 02 c0       	push   0xc002a9f2
c0012e06:	e8 07 01 00 00       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0012e0b:	c7 04 24 fa a9 02 c0 	mov    DWORD PTR [esp],0xc002a9fa
c0012e12:	e8 9c 77 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0012e17:	83 c4 10             	add    esp,0x10
c0012e1a:	c9                   	leave  
c0012e1b:	c3                   	ret    

c0012e1c <__cxa_pure_virtual>:
c0012e1c:	83 ec 18             	sub    esp,0x18
c0012e1f:	68 12 aa 02 c0       	push   0xc002aa12
c0012e24:	e8 8a 77 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0012e29:	83 c4 1c             	add    esp,0x1c
c0012e2c:	c3                   	ret    

c0012e2d <operator new[](unsigned long)>:
c0012e2d:	e9 0e ca ff ff       	jmp    c000f840 <malloc>

c0012e32 <operator delete(void*, unsigned long)>:
c0012e32:	e9 29 ca ff ff       	jmp    c000f860 <rfree>

c0012e37 <operator delete[](void*)>:
c0012e37:	e9 24 ca ff ff       	jmp    c000f860 <rfree>

c0012e3c <operator delete[](void*, unsigned long)>:
c0012e3c:	e9 1f ca ff ff       	jmp    c000f860 <rfree>

c0012e41 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e41:	57                   	push   edi
c0012e42:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e47:	56                   	push   esi
c0012e48:	be 28 aa 02 c0       	mov    esi,0xc002aa28
c0012e4d:	53                   	push   ebx
c0012e4e:	83 ec 40             	sub    esp,0x40
c0012e51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e55:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e59:	fc                   	cld    
c0012e5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e5c:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e60:	83 f9 3e             	cmp    ecx,0x3e
c0012e63:	7e 05                	jle    c0012e6a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e65:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e6a:	89 df                	mov    edi,ebx
c0012e6c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e70:	eb 02                	jmp    c0012e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e72:	89 c7                	mov    edi,eax
c0012e74:	31 d2                	xor    edx,edx
c0012e76:	46                   	inc    esi
c0012e77:	89 f8                	mov    eax,edi
c0012e79:	f7 f1                	div    ecx
c0012e7b:	39 cf                	cmp    edi,ecx
c0012e7d:	73 f3                	jae    c0012e72 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e7f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e82:	eb 02                	jmp    c0012e86 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e84:	89 c3                	mov    ebx,eax
c0012e86:	31 d2                	xor    edx,edx
c0012e88:	4e                   	dec    esi
c0012e89:	89 d8                	mov    eax,ebx
c0012e8b:	f7 f1                	div    ecx
c0012e8d:	39 cb                	cmp    ebx,ecx
c0012e8f:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e93:	88 16                	mov    BYTE PTR [esi],dl
c0012e95:	73 ed                	jae    c0012e84 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e97:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e9b:	83 c4 40             	add    esp,0x40
c0012e9e:	5b                   	pop    ebx
c0012e9f:	5e                   	pop    esi
c0012ea0:	5f                   	pop    edi
c0012ea1:	c3                   	ret    

c0012ea2 <Dbg::logc(char)>:
c0012ea2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ea6:	ba fd 03 00 00       	mov    edx,0x3fd
c0012eab:	ec                   	in     al,dx
c0012eac:	a8 20                	test   al,0x20
c0012eae:	74 fb                	je     c0012eab <Dbg::logc(char)+0x9>
c0012eb0:	ba f8 03 00 00       	mov    edx,0x3f8
c0012eb5:	88 c8                	mov    al,cl
c0012eb7:	ee                   	out    dx,al
c0012eb8:	c3                   	ret    

c0012eb9 <Dbg::logs(char*)>:
c0012eb9:	53                   	push   ebx
c0012eba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ebe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ec1:	84 c0                	test   al,al
c0012ec3:	74 0f                	je     c0012ed4 <Dbg::logs(char*)+0x1b>
c0012ec5:	50                   	push   eax
c0012ec6:	43                   	inc    ebx
c0012ec7:	e8 d6 ff ff ff       	call   c0012ea2 <Dbg::logc(char)>
c0012ecc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ecf:	5a                   	pop    edx
c0012ed0:	84 c0                	test   al,al
c0012ed2:	75 f1                	jne    c0012ec5 <Dbg::logs(char*)+0xc>
c0012ed4:	5b                   	pop    ebx
c0012ed5:	c3                   	ret    

c0012ed6 <Dbg::logWriteInt(unsigned int)>:
c0012ed6:	83 ec 10             	sub    esp,0x10
c0012ed9:	6a 0a                	push   0xa
c0012edb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012edf:	50                   	push   eax
c0012ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee4:	e8 58 ff ff ff       	call   c0012e41 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ee9:	50                   	push   eax
c0012eea:	e8 ca ff ff ff       	call   c0012eb9 <Dbg::logs(char*)>
c0012eef:	83 c4 20             	add    esp,0x20
c0012ef2:	c3                   	ret    

c0012ef3 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ef3:	83 ec 10             	sub    esp,0x10
c0012ef6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012efa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012efe:	50                   	push   eax
c0012eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f03:	e8 39 ff ff ff       	call   c0012e41 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f08:	50                   	push   eax
c0012f09:	e8 ab ff ff ff       	call   c0012eb9 <Dbg::logs(char*)>
c0012f0e:	83 c4 20             	add    esp,0x20
c0012f11:	c3                   	ret    

c0012f12 <Dbg::kprintf(char const*, ...)>:
c0012f12:	55                   	push   ebp
c0012f13:	57                   	push   edi
c0012f14:	56                   	push   esi
c0012f15:	53                   	push   ebx
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f1d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f25:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f28:	84 c0                	test   al,al
c0012f2a:	74 4a                	je     c0012f76 <Dbg::kprintf(char const*, ...)+0x64>
c0012f2c:	31 db                	xor    ebx,ebx
c0012f2e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f31:	3c 25                	cmp    al,0x25
c0012f33:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f36:	0f 85 e4 00 00 00    	jne    c0013020 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f3c:	83 c3 02             	add    ebx,0x2
c0012f3f:	8a 07                	mov    al,BYTE PTR [edi]
c0012f41:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f44:	83 e8 25             	sub    eax,0x25
c0012f47:	3c 53                	cmp    al,0x53
c0012f49:	0f 87 ba 00 00 00    	ja     c0013009 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f4f:	0f b6 c0             	movzx  eax,al
c0012f52:	ff 24 85 68 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5598]
c0012f59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f5d:	89 c8                	mov    eax,ecx
c0012f5f:	83 c1 04             	add    ecx,0x4
c0012f62:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f66:	ff 30                	push   DWORD PTR [eax]
c0012f68:	e8 4c ff ff ff       	call   c0012eb9 <Dbg::logs(char*)>
c0012f6d:	58                   	pop    eax
c0012f6e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f72:	84 c0                	test   al,al
c0012f74:	75 b8                	jne    c0012f2e <Dbg::kprintf(char const*, ...)+0x1c>
c0012f76:	83 c4 0c             	add    esp,0xc
c0012f79:	5b                   	pop    ebx
c0012f7a:	5e                   	pop    esi
c0012f7b:	5f                   	pop    edi
c0012f7c:	5d                   	pop    ebp
c0012f7d:	c3                   	ret    
c0012f7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f82:	89 d0                	mov    eax,edx
c0012f84:	83 c2 04             	add    edx,0x4
c0012f87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f8b:	ff 30                	push   DWORD PTR [eax]
c0012f8d:	e8 44 ff ff ff       	call   c0012ed6 <Dbg::logWriteInt(unsigned int)>
c0012f92:	58                   	pop    eax
c0012f93:	eb d9                	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0012f95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f99:	89 d0                	mov    eax,edx
c0012f9b:	83 c2 04             	add    edx,0x4
c0012f9e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fa5:	50                   	push   eax
c0012fa6:	e8 f7 fe ff ff       	call   c0012ea2 <Dbg::logc(char)>
c0012fab:	58                   	pop    eax
c0012fac:	eb c0                	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0012fae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fb2:	89 c8                	mov    eax,ecx
c0012fb4:	83 c1 04             	add    ecx,0x4
c0012fb7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fbb:	ff 30                	push   DWORD PTR [eax]
c0012fbd:	e8 14 ff ff ff       	call   c0012ed6 <Dbg::logWriteInt(unsigned int)>
c0012fc2:	5f                   	pop    edi
c0012fc3:	eb a9                	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fc9:	89 c8                	mov    eax,ecx
c0012fcb:	83 c1 04             	add    ecx,0x4
c0012fce:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fd2:	6a 10                	push   0x10
c0012fd4:	ff 30                	push   DWORD PTR [eax]
c0012fd6:	e8 18 ff ff ff       	call   c0012ef3 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fdb:	59                   	pop    ecx
c0012fdc:	5f                   	pop    edi
c0012fdd:	eb 8f                	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0012fdf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fe3:	89 d0                	mov    eax,edx
c0012fe5:	83 c2 08             	add    edx,0x8
c0012fe8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fec:	6a 10                	push   0x10
c0012fee:	ff 30                	push   DWORD PTR [eax]
c0012ff0:	e8 fe fe ff ff       	call   c0012ef3 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ff5:	58                   	pop    eax
c0012ff6:	5a                   	pop    edx
c0012ff7:	e9 72 ff ff ff       	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0012ffc:	6a 25                	push   0x25
c0012ffe:	e8 9f fe ff ff       	call   c0012ea2 <Dbg::logc(char)>
c0013003:	58                   	pop    eax
c0013004:	e9 65 ff ff ff       	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0013009:	6a 25                	push   0x25
c001300b:	e8 92 fe ff ff       	call   c0012ea2 <Dbg::logc(char)>
c0013010:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013013:	50                   	push   eax
c0013014:	e8 89 fe ff ff       	call   c0012ea2 <Dbg::logc(char)>
c0013019:	5a                   	pop    edx
c001301a:	59                   	pop    ecx
c001301b:	e9 4e ff ff ff       	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>
c0013020:	50                   	push   eax
c0013021:	89 eb                	mov    ebx,ebp
c0013023:	e8 7a fe ff ff       	call   c0012ea2 <Dbg::logc(char)>
c0013028:	89 fd                	mov    ebp,edi
c001302a:	58                   	pop    eax
c001302b:	e9 3e ff ff ff       	jmp    c0012f6e <Dbg::kprintf(char const*, ...)+0x5c>

c0013030 <File::read(unsigned long long, void*, int*)>:
c0013030:	53                   	push   ebx
c0013031:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013035:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013039:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013040:	3c 19                	cmp    al,0x19
c0013042:	77 35                	ja     c0013079 <File::read(unsigned long long, void*, int*)+0x49>
c0013044:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c001304b:	85 c0                	test   eax,eax
c001304d:	74 2a                	je     c0013079 <File::read(unsigned long long, void*, int*)+0x49>
c001304f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013055:	85 c0                	test   eax,eax
c0013057:	74 20                	je     c0013079 <File::read(unsigned long long, void*, int*)+0x49>
c0013059:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305d:	74 21                	je     c0013080 <File::read(unsigned long long, void*, int*)+0x50>
c001305f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013061:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013065:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001306b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001306f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013073:	5b                   	pop    ebx
c0013074:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013077:	ff e0                	jmp    eax
c0013079:	b8 0b 00 00 00       	mov    eax,0xb
c001307e:	eb 05                	jmp    c0013085 <File::read(unsigned long long, void*, int*)+0x55>
c0013080:	b8 05 00 00 00       	mov    eax,0x5
c0013085:	5b                   	pop    ebx
c0013086:	c3                   	ret    
c0013087:	90                   	nop

c0013088 <File::write(unsigned long long, void*, int*)>:
c0013088:	53                   	push   ebx
c0013089:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001308d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013091:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013098:	3c 19                	cmp    al,0x19
c001309a:	77 35                	ja     c00130d1 <File::write(unsigned long long, void*, int*)+0x49>
c001309c:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c00130a3:	85 c0                	test   eax,eax
c00130a5:	74 2a                	je     c00130d1 <File::write(unsigned long long, void*, int*)+0x49>
c00130a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130ad:	85 c0                	test   eax,eax
c00130af:	74 20                	je     c00130d1 <File::write(unsigned long long, void*, int*)+0x49>
c00130b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130b5:	74 21                	je     c00130d8 <File::write(unsigned long long, void*, int*)+0x50>
c00130b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130cb:	5b                   	pop    ebx
c00130cc:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130cf:	ff e0                	jmp    eax
c00130d1:	b8 0b 00 00 00       	mov    eax,0xb
c00130d6:	eb 05                	jmp    c00130dd <File::write(unsigned long long, void*, int*)+0x55>
c00130d8:	b8 05 00 00 00       	mov    eax,0x5
c00130dd:	5b                   	pop    ebx
c00130de:	c3                   	ret    
c00130df:	90                   	nop

c00130e0 <Directory::read(unsigned long long, void*, int*)>:
c00130e0:	53                   	push   ebx
c00130e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130f0:	3c 19                	cmp    al,0x19
c00130f2:	77 35                	ja     c0013129 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130f4:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c00130fb:	85 c0                	test   eax,eax
c00130fd:	74 2a                	je     c0013129 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013105:	85 c0                	test   eax,eax
c0013107:	74 20                	je     c0013129 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013109:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001310d:	74 21                	je     c0013130 <Directory::read(unsigned long long, void*, int*)+0x50>
c001310f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013111:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013115:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001311b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001311f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013123:	5b                   	pop    ebx
c0013124:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013127:	ff e0                	jmp    eax
c0013129:	b8 0b 00 00 00       	mov    eax,0xb
c001312e:	eb 05                	jmp    c0013135 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013130:	b8 05 00 00 00       	mov    eax,0x5
c0013135:	5b                   	pop    ebx
c0013136:	c3                   	ret    
c0013137:	90                   	nop

c0013138 <Directory::write(unsigned long long, void*, int*)>:
c0013138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001313c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013143:	b8 0b 00 00 00       	mov    eax,0xb
c0013148:	80 fa 19             	cmp    dl,0x19
c001314b:	77 18                	ja     c0013165 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001314d:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013154:	85 d2                	test   edx,edx
c0013156:	74 0d                	je     c0013165 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013158:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001315f:	19 c0                	sbb    eax,eax
c0013161:	83 e0 0a             	and    eax,0xa
c0013164:	40                   	inc    eax
c0013165:	c3                   	ret    

c0013166 <File::isAtty()>:
c0013166:	31 c0                	xor    eax,eax
c0013168:	c3                   	ret    
c0013169:	90                   	nop

c001316a <Directory::isAtty()>:
c001316a:	31 c0                	xor    eax,eax
c001316c:	c3                   	ret    
c001316d:	90                   	nop

c001316e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001316e:	b8 0a 00 00 00       	mov    eax,0xa
c0013173:	c3                   	ret    

c0013174 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013174:	b8 0a 00 00 00       	mov    eax,0xa
c0013179:	c3                   	ret    

c001317a <File::~File()>:
c001317a:	83 ec 0c             	sub    esp,0xc
c001317d:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0013182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013186:	89 10                	mov    DWORD PTR [eax],edx
c0013188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318c:	83 ec 0c             	sub    esp,0xc
c001318f:	50                   	push   eax
c0013190:	e8 df e7 ff ff       	call   c0011974 <UnixFile::~UnixFile()>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	90                   	nop
c0013199:	83 c4 0c             	add    esp,0xc
c001319c:	c3                   	ret    
c001319d:	90                   	nop

c001319e <File::~File()>:
c001319e:	83 ec 0c             	sub    esp,0xc
c00131a1:	83 ec 0c             	sub    esp,0xc
c00131a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a8:	e8 cd ff ff ff       	call   c001317a <File::~File()>
c00131ad:	83 c4 10             	add    esp,0x10
c00131b0:	83 ec 08             	sub    esp,0x8
c00131b3:	68 14 01 00 00       	push   0x114
c00131b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131bc:	e8 71 fc ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	83 c4 0c             	add    esp,0xc
c00131c7:	c3                   	ret    

c00131c8 <Directory::~Directory()>:
c00131c8:	83 ec 0c             	sub    esp,0xc
c00131cb:	ba 40 ac 02 c0       	mov    edx,0xc002ac40
c00131d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d4:	89 10                	mov    DWORD PTR [eax],edx
c00131d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	50                   	push   eax
c00131de:	e8 91 e7 ff ff       	call   c0011974 <UnixFile::~UnixFile()>
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	90                   	nop
c00131e7:	83 c4 0c             	add    esp,0xc
c00131ea:	c3                   	ret    
c00131eb:	90                   	nop

c00131ec <Directory::~Directory()>:
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f6:	e8 cd ff ff ff       	call   c00131c8 <Directory::~Directory()>
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	83 ec 08             	sub    esp,0x8
c0013201:	68 14 01 00 00       	push   0x114
c0013206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001320a:	e8 23 fc ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c001320f:	83 c4 10             	add    esp,0x10
c0013212:	83 c4 0c             	add    esp,0xc
c0013215:	c3                   	ret    

c0013216 <Filesystem::Filesystem()>:
c0013216:	ba c0 ab 02 c0       	mov    edx,0xc002abc0
c001321b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001321f:	89 10                	mov    DWORD PTR [eax],edx
c0013221:	8b 15 0c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e70c
c0013227:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001322b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001322e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013232:	a3 0c e7 02 c0       	mov    ds:0xc002e70c,eax
c0013237:	90                   	nop
c0013238:	c3                   	ret    
c0013239:	90                   	nop

c001323a <Filesystem::~Filesystem()>:
c001323a:	ba c0 ab 02 c0       	mov    edx,0xc002abc0
c001323f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013243:	89 10                	mov    DWORD PTR [eax],edx
c0013245:	90                   	nop
c0013246:	c3                   	ret    
c0013247:	90                   	nop

c0013248 <Filesystem::~Filesystem()>:
c0013248:	83 ec 0c             	sub    esp,0xc
c001324b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001324f:	e8 e6 ff ff ff       	call   c001323a <Filesystem::~Filesystem()>
c0013254:	83 c4 04             	add    esp,0x4
c0013257:	83 ec 08             	sub    esp,0x8
c001325a:	6a 08                	push   0x8
c001325c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013260:	e8 cd fb ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0013265:	83 c4 10             	add    esp,0x10
c0013268:	83 c4 0c             	add    esp,0xc
c001326b:	c3                   	ret    

c001326c <Fs::getcwd(Process*, char*, int)>:
c001326c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013270:	31 c0                	xor    eax,eax
c0013272:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013275:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013279:	7d 15                	jge    c0013290 <Fs::getcwd(Process*, char*, int)+0x24>
c001327b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001327f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013286:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013289:	84 c9                	test   cl,cl
c001328b:	74 06                	je     c0013293 <Fs::getcwd(Process*, char*, int)+0x27>
c001328d:	40                   	inc    eax
c001328e:	eb e2                	jmp    c0013272 <Fs::getcwd(Process*, char*, int)+0x6>
c0013290:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013293:	31 c0                	xor    eax,eax
c0013295:	c3                   	ret    

c0013296 <Fs::initVFS()>:
c0013296:	83 ec 18             	sub    esp,0x18
c0013299:	6a 08                	push   0x8
c001329b:	e8 a0 c5 ff ff       	call   c000f840 <malloc>
c00132a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00132a3:	e8 a4 dc 00 00       	call   c0020f4c <FAT::FAT()>
c00132a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132af:	e8 8c c5 ff ff       	call   c000f840 <malloc>
c00132b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00132b7:	e8 e8 ee 00 00       	call   c00221a4 <ISO9660::ISO9660()>
c00132bc:	83 c4 1c             	add    esp,0x1c
c00132bf:	c3                   	ret    

c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132c0:	55                   	push   ebp
c00132c1:	57                   	push   edi
c00132c2:	56                   	push   esi
c00132c3:	53                   	push   ebx
c00132c4:	81 ec 10 04 00 00    	sub    esp,0x410
c00132ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132df:	68 00 04 00 00       	push   0x400
c00132e4:	6a 00                	push   0x0
c00132e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132ea:	56                   	push   esi
c00132eb:	e8 88 d4 fe ff       	call   c0000778 <memset>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132f7:	75 0b                	jne    c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132f9:	50                   	push   eax
c00132fa:	50                   	push   eax
c00132fb:	57                   	push   edi
c00132fc:	56                   	push   esi
c00132fd:	e8 32 d5 fe ff       	call   c0000834 <strcpy>
c0013302:	eb 41                	jmp    c0013345 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013304:	8a 07                	mov    al,BYTE PTR [edi]
c0013306:	3c 5c                	cmp    al,0x5c
c0013308:	74 04                	je     c001330e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001330a:	3c 2f                	cmp    al,0x2f
c001330c:	75 18                	jne    c0013326 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001330e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013311:	3c 60                	cmp    al,0x60
c0013313:	7e 03                	jle    c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013315:	83 e8 20             	sub    eax,0x20
c0013318:	88 04 24             	mov    BYTE PTR [esp],al
c001331b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013322:	50                   	push   eax
c0013323:	50                   	push   eax
c0013324:	eb 18                	jmp    c001333e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013326:	50                   	push   eax
c0013327:	50                   	push   eax
c0013328:	55                   	push   ebp
c0013329:	56                   	push   esi
c001332a:	e8 05 d5 fe ff       	call   c0000834 <strcpy>
c001332f:	5a                   	pop    edx
c0013330:	59                   	pop    ecx
c0013331:	68 61 c3 02 c0       	push   0xc002c361
c0013336:	56                   	push   esi
c0013337:	e8 38 d6 fe ff       	call   c0000974 <strcat>
c001333c:	5d                   	pop    ebp
c001333d:	58                   	pop    eax
c001333e:	57                   	push   edi
c001333f:	56                   	push   esi
c0013340:	e8 2f d6 fe ff       	call   c0000974 <strcat>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	8a 04 24             	mov    al,BYTE PTR [esp]
c001334b:	3c 60                	cmp    al,0x60
c001334d:	7e 03                	jle    c0013352 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001334f:	83 e8 20             	sub    eax,0x20
c0013352:	88 04 24             	mov    BYTE PTR [esp],al
c0013355:	88 03                	mov    BYTE PTR [ebx],al
c0013357:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001335e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013364:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013368:	bf 03 00 00 00       	mov    edi,0x3
c001336d:	b8 03 00 00 00       	mov    eax,0x3
c0013372:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013375:	84 d2                	test   dl,dl
c0013377:	0f 84 91 00 00 00    	je     c001340e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001337d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013380:	80 fa 5c             	cmp    dl,0x5c
c0013383:	74 05                	je     c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013385:	80 fa 2f             	cmp    dl,0x2f
c0013388:	75 12                	jne    c001339c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001338a:	89 c5                	mov    ebp,eax
c001338c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013391:	74 09                	je     c001339c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013393:	40                   	inc    eax
c0013394:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013398:	89 cf                	mov    edi,ecx
c001339a:	eb d6                	jmp    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001339c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133a1:	75 5b                	jne    c00133fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133a3:	80 fa 2e             	cmp    dl,0x2e
c00133a6:	75 56                	jne    c00133fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133ac:	74 19                	je     c00133c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133b3:	74 53                	je     c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133b5:	89 f9                	mov    ecx,edi
c00133b7:	41                   	inc    ecx
c00133b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133bb:	80 fa 2f             	cmp    dl,0x2f
c00133be:	74 f7                	je     c00133b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133c0:	80 fa 5c             	cmp    dl,0x5c
c00133c3:	74 f2                	je     c00133b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133c5:	eb d1                	jmp    c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133cc:	74 3a                	je     c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133ce:	83 f8 03             	cmp    eax,0x3
c00133d1:	74 c5                	je     c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d3:	41                   	inc    ecx
c00133d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133d7:	80 fa 2f             	cmp    dl,0x2f
c00133da:	74 f7                	je     c00133d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133dc:	80 fa 5c             	cmp    dl,0x5c
c00133df:	74 f2                	je     c00133d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133e1:	48                   	dec    eax
c00133e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133e6:	75 06                	jne    c00133ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ec:	eb f3                	jmp    c00133e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133f2:	74 07                	je     c00133fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133f8:	48                   	dec    eax
c00133f9:	eb f3                	jmp    c00133ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133fb:	40                   	inc    eax
c00133fc:	eb 9a                	jmp    c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133fe:	80 fa 2f             	cmp    dl,0x2f
c0013401:	74 95                	je     c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013403:	80 fa 5c             	cmp    dl,0x5c
c0013406:	74 90                	je     c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013408:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001340b:	40                   	inc    eax
c001340c:	eb 8a                	jmp    c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013412:	83 ec 0c             	sub    esp,0xc
c0013415:	53                   	push   ebx
c0013416:	e8 79 d3 fe ff       	call   c0000794 <strlen>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013423:	75 26                	jne    c001344b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013425:	83 ec 0c             	sub    esp,0xc
c0013428:	53                   	push   ebx
c0013429:	e8 66 d3 fe ff       	call   c0000794 <strlen>
c001342e:	83 c4 10             	add    esp,0x10
c0013431:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013436:	74 26                	je     c001345e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	53                   	push   ebx
c001343c:	e8 53 d3 fe ff       	call   c0000794 <strlen>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013449:	eb c7                	jmp    c0013412 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001344b:	83 ec 0c             	sub    esp,0xc
c001344e:	53                   	push   ebx
c001344f:	e8 40 d3 fe ff       	call   c0000794 <strlen>
c0013454:	83 c4 10             	add    esp,0x10
c0013457:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001345c:	74 c7                	je     c0013425 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001345e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013464:	5b                   	pop    ebx
c0013465:	5e                   	pop    esi
c0013466:	5f                   	pop    edi
c0013467:	5d                   	pop    ebp
c0013468:	c3                   	ret    
c0013469:	90                   	nop

c001346a <File::File(char const*, Process*)>:
c001346a:	83 ec 0c             	sub    esp,0xc
c001346d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013471:	83 ec 08             	sub    esp,0x8
c0013474:	6a 00                	push   0x0
c0013476:	50                   	push   eax
c0013477:	e8 16 e3 ff ff       	call   c0011792 <UnixFile::UnixFile(int)>
c001347c:	83 c4 10             	add    esp,0x10
c001347f:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0013484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013488:	89 10                	mov    DWORD PTR [eax],edx
c001348a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013498:	83 c0 0d             	add    eax,0xd
c001349b:	83 ec 04             	sub    esp,0x4
c001349e:	52                   	push   edx
c001349f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a3:	50                   	push   eax
c00134a4:	e8 17 fe ff ff       	call   c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134b3:	8d 50 bf             	lea    edx,[eax-0x41]
c00134b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134c8:	90                   	nop
c00134c9:	83 c4 0c             	add    esp,0xc
c00134cc:	c3                   	ret    
c00134cd:	90                   	nop

c00134ce <File::open(FileOpenMode)>:
c00134ce:	53                   	push   ebx
c00134cf:	b8 0b 00 00 00       	mov    eax,0xb
c00134d4:	83 ec 08             	sub    esp,0x8
c00134d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134db:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134e2:	80 fa 19             	cmp    dl,0x19
c00134e5:	77 40                	ja     c0013527 <File::open(FileOpenMode)+0x59>
c00134e7:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c00134ee:	85 d2                	test   edx,edx
c00134f0:	74 35                	je     c0013527 <File::open(FileOpenMode)+0x59>
c00134f2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f8:	85 d2                	test   edx,edx
c00134fa:	74 2b                	je     c0013527 <File::open(FileOpenMode)+0x59>
c00134fc:	b8 06 00 00 00       	mov    eax,0x6
c0013501:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013505:	75 20                	jne    c0013527 <File::open(FileOpenMode)+0x59>
c0013507:	8b 02                	mov    eax,DWORD PTR [edx]
c0013509:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001350f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013513:	51                   	push   ecx
c0013514:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013517:	51                   	push   ecx
c0013518:	52                   	push   edx
c0013519:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001351c:	83 c4 10             	add    esp,0x10
c001351f:	85 c0                	test   eax,eax
c0013521:	75 04                	jne    c0013527 <File::open(FileOpenMode)+0x59>
c0013523:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013527:	83 c4 08             	add    esp,0x8
c001352a:	5b                   	pop    ebx
c001352b:	c3                   	ret    

c001352c <File::close()>:
c001352c:	53                   	push   ebx
c001352d:	b8 0b 00 00 00       	mov    eax,0xb
c0013532:	83 ec 08             	sub    esp,0x8
c0013535:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013539:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013540:	80 fa 19             	cmp    dl,0x19
c0013543:	77 41                	ja     c0013586 <File::close()+0x5a>
c0013545:	8b 1c 95 a0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1460]
c001354c:	85 db                	test   ebx,ebx
c001354e:	74 36                	je     c0013586 <File::close()+0x5a>
c0013550:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013557:	74 2d                	je     c0013586 <File::close()+0x5a>
c0013559:	b8 05 00 00 00       	mov    eax,0x5
c001355e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013562:	74 22                	je     c0013586 <File::close()+0x5a>
c0013564:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013568:	8b 04 95 a0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1460]
c001356f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013575:	53                   	push   ebx
c0013576:	53                   	push   ebx
c0013577:	8b 10                	mov    edx,DWORD PTR [eax]
c0013579:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001357f:	50                   	push   eax
c0013580:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	83 c4 08             	add    esp,0x8
c0013589:	5b                   	pop    ebx
c001358a:	c3                   	ret    
c001358b:	90                   	nop

c001358c <File::seek(unsigned long long)>:
c001358c:	56                   	push   esi
c001358d:	53                   	push   ebx
c001358e:	b8 0b 00 00 00       	mov    eax,0xb
c0013593:	51                   	push   ecx
c0013594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013598:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001359c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135a7:	80 fa 19             	cmp    dl,0x19
c00135aa:	77 31                	ja     c00135dd <File::seek(unsigned long long)+0x51>
c00135ac:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c00135b3:	85 d2                	test   edx,edx
c00135b5:	74 26                	je     c00135dd <File::seek(unsigned long long)+0x51>
c00135b7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135bd:	85 d2                	test   edx,edx
c00135bf:	74 1c                	je     c00135dd <File::seek(unsigned long long)+0x51>
c00135c1:	b8 05 00 00 00       	mov    eax,0x5
c00135c6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135ca:	74 11                	je     c00135dd <File::seek(unsigned long long)+0x51>
c00135cc:	8b 02                	mov    eax,DWORD PTR [edx]
c00135ce:	53                   	push   ebx
c00135cf:	51                   	push   ecx
c00135d0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135d6:	52                   	push   edx
c00135d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135da:	83 c4 10             	add    esp,0x10
c00135dd:	5a                   	pop    edx
c00135de:	5b                   	pop    ebx
c00135df:	5e                   	pop    esi
c00135e0:	c3                   	ret    
c00135e1:	90                   	nop

c00135e2 <File::tell(unsigned long long*)>:
c00135e2:	83 ec 0c             	sub    esp,0xc
c00135e5:	b8 0b 00 00 00       	mov    eax,0xb
c00135ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135ee:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135f5:	80 fa 19             	cmp    dl,0x19
c00135f8:	77 34                	ja     c001362e <File::tell(unsigned long long*)+0x4c>
c00135fa:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013601:	85 d2                	test   edx,edx
c0013603:	74 29                	je     c001362e <File::tell(unsigned long long*)+0x4c>
c0013605:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001360b:	85 d2                	test   edx,edx
c001360d:	74 1f                	je     c001362e <File::tell(unsigned long long*)+0x4c>
c001360f:	b8 05 00 00 00       	mov    eax,0x5
c0013614:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013618:	74 14                	je     c001362e <File::tell(unsigned long long*)+0x4c>
c001361a:	50                   	push   eax
c001361b:	8b 02                	mov    eax,DWORD PTR [edx]
c001361d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013621:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013627:	52                   	push   edx
c0013628:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	83 c4 0c             	add    esp,0xc
c0013631:	c3                   	ret    

c0013632 <File::rewind()>:
c0013632:	83 ec 10             	sub    esp,0x10
c0013635:	6a 00                	push   0x0
c0013637:	6a 00                	push   0x0
c0013639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001363d:	e8 4a ff ff ff       	call   c001358c <File::seek(unsigned long long)>
c0013642:	83 c4 1c             	add    esp,0x1c
c0013645:	c3                   	ret    

c0013646 <File::unlink()>:
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	b8 0b 00 00 00       	mov    eax,0xb
c001364e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013652:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013659:	80 f9 19             	cmp    cl,0x19
c001365c:	77 2f                	ja     c001368d <File::unlink()+0x47>
c001365e:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013665:	85 c9                	test   ecx,ecx
c0013667:	74 24                	je     c001368d <File::unlink()+0x47>
c0013669:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001366f:	85 c9                	test   ecx,ecx
c0013671:	74 1a                	je     c001368d <File::unlink()+0x47>
c0013673:	b8 06 00 00 00       	mov    eax,0x6
c0013678:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001367c:	75 0f                	jne    c001368d <File::unlink()+0x47>
c001367e:	83 c2 0d             	add    edx,0xd
c0013681:	50                   	push   eax
c0013682:	50                   	push   eax
c0013683:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013685:	52                   	push   edx
c0013686:	51                   	push   ecx
c0013687:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001368a:	83 c4 10             	add    esp,0x10
c001368d:	83 c4 0c             	add    esp,0xc
c0013690:	c3                   	ret    
c0013691:	90                   	nop

c0013692 <File::rename(char const*)>:
c0013692:	83 ec 0c             	sub    esp,0xc
c0013695:	b8 0b 00 00 00       	mov    eax,0xb
c001369a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001369e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a5:	80 f9 19             	cmp    cl,0x19
c00136a8:	77 32                	ja     c00136dc <File::rename(char const*)+0x4a>
c00136aa:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c00136b1:	85 c9                	test   ecx,ecx
c00136b3:	74 27                	je     c00136dc <File::rename(char const*)+0x4a>
c00136b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136bb:	85 c9                	test   ecx,ecx
c00136bd:	74 1d                	je     c00136dc <File::rename(char const*)+0x4a>
c00136bf:	b8 06 00 00 00       	mov    eax,0x6
c00136c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c8:	75 12                	jne    c00136dc <File::rename(char const*)+0x4a>
c00136ca:	83 c2 0d             	add    edx,0xd
c00136cd:	50                   	push   eax
c00136ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d4:	52                   	push   edx
c00136d5:	51                   	push   ecx
c00136d6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136d9:	83 c4 10             	add    esp,0x10
c00136dc:	83 c4 0c             	add    esp,0xc
c00136df:	c3                   	ret    

c00136e0 <File::chfatattr(unsigned char, unsigned char)>:
c00136e0:	57                   	push   edi
c00136e1:	b8 0b 00 00 00       	mov    eax,0xb
c00136e6:	56                   	push   esi
c00136e7:	53                   	push   ebx
c00136e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136fb:	80 f9 19             	cmp    cl,0x19
c00136fe:	77 37                	ja     c0013737 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013700:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013707:	85 c9                	test   ecx,ecx
c0013709:	74 2c                	je     c0013737 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001370b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013711:	85 c9                	test   ecx,ecx
c0013713:	74 22                	je     c0013737 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013715:	b8 06 00 00 00       	mov    eax,0x6
c001371a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001371e:	75 17                	jne    c0013737 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013720:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013722:	89 f0                	mov    eax,esi
c0013724:	83 c2 0d             	add    edx,0xd
c0013727:	0f b6 f0             	movzx  esi,al
c001372a:	0f b6 db             	movzx  ebx,bl
c001372d:	56                   	push   esi
c001372e:	53                   	push   ebx
c001372f:	52                   	push   edx
c0013730:	51                   	push   ecx
c0013731:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	5b                   	pop    ebx
c0013738:	5e                   	pop    esi
c0013739:	5f                   	pop    edi
c001373a:	c3                   	ret    
c001373b:	90                   	nop

c001373c <File::exists()>:
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	31 c0                	xor    eax,eax
c0013741:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013745:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001374c:	80 f9 19             	cmp    cl,0x19
c001374f:	77 24                	ja     c0013775 <File::exists()+0x39>
c0013751:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013758:	85 c9                	test   ecx,ecx
c001375a:	74 19                	je     c0013775 <File::exists()+0x39>
c001375c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013762:	85 c9                	test   ecx,ecx
c0013764:	74 0f                	je     c0013775 <File::exists()+0x39>
c0013766:	83 c2 0d             	add    edx,0xd
c0013769:	50                   	push   eax
c001376a:	50                   	push   eax
c001376b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001376d:	52                   	push   edx
c001376e:	51                   	push   ecx
c001376f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013772:	83 c4 10             	add    esp,0x10
c0013775:	83 c4 0c             	add    esp,0xc
c0013778:	c3                   	ret    
c0013779:	90                   	nop

c001377a <File::stat(unsigned long long*, bool*)>:
c001377a:	56                   	push   esi
c001377b:	53                   	push   ebx
c001377c:	50                   	push   eax
c001377d:	b8 0b 00 00 00       	mov    eax,0xb
c0013782:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013786:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001378a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013791:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013795:	80 f9 19             	cmp    cl,0x19
c0013798:	77 3d                	ja     c00137d7 <File::stat(unsigned long long*, bool*)+0x5d>
c001379a:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c00137a1:	85 c9                	test   ecx,ecx
c00137a3:	74 32                	je     c00137d7 <File::stat(unsigned long long*, bool*)+0x5d>
c00137a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137ab:	85 c9                	test   ecx,ecx
c00137ad:	74 28                	je     c00137d7 <File::stat(unsigned long long*, bool*)+0x5d>
c00137af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137b5:	74 13                	je     c00137ca <File::stat(unsigned long long*, bool*)+0x50>
c00137b7:	83 ec 04             	sub    esp,0x4
c00137ba:	56                   	push   esi
c00137bb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137c1:	51                   	push   ecx
c00137c2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137c5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137c8:	eb 0a                	jmp    c00137d4 <File::stat(unsigned long long*, bool*)+0x5a>
c00137ca:	53                   	push   ebx
c00137cb:	83 c2 0d             	add    edx,0xd
c00137ce:	56                   	push   esi
c00137cf:	52                   	push   edx
c00137d0:	51                   	push   ecx
c00137d1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137d4:	83 c4 10             	add    esp,0x10
c00137d7:	5a                   	pop    edx
c00137d8:	5b                   	pop    ebx
c00137d9:	5e                   	pop    esi
c00137da:	c3                   	ret    

c00137db <Fs::setcwd(Process*, char*)>:
c00137db:	55                   	push   ebp
c00137dc:	57                   	push   edi
c00137dd:	56                   	push   esi
c00137de:	53                   	push   ebx
c00137df:	81 ec 20 02 00 00    	sub    esp,0x220
c00137e5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137ec:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137f2:	57                   	push   edi
c00137f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137fa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137fe:	56                   	push   esi
c00137ff:	e8 bc fa ff ff       	call   c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013804:	89 34 24             	mov    DWORD PTR [esp],esi
c0013807:	e8 88 cf fe ff       	call   c0000794 <strlen>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	83 f8 02             	cmp    eax,0x2
c0013812:	77 17                	ja     c001382b <Fs::setcwd(Process*, char*)+0x50>
c0013814:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013819:	83 e8 41             	sub    eax,0x41
c001381c:	83 f8 19             	cmp    eax,0x19
c001381f:	76 24                	jbe    c0013845 <Fs::setcwd(Process*, char*)+0x6a>
c0013821:	b8 03 00 00 00       	mov    eax,0x3
c0013826:	e9 e0 00 00 00       	jmp    c001390b <Fs::setcwd(Process*, char*)+0x130>
c001382b:	83 ec 0c             	sub    esp,0xc
c001382e:	56                   	push   esi
c001382f:	e8 60 cf fe ff       	call   c0000794 <strlen>
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	83 f8 03             	cmp    eax,0x3
c001383a:	75 34                	jne    c0013870 <Fs::setcwd(Process*, char*)+0x95>
c001383c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013841:	75 2d                	jne    c0013870 <Fs::setcwd(Process*, char*)+0x95>
c0013843:	eb cf                	jmp    c0013814 <Fs::setcwd(Process*, char*)+0x39>
c0013845:	8b 14 85 a0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1460]
c001384c:	b8 05 00 00 00       	mov    eax,0x5
c0013851:	85 d2                	test   edx,edx
c0013853:	0f 84 b2 00 00 00    	je     c001390b <Fs::setcwd(Process*, char*)+0x130>
c0013859:	b8 06 00 00 00       	mov    eax,0x6
c001385e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013865:	0f 85 92 00 00 00    	jne    c00138fd <Fs::setcwd(Process*, char*)+0x122>
c001386b:	e9 9b 00 00 00       	jmp    c001390b <Fs::setcwd(Process*, char*)+0x130>
c0013870:	83 ec 0c             	sub    esp,0xc
c0013873:	68 14 01 00 00       	push   0x114
c0013878:	e8 c3 bf ff ff       	call   c000f840 <malloc>
c001387d:	83 c4 0c             	add    esp,0xc
c0013880:	89 c3                	mov    ebx,eax
c0013882:	55                   	push   ebp
c0013883:	56                   	push   esi
c0013884:	50                   	push   eax
c0013885:	e8 e0 fb ff ff       	call   c001346a <File::File(char const*, Process*)>
c001388a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001388f:	83 c4 0c             	add    esp,0xc
c0013892:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013896:	50                   	push   eax
c0013897:	8d 44 24 10          	lea    eax,[esp+0x10]
c001389b:	50                   	push   eax
c001389c:	53                   	push   ebx
c001389d:	e8 d8 fe ff ff       	call   c001377a <File::stat(unsigned long long*, bool*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	83 f8 02             	cmp    eax,0x2
c00138a8:	74 04                	je     c00138ae <Fs::setcwd(Process*, char*)+0xd3>
c00138aa:	85 c0                	test   eax,eax
c00138ac:	74 1c                	je     c00138ca <Fs::setcwd(Process*, char*)+0xef>
c00138ae:	b8 01 00 00 00       	mov    eax,0x1
c00138b3:	85 db                	test   ebx,ebx
c00138b5:	74 54                	je     c001390b <Fs::setcwd(Process*, char*)+0x130>
c00138b7:	83 ec 0c             	sub    esp,0xc
c00138ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138bc:	53                   	push   ebx
c00138bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c0:	83 c4 10             	add    esp,0x10
c00138c3:	b8 01 00 00 00       	mov    eax,0x1
c00138c8:	eb 41                	jmp    c001390b <Fs::setcwd(Process*, char*)+0x130>
c00138ca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138cf:	75 1c                	jne    c00138ed <Fs::setcwd(Process*, char*)+0x112>
c00138d1:	b8 02 00 00 00       	mov    eax,0x2
c00138d6:	85 db                	test   ebx,ebx
c00138d8:	74 31                	je     c001390b <Fs::setcwd(Process*, char*)+0x130>
c00138da:	83 ec 0c             	sub    esp,0xc
c00138dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138df:	53                   	push   ebx
c00138e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e3:	83 c4 10             	add    esp,0x10
c00138e6:	b8 02 00 00 00       	mov    eax,0x2
c00138eb:	eb 1e                	jmp    c001390b <Fs::setcwd(Process*, char*)+0x130>
c00138ed:	85 db                	test   ebx,ebx
c00138ef:	74 0c                	je     c00138fd <Fs::setcwd(Process*, char*)+0x122>
c00138f1:	83 ec 0c             	sub    esp,0xc
c00138f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f6:	53                   	push   ebx
c00138f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138fa:	83 c4 10             	add    esp,0x10
c00138fd:	50                   	push   eax
c00138fe:	50                   	push   eax
c00138ff:	56                   	push   esi
c0013900:	57                   	push   edi
c0013901:	e8 2e cf fe ff       	call   c0000834 <strcpy>
c0013906:	83 c4 10             	add    esp,0x10
c0013909:	31 c0                	xor    eax,eax
c001390b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013911:	5b                   	pop    ebx
c0013912:	5e                   	pop    esi
c0013913:	5f                   	pop    edi
c0013914:	5d                   	pop    ebp
c0013915:	c3                   	ret    

c0013916 <Directory::Directory(char const*, Process*)>:
c0013916:	83 ec 0c             	sub    esp,0xc
c0013919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391d:	83 ec 08             	sub    esp,0x8
c0013920:	6a 00                	push   0x0
c0013922:	50                   	push   eax
c0013923:	e8 6a de ff ff       	call   c0011792 <UnixFile::UnixFile(int)>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	ba 40 ac 02 c0       	mov    edx,0xc002ac40
c0013930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013934:	89 10                	mov    DWORD PTR [eax],edx
c0013936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001393a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013944:	83 c0 0d             	add    eax,0xd
c0013947:	83 ec 04             	sub    esp,0x4
c001394a:	52                   	push   edx
c001394b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394f:	50                   	push   eax
c0013950:	e8 6b f9 ff ff       	call   c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013955:	83 c4 10             	add    esp,0x10
c0013958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001395f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013966:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001396c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013970:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013974:	90                   	nop
c0013975:	83 c4 0c             	add    esp,0xc
c0013978:	c3                   	ret    
c0013979:	90                   	nop

c001397a <Directory::open()>:
c001397a:	53                   	push   ebx
c001397b:	b8 0b 00 00 00       	mov    eax,0xb
c0013980:	83 ec 08             	sub    esp,0x8
c0013983:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013987:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001398e:	80 fa 19             	cmp    dl,0x19
c0013991:	77 3d                	ja     c00139d0 <Directory::open()+0x56>
c0013993:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c001399a:	85 d2                	test   edx,edx
c001399c:	74 32                	je     c00139d0 <Directory::open()+0x56>
c001399e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139a4:	85 d2                	test   edx,edx
c00139a6:	74 28                	je     c00139d0 <Directory::open()+0x56>
c00139a8:	b8 06 00 00 00       	mov    eax,0x6
c00139ad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139b1:	75 1d                	jne    c00139d0 <Directory::open()+0x56>
c00139b3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139b9:	50                   	push   eax
c00139ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00139bc:	51                   	push   ecx
c00139bd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139c0:	51                   	push   ecx
c00139c1:	52                   	push   edx
c00139c2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139c5:	83 c4 10             	add    esp,0x10
c00139c8:	85 c0                	test   eax,eax
c00139ca:	75 04                	jne    c00139d0 <Directory::open()+0x56>
c00139cc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139d0:	83 c4 08             	add    esp,0x8
c00139d3:	5b                   	pop    ebx
c00139d4:	c3                   	ret    
c00139d5:	90                   	nop

c00139d6 <Directory::close()>:
c00139d6:	53                   	push   ebx
c00139d7:	b8 0b 00 00 00       	mov    eax,0xb
c00139dc:	83 ec 08             	sub    esp,0x8
c00139df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139e3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139ea:	80 fa 19             	cmp    dl,0x19
c00139ed:	77 41                	ja     c0013a30 <Directory::close()+0x5a>
c00139ef:	8b 1c 95 a0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1460]
c00139f6:	85 db                	test   ebx,ebx
c00139f8:	74 36                	je     c0013a30 <Directory::close()+0x5a>
c00139fa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a01:	74 2d                	je     c0013a30 <Directory::close()+0x5a>
c0013a03:	b8 05 00 00 00       	mov    eax,0x5
c0013a08:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a0c:	74 22                	je     c0013a30 <Directory::close()+0x5a>
c0013a0e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a12:	8b 04 95 a0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1460]
c0013a19:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a1f:	53                   	push   ebx
c0013a20:	53                   	push   ebx
c0013a21:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a23:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a29:	50                   	push   eax
c0013a2a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	83 c4 08             	add    esp,0x8
c0013a33:	5b                   	pop    ebx
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <Directory::unlink()>:
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a49:	80 f9 19             	cmp    cl,0x19
c0013a4c:	77 2f                	ja     c0013a7d <Directory::unlink()+0x47>
c0013a4e:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013a55:	85 c9                	test   ecx,ecx
c0013a57:	74 24                	je     c0013a7d <Directory::unlink()+0x47>
c0013a59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a5f:	85 c9                	test   ecx,ecx
c0013a61:	74 1a                	je     c0013a7d <Directory::unlink()+0x47>
c0013a63:	b8 06 00 00 00       	mov    eax,0x6
c0013a68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a6c:	75 0f                	jne    c0013a7d <Directory::unlink()+0x47>
c0013a6e:	83 c2 0d             	add    edx,0xd
c0013a71:	50                   	push   eax
c0013a72:	50                   	push   eax
c0013a73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a75:	52                   	push   edx
c0013a76:	51                   	push   ecx
c0013a77:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a7a:	83 c4 10             	add    esp,0x10
c0013a7d:	83 c4 0c             	add    esp,0xc
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Directory::rename(char const*)>:
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a95:	80 f9 19             	cmp    cl,0x19
c0013a98:	77 32                	ja     c0013acc <Directory::rename(char const*)+0x4a>
c0013a9a:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013aa1:	85 c9                	test   ecx,ecx
c0013aa3:	74 27                	je     c0013acc <Directory::rename(char const*)+0x4a>
c0013aa5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aab:	85 c9                	test   ecx,ecx
c0013aad:	74 1d                	je     c0013acc <Directory::rename(char const*)+0x4a>
c0013aaf:	b8 06 00 00 00       	mov    eax,0x6
c0013ab4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ab8:	75 12                	jne    c0013acc <Directory::rename(char const*)+0x4a>
c0013aba:	83 c2 0d             	add    edx,0xd
c0013abd:	50                   	push   eax
c0013abe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac4:	52                   	push   edx
c0013ac5:	51                   	push   ecx
c0013ac6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ac9:	83 c4 10             	add    esp,0x10
c0013acc:	83 c4 0c             	add    esp,0xc
c0013acf:	c3                   	ret    

c0013ad0 <Directory::exists()>:
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	31 c0                	xor    eax,eax
c0013ad5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ae0:	80 f9 19             	cmp    cl,0x19
c0013ae3:	77 24                	ja     c0013b09 <Directory::exists()+0x39>
c0013ae5:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013aec:	85 c9                	test   ecx,ecx
c0013aee:	74 19                	je     c0013b09 <Directory::exists()+0x39>
c0013af0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af6:	85 c9                	test   ecx,ecx
c0013af8:	74 0f                	je     c0013b09 <Directory::exists()+0x39>
c0013afa:	83 c2 0d             	add    edx,0xd
c0013afd:	50                   	push   eax
c0013afe:	50                   	push   eax
c0013aff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b01:	52                   	push   edx
c0013b02:	51                   	push   ecx
c0013b03:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	83 c4 0c             	add    esp,0xc
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Directory::read(dirent*)>:
c0013b0e:	83 ec 1c             	sub    esp,0x1c
c0013b11:	b8 0b 00 00 00       	mov    eax,0xb
c0013b16:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b1a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b21:	80 fa 19             	cmp    dl,0x19
c0013b24:	77 30                	ja     c0013b56 <Directory::read(dirent*)+0x48>
c0013b26:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013b2d:	85 d2                	test   edx,edx
c0013b2f:	74 25                	je     c0013b56 <Directory::read(dirent*)+0x48>
c0013b31:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b38:	74 1c                	je     c0013b56 <Directory::read(dirent*)+0x48>
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b3f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b43:	52                   	push   edx
c0013b44:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b48:	6a 00                	push   0x0
c0013b4a:	68 10 01 00 00       	push   0x110
c0013b4f:	51                   	push   ecx
c0013b50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b53:	83 c4 20             	add    esp,0x20
c0013b56:	83 c4 1c             	add    esp,0x1c
c0013b59:	c3                   	ret    

c0013b5a <Directory::create()>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b6d:	80 f9 19             	cmp    cl,0x19
c0013b70:	77 2f                	ja     c0013ba1 <Directory::create()+0x47>
c0013b72:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013b79:	85 c9                	test   ecx,ecx
c0013b7b:	74 24                	je     c0013ba1 <Directory::create()+0x47>
c0013b7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b83:	85 c9                	test   ecx,ecx
c0013b85:	74 1a                	je     c0013ba1 <Directory::create()+0x47>
c0013b87:	b8 06 00 00 00       	mov    eax,0x6
c0013b8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b90:	75 0f                	jne    c0013ba1 <Directory::create()+0x47>
c0013b92:	83 c2 0d             	add    edx,0xd
c0013b95:	50                   	push   eax
c0013b96:	50                   	push   eax
c0013b97:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b99:	52                   	push   edx
c0013b9a:	51                   	push   ecx
c0013b9b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b9e:	83 c4 10             	add    esp,0x10
c0013ba1:	83 c4 0c             	add    esp,0xc
c0013ba4:	c3                   	ret    
c0013ba5:	90                   	nop

c0013ba6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ba6:	b8 0a 00 00 00       	mov    eax,0xa
c0013bab:	c3                   	ret    

c0013bac <Bus::Bus(char const*)>:
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb3:	83 ec 08             	sub    esp,0x8
c0013bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bba:	50                   	push   eax
c0013bbb:	e8 68 09 00 00       	call   c0014528 <Device::Device(char const*)>
c0013bc0:	83 c4 10             	add    esp,0x10
c0013bc3:	ba 5c ac 02 c0       	mov    edx,0xc002ac5c
c0013bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bcc:	89 10                	mov    DWORD PTR [eax],edx
c0013bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bdc:	90                   	nop
c0013bdd:	83 c4 0c             	add    esp,0xc
c0013be0:	c3                   	ret    
c0013be1:	90                   	nop

c0013be2 <Bus::~Bus()>:
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	ba 5c ac 02 c0       	mov    edx,0xc002ac5c
c0013bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bee:	89 10                	mov    DWORD PTR [eax],edx
c0013bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	50                   	push   eax
c0013bf8:	e8 0d 06 00 00       	call   c001420a <Device::~Device()>
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	90                   	nop
c0013c01:	83 c4 0c             	add    esp,0xc
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Bus::~Bus()>:
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	83 ec 0c             	sub    esp,0xc
c0013c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c10:	e8 cd ff ff ff       	call   c0013be2 <Bus::~Bus()>
c0013c15:	83 c4 10             	add    esp,0x10
c0013c18:	83 ec 08             	sub    esp,0x8
c0013c1b:	68 58 01 00 00       	push   0x158
c0013c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c24:	e8 09 f2 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	83 c4 0c             	add    esp,0xc
c0013c2f:	c3                   	ret    

c0013c30 <Buzzer::Buzzer(char const*)>:
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c37:	83 ec 08             	sub    esp,0x8
c0013c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3e:	50                   	push   eax
c0013c3f:	e8 e4 08 00 00       	call   c0014528 <Device::Device(char const*)>
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	ba 88 ac 02 c0       	mov    edx,0xc002ac88
c0013c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c50:	89 10                	mov    DWORD PTR [eax],edx
c0013c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c64:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c6e:	90                   	nop
c0013c6f:	83 c4 0c             	add    esp,0xc
c0013c72:	c3                   	ret    
c0013c73:	90                   	nop

c0013c74 <Buzzer::~Buzzer()>:
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	ba 88 ac 02 c0       	mov    edx,0xc002ac88
c0013c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c80:	89 10                	mov    DWORD PTR [eax],edx
c0013c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c86:	83 ec 0c             	sub    esp,0xc
c0013c89:	50                   	push   eax
c0013c8a:	e8 7b 05 00 00       	call   c001420a <Device::~Device()>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	90                   	nop
c0013c93:	83 c4 0c             	add    esp,0xc
c0013c96:	c3                   	ret    
c0013c97:	90                   	nop

c0013c98 <Buzzer::~Buzzer()>:
c0013c98:	83 ec 0c             	sub    esp,0xc
c0013c9b:	83 ec 0c             	sub    esp,0xc
c0013c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca2:	e8 cd ff ff ff       	call   c0013c74 <Buzzer::~Buzzer()>
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	83 ec 08             	sub    esp,0x8
c0013cad:	68 5c 01 00 00       	push   0x15c
c0013cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb6:	e8 77 f1 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	83 c4 0c             	add    esp,0xc
c0013cc1:	c3                   	ret    

c0013cc2 <Buzzer::stop()>:
c0013cc2:	83 ec 14             	sub    esp,0x14
c0013cc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ccb:	6a 00                	push   0x0
c0013ccd:	50                   	push   eax
c0013cce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cd1:	83 c4 1c             	add    esp,0x1c
c0013cd4:	c3                   	ret    

c0013cd5 <beepThread(void*)>:
c0013cd5:	53                   	push   ebx
c0013cd6:	83 ec 08             	sub    esp,0x8
c0013cd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cdd:	e8 f8 a0 00 00       	call   c001ddda <unlockScheduler()>
c0013ce2:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ce7:	52                   	push   edx
c0013ce8:	52                   	push   edx
c0013ce9:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cef:	52                   	push   edx
c0013cf0:	50                   	push   eax
c0013cf1:	e8 32 a6 00 00       	call   c001e328 <nanoSleep(unsigned long long)>
c0013cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cf9:	e8 c4 ff ff ff       	call   c0013cc2 <Buzzer::stop()>
c0013cfe:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d06:	83 c4 18             	add    esp,0x18
c0013d09:	5b                   	pop    ebx
c0013d0a:	e9 5f a5 00 00       	jmp    c001e26e <blockTask(TaskState)>
c0013d0f:	90                   	nop

c0013d10 <Buzzer::beep(int, int, bool)>:
c0013d10:	57                   	push   edi
c0013d11:	56                   	push   esi
c0013d12:	53                   	push   ebx
c0013d13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d17:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d1b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d1f:	52                   	push   edx
c0013d20:	52                   	push   edx
c0013d21:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d27:	56                   	push   esi
c0013d28:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d2b:	83 c4 10             	add    esp,0x10
c0013d2e:	89 f8                	mov    eax,edi
c0013d30:	84 c0                	test   al,al
c0013d32:	74 1f                	je     c0013d53 <Buzzer::beep(int, int, bool)+0x43>
c0013d34:	50                   	push   eax
c0013d35:	50                   	push   eax
c0013d36:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d3c:	99                   	cdq    
c0013d3d:	52                   	push   edx
c0013d3e:	50                   	push   eax
c0013d3f:	e8 e4 a5 00 00       	call   c001e328 <nanoSleep(unsigned long long)>
c0013d44:	83 c4 10             	add    esp,0x10
c0013d47:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d4b:	5b                   	pop    ebx
c0013d4c:	5e                   	pop    esi
c0013d4d:	5f                   	pop    edi
c0013d4e:	e9 6f ff ff ff       	jmp    c0013cc2 <Buzzer::stop()>
c0013d53:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d59:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0013d5e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d66:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d6a:	c7 44 24 14 d5 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cd5
c0013d72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d76:	5b                   	pop    ebx
c0013d77:	5e                   	pop    esi
c0013d78:	5f                   	pop    edi
c0013d79:	e9 8c a1 00 00       	jmp    c001df0a <Process::createThread(void (*)(void*), void*, int)>

c0013d7e <User::loadClockSettings(int)>:
c0013d7e:	53                   	push   ebx
c0013d7f:	83 ec 14             	sub    esp,0x14
c0013d82:	68 14 01 00 00       	push   0x114
c0013d87:	e8 b4 ba ff ff       	call   c000f840 <malloc>
c0013d8c:	83 c4 0c             	add    esp,0xc
c0013d8f:	89 c3                	mov    ebx,eax
c0013d91:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c0013d97:	68 b0 ac 02 c0       	push   0xc002acb0
c0013d9c:	50                   	push   eax
c0013d9d:	e8 c8 f6 ff ff       	call   c001346a <File::File(char const*, Process*)>
c0013da2:	58                   	pop    eax
c0013da3:	5a                   	pop    edx
c0013da4:	6a 01                	push   0x1
c0013da6:	53                   	push   ebx
c0013da7:	e8 22 f7 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c0013dac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013daf:	e8 78 f7 ff ff       	call   c001352c <File::close()>
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	85 db                	test   ebx,ebx
c0013db9:	74 0f                	je     c0013dca <User::loadClockSettings(int)+0x4c>
c0013dbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dbd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013dc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc4:	83 c4 08             	add    esp,0x8
c0013dc7:	5b                   	pop    ebx
c0013dc8:	ff e0                	jmp    eax
c0013dca:	83 c4 08             	add    esp,0x8
c0013dcd:	5b                   	pop    ebx
c0013dce:	c3                   	ret    
c0013dcf:	90                   	nop

c0013dd0 <Clock::Clock(char const*)>:
c0013dd0:	83 ec 0c             	sub    esp,0xc
c0013dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd7:	83 ec 08             	sub    esp,0x8
c0013dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dde:	50                   	push   eax
c0013ddf:	e8 44 07 00 00       	call   c0014528 <Device::Device(char const*)>
c0013de4:	83 c4 10             	add    esp,0x10
c0013de7:	ba d8 ac 02 c0       	mov    edx,0xc002acd8
c0013dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df0:	89 10                	mov    DWORD PTR [eax],edx
c0013df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e00:	90                   	nop
c0013e01:	83 c4 0c             	add    esp,0xc
c0013e04:	c3                   	ret    
c0013e05:	90                   	nop

c0013e06 <Clock::~Clock()>:
c0013e06:	83 ec 0c             	sub    esp,0xc
c0013e09:	ba d8 ac 02 c0       	mov    edx,0xc002acd8
c0013e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e12:	89 10                	mov    DWORD PTR [eax],edx
c0013e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	50                   	push   eax
c0013e1c:	e8 e9 03 00 00       	call   c001420a <Device::~Device()>
c0013e21:	83 c4 10             	add    esp,0x10
c0013e24:	90                   	nop
c0013e25:	83 c4 0c             	add    esp,0xc
c0013e28:	c3                   	ret    
c0013e29:	90                   	nop

c0013e2a <Clock::~Clock()>:
c0013e2a:	83 ec 0c             	sub    esp,0xc
c0013e2d:	83 ec 0c             	sub    esp,0xc
c0013e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e34:	e8 cd ff ff ff       	call   c0013e06 <Clock::~Clock()>
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	83 ec 08             	sub    esp,0x8
c0013e3f:	68 58 01 00 00       	push   0x158
c0013e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e48:	e8 e5 ef ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0013e4d:	83 c4 10             	add    esp,0x10
c0013e50:	83 c4 0c             	add    esp,0xc
c0013e53:	c3                   	ret    

c0013e54 <Clock::timeInSecondsLocal()>:
c0013e54:	53                   	push   ebx
c0013e55:	83 ec 14             	sub    esp,0x14
c0013e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5e:	50                   	push   eax
c0013e5f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e62:	0f b6 0d 14 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e714
c0013e69:	03 0d 18 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e718
c0013e6f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e75:	89 cb                	mov    ebx,ecx
c0013e77:	c1 fb 1f             	sar    ebx,0x1f
c0013e7a:	01 c8                	add    eax,ecx
c0013e7c:	11 da                	adc    edx,ebx
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	31 c9                	xor    ecx,ecx
c0013e83:	80 3d 15 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e715,0x0
c0013e8a:	74 05                	je     c0013e91 <Clock::timeInSecondsLocal()+0x3d>
c0013e8c:	b9 08 07 00 00       	mov    ecx,0x708
c0013e91:	31 db                	xor    ebx,ebx
c0013e93:	01 c8                	add    eax,ecx
c0013e95:	11 da                	adc    edx,ebx
c0013e97:	83 c4 08             	add    esp,0x8
c0013e9a:	5b                   	pop    ebx
c0013e9b:	c3                   	ret    

c0013e9c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e9c:	57                   	push   edi
c0013e9d:	56                   	push   esi
c0013e9e:	53                   	push   ebx
c0013e9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ea3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ea9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ead:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013eb0:	0f b6 05 14 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e714
c0013eb7:	03 05 18 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e718
c0013ebd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ec3:	99                   	cdq    
c0013ec4:	29 c6                	sub    esi,eax
c0013ec6:	19 d7                	sbb    edi,edx
c0013ec8:	89 f0                	mov    eax,esi
c0013eca:	89 fa                	mov    edx,edi
c0013ecc:	31 f6                	xor    esi,esi
c0013ece:	80 3d 15 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e715,0x0
c0013ed5:	74 05                	je     c0013edc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ed7:	be 08 07 00 00       	mov    esi,0x708
c0013edc:	31 ff                	xor    edi,edi
c0013ede:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ee2:	29 f0                	sub    eax,esi
c0013ee4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee8:	19 fa                	sbb    edx,edi
c0013eea:	89 d8                	mov    eax,ebx
c0013eec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ef0:	5b                   	pop    ebx
c0013ef1:	5e                   	pop    esi
c0013ef2:	5f                   	pop    edi
c0013ef3:	ff e0                	jmp    eax

c0013ef5 <datetimeToSeconds(datetime_t)>:
c0013ef5:	55                   	push   ebp
c0013ef6:	57                   	push   edi
c0013ef7:	56                   	push   esi
c0013ef8:	53                   	push   ebx
c0013ef9:	83 ec 14             	sub    esp,0x14
c0013efc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f00:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f04:	89 d3                	mov    ebx,edx
c0013f06:	0f b6 c6             	movzx  eax,dh
c0013f09:	c1 eb 10             	shr    ebx,0x10
c0013f0c:	48                   	dec    eax
c0013f0d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f12:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f16:	0f b6 f5             	movzx  esi,ch
c0013f19:	89 cf                	mov    edi,ecx
c0013f1b:	6b f6 3c             	imul   esi,esi,0x3c
c0013f1e:	c1 ef 10             	shr    edi,0x10
c0013f21:	0f b6 c9             	movzx  ecx,cl
c0013f24:	89 f8                	mov    eax,edi
c0013f26:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f2c:	0f b6 f8             	movzx  edi,al
c0013f2f:	0f b6 d2             	movzx  edx,dl
c0013f32:	01 fe                	add    esi,edi
c0013f34:	01 f1                	add    ecx,esi
c0013f36:	0f b7 f3             	movzx  esi,bx
c0013f39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f3d:	c1 f9 1f             	sar    ecx,0x1f
c0013f40:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f49:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f4e:	8b 0c 8d 20 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52e0]
c0013f55:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f59:	76 29                	jbe    c0013f84 <datetimeToSeconds(datetime_t)+0x8f>
c0013f5b:	f6 c3 03             	test   bl,0x3
c0013f5e:	75 24                	jne    c0013f84 <datetimeToSeconds(datetime_t)+0x8f>
c0013f60:	31 d2                	xor    edx,edx
c0013f62:	bf 64 00 00 00       	mov    edi,0x64
c0013f67:	89 d8                	mov    eax,ebx
c0013f69:	66 f7 f7             	div    di
c0013f6c:	66 85 d2             	test   dx,dx
c0013f6f:	75 12                	jne    c0013f83 <datetimeToSeconds(datetime_t)+0x8e>
c0013f71:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f77:	bf 90 01 00 00       	mov    edi,0x190
c0013f7c:	99                   	cdq    
c0013f7d:	f7 ff                	idiv   edi
c0013f7f:	85 d2                	test   edx,edx
c0013f81:	75 01                	jne    c0013f84 <datetimeToSeconds(datetime_t)+0x8f>
c0013f83:	41                   	inc    ecx
c0013f84:	66 83 fb 46          	cmp    bx,0x46
c0013f88:	76 45                	jbe    c0013fcf <datetimeToSeconds(datetime_t)+0xda>
c0013f8a:	bb 46 00 00 00       	mov    ebx,0x46
c0013f8f:	bf 64 00 00 00       	mov    edi,0x64
c0013f94:	bd 90 01 00 00       	mov    ebp,0x190
c0013f99:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f9e:	f6 c3 03             	test   bl,0x3
c0013fa1:	75 23                	jne    c0013fc6 <datetimeToSeconds(datetime_t)+0xd1>
c0013fa3:	89 d8                	mov    eax,ebx
c0013fa5:	99                   	cdq    
c0013fa6:	f7 ff                	idiv   edi
c0013fa8:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fad:	85 d2                	test   edx,edx
c0013faf:	75 15                	jne    c0013fc6 <datetimeToSeconds(datetime_t)+0xd1>
c0013fb1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fb7:	99                   	cdq    
c0013fb8:	f7 fd                	idiv   ebp
c0013fba:	83 fa 01             	cmp    edx,0x1
c0013fbd:	19 c0                	sbb    eax,eax
c0013fbf:	f7 d0                	not    eax
c0013fc1:	05 6e 01 00 00       	add    eax,0x16e
c0013fc6:	01 c1                	add    ecx,eax
c0013fc8:	43                   	inc    ebx
c0013fc9:	39 f3                	cmp    ebx,esi
c0013fcb:	7c cc                	jl     c0013f99 <datetimeToSeconds(datetime_t)+0xa4>
c0013fcd:	eb 35                	jmp    c0014004 <datetimeToSeconds(datetime_t)+0x10f>
c0013fcf:	74 33                	je     c0014004 <datetimeToSeconds(datetime_t)+0x10f>
c0013fd1:	b8 45 00 00 00       	mov    eax,0x45
c0013fd6:	89 c2                	mov    edx,eax
c0013fd8:	83 e2 03             	and    edx,0x3
c0013fdb:	39 f0                	cmp    eax,esi
c0013fdd:	7e 0f                	jle    c0013fee <datetimeToSeconds(datetime_t)+0xf9>
c0013fdf:	83 fa 01             	cmp    edx,0x1
c0013fe2:	19 d2                	sbb    edx,edx
c0013fe4:	48                   	dec    eax
c0013fe5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fec:	eb e8                	jmp    c0013fd6 <datetimeToSeconds(datetime_t)+0xe1>
c0013fee:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ff3:	85 d2                	test   edx,edx
c0013ff5:	75 0b                	jne    c0014002 <datetimeToSeconds(datetime_t)+0x10d>
c0013ff7:	66 83 fb 01          	cmp    bx,0x1
c0013ffb:	19 c0                	sbb    eax,eax
c0013ffd:	05 6e 01 00 00       	add    eax,0x16e
c0014002:	29 c1                	sub    ecx,eax
c0014004:	b8 80 51 01 00       	mov    eax,0x15180
c0014009:	f7 e9                	imul   ecx
c001400b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001400f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014013:	83 c4 14             	add    esp,0x14
c0014016:	5b                   	pop    ebx
c0014017:	5e                   	pop    esi
c0014018:	5f                   	pop    edi
c0014019:	5d                   	pop    ebp
c001401a:	c3                   	ret    
c001401b:	90                   	nop

c001401c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001401c:	57                   	push   edi
c001401d:	56                   	push   esi
c001401e:	53                   	push   ebx
c001401f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014023:	8b 06                	mov    eax,DWORD PTR [esi]
c0014025:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014028:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001402c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014030:	e8 c0 fe ff ff       	call   c0013ef5 <datetimeToSeconds(datetime_t)>
c0014035:	59                   	pop    ecx
c0014036:	0f b6 0d 14 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e714
c001403d:	5b                   	pop    ebx
c001403e:	03 0d 18 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e718
c0014044:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001404a:	89 cb                	mov    ebx,ecx
c001404c:	c1 fb 1f             	sar    ebx,0x1f
c001404f:	29 c8                	sub    eax,ecx
c0014051:	19 da                	sbb    edx,ebx
c0014053:	31 c9                	xor    ecx,ecx
c0014055:	80 3d 15 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e715,0x0
c001405c:	74 05                	je     c0014063 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001405e:	b9 08 07 00 00       	mov    ecx,0x708
c0014063:	31 db                	xor    ebx,ebx
c0014065:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014069:	29 c8                	sub    eax,ecx
c001406b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001406f:	19 da                	sbb    edx,ebx
c0014071:	89 f8                	mov    eax,edi
c0014073:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014077:	5b                   	pop    ebx
c0014078:	5e                   	pop    esi
c0014079:	5f                   	pop    edi
c001407a:	ff e0                	jmp    eax

c001407c <secondsToDatetime(unsigned long long)>:
c001407c:	55                   	push   ebp
c001407d:	57                   	push   edi
c001407e:	56                   	push   esi
c001407f:	53                   	push   ebx
c0014080:	83 ec 1c             	sub    esp,0x1c
c0014083:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014087:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001408b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001408f:	6a 00                	push   0x0
c0014091:	68 80 51 01 00       	push   0x15180
c0014096:	55                   	push   ebp
c0014097:	57                   	push   edi
c0014098:	e8 1f 29 01 00       	call   c00269bc <__udivdi3>
c001409d:	83 c4 10             	add    esp,0x10
c00140a0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140aa:	6a 00                	push   0x0
c00140ac:	68 80 51 01 00       	push   0x15180
c00140b1:	55                   	push   ebp
c00140b2:	57                   	push   edi
c00140b3:	bf 10 0e 00 00       	mov    edi,0xe10
c00140b8:	e8 ff 29 01 00       	call   c0026abc <__umoddi3>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	99                   	cdq    
c00140c1:	f7 ff                	idiv   edi
c00140c3:	bf 3c 00 00 00       	mov    edi,0x3c
c00140c8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140cb:	89 d0                	mov    eax,edx
c00140cd:	99                   	cdq    
c00140ce:	f7 ff                	idiv   edi
c00140d0:	85 db                	test   ebx,ebx
c00140d2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140d5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140d8:	79 11                	jns    c00140eb <secondsToDatetime(unsigned long long)+0x6f>
c00140da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140de:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140e4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140e9:	eb 07                	jmp    c00140f2 <secondsToDatetime(unsigned long long)+0x76>
c00140eb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140f0:	89 d8                	mov    eax,ebx
c00140f2:	bf b4 05 00 00       	mov    edi,0x5b4
c00140f7:	99                   	cdq    
c00140f8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140fd:	f7 f9                	idiv   ecx
c00140ff:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014104:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014108:	31 d2                	xor    edx,edx
c001410a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014112:	01 c3                	add    ebx,eax
c0014114:	89 d8                	mov    eax,ebx
c0014116:	f7 f1                	div    ecx
c0014118:	31 d2                	xor    edx,edx
c001411a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001411d:	89 d8                	mov    eax,ebx
c001411f:	f7 f7                	div    edi
c0014121:	31 d2                	xor    edx,edx
c0014123:	29 c1                	sub    ecx,eax
c0014125:	89 d8                	mov    eax,ebx
c0014127:	f7 f5                	div    ebp
c0014129:	bd 6d 01 00 00       	mov    ebp,0x16d
c001412e:	29 c1                	sub    ecx,eax
c0014130:	31 d2                	xor    edx,edx
c0014132:	89 c8                	mov    eax,ecx
c0014134:	f7 f5                	div    ebp
c0014136:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001413b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001413f:	31 d2                	xor    edx,edx
c0014141:	89 c8                	mov    eax,ecx
c0014143:	f7 f5                	div    ebp
c0014145:	31 d2                	xor    edx,edx
c0014147:	01 c3                	add    ebx,eax
c0014149:	89 c8                	mov    eax,ecx
c001414b:	f7 f7                	div    edi
c001414d:	bf 99 00 00 00       	mov    edi,0x99
c0014152:	29 c3                	sub    ebx,eax
c0014154:	31 d2                	xor    edx,edx
c0014156:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001415e:	29 c3                	sub    ebx,eax
c0014160:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014163:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014166:	bb 05 00 00 00       	mov    ebx,0x5
c001416b:	83 c1 02             	add    ecx,0x2
c001416e:	89 c8                	mov    eax,ecx
c0014170:	f7 f7                	div    edi
c0014172:	31 d2                	xor    edx,edx
c0014174:	89 c7                	mov    edi,eax
c0014176:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001417c:	83 c0 02             	add    eax,0x2
c001417f:	f7 f3                	div    ebx
c0014181:	89 eb                	mov    ebx,ebp
c0014183:	29 c3                	sub    ebx,eax
c0014185:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001418b:	88 1e                	mov    BYTE PTR [esi],bl
c001418d:	19 c0                	sbb    eax,eax
c001418f:	31 d2                	xor    edx,edx
c0014191:	83 e0 0c             	and    eax,0xc
c0014194:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014198:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141a4:	83 f9 01             	cmp    ecx,0x1
c00141a7:	0f 96 c2             	setbe  dl
c00141aa:	41                   	inc    ecx
c00141ab:	01 d0                	add    eax,edx
c00141ad:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141b0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141b4:	83 c4 1c             	add    esp,0x1c
c00141b7:	89 f0                	mov    eax,esi
c00141b9:	5b                   	pop    ebx
c00141ba:	5e                   	pop    esi
c00141bb:	5f                   	pop    edi
c00141bc:	5d                   	pop    ebp
c00141bd:	c2 04 00             	ret    0x4

c00141c0 <Clock::timeInDatetimeLocal()>:
c00141c0:	53                   	push   ebx
c00141c1:	83 ec 14             	sub    esp,0x14
c00141c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141cc:	e8 83 fc ff ff       	call   c0013e54 <Clock::timeInSecondsLocal()>
c00141d1:	83 c4 0c             	add    esp,0xc
c00141d4:	52                   	push   edx
c00141d5:	50                   	push   eax
c00141d6:	53                   	push   ebx
c00141d7:	e8 a0 fe ff ff       	call   c001407c <secondsToDatetime(unsigned long long)>
c00141dc:	89 d8                	mov    eax,ebx
c00141de:	83 c4 14             	add    esp,0x14
c00141e1:	5b                   	pop    ebx
c00141e2:	c2 04 00             	ret    0x4
c00141e5:	90                   	nop

c00141e6 <Device::hibernate()>:
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::wake()>:
c00141e8:	c3                   	ret    
c00141e9:	90                   	nop

c00141ea <Device::detect()>:
c00141ea:	c3                   	ret    
c00141eb:	90                   	nop

c00141ec <Device::disableLegacy()>:
c00141ec:	c3                   	ret    
c00141ed:	90                   	nop

c00141ee <Device::powerSaving(PowerSavingLevel)>:
c00141ee:	c3                   	ret    
c00141ef:	90                   	nop

c00141f0 <DriverlessDevice::close(int, int, void*)>:
c00141f0:	31 c0                	xor    eax,eax
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <DriverlessDevice::detect()>:
c00141f4:	c3                   	ret    
c00141f5:	90                   	nop

c00141f6 <DriverlessDevice::open(int, int, void*)>:
c00141f6:	83 ec 18             	sub    esp,0x18
c00141f9:	68 50 ad 02 c0       	push   0xc002ad50
c00141fe:	e8 b0 63 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0014203:	83 c8 ff             	or     eax,0xffffffff
c0014206:	83 c4 1c             	add    esp,0x1c
c0014209:	c3                   	ret    

c001420a <Device::~Device()>:
c001420a:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c001420f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014213:	89 10                	mov    DWORD PTR [eax],edx
c0014215:	90                   	nop
c0014216:	c3                   	ret    
c0014217:	90                   	nop

c0014218 <Device::~Device()>:
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001421f:	e8 e6 ff ff ff       	call   c001420a <Device::~Device()>
c0014224:	83 c4 04             	add    esp,0x4
c0014227:	83 ec 08             	sub    esp,0x8
c001422a:	68 58 01 00 00       	push   0x158
c001422f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014233:	e8 fa eb ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	83 c4 0c             	add    esp,0xc
c001423e:	c3                   	ret    
c001423f:	90                   	nop

c0014240 <Device::findAndLoadDriver()>:
c0014240:	c3                   	ret    
c0014241:	90                   	nop

c0014242 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014242:	57                   	push   edi
c0014243:	b9 09 00 00 00       	mov    ecx,0x9
c0014248:	56                   	push   esi
c0014249:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001424d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014251:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001425b:	81 c7 18 01 00 00    	add    edi,0x118
c0014261:	fc                   	cld    
c0014262:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014264:	5e                   	pop    esi
c0014265:	5f                   	pop    edi
c0014266:	c3                   	ret    
c0014267:	90                   	nop

c0014268 <Device::preOpenACPI(void*, char*, char*)>:
c0014268:	56                   	push   esi
c0014269:	53                   	push   ebx
c001426a:	83 ec 08             	sub    esp,0x8
c001426d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014271:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014275:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001427f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014283:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014289:	6a 1e                	push   0x1e
c001428b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014291:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014295:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001429b:	50                   	push   eax
c001429c:	e8 a3 c4 fe ff       	call   c0000744 <memcpy>
c00142a1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142a9:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142b1:	83 c4 14             	add    esp,0x14
c00142b4:	5b                   	pop    ebx
c00142b5:	5e                   	pop    esi
c00142b6:	e9 89 c4 fe ff       	jmp    c0000744 <memcpy>
c00142bb:	90                   	nop

c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142cc:	75 0b                	jne    c00142d9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00142d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142d7:	eb 1e                	jmp    c00142f7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142d9:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00142de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142f4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142f7:	ff e0                	jmp    eax
c00142f9:	90                   	nop

c00142fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142fe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014303:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001430a:	75 0b                	jne    c0014317 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001430c:	8b 00                	mov    eax,DWORD PTR [eax]
c001430e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014312:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014315:	eb 1e                	jmp    c0014335 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014317:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001431c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014322:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014328:	8b 08                	mov    ecx,DWORD PTR [eax]
c001432a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001432e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014332:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014335:	ff e0                	jmp    eax
c0014337:	90                   	nop

c0014338 <Device::addChild(Device*)>:
c0014338:	53                   	push   ebx
c0014339:	83 ec 08             	sub    esp,0x8
c001433c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014340:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014344:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001434a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014350:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014352:	85 d2                	test   edx,edx
c0014354:	74 04                	je     c001435a <Device::addChild(Device*)+0x22>
c0014356:	89 d3                	mov    ebx,edx
c0014358:	eb f6                	jmp    c0014350 <Device::addChild(Device*)+0x18>
c001435a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001435d:	83 ec 0c             	sub    esp,0xc
c0014360:	6a 08                	push   0x8
c0014362:	e8 d9 b4 ff ff       	call   c000f840 <malloc>
c0014367:	89 03                	mov    DWORD PTR [ebx],eax
c0014369:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001436f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014376:	83 c4 18             	add    esp,0x18
c0014379:	5b                   	pop    ebx
c001437a:	c3                   	ret    
c001437b:	90                   	nop

c001437c <Device::removeAllChildren()>:
c001437c:	56                   	push   esi
c001437d:	53                   	push   ebx
c001437e:	52                   	push   edx
c001437f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014383:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014389:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438c:	74 17                	je     c00143a5 <Device::removeAllChildren()+0x29>
c001438e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014391:	85 c0                	test   eax,eax
c0014393:	74 0c                	je     c00143a1 <Device::removeAllChildren()+0x25>
c0014395:	83 ec 0c             	sub    esp,0xc
c0014398:	8b 10                	mov    edx,DWORD PTR [eax]
c001439a:	50                   	push   eax
c001439b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a3:	eb e4                	jmp    c0014389 <Device::removeAllChildren()+0xd>
c00143a5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143be:	58                   	pop    eax
c00143bf:	5b                   	pop    ebx
c00143c0:	5e                   	pop    esi
c00143c1:	c3                   	ret    

c00143c2 <Device::hibernateAll()>:
c00143c2:	53                   	push   ebx
c00143c3:	83 ec 14             	sub    esp,0x14
c00143c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143cc:	53                   	push   ebx
c00143cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143dc:	74 0f                	je     c00143ed <Device::hibernateAll()+0x2b>
c00143de:	83 ec 0c             	sub    esp,0xc
c00143e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e4:	e8 d9 ff ff ff       	call   c00143c2 <Device::hibernateAll()>
c00143e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143eb:	eb e9                	jmp    c00143d6 <Device::hibernateAll()+0x14>
c00143ed:	83 c4 08             	add    esp,0x8
c00143f0:	5b                   	pop    ebx
c00143f1:	c3                   	ret    

c00143f2 <Device::wakeAll()>:
c00143f2:	53                   	push   ebx
c00143f3:	83 ec 14             	sub    esp,0x14
c00143f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143fc:	53                   	push   ebx
c00143fd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014400:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001440c:	74 0f                	je     c001441d <Device::wakeAll()+0x2b>
c001440e:	83 ec 0c             	sub    esp,0xc
c0014411:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014414:	e8 d9 ff ff ff       	call   c00143f2 <Device::wakeAll()>
c0014419:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001441b:	eb e9                	jmp    c0014406 <Device::wakeAll()+0x14>
c001441d:	83 c4 08             	add    esp,0x8
c0014420:	5b                   	pop    ebx
c0014421:	c3                   	ret    

c0014422 <Device::detectAll()>:
c0014422:	53                   	push   ebx
c0014423:	83 ec 14             	sub    esp,0x14
c0014426:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001442a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442c:	53                   	push   ebx
c001442d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014430:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443c:	74 0f                	je     c001444d <Device::detectAll()+0x2b>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014444:	e8 d9 ff ff ff       	call   c0014422 <Device::detectAll()>
c0014449:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444b:	eb e9                	jmp    c0014436 <Device::detectAll()+0x14>
c001444d:	83 c4 08             	add    esp,0x8
c0014450:	5b                   	pop    ebx
c0014451:	c3                   	ret    

c0014452 <Device::disableLegacyAll()>:
c0014452:	53                   	push   ebx
c0014453:	83 ec 14             	sub    esp,0x14
c0014456:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001445a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001445c:	53                   	push   ebx
c001445d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014460:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014466:	83 c4 10             	add    esp,0x10
c0014469:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001446c:	74 0f                	je     c001447d <Device::disableLegacyAll()+0x2b>
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014474:	e8 d9 ff ff ff       	call   c0014452 <Device::disableLegacyAll()>
c0014479:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001447b:	eb e9                	jmp    c0014466 <Device::disableLegacyAll()+0x14>
c001447d:	83 c4 08             	add    esp,0x8
c0014480:	5b                   	pop    ebx
c0014481:	c3                   	ret    

c0014482 <Device::loadDriversForAll()>:
c0014482:	53                   	push   ebx
c0014483:	83 ec 08             	sub    esp,0x8
c0014486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001448a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014490:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014492:	85 db                	test   ebx,ebx
c0014494:	74 12                	je     c00144a8 <Device::loadDriversForAll()+0x26>
c0014496:	83 ec 0c             	sub    esp,0xc
c0014499:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001449c:	e8 e1 ff ff ff       	call   c0014482 <Device::loadDriversForAll()>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	89 d8                	mov    eax,ebx
c00144a6:	eb e8                	jmp    c0014490 <Device::loadDriversForAll()+0xe>
c00144a8:	83 c4 08             	add    esp,0x8
c00144ab:	5b                   	pop    ebx
c00144ac:	c3                   	ret    
c00144ad:	90                   	nop

c00144ae <Device::closeAll()>:
c00144ae:	53                   	push   ebx
c00144af:	83 ec 08             	sub    esp,0x8
c00144b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b8:	6a 00                	push   0x0
c00144ba:	6a 00                	push   0x0
c00144bc:	6a 00                	push   0x0
c00144be:	53                   	push   ebx
c00144bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ce:	74 0f                	je     c00144df <Device::closeAll()+0x31>
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d6:	e8 d3 ff ff ff       	call   c00144ae <Device::closeAll()>
c00144db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144dd:	eb e9                	jmp    c00144c8 <Device::closeAll()+0x1a>
c00144df:	83 c4 08             	add    esp,0x8
c00144e2:	5b                   	pop    ebx
c00144e3:	c3                   	ret    

c00144e4 <Device::powerSavingAll(PowerSavingLevel)>:
c00144e4:	56                   	push   esi
c00144e5:	53                   	push   ebx
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144ed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f3:	56                   	push   esi
c00144f4:	53                   	push   ebx
c00144f5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fe:	83 c4 10             	add    esp,0x10
c0014501:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014504:	74 0f                	je     c0014515 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014506:	52                   	push   edx
c0014507:	52                   	push   edx
c0014508:	56                   	push   esi
c0014509:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450c:	e8 d3 ff ff ff       	call   c00144e4 <Device::powerSavingAll(PowerSavingLevel)>
c0014511:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014513:	eb e9                	jmp    c00144fe <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014515:	58                   	pop    eax
c0014516:	5b                   	pop    ebx
c0014517:	5e                   	pop    esi
c0014518:	c3                   	ret    
c0014519:	90                   	nop

c001451a <Device::setName(char const*)>:
c001451a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014522:	e9 0d c3 fe ff       	jmp    c0000834 <strcpy>
c0014527:	90                   	nop

c0014528 <Device::Device(char const*)>:
c0014528:	83 ec 1c             	sub    esp,0x1c
c001452b:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c0014530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014534:	89 10                	mov    DWORD PTR [eax],edx
c0014536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014548:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014556:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014564:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001456e:	83 ec 08             	sub    esp,0x8
c0014571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014579:	e8 9c ff ff ff       	call   c001451a <Device::setName(char const*)>
c001457e:	83 c4 10             	add    esp,0x10
c0014581:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014589:	83 ec 0c             	sub    esp,0xc
c001458c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014590:	e8 ab b2 ff ff       	call   c000f840 <malloc>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001459e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145a9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145df:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ea:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014606:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014614:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001461e:	90                   	nop
c001461f:	83 c4 1c             	add    esp,0x1c
c0014622:	c3                   	ret    
c0014623:	90                   	nop

c0014624 <Device::getName()>:
c0014624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014628:	05 d0 00 00 00       	add    eax,0xd0
c001462d:	c3                   	ret    

c001462e <DriverlessDevice::DriverlessDevice(char const*)>:
c001462e:	83 ec 0c             	sub    esp,0xc
c0014631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014635:	83 ec 08             	sub    esp,0x8
c0014638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001463c:	50                   	push   eax
c001463d:	e8 e6 fe ff ff       	call   c0014528 <Device::Device(char const*)>
c0014642:	83 c4 10             	add    esp,0x10
c0014645:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c001464a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464e:	89 10                	mov    DWORD PTR [eax],edx
c0014650:	90                   	nop
c0014651:	83 c4 0c             	add    esp,0xc
c0014654:	c3                   	ret    
c0014655:	90                   	nop

c0014656 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014656:	57                   	push   edi
c0014657:	56                   	push   esi
c0014658:	53                   	push   ebx
c0014659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001465d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014661:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014665:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001466b:	75 0c                	jne    c0014679 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001466d:	52                   	push   edx
c001466e:	52                   	push   edx
c001466f:	53                   	push   ebx
c0014670:	56                   	push   esi
c0014671:	e8 84 42 01 00       	call   c00288fa <LinkedList<Device>::addElement(Device*)>
c0014676:	83 c4 10             	add    esp,0x10
c0014679:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001467f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014682:	74 12                	je     c0014696 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014684:	50                   	push   eax
c0014685:	57                   	push   edi
c0014686:	56                   	push   esi
c0014687:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001468a:	e8 c7 ff ff ff       	call   c0014656 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001468f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	eb e9                	jmp    c001467f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014696:	5b                   	pop    ebx
c0014697:	5e                   	pop    esi
c0014698:	5f                   	pop    edi
c0014699:	c3                   	ret    

c001469a <getDevicesOfType(DeviceType)>:
c001469a:	53                   	push   ebx
c001469b:	83 ec 14             	sub    esp,0x14
c001469e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146a2:	53                   	push   ebx
c00146a3:	e8 2e 43 01 00       	call   c00289d6 <LinkedList<Device>::LinkedList()>
c00146a8:	83 c4 0c             	add    esp,0xc
c00146ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146af:	53                   	push   ebx
c00146b0:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c00146b6:	e8 9b ff ff ff       	call   c0014656 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146bb:	89 d8                	mov    eax,ebx
c00146bd:	83 c4 18             	add    esp,0x18
c00146c0:	5b                   	pop    ebx
c00146c1:	c2 04 00             	ret    0x4

c00146c4 <HardDiskController::HardDiskController(char const*)>:
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cb:	83 ec 08             	sub    esp,0x8
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	50                   	push   eax
c00146d3:	e8 50 fe ff ff       	call   c0014528 <Device::Device(char const*)>
c00146d8:	83 c4 10             	add    esp,0x10
c00146db:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00146e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e4:	89 10                	mov    DWORD PTR [eax],edx
c00146e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ea:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146f4:	90                   	nop
c00146f5:	83 c4 0c             	add    esp,0xc
c00146f8:	c3                   	ret    
c00146f9:	90                   	nop

c00146fa <HardDiskController::~HardDiskController()>:
c00146fa:	83 ec 0c             	sub    esp,0xc
c00146fd:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c0014702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014706:	89 10                	mov    DWORD PTR [eax],edx
c0014708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	50                   	push   eax
c0014710:	e8 f5 fa ff ff       	call   c001420a <Device::~Device()>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	90                   	nop
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	c3                   	ret    
c001471d:	90                   	nop

c001471e <HardDiskController::~HardDiskController()>:
c001471e:	83 ec 0c             	sub    esp,0xc
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014728:	e8 cd ff ff ff       	call   c00146fa <HardDiskController::~HardDiskController()>
c001472d:	83 c4 10             	add    esp,0x10
c0014730:	83 ec 08             	sub    esp,0x8
c0014733:	68 58 01 00 00       	push   0x158
c0014738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473c:	e8 f1 e6 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	83 c4 0c             	add    esp,0xc
c0014747:	c3                   	ret    

c0014748 <PhysicalDisk::eject()>:
c0014748:	83 ec 18             	sub    esp,0x18
c001474b:	68 f4 ad 02 c0       	push   0xc002adf4
c0014750:	e8 bd e7 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014755:	83 c8 ff             	or     eax,0xffffffff
c0014758:	83 c4 1c             	add    esp,0x1c
c001475b:	c3                   	ret    

c001475c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001475c:	83 ec 0c             	sub    esp,0xc
c001475f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014763:	83 ec 08             	sub    esp,0x8
c0014766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476a:	50                   	push   eax
c001476b:	e8 b8 fd ff ff       	call   c0014528 <Device::Device(char const*)>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477c:	89 10                	mov    DWORD PTR [eax],edx
c001477e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014782:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014798:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147be:	90                   	nop
c00147bf:	83 c4 0c             	add    esp,0xc
c00147c2:	c3                   	ret    
c00147c3:	90                   	nop

c00147c4 <PhysicalDisk::startCache()>:
c00147c4:	56                   	push   esi
c00147c5:	53                   	push   ebx
c00147c6:	83 ec 10             	sub    esp,0x10
c00147c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147cd:	6a 44                	push   0x44
c00147cf:	e8 6c b0 ff ff       	call   c000f840 <malloc>
c00147d4:	89 c6                	mov    esi,eax
c00147d6:	58                   	pop    eax
c00147d7:	5a                   	pop    edx
c00147d8:	53                   	push   ebx
c00147d9:	56                   	push   esi
c00147da:	e8 29 27 00 00       	call   c0016f08 <VCache::VCache(PhysicalDisk*)>
c00147df:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147e5:	83 c4 14             	add    esp,0x14
c00147e8:	5b                   	pop    ebx
c00147e9:	5e                   	pop    esi
c00147ea:	c3                   	ret    
c00147eb:	90                   	nop

c00147ec <PhysicalDisk::~PhysicalDisk()>:
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c00147f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f8:	89 10                	mov    DWORD PTR [eax],edx
c00147fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	50                   	push   eax
c0014802:	e8 03 fa ff ff       	call   c001420a <Device::~Device()>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	90                   	nop
c001480b:	83 c4 0c             	add    esp,0xc
c001480e:	c3                   	ret    
c001480f:	90                   	nop

c0014810 <PhysicalDisk::~PhysicalDisk()>:
c0014810:	83 ec 0c             	sub    esp,0xc
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481a:	e8 cd ff ff ff       	call   c00147ec <PhysicalDisk::~PhysicalDisk()>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	83 ec 08             	sub    esp,0x8
c0014825:	68 6c 01 00 00       	push   0x16c
c001482a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482e:	e8 ff e5 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0014833:	83 c4 10             	add    esp,0x10
c0014836:	83 c4 0c             	add    esp,0xc
c0014839:	c3                   	ret    

c001483a <FPU::FPU(char const*)>:
c001483a:	83 ec 0c             	sub    esp,0xc
c001483d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014841:	83 ec 08             	sub    esp,0x8
c0014844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014848:	50                   	push   eax
c0014849:	e8 da fc ff ff       	call   c0014528 <Device::Device(char const*)>
c001484e:	83 c4 10             	add    esp,0x10
c0014851:	ba 68 ae 02 c0       	mov    edx,0xc002ae68
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	89 10                	mov    DWORD PTR [eax],edx
c001485c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014860:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001486a:	90                   	nop
c001486b:	83 c4 0c             	add    esp,0xc
c001486e:	c3                   	ret    
c001486f:	90                   	nop

c0014870 <FPU::~FPU()>:
c0014870:	83 ec 0c             	sub    esp,0xc
c0014873:	ba 68 ae 02 c0       	mov    edx,0xc002ae68
c0014878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487c:	89 10                	mov    DWORD PTR [eax],edx
c001487e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014882:	83 ec 0c             	sub    esp,0xc
c0014885:	50                   	push   eax
c0014886:	e8 7f f9 ff ff       	call   c001420a <Device::~Device()>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	90                   	nop
c001488f:	83 c4 0c             	add    esp,0xc
c0014892:	c3                   	ret    
c0014893:	90                   	nop

c0014894 <FPU::~FPU()>:
c0014894:	83 ec 0c             	sub    esp,0xc
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489e:	e8 cd ff ff ff       	call   c0014870 <FPU::~FPU()>
c00148a3:	83 c4 10             	add    esp,0x10
c00148a6:	83 ec 08             	sub    esp,0x8
c00148a9:	68 58 01 00 00       	push   0x158
c00148ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b2:	e8 7b e5 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00148b7:	83 c4 10             	add    esp,0x10
c00148ba:	83 c4 0c             	add    esp,0xc
c00148bd:	c3                   	ret    

c00148be <setupFPU()>:
c00148be:	53                   	push   ebx
c00148bf:	83 ec 08             	sub    esp,0x8
c00148c2:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c00148c8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148cf:	74 19                	je     c00148ea <setupFPU()+0x2c>
c00148d1:	83 ec 0c             	sub    esp,0xc
c00148d4:	68 58 01 00 00       	push   0x158
c00148d9:	e8 62 af ff ff       	call   c000f840 <malloc>
c00148de:	89 c3                	mov    ebx,eax
c00148e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e3:	e8 56 0c 01 00       	call   c002553e <AVX::AVX()>
c00148e8:	eb 5b                	jmp    c0014945 <setupFPU()+0x87>
c00148ea:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148f0:	84 c0                	test   al,al
c00148f2:	79 19                	jns    c001490d <setupFPU()+0x4f>
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	68 58 01 00 00       	push   0x158
c00148fc:	e8 3f af ff ff       	call   c000f840 <malloc>
c0014901:	89 c3                	mov    ebx,eax
c0014903:	89 04 24             	mov    DWORD PTR [esp],eax
c0014906:	e8 59 0d 01 00       	call   c0025664 <SSE::SSE()>
c001490b:	eb 38                	jmp    c0014945 <setupFPU()+0x87>
c001490d:	a8 20                	test   al,0x20
c001490f:	74 19                	je     c001492a <setupFPU()+0x6c>
c0014911:	83 ec 0c             	sub    esp,0xc
c0014914:	68 58 01 00 00       	push   0x158
c0014919:	e8 22 af ff ff       	call   c000f840 <malloc>
c001491e:	89 c3                	mov    ebx,eax
c0014920:	89 04 24             	mov    DWORD PTR [esp],eax
c0014923:	e8 a6 0c 01 00       	call   c00255ce <MMX::MMX()>
c0014928:	eb 1b                	jmp    c0014945 <setupFPU()+0x87>
c001492a:	a8 10                	test   al,0x10
c001492c:	74 1c                	je     c001494a <setupFPU()+0x8c>
c001492e:	83 ec 0c             	sub    esp,0xc
c0014931:	68 58 01 00 00       	push   0x158
c0014936:	e8 05 af ff ff       	call   c000f840 <malloc>
c001493b:	89 c3                	mov    ebx,eax
c001493d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014940:	e8 ad 0d 01 00       	call   c00256f2 <x87::x87()>
c0014945:	83 c4 10             	add    esp,0x10
c0014948:	eb 24                	jmp    c001496e <setupFPU()+0xb0>
c001494a:	83 e0 ef             	and    eax,0xffffffef
c001494d:	83 ec 0c             	sub    esp,0xc
c0014950:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014956:	68 54 ae 02 c0       	push   0xc002ae54
c001495b:	e8 b2 e5 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014960:	0f 20 c0             	mov    eax,cr0
c0014963:	83 c8 04             	or     eax,0x4
c0014966:	0f 22 c0             	mov    cr0,eax
c0014969:	31 db                	xor    ebx,ebx
c001496b:	83 c4 10             	add    esp,0x10
c001496e:	89 d8                	mov    eax,ebx
c0014970:	83 c4 08             	add    esp,0x8
c0014973:	5b                   	pop    ebx
c0014974:	c3                   	ret    
c0014975:	90                   	nop

c0014976 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014976:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001497a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001497e:	c1 e0 04             	shl    eax,0x4
c0014981:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014985:	8d 50 10             	lea    edx,[eax+0x10]
c0014988:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001498e:	74 08                	je     c0014998 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014990:	83 c0 04             	add    eax,0x4
c0014993:	39 d0                	cmp    eax,edx
c0014995:	75 f1                	jne    c0014988 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014997:	c3                   	ret    
c0014998:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149a2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149ac:	eb e2                	jmp    c0014990 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149ae <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149ae:	57                   	push   edi
c00149af:	31 c0                	xor    eax,eax
c00149b1:	56                   	push   esi
c00149b2:	53                   	push   ebx
c00149b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149bf:	89 da                	mov    edx,ebx
c00149c1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149c5:	c1 e2 04             	shl    edx,0x4
c00149c8:	01 ca                	add    edx,ecx
c00149ca:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149d2:	74 16                	je     c00149ea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149d4:	40                   	inc    eax
c00149d5:	83 f8 04             	cmp    eax,0x4
c00149d8:	75 f0                	jne    c00149ca <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149da:	c7 44 24 10 98 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae98
c00149e2:	5b                   	pop    ebx
c00149e3:	5e                   	pop    esi
c00149e4:	5f                   	pop    edi
c00149e5:	e9 c9 5b 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>
c00149ea:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149ed:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149f0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149f6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149fc:	5b                   	pop    ebx
c00149fd:	5e                   	pop    esi
c00149fe:	5f                   	pop    edi
c00149ff:	c3                   	ret    

c0014a00 <doubleFault(regs*, void*)>:
c0014a00:	55                   	push   ebp
c0014a01:	89 e5                	mov    ebp,esp
c0014a03:	83 ec 08             	sub    esp,0x8
c0014a06:	83 ec 0c             	sub    esp,0xc
c0014a09:	68 d3 ae 02 c0       	push   0xc002aed3
c0014a0e:	e8 a0 5b 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0014a13:	83 c4 10             	add    esp,0x10
c0014a16:	90                   	nop
c0014a17:	c9                   	leave  
c0014a18:	c3                   	ret    
c0014a19:	90                   	nop

c0014a1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a1a:	56                   	push   esi
c0014a1b:	53                   	push   ebx
c0014a1c:	50                   	push   eax
c0014a1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a21:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a25:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a2a:	75 35                	jne    c0014a61 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a2c:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a2f:	31 d2                	xor    edx,edx
c0014a31:	89 c1                	mov    ecx,eax
c0014a33:	c1 e1 04             	shl    ecx,0x4
c0014a36:	01 f1                	add    ecx,esi
c0014a38:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a40:	74 3e                	je     c0014a80 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a42:	42                   	inc    edx
c0014a43:	83 fa 04             	cmp    edx,0x4
c0014a46:	75 f0                	jne    c0014a38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a48:	83 ec 0c             	sub    esp,0xc
c0014a4b:	68 18 af 02 c0       	push   0xc002af18
c0014a50:	e8 5e 5b 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a5d:	5a                   	pop    edx
c0014a5e:	5b                   	pop    ebx
c0014a5f:	5e                   	pop    esi
c0014a60:	c3                   	ret    
c0014a61:	83 ec 0c             	sub    esp,0xc
c0014a64:	56                   	push   esi
c0014a65:	e8 ba fb ff ff       	call   c0014624 <Device::getName()>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a70:	75 ba                	jne    c0014a2c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a72:	83 fb 0f             	cmp    ebx,0xf
c0014a75:	7f 29                	jg     c0014aa0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a77:	0f b6 9b e0 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2820]
c0014a7e:	eb ac                	jmp    c0014a2c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a80:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a87:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a8a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a94:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a9a:	89 d8                	mov    eax,ebx
c0014a9c:	5a                   	pop    edx
c0014a9d:	5b                   	pop    ebx
c0014a9e:	5e                   	pop    esi
c0014a9f:	c3                   	ret    
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	68 e0 ae 02 c0       	push   0xc002aee0
c0014aa8:	e8 06 5b 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0014aad:	83 c4 10             	add    esp,0x10
c0014ab0:	e9 77 ff ff ff       	jmp    c0014a2c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab5:	90                   	nop

c0014ab6 <InterruptController::clearAllHandlers(int, bool)>:
c0014ab6:	56                   	push   esi
c0014ab7:	53                   	push   ebx
c0014ab8:	52                   	push   edx
c0014ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014abd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ac1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ac6:	75 61                	jne    c0014b29 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ac8:	8d 46 20             	lea    eax,[esi+0x20]
c0014acb:	c1 e6 04             	shl    esi,0x4
c0014ace:	c1 e0 04             	shl    eax,0x4
c0014ad1:	01 de                	add    esi,ebx
c0014ad3:	01 d8                	add    eax,ebx
c0014ad5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014adf:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ae9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014af3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014afd:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b07:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b11:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b1b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b25:	58                   	pop    eax
c0014b26:	5b                   	pop    ebx
c0014b27:	5e                   	pop    esi
c0014b28:	c3                   	ret    
c0014b29:	83 ec 0c             	sub    esp,0xc
c0014b2c:	53                   	push   ebx
c0014b2d:	e8 f2 fa ff ff       	call   c0014624 <Device::getName()>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b38:	75 8e                	jne    c0014ac8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b3a:	83 fe 0f             	cmp    esi,0xf
c0014b3d:	7f 09                	jg     c0014b48 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b3f:	0f b6 b6 e0 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2820]
c0014b46:	eb 80                	jmp    c0014ac8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b48:	83 ec 0c             	sub    esp,0xc
c0014b4b:	68 54 af 02 c0       	push   0xc002af54
c0014b50:	e8 5e 5a 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0014b55:	83 c4 10             	add    esp,0x10
c0014b58:	e9 6b ff ff ff       	jmp    c0014ac8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b5d:	90                   	nop

c0014b5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b5e:	56                   	push   esi
c0014b5f:	53                   	push   ebx
c0014b60:	52                   	push   edx
c0014b61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b69:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b6e:	75 3a                	jne    c0014baa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b74:	8d 50 20             	lea    edx,[eax+0x20]
c0014b77:	c1 e2 04             	shl    edx,0x4
c0014b7a:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b7d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b81:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b87:	74 0b                	je     c0014b94 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b89:	83 c0 04             	add    eax,0x4
c0014b8c:	39 d0                	cmp    eax,edx
c0014b8e:	75 f1                	jne    c0014b81 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b90:	58                   	pop    eax
c0014b91:	5b                   	pop    ebx
c0014b92:	5e                   	pop    esi
c0014b93:	c3                   	ret    
c0014b94:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b9e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ba8:	eb df                	jmp    c0014b89 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014baa:	83 ec 0c             	sub    esp,0xc
c0014bad:	56                   	push   esi
c0014bae:	e8 71 fa ff ff       	call   c0014624 <Device::getName()>
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bb9:	75 b5                	jne    c0014b70 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bbb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bc0:	7f 11                	jg     c0014bd3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc6:	0f b6 80 e0 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2820]
c0014bcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bd1:	eb 9d                	jmp    c0014b70 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bd3:	83 ec 0c             	sub    esp,0xc
c0014bd6:	68 54 af 02 c0       	push   0xc002af54
c0014bdb:	e8 d3 59 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	eb 8b                	jmp    c0014b70 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014be5 <nmiHandler(regs*, void*)>:
c0014be5:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0014bea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bee:	e9 99 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014bf3 <int_handler>:
c0014bf3:	55                   	push   ebp
c0014bf4:	57                   	push   edi
c0014bf5:	56                   	push   esi
c0014bf6:	53                   	push   ebx
c0014bf7:	83 ec 0c             	sub    esp,0xc
c0014bfa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bfe:	80 3d e4 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310e4,0x0
c0014c05:	74 0b                	je     c0014c12 <int_handler+0x1f>
c0014c07:	fa                   	cli    
c0014c08:	f4                   	hlt    
c0014c09:	80 3d e4 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310e4,0x0
c0014c10:	75 f5                	jne    c0014c07 <int_handler+0x14>
c0014c12:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0014c17:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c20:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c26:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c29:	83 f8 17             	cmp    eax,0x17
c0014c2c:	77 13                	ja     c0014c41 <int_handler+0x4e>
c0014c2e:	83 ec 08             	sub    esp,0x8
c0014c31:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c33:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c36:	0f b6 c0             	movzx  eax,al
c0014c39:	50                   	push   eax
c0014c3a:	57                   	push   edi
c0014c3b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	83 c3 15             	add    ebx,0x15
c0014c44:	c1 e3 04             	shl    ebx,0x4
c0014c47:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c4b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c52:	31 db                	xor    ebx,ebx
c0014c54:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c58:	85 c0                	test   eax,eax
c0014c5a:	74 13                	je     c0014c6f <int_handler+0x7c>
c0014c5c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c5f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c63:	74 1c                	je     c0014c81 <int_handler+0x8e>
c0014c65:	83 ec 08             	sub    esp,0x8
c0014c68:	52                   	push   edx
c0014c69:	56                   	push   esi
c0014c6a:	ff d0                	call   eax
c0014c6c:	83 c4 10             	add    esp,0x10
c0014c6f:	43                   	inc    ebx
c0014c70:	83 fb 04             	cmp    ebx,0x4
c0014c73:	75 df                	jne    c0014c54 <int_handler+0x61>
c0014c75:	83 c4 0c             	add    esp,0xc
c0014c78:	31 c0                	xor    eax,eax
c0014c7a:	5b                   	pop    ebx
c0014c7b:	31 d2                	xor    edx,edx
c0014c7d:	5e                   	pop    esi
c0014c7e:	5f                   	pop    edi
c0014c7f:	5d                   	pop    ebp
c0014c80:	c3                   	ret    
c0014c81:	83 ec 08             	sub    esp,0x8
c0014c84:	52                   	push   edx
c0014c85:	56                   	push   esi
c0014c86:	ff d0                	call   eax
c0014c88:	83 c4 10             	add    esp,0x10
c0014c8b:	83 c4 0c             	add    esp,0xc
c0014c8e:	5b                   	pop    ebx
c0014c8f:	5e                   	pop    esi
c0014c90:	5f                   	pop    edi
c0014c91:	5d                   	pop    ebp
c0014c92:	c3                   	ret    
c0014c93:	90                   	nop

c0014c94 <InterruptController::InterruptController(char const*)>:
c0014c94:	83 ec 1c             	sub    esp,0x1c
c0014c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9b:	83 ec 08             	sub    esp,0x8
c0014c9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ca2:	50                   	push   eax
c0014ca3:	e8 80 f8 ff ff       	call   c0014528 <Device::Device(char const*)>
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0014cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb4:	89 10                	mov    DWORD PTR [eax],edx
c0014cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cba:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cc4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ccc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cd4:	7f 5e                	jg     c0014d34 <InterruptController::InterruptController(char const*)+0xa0>
c0014cd6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cde:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ce3:	7f 49                	jg     c0014d2e <InterruptController::InterruptController(char const*)+0x9a>
c0014ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ced:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cf8:	01 ca                	add    edx,ecx
c0014cfa:	83 c2 54             	add    edx,0x54
c0014cfd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d0d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d18:	01 ca                	add    edx,ecx
c0014d1a:	81 c2 54 04 00 00    	add    edx,0x454
c0014d20:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d28:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d2c:	eb b0                	jmp    c0014cde <InterruptController::InterruptController(char const*)+0x4a>
c0014d2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d32:	eb 98                	jmp    c0014ccc <InterruptController::InterruptController(char const*)+0x38>
c0014d34:	90                   	nop
c0014d35:	83 c4 1c             	add    esp,0x1c
c0014d38:	c3                   	ret    
c0014d39:	90                   	nop

c0014d3a <InterruptController::~InterruptController()>:
c0014d3a:	83 ec 0c             	sub    esp,0xc
c0014d3d:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0014d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d46:	89 10                	mov    DWORD PTR [eax],edx
c0014d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d4c:	83 ec 0c             	sub    esp,0xc
c0014d4f:	50                   	push   eax
c0014d50:	e8 b5 f4 ff ff       	call   c001420a <Device::~Device()>
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	90                   	nop
c0014d59:	83 c4 0c             	add    esp,0xc
c0014d5c:	c3                   	ret    
c0014d5d:	90                   	nop

c0014d5e <InterruptController::~InterruptController()>:
c0014d5e:	83 ec 0c             	sub    esp,0xc
c0014d61:	83 ec 0c             	sub    esp,0xc
c0014d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d68:	e8 cd ff ff ff       	call   c0014d3a <InterruptController::~InterruptController()>
c0014d6d:	83 c4 10             	add    esp,0x10
c0014d70:	83 ec 08             	sub    esp,0x8
c0014d73:	68 58 21 00 00       	push   0x2158
c0014d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d7c:	e8 b1 e0 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0014d81:	83 c4 10             	add    esp,0x10
c0014d84:	83 c4 0c             	add    esp,0xc
c0014d87:	c3                   	ret    

c0014d88 <displayDebugInfo(regs*)>:
c0014d88:	55                   	push   ebp
c0014d89:	57                   	push   edi
c0014d8a:	56                   	push   esi
c0014d8b:	53                   	push   ebx
c0014d8c:	83 ec 24             	sub    esp,0x24
c0014d8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d93:	0f 20 c2             	mov    edx,cr0
c0014d96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d9a:	0f 20 d7             	mov    edi,cr2
c0014d9d:	0f 20 de             	mov    esi,cr3
c0014da0:	0f 20 e5             	mov    ebp,cr4
c0014da3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014da6:	68 8e af 02 c0       	push   0xc002af8e
c0014dab:	e8 62 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014db0:	59                   	pop    ecx
c0014db1:	58                   	pop    eax
c0014db2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014db5:	68 99 af 02 c0       	push   0xc002af99
c0014dba:	e8 53 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014dbf:	58                   	pop    eax
c0014dc0:	5a                   	pop    edx
c0014dc1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dc4:	68 a4 af 02 c0       	push   0xc002afa4
c0014dc9:	e8 44 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014dce:	59                   	pop    ecx
c0014dcf:	58                   	pop    eax
c0014dd0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dd3:	68 af af 02 c0       	push   0xc002afaf
c0014dd8:	e8 35 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014ddd:	58                   	pop    eax
c0014dde:	5a                   	pop    edx
c0014ddf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014de2:	68 ba af 02 c0       	push   0xc002afba
c0014de7:	e8 26 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014dec:	59                   	pop    ecx
c0014ded:	58                   	pop    eax
c0014dee:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014df1:	68 c5 af 02 c0       	push   0xc002afc5
c0014df6:	e8 17 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014dfb:	58                   	pop    eax
c0014dfc:	5a                   	pop    edx
c0014dfd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e00:	68 d0 af 02 c0       	push   0xc002afd0
c0014e05:	e8 08 e1 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e0a:	59                   	pop    ecx
c0014e0b:	58                   	pop    eax
c0014e0c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e0f:	68 db af 02 c0       	push   0xc002afdb
c0014e14:	e8 f9 e0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e19:	58                   	pop    eax
c0014e1a:	5a                   	pop    edx
c0014e1b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e1e:	68 e6 af 02 c0       	push   0xc002afe6
c0014e23:	e8 ea e0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e28:	59                   	pop    ecx
c0014e29:	58                   	pop    eax
c0014e2a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e2d:	68 f5 af 02 c0       	push   0xc002aff5
c0014e32:	e8 db e0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e37:	58                   	pop    eax
c0014e38:	5a                   	pop    edx
c0014e39:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e3c:	68 00 b0 02 c0       	push   0xc002b000
c0014e41:	e8 cc e0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e46:	59                   	pop    ecx
c0014e47:	58                   	pop    eax
c0014e48:	57                   	push   edi
c0014e49:	68 0b b0 02 c0       	push   0xc002b00b
c0014e4e:	e8 bf e0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e53:	58                   	pop    eax
c0014e54:	5a                   	pop    edx
c0014e55:	56                   	push   esi
c0014e56:	68 16 b0 02 c0       	push   0xc002b016
c0014e5b:	e8 b2 e0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0014e60:	59                   	pop    ecx
c0014e61:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014e66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6c:	e8 16 bf ff ff       	call   c0010d87 <setActiveTerminal(VgaText*)>
c0014e71:	58                   	pop    eax
c0014e72:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e75:	5a                   	pop    edx
c0014e76:	c1 e0 05             	shl    eax,0x5
c0014e79:	05 40 d5 02 c0       	add    eax,0xc002d540
c0014e7e:	50                   	push   eax
c0014e7f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014e84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8a:	e8 17 c3 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014e8f:	59                   	pop    ecx
c0014e90:	58                   	pop    eax
c0014e91:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014e96:	68 21 b0 02 c0       	push   0xc002b021
c0014e9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea1:	e8 00 c3 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014ea6:	58                   	pop    eax
c0014ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eac:	5a                   	pop    edx
c0014ead:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eb0:	83 c0 0c             	add    eax,0xc
c0014eb3:	50                   	push   eax
c0014eb4:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014eb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebf:	e8 e2 c2 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014ec4:	59                   	pop    ecx
c0014ec5:	58                   	pop    eax
c0014ec6:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014ecb:	68 2a b0 02 c0       	push   0xc002b02a
c0014ed0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed6:	e8 cb c2 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014edb:	58                   	pop    eax
c0014edc:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014ee1:	5a                   	pop    edx
c0014ee2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ee5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eeb:	e8 dc c2 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014ef0:	59                   	pop    ecx
c0014ef1:	58                   	pop    eax
c0014ef2:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014ef7:	68 32 b0 02 c0       	push   0xc002b032
c0014efc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f02:	e8 9f c2 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014f07:	58                   	pop    eax
c0014f08:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f0d:	5a                   	pop    edx
c0014f0e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f17:	e8 b0 c2 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014f1c:	59                   	pop    ecx
c0014f1d:	58                   	pop    eax
c0014f1e:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f23:	68 3a b0 02 c0       	push   0xc002b03a
c0014f28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2e:	e8 73 c2 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014f33:	58                   	pop    eax
c0014f34:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f39:	5a                   	pop    edx
c0014f3a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f43:	e8 84 c2 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014f48:	59                   	pop    ecx
c0014f49:	58                   	pop    eax
c0014f4a:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f4f:	68 42 b0 02 c0       	push   0xc002b042
c0014f54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5a:	e8 47 c2 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014f5f:	58                   	pop    eax
c0014f60:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f65:	5a                   	pop    edx
c0014f66:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6f:	e8 58 c2 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014f74:	59                   	pop    ecx
c0014f75:	58                   	pop    eax
c0014f76:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f7b:	68 4a b0 02 c0       	push   0xc002b04a
c0014f80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f86:	e8 1b c2 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014f8b:	58                   	pop    eax
c0014f8c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f91:	5a                   	pop    edx
c0014f92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9b:	e8 2c c2 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014fa0:	59                   	pop    ecx
c0014fa1:	58                   	pop    eax
c0014fa2:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014fa7:	68 52 b0 02 c0       	push   0xc002b052
c0014fac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb2:	e8 ef c1 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014fb7:	58                   	pop    eax
c0014fb8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014fbd:	5a                   	pop    edx
c0014fbe:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fc1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc7:	e8 00 c2 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014fcc:	59                   	pop    ecx
c0014fcd:	58                   	pop    eax
c0014fce:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014fd3:	68 5a b0 02 c0       	push   0xc002b05a
c0014fd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fde:	e8 c3 c1 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0014fe3:	58                   	pop    eax
c0014fe4:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014fe9:	5a                   	pop    edx
c0014fea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fee:	52                   	push   edx
c0014fef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff5:	e8 d2 c1 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0014ffa:	59                   	pop    ecx
c0014ffb:	58                   	pop    eax
c0014ffc:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015001:	68 63 b0 02 c0       	push   0xc002b063
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 95 c1 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0015011:	58                   	pop    eax
c0015012:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015017:	5a                   	pop    edx
c0015018:	57                   	push   edi
c0015019:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501f:	e8 a8 c1 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0015024:	59                   	pop    ecx
c0015025:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001502a:	5f                   	pop    edi
c001502b:	68 6b b0 02 c0       	push   0xc002b06b
c0015030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015036:	e8 6b c1 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001503b:	58                   	pop    eax
c001503c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015041:	5a                   	pop    edx
c0015042:	56                   	push   esi
c0015043:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015049:	e8 7e c1 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001504e:	59                   	pop    ecx
c001504f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015054:	5e                   	pop    esi
c0015055:	68 73 b0 02 c0       	push   0xc002b073
c001505a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015060:	e8 41 c1 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0015065:	5f                   	pop    edi
c0015066:	58                   	pop    eax
c0015067:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001506c:	55                   	push   ebp
c001506d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015073:	e8 54 c1 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0015078:	58                   	pop    eax
c0015079:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001507e:	5a                   	pop    edx
c001507f:	68 7b b0 02 c0       	push   0xc002b07b
c0015084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508a:	e8 17 c1 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001508f:	0f 21 c0             	mov    eax,db0
c0015092:	59                   	pop    ecx
c0015093:	5e                   	pop    esi
c0015094:	50                   	push   eax
c0015095:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001509a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a0:	e8 27 c1 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c00150a5:	5f                   	pop    edi
c00150a6:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150ab:	5d                   	pop    ebp
c00150ac:	68 84 b0 02 c0       	push   0xc002b084
c00150b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b7:	e8 ea c0 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c00150bc:	0f 21 c8             	mov    eax,db1
c00150bf:	5a                   	pop    edx
c00150c0:	59                   	pop    ecx
c00150c1:	50                   	push   eax
c00150c2:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cd:	e8 fa c0 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c00150d2:	5e                   	pop    esi
c00150d3:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150d8:	5f                   	pop    edi
c00150d9:	68 8c b0 02 c0       	push   0xc002b08c
c00150de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e4:	e8 bd c0 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c00150e9:	0f 21 d0             	mov    eax,db2
c00150ec:	5d                   	pop    ebp
c00150ed:	5a                   	pop    edx
c00150ee:	50                   	push   eax
c00150ef:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fa:	e8 cd c0 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c00150ff:	59                   	pop    ecx
c0015100:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015105:	5e                   	pop    esi
c0015106:	68 94 b0 02 c0       	push   0xc002b094
c001510b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015111:	e8 90 c0 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0015116:	0f 21 d8             	mov    eax,db3
c0015119:	5f                   	pop    edi
c001511a:	5d                   	pop    ebp
c001511b:	50                   	push   eax
c001511c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015121:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015127:	e8 a0 c0 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001512c:	58                   	pop    eax
c001512d:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015132:	5a                   	pop    edx
c0015133:	68 9c b0 02 c0       	push   0xc002b09c
c0015138:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513e:	e8 63 c0 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0015143:	0f 21 f0             	mov    eax,db6
c0015146:	59                   	pop    ecx
c0015147:	5e                   	pop    esi
c0015148:	50                   	push   eax
c0015149:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001514e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015154:	e8 73 c0 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0015159:	5f                   	pop    edi
c001515a:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001515f:	5d                   	pop    ebp
c0015160:	68 a4 b0 02 c0       	push   0xc002b0a4
c0015165:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516b:	e8 36 c0 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c0015170:	0f 21 f8             	mov    eax,db7
c0015173:	5a                   	pop    edx
c0015174:	59                   	pop    ecx
c0015175:	50                   	push   eax
c0015176:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001517b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015181:	e8 46 c0 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0015186:	5e                   	pop    esi
c0015187:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001518a:	e8 50 85 00 00       	call   c001d6df <Thr::getDriverNameFromAddress(unsigned long)>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	85 c0                	test   eax,eax
c0015194:	74 7d                	je     c0015213 <displayDebugInfo(regs*)+0x48b>
c0015196:	89 c6                	mov    esi,eax
c0015198:	50                   	push   eax
c0015199:	50                   	push   eax
c001519a:	56                   	push   esi
c001519b:	68 ac b0 02 c0       	push   0xc002b0ac
c00151a0:	e8 6d dd ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00151a5:	5a                   	pop    edx
c00151a6:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151ab:	59                   	pop    ecx
c00151ac:	68 ba b0 02 c0       	push   0xc002b0ba
c00151b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b7:	e8 ea bf ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c00151bc:	5f                   	pop    edi
c00151bd:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151c2:	5d                   	pop    ebp
c00151c3:	56                   	push   esi
c00151c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ca:	e8 d7 bf ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c00151cf:	58                   	pop    eax
c00151d0:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151d5:	5a                   	pop    edx
c00151d6:	68 c6 b0 02 c0       	push   0xc002b0c6
c00151db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e1:	e8 c0 bf ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c00151e6:	59                   	pop    ecx
c00151e7:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151ec:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151f2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151f5:	e8 1c 85 00 00       	call   c001d716 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151fa:	5b                   	pop    ebx
c00151fb:	5d                   	pop    ebp
c00151fc:	50                   	push   eax
c00151fd:	57                   	push   edi
c00151fe:	e8 c9 bf ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c0015203:	58                   	pop    eax
c0015204:	5a                   	pop    edx
c0015205:	56                   	push   esi
c0015206:	68 d2 b0 02 c0       	push   0xc002b0d2
c001520b:	e8 02 dd ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0015210:	83 c4 10             	add    esp,0x10
c0015213:	fa                   	cli    
c0015214:	f4                   	hlt    
c0015215:	eb fe                	jmp    c0015215 <displayDebugInfo(regs*)+0x48d>

c0015217 <x87EmulHandler(regs*, void*)>:
c0015217:	53                   	push   ebx
c0015218:	83 ec 14             	sub    esp,0x14
c001521b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001521f:	53                   	push   ebx
c0015220:	e8 47 a8 00 00       	call   c001fa6c <Vm::x87Handler(regs*)>
c0015225:	83 c4 10             	add    esp,0x10
c0015228:	84 c0                	test   al,al
c001522a:	74 05                	je     c0015231 <x87EmulHandler(regs*, void*)+0x1a>
c001522c:	83 c4 08             	add    esp,0x8
c001522f:	5b                   	pop    ebx
c0015230:	c3                   	ret    
c0015231:	83 ec 0c             	sub    esp,0xc
c0015234:	68 e2 b0 02 c0       	push   0xc002b0e2
c0015239:	e8 d4 dc ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001523e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015241:	e8 42 fb ff ff       	call   c0014d88 <displayDebugInfo(regs*)>

c0015246 <gpFault(regs*, void*)>:
c0015246:	53                   	push   ebx
c0015247:	83 ec 14             	sub    esp,0x14
c001524a:	c7 05 34 e7 02 c0 e9 ed 01 c0 	mov    DWORD PTR ds:0xc002e734,0xc001ede9
c0015254:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015258:	53                   	push   ebx
c0015259:	e8 8b 9b 00 00       	call   c001ede9 <Vm::faultHandler(regs*)>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	84 c0                	test   al,al
c0015263:	74 05                	je     c001526a <gpFault(regs*, void*)+0x24>
c0015265:	83 c4 08             	add    esp,0x8
c0015268:	5b                   	pop    ebx
c0015269:	c3                   	ret    
c001526a:	83 ec 0c             	sub    esp,0xc
c001526d:	68 f8 b0 02 c0       	push   0xc002b0f8
c0015272:	e8 9b dc ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0015277:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001527a:	e8 09 fb ff ff       	call   c0014d88 <displayDebugInfo(regs*)>

c001527f <pgFault(regs*, void*)>:
c001527f:	83 ec 18             	sub    esp,0x18
c0015282:	68 13 b1 02 c0       	push   0xc002b113
c0015287:	e8 86 dc ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001528c:	0f 20 d0             	mov    eax,cr2
c001528f:	5a                   	pop    edx
c0015290:	59                   	pop    ecx
c0015291:	50                   	push   eax
c0015292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015297:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001529a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152a0:	e8 77 d8 ff ff       	call   c0012b1c <VAS::tryLoadBackOffDisk(unsigned long)>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	84 c0                	test   al,al
c00152aa:	74 04                	je     c00152b0 <pgFault(regs*, void*)+0x31>
c00152ac:	83 c4 0c             	add    esp,0xc
c00152af:	c3                   	ret    
c00152b0:	83 ec 0c             	sub    esp,0xc
c00152b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152b7:	e8 cc fa ff ff       	call   c0014d88 <displayDebugInfo(regs*)>

c00152bc <otherISRHandler(regs*, void*)>:
c00152bc:	53                   	push   ebx
c00152bd:	83 ec 0c             	sub    esp,0xc
c00152c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152c4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152c7:	50                   	push   eax
c00152c8:	50                   	push   eax
c00152c9:	68 20 b1 02 c0       	push   0xc002b120
c00152ce:	e8 3f dc ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00152d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152d6:	e8 ad fa ff ff       	call   c0014d88 <displayDebugInfo(regs*)>

c00152db <opcodeFault(regs*, void*)>:
c00152db:	55                   	push   ebp
c00152dc:	89 e5                	mov    ebp,esp
c00152de:	56                   	push   esi
c00152df:	53                   	push   ebx
c00152e0:	83 ec 40             	sub    esp,0x40
c00152e3:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00152e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152ee:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152f4:	84 c0                	test   al,al
c00152f6:	74 24                	je     c001531c <opcodeFault(regs*, void*)+0x41>
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	68 40 b1 02 c0       	push   0xc002b140
c0015300:	e8 0d dc ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530e:	8d 50 19             	lea    edx,[eax+0x19]
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015317:	e9 be 05 00 00       	jmp    c00158da <opcodeFault(regs*, void*)+0x5ff>
c001531c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015322:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015325:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015329:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001532d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015330:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015333:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015336:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015339:	8a 00                	mov    al,BYTE PTR [eax]
c001533b:	3c f0                	cmp    al,0xf0
c001533d:	75 17                	jne    c0015356 <opcodeFault(regs*, void*)+0x7b>
c001533f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015345:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015348:	8d 50 01             	lea    edx,[eax+0x1]
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015351:	e9 da 00 00 00       	jmp    c0015430 <opcodeFault(regs*, void*)+0x155>
c0015356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015359:	8a 00                	mov    al,BYTE PTR [eax]
c001535b:	3c f2                	cmp    al,0xf2
c001535d:	74 09                	je     c0015368 <opcodeFault(regs*, void*)+0x8d>
c001535f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015362:	8a 00                	mov    al,BYTE PTR [eax]
c0015364:	3c f3                	cmp    al,0xf3
c0015366:	75 1b                	jne    c0015383 <opcodeFault(regs*, void*)+0xa8>
c0015368:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001536c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001536f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015372:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015375:	8d 50 01             	lea    edx,[eax+0x1]
c0015378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001537e:	e9 ad 00 00 00       	jmp    c0015430 <opcodeFault(regs*, void*)+0x155>
c0015383:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015386:	8a 00                	mov    al,BYTE PTR [eax]
c0015388:	3c 66                	cmp    al,0x66
c001538a:	75 1f                	jne    c00153ab <opcodeFault(regs*, void*)+0xd0>
c001538c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015390:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015394:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539d:	8d 50 01             	lea    edx,[eax+0x1]
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a6:	e9 85 00 00 00       	jmp    c0015430 <opcodeFault(regs*, void*)+0x155>
c00153ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ae:	8a 00                	mov    al,BYTE PTR [eax]
c00153b0:	3c 67                	cmp    al,0x67
c00153b2:	75 18                	jne    c00153cc <opcodeFault(regs*, void*)+0xf1>
c00153b4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c1:	8d 50 01             	lea    edx,[eax+0x1]
c00153c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ca:	eb 64                	jmp    c0015430 <opcodeFault(regs*, void*)+0x155>
c00153cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cf:	8a 00                	mov    al,BYTE PTR [eax]
c00153d1:	3c 2e                	cmp    al,0x2e
c00153d3:	74 09                	je     c00153de <opcodeFault(regs*, void*)+0x103>
c00153d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d8:	8a 00                	mov    al,BYTE PTR [eax]
c00153da:	3c 3e                	cmp    al,0x3e
c00153dc:	75 18                	jne    c00153f6 <opcodeFault(regs*, void*)+0x11b>
c00153de:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153eb:	8d 50 01             	lea    edx,[eax+0x1]
c00153ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f4:	eb 3a                	jmp    c0015430 <opcodeFault(regs*, void*)+0x155>
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8a 00                	mov    al,BYTE PTR [eax]
c00153fb:	3c 36                	cmp    al,0x36
c00153fd:	74 1b                	je     c001541a <opcodeFault(regs*, void*)+0x13f>
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	8a 00                	mov    al,BYTE PTR [eax]
c0015404:	3c 26                	cmp    al,0x26
c0015406:	74 12                	je     c001541a <opcodeFault(regs*, void*)+0x13f>
c0015408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540b:	8a 00                	mov    al,BYTE PTR [eax]
c001540d:	3c 64                	cmp    al,0x64
c001540f:	74 09                	je     c001541a <opcodeFault(regs*, void*)+0x13f>
c0015411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015414:	8a 00                	mov    al,BYTE PTR [eax]
c0015416:	3c 65                	cmp    al,0x65
c0015418:	75 16                	jne    c0015430 <opcodeFault(regs*, void*)+0x155>
c001541a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001541e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015427:	8d 50 01             	lea    edx,[eax+0x1]
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015430:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015433:	8a 00                	mov    al,BYTE PTR [eax]
c0015435:	3c 0f                	cmp    al,0xf
c0015437:	0f 85 ad 00 00 00    	jne    c00154ea <opcodeFault(regs*, void*)+0x20f>
c001543d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015440:	40                   	inc    eax
c0015441:	8a 00                	mov    al,BYTE PTR [eax]
c0015443:	3c c2                	cmp    al,0xc2
c0015445:	74 0e                	je     c0015455 <opcodeFault(regs*, void*)+0x17a>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	40                   	inc    eax
c001544b:	8a 00                	mov    al,BYTE PTR [eax]
c001544d:	3c c3                	cmp    al,0xc3
c001544f:	0f 85 95 00 00 00    	jne    c00154ea <opcodeFault(regs*, void*)+0x20f>
c0015455:	83 ec 0c             	sub    esp,0xc
c0015458:	68 63 b1 02 c0       	push   0xc002b163
c001545d:	e8 b0 da ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015468:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546b:	8d 50 01             	lea    edx,[eax+0x1]
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015474:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	8d 50 fe             	lea    edx,[eax-0x2]
c001547f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015482:	88 10                	mov    BYTE PTR [eax],dl
c0015484:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015487:	50                   	push   eax
c0015488:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001548b:	50                   	push   eax
c001548c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001548f:	50                   	push   eax
c0015490:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015493:	e8 e2 47 00 00       	call   c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154a4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154a7:	01 d0                	add    eax,edx
c00154a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154b5:	48                   	dec    eax
c00154b6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	83 ec 04             	sub    esp,0x4
c00154c8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154cb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154ce:	50                   	push   eax
c00154cf:	e8 e0 ac fe ff       	call   c00001b4 <voodooXADD>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154dd:	01 c2                	add    edx,eax
c00154df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e5:	e9 f0 03 00 00       	jmp    c00158da <opcodeFault(regs*, void*)+0x5ff>
c00154ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ed:	8a 00                	mov    al,BYTE PTR [eax]
c00154ef:	3c 0f                	cmp    al,0xf
c00154f1:	0f 85 8b 01 00 00    	jne    c0015682 <opcodeFault(regs*, void*)+0x3a7>
c00154f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fa:	40                   	inc    eax
c00154fb:	8a 00                	mov    al,BYTE PTR [eax]
c00154fd:	3c c7                	cmp    al,0xc7
c00154ff:	0f 86 7d 01 00 00    	jbe    c0015682 <opcodeFault(regs*, void*)+0x3a7>
c0015505:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015508:	40                   	inc    eax
c0015509:	8a 00                	mov    al,BYTE PTR [eax]
c001550b:	3c cf                	cmp    al,0xcf
c001550d:	0f 87 6f 01 00 00    	ja     c0015682 <opcodeFault(regs*, void*)+0x3a7>
c0015513:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015516:	40                   	inc    eax
c0015517:	8a 00                	mov    al,BYTE PTR [eax]
c0015519:	83 c0 38             	add    eax,0x38
c001551c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001551f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015523:	75 0b                	jne    c0015530 <opcodeFault(regs*, void*)+0x255>
c0015525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015528:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001552b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001552e:	eb 75                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015530:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015534:	75 0b                	jne    c0015541 <opcodeFault(regs*, void*)+0x266>
c0015536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015539:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001553c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001553f:	eb 64                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015541:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015545:	75 0b                	jne    c0015552 <opcodeFault(regs*, void*)+0x277>
c0015547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001554d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015550:	eb 53                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015552:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015556:	75 0b                	jne    c0015563 <opcodeFault(regs*, void*)+0x288>
c0015558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001555e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015561:	eb 42                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015563:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015567:	75 0b                	jne    c0015574 <opcodeFault(regs*, void*)+0x299>
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001556f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015572:	eb 31                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015574:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015578:	75 0b                	jne    c0015585 <opcodeFault(regs*, void*)+0x2aa>
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015580:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015583:	eb 20                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015585:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015589:	75 0b                	jne    c0015596 <opcodeFault(regs*, void*)+0x2bb>
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015591:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015594:	eb 0f                	jmp    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c0015596:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001559a:	75 09                	jne    c00155a5 <opcodeFault(regs*, void*)+0x2ca>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a5:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155a9:	74 10                	je     c00155bb <opcodeFault(regs*, void*)+0x2e0>
c00155ab:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155b2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155b9:	eb 2d                	jmp    c00155e8 <opcodeFault(regs*, void*)+0x30d>
c00155bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155be:	c1 e0 18             	shl    eax,0x18
c00155c1:	89 c2                	mov    edx,eax
c00155c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155c6:	c1 e0 08             	shl    eax,0x8
c00155c9:	25 00 00 ff 00       	and    eax,0xff0000
c00155ce:	09 c2                	or     edx,eax
c00155d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155d3:	c1 e8 08             	shr    eax,0x8
c00155d6:	25 00 ff 00 00       	and    eax,0xff00
c00155db:	09 c2                	or     edx,eax
c00155dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e0:	c1 e8 18             	shr    eax,0x18
c00155e3:	09 d0                	or     eax,edx
c00155e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155ec:	75 0b                	jne    c00155f9 <opcodeFault(regs*, void*)+0x31e>
c00155ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155f4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155f7:	eb 75                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c00155f9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155fd:	75 0b                	jne    c001560a <opcodeFault(regs*, void*)+0x32f>
c00155ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015602:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015605:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015608:	eb 64                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c001560a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001560e:	75 0b                	jne    c001561b <opcodeFault(regs*, void*)+0x340>
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015616:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015619:	eb 53                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c001561b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001561f:	75 0b                	jne    c001562c <opcodeFault(regs*, void*)+0x351>
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015627:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001562a:	eb 42                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c001562c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015630:	75 0b                	jne    c001563d <opcodeFault(regs*, void*)+0x362>
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015638:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001563b:	eb 31                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c001563d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015641:	75 0b                	jne    c001564e <opcodeFault(regs*, void*)+0x373>
c0015643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015646:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015649:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001564c:	eb 20                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c001564e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015652:	75 0b                	jne    c001565f <opcodeFault(regs*, void*)+0x384>
c0015654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015657:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001565a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001565d:	eb 0f                	jmp    c001566e <opcodeFault(regs*, void*)+0x393>
c001565f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015663:	75 09                	jne    c001566e <opcodeFault(regs*, void*)+0x393>
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015674:	8d 50 02             	lea    edx,[eax+0x2]
c0015677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001567d:	e9 58 02 00 00       	jmp    c00158da <opcodeFault(regs*, void*)+0x5ff>
c0015682:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015685:	8a 00                	mov    al,BYTE PTR [eax]
c0015687:	3c 0f                	cmp    al,0xf
c0015689:	0f 85 76 01 00 00    	jne    c0015805 <opcodeFault(regs*, void*)+0x52a>
c001568f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015692:	40                   	inc    eax
c0015693:	8a 00                	mov    al,BYTE PTR [eax]
c0015695:	3c c7                	cmp    al,0xc7
c0015697:	0f 85 68 01 00 00    	jne    c0015805 <opcodeFault(regs*, void*)+0x52a>
c001569d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156a6:	8d 50 01             	lea    edx,[eax+0x1]
c00156a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156af:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156b2:	50                   	push   eax
c00156b3:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156b6:	50                   	push   eax
c00156b7:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156ba:	50                   	push   eax
c00156bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156be:	e8 b7 45 00 00       	call   c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156c3:	83 c4 10             	add    esp,0x10
c00156c6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156c9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156cc:	83 f0 01             	xor    eax,0x1
c00156cf:	84 c0                	test   al,al
c00156d1:	0f 84 2e 01 00 00    	je     c0015805 <opcodeFault(regs*, void*)+0x52a>
c00156d7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156da:	3c 01                	cmp    al,0x1
c00156dc:	0f 85 23 01 00 00    	jne    c0015805 <opcodeFault(regs*, void*)+0x52a>
c00156e2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156e5:	83 f0 01             	xor    eax,0x1
c00156e8:	84 c0                	test   al,al
c00156ea:	0f 84 15 01 00 00    	je     c0015805 <opcodeFault(regs*, void*)+0x52a>
c00156f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156f9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015700:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015703:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015706:	89 c2                	mov    edx,eax
c0015708:	b8 00 00 00 00       	mov    eax,0x0
c001570d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015710:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015719:	ba 00 00 00 00       	mov    edx,0x0
c001571e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015721:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001572a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001572d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015734:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015737:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001573a:	89 c2                	mov    edx,eax
c001573c:	b8 00 00 00 00       	mov    eax,0x0
c0015741:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015744:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001574d:	ba 00 00 00 00       	mov    edx,0x0
c0015752:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015755:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015758:	e8 7b 86 00 00       	call   c001ddd8 <lockScheduler()>
c001575d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015760:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015763:	8b 00                	mov    eax,DWORD PTR [eax]
c0015765:	89 c1                	mov    ecx,eax
c0015767:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001576a:	89 cb                	mov    ebx,ecx
c001576c:	89 d0                	mov    eax,edx
c001576e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015771:	89 c6                	mov    esi,eax
c0015773:	89 f0                	mov    eax,esi
c0015775:	09 d8                	or     eax,ebx
c0015777:	85 c0                	test   eax,eax
c0015779:	75 21                	jne    c001579c <opcodeFault(regs*, void*)+0x4c1>
c001577b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001577e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015781:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015784:	89 01                	mov    DWORD PTR [ecx],eax
c0015786:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001578f:	83 c8 40             	or     eax,0x40
c0015792:	89 c2                	mov    edx,eax
c0015794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015797:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001579a:	eb 3e                	jmp    c00157da <opcodeFault(regs*, void*)+0x4ff>
c001579c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001579f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157a7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157b3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157b6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157b9:	89 d0                	mov    eax,edx
c00157bb:	31 d2                	xor    edx,edx
c00157bd:	89 c3                	mov    ebx,eax
c00157bf:	89 d6                	mov    esi,edx
c00157c1:	89 da                	mov    edx,ebx
c00157c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157cf:	83 e0 bf             	and    eax,0xffffffbf
c00157d2:	89 c2                	mov    edx,eax
c00157d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157da:	e8 fb 85 00 00       	call   c001ddda <unlockScheduler()>
c00157df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157e5:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157e8:	01 c2                	add    edx,eax
c00157ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157f0:	83 ec 0c             	sub    esp,0xc
c00157f3:	68 72 b1 02 c0       	push   0xc002b172
c00157f8:	e8 15 d7 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00157fd:	83 c4 10             	add    esp,0x10
c0015800:	e9 d5 00 00 00       	jmp    c00158da <opcodeFault(regs*, void*)+0x5ff>
c0015805:	83 ec 0c             	sub    esp,0xc
c0015808:	68 85 b1 02 c0       	push   0xc002b185
c001580d:	e8 00 d7 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015818:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001581b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015821:	c1 e0 04             	shl    eax,0x4
c0015824:	01 d0                	add    eax,edx
c0015826:	83 c0 03             	add    eax,0x3
c0015829:	8a 00                	mov    al,BYTE PTR [eax]
c001582b:	0f b6 d8             	movzx  ebx,al
c001582e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015831:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015837:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001583a:	c1 e0 04             	shl    eax,0x4
c001583d:	01 d0                	add    eax,edx
c001583f:	83 c0 02             	add    eax,0x2
c0015842:	8a 00                	mov    al,BYTE PTR [eax]
c0015844:	0f b6 c8             	movzx  ecx,al
c0015847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015853:	c1 e0 04             	shl    eax,0x4
c0015856:	01 d0                	add    eax,edx
c0015858:	40                   	inc    eax
c0015859:	8a 00                	mov    al,BYTE PTR [eax]
c001585b:	0f b6 d0             	movzx  edx,al
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015867:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001586a:	c1 e0 04             	shl    eax,0x4
c001586d:	01 f0                	add    eax,esi
c001586f:	8a 00                	mov    al,BYTE PTR [eax]
c0015871:	0f b6 c0             	movzx  eax,al
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	53                   	push   ebx
c0015878:	51                   	push   ecx
c0015879:	52                   	push   edx
c001587a:	50                   	push   eax
c001587b:	68 98 b1 02 c0       	push   0xc002b198
c0015880:	e8 8d d6 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0015885:	83 c4 20             	add    esp,0x20
c0015888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001588e:	83 c0 03             	add    eax,0x3
c0015891:	8a 00                	mov    al,BYTE PTR [eax]
c0015893:	0f b6 d8             	movzx  ebx,al
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001589c:	83 c0 02             	add    eax,0x2
c001589f:	8a 00                	mov    al,BYTE PTR [eax]
c00158a1:	0f b6 c8             	movzx  ecx,al
c00158a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158aa:	40                   	inc    eax
c00158ab:	8a 00                	mov    al,BYTE PTR [eax]
c00158ad:	0f b6 d0             	movzx  edx,al
c00158b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158b6:	8a 00                	mov    al,BYTE PTR [eax]
c00158b8:	0f b6 c0             	movzx  eax,al
c00158bb:	83 ec 0c             	sub    esp,0xc
c00158be:	53                   	push   ebx
c00158bf:	51                   	push   ecx
c00158c0:	52                   	push   edx
c00158c1:	50                   	push   eax
c00158c2:	68 c0 b1 02 c0       	push   0xc002b1c0
c00158c7:	e8 46 d6 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00158cc:	83 c4 20             	add    esp,0x20
c00158cf:	83 ec 0c             	sub    esp,0xc
c00158d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158d5:	e8 ae f4 ff ff       	call   c0014d88 <displayDebugInfo(regs*)>
c00158da:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158dd:	5b                   	pop    ebx
c00158de:	5e                   	pop    esi
c00158df:	5d                   	pop    ebp
c00158e0:	c3                   	ret    

c00158e1 <displayProgramFault(char const*)>:
c00158e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158e9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158ef:	85 c0                	test   eax,eax
c00158f1:	74 15                	je     c0015908 <displayProgramFault(char const*)+0x27>
c00158f3:	83 ec 0c             	sub    esp,0xc
c00158f6:	6a 04                	push   0x4
c00158f8:	6a 0f                	push   0xf
c00158fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158fe:	50                   	push   eax
c00158ff:	e8 64 b5 ff ff       	call   c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015904:	83 c4 1c             	add    esp,0x1c
c0015907:	c3                   	ret    
c0015908:	c3                   	ret    

c0015909 <setupInterruptController()>:
c0015909:	55                   	push   ebp
c001590a:	89 e5                	mov    ebp,esp
c001590c:	53                   	push   ebx
c001590d:	83 ec 24             	sub    esp,0x24
c0015910:	b8 00 00 00 00       	mov    eax,0x0
c0015915:	85 c0                	test   eax,eax
c0015917:	0f 95 c0             	setne  al
c001591a:	84 c0                	test   al,al
c001591c:	74 5b                	je     c0015979 <setupInterruptController()+0x70>
c001591e:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001592b:	e8 10 9f ff ff       	call   c000f840 <malloc>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	89 c3                	mov    ebx,eax
c0015935:	83 ec 0c             	sub    esp,0xc
c0015938:	53                   	push   ebx
c0015939:	e8 f2 ff 00 00       	call   c0025930 <APIC::APIC()>
c001593e:	83 c4 10             	add    esp,0x10
c0015941:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015944:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015947:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001594a:	8b 00                	mov    eax,DWORD PTR [eax]
c001594c:	83 c0 08             	add    eax,0x8
c001594f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015951:	6a 00                	push   0x0
c0015953:	6a 00                	push   0x0
c0015955:	6a 00                	push   0x0
c0015957:	52                   	push   edx
c0015958:	ff d0                	call   eax
c001595a:	83 c4 10             	add    esp,0x10
c001595d:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0015962:	83 ec 08             	sub    esp,0x8
c0015965:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015968:	50                   	push   eax
c0015969:	e8 ca e9 ff ff       	call   c0014338 <Device::addChild(Device*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015974:	e9 52 03 00 00       	jmp    c0015ccb <setupInterruptController()+0x3c2>
c0015979:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001597e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015984:	83 e0 01             	and    eax,0x1
c0015987:	84 c0                	test   al,al
c0015989:	0f 95 c0             	setne  al
c001598c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001598f:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015996:	83 ec 0c             	sub    esp,0xc
c0015999:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001599c:	e8 9f 9e ff ff       	call   c000f840 <malloc>
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	89 c3                	mov    ebx,eax
c00159a6:	83 ec 0c             	sub    esp,0xc
c00159a9:	53                   	push   ebx
c00159aa:	e8 d9 04 01 00       	call   c0025e88 <PIC::PIC()>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bd:	83 c0 08             	add    eax,0x8
c00159c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c2:	6a 00                	push   0x0
c00159c4:	6a 00                	push   0x0
c00159c6:	6a 00                	push   0x0
c00159c8:	52                   	push   edx
c00159c9:	ff d0                	call   eax
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159d2:	74 73                	je     c0015a47 <setupInterruptController()+0x13e>
c00159d4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159da:	8b 00                	mov    eax,DWORD PTR [eax]
c00159dc:	83 c0 0c             	add    eax,0xc
c00159df:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e1:	6a 00                	push   0x0
c00159e3:	6a 00                	push   0x0
c00159e5:	6a 00                	push   0x0
c00159e7:	52                   	push   edx
c00159e8:	ff d0                	call   eax
c00159ea:	83 c4 10             	add    esp,0x10
c00159ed:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f1:	74 15                	je     c0015a08 <setupInterruptController()+0xff>
c00159f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f8:	83 c0 04             	add    eax,0x4
c00159fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fd:	83 ec 0c             	sub    esp,0xc
c0015a00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a03:	ff d0                	call   eax
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a0f:	83 ec 0c             	sub    esp,0xc
c0015a12:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a15:	e8 26 9e ff ff       	call   c000f840 <malloc>
c0015a1a:	83 c4 10             	add    esp,0x10
c0015a1d:	89 c3                	mov    ebx,eax
c0015a1f:	83 ec 0c             	sub    esp,0xc
c0015a22:	53                   	push   ebx
c0015a23:	e8 08 ff 00 00       	call   c0025930 <APIC::APIC()>
c0015a28:	83 c4 10             	add    esp,0x10
c0015a2b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a2e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a36:	83 c0 08             	add    eax,0x8
c0015a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3b:	6a 00                	push   0x0
c0015a3d:	6a 00                	push   0x0
c0015a3f:	6a 00                	push   0x0
c0015a41:	52                   	push   edx
c0015a42:	ff d0                	call   eax
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0015a4c:	83 ec 08             	sub    esp,0x8
c0015a4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a52:	50                   	push   eax
c0015a53:	e8 e0 e8 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a60:	83 c0 24             	add    eax,0x24
c0015a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a65:	6a 00                	push   0x0
c0015a67:	68 bc 52 01 c0       	push   0xc00152bc
c0015a6c:	6a 00                	push   0x0
c0015a6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a71:	ff d0                	call   eax
c0015a73:	83 c4 10             	add    esp,0x10
c0015a76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7b:	83 c0 24             	add    eax,0x24
c0015a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a80:	6a 00                	push   0x0
c0015a82:	68 bc 52 01 c0       	push   0xc00152bc
c0015a87:	6a 01                	push   0x1
c0015a89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8c:	ff d0                	call   eax
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a96:	83 c0 24             	add    eax,0x24
c0015a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9b:	6a 00                	push   0x0
c0015a9d:	68 e5 4b 01 c0       	push   0xc0014be5
c0015aa2:	6a 02                	push   0x2
c0015aa4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa7:	ff d0                	call   eax
c0015aa9:	83 c4 10             	add    esp,0x10
c0015aac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab1:	83 c0 24             	add    eax,0x24
c0015ab4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab6:	6a 00                	push   0x0
c0015ab8:	68 bc 52 01 c0       	push   0xc00152bc
c0015abd:	6a 03                	push   0x3
c0015abf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac2:	ff d0                	call   eax
c0015ac4:	83 c4 10             	add    esp,0x10
c0015ac7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acc:	83 c0 24             	add    eax,0x24
c0015acf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad1:	6a 00                	push   0x0
c0015ad3:	68 bc 52 01 c0       	push   0xc00152bc
c0015ad8:	6a 04                	push   0x4
c0015ada:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015add:	ff d0                	call   eax
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	83 c0 24             	add    eax,0x24
c0015aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aec:	6a 00                	push   0x0
c0015aee:	68 bc 52 01 c0       	push   0xc00152bc
c0015af3:	6a 05                	push   0x5
c0015af5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af8:	ff d0                	call   eax
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	83 c0 24             	add    eax,0x24
c0015b05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b07:	6a 00                	push   0x0
c0015b09:	68 db 52 01 c0       	push   0xc00152db
c0015b0e:	6a 06                	push   0x6
c0015b10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b13:	ff d0                	call   eax
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1d:	83 c0 24             	add    eax,0x24
c0015b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b22:	6a 00                	push   0x0
c0015b24:	68 17 52 01 c0       	push   0xc0015217
c0015b29:	6a 07                	push   0x7
c0015b2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2e:	ff d0                	call   eax
c0015b30:	83 c4 10             	add    esp,0x10
c0015b33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b38:	83 c0 24             	add    eax,0x24
c0015b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3d:	6a 00                	push   0x0
c0015b3f:	68 00 4a 01 c0       	push   0xc0014a00
c0015b44:	6a 08                	push   0x8
c0015b46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b49:	ff d0                	call   eax
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b53:	83 c0 24             	add    eax,0x24
c0015b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b58:	6a 00                	push   0x0
c0015b5a:	68 bc 52 01 c0       	push   0xc00152bc
c0015b5f:	6a 09                	push   0x9
c0015b61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b64:	ff d0                	call   eax
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6e:	83 c0 24             	add    eax,0x24
c0015b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b73:	6a 00                	push   0x0
c0015b75:	68 bc 52 01 c0       	push   0xc00152bc
c0015b7a:	6a 0a                	push   0xa
c0015b7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7f:	ff d0                	call   eax
c0015b81:	83 c4 10             	add    esp,0x10
c0015b84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b89:	83 c0 24             	add    eax,0x24
c0015b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8e:	6a 00                	push   0x0
c0015b90:	68 bc 52 01 c0       	push   0xc00152bc
c0015b95:	6a 0b                	push   0xb
c0015b97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9a:	ff d0                	call   eax
c0015b9c:	83 c4 10             	add    esp,0x10
c0015b9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba4:	83 c0 24             	add    eax,0x24
c0015ba7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba9:	6a 00                	push   0x0
c0015bab:	68 bc 52 01 c0       	push   0xc00152bc
c0015bb0:	6a 0c                	push   0xc
c0015bb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb5:	ff d0                	call   eax
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbf:	83 c0 24             	add    eax,0x24
c0015bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc4:	6a 00                	push   0x0
c0015bc6:	68 46 52 01 c0       	push   0xc0015246
c0015bcb:	6a 0d                	push   0xd
c0015bcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd0:	ff d0                	call   eax
c0015bd2:	83 c4 10             	add    esp,0x10
c0015bd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bda:	83 c0 24             	add    eax,0x24
c0015bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdf:	6a 00                	push   0x0
c0015be1:	68 7f 52 01 c0       	push   0xc001527f
c0015be6:	6a 0e                	push   0xe
c0015be8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015beb:	ff d0                	call   eax
c0015bed:	83 c4 10             	add    esp,0x10
c0015bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf5:	83 c0 24             	add    eax,0x24
c0015bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfa:	6a 00                	push   0x0
c0015bfc:	68 bc 52 01 c0       	push   0xc00152bc
c0015c01:	6a 0f                	push   0xf
c0015c03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c06:	ff d0                	call   eax
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c10:	83 c0 24             	add    eax,0x24
c0015c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c15:	6a 00                	push   0x0
c0015c17:	68 bc 52 01 c0       	push   0xc00152bc
c0015c1c:	6a 10                	push   0x10
c0015c1e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c21:	ff d0                	call   eax
c0015c23:	83 c4 10             	add    esp,0x10
c0015c26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2b:	83 c0 24             	add    eax,0x24
c0015c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c30:	6a 00                	push   0x0
c0015c32:	68 bc 52 01 c0       	push   0xc00152bc
c0015c37:	6a 11                	push   0x11
c0015c39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3c:	ff d0                	call   eax
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c46:	83 c0 24             	add    eax,0x24
c0015c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4b:	6a 00                	push   0x0
c0015c4d:	68 bc 52 01 c0       	push   0xc00152bc
c0015c52:	6a 12                	push   0x12
c0015c54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c57:	ff d0                	call   eax
c0015c59:	83 c4 10             	add    esp,0x10
c0015c5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c61:	83 c0 24             	add    eax,0x24
c0015c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c66:	6a 00                	push   0x0
c0015c68:	68 bc 52 01 c0       	push   0xc00152bc
c0015c6d:	6a 13                	push   0x13
c0015c6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c72:	ff d0                	call   eax
c0015c74:	83 c4 10             	add    esp,0x10
c0015c77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7c:	83 c0 24             	add    eax,0x24
c0015c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c81:	6a 00                	push   0x0
c0015c83:	68 bc 52 01 c0       	push   0xc00152bc
c0015c88:	6a 14                	push   0x14
c0015c8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8d:	ff d0                	call   eax
c0015c8f:	83 c4 10             	add    esp,0x10
c0015c92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c97:	83 c0 24             	add    eax,0x24
c0015c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9c:	6a 00                	push   0x0
c0015c9e:	68 bc 52 01 c0       	push   0xc00152bc
c0015ca3:	6a 1e                	push   0x1e
c0015ca5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca8:	ff d0                	call   eax
c0015caa:	83 c4 10             	add    esp,0x10
c0015cad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb2:	83 c0 24             	add    eax,0x24
c0015cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb7:	6a 00                	push   0x0
c0015cb9:	68 87 c7 01 c0       	push   0xc001c787
c0015cbe:	6a 60                	push   0x60
c0015cc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc3:	ff d0                	call   eax
c0015cc5:	83 c4 10             	add    esp,0x10
c0015cc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ccb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cce:	c9                   	leave  
c0015ccf:	c3                   	ret    

c0015cd0 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cd0:	55                   	push   ebp
c0015cd1:	89 e5                	mov    ebp,esp
c0015cd3:	83 ec 08             	sub    esp,0x8
c0015cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd9:	83 ec 0c             	sub    esp,0xc
c0015cdc:	50                   	push   eax
c0015cdd:	e8 42 e9 ff ff       	call   c0014624 <Device::getName()>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	8a 00                	mov    al,BYTE PTR [eax]
c0015ce7:	3c 41                	cmp    al,0x41
c0015ce9:	0f 94 c0             	sete   al
c0015cec:	84 c0                	test   al,al
c0015cee:	74 28                	je     c0015d18 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cf0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cf4:	7f 12                	jg     c0015d08 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cf9:	05 e0 d7 02 c0       	add    eax,0xc002d7e0
c0015cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0015d00:	0f b6 c0             	movzx  eax,al
c0015d03:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d06:	eb 10                	jmp    c0015d18 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	68 e0 ae 02 c0       	push   0xc002aee0
c0015d10:	e8 9e 48 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0015d15:	83 c4 10             	add    esp,0x10
c0015d18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d1b:	c9                   	leave  
c0015d1c:	c3                   	ret    
c0015d1d:	90                   	nop

c0015d1e <startGUI(void*)>:
c0015d1e:	55                   	push   ebp
c0015d1f:	89 e5                	mov    ebp,esp
c0015d21:	53                   	push   ebx
c0015d22:	83 ec 04             	sub    esp,0x4
c0015d25:	e8 b0 80 00 00       	call   c001ddda <unlockScheduler()>
c0015d2a:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015d30:	83 ec 08             	sub    esp,0x8
c0015d33:	6a 01                	push   0x1
c0015d35:	68 30 b2 02 c0       	push   0xc002b230
c0015d3a:	e8 f1 79 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	83 ec 08             	sub    esp,0x8
c0015d45:	53                   	push   ebx
c0015d46:	50                   	push   eax
c0015d47:	e8 18 7c 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015d55:	83 ec 08             	sub    esp,0x8
c0015d58:	6a 01                	push   0x1
c0015d5a:	68 4a b2 02 c0       	push   0xc002b24a
c0015d5f:	e8 cc 79 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	83 ec 08             	sub    esp,0x8
c0015d6a:	53                   	push   ebx
c0015d6b:	50                   	push   eax
c0015d6c:	e8 f3 7b 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	90                   	nop
c0015d75:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d78:	c9                   	leave  
c0015d79:	c3                   	ret    

c0015d7a <startGUIVESA(void*)>:
c0015d7a:	55                   	push   ebp
c0015d7b:	89 e5                	mov    ebp,esp
c0015d7d:	53                   	push   ebx
c0015d7e:	83 ec 04             	sub    esp,0x4
c0015d81:	e8 54 80 00 00       	call   c001ddda <unlockScheduler()>
c0015d86:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015d8c:	83 ec 08             	sub    esp,0x8
c0015d8f:	6a 01                	push   0x1
c0015d91:	68 64 b2 02 c0       	push   0xc002b264
c0015d96:	e8 95 79 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	83 ec 08             	sub    esp,0x8
c0015da1:	53                   	push   ebx
c0015da2:	50                   	push   eax
c0015da3:	e8 bc 7b 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	6a 01                	push   0x1
c0015db6:	68 4a b2 02 c0       	push   0xc002b24a
c0015dbb:	e8 70 79 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	53                   	push   ebx
c0015dc7:	50                   	push   eax
c0015dc8:	e8 97 7b 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	90                   	nop
c0015dd1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dd4:	c9                   	leave  
c0015dd5:	c3                   	ret    

c0015dd6 <sendKeyToTerminal(unsigned char)>:
c0015dd6:	55                   	push   ebp
c0015dd7:	89 e5                	mov    ebp,esp
c0015dd9:	83 ec 28             	sub    esp,0x28
c0015ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015de2:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0015de7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015deb:	83 ec 08             	sub    esp,0x8
c0015dee:	52                   	push   edx
c0015def:	50                   	push   eax
c0015df0:	e8 af b5 ff ff       	call   c00113a4 <VgaText::receiveKey(unsigned char)>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dfc:	75 41                	jne    c0015e3f <sendKeyToTerminal(unsigned char)+0x69>
c0015dfe:	e8 fc 7f 00 00       	call   c001ddff <lockStuff()>
c0015e03:	a1 40 e7 02 c0       	mov    eax,ds:0xc002e740
c0015e08:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e0b:	c7 05 40 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e740,0x0
c0015e15:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e19:	74 1f                	je     c0015e3a <sendKeyToTerminal(unsigned char)+0x64>
c0015e1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e24:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e27:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e2a:	83 ec 0c             	sub    esp,0xc
c0015e2d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e30:	e8 bb 85 00 00       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c0015e35:	83 c4 10             	add    esp,0x10
c0015e38:	eb db                	jmp    c0015e15 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e3a:	e8 5a 83 00 00       	call   c001e199 <unlockStuff()>
c0015e3f:	90                   	nop
c0015e40:	c9                   	leave  
c0015e41:	c3                   	ret    

c0015e42 <sendKeyboardToken(KeyboardToken)>:
c0015e42:	55                   	push   ebp
c0015e43:	89 e5                	mov    ebp,esp
c0015e45:	83 ec 18             	sub    esp,0x18
c0015e48:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4e:	0f b7 c0             	movzx  eax,ax
c0015e51:	83 f2 01             	xor    edx,0x1
c0015e54:	88 90 60 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd18a0],dl
c0015e5a:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0015e5f:	85 c0                	test   eax,eax
c0015e61:	74 24                	je     c0015e87 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e63:	8b 0d 48 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e748
c0015e69:	83 ec 04             	sub    esp,0x4
c0015e6c:	68 60 e7 02 c0       	push   0xc002e760
c0015e71:	83 ec 08             	sub    esp,0x8
c0015e74:	89 e2                	mov    edx,esp
c0015e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e79:	89 02                	mov    DWORD PTR [edx],eax
c0015e7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e7e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e82:	ff d1                	call   ecx
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8a:	66 3d 03 02          	cmp    ax,0x203
c0015e8e:	75 07                	jne    c0015e97 <sendKeyboardToken(KeyboardToken)+0x55>
c0015e90:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0015e95:	84 c0                	test   al,al
c0015e97:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e9b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e9e:	a0 68 eb 02 c0       	mov    al,ds:0xc002eb68
c0015ea3:	38 c2                	cmp    dl,al
c0015ea5:	74 1c                	je     c0015ec3 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ea7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015eaa:	a2 68 eb 02 c0       	mov    ds:0xc002eb68,al
c0015eaf:	a0 68 eb 02 c0       	mov    al,ds:0xc002eb68
c0015eb4:	0f b6 c0             	movzx  eax,al
c0015eb7:	83 ec 0c             	sub    esp,0xc
c0015eba:	50                   	push   eax
c0015ebb:	e8 44 a7 ff ff       	call   c0010604 <setTerminalScrollLock(bool)>
c0015ec0:	83 c4 10             	add    esp,0x10
c0015ec3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ec6:	84 c0                	test   al,al
c0015ec8:	0f 84 ae 00 00 00    	je     c0015f7c <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed1:	66 3d 10 03          	cmp    ax,0x310
c0015ed5:	75 06                	jne    c0015edd <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ed7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee0:	66 3d 11 03          	cmp    ax,0x311
c0015ee4:	75 06                	jne    c0015eec <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ee6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eef:	66 3d 12 03          	cmp    ax,0x312
c0015ef3:	75 06                	jne    c0015efb <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ef5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efe:	66 3d 13 03          	cmp    ax,0x313
c0015f02:	75 06                	jne    c0015f0a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f04:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0d:	66 3d 14 03          	cmp    ax,0x314
c0015f11:	75 06                	jne    c0015f19 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f13:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1c:	66 3d 15 03          	cmp    ax,0x315
c0015f20:	75 06                	jne    c0015f28 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f22:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2b:	66 3d 16 03          	cmp    ax,0x316
c0015f2f:	75 06                	jne    c0015f37 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f31:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3a:	66 3d 17 03          	cmp    ax,0x317
c0015f3e:	75 06                	jne    c0015f46 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f40:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 18 03          	cmp    ax,0x318
c0015f4d:	75 06                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f4f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 19 03          	cmp    ax,0x319
c0015f5c:	75 06                	jne    c0015f64 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f5e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 1a 03          	cmp    ax,0x31a
c0015f6b:	0f 85 c9 00 00 00    	jne    c001603a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f71:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f77:	e9 be 00 00 00       	jmp    c001603a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7f:	66 3d 10 03          	cmp    ax,0x310
c0015f83:	75 0a                	jne    c0015f8f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f85:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f92:	66 3d 11 03          	cmp    ax,0x311
c0015f96:	75 0a                	jne    c0015fa2 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f98:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa5:	66 3d 12 03          	cmp    ax,0x312
c0015fa9:	75 0a                	jne    c0015fb5 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fab:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb8:	66 3d 13 03          	cmp    ax,0x313
c0015fbc:	75 0a                	jne    c0015fc8 <sendKeyboardToken(KeyboardToken)+0x186>
c0015fbe:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015fc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcb:	66 3d 14 03          	cmp    ax,0x314
c0015fcf:	75 0a                	jne    c0015fdb <sendKeyboardToken(KeyboardToken)+0x199>
c0015fd1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015fd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fde:	66 3d 15 03          	cmp    ax,0x315
c0015fe2:	75 0a                	jne    c0015fee <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015fe4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff1:	66 3d 16 03          	cmp    ax,0x316
c0015ff5:	75 0a                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015ff7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ffd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 17 03          	cmp    ax,0x317
c0016008:	75 0a                	jne    c0016014 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001600a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016010:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016017:	66 3d 18 03          	cmp    ax,0x318
c001601b:	75 0a                	jne    c0016027 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001601d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016023:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602a:	66 3d 19 03          	cmp    ax,0x319
c001602e:	75 0a                	jne    c001603a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016030:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016036:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603d:	66 3d 00 02          	cmp    ax,0x200
c0016041:	75 2c                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x22d>
c0016043:	a0 60 eb 02 c0       	mov    al,ds:0xc002eb60
c0016048:	83 f0 01             	xor    eax,0x1
c001604b:	84 c0                	test   al,al
c001604d:	74 20                	je     c001606f <sendKeyboardToken(KeyboardToken)+0x22d>
c001604f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0016054:	6a 01                	push   0x1
c0016056:	6a 00                	push   0x0
c0016058:	68 1e 5d 01 c0       	push   0xc0015d1e
c001605d:	50                   	push   eax
c001605e:	e8 a7 7e 00 00       	call   c001df0a <Process::createThread(void (*)(void*), void*, int)>
c0016063:	83 c4 10             	add    esp,0x10
c0016066:	c6 05 60 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb60,0x1
c001606d:	eb 33                	jmp    c00160a2 <sendKeyboardToken(KeyboardToken)+0x260>
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 01 02          	cmp    ax,0x201
c0016076:	75 2a                	jne    c00160a2 <sendKeyboardToken(KeyboardToken)+0x260>
c0016078:	a0 60 eb 02 c0       	mov    al,ds:0xc002eb60
c001607d:	83 f0 01             	xor    eax,0x1
c0016080:	84 c0                	test   al,al
c0016082:	74 1e                	je     c00160a2 <sendKeyboardToken(KeyboardToken)+0x260>
c0016084:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0016089:	6a 01                	push   0x1
c001608b:	6a 00                	push   0x0
c001608d:	68 7a 5d 01 c0       	push   0xc0015d7a
c0016092:	50                   	push   eax
c0016093:	e8 72 7e 00 00       	call   c001df0a <Process::createThread(void (*)(void*), void*, int)>
c0016098:	83 c4 10             	add    esp,0x10
c001609b:	c6 05 60 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb60,0x1
c00160a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a5:	66 3d 1d 03          	cmp    ax,0x31d
c00160a9:	75 06                	jne    c00160b1 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160ab:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b4:	66 3d 1c 03          	cmp    ax,0x31c
c00160b8:	75 06                	jne    c00160c0 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160ba:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c3:	66 3d 1b 03          	cmp    ax,0x31b
c00160c7:	75 06                	jne    c00160cf <sendKeyboardToken(KeyboardToken)+0x28d>
c00160c9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d2:	66 3d 1e 03          	cmp    ax,0x31e
c00160d6:	75 06                	jne    c00160de <sendKeyboardToken(KeyboardToken)+0x29c>
c00160d8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e1:	66 3d 1f 03          	cmp    ax,0x31f
c00160e5:	75 06                	jne    c00160ed <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160e7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f0:	66 3d 1a 03          	cmp    ax,0x31a
c00160f4:	75 06                	jne    c00160fc <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160f6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160fc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016100:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016103:	83 f0 01             	xor    eax,0x1
c0016106:	84 c0                	test   al,al
c0016108:	74 77                	je     c0016181 <sendKeyboardToken(KeyboardToken)+0x33f>
c001610a:	a0 61 e8 02 c0       	mov    al,ds:0xc002e861
c001610f:	84 c0                	test   al,al
c0016111:	74 41                	je     c0016154 <sendKeyboardToken(KeyboardToken)+0x312>
c0016113:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016117:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001611b:	74 2b                	je     c0016148 <sendKeyboardToken(KeyboardToken)+0x306>
c001611d:	8b 15 64 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb64
c0016123:	89 d0                	mov    eax,edx
c0016125:	c1 e0 02             	shl    eax,0x2
c0016128:	01 d0                	add    eax,edx
c001612a:	01 c0                	add    eax,eax
c001612c:	a3 64 eb 02 c0       	mov    ds:0xc002eb64,eax
c0016131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016134:	0f b7 c0             	movzx  eax,ax
c0016137:	8d 50 d0             	lea    edx,[eax-0x30]
c001613a:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c001613f:	01 d0                	add    eax,edx
c0016141:	a3 64 eb 02 c0       	mov    ds:0xc002eb64,eax
c0016146:	eb 6d                	jmp    c00161b5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016148:	c7 05 64 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb64,0x0
c0016152:	eb 61                	jmp    c00161b5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016154:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c0016159:	85 c0                	test   eax,eax
c001615b:	74 18                	je     c0016175 <sendKeyboardToken(KeyboardToken)+0x333>
c001615d:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c0016162:	0f b6 c0             	movzx  eax,al
c0016165:	83 ec 0c             	sub    esp,0xc
c0016168:	50                   	push   eax
c0016169:	e8 68 fc ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016175:	c7 05 64 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb64,0x0
c001617f:	eb 34                	jmp    c00161b5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016184:	66 3d 01 01          	cmp    ax,0x101
c0016188:	75 2b                	jne    c00161b5 <sendKeyboardToken(KeyboardToken)+0x373>
c001618a:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c001618f:	85 c0                	test   eax,eax
c0016191:	74 18                	je     c00161ab <sendKeyboardToken(KeyboardToken)+0x369>
c0016193:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c0016198:	0f b6 c0             	movzx  eax,al
c001619b:	83 ec 0c             	sub    esp,0xc
c001619e:	50                   	push   eax
c001619f:	e8 32 fc ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c00161a4:	83 c4 10             	add    esp,0x10
c00161a7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ab:	c7 05 64 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb64,0x0
c00161b5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161b8:	83 f0 01             	xor    eax,0x1
c00161bb:	84 c0                	test   al,al
c00161bd:	74 4c                	je     c001620b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161bf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161c2:	83 f0 01             	xor    eax,0x1
c00161c5:	84 c0                	test   al,al
c00161c7:	74 42                	je     c001620b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161c9:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c00161ce:	83 f0 01             	xor    eax,0x1
c00161d1:	84 c0                	test   al,al
c00161d3:	74 36                	je     c001620b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d8:	66 83 f8 1f          	cmp    ax,0x1f
c00161dc:	76 09                	jbe    c00161e7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e1:	66 83 f8 7e          	cmp    ax,0x7e
c00161e5:	76 12                	jbe    c00161f9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ea:	66 83 f8 0a          	cmp    ax,0xa
c00161ee:	74 09                	je     c00161f9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f3:	66 83 f8 08          	cmp    ax,0x8
c00161f7:	75 12                	jne    c001620b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fc:	0f b6 c0             	movzx  eax,al
c00161ff:	83 ec 0c             	sub    esp,0xc
c0016202:	50                   	push   eax
c0016203:	e8 ce fb ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001620e:	83 f0 01             	xor    eax,0x1
c0016211:	84 c0                	test   al,al
c0016213:	74 4f                	je     c0016264 <sendKeyboardToken(KeyboardToken)+0x422>
c0016215:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016218:	83 f0 01             	xor    eax,0x1
c001621b:	84 c0                	test   al,al
c001621d:	74 45                	je     c0016264 <sendKeyboardToken(KeyboardToken)+0x422>
c001621f:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0016224:	84 c0                	test   al,al
c0016226:	74 3c                	je     c0016264 <sendKeyboardToken(KeyboardToken)+0x422>
c0016228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622b:	66 83 f8 3f          	cmp    ax,0x3f
c001622f:	76 33                	jbe    c0016264 <sendKeyboardToken(KeyboardToken)+0x422>
c0016231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016234:	66 83 f8 7f          	cmp    ax,0x7f
c0016238:	77 2a                	ja     c0016264 <sendKeyboardToken(KeyboardToken)+0x422>
c001623a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623d:	88 c2                	mov    dl,al
c001623f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016242:	66 83 f8 5f          	cmp    ax,0x5f
c0016246:	76 04                	jbe    c001624c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016248:	b0 20                	mov    al,0x20
c001624a:	eb 02                	jmp    c001624e <sendKeyboardToken(KeyboardToken)+0x40c>
c001624c:	b0 00                	mov    al,0x0
c001624e:	29 c2                	sub    edx,eax
c0016250:	88 d0                	mov    al,dl
c0016252:	83 e8 40             	sub    eax,0x40
c0016255:	0f b6 c0             	movzx  eax,al
c0016258:	83 ec 0c             	sub    esp,0xc
c001625b:	50                   	push   eax
c001625c:	e8 75 fb ff ff       	call   c0015dd6 <sendKeyToTerminal(unsigned char)>
c0016261:	83 c4 10             	add    esp,0x10
c0016264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016267:	66 3d 00 03          	cmp    ax,0x300
c001626b:	75 0f                	jne    c001627c <sendKeyboardToken(KeyboardToken)+0x43a>
c001626d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016270:	83 f0 01             	xor    eax,0x1
c0016273:	84 c0                	test   al,al
c0016275:	74 05                	je     c001627c <sendKeyboardToken(KeyboardToken)+0x43a>
c0016277:	e8 bd ab ff ff       	call   c0010e39 <doTerminalCycle()>
c001627c:	90                   	nop
c001627d:	c9                   	leave  
c001627e:	c3                   	ret    

c001627f <clearInternalKeybuffer(VgaText*)>:
c001627f:	55                   	push   ebp
c0016280:	89 e5                	mov    ebp,esp
c0016282:	83 ec 08             	sub    esp,0x8
c0016285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016288:	05 34 11 00 00       	add    eax,0x1134
c001628d:	83 ec 0c             	sub    esp,0xc
c0016290:	50                   	push   eax
c0016291:	e8 fe a4 fe ff       	call   c0000794 <strlen>
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001629c:	81 c2 34 11 00 00    	add    edx,0x1134
c00162a2:	83 ec 04             	sub    esp,0x4
c00162a5:	50                   	push   eax
c00162a6:	6a 00                	push   0x0
c00162a8:	52                   	push   edx
c00162a9:	e8 ca a4 fe ff       	call   c0000778 <memset>
c00162ae:	83 c4 10             	add    esp,0x10
c00162b1:	90                   	nop
c00162b2:	c9                   	leave  
c00162b3:	c3                   	ret    

c00162b4 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162b4:	55                   	push   ebp
c00162b5:	89 e5                	mov    ebp,esp
c00162b7:	83 ec 18             	sub    esp,0x18
c00162ba:	fb                   	sti    
c00162bb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162c2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162c6:	0f 84 8a 00 00 00    	je     c0016356 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00162cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cf:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162d5:	84 c0                	test   al,al
c00162d7:	75 11                	jne    c00162ea <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00162d9:	e8 fa 7a 00 00       	call   c001ddd8 <lockScheduler()>
c00162de:	e8 31 7e 00 00       	call   c001e114 <schedule()>
c00162e3:	e8 f2 7a 00 00       	call   c001ddda <unlockScheduler()>
c00162e8:	eb e2                	jmp    c00162cc <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162ed:	8d 50 01             	lea    edx,[eax+0x1]
c00162f0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f6:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162fc:	88 10                	mov    BYTE PTR [eax],dl
c00162fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016301:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016307:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630d:	05 34 11 00 00       	add    eax,0x1134
c0016312:	83 ec 0c             	sub    esp,0xc
c0016315:	50                   	push   eax
c0016316:	e8 79 a4 fe ff       	call   c0000794 <strlen>
c001631b:	83 c4 10             	add    esp,0x10
c001631e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016321:	81 c2 34 11 00 00    	add    edx,0x1134
c0016327:	8d 4a 01             	lea    ecx,[edx+0x1]
c001632a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001632d:	81 c2 34 11 00 00    	add    edx,0x1134
c0016333:	83 ec 04             	sub    esp,0x4
c0016336:	50                   	push   eax
c0016337:	51                   	push   ecx
c0016338:	52                   	push   edx
c0016339:	e8 3e a3 fe ff       	call   c000067c <memmove>
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016344:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016347:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001634b:	0f 85 71 ff ff ff    	jne    c00162c2 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016351:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016354:	eb 03                	jmp    c0016359 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016359:	c9                   	leave  
c001635a:	c3                   	ret    
c001635b:	90                   	nop

c001635c <Keyboard::Keyboard(char const*)>:
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016363:	83 ec 08             	sub    esp,0x8
c0016366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001636a:	50                   	push   eax
c001636b:	e8 b8 e1 ff ff       	call   c0014528 <Device::Device(char const*)>
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c0016378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637c:	89 10                	mov    DWORD PTR [eax],edx
c001637e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016382:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001638c:	c6 05 44 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e744,0x1
c0016393:	90                   	nop
c0016394:	83 c4 0c             	add    esp,0xc
c0016397:	c3                   	ret    

c0016398 <Keyboard::~Keyboard()>:
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c00163a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a4:	89 10                	mov    DWORD PTR [eax],edx
c00163a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	50                   	push   eax
c00163ae:	e8 57 de ff ff       	call   c001420a <Device::~Device()>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	90                   	nop
c00163b7:	83 c4 0c             	add    esp,0xc
c00163ba:	c3                   	ret    
c00163bb:	90                   	nop

c00163bc <Keyboard::~Keyboard()>:
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	83 ec 0c             	sub    esp,0xc
c00163c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c6:	e8 cd ff ff ff       	call   c0016398 <Keyboard::~Keyboard()>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	83 ec 08             	sub    esp,0x8
c00163d1:	68 5c 01 00 00       	push   0x15c
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	e8 53 ca ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	83 c4 0c             	add    esp,0xc
c00163e5:	c3                   	ret    

c00163e6 <LogicalDisk::close(int, int, void*)>:
c00163e6:	83 c8 ff             	or     eax,0xffffffff
c00163e9:	c3                   	ret    

c00163ea <LogicalDisk::~LogicalDisk()>:
c00163ea:	83 ec 0c             	sub    esp,0xc
c00163ed:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	89 10                	mov    DWORD PTR [eax],edx
c00163f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	50                   	push   eax
c0016400:	e8 05 de ff ff       	call   c001420a <Device::~Device()>
c0016405:	83 c4 10             	add    esp,0x10
c0016408:	90                   	nop
c0016409:	83 c4 0c             	add    esp,0xc
c001640c:	c3                   	ret    
c001640d:	90                   	nop

c001640e <LogicalDisk::~LogicalDisk()>:
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	83 ec 0c             	sub    esp,0xc
c0016414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016418:	e8 cd ff ff ff       	call   c00163ea <LogicalDisk::~LogicalDisk()>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	83 ec 08             	sub    esp,0x8
c0016423:	68 74 01 00 00       	push   0x174
c0016428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001642c:	e8 01 ca ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0016431:	83 c4 10             	add    esp,0x10
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	c3                   	ret    

c0016438 <LogicalDisk::open(int, int, void*)>:
c0016438:	83 ec 18             	sub    esp,0x18
c001643b:	68 b4 b2 02 c0       	push   0xc002b2b4
c0016440:	e8 6e 41 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0016445:	83 c8 ff             	or     eax,0xffffffff
c0016448:	83 c4 1c             	add    esp,0x1c
c001644b:	c3                   	ret    

c001644c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001644c:	53                   	push   ebx
c001644d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016455:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016459:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001645f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016465:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001646b:	77 10                	ja     c001647d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001646d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016473:	89 d3                	mov    ebx,edx
c0016475:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001647b:	72 05                	jb     c0016482 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001647d:	83 c8 ff             	or     eax,0xffffffff
c0016480:	89 c2                	mov    edx,eax
c0016482:	5b                   	pop    ebx
c0016483:	c3                   	ret    

c0016484 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016484:	56                   	push   esi
c0016485:	83 c8 ff             	or     eax,0xffffffff
c0016488:	53                   	push   ebx
c0016489:	89 c2                	mov    edx,eax
c001648b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001648f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016493:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016497:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001649d:	77 27                	ja     c00164c6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001649f:	89 d8                	mov    eax,ebx
c00164a1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164a7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164b2:	89 c2                	mov    edx,eax
c00164b4:	73 10                	jae    c00164c6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164b6:	89 c8                	mov    eax,ecx
c00164b8:	89 da                	mov    edx,ebx
c00164ba:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164c0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164c6:	5b                   	pop    ebx
c00164c7:	5e                   	pop    esi
c00164c8:	c3                   	ret    
c00164c9:	90                   	nop

c00164ca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164ca:	83 ec 1c             	sub    esp,0x1c
c00164cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00164e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f0:	83 ec 08             	sub    esp,0x8
c00164f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164f7:	50                   	push   eax
c00164f8:	e8 2b e0 ff ff       	call   c0014528 <Device::Device(char const*)>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c0016505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016509:	89 10                	mov    DWORD PTR [eax],edx
c001650b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016525:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001652f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016537:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001653b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016541:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016547:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001654b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001654e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016552:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016558:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001655e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016562:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016566:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001656c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016570:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001657a:	90                   	nop
c001657b:	83 c4 1c             	add    esp,0x1c
c001657e:	c3                   	ret    
c001657f:	90                   	nop

c0016580 <LogicalDisk::assignDriveLetter()>:
c0016580:	55                   	push   ebp
c0016581:	57                   	push   edi
c0016582:	56                   	push   esi
c0016583:	53                   	push   ebx
c0016584:	83 ec 14             	sub    esp,0x14
c0016587:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001658b:	8b 3d 80 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb80
c0016591:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016597:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001659b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165a1:	8b 3d 84 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb84
c00165a7:	3c 01                	cmp    al,0x1
c00165a9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165b1:	19 c0                	sbb    eax,eax
c00165b3:	83 e0 02             	and    eax,0x2
c00165b6:	83 c0 41             	add    eax,0x41
c00165b9:	0f be e8             	movsx  ebp,al
c00165bc:	3c 43                	cmp    al,0x43
c00165be:	75 10                	jne    c00165d0 <LogicalDisk::assignDriveLetter()+0x50>
c00165c0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165c7:	75 5d                	jne    c0016626 <LogicalDisk::assignDriveLetter()+0xa6>
c00165c9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00165ce:	75 56                	jne    c0016626 <LogicalDisk::assignDriveLetter()+0xa6>
c00165d0:	8d 75 bf             	lea    esi,[ebp-0x41]
c00165d3:	ba 01 00 00 00       	mov    edx,0x1
c00165d8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165dc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165e0:	d3 e2                	shl    edx,cl
c00165e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165e6:	89 d7                	mov    edi,edx
c00165e8:	89 d6                	mov    esi,edx
c00165ea:	c1 ff 1f             	sar    edi,0x1f
c00165ed:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165f1:	21 f9                	and    ecx,edi
c00165f3:	09 d1                	or     ecx,edx
c00165f5:	75 2f                	jne    c0016626 <LogicalDisk::assignDriveLetter()+0xa6>
c00165f7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165ff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016605:	09 f2                	or     edx,esi
c0016607:	89 15 80 eb 02 c0    	mov    DWORD PTR ds:0xc002eb80,edx
c001660d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016611:	09 fa                	or     edx,edi
c0016613:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016617:	89 15 84 eb 02 c0    	mov    DWORD PTR ds:0xc002eb84,edx
c001661d:	89 1c bd a0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1460],ebx
c0016624:	eb 08                	jmp    c001662e <LogicalDisk::assignDriveLetter()+0xae>
c0016626:	45                   	inc    ebp
c0016627:	40                   	inc    eax
c0016628:	3c 5b                	cmp    al,0x5b
c001662a:	75 90                	jne    c00165bc <LogicalDisk::assignDriveLetter()+0x3c>
c001662c:	31 c0                	xor    eax,eax
c001662e:	83 c4 14             	add    esp,0x14
c0016631:	5b                   	pop    ebx
c0016632:	5e                   	pop    esi
c0016633:	5f                   	pop    edi
c0016634:	5d                   	pop    ebp
c0016635:	c3                   	ret    

c0016636 <LogicalDisk::mount()>:
c0016636:	56                   	push   esi
c0016637:	53                   	push   ebx
c0016638:	51                   	push   ecx
c0016639:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001663d:	8b 1d 0c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e70c
c0016643:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001664d:	85 db                	test   ebx,ebx
c001664f:	74 50                	je     c00166a1 <LogicalDisk::mount()+0x6b>
c0016651:	e8 6d 77 00 00       	call   c001ddc3 <getIRQNestingLevel()>
c0016656:	52                   	push   edx
c0016657:	52                   	push   edx
c0016658:	50                   	push   eax
c0016659:	68 d8 b2 02 c0       	push   0xc002b2d8
c001665e:	e8 af c8 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0016663:	83 c4 0c             	add    esp,0xc
c0016666:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001666d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001666f:	83 e8 41             	sub    eax,0x41
c0016672:	50                   	push   eax
c0016673:	56                   	push   esi
c0016674:	53                   	push   ebx
c0016675:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016678:	83 c4 10             	add    esp,0x10
c001667b:	84 c0                	test   al,al
c001667d:	74 08                	je     c0016687 <LogicalDisk::mount()+0x51>
c001667f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016685:	eb 1c                	jmp    c00166a3 <LogicalDisk::mount()+0x6d>
c0016687:	e8 37 77 00 00       	call   c001ddc3 <getIRQNestingLevel()>
c001668c:	51                   	push   ecx
c001668d:	51                   	push   ecx
c001668e:	50                   	push   eax
c001668f:	68 f3 b2 02 c0       	push   0xc002b2f3
c0016694:	e8 79 c8 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0016699:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001669c:	83 c4 10             	add    esp,0x10
c001669f:	eb ac                	jmp    c001664d <LogicalDisk::mount()+0x17>
c00166a1:	31 c0                	xor    eax,eax
c00166a3:	5a                   	pop    edx
c00166a4:	5b                   	pop    ebx
c00166a5:	5e                   	pop    esi
c00166a6:	c3                   	ret    
c00166a7:	90                   	nop

c00166a8 <LogicalDisk::unmount()>:
c00166a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166b6:	c3                   	ret    
c00166b7:	90                   	nop

c00166b8 <LogicalDisk::eject()>:
c00166b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00166c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166c8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166cb:	90                   	nop

c00166cc <LogicalDisk::unassignDriveLetter()>:
c00166cc:	57                   	push   edi
c00166cd:	56                   	push   esi
c00166ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166d2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00166d9:	84 c9                	test   cl,cl
c00166db:	75 0f                	jne    c00166ec <LogicalDisk::unassignDriveLetter()+0x20>
c00166dd:	c7 44 24 0c 0e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b30e
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	e9 c7 3e 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>
c00166ec:	83 e9 41             	sub    ecx,0x41
c00166ef:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166f6:	b8 01 00 00 00       	mov    eax,0x1
c00166fb:	c7 04 8d a0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1460],0x0
c0016706:	d3 e0                	shl    eax,cl
c0016708:	89 c7                	mov    edi,eax
c001670a:	f7 d0                	not    eax
c001670c:	c1 ff 1f             	sar    edi,0x1f
c001670f:	21 05 80 eb 02 c0    	and    DWORD PTR ds:0xc002eb80,eax
c0016715:	89 fe                	mov    esi,edi
c0016717:	f7 d6                	not    esi
c0016719:	21 35 84 eb 02 c0    	and    DWORD PTR ds:0xc002eb84,esi
c001671f:	5e                   	pop    esi
c0016720:	5f                   	pop    edi
c0016721:	c3                   	ret    

c0016722 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016722:	57                   	push   edi
c0016723:	56                   	push   esi
c0016724:	53                   	push   ebx
c0016725:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016729:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001672d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016735:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001673b:	77 41                	ja     c001677e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001673d:	99                   	cdq    
c001673e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016744:	01 c8                	add    eax,ecx
c0016746:	11 da                	adc    edx,ebx
c0016748:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001674e:	19 d7                	sbb    edi,edx
c0016750:	72 33                	jb     c0016785 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016752:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016758:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001675e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016762:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016766:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001676c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016772:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016776:	5b                   	pop    ebx
c0016777:	5e                   	pop    esi
c0016778:	5f                   	pop    edi
c0016779:	e9 b0 0a 00 00       	jmp    c001722e <VCache::read(unsigned long long, int, void*)>
c001677e:	b8 05 00 00 00       	mov    eax,0x5
c0016783:	eb 05                	jmp    c001678a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016785:	b8 07 00 00 00       	mov    eax,0x7
c001678a:	5b                   	pop    ebx
c001678b:	5e                   	pop    esi
c001678c:	5f                   	pop    edi
c001678d:	c3                   	ret    

c001678e <LogicalDisk::write(unsigned long long, int, void*)>:
c001678e:	57                   	push   edi
c001678f:	56                   	push   esi
c0016790:	53                   	push   ebx
c0016791:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016799:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001679d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167a1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167a7:	77 41                	ja     c00167ea <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167a9:	99                   	cdq    
c00167aa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167b0:	01 c8                	add    eax,ecx
c00167b2:	11 da                	adc    edx,ebx
c00167b4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167ba:	19 d7                	sbb    edi,edx
c00167bc:	72 33                	jb     c00167f1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167be:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167c4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167ce:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167d2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167e2:	5b                   	pop    ebx
c00167e3:	5e                   	pop    esi
c00167e4:	5f                   	pop    edi
c00167e5:	e9 4e 09 00 00       	jmp    c0017138 <VCache::write(unsigned long long, int, void*)>
c00167ea:	b8 05 00 00 00       	mov    eax,0x5
c00167ef:	eb 05                	jmp    c00167f6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167f1:	b8 07 00 00 00       	mov    eax,0x7
c00167f6:	5b                   	pop    ebx
c00167f7:	5e                   	pop    esi
c00167f8:	5f                   	pop    edi
c00167f9:	c3                   	ret    

c00167fa <Mouse::Mouse(char const*)>:
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016801:	83 ec 08             	sub    esp,0x8
c0016804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016808:	50                   	push   eax
c0016809:	e8 1a dd ff ff       	call   c0014528 <Device::Device(char const*)>
c001680e:	83 c4 10             	add    esp,0x10
c0016811:	ba 64 b3 02 c0       	mov    edx,0xc002b364
c0016816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681a:	89 10                	mov    DWORD PTR [eax],edx
c001681c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016820:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001682a:	90                   	nop
c001682b:	83 c4 0c             	add    esp,0xc
c001682e:	c3                   	ret    
c001682f:	90                   	nop

c0016830 <Mouse::~Mouse()>:
c0016830:	83 ec 0c             	sub    esp,0xc
c0016833:	ba 64 b3 02 c0       	mov    edx,0xc002b364
c0016838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683c:	89 10                	mov    DWORD PTR [eax],edx
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	50                   	push   eax
c0016846:	e8 bf d9 ff ff       	call   c001420a <Device::~Device()>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	90                   	nop
c001684f:	83 c4 0c             	add    esp,0xc
c0016852:	c3                   	ret    
c0016853:	90                   	nop

c0016854 <Mouse::~Mouse()>:
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	83 ec 0c             	sub    esp,0xc
c001685a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001685e:	e8 cd ff ff ff       	call   c0016830 <Mouse::~Mouse()>
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	83 ec 08             	sub    esp,0x8
c0016869:	68 58 01 00 00       	push   0x158
c001686e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016872:	e8 bb c5 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	83 c4 0c             	add    esp,0xc
c001687d:	c3                   	ret    

c001687e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001687e:	55                   	push   ebp
c001687f:	57                   	push   edi
c0016880:	56                   	push   esi
c0016881:	53                   	push   ebx
c0016882:	81 ec 28 01 00 00    	sub    esp,0x128
c0016888:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001688f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016896:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001689d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168a8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168ac:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168b3:	e8 6c dd ff ff       	call   c0014624 <Device::getName()>
c00168b8:	5a                   	pop    edx
c00168b9:	59                   	pop    ecx
c00168ba:	50                   	push   eax
c00168bb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168bf:	55                   	push   ebp
c00168c0:	e8 6f 9f fe ff       	call   c0000834 <strcpy>
c00168c5:	5b                   	pop    ebx
c00168c6:	58                   	pop    eax
c00168c7:	68 88 b3 02 c0       	push   0xc002b388
c00168cc:	55                   	push   ebp
c00168cd:	e8 a2 a0 fe ff       	call   c0000974 <strcat>
c00168d2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00168d9:	e8 62 8f ff ff       	call   c000f840 <malloc>
c00168de:	83 c4 0c             	add    esp,0xc
c00168e1:	89 c3                	mov    ebx,eax
c00168e3:	57                   	push   edi
c00168e4:	56                   	push   esi
c00168e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168ed:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168f4:	55                   	push   ebp
c00168f5:	50                   	push   eax
c00168f6:	e8 cf fb ff ff       	call   c00164ca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168fb:	83 c4 14             	add    esp,0x14
c00168fe:	53                   	push   ebx
c00168ff:	e8 7c fc ff ff       	call   c0016580 <LogicalDisk::assignDriveLetter()>
c0016904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016907:	89 c6                	mov    esi,eax
c0016909:	e8 28 fd ff ff       	call   c0016636 <LogicalDisk::mount()>
c001690e:	58                   	pop    eax
c001690f:	5a                   	pop    edx
c0016910:	53                   	push   ebx
c0016911:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016918:	e8 1b da ff ff       	call   c0014338 <Device::addChild(Device*)>
c001691d:	59                   	pop    ecx
c001691e:	89 f0                	mov    eax,esi
c0016920:	5b                   	pop    ebx
c0016921:	0f be f0             	movsx  esi,al
c0016924:	56                   	push   esi
c0016925:	68 93 b3 02 c0       	push   0xc002b393
c001692a:	e8 e3 c5 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001692f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016935:	5b                   	pop    ebx
c0016936:	5e                   	pop    esi
c0016937:	5f                   	pop    edi
c0016938:	5d                   	pop    ebp
c0016939:	c3                   	ret    

c001693a <createPartitionsForDisk(PhysicalDisk*)>:
c001693a:	55                   	push   ebp
c001693b:	57                   	push   edi
c001693c:	56                   	push   esi
c001693d:	53                   	push   ebx
c001693e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016944:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001694b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016951:	3d 00 02 00 00       	cmp    eax,0x200
c0016956:	74 27                	je     c001697f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016958:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001695e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016964:	83 ec 10             	sub    esp,0x10
c0016967:	0f a4 f7 0a          	shld   edi,esi,0xa
c001696b:	99                   	cdq    
c001696c:	c1 e6 0a             	shl    esi,0xa
c001696f:	52                   	push   edx
c0016970:	89 fd                	mov    ebp,edi
c0016972:	50                   	push   eax
c0016973:	55                   	push   ebp
c0016974:	56                   	push   esi
c0016975:	e8 42 00 01 00       	call   c00269bc <__udivdi3>
c001697a:	e9 b1 00 00 00       	jmp    c0016a30 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001697f:	83 ec 0c             	sub    esp,0xc
c0016982:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016984:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016988:	56                   	push   esi
c0016989:	6a 01                	push   0x1
c001698b:	6a 00                	push   0x0
c001698d:	6a 00                	push   0x0
c001698f:	53                   	push   ebx
c0016990:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016993:	83 c4 20             	add    esp,0x20
c0016996:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001699e:	75 0a                	jne    c00169aa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169a0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169a8:	74 2c                	je     c00169d6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169bc:	83 ec 10             	sub    esp,0x10
c00169bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169c3:	89 f7                	mov    edi,esi
c00169c5:	c1 e0 0a             	shl    eax,0xa
c00169c8:	c1 ff 1f             	sar    edi,0x1f
c00169cb:	57                   	push   edi
c00169cc:	56                   	push   esi
c00169cd:	52                   	push   edx
c00169ce:	50                   	push   eax
c00169cf:	e8 e8 ff 00 00       	call   c00269bc <__udivdi3>
c00169d4:	eb 5a                	jmp    c0016a30 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169d6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169dd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169e4:	83 e1 7f             	and    ecx,0x7f
c00169e7:	83 e0 7f             	and    eax,0x7f
c00169ea:	01 c1                	add    ecx,eax
c00169ec:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169f3:	83 e0 7f             	and    eax,0x7f
c00169f6:	01 c1                	add    ecx,eax
c00169f8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169ff:	83 e0 7f             	and    eax,0x7f
c0016a02:	00 c1                	add    cl,al
c0016a04:	74 41                	je     c0016a47 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a06:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a0c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a18:	83 ec 10             	sub    esp,0x10
c0016a1b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a1f:	89 f7                	mov    edi,esi
c0016a21:	c1 e0 0a             	shl    eax,0xa
c0016a24:	c1 ff 1f             	sar    edi,0x1f
c0016a27:	57                   	push   edi
c0016a28:	56                   	push   esi
c0016a29:	52                   	push   edx
c0016a2a:	50                   	push   eax
c0016a2b:	e8 8c ff 00 00       	call   c00269bc <__udivdi3>
c0016a30:	83 c4 14             	add    esp,0x14
c0016a33:	52                   	push   edx
c0016a34:	50                   	push   eax
c0016a35:	6a 00                	push   0x0
c0016a37:	6a 00                	push   0x0
c0016a39:	53                   	push   ebx
c0016a3a:	e8 3f fe ff ff       	call   c001687e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a3f:	83 c4 20             	add    esp,0x20
c0016a42:	e9 79 01 00 00       	jmp    c0016bc0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a47:	89 f0                	mov    eax,esi
c0016a49:	31 f6                	xor    esi,esi
c0016a4b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a52:	75 02                	jne    c0016a56 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a54:	89 f1                	mov    ecx,esi
c0016a56:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a5d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a64:	c1 e2 08             	shl    edx,0x8
c0016a67:	c1 e7 10             	shl    edi,0x10
c0016a6a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a72:	09 fa                	or     edx,edi
c0016a74:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a7c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a83:	83 c0 10             	add    eax,0x10
c0016a86:	09 fa                	or     edx,edi
c0016a88:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a8f:	c1 e7 18             	shl    edi,0x18
c0016a92:	09 fa                	or     edx,edi
c0016a94:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a9b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a9f:	c1 e7 10             	shl    edi,0x10
c0016aa2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016aa9:	c1 e2 08             	shl    edx,0x8
c0016aac:	09 fa                	or     edx,edi
c0016aae:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016ab5:	09 fa                	or     edx,edi
c0016ab7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016abe:	c1 e7 18             	shl    edi,0x18
c0016ac1:	09 fa                	or     edx,edi
c0016ac3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016ac7:	46                   	inc    esi
c0016ac8:	83 fe 04             	cmp    esi,0x4
c0016acb:	0f 85 7a ff ff ff    	jne    c0016a4b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad5:	83 f0 01             	xor    eax,0x1
c0016ad8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016adc:	75 57                	jne    c0016b35 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ae2:	83 f0 01             	xor    eax,0x1
c0016ae5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ae9:	75 4a                	jne    c0016b35 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016aeb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016aef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016af7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016aff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b05:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b0b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b11:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b15:	89 f7                	mov    edi,esi
c0016b17:	c1 e0 0a             	shl    eax,0xa
c0016b1a:	c1 ff 1f             	sar    edi,0x1f
c0016b1d:	57                   	push   edi
c0016b1e:	56                   	push   esi
c0016b1f:	52                   	push   edx
c0016b20:	50                   	push   eax
c0016b21:	e8 96 fe 00 00       	call   c00269bc <__udivdi3>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b31:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b35:	84 c9                	test   cl,cl
c0016b37:	74 53                	je     c0016b8c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b39:	0f b6 c9             	movzx  ecx,cl
c0016b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b48:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b54:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b58:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b6c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b70:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b74:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b78:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b84:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b88:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b8c:	31 ed                	xor    ebp,ebp
c0016b8e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b92:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b96:	89 f8                	mov    eax,edi
c0016b98:	09 f0                	or     eax,esi
c0016b9a:	74 1e                	je     c0016bba <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b9c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ba0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016ba4:	89 d1                	mov    ecx,edx
c0016ba6:	09 c1                	or     ecx,eax
c0016ba8:	74 10                	je     c0016bba <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016baa:	83 ec 0c             	sub    esp,0xc
c0016bad:	57                   	push   edi
c0016bae:	56                   	push   esi
c0016baf:	52                   	push   edx
c0016bb0:	50                   	push   eax
c0016bb1:	53                   	push   ebx
c0016bb2:	e8 c7 fc ff ff       	call   c001687e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bb7:	83 c4 20             	add    esp,0x20
c0016bba:	45                   	inc    ebp
c0016bbb:	83 fd 04             	cmp    ebp,0x4
c0016bbe:	75 ce                	jne    c0016b8e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bc0:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016bc6:	5b                   	pop    ebx
c0016bc7:	5e                   	pop    esi
c0016bc8:	5f                   	pop    edi
c0016bc9:	5d                   	pop    ebp
c0016bca:	c3                   	ret    
c0016bcb:	90                   	nop

c0016bcc <Serial::Serial(char const*)>:
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd3:	83 ec 08             	sub    esp,0x8
c0016bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bda:	50                   	push   eax
c0016bdb:	e8 48 d9 ff ff       	call   c0014528 <Device::Device(char const*)>
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c0016be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bec:	89 10                	mov    DWORD PTR [eax],edx
c0016bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bfc:	90                   	nop
c0016bfd:	83 c4 0c             	add    esp,0xc
c0016c00:	c3                   	ret    
c0016c01:	90                   	nop

c0016c02 <Serial::~Serial()>:
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c0016c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0e:	89 10                	mov    DWORD PTR [eax],edx
c0016c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	50                   	push   eax
c0016c18:	e8 ed d5 ff ff       	call   c001420a <Device::~Device()>
c0016c1d:	83 c4 10             	add    esp,0x10
c0016c20:	90                   	nop
c0016c21:	83 c4 0c             	add    esp,0xc
c0016c24:	c3                   	ret    
c0016c25:	90                   	nop

c0016c26 <Serial::~Serial()>:
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	83 ec 0c             	sub    esp,0xc
c0016c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c30:	e8 cd ff ff ff       	call   c0016c02 <Serial::~Serial()>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	83 ec 08             	sub    esp,0x8
c0016c3b:	68 58 01 00 00       	push   0x158
c0016c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c44:	e8 e9 c1 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0016c49:	83 c4 10             	add    esp,0x10
c0016c4c:	83 c4 0c             	add    esp,0xc
c0016c4f:	c3                   	ret    

c0016c50 <Timer::Timer(char const*)>:
c0016c50:	83 ec 0c             	sub    esp,0xc
c0016c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c57:	83 ec 08             	sub    esp,0x8
c0016c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c5e:	50                   	push   eax
c0016c5f:	e8 c4 d8 ff ff       	call   c0014528 <Device::Device(char const*)>
c0016c64:	83 c4 10             	add    esp,0x10
c0016c67:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0016c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c70:	89 10                	mov    DWORD PTR [eax],edx
c0016c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c76:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c80:	90                   	nop
c0016c81:	83 c4 0c             	add    esp,0xc
c0016c84:	c3                   	ret    
c0016c85:	90                   	nop

c0016c86 <Timer::~Timer()>:
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0016c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c92:	89 10                	mov    DWORD PTR [eax],edx
c0016c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	50                   	push   eax
c0016c9c:	e8 69 d5 ff ff       	call   c001420a <Device::~Device()>
c0016ca1:	83 c4 10             	add    esp,0x10
c0016ca4:	90                   	nop
c0016ca5:	83 c4 0c             	add    esp,0xc
c0016ca8:	c3                   	ret    
c0016ca9:	90                   	nop

c0016caa <Timer::~Timer()>:
c0016caa:	83 ec 0c             	sub    esp,0xc
c0016cad:	83 ec 0c             	sub    esp,0xc
c0016cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb4:	e8 cd ff ff ff       	call   c0016c86 <Timer::~Timer()>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	83 ec 08             	sub    esp,0x8
c0016cbf:	68 5c 01 00 00       	push   0x15c
c0016cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc8:	e8 65 c1 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	83 c4 0c             	add    esp,0xc
c0016cd3:	c3                   	ret    

c0016cd4 <Timer::read()>:
c0016cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cd8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016cde:	c3                   	ret    

c0016cdf <timerHandler(unsigned long long)>:
c0016cdf:	55                   	push   ebp
c0016ce0:	57                   	push   edi
c0016ce1:	56                   	push   esi
c0016ce2:	53                   	push   ebx
c0016ce3:	83 ec 0c             	sub    esp,0xc
c0016ce6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cea:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016cee:	01 35 10 ec 02 c0    	add    DWORD PTR ds:0xc002ec10,esi
c0016cf4:	11 3d 14 ec 02 c0    	adc    DWORD PTR ds:0xc002ec14,edi
c0016cfa:	80 3d 8d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e58d,0x0
c0016d01:	0f 84 07 01 00 00    	je     c0016e0e <timerHandler(unsigned long long)+0x12f>
c0016d07:	e8 f3 70 00 00       	call   c001ddff <lockStuff()>
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	68 dc 1a 03 c0       	push   0xc0031adc
c0016d14:	e8 15 1d 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d19:	c7 04 24 dc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031adc
c0016d20:	89 c3                	mov    ebx,eax
c0016d22:	e8 0f 1d 01 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	84 c0                	test   al,al
c0016d2c:	74 60                	je     c0016d8e <timerHandler(unsigned long long)+0xaf>
c0016d2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d34:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d37:	85 c0                	test   eax,eax
c0016d39:	0f 85 91 00 00 00    	jne    c0016dd0 <timerHandler(unsigned long long)+0xf1>
c0016d3f:	e9 be 00 00 00       	jmp    c0016e02 <timerHandler(unsigned long long)+0x123>
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	55                   	push   ebp
c0016d48:	e8 a3 76 00 00       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	39 eb                	cmp    ebx,ebp
c0016d52:	75 12                	jne    c0016d66 <timerHandler(unsigned long long)+0x87>
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 dc 1a 03 c0       	push   0xc0031adc
c0016d5c:	e8 cd 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d61:	89 c3                	mov    ebx,eax
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	68 dc 1a 03 c0       	push   0xc0031adc
c0016d6e:	e8 c3 1c 01 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	84 c0                	test   al,al
c0016d78:	75 b4                	jne    c0016d2e <timerHandler(unsigned long long)+0x4f>
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	68 dc 1a 03 c0       	push   0xc0031adc
c0016d82:	e8 a7 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	39 d8                	cmp    eax,ebx
c0016d8c:	74 a0                	je     c0016d2e <timerHandler(unsigned long long)+0x4f>
c0016d8e:	83 ec 0c             	sub    esp,0xc
c0016d91:	68 dc 1a 03 c0       	push   0xc0031adc
c0016d96:	e8 93 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d9b:	c7 04 24 dc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031adc
c0016da2:	89 c5                	mov    ebp,eax
c0016da4:	e8 a9 1c 01 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016da9:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016dac:	83 c4 10             	add    esp,0x10
c0016daf:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016db2:	39 15 10 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec10,edx
c0016db8:	a1 14 ec 02 c0       	mov    eax,ds:0xc002ec14
c0016dbd:	19 c8                	sbb    eax,ecx
c0016dbf:	73 83                	jae    c0016d44 <timerHandler(unsigned long long)+0x65>
c0016dc1:	50                   	push   eax
c0016dc2:	50                   	push   eax
c0016dc3:	55                   	push   ebp
c0016dc4:	68 dc 1a 03 c0       	push   0xc0031adc
c0016dc9:	e8 32 1d 01 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dce:	eb 93                	jmp    c0016d63 <timerHandler(unsigned long long)+0x84>
c0016dd0:	80 3d 8c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e58c,0x0
c0016dd7:	74 29                	je     c0016e02 <timerHandler(unsigned long long)+0x123>
c0016dd9:	39 c6                	cmp    esi,eax
c0016ddb:	bb 00 00 00 00       	mov    ebx,0x0
c0016de0:	19 df                	sbb    edi,ebx
c0016de2:	72 19                	jb     c0016dfd <timerHandler(unsigned long long)+0x11e>
c0016de4:	e8 ef 6f 00 00       	call   c001ddd8 <lockScheduler()>
c0016de9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dee:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016df1:	e8 1e 73 00 00       	call   c001e114 <schedule()>
c0016df6:	e8 df 6f 00 00       	call   c001ddda <unlockScheduler()>
c0016dfb:	eb 05                	jmp    c0016e02 <timerHandler(unsigned long long)+0x123>
c0016dfd:	29 f0                	sub    eax,esi
c0016dff:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e02:	83 c4 0c             	add    esp,0xc
c0016e05:	5b                   	pop    ebx
c0016e06:	5e                   	pop    esi
c0016e07:	5f                   	pop    edi
c0016e08:	5d                   	pop    ebp
c0016e09:	e9 8b 73 00 00       	jmp    c001e199 <unlockStuff()>
c0016e0e:	83 c4 0c             	add    esp,0xc
c0016e11:	5b                   	pop    ebx
c0016e12:	5e                   	pop    esi
c0016e13:	5f                   	pop    edi
c0016e14:	5d                   	pop    ebp
c0016e15:	c3                   	ret    

c0016e16 <setupTimer(int)>:
c0016e16:	57                   	push   edi
c0016e17:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0016e1c:	56                   	push   esi
c0016e1d:	53                   	push   ebx
c0016e1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e28:	83 ec 0c             	sub    esp,0xc
c0016e2b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e31:	e8 ee d7 ff ff       	call   c0014624 <Device::getName()>
c0016e36:	83 c4 10             	add    esp,0x10
c0016e39:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e3c:	0f 85 8d 00 00 00    	jne    c0016ecf <setupTimer(int)+0xb9>
c0016e42:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0016e47:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e4e:	74 7f                	je     c0016ecf <setupTimer(int)+0xb9>
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	68 5c 01 00 00       	push   0x15c
c0016e58:	e8 e3 89 ff ff       	call   c000f840 <malloc>
c0016e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e60:	89 c3                	mov    ebx,eax
c0016e62:	e8 2b f7 00 00       	call   c0026592 <PIT::PIT()>
c0016e67:	59                   	pop    ecx
c0016e68:	5f                   	pop    edi
c0016e69:	53                   	push   ebx
c0016e6a:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0016e70:	e8 c3 d4 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0016e75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e77:	6a 00                	push   0x0
c0016e79:	6a 00                	push   0x0
c0016e7b:	56                   	push   esi
c0016e7c:	53                   	push   ebx
c0016e7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e80:	83 c4 14             	add    esp,0x14
c0016e83:	68 60 01 00 00       	push   0x160
c0016e88:	e8 b3 89 ff ff       	call   c000f840 <malloc>
c0016e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e90:	89 c7                	mov    edi,eax
c0016e92:	e8 ab f5 00 00       	call   c0026442 <APICTimer::APICTimer()>
c0016e97:	6a 00                	push   0x0
c0016e99:	6a 00                	push   0x0
c0016e9b:	56                   	push   esi
c0016e9c:	57                   	push   edi
c0016e9d:	e8 a2 f4 00 00       	call   c0026344 <APICTimer::open(int, int, void*)>
c0016ea2:	83 c4 20             	add    esp,0x20
c0016ea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ea7:	6a 00                	push   0x0
c0016ea9:	6a 00                	push   0x0
c0016eab:	6a 00                	push   0x0
c0016ead:	53                   	push   ebx
c0016eae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016eb1:	58                   	pop    eax
c0016eb2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0016eb7:	5a                   	pop    edx
c0016eb8:	57                   	push   edi
c0016eb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ebf:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ec5:	e8 6e d4 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0016eca:	83 c4 10             	add    esp,0x10
c0016ecd:	eb 33                	jmp    c0016f02 <setupTimer(int)+0xec>
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	68 5c 01 00 00       	push   0x15c
c0016ed7:	e8 64 89 ff ff       	call   c000f840 <malloc>
c0016edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0016edf:	89 c3                	mov    ebx,eax
c0016ee1:	e8 ac f6 00 00       	call   c0026592 <PIT::PIT()>
c0016ee6:	58                   	pop    eax
c0016ee7:	5a                   	pop    edx
c0016ee8:	53                   	push   ebx
c0016ee9:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0016eef:	e8 44 d4 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0016ef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ef6:	6a 00                	push   0x0
c0016ef8:	6a 00                	push   0x0
c0016efa:	56                   	push   esi
c0016efb:	53                   	push   ebx
c0016efc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016eff:	83 c4 20             	add    esp,0x20
c0016f02:	89 d8                	mov    eax,ebx
c0016f04:	5b                   	pop    ebx
c0016f05:	5e                   	pop    esi
c0016f06:	5f                   	pop    edi
c0016f07:	c3                   	ret    

c0016f08 <VCache::VCache(PhysicalDisk*)>:
c0016f08:	53                   	push   ebx
c0016f09:	83 ec 18             	sub    esp,0x18
c0016f0c:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0016f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f15:	89 10                	mov    DWORD PTR [eax],edx
c0016f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f26:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f31:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f38:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f43:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f4a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f55:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f60:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f68:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f6f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f92:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f99:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fa1:	83 ec 0c             	sub    esp,0xc
c0016fa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fa8:	e8 93 88 ff ff       	call   c000f840 <malloc>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	89 c3                	mov    ebx,eax
c0016fb2:	83 ec 0c             	sub    esp,0xc
c0016fb5:	53                   	push   ebx
c0016fb6:	e8 3d 6f 00 00       	call   c001def8 <Mutex::Mutex()>
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fcd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fdf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ff0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ff6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ffc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017000:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017003:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001700e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017012:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017018:	05 00 01 00 00       	add    eax,0x100
c001701d:	c1 e0 04             	shl    eax,0x4
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	50                   	push   eax
c0017024:	e8 17 88 ff ff       	call   c000f840 <malloc>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	89 c2                	mov    edx,eax
c001702e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017039:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017044:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017048:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001704c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017052:	c1 e0 07             	shl    eax,0x7
c0017055:	83 ec 0c             	sub    esp,0xc
c0017058:	50                   	push   eax
c0017059:	e8 e2 87 ff ff       	call   c000f840 <malloc>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	89 c2                	mov    edx,eax
c0017063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017067:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001706a:	90                   	nop
c001706b:	83 c4 18             	add    esp,0x18
c001706e:	5b                   	pop    ebx
c001706f:	c3                   	ret    

c0017070 <VCache::invalidateReadBuffer()>:
c0017070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017074:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001707a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001707e:	c3                   	ret    
c001707f:	90                   	nop

c0017080 <VCache::writeWriteBuffer()>:
c0017080:	53                   	push   ebx
c0017081:	83 ec 14             	sub    esp,0x14
c0017084:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017088:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001708b:	8b 10                	mov    edx,DWORD PTR [eax]
c001708d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017090:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017093:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017096:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017099:	50                   	push   eax
c001709a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001709d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170a4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170ab:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170af:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170b6:	83 c4 28             	add    esp,0x28
c00170b9:	5b                   	pop    ebx
c00170ba:	c3                   	ret    
c00170bb:	90                   	nop

c00170bc <VCache::~VCache()>:
c00170bc:	83 ec 0c             	sub    esp,0xc
c00170bf:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c00170c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c8:	89 10                	mov    DWORD PTR [eax],edx
c00170ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ce:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00170d1:	84 c0                	test   al,al
c00170d3:	74 0f                	je     c00170e4 <VCache::~VCache()+0x28>
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170dc:	e8 9f ff ff ff       	call   c0017080 <VCache::writeWriteBuffer()>
c00170e1:	83 c4 10             	add    esp,0x10
c00170e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170eb:	83 ec 0c             	sub    esp,0xc
c00170ee:	50                   	push   eax
c00170ef:	e8 5c 87 ff ff       	call   c000f850 <free>
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170fe:	83 ec 0c             	sub    esp,0xc
c0017101:	50                   	push   eax
c0017102:	e8 49 87 ff ff       	call   c000f850 <free>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	90                   	nop
c001710b:	83 c4 0c             	add    esp,0xc
c001710e:	c3                   	ret    
c001710f:	90                   	nop

c0017110 <VCache::~VCache()>:
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	83 ec 0c             	sub    esp,0xc
c0017116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001711a:	e8 9d ff ff ff       	call   c00170bc <VCache::~VCache()>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	83 ec 08             	sub    esp,0x8
c0017125:	6a 44                	push   0x44
c0017127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001712b:	e8 02 bd ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0017130:	83 c4 10             	add    esp,0x10
c0017133:	83 c4 0c             	add    esp,0xc
c0017136:	c3                   	ret    
c0017137:	90                   	nop

c0017138 <VCache::write(unsigned long long, int, void*)>:
c0017138:	55                   	push   ebp
c0017139:	57                   	push   edi
c001713a:	56                   	push   esi
c001713b:	53                   	push   ebx
c001713c:	83 ec 28             	sub    esp,0x28
c001713f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017143:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017147:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001714b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001714f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017152:	e8 03 72 00 00       	call   c001e35a <Semaphore::acquire()>
c0017157:	83 c4 10             	add    esp,0x10
c001715a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001715e:	74 0c                	je     c001716c <VCache::write(unsigned long long, int, void*)+0x34>
c0017160:	83 ec 0c             	sub    esp,0xc
c0017163:	53                   	push   ebx
c0017164:	e8 07 ff ff ff       	call   c0017070 <VCache::invalidateReadBuffer()>
c0017169:	83 c4 10             	add    esp,0x10
c001716c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017170:	74 66                	je     c00171d8 <VCache::write(unsigned long long, int, void*)+0xa0>
c0017172:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017175:	99                   	cdq    
c0017176:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001717a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001717d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017180:	89 c1                	mov    ecx,eax
c0017182:	89 d0                	mov    eax,edx
c0017184:	31 f1                	xor    ecx,esi
c0017186:	31 f8                	xor    eax,edi
c0017188:	89 ca                	mov    edx,ecx
c001718a:	09 c2                	or     edx,eax
c001718c:	75 3e                	jne    c00171cc <VCache::write(unsigned long long, int, void*)+0x94>
c001718e:	83 fd 01             	cmp    ebp,0x1
c0017191:	75 39                	jne    c00171cc <VCache::write(unsigned long long, int, void*)+0x94>
c0017193:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017196:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001719c:	51                   	push   ecx
c001719d:	50                   	push   eax
c001719e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171a6:	0f af c8             	imul   ecx,eax
c00171a9:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171ac:	51                   	push   ecx
c00171ad:	e8 92 95 fe ff       	call   c0000744 <memcpy>
c00171b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	40                   	inc    eax
c00171b9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171bc:	83 c0 80             	add    eax,0xffffff80
c00171bf:	75 57                	jne    c0017218 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171c1:	83 ec 0c             	sub    esp,0xc
c00171c4:	53                   	push   ebx
c00171c5:	e8 b6 fe ff ff       	call   c0017080 <VCache::writeWriteBuffer()>
c00171ca:	eb 34                	jmp    c0017200 <VCache::write(unsigned long long, int, void*)+0xc8>
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	53                   	push   ebx
c00171d0:	e8 ab fe ff ff       	call   c0017080 <VCache::writeWriteBuffer()>
c00171d5:	83 c4 10             	add    esp,0x10
c00171d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171db:	83 fd 7f             	cmp    ebp,0x7f
c00171de:	7f 25                	jg     c0017205 <VCache::write(unsigned long long, int, void*)+0xcd>
c00171e0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171e3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171e6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171e9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171ed:	52                   	push   edx
c00171ee:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171fb:	e8 44 95 fe ff       	call   c0000744 <memcpy>
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	eb 13                	jmp    c0017218 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017205:	83 ec 0c             	sub    esp,0xc
c0017208:	8b 10                	mov    edx,DWORD PTR [eax]
c001720a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001720e:	55                   	push   ebp
c001720f:	57                   	push   edi
c0017210:	56                   	push   esi
c0017211:	50                   	push   eax
c0017212:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017215:	83 c4 20             	add    esp,0x20
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001721e:	e8 e5 76 00 00       	call   c001e908 <Semaphore::release()>
c0017223:	83 c4 2c             	add    esp,0x2c
c0017226:	31 c0                	xor    eax,eax
c0017228:	5b                   	pop    ebx
c0017229:	5e                   	pop    esi
c001722a:	5f                   	pop    edi
c001722b:	5d                   	pop    ebp
c001722c:	c3                   	ret    
c001722d:	90                   	nop

c001722e <VCache::read(unsigned long long, int, void*)>:
c001722e:	55                   	push   ebp
c001722f:	57                   	push   edi
c0017230:	56                   	push   esi
c0017231:	53                   	push   ebx
c0017232:	83 ec 28             	sub    esp,0x28
c0017235:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017239:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001723d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017245:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017249:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001724d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017251:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017254:	e8 01 71 00 00       	call   c001e35a <Semaphore::acquire()>
c0017259:	83 c4 10             	add    esp,0x10
c001725c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017260:	74 0c                	je     c001726e <VCache::read(unsigned long long, int, void*)+0x40>
c0017262:	83 ec 0c             	sub    esp,0xc
c0017265:	53                   	push   ebx
c0017266:	e8 15 fe ff ff       	call   c0017080 <VCache::writeWriteBuffer()>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	83 fe 01             	cmp    esi,0x1
c0017271:	0f 85 80 00 00 00    	jne    c00172f7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017277:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001727a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017281:	75 74                	jne    c00172f7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017283:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017286:	89 d1                	mov    ecx,edx
c0017288:	f7 d9                	neg    ecx
c001728a:	89 cf                	mov    edi,ecx
c001728c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017290:	c1 ff 1f             	sar    edi,0x1f
c0017293:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017296:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001729a:	89 ce                	mov    esi,ecx
c001729c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172a0:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172a4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172a8:	89 cf                	mov    edi,ecx
c00172aa:	74 0a                	je     c00172b6 <VCache::read(unsigned long long, int, void*)+0x88>
c00172ac:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172af:	75 05                	jne    c00172b6 <VCache::read(unsigned long long, int, void*)+0x88>
c00172b1:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172b4:	74 1c                	je     c00172d2 <VCache::read(unsigned long long, int, void*)+0xa4>
c00172b6:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172ba:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172bd:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172c0:	83 ec 0c             	sub    esp,0xc
c00172c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172c5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172c8:	52                   	push   edx
c00172c9:	57                   	push   edi
c00172ca:	56                   	push   esi
c00172cb:	50                   	push   eax
c00172cc:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00172cf:	83 c4 20             	add    esp,0x20
c00172d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172d5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172db:	50                   	push   eax
c00172dc:	52                   	push   edx
c00172dd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172e0:	48                   	dec    eax
c00172e1:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172e5:	0f af c2             	imul   eax,edx
c00172e8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172eb:	50                   	push   eax
c00172ec:	55                   	push   ebp
c00172ed:	e8 52 94 fe ff       	call   c0000744 <memcpy>
c00172f2:	83 c4 10             	add    esp,0x10
c00172f5:	eb 21                	jmp    c0017318 <VCache::read(unsigned long long, int, void*)+0xea>
c00172f7:	83 ec 0c             	sub    esp,0xc
c00172fa:	53                   	push   ebx
c00172fb:	e8 70 fd ff ff       	call   c0017070 <VCache::invalidateReadBuffer()>
c0017300:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017303:	8b 10                	mov    edx,DWORD PTR [eax]
c0017305:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017308:	56                   	push   esi
c0017309:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001730d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017311:	50                   	push   eax
c0017312:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017315:	83 c4 20             	add    esp,0x20
c0017318:	83 ec 0c             	sub    esp,0xc
c001731b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001731e:	e8 e5 75 00 00       	call   c001e908 <Semaphore::release()>
c0017323:	83 c4 2c             	add    esp,0x2c
c0017326:	31 c0                	xor    eax,eax
c0017328:	5b                   	pop    ebx
c0017329:	5e                   	pop    esi
c001732a:	5f                   	pop    edi
c001732b:	5d                   	pop    ebp
c001732c:	c3                   	ret    
c001732d:	90                   	nop

c001732e <Video::putrect(int, int, int, int, unsigned int)>:
c001732e:	55                   	push   ebp
c001732f:	57                   	push   edi
c0017330:	56                   	push   esi
c0017331:	53                   	push   ebx
c0017332:	83 ec 1c             	sub    esp,0x1c
c0017335:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001733d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017341:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017345:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017349:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001734d:	01 df                	add    edi,ebx
c001734f:	39 fb                	cmp    ebx,edi
c0017351:	7d 1f                	jge    c0017372 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017353:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017357:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001735b:	7d 12                	jge    c001736f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001735d:	8b 16                	mov    edx,DWORD PTR [esi]
c001735f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017363:	53                   	push   ebx
c0017364:	55                   	push   ebp
c0017365:	45                   	inc    ebp
c0017366:	56                   	push   esi
c0017367:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001736a:	83 c4 10             	add    esp,0x10
c001736d:	eb e8                	jmp    c0017357 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001736f:	43                   	inc    ebx
c0017370:	eb dd                	jmp    c001734f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017372:	83 c4 1c             	add    esp,0x1c
c0017375:	5b                   	pop    ebx
c0017376:	5e                   	pop    esi
c0017377:	5f                   	pop    edi
c0017378:	5d                   	pop    ebp
c0017379:	c3                   	ret    

c001737a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001737a:	55                   	push   ebp
c001737b:	57                   	push   edi
c001737c:	31 ff                	xor    edi,edi
c001737e:	56                   	push   esi
c001737f:	53                   	push   ebx
c0017380:	83 ec 1c             	sub    esp,0x1c
c0017383:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017387:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001738b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017392:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017397:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001739b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001739f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173a3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173a6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173aa:	01 f9                	add    ecx,edi
c00173ac:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173b0:	7d 2f                	jge    c00173e1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173b2:	31 f6                	xor    esi,esi
c00173b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173b8:	01 f2                	add    edx,esi
c00173ba:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173be:	7d 1a                	jge    c00173da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173c3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173c6:	46                   	inc    esi
c00173c7:	51                   	push   ecx
c00173c8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00173cc:	52                   	push   edx
c00173cd:	55                   	push   ebp
c00173ce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173d1:	83 c4 10             	add    esp,0x10
c00173d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173d8:	eb da                	jmp    c00173b4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173da:	47                   	inc    edi
c00173db:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173df:	eb c5                	jmp    c00173a6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173e1:	83 c4 1c             	add    esp,0x1c
c00173e4:	5b                   	pop    ebx
c00173e5:	5e                   	pop    esi
c00173e6:	5f                   	pop    edi
c00173e7:	5d                   	pop    ebp
c00173e8:	c3                   	ret    
c00173e9:	90                   	nop

c00173ea <Video::blit(unsigned int*, int, int, int, int)>:
c00173ea:	55                   	push   ebp
c00173eb:	57                   	push   edi
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173f9:	85 c0                	test   eax,eax
c00173fb:	79 02                	jns    c00173ff <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173fd:	31 c0                	xor    eax,eax
c00173ff:	c1 e0 02             	shl    eax,0x2
c0017402:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017406:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001740a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001740e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017412:	39 d8                	cmp    eax,ebx
c0017414:	7e 49                	jle    c001745f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017416:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001741c:	7c 41                	jl     c001745f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001741e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017422:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017426:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001742a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001742e:	39 f9                	cmp    ecx,edi
c0017430:	7e 22                	jle    c0017454 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017432:	83 c5 04             	add    ebp,0x4
c0017435:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001743b:	7c 14                	jl     c0017451 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001743d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001743f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017442:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017446:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001744a:	56                   	push   esi
c001744b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001744e:	83 c4 10             	add    esp,0x10
c0017451:	47                   	inc    edi
c0017452:	eb d2                	jmp    c0017426 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017454:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017458:	43                   	inc    ebx
c0017459:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001745d:	eb ab                	jmp    c001740a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001745f:	83 c4 1c             	add    esp,0x1c
c0017462:	5b                   	pop    ebx
c0017463:	5e                   	pop    esi
c0017464:	5f                   	pop    edi
c0017465:	5d                   	pop    ebp
c0017466:	c3                   	ret    
c0017467:	90                   	nop

c0017468 <Video::clearScreen(unsigned int)>:
c0017468:	57                   	push   edi
c0017469:	56                   	push   esi
c001746a:	53                   	push   ebx
c001746b:	31 db                	xor    ebx,ebx
c001746d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017471:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017477:	7e 1f                	jle    c0017498 <Video::clearScreen(unsigned int)+0x30>
c0017479:	31 ff                	xor    edi,edi
c001747b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017481:	7e 12                	jle    c0017495 <Video::clearScreen(unsigned int)+0x2d>
c0017483:	8b 06                	mov    eax,DWORD PTR [esi]
c0017485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017489:	53                   	push   ebx
c001748a:	57                   	push   edi
c001748b:	47                   	inc    edi
c001748c:	56                   	push   esi
c001748d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017490:	83 c4 10             	add    esp,0x10
c0017493:	eb e6                	jmp    c001747b <Video::clearScreen(unsigned int)+0x13>
c0017495:	43                   	inc    ebx
c0017496:	eb d9                	jmp    c0017471 <Video::clearScreen(unsigned int)+0x9>
c0017498:	5b                   	pop    ebx
c0017499:	5e                   	pop    esi
c001749a:	5f                   	pop    edi
c001749b:	c3                   	ret    

c001749c <Video::putpixel(int, int, unsigned int)>:
c001749c:	c7 44 24 04 3c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b43c
c00174a4:	e9 0a 31 00 00       	jmp    c001a5b3 <Krnl::panic(char const*)>
c00174a9:	90                   	nop

c00174aa <Video::Video(char const*)>:
c00174aa:	83 ec 0c             	sub    esp,0xc
c00174ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b1:	83 ec 08             	sub    esp,0x8
c00174b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174b8:	50                   	push   eax
c00174b9:	e8 6a d0 ff ff       	call   c0014528 <Device::Device(char const*)>
c00174be:	83 c4 10             	add    esp,0x10
c00174c1:	ba c0 b4 02 c0       	mov    edx,0xc002b4c0
c00174c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ca:	89 10                	mov    DWORD PTR [eax],edx
c00174cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174da:	90                   	nop
c00174db:	83 c4 0c             	add    esp,0xc
c00174de:	c3                   	ret    
c00174df:	90                   	nop

c00174e0 <Video::~Video()>:
c00174e0:	83 ec 0c             	sub    esp,0xc
c00174e3:	ba c0 b4 02 c0       	mov    edx,0xc002b4c0
c00174e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ec:	89 10                	mov    DWORD PTR [eax],edx
c00174ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f2:	83 ec 0c             	sub    esp,0xc
c00174f5:	50                   	push   eax
c00174f6:	e8 0f cd ff ff       	call   c001420a <Device::~Device()>
c00174fb:	83 c4 10             	add    esp,0x10
c00174fe:	90                   	nop
c00174ff:	83 c4 0c             	add    esp,0xc
c0017502:	c3                   	ret    
c0017503:	90                   	nop

c0017504 <Video::~Video()>:
c0017504:	83 ec 0c             	sub    esp,0xc
c0017507:	83 ec 0c             	sub    esp,0xc
c001750a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001750e:	e8 cd ff ff ff       	call   c00174e0 <Video::~Video()>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	83 ec 08             	sub    esp,0x8
c0017519:	68 64 01 00 00       	push   0x164
c001751e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017522:	e8 0b b9 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	83 c4 0c             	add    esp,0xc
c001752d:	c3                   	ret    

c001752e <Video::isMonochrome()>:
c001752e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017532:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017538:	c3                   	ret    
c0017539:	90                   	nop

c001753a <Video::getWidth()>:
c001753a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001753e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017544:	c3                   	ret    
c0017545:	90                   	nop

c0017546 <Video::getHeight()>:
c0017546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001754a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017550:	c3                   	ret    
c0017551:	90                   	nop

c0017552 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017552:	55                   	push   ebp
c0017553:	57                   	push   edi
c0017554:	56                   	push   esi
c0017555:	53                   	push   ebx
c0017556:	83 ec 2c             	sub    esp,0x2c
c0017559:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001755d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017561:	83 f8 01             	cmp    eax,0x1
c0017564:	19 c9                	sbb    ecx,ecx
c0017566:	31 db                	xor    ebx,ebx
c0017568:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001756c:	89 cd                	mov    ebp,ecx
c001756e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017576:	f7 d5                	not    ebp
c0017578:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001757e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017582:	01 d8                	add    eax,ebx
c0017584:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017588:	56                   	push   esi
c0017589:	e8 b8 ff ff ff       	call   c0017546 <Video::getHeight()>
c001758e:	59                   	pop    ecx
c001758f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017593:	7e 70                	jle    c0017605 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017595:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017599:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001759d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175a8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175b3:	89 f8                	mov    eax,edi
c00175b5:	83 c0 20             	add    eax,0x20
c00175b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175bc:	56                   	push   esi
c00175bd:	e8 78 ff ff ff       	call   c001753a <Video::getWidth()>
c00175c2:	5a                   	pop    edx
c00175c3:	39 c7                	cmp    edi,eax
c00175c5:	7d 34                	jge    c00175fb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175c7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00175cc:	74 05                	je     c00175d3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00175ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00175d0:	55                   	push   ebp
c00175d1:	eb 0d                	jmp    c00175e0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00175d3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00175d8:	74 12                	je     c00175ec <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175da:	8b 06                	mov    eax,DWORD PTR [esi]
c00175dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175e4:	57                   	push   edi
c00175e5:	56                   	push   esi
c00175e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175f0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175f4:	47                   	inc    edi
c00175f5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175f9:	75 c1                	jne    c00175bc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175fb:	43                   	inc    ebx
c00175fc:	83 fb 20             	cmp    ebx,0x20
c00175ff:	0f 85 79 ff ff ff    	jne    c001757e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017605:	83 c4 2c             	add    esp,0x2c
c0017608:	5b                   	pop    ebx
c0017609:	5e                   	pop    esi
c001760a:	5f                   	pop    edi
c001760b:	5d                   	pop    ebp
c001760c:	c3                   	ret    
c001760d:	90                   	nop

c001760e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001760e:	55                   	push   ebp
c001760f:	57                   	push   edi
c0017610:	56                   	push   esi
c0017611:	53                   	push   ebx
c0017612:	83 ec 28             	sub    esp,0x28
c0017615:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017619:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001761d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017621:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017625:	c1 e7 08             	shl    edi,0x8
c0017628:	01 c7                	add    edi,eax
c001762a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001762e:	c1 e0 08             	shl    eax,0x8
c0017631:	01 d0                	add    eax,edx
c0017633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017637:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001763b:	0f af c7             	imul   eax,edi
c001763e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017645:	50                   	push   eax
c0017646:	e8 f5 81 ff ff       	call   c000f840 <malloc>
c001764b:	83 c4 10             	add    esp,0x10
c001764e:	89 c5                	mov    ebp,eax
c0017650:	85 c0                	test   eax,eax
c0017652:	75 15                	jne    c0017669 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017654:	83 ec 0c             	sub    esp,0xc
c0017657:	68 5d b4 02 c0       	push   0xc002b45d
c001765c:	e8 b1 b8 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	e9 1c 01 00 00       	jmp    c0017785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017669:	be 12 00 00 00       	mov    esi,0x12
c001766e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017672:	74 11                	je     c0017685 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017674:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017678:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001767c:	c1 fe 03             	sar    esi,0x3
c001767f:	0f af f0             	imul   esi,eax
c0017682:	83 c6 12             	add    esi,0x12
c0017685:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017689:	74 04                	je     c001768f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001768b:	85 ff                	test   edi,edi
c001768d:	75 12                	jne    c00176a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001768f:	83 ec 0c             	sub    esp,0xc
c0017692:	68 74 b4 02 c0       	push   0xc002b474
c0017697:	e8 76 b8 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001769c:	e9 ce 00 00 00       	jmp    c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176a1:	52                   	push   edx
c00176a2:	52                   	push   edx
c00176a3:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176a7:	50                   	push   eax
c00176a8:	68 89 b4 02 c0       	push   0xc002b489
c00176ad:	e8 60 b8 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00176b2:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176b6:	83 c4 10             	add    esp,0x10
c00176b9:	80 fa 02             	cmp    dl,0x2
c00176bc:	0f 85 98 00 00 00    	jne    c001775a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176c2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176c7:	75 10                	jne    c00176d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176c9:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176cd:	75 0a                	jne    c00176d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176cf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00176d2:	83 e8 18             	sub    eax,0x18
c00176d5:	a8 f7                	test   al,0xf7
c00176d7:	74 0a                	je     c00176e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00176d9:	83 ec 0c             	sub    esp,0xc
c00176dc:	68 96 b4 02 c0       	push   0xc002b496
c00176e1:	eb 7f                	jmp    c0017762 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176ff:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017703:	75 0c                	jne    c0017711 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017705:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001770a:	c1 e0 18             	shl    eax,0x18
c001770d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017711:	41                   	inc    ecx
c0017712:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017717:	c1 e2 10             	shl    edx,0x10
c001771a:	89 d0                	mov    eax,edx
c001771c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017721:	c1 e2 08             	shl    edx,0x8
c0017724:	09 c2                	or     edx,eax
c0017726:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001772a:	09 c2                	or     edx,eax
c001772c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017730:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017734:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017738:	c1 f8 03             	sar    eax,0x3
c001773b:	01 c6                	add    esi,eax
c001773d:	89 c8                	mov    eax,ecx
c001773f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017743:	39 c7                	cmp    edi,eax
c0017745:	7f b0                	jg     c00176f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017747:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001774b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001774f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017752:	7e 22                	jle    c0017776 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017754:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017758:	eb 99                	jmp    c00176f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001775a:	50                   	push   eax
c001775b:	50                   	push   eax
c001775c:	52                   	push   edx
c001775d:	68 a4 b4 02 c0       	push   0xc002b4a4
c0017762:	e8 ab b7 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0017767:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001776a:	e8 e1 80 ff ff       	call   c000f850 <free>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	31 ed                	xor    ebp,ebp
c0017774:	eb 0f                	jmp    c0017785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017776:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001777a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001777d:	89 38                	mov    DWORD PTR [eax],edi
c001777f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017783:	89 08                	mov    DWORD PTR [eax],ecx
c0017785:	83 c4 1c             	add    esp,0x1c
c0017788:	89 e8                	mov    eax,ebp
c001778a:	5b                   	pop    ebx
c001778b:	5e                   	pop    esi
c001778c:	5f                   	pop    edi
c001778d:	5d                   	pop    ebp
c001778e:	c3                   	ret    
c001778f:	90                   	nop

c0017790 <Video::putTGA(int, int, unsigned char*, int)>:
c0017790:	55                   	push   ebp
c0017791:	57                   	push   edi
c0017792:	56                   	push   esi
c0017793:	53                   	push   ebx
c0017794:	83 ec 28             	sub    esp,0x28
c0017797:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001779b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001779f:	50                   	push   eax
c00177a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177a4:	50                   	push   eax
c00177a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177ad:	56                   	push   esi
c00177ae:	e8 5b fe ff ff       	call   c001760e <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177b3:	83 c4 20             	add    esp,0x20
c00177b6:	85 c0                	test   eax,eax
c00177b8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177bc:	74 35                	je     c00177f3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177be:	89 c7                	mov    edi,eax
c00177c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177c4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177c8:	39 d8                	cmp    eax,ebx
c00177ca:	7e 27                	jle    c00177f3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00177d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177d4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00177d8:	39 e8                	cmp    eax,ebp
c00177da:	7e 14                	jle    c00177f0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00177de:	83 c7 04             	add    edi,0x4
c00177e1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177e4:	53                   	push   ebx
c00177e5:	55                   	push   ebp
c00177e6:	45                   	inc    ebp
c00177e7:	56                   	push   esi
c00177e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177eb:	83 c4 10             	add    esp,0x10
c00177ee:	eb e0                	jmp    c00177d0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177f0:	43                   	inc    ebx
c00177f1:	eb cd                	jmp    c00177c0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177f3:	83 c4 1c             	add    esp,0x1c
c00177f6:	5b                   	pop    ebx
c00177f7:	5e                   	pop    esi
c00177f8:	5f                   	pop    edi
c00177f9:	5d                   	pop    ebp
c00177fa:	c3                   	ret    
c00177fb:	90                   	nop

c00177fc <ACPI::close(int, int, void*)>:
c00177fc:	83 ec 1c             	sub    esp,0x1c
c00177ff:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017807:	74 0a                	je     c0017813 <ACPI::close(int, int, void*)+0x17>
c0017809:	b8 00 00 00 00       	mov    eax,0x0
c001780e:	e9 9a 00 00 00       	jmp    c00178ad <ACPI::close(int, int, void*)+0xb1>
c0017813:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017818:	75 37                	jne    c0017851 <ACPI::close(int, int, void*)+0x55>
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	68 00 b5 02 c0       	push   0xc002b500
c0017822:	e8 eb b6 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0017827:	83 c4 10             	add    esp,0x10
c001782a:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c001782f:	85 c0                	test   eax,eax
c0017831:	74 07                	je     c001783a <ACPI::close(int, int, void*)+0x3e>
c0017833:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c0017838:	ff d0                	call   eax
c001783a:	83 ec 0c             	sub    esp,0xc
c001783d:	68 24 b6 02 c0       	push   0xc002b624
c0017842:	e8 6c 2d 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001784f:	eb 5c                	jmp    c00178ad <ACPI::close(int, int, void*)+0xb1>
c0017851:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017856:	75 50                	jne    c00178a8 <ACPI::close(int, int, void*)+0xac>
c0017858:	a1 44 0c 03 c0       	mov    eax,ds:0xc0030c44
c001785d:	85 c0                	test   eax,eax
c001785f:	74 07                	je     c0017868 <ACPI::close(int, int, void*)+0x6c>
c0017861:	a1 44 0c 03 c0       	mov    eax,ds:0xc0030c44
c0017866:	ff d0                	call   eax
c0017868:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001786d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017872:	83 e0 02             	and    eax,0x2
c0017875:	74 1c                	je     c0017893 <ACPI::close(int, int, void*)+0x97>
c0017877:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001787e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017882:	89 c2                	mov    edx,eax
c0017884:	ec                   	in     al,dx
c0017885:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017889:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001788d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017891:	eb da                	jmp    c001786d <ACPI::close(int, int, void*)+0x71>
c0017893:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001789a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001789f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178a7:	ee                   	out    dx,al
c00178a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178ad:	83 c4 1c             	add    esp,0x1c
c00178b0:	c3                   	ret    

c00178b1 <findRSDP()>:
c00178b1:	83 ec 1c             	sub    esp,0x1c
c00178b4:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00178b9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178bf:	83 e0 04             	and    eax,0x4
c00178c2:	84 c0                	test   al,al
c00178c4:	75 07                	jne    c00178cd <findRSDP()+0x1c>
c00178c6:	b8 00 00 00 00       	mov    eax,0x0
c00178cb:	eb 6a                	jmp    c0017937 <findRSDP()+0x86>
c00178cd:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c00178d2:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178d7:	7f 1b                	jg     c00178f4 <findRSDP()+0x43>
c00178d9:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00178de:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178e4:	83 e2 fb             	and    edx,0xfffffffb
c00178e7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178ed:	b8 00 00 00 00       	mov    eax,0x0
c00178f2:	eb 43                	jmp    c0017937 <findRSDP()+0x86>
c00178f4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178fc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017904:	77 2c                	ja     c0017932 <findRSDP()+0x81>
c0017906:	83 ec 04             	sub    esp,0x4
c0017909:	6a 08                	push   0x8
c001790b:	68 0d b5 02 c0       	push   0xc002b50d
c0017910:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017914:	e8 27 8d fe ff       	call   c0000640 <memcmp>
c0017919:	83 c4 10             	add    esp,0x10
c001791c:	85 c0                	test   eax,eax
c001791e:	0f 94 c0             	sete   al
c0017921:	84 c0                	test   al,al
c0017923:	74 06                	je     c001792b <findRSDP()+0x7a>
c0017925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017929:	eb 0c                	jmp    c0017937 <findRSDP()+0x86>
c001792b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017930:	eb ca                	jmp    c00178fc <findRSDP()+0x4b>
c0017932:	b8 00 00 00 00       	mov    eax,0x0
c0017937:	83 c4 1c             	add    esp,0x1c
c001793a:	c3                   	ret    

c001793b <loadACPITables(unsigned char*)>:
c001793b:	56                   	push   esi
c001793c:	53                   	push   ebx
c001793d:	83 ec 44             	sub    esp,0x44
c0017940:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017945:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001794b:	83 e0 04             	and    eax,0x4
c001794e:	84 c0                	test   al,al
c0017950:	0f 84 05 02 00 00    	je     c0017b5b <loadACPITables(unsigned char*)+0x220>
c0017956:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c001795b:	84 c0                	test   al,al
c001795d:	74 75                	je     c00179d4 <loadACPITables(unsigned char*)+0x99>
c001795f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017963:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001796b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001796e:	83 e8 24             	sub    eax,0x24
c0017971:	c1 e8 03             	shr    eax,0x3
c0017974:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017978:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017980:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017984:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017988:	0f 8d b2 00 00 00    	jge    c0017a40 <loadACPITables(unsigned char*)+0x105>
c001798e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017992:	83 c0 24             	add    eax,0x24
c0017995:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017999:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001799d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179a5:	c1 e0 03             	shl    eax,0x3
c00179a8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00179b5:	89 c1                	mov    ecx,eax
c00179b7:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c00179bc:	8d 50 01             	lea    edx,[eax+0x1]
c00179bf:	89 15 4c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c4c,edx
c00179c5:	89 ca                	mov    edx,ecx
c00179c7:	89 14 c5 64 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf39c],edx
c00179ce:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179d2:	eb ac                	jmp    c0017980 <loadACPITables(unsigned char*)+0x45>
c00179d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179e3:	83 e8 24             	sub    eax,0x24
c00179e6:	c1 e8 02             	shr    eax,0x2
c00179e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179ed:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179f9:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179fd:	7d 41                	jge    c0017a40 <loadACPITables(unsigned char*)+0x105>
c00179ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a03:	83 c0 24             	add    eax,0x24
c0017a06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a16:	c1 e0 02             	shl    eax,0x2
c0017a19:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a23:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017a28:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2b:	89 15 4c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c4c,edx
c0017a31:	89 ca                	mov    edx,ecx
c0017a33:	89 14 c5 64 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf39c],edx
c0017a3a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a3e:	eb b5                	jmp    c00179f5 <loadACPITables(unsigned char*)+0xba>
c0017a40:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a48:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017a4d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a51:	0f 8d 05 01 00 00    	jge    c0017b5c <loadACPITables(unsigned char*)+0x221>
c0017a57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a5b:	8b 04 c5 64 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf39c]
c0017a62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a72:	25 ff 0f 00 00       	and    eax,0xfff
c0017a77:	89 c6                	mov    esi,eax
c0017a79:	e8 c0 a3 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017a7e:	89 c3                	mov    ebx,eax
c0017a80:	83 ec 0c             	sub    esp,0xc
c0017a83:	6a 01                	push   0x1
c0017a85:	e8 4b a1 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0017a8a:	83 c4 10             	add    esp,0x10
c0017a8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a91:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a97:	83 ec 0c             	sub    esp,0xc
c0017a9a:	6a 01                	push   0x1
c0017a9c:	6a 01                	push   0x1
c0017a9e:	50                   	push   eax
c0017a9f:	52                   	push   edx
c0017aa0:	53                   	push   ebx
c0017aa1:	e8 c8 ab ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017aa6:	83 c4 20             	add    esp,0x20
c0017aa9:	09 f0                	or     eax,esi
c0017aab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ab3:	c1 e0 03             	shl    eax,0x3
c0017ab6:	05 60 0c 03 c0       	add    eax,0xc0030c60
c0017abb:	83 ec 04             	sub    esp,0x4
c0017abe:	6a 04                	push   0x4
c0017ac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ac4:	50                   	push   eax
c0017ac5:	e8 7a 8c fe ff       	call   c0000744 <memcpy>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017adc:	05 00 10 00 00       	add    eax,0x1000
c0017ae1:	c1 e8 0c             	shr    eax,0xc
c0017ae4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0017aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af3:	25 ff 0f 00 00       	and    eax,0xfff
c0017af8:	89 c6                	mov    esi,eax
c0017afa:	e8 3f a3 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017aff:	89 c3                	mov    ebx,eax
c0017b01:	83 ec 0c             	sub    esp,0xc
c0017b04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b08:	e8 c8 a0 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0017b0d:	83 c4 10             	add    esp,0x10
c0017b10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b14:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b1a:	83 ec 0c             	sub    esp,0xc
c0017b1d:	6a 01                	push   0x1
c0017b1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b23:	50                   	push   eax
c0017b24:	52                   	push   edx
c0017b25:	53                   	push   ebx
c0017b26:	e8 43 ab ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b2b:	83 c4 20             	add    esp,0x20
c0017b2e:	09 f0                	or     eax,esi
c0017b30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b37:	83 ec 0c             	sub    esp,0xc
c0017b3a:	50                   	push   eax
c0017b3b:	e8 d3 a4 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b4b:	89 14 c5 64 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf39c],edx
c0017b52:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b56:	e9 ed fe ff ff       	jmp    c0017a48 <loadACPITables(unsigned char*)+0x10d>
c0017b5b:	90                   	nop
c0017b5c:	83 c4 44             	add    esp,0x44
c0017b5f:	5b                   	pop    ebx
c0017b60:	5e                   	pop    esi
c0017b61:	c3                   	ret    

c0017b62 <findRSDT(unsigned char*)>:
c0017b62:	56                   	push   esi
c0017b63:	53                   	push   ebx
c0017b64:	83 ec 44             	sub    esp,0x44
c0017b67:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017b6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b72:	83 e0 04             	and    eax,0x4
c0017b75:	84 c0                	test   al,al
c0017b77:	75 0a                	jne    c0017b83 <findRSDT(unsigned char*)+0x21>
c0017b79:	b8 00 00 00 00       	mov    eax,0x0
c0017b7e:	e9 f7 00 00 00       	jmp    c0017c7a <findRSDT(unsigned char*)+0x118>
c0017b83:	83 ec 04             	sub    esp,0x4
c0017b86:	6a 24                	push   0x24
c0017b88:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b8c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b90:	50                   	push   eax
c0017b91:	e8 ae 8b fe ff       	call   c0000744 <memcpy>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b9d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017ba1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017ba9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bc1:	25 ff 0f 00 00       	and    eax,0xfff
c0017bc6:	89 c6                	mov    esi,eax
c0017bc8:	e8 71 a2 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017bcd:	89 c3                	mov    ebx,eax
c0017bcf:	83 ec 0c             	sub    esp,0xc
c0017bd2:	6a 02                	push   0x2
c0017bd4:	e8 fc 9f ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017be0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	6a 01                	push   0x1
c0017beb:	6a 02                	push   0x2
c0017bed:	50                   	push   eax
c0017bee:	52                   	push   edx
c0017bef:	53                   	push   ebx
c0017bf0:	e8 79 aa ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bf5:	83 c4 20             	add    esp,0x20
c0017bf8:	09 f0                	or     eax,esi
c0017bfa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c02:	25 ff 0f 00 00       	and    eax,0xfff
c0017c07:	89 c6                	mov    esi,eax
c0017c09:	e8 30 a2 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017c0e:	89 c3                	mov    ebx,eax
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	6a 02                	push   0x2
c0017c15:	e8 bb 9f ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0017c1a:	83 c4 10             	add    esp,0x10
c0017c1d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c21:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c27:	83 ec 0c             	sub    esp,0xc
c0017c2a:	6a 01                	push   0x1
c0017c2c:	6a 02                	push   0x2
c0017c2e:	50                   	push   eax
c0017c2f:	52                   	push   edx
c0017c30:	53                   	push   ebx
c0017c31:	e8 38 aa ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c36:	83 c4 20             	add    esp,0x20
c0017c39:	09 f0                	or     eax,esi
c0017c3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c3f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c44:	75 11                	jne    c0017c57 <findRSDT(unsigned char*)+0xf5>
c0017c46:	c6 05 60 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e60,0x0
c0017c4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c55:	eb 1f                	jmp    c0017c76 <findRSDT(unsigned char*)+0x114>
c0017c57:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c5c:	75 11                	jne    c0017c6f <findRSDT(unsigned char*)+0x10d>
c0017c5e:	c6 05 60 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e60,0x1
c0017c65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c6d:	eb 07                	jmp    c0017c76 <findRSDT(unsigned char*)+0x114>
c0017c6f:	b8 00 00 00 00       	mov    eax,0x0
c0017c74:	eb 04                	jmp    c0017c7a <findRSDT(unsigned char*)+0x118>
c0017c76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c7a:	83 c4 44             	add    esp,0x44
c0017c7d:	5b                   	pop    ebx
c0017c7e:	5e                   	pop    esi
c0017c7f:	c3                   	ret    

c0017c80 <findDataTable(unsigned char*, char*)>:
c0017c80:	83 ec 1c             	sub    esp,0x1c
c0017c83:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017c88:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c8e:	83 e0 04             	and    eax,0x4
c0017c91:	84 c0                	test   al,al
c0017c93:	75 07                	jne    c0017c9c <findDataTable(unsigned char*, char*)+0x1c>
c0017c95:	b8 00 00 00 00       	mov    eax,0x0
c0017c9a:	eb 7c                	jmp    c0017d18 <findDataTable(unsigned char*, char*)+0x98>
c0017c9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ca4:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017ca9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cad:	7d 3a                	jge    c0017ce9 <findDataTable(unsigned char*, char*)+0x69>
c0017caf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cb3:	c1 e0 03             	shl    eax,0x3
c0017cb6:	05 60 0c 03 c0       	add    eax,0xc0030c60
c0017cbb:	83 ec 04             	sub    esp,0x4
c0017cbe:	6a 04                	push   0x4
c0017cc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cc4:	50                   	push   eax
c0017cc5:	e8 76 89 fe ff       	call   c0000640 <memcmp>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	85 c0                	test   eax,eax
c0017ccf:	0f 94 c0             	sete   al
c0017cd2:	84 c0                	test   al,al
c0017cd4:	74 0d                	je     c0017ce3 <findDataTable(unsigned char*, char*)+0x63>
c0017cd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cda:	8b 04 c5 64 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf39c]
c0017ce1:	eb 35                	jmp    c0017d18 <findDataTable(unsigned char*, char*)+0x98>
c0017ce3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ce7:	eb bb                	jmp    c0017ca4 <findDataTable(unsigned char*, char*)+0x24>
c0017ce9:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0017cee:	84 c0                	test   al,al
c0017cf0:	74 07                	je     c0017cf9 <findDataTable(unsigned char*, char*)+0x79>
c0017cf2:	b8 58 00 00 00       	mov    eax,0x58
c0017cf7:	eb 05                	jmp    c0017cfe <findDataTable(unsigned char*, char*)+0x7e>
c0017cf9:	b8 52 00 00 00       	mov    eax,0x52
c0017cfe:	83 ec 04             	sub    esp,0x4
c0017d01:	50                   	push   eax
c0017d02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d06:	68 48 b6 02 c0       	push   0xc002b648
c0017d0b:	e8 02 b2 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0017d10:	83 c4 10             	add    esp,0x10
c0017d13:	b8 00 00 00 00       	mov    eax,0x0
c0017d18:	83 c4 1c             	add    esp,0x1c
c0017d1b:	c3                   	ret    

c0017d1c <scanMADT()>:
c0017d1c:	53                   	push   ebx
c0017d1d:	83 ec 38             	sub    esp,0x38
c0017d20:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017d25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d2b:	83 e0 04             	and    eax,0x4
c0017d2e:	84 c0                	test   al,al
c0017d30:	0f 84 63 04 00 00    	je     c0018199 <scanMADT()+0x47d>
c0017d36:	e8 76 fb ff ff       	call   c00178b1 <findRSDP()>
c0017d3b:	a3 6c 0e 03 c0       	mov    ds:0xc0030e6c,eax
c0017d40:	a1 6c 0e 03 c0       	mov    eax,ds:0xc0030e6c
c0017d45:	85 c0                	test   eax,eax
c0017d47:	75 19                	jne    c0017d62 <scanMADT()+0x46>
c0017d49:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017d4e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d54:	83 e2 fb             	and    edx,0xfffffffb
c0017d57:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d5d:	e9 3b 04 00 00       	jmp    c001819d <scanMADT()+0x481>
c0017d62:	a1 6c 0e 03 c0       	mov    eax,ds:0xc0030e6c
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	50                   	push   eax
c0017d6b:	e8 f2 fd ff ff       	call   c0017b62 <findRSDT(unsigned char*)>
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	a3 68 0e 03 c0       	mov    ds:0xc0030e68,eax
c0017d78:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0017d7d:	85 c0                	test   eax,eax
c0017d7f:	75 19                	jne    c0017d9a <scanMADT()+0x7e>
c0017d81:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017d86:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d8c:	83 e2 fb             	and    edx,0xfffffffb
c0017d8f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d95:	e9 03 04 00 00       	jmp    c001819d <scanMADT()+0x481>
c0017d9a:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0017d9f:	83 ec 0c             	sub    esp,0xc
c0017da2:	50                   	push   eax
c0017da3:	e8 93 fb ff ff       	call   c001793b <loadACPITables(unsigned char*)>
c0017da8:	83 c4 10             	add    esp,0x10
c0017dab:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0017db0:	83 ec 08             	sub    esp,0x8
c0017db3:	68 16 b5 02 c0       	push   0xc002b516
c0017db8:	50                   	push   eax
c0017db9:	e8 c2 fe ff ff       	call   c0017c80 <findDataTable(unsigned char*, char*)>
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017dc5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017dca:	75 19                	jne    c0017de5 <scanMADT()+0xc9>
c0017dcc:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017dd1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dd7:	83 e2 fe             	and    edx,0xfffffffe
c0017dda:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017de0:	e9 b8 03 00 00       	jmp    c001819d <scanMADT()+0x481>
c0017de5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017df4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017df8:	0f 87 9f 03 00 00    	ja     c001819d <scanMADT()+0x481>
c0017dfe:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e06:	0f 87 91 03 00 00    	ja     c001819d <scanMADT()+0x481>
c0017e0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e10:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e18:	8d 50 01             	lea    edx,[eax+0x1]
c0017e1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e23:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e27:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2f:	8d 50 01             	lea    edx,[eax+0x1]
c0017e32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e3a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e3e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e42:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e47:	0f 86 4f 03 00 00    	jbe    c001819c <scanMADT()+0x480>
c0017e4d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e52:	75 57                	jne    c0017eab <scanMADT()+0x18f>
c0017e54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e58:	8d 50 01             	lea    edx,[eax+0x1]
c0017e5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e5f:	8a 15 60 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031060
c0017e65:	0f b6 d2             	movzx  edx,dl
c0017e68:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e6c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e70:	88 82 a0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef60],al
c0017e76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7a:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e81:	8a 15 60 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031060
c0017e87:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e8a:	88 0d 60 10 03 c0    	mov    BYTE PTR ds:0xc0031060,cl
c0017e90:	0f b6 d2             	movzx  edx,dl
c0017e93:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e97:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e9b:	88 82 80 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef80],al
c0017ea1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ea6:	e9 da 02 00 00       	jmp    c0018185 <scanMADT()+0x469>
c0017eab:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017eb0:	0f 85 14 01 00 00    	jne    c0017fca <scanMADT()+0x2ae>
c0017eb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eba:	8d 50 01             	lea    edx,[eax+0x1]
c0017ebd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ec1:	8a 15 20 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f20
c0017ec7:	0f b6 d2             	movzx  edx,dl
c0017eca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ece:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ed2:	88 82 40 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0c0],al
c0017ed8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017edc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee4:	01 d0                	add    eax,edx
c0017ee6:	83 c0 2c             	add    eax,0x2c
c0017ee9:	8a 00                	mov    al,BYTE PTR [eax]
c0017eeb:	0f b6 d0             	movzx  edx,al
c0017eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ef5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017efd:	0f b6 c0             	movzx  eax,al
c0017f00:	c1 e0 08             	shl    eax,0x8
c0017f03:	89 d1                	mov    ecx,edx
c0017f05:	09 c1                	or     ecx,eax
c0017f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0b:	8d 50 02             	lea    edx,[eax+0x2]
c0017f0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f16:	0f b6 c0             	movzx  eax,al
c0017f19:	c1 e0 10             	shl    eax,0x10
c0017f1c:	09 c1                	or     ecx,eax
c0017f1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f22:	8d 50 03             	lea    edx,[eax+0x3]
c0017f25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f29:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f2d:	0f b6 c0             	movzx  eax,al
c0017f30:	c1 e0 18             	shl    eax,0x18
c0017f33:	09 c1                	or     ecx,eax
c0017f35:	89 ca                	mov    edx,ecx
c0017f37:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0017f3c:	0f b6 c0             	movzx  eax,al
c0017f3f:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c0017f46:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f53:	01 d0                	add    eax,edx
c0017f55:	83 c0 2c             	add    eax,0x2c
c0017f58:	8a 00                	mov    al,BYTE PTR [eax]
c0017f5a:	0f b6 d0             	movzx  edx,al
c0017f5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f61:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f68:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f6c:	0f b6 c0             	movzx  eax,al
c0017f6f:	c1 e0 08             	shl    eax,0x8
c0017f72:	89 d1                	mov    ecx,edx
c0017f74:	09 c1                	or     ecx,eax
c0017f76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7a:	8d 50 02             	lea    edx,[eax+0x2]
c0017f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f81:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f85:	0f b6 c0             	movzx  eax,al
c0017f88:	c1 e0 10             	shl    eax,0x10
c0017f8b:	09 c1                	or     ecx,eax
c0017f8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f91:	8d 50 03             	lea    edx,[eax+0x3]
c0017f94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f98:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f9c:	0f b6 c0             	movzx  eax,al
c0017f9f:	c1 e0 18             	shl    eax,0x18
c0017fa2:	09 c1                	or     ecx,eax
c0017fa4:	89 ca                	mov    edx,ecx
c0017fa6:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0017fab:	0f b6 c0             	movzx  eax,al
c0017fae:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c0017fb5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fba:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0017fbf:	40                   	inc    eax
c0017fc0:	a2 20 0f 03 c0       	mov    ds:0xc0030f20,al
c0017fc5:	e9 bb 01 00 00       	jmp    c0018185 <scanMADT()+0x469>
c0017fca:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017fcf:	0f 85 e9 00 00 00    	jne    c00180be <scanMADT()+0x3a2>
c0017fd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd9:	8d 50 01             	lea    edx,[eax+0x1]
c0017fdc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fe8:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ff7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ffb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fff:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018003:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018007:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800b:	01 d0                	add    eax,edx
c001800d:	83 c0 2c             	add    eax,0x2c
c0018010:	8a 00                	mov    al,BYTE PTR [eax]
c0018012:	0f b6 d0             	movzx  edx,al
c0018015:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018019:	8d 48 01             	lea    ecx,[eax+0x1]
c001801c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018020:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018024:	0f b6 c0             	movzx  eax,al
c0018027:	c1 e0 08             	shl    eax,0x8
c001802a:	89 d1                	mov    ecx,edx
c001802c:	09 c1                	or     ecx,eax
c001802e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018032:	8d 50 02             	lea    edx,[eax+0x2]
c0018035:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018039:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001803d:	0f b6 c0             	movzx  eax,al
c0018040:	c1 e0 10             	shl    eax,0x10
c0018043:	09 c1                	or     ecx,eax
c0018045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018049:	8d 50 03             	lea    edx,[eax+0x3]
c001804c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018050:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018054:	0f b6 c0             	movzx  eax,al
c0018057:	c1 e0 18             	shl    eax,0x18
c001805a:	09 c8                	or     eax,ecx
c001805c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018060:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018065:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018069:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806d:	01 d0                	add    eax,edx
c001806f:	83 c0 2c             	add    eax,0x2c
c0018072:	8a 00                	mov    al,BYTE PTR [eax]
c0018074:	0f b6 c0             	movzx  eax,al
c0018077:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001807b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001807e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018082:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018086:	0f b6 d2             	movzx  edx,dl
c0018089:	c1 e2 08             	shl    edx,0x8
c001808c:	09 d0                	or     eax,edx
c001808e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018093:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018098:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001809d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180a1:	88 90 e0 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2820],dl
c00180a7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180ac:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180b1:	66 89 84 12 00 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf100],ax
c00180b9:	e9 c7 00 00 00       	jmp    c0018185 <scanMADT()+0x469>
c00180be:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180c3:	0f 85 b0 00 00 00    	jne    c0018179 <scanMADT()+0x45d>
c00180c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cd:	8d 50 01             	lea    edx,[eax+0x1]
c00180d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180dc:	0f b6 c0             	movzx  eax,al
c00180df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180eb:	01 d0                	add    eax,edx
c00180ed:	83 c0 2c             	add    eax,0x2c
c00180f0:	8a 00                	mov    al,BYTE PTR [eax]
c00180f2:	0f b6 d0             	movzx  edx,al
c00180f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00180fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018100:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018104:	0f b6 c0             	movzx  eax,al
c0018107:	c1 e0 08             	shl    eax,0x8
c001810a:	09 d0                	or     eax,edx
c001810c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018110:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018115:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018119:	8d 50 01             	lea    edx,[eax+0x1]
c001811c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018120:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018124:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018128:	0f b6 c0             	movzx  eax,al
c001812b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001812f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018133:	c1 e0 08             	shl    eax,0x8
c0018136:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001813a:	89 c1                	mov    ecx,eax
c001813c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018140:	c1 e0 18             	shl    eax,0x18
c0018143:	89 c3                	mov    ebx,eax
c0018145:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001814a:	8d 50 01             	lea    edx,[eax+0x1]
c001814d:	89 15 70 0e 03 c0    	mov    DWORD PTR ds:0xc0030e70,edx
c0018153:	09 d9                	or     ecx,ebx
c0018155:	89 ca                	mov    edx,ecx
c0018157:	89 14 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],edx
c001815e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018162:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001816a:	68 78 b6 02 c0       	push   0xc002b678
c001816f:	e8 9e ad ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	eb 0c                	jmp    c0018185 <scanMADT()+0x469>
c0018179:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001817e:	75 05                	jne    c0018185 <scanMADT()+0x469>
c0018180:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018185:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001818a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001818e:	01 d0                	add    eax,edx
c0018190:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018194:	e9 54 fc ff ff       	jmp    c0017ded <scanMADT()+0xd1>
c0018199:	90                   	nop
c001819a:	eb 01                	jmp    c001819d <scanMADT()+0x481>
c001819c:	90                   	nop
c001819d:	83 c4 38             	add    esp,0x38
c00181a0:	5b                   	pop    ebx
c00181a1:	c3                   	ret    

c00181a2 <ACPI::ACPI()>:
c00181a2:	83 ec 0c             	sub    esp,0xc
c00181a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a9:	83 ec 08             	sub    esp,0x8
c00181ac:	68 1b b5 02 c0       	push   0xc002b51b
c00181b1:	50                   	push   eax
c00181b2:	e8 71 c3 ff ff       	call   c0014528 <Device::Device(char const*)>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	ba ec b6 02 c0       	mov    edx,0xc002b6ec
c00181bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c3:	89 10                	mov    DWORD PTR [eax],edx
c00181c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d4:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e2:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018202:	e8 15 fb ff ff       	call   c0017d1c <scanMADT()>
c0018207:	90                   	nop
c0018208:	83 c4 0c             	add    esp,0xc
c001820b:	c3                   	ret    

c001820c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001820c:	83 ec 2c             	sub    esp,0x2c
c001820f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018213:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018217:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001821b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001821f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018224:	88 d0                	mov    al,dl
c0018226:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001822a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001822f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018237:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001823b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018241:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018245:	0f 8d 97 00 00 00    	jge    c00182e2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001824b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001824f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018253:	83 c2 2a             	add    edx,0x2a
c0018256:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001825a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001825f:	75 78                	jne    c00182d9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018265:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018269:	83 c2 2a             	add    edx,0x2a
c001826c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018270:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018274:	75 63                	jne    c00182d9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018276:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001827b:	74 3a                	je     c00182b7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001827d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018281:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018285:	83 c2 2a             	add    edx,0x2a
c0018288:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001828c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018293:	39 c2                	cmp    edx,eax
c0018295:	74 10                	je     c00182a7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018297:	83 ec 0c             	sub    esp,0xc
c001829a:	68 b4 b6 02 c0       	push   0xc002b6b4
c001829f:	e8 0f 23 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	83 ec 0c             	sub    esp,0xc
c00182aa:	68 20 b5 02 c0       	push   0xc002b520
c00182af:	e8 ff 22 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00182b4:	83 c4 10             	add    esp,0x10
c00182b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c3:	83 c2 2a             	add    edx,0x2a
c00182c6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00182cc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182cf:	89 01                	mov    DWORD PTR [ecx],eax
c00182d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182d4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182d9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182dd:	e9 55 ff ff ff       	jmp    c0018237 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182e2:	90                   	nop
c00182e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e7:	83 c4 2c             	add    esp,0x2c
c00182ea:	c2 04 00             	ret    0x4
c00182ed:	90                   	nop

c00182ee <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182ee:	83 ec 1c             	sub    esp,0x1c
c00182f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182f5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182fd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018302:	88 c8                	mov    al,cl
c0018304:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018308:	88 d0                	mov    al,dl
c001830a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001830e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018312:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001831c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001831f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018323:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001832b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018331:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018335:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001833c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018345:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001834b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001834f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018356:	83 c2 2a             	add    edx,0x2a
c0018359:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001835d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018361:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001836e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018372:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001837a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018380:	8d 50 01             	lea    edx,[eax+0x1]
c0018383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018387:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001838d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018391:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018397:	3d 00 02 00 00       	cmp    eax,0x200
c001839c:	75 10                	jne    c00183ae <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001839e:	83 ec 0c             	sub    esp,0xc
c00183a1:	68 2f b5 02 c0       	push   0xc002b52f
c00183a6:	e8 08 22 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	90                   	nop
c00183af:	83 c4 1c             	add    esp,0x1c
c00183b2:	c3                   	ret    
c00183b3:	90                   	nop

c00183b4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183b4:	b8 00 00 00 00       	mov    eax,0x0
c00183b9:	c3                   	ret    

c00183ba <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183ba:	83 ec 1c             	sub    esp,0x1c
c00183bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183c1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183c4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183c8:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00183cd:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183d2:	83 ec 08             	sub    esp,0x8
c00183d5:	52                   	push   edx
c00183d6:	50                   	push   eax
c00183d7:	e8 7c 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183e3:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00183e8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183ed:	83 ec 04             	sub    esp,0x4
c00183f0:	6a 01                	push   0x1
c00183f2:	52                   	push   edx
c00183f3:	50                   	push   eax
c00183f4:	e8 75 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183f9:	83 c4 10             	add    esp,0x10
c00183fc:	90                   	nop
c00183fd:	83 c4 1c             	add    esp,0x1c
c0018400:	c3                   	ret    
c0018401:	90                   	nop

c0018402 <ACPI::open(int, int, void*)>:
c0018402:	53                   	push   ebx
c0018403:	83 ec 28             	sub    esp,0x28
c0018406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018415:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001841c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0018421:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018427:	83 e0 04             	and    eax,0x4
c001842a:	84 c0                	test   al,al
c001842c:	74 47                	je     c0018475 <ACPI::open(int, int, void*)+0x73>
c001842e:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0018433:	83 ec 08             	sub    esp,0x8
c0018436:	68 4c b5 02 c0       	push   0xc002b54c
c001843b:	50                   	push   eax
c001843c:	e8 3f f8 ff ff       	call   c0017c80 <findDataTable(unsigned char*, char*)>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018448:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001844d:	74 26                	je     c0018475 <ACPI::open(int, int, void*)+0x73>
c001844f:	83 ec 0c             	sub    esp,0xc
c0018452:	68 51 b5 02 c0       	push   0xc002b551
c0018457:	e8 b6 aa ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018463:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001846a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018475:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001847d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018481:	8a 00                	mov    al,BYTE PTR [eax]
c0018483:	3c 01                	cmp    al,0x1
c0018485:	75 28                	jne    c00184af <ACPI::open(int, int, void*)+0xad>
c0018487:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001848b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018492:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018496:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001849d:	83 ec 0c             	sub    esp,0xc
c00184a0:	68 62 b5 02 c0       	push   0xc002b562
c00184a5:	e8 68 aa ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	eb 25                	jmp    c00184d4 <ACPI::open(int, int, void*)+0xd2>
c00184af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184b3:	8a 00                	mov    al,BYTE PTR [eax]
c00184b5:	3c 02                	cmp    al,0x2
c00184b7:	75 1b                	jne    c00184d4 <ACPI::open(int, int, void*)+0xd2>
c00184b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c4:	83 ec 0c             	sub    esp,0xc
c00184c7:	68 6a b5 02 c0       	push   0xc002b56a
c00184cc:	e8 41 aa ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184de:	83 f0 01             	xor    eax,0x1
c00184e1:	84 c0                	test   al,al
c00184e3:	74 6a                	je     c001854f <ACPI::open(int, int, void*)+0x14d>
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	68 72 b5 02 c0       	push   0xc002b572
c00184ed:	e8 20 aa ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	e8 56 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184fe:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018503:	75 28                	jne    c001852d <ACPI::open(int, int, void*)+0x12b>
c0018505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018509:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018514:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001851b:	83 ec 0c             	sub    esp,0xc
c001851e:	68 80 b5 02 c0       	push   0xc002b580
c0018523:	e8 ea a9 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018528:	83 c4 10             	add    esp,0x10
c001852b:	eb 22                	jmp    c001854f <ACPI::open(int, int, void*)+0x14d>
c001852d:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018532:	75 1b                	jne    c001854f <ACPI::open(int, int, void*)+0x14d>
c0018534:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018538:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001853f:	83 ec 0c             	sub    esp,0xc
c0018542:	68 8a b5 02 c0       	push   0xc002b58a
c0018547:	e8 c6 a9 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001854c:	83 c4 10             	add    esp,0x10
c001854f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018553:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018559:	84 c0                	test   al,al
c001855b:	74 13                	je     c0018570 <ACPI::open(int, int, void*)+0x16e>
c001855d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018561:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018567:	83 f0 01             	xor    eax,0x1
c001856a:	0f b6 c0             	movzx  eax,al
c001856d:	40                   	inc    eax
c001856e:	eb 05                	jmp    c0018575 <ACPI::open(int, int, void*)+0x173>
c0018570:	b8 00 00 00 00       	mov    eax,0x0
c0018575:	83 ec 08             	sub    esp,0x8
c0018578:	50                   	push   eax
c0018579:	68 94 b5 02 c0       	push   0xc002b594
c001857e:	e8 8f a9 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018583:	83 c4 10             	add    esp,0x10
c0018586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001858a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018590:	84 c0                	test   al,al
c0018592:	74 67                	je     c00185fb <ACPI::open(int, int, void*)+0x1f9>
c0018594:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185a3:	e8 98 72 ff ff       	call   c000f840 <malloc>
c00185a8:	83 c4 10             	add    esp,0x10
c00185ab:	89 c3                	mov    ebx,eax
c00185ad:	83 ec 0c             	sub    esp,0xc
c00185b0:	53                   	push   ebx
c00185b1:	e8 26 a3 00 00       	call   c00228dc <PCI::PCI()>
c00185b6:	83 c4 10             	add    esp,0x10
c00185b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c1:	83 ec 08             	sub    esp,0x8
c00185c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185c8:	50                   	push   eax
c00185c9:	e8 6a bd ff ff       	call   c0014338 <Device::addChild(Device*)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00185d7:	83 c0 08             	add    eax,0x8
c00185da:	8b 00                	mov    eax,DWORD PTR [eax]
c00185dc:	6a 00                	push   0x0
c00185de:	6a 00                	push   0x0
c00185e0:	6a 00                	push   0x0
c00185e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185e6:	ff d0                	call   eax
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	68 9d b5 02 c0       	push   0xc002b59d
c00185f3:	e8 1a a9 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	83 ec 0c             	sub    esp,0xc
c00185fe:	68 a8 b5 02 c0       	push   0xc002b5a8
c0018603:	e8 cb 46 00 00       	call   c001ccd3 <Thr::loadKernelSymbolTable(char const*)>
c0018608:	83 c4 10             	add    esp,0x10
c001860b:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0018611:	83 ec 08             	sub    esp,0x8
c0018614:	6a 01                	push   0x1
c0018616:	68 c6 b5 02 c0       	push   0xc002b5c6
c001861b:	e8 10 51 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	83 ec 08             	sub    esp,0x8
c0018626:	53                   	push   ebx
c0018627:	50                   	push   eax
c0018628:	e8 37 53 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c001862d:	83 c4 10             	add    esp,0x10
c0018630:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0018636:	83 ec 08             	sub    esp,0x8
c0018639:	6a 01                	push   0x1
c001863b:	68 e3 b5 02 c0       	push   0xc002b5e3
c0018640:	e8 eb 50 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c0018645:	83 c4 10             	add    esp,0x10
c0018648:	83 ec 08             	sub    esp,0x8
c001864b:	53                   	push   ebx
c001864c:	50                   	push   eax
c001864d:	e8 12 53 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c0018652:	83 c4 10             	add    esp,0x10
c0018655:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001865a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018660:	83 e0 04             	and    eax,0x4
c0018663:	84 c0                	test   al,al
c0018665:	0f 84 d2 00 00 00    	je     c001873d <ACPI::open(int, int, void*)+0x33b>
c001866b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018672:	83 ec 0c             	sub    esp,0xc
c0018675:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018679:	e8 c2 71 ff ff       	call   c000f840 <malloc>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	89 c3                	mov    ebx,eax
c0018683:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0018688:	83 ec 04             	sub    esp,0x4
c001868b:	50                   	push   eax
c001868c:	68 00 b6 02 c0       	push   0xc002b600
c0018691:	53                   	push   ebx
c0018692:	e8 d3 ad ff ff       	call   c001346a <File::File(char const*, Process*)>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001869e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186a3:	74 17                	je     c00186bc <ACPI::open(int, int, void*)+0x2ba>
c00186a5:	83 ec 0c             	sub    esp,0xc
c00186a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186ac:	e8 8b b0 ff ff       	call   c001373c <File::exists()>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	84 c0                	test   al,al
c00186b6:	74 04                	je     c00186bc <ACPI::open(int, int, void*)+0x2ba>
c00186b8:	b0 01                	mov    al,0x1
c00186ba:	eb 02                	jmp    c00186be <ACPI::open(int, int, void*)+0x2bc>
c00186bc:	b0 00                	mov    al,0x0
c00186be:	84 c0                	test   al,al
c00186c0:	74 22                	je     c00186e4 <ACPI::open(int, int, void*)+0x2e2>
c00186c2:	83 ec 08             	sub    esp,0x8
c00186c5:	6a 01                	push   0x1
c00186c7:	68 00 b6 02 c0       	push   0xc002b600
c00186cc:	e8 5f 50 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c00186d1:	83 c4 10             	add    esp,0x10
c00186d4:	83 ec 08             	sub    esp,0x8
c00186d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186db:	50                   	push   eax
c00186dc:	e8 83 52 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186e9:	74 1e                	je     c0018709 <ACPI::open(int, int, void*)+0x307>
c00186eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186f0:	74 17                	je     c0018709 <ACPI::open(int, int, void*)+0x307>
c00186f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f8:	83 c0 08             	add    eax,0x8
c00186fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018704:	ff d0                	call   eax
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c001870e:	83 ec 08             	sub    esp,0x8
c0018711:	68 1d b6 02 c0       	push   0xc002b61d
c0018716:	50                   	push   eax
c0018717:	e8 64 f5 ff ff       	call   c0017c80 <findDataTable(unsigned char*, char*)>
c001871c:	83 c4 10             	add    esp,0x10
c001871f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018723:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018728:	74 13                	je     c001873d <ACPI::open(int, int, void*)+0x33b>
c001872a:	83 ec 08             	sub    esp,0x8
c001872d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018731:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018735:	e8 80 fc ff ff       	call   c00183ba <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	b8 00 00 00 00       	mov    eax,0x0
c0018742:	83 c4 28             	add    esp,0x28
c0018745:	5b                   	pop    ebx
c0018746:	c3                   	ret    
c0018747:	90                   	nop

c0018748 <ACPI::sleep()>:
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c0018750:	85 c0                	test   eax,eax
c0018752:	74 07                	je     c001875b <ACPI::sleep()+0x13>
c0018754:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c0018759:	ff d0                	call   eax
c001875b:	90                   	nop
c001875c:	83 c4 0c             	add    esp,0xc
c001875f:	c3                   	ret    

c0018760 <CPU::close(int, int, void*)>:
c0018760:	31 c0                	xor    eax,eax
c0018762:	c3                   	ret    
c0018763:	90                   	nop

c0018764 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018764:	55                   	push   ebp
c0018765:	57                   	push   edi
c0018766:	56                   	push   esi
c0018767:	53                   	push   ebx
c0018768:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001876c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018770:	89 ce                	mov    esi,ecx
c0018772:	89 d5                	mov    ebp,edx
c0018774:	80 f9 04             	cmp    cl,0x4
c0018777:	75 28                	jne    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018779:	8d 42 f9             	lea    eax,[edx-0x7]
c001877c:	3c 03                	cmp    al,0x3
c001877e:	0f 86 63 01 00 00    	jbe    c00188e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018784:	80 fa 03             	cmp    dl,0x3
c0018787:	0f 84 5a 01 00 00    	je     c00188e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001878d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018790:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018795:	89 fb                	mov    ebx,edi
c0018797:	80 fb 01             	cmp    bl,0x1
c001879a:	77 4e                	ja     c00187ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001879c:	e9 52 01 00 00       	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a1:	80 f9 05             	cmp    cl,0x5
c00187a4:	75 4d                	jne    c00187f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187a6:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00187ab:	80 fa 03             	cmp    dl,0x3
c00187ae:	0f 86 3f 01 00 00    	jbe    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b4:	8d 7a fa             	lea    edi,[edx-0x6]
c00187b7:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c00187bc:	89 fb                	mov    ebx,edi
c00187be:	80 fb 01             	cmp    bl,0x1
c00187c1:	0f 86 2c 01 00 00    	jbe    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c7:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00187cc:	80 fa 08             	cmp    dl,0x8
c00187cf:	0f 84 1e 01 00 00    	je     c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d5:	89 d7                	mov    edi,edx
c00187d7:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00187dc:	83 e7 fb             	and    edi,0xfffffffb
c00187df:	89 fb                	mov    ebx,edi
c00187e1:	80 fb 09             	cmp    bl,0x9
c00187e4:	0f 84 09 01 00 00    	je     c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ea:	31 c0                	xor    eax,eax
c00187ec:	89 eb                	mov    ebx,ebp
c00187ee:	0f b6 fb             	movzx  edi,bl
c00187f1:	eb 30                	jmp    c0018823 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187f3:	31 c0                	xor    eax,eax
c00187f5:	80 f9 06             	cmp    cl,0x6
c00187f8:	75 f2                	jne    c00187ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187fa:	80 fa 0a             	cmp    dl,0xa
c00187fd:	77 ed                	ja     c00187ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187ff:	bf de 05 00 00       	mov    edi,0x5de
c0018804:	0f a3 d7             	bt     edi,edx
c0018807:	73 e3                	jae    c00187ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018809:	b8 00 da 02 c0       	mov    eax,0xc002da00
c001880e:	e9 e0 00 00 00       	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018813:	39 c7                	cmp    edi,eax
c0018815:	0f 84 d3 00 00 00    	je     c00188ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001881b:	40                   	inc    eax
c001881c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018821:	74 09                	je     c001882c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018823:	89 f3                	mov    ebx,esi
c0018825:	80 fb 0f             	cmp    bl,0xf
c0018828:	75 f1                	jne    c001881b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001882a:	eb e7                	jmp    c0018813 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001882c:	80 f9 10             	cmp    cl,0x10
c001882f:	75 14                	jne    c0018845 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018831:	8d 42 fc             	lea    eax,[edx-0x4]
c0018834:	83 e0 fb             	and    eax,0xfffffffb
c0018837:	3c 02                	cmp    al,0x2
c0018839:	76 34                	jbe    c001886f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001883b:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018840:	80 fa 02             	cmp    dl,0x2
c0018843:	eb 24                	jmp    c0018869 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018845:	80 f9 11             	cmp    cl,0x11
c0018848:	75 13                	jne    c001885d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001884a:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c001884f:	80 fa 03             	cmp    dl,0x3
c0018852:	0f 85 9b 00 00 00    	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018858:	e9 91 00 00 00       	jmp    c00188ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001885d:	80 f9 12             	cmp    cl,0x12
c0018860:	75 14                	jne    c0018876 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018862:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018867:	fe ca                	dec    dl
c0018869:	0f 85 84 00 00 00    	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886f:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018874:	eb 7d                	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018876:	80 f9 14             	cmp    cl,0x14
c0018879:	75 12                	jne    c001888d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001887b:	4a                   	dec    edx
c001887c:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018881:	80 fa 01             	cmp    dl,0x1
c0018884:	77 6d                	ja     c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018886:	b8 30 da 02 c0       	mov    eax,0xc002da30
c001888b:	eb 66                	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888d:	80 f9 15             	cmp    cl,0x15
c0018890:	75 31                	jne    c00188c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018892:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018897:	80 fa 01             	cmp    dl,0x1
c001889a:	74 57                	je     c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889c:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c00188a1:	80 fa 13             	cmp    dl,0x13
c00188a4:	76 0c                	jbe    c00188b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188a6:	80 fa 30             	cmp    dl,0x30
c00188a9:	75 48                	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ab:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00188b0:	eb 41                	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b2:	b9 04 00 09 00       	mov    ecx,0x90004
c00188b7:	0f a3 d1             	bt     ecx,edx
c00188ba:	73 37                	jae    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bc:	b8 50 da 02 c0       	mov    eax,0xc002da50
c00188c1:	eb 30                	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c3:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c00188c8:	80 f9 16             	cmp    cl,0x16
c00188cb:	75 26                	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cd:	b8 70 da 02 c0       	mov    eax,0xc002da70
c00188d2:	84 d2                	test   dl,dl
c00188d4:	74 1d                	je     c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d6:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c00188db:	80 fa 30             	cmp    dl,0x30
c00188de:	75 13                	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e0:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00188e5:	eb 0c                	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e7:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c00188ec:	eb 05                	jmp    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ee:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00188f3:	5b                   	pop    ebx
c00188f4:	5e                   	pop    esi
c00188f5:	5f                   	pop    edi
c00188f6:	5d                   	pop    ebp
c00188f7:	c3                   	ret    

c00188f8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018900:	80 f9 04             	cmp    cl,0x4
c0018903:	75 6b                	jne    c0018970 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018905:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c001890a:	80 fa 01             	cmp    dl,0x1
c001890d:	0f 86 92 02 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018913:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018918:	80 fa 02             	cmp    dl,0x2
c001891b:	0f 84 84 02 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018921:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018926:	80 fa 03             	cmp    dl,0x3
c0018929:	0f 84 76 02 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892f:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018934:	80 fa 04             	cmp    dl,0x4
c0018937:	0f 84 68 02 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893d:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018942:	80 fa 05             	cmp    dl,0x5
c0018945:	0f 84 5a 02 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894b:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018950:	80 fa 07             	cmp    dl,0x7
c0018953:	0f 84 4c 02 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018959:	83 ea 08             	sub    edx,0x8
c001895c:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018961:	80 fa 01             	cmp    dl,0x1
c0018964:	0f 87 3b 02 00 00    	ja     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896a:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001896f:	c3                   	ret    
c0018970:	80 f9 05             	cmp    cl,0x5
c0018973:	75 45                	jne    c00189ba <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018975:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018978:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001897d:	80 f9 02             	cmp    cl,0x2
c0018980:	0f 86 1f 02 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018986:	80 fa 04             	cmp    dl,0x4
c0018989:	0f 84 f3 01 00 00    	je     c0018b82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001898f:	80 fa 07             	cmp    dl,0x7
c0018992:	0f 84 0d 02 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018998:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c001899d:	80 fa 08             	cmp    dl,0x8
c00189a0:	0f 84 ff 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a6:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c00189ab:	80 fa 09             	cmp    dl,0x9
c00189ae:	0f 85 f1 01 00 00    	jne    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b4:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00189b9:	c3                   	ret    
c00189ba:	80 f9 06             	cmp    cl,0x6
c00189bd:	0f 85 85 01 00 00    	jne    c0018b48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189c3:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00189c8:	80 fa 01             	cmp    dl,0x1
c00189cb:	0f 84 d4 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d1:	8d 42 fb             	lea    eax,[edx-0x5]
c00189d4:	3c 01                	cmp    al,0x1
c00189d6:	0f 86 ac 01 00 00    	jbe    c0018b88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189dc:	80 fa 03             	cmp    dl,0x3
c00189df:	0f 84 a3 01 00 00    	je     c0018b88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189e5:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189e8:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00189ed:	80 f9 01             	cmp    cl,0x1
c00189f0:	0f 86 af 01 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f6:	80 fa 09             	cmp    dl,0x9
c00189f9:	0f 84 8f 01 00 00    	je     c0018b8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189ff:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a02:	80 f9 01             	cmp    cl,0x1
c0018a05:	0f 86 9a 01 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018a10:	80 fa 0d             	cmp    dl,0xd
c0018a13:	0f 84 8c 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018a1e:	80 fa 0e             	cmp    dl,0xe
c0018a21:	0f 84 7e 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a27:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a2c:	80 fa 0f             	cmp    dl,0xf
c0018a2f:	0f 84 70 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018a3a:	80 fa 15             	cmp    dl,0x15
c0018a3d:	0f 84 62 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a43:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a46:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a4b:	80 f9 01             	cmp    cl,0x1
c0018a4e:	0f 86 51 01 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a54:	80 fa 1a             	cmp    dl,0x1a
c0018a57:	0f 84 37 01 00 00    	je     c0018b94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a5d:	80 fa 1c             	cmp    dl,0x1c
c0018a60:	0f 84 34 01 00 00    	je     c0018b9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a66:	80 fa 1d             	cmp    dl,0x1d
c0018a69:	0f 84 36 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6f:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a74:	80 fa 25             	cmp    dl,0x25
c0018a77:	0f 84 28 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a80:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a85:	80 f9 01             	cmp    cl,0x1
c0018a88:	0f 86 17 01 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8e:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a93:	80 fa 2a             	cmp    dl,0x2a
c0018a96:	0f 84 09 01 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018aa1:	80 fa 2c             	cmp    dl,0x2c
c0018aa4:	0f 84 fb 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaa:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018aaf:	80 fa 2d             	cmp    dl,0x2d
c0018ab2:	0f 84 ed 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab8:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018abd:	80 fa 2e             	cmp    dl,0x2e
c0018ac0:	0f 84 df 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac6:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018acb:	80 fa 2f             	cmp    dl,0x2f
c0018ace:	0f 84 d1 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad4:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ad7:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018adc:	80 f9 01             	cmp    cl,0x1
c0018adf:	0f 86 c0 00 00 00    	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae5:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018aea:	80 fa 37             	cmp    dl,0x37
c0018aed:	0f 84 b2 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af3:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018af8:	80 fa 3a             	cmp    dl,0x3a
c0018afb:	0f 84 a4 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b01:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018b06:	80 fa 3c             	cmp    dl,0x3c
c0018b09:	0f 84 96 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0f:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018b14:	80 fa 3d             	cmp    dl,0x3d
c0018b17:	0f 84 88 00 00 00    	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1d:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018b22:	80 fa 3e             	cmp    dl,0x3e
c0018b25:	74 7e                	je     c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b27:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b2a:	3c 01                	cmp    al,0x1
c0018b2c:	76 72                	jbe    c0018ba0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b2e:	80 fa 3f             	cmp    dl,0x3f
c0018b31:	74 6d                	je     c0018ba0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b33:	80 fa 4a             	cmp    dl,0x4a
c0018b36:	74 0a                	je     c0018b42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b38:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018b3d:	80 fa 4d             	cmp    dl,0x4d
c0018b40:	75 63                	jne    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b42:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018b47:	c3                   	ret    
c0018b48:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018b4d:	80 f9 0b             	cmp    cl,0xb
c0018b50:	75 0a                	jne    c0018b5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b52:	fe ca                	dec    dl
c0018b54:	75 4f                	jne    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b56:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b5b:	c3                   	ret    
c0018b5c:	80 f9 0f             	cmp    cl,0xf
c0018b5f:	75 44                	jne    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b61:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b66:	80 fa 02             	cmp    dl,0x2
c0018b69:	76 3a                	jbe    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6b:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b6e:	3c 01                	cmp    al,0x1
c0018b70:	76 0a                	jbe    c0018b7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b72:	b8 02 ba 02 c0       	mov    eax,0xc002ba02
c0018b77:	80 fa 06             	cmp    dl,0x6
c0018b7a:	75 29                	jne    c0018ba5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7c:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b81:	c3                   	ret    
c0018b82:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b87:	c3                   	ret    
c0018b88:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018b8d:	c3                   	ret    
c0018b8e:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b93:	c3                   	ret    
c0018b94:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018b99:	c3                   	ret    
c0018b9a:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018b9f:	c3                   	ret    
c0018ba0:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018ba5:	c3                   	ret    

c0018ba6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ba6:	60                   	pusha  
c0018ba7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018baf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bb3:	9c                   	pushf  
c0018bb4:	fa                   	cli    
c0018bb5:	0f 09                	wbinvd 
c0018bb7:	0f 30                	wrmsr  
c0018bb9:	9d                   	popf   
c0018bba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bbe:	89 02                	mov    DWORD PTR [edx],eax
c0018bc0:	61                   	popa   
c0018bc1:	c3                   	ret    

c0018bc2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bc2:	60                   	pusha  
c0018bc3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bc7:	9c                   	pushf  
c0018bc8:	fa                   	cli    
c0018bc9:	0f 09                	wbinvd 
c0018bcb:	31 c0                	xor    eax,eax
c0018bcd:	31 d2                	xor    edx,edx
c0018bcf:	0f 32                	rdmsr  
c0018bd1:	9d                   	popf   
c0018bd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bd6:	89 02                	mov    DWORD PTR [edx],eax
c0018bd8:	61                   	popa   
c0018bd9:	c3                   	ret    

c0018bda <CPU::AMD_K6_writeback(int, int, int)>:
c0018bda:	56                   	push   esi
c0018bdb:	53                   	push   ebx
c0018bdc:	83 ec 10             	sub    esp,0x10
c0018bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018be3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018be8:	75 5d                	jne    c0018c47 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bea:	83 f8 08             	cmp    eax,0x8
c0018bed:	75 09                	jne    c0018bf8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bef:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bf4:	7e 13                	jle    c0018c09 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bf6:	eb 30                	jmp    c0018c28 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bf8:	83 f8 06             	cmp    eax,0x6
c0018bfb:	7c 4a                	jl     c0018c47 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bfd:	83 f8 07             	cmp    eax,0x7
c0018c00:	7e 07                	jle    c0018c09 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c02:	83 f8 09             	cmp    eax,0x9
c0018c05:	74 21                	je     c0018c28 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c07:	eb 3e                	jmp    c0018c47 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c09:	89 e6                	mov    esi,esp
c0018c0b:	8b 1d c4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c4
c0018c11:	56                   	push   esi
c0018c12:	c1 eb 15             	shr    ebx,0x15
c0018c15:	68 82 00 00 c0       	push   0xc0000082
c0018c1a:	83 e3 7e             	and    ebx,0x7e
c0018c1d:	e8 a0 ff ff ff       	call   c0018bc2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c22:	56                   	push   esi
c0018c23:	6a 00                	push   0x0
c0018c25:	53                   	push   ebx
c0018c26:	eb 12                	jmp    c0018c3a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c28:	89 e3                	mov    ebx,esp
c0018c2a:	53                   	push   ebx
c0018c2b:	68 82 00 00 c0       	push   0xc0000082
c0018c30:	e8 8d ff ff ff       	call   c0018bc2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c35:	53                   	push   ebx
c0018c36:	6a 00                	push   0x0
c0018c38:	6a 00                	push   0x0
c0018c3a:	68 82 00 00 c0       	push   0xc0000082
c0018c3f:	e8 62 ff ff ff       	call   c0018ba6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c44:	83 c4 18             	add    esp,0x18
c0018c47:	83 c4 10             	add    esp,0x10
c0018c4a:	5b                   	pop    ebx
c0018c4b:	5e                   	pop    esi
c0018c4c:	c3                   	ret    
c0018c4d:	90                   	nop

c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c4e:	55                   	push   ebp
c0018c4f:	57                   	push   edi
c0018c50:	56                   	push   esi
c0018c51:	53                   	push   ebx
c0018c52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c56:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c5a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c5e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c62:	39 05 a0 da 02 c0    	cmp    DWORD PTR ds:0xc002daa0,eax
c0018c68:	75 23                	jne    c0018c8d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c6a:	a1 cc 10 03 c0       	mov    eax,ds:0xc00310cc
c0018c6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c73:	89 06                	mov    DWORD PTR [esi],eax
c0018c75:	a1 c8 10 03 c0       	mov    eax,ds:0xc00310c8
c0018c7a:	89 07                	mov    DWORD PTR [edi],eax
c0018c7c:	a1 c4 10 03 c0       	mov    eax,ds:0xc00310c4
c0018c81:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c84:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c0018c89:	89 02                	mov    DWORD PTR [edx],eax
c0018c8b:	eb 3f                	jmp    c0018ccc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c8d:	31 c9                	xor    ecx,ecx
c0018c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c93:	0f a2                	cpuid  
c0018c95:	89 06                	mov    DWORD PTR [esi],eax
c0018c97:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c9d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018ca0:	89 10                	mov    DWORD PTR [eax],edx
c0018ca2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ca6:	a3 a0 da 02 c0       	mov    ds:0xc002daa0,eax
c0018cab:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cad:	a3 cc 10 03 c0       	mov    ds:0xc00310cc,eax
c0018cb2:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cb4:	a3 c8 10 03 c0       	mov    ds:0xc00310c8,eax
c0018cb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cbc:	a3 c4 10 03 c0       	mov    ds:0xc00310c4,eax
c0018cc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cc7:	a3 c0 10 03 c0       	mov    ds:0xc00310c0,eax
c0018ccc:	5b                   	pop    ebx
c0018ccd:	5e                   	pop    esi
c0018cce:	5f                   	pop    edi
c0018ccf:	5d                   	pop    ebp
c0018cd0:	c3                   	ret    
c0018cd1:	90                   	nop

c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>:
c0018cd2:	83 ec 10             	sub    esp,0x10
c0018cd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd9:	50                   	push   eax
c0018cda:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cde:	50                   	push   eax
c0018cdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce3:	50                   	push   eax
c0018ce4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce8:	50                   	push   eax
c0018ce9:	6a 01                	push   0x1
c0018ceb:	e8 5e ff ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cf4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cf8:	0f 95 c0             	setne  al
c0018cfb:	83 c4 24             	add    esp,0x24
c0018cfe:	c3                   	ret    
c0018cff:	90                   	nop

c0018d00 <CPU::cpuidCheckECX(unsigned int)>:
c0018d00:	83 ec 10             	sub    esp,0x10
c0018d03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d07:	50                   	push   eax
c0018d08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0c:	50                   	push   eax
c0018d0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d11:	50                   	push   eax
c0018d12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d16:	50                   	push   eax
c0018d17:	6a 01                	push   0x1
c0018d19:	e8 30 ff ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d22:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d26:	0f 95 c0             	setne  al
c0018d29:	83 c4 24             	add    esp,0x24
c0018d2c:	c3                   	ret    
c0018d2d:	90                   	nop

c0018d2e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d2e:	83 ec 10             	sub    esp,0x10
c0018d31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d35:	50                   	push   eax
c0018d36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3a:	50                   	push   eax
c0018d3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3f:	50                   	push   eax
c0018d40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d44:	50                   	push   eax
c0018d45:	6a 07                	push   0x7
c0018d47:	e8 02 ff ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d50:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d54:	0f 95 c0             	setne  al
c0018d57:	83 c4 24             	add    esp,0x24
c0018d5a:	c3                   	ret    
c0018d5b:	90                   	nop

c0018d5c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d5c:	83 ec 10             	sub    esp,0x10
c0018d5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d63:	50                   	push   eax
c0018d64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d68:	50                   	push   eax
c0018d69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6d:	50                   	push   eax
c0018d6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d72:	50                   	push   eax
c0018d73:	6a 07                	push   0x7
c0018d75:	e8 d4 fe ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d7e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d82:	0f 95 c0             	setne  al
c0018d85:	83 c4 24             	add    esp,0x24
c0018d88:	c3                   	ret    
c0018d89:	90                   	nop

c0018d8a <CPU::CPU()>:
c0018d8a:	83 ec 0c             	sub    esp,0xc
c0018d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d91:	83 ec 08             	sub    esp,0x8
c0018d94:	68 02 ba 02 c0       	push   0xc002ba02
c0018d99:	50                   	push   eax
c0018d9a:	e8 89 b7 ff ff       	call   c0014528 <Device::Device(char const*)>
c0018d9f:	83 c4 10             	add    esp,0x10
c0018da2:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0018da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dab:	89 10                	mov    DWORD PTR [eax],edx
c0018dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dbf:	05 78 01 00 00       	add    eax,0x178
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	50                   	push   eax
c0018dc8:	e8 8b 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd4:	05 7c 09 00 00       	add    eax,0x97c
c0018dd9:	83 ec 0c             	sub    esp,0xc
c0018ddc:	50                   	push   eax
c0018ddd:	e8 d8 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018de2:	83 c4 10             	add    esp,0x10
c0018de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de9:	05 7c 11 00 00       	add    eax,0x117c
c0018dee:	83 ec 0c             	sub    esp,0xc
c0018df1:	50                   	push   eax
c0018df2:	e8 0f 87 ff ff       	call   c0011506 <TSS::TSS()>
c0018df7:	83 c4 10             	add    esp,0x10
c0018dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dfe:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e09:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e13:	90                   	nop
c0018e14:	83 c4 0c             	add    esp,0xc
c0018e17:	c3                   	ret    

c0018e18 <CPU::displayFeatures()>:
c0018e18:	53                   	push   ebx
c0018e19:	83 ec 10             	sub    esp,0x10
c0018e1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e20:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e26:	68 10 b7 02 c0       	push   0xc002b710
c0018e2b:	e8 e2 a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018e30:	59                   	pop    ecx
c0018e31:	58                   	pop    eax
c0018e32:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e38:	50                   	push   eax
c0018e39:	68 21 b7 02 c0       	push   0xc002b721
c0018e3e:	e8 cf a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018e43:	58                   	pop    eax
c0018e44:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e4a:	5a                   	pop    edx
c0018e4b:	c1 e8 0e             	shr    eax,0xe
c0018e4e:	0f b6 c0             	movzx  eax,al
c0018e51:	50                   	push   eax
c0018e52:	68 32 b7 02 c0       	push   0xc002b732
c0018e57:	e8 b6 a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018e5c:	59                   	pop    ecx
c0018e5d:	58                   	pop    eax
c0018e5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e64:	66 c1 e8 06          	shr    ax,0x6
c0018e68:	0f b6 c0             	movzx  eax,al
c0018e6b:	50                   	push   eax
c0018e6c:	68 43 b7 02 c0       	push   0xc002b743
c0018e71:	e8 9c a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018e76:	c7 04 24 f0 bb 02 c0 	mov    DWORD PTR [esp],0xc002bbf0
c0018e7d:	e8 90 a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018e82:	83 c4 10             	add    esp,0x10
c0018e85:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e8a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e91:	74 05                	je     c0018e98 <CPU::displayFeatures()+0x80>
c0018e93:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018e98:	52                   	push   edx
c0018e99:	52                   	push   edx
c0018e9a:	50                   	push   eax
c0018e9b:	68 54 b7 02 c0       	push   0xc002b754
c0018ea0:	e8 6d a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ead:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018eb4:	78 05                	js     c0018ebb <CPU::displayFeatures()+0xa3>
c0018eb6:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ebb:	51                   	push   ecx
c0018ebc:	51                   	push   ecx
c0018ebd:	50                   	push   eax
c0018ebe:	68 6b b7 02 c0       	push   0xc002b76b
c0018ec3:	e8 4a a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ed0:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ed7:	75 05                	jne    c0018ede <CPU::displayFeatures()+0xc6>
c0018ed9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ede:	52                   	push   edx
c0018edf:	52                   	push   edx
c0018ee0:	50                   	push   eax
c0018ee1:	68 82 b7 02 c0       	push   0xc002b782
c0018ee6:	e8 27 a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ef3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018efa:	75 05                	jne    c0018f01 <CPU::displayFeatures()+0xe9>
c0018efc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f01:	51                   	push   ecx
c0018f02:	51                   	push   ecx
c0018f03:	50                   	push   eax
c0018f04:	68 99 b7 02 c0       	push   0xc002b799
c0018f09:	e8 04 a0 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018f0e:	83 c4 10             	add    esp,0x10
c0018f11:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f16:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f1d:	75 05                	jne    c0018f24 <CPU::displayFeatures()+0x10c>
c0018f1f:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f24:	52                   	push   edx
c0018f25:	52                   	push   edx
c0018f26:	50                   	push   eax
c0018f27:	68 b0 b7 02 c0       	push   0xc002b7b0
c0018f2c:	e8 e1 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f39:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f40:	75 05                	jne    c0018f47 <CPU::displayFeatures()+0x12f>
c0018f42:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f47:	51                   	push   ecx
c0018f48:	51                   	push   ecx
c0018f49:	50                   	push   eax
c0018f4a:	68 c7 b7 02 c0       	push   0xc002b7c7
c0018f4f:	e8 be 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f5c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f63:	75 05                	jne    c0018f6a <CPU::displayFeatures()+0x152>
c0018f65:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f6a:	52                   	push   edx
c0018f6b:	52                   	push   edx
c0018f6c:	50                   	push   eax
c0018f6d:	68 de b7 02 c0       	push   0xc002b7de
c0018f72:	e8 9b 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f7f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f86:	75 05                	jne    c0018f8d <CPU::displayFeatures()+0x175>
c0018f88:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f8d:	51                   	push   ecx
c0018f8e:	51                   	push   ecx
c0018f8f:	50                   	push   eax
c0018f90:	68 f5 b7 02 c0       	push   0xc002b7f5
c0018f95:	e8 78 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fa2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fa9:	75 05                	jne    c0018fb0 <CPU::displayFeatures()+0x198>
c0018fab:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fb0:	52                   	push   edx
c0018fb1:	52                   	push   edx
c0018fb2:	50                   	push   eax
c0018fb3:	68 0c b8 02 c0       	push   0xc002b80c
c0018fb8:	e8 55 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018fbd:	83 c4 10             	add    esp,0x10
c0018fc0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fc5:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fcc:	75 05                	jne    c0018fd3 <CPU::displayFeatures()+0x1bb>
c0018fce:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fd3:	51                   	push   ecx
c0018fd4:	51                   	push   ecx
c0018fd5:	50                   	push   eax
c0018fd6:	68 23 b8 02 c0       	push   0xc002b823
c0018fdb:	e8 32 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fe8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fef:	75 05                	jne    c0018ff6 <CPU::displayFeatures()+0x1de>
c0018ff1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ff6:	52                   	push   edx
c0018ff7:	52                   	push   edx
c0018ff8:	50                   	push   eax
c0018ff9:	68 3a b8 02 c0       	push   0xc002b83a
c0018ffe:	e8 0f 9f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0019003:	83 c4 10             	add    esp,0x10
c0019006:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001900b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019012:	75 05                	jne    c0019019 <CPU::displayFeatures()+0x201>
c0019014:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019019:	51                   	push   ecx
c001901a:	51                   	push   ecx
c001901b:	50                   	push   eax
c001901c:	68 51 b8 02 c0       	push   0xc002b851
c0019021:	e8 ec 9e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0019026:	83 c4 10             	add    esp,0x10
c0019029:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001902e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019035:	75 05                	jne    c001903c <CPU::displayFeatures()+0x224>
c0019037:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001903c:	52                   	push   edx
c001903d:	52                   	push   edx
c001903e:	50                   	push   eax
c001903f:	68 68 b8 02 c0       	push   0xc002b868
c0019044:	e8 c9 9e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019051:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019058:	78 05                	js     c001905f <CPU::displayFeatures()+0x247>
c001905a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001905f:	51                   	push   ecx
c0019060:	51                   	push   ecx
c0019061:	50                   	push   eax
c0019062:	68 7f b8 02 c0       	push   0xc002b87f
c0019067:	e8 a6 9e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001906c:	83 c4 10             	add    esp,0x10
c001906f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019074:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001907b:	75 05                	jne    c0019082 <CPU::displayFeatures()+0x26a>
c001907d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019082:	52                   	push   edx
c0019083:	52                   	push   edx
c0019084:	50                   	push   eax
c0019085:	68 96 b8 02 c0       	push   0xc002b896
c001908a:	e8 83 9e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001908f:	83 c4 18             	add    esp,0x18
c0019092:	5b                   	pop    ebx
c0019093:	c3                   	ret    

c0019094 <CPU::detectFeatures()>:
c0019094:	55                   	push   ebp
c0019095:	57                   	push   edi
c0019096:	56                   	push   esi
c0019097:	53                   	push   ebx
c0019098:	83 ec 50             	sub    esp,0x50
c001909b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001909f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190a9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190b0:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190b6:	6a 0d                	push   0xd
c00190b8:	6a 00                	push   0x0
c00190ba:	57                   	push   edi
c00190bb:	e8 b8 76 fe ff       	call   c0000778 <memset>
c00190c0:	83 c4 10             	add    esp,0x10
c00190c3:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00190c8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190cf:	0f 84 20 09 00 00    	je     c00199f5 <CPU::detectFeatures()+0x961>
c00190d5:	83 ec 0c             	sub    esp,0xc
c00190d8:	6a 10                	push   0x10
c00190da:	e8 f3 fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c00190df:	83 e0 01             	and    eax,0x1
c00190e2:	8d 14 00             	lea    edx,[eax+eax*1]
c00190e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190eb:	83 e0 fd             	and    eax,0xfffffffd
c00190ee:	09 d0                	or     eax,edx
c00190f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190f6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190fd:	e8 d0 fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c0019102:	83 e0 01             	and    eax,0x1
c0019105:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001910c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019112:	83 e0 fb             	and    eax,0xfffffffb
c0019115:	09 d0                	or     eax,edx
c0019117:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001911d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019124:	e8 a9 fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c0019129:	83 e0 01             	and    eax,0x1
c001912c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019133:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019139:	83 e0 f7             	and    eax,0xfffffff7
c001913c:	09 d0                	or     eax,edx
c001913e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019144:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001914b:	e8 82 fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c0019150:	83 e0 01             	and    eax,0x1
c0019153:	c1 e0 04             	shl    eax,0x4
c0019156:	88 c2                	mov    dl,al
c0019158:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915e:	83 e0 ef             	and    eax,0xffffffef
c0019161:	09 d0                	or     eax,edx
c0019163:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019169:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019170:	e8 5d fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c0019175:	83 e0 01             	and    eax,0x1
c0019178:	c1 e0 05             	shl    eax,0x5
c001917b:	88 c2                	mov    dl,al
c001917d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019183:	83 e0 df             	and    eax,0xffffffdf
c0019186:	09 d0                	or     eax,edx
c0019188:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019195:	e8 38 fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c001919a:	83 e0 01             	and    eax,0x1
c001919d:	8d 14 00             	lea    edx,[eax+eax*1]
c00191a0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191a6:	83 e0 fd             	and    eax,0xfffffffd
c00191a9:	09 d0                	or     eax,edx
c00191ab:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191b1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191b8:	e8 15 fb ff ff       	call   c0018cd2 <CPU::cpuidCheckEDX(unsigned int)>
c00191bd:	83 e0 01             	and    eax,0x1
c00191c0:	c1 e0 06             	shl    eax,0x6
c00191c3:	88 c2                	mov    dl,al
c00191c5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191cb:	83 e0 bf             	and    eax,0xffffffbf
c00191ce:	09 d0                	or     eax,edx
c00191d0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191d6:	58                   	pop    eax
c00191d7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191db:	56                   	push   esi
c00191dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191e0:	55                   	push   ebp
c00191e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191e5:	50                   	push   eax
c00191e6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191ea:	52                   	push   edx
c00191eb:	6a 00                	push   0x0
c00191ed:	e8 5c fa ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191f2:	83 c4 1c             	add    esp,0x1c
c00191f5:	6a 04                	push   0x4
c00191f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191fb:	50                   	push   eax
c00191fc:	57                   	push   edi
c00191fd:	e8 42 75 fe ff       	call   c0000744 <memcpy>
c0019202:	83 c4 0c             	add    esp,0xc
c0019205:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001920b:	6a 04                	push   0x4
c001920d:	56                   	push   esi
c001920e:	50                   	push   eax
c001920f:	e8 30 75 fe ff       	call   c0000744 <memcpy>
c0019214:	83 c4 0c             	add    esp,0xc
c0019217:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001921d:	6a 04                	push   0x4
c001921f:	55                   	push   ebp
c0019220:	50                   	push   eax
c0019221:	e8 1e 75 fe ff       	call   c0000744 <memcpy>
c0019226:	58                   	pop    eax
c0019227:	5a                   	pop    edx
c0019228:	68 ad b8 02 c0       	push   0xc002b8ad
c001922d:	57                   	push   edi
c001922e:	e8 8d 76 fe ff       	call   c00008c0 <strcmp>
c0019233:	83 c4 10             	add    esp,0x10
c0019236:	85 c0                	test   eax,eax
c0019238:	75 0f                	jne    c0019249 <CPU::detectFeatures()+0x1b5>
c001923a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019244:	e9 22 02 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c0019249:	50                   	push   eax
c001924a:	50                   	push   eax
c001924b:	68 ba b8 02 c0       	push   0xc002b8ba
c0019250:	57                   	push   edi
c0019251:	e8 6a 76 fe ff       	call   c00008c0 <strcmp>
c0019256:	83 c4 10             	add    esp,0x10
c0019259:	85 c0                	test   eax,eax
c001925b:	74 dd                	je     c001923a <CPU::detectFeatures()+0x1a6>
c001925d:	51                   	push   ecx
c001925e:	51                   	push   ecx
c001925f:	68 c7 b8 02 c0       	push   0xc002b8c7
c0019264:	57                   	push   edi
c0019265:	e8 56 76 fe ff       	call   c00008c0 <strcmp>
c001926a:	83 c4 10             	add    esp,0x10
c001926d:	85 c0                	test   eax,eax
c001926f:	74 2a                	je     c001929b <CPU::detectFeatures()+0x207>
c0019271:	52                   	push   edx
c0019272:	52                   	push   edx
c0019273:	68 d4 b8 02 c0       	push   0xc002b8d4
c0019278:	57                   	push   edi
c0019279:	e8 42 76 fe ff       	call   c00008c0 <strcmp>
c001927e:	83 c4 10             	add    esp,0x10
c0019281:	85 c0                	test   eax,eax
c0019283:	74 16                	je     c001929b <CPU::detectFeatures()+0x207>
c0019285:	50                   	push   eax
c0019286:	50                   	push   eax
c0019287:	68 e1 b8 02 c0       	push   0xc002b8e1
c001928c:	57                   	push   edi
c001928d:	e8 2e 76 fe ff       	call   c00008c0 <strcmp>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	85 c0                	test   eax,eax
c0019297:	74 48                	je     c00192e1 <CPU::detectFeatures()+0x24d>
c0019299:	eb 0f                	jmp    c00192aa <CPU::detectFeatures()+0x216>
c001929b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192a5:	e9 c1 01 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c00192aa:	50                   	push   eax
c00192ab:	50                   	push   eax
c00192ac:	68 ee b8 02 c0       	push   0xc002b8ee
c00192b1:	57                   	push   edi
c00192b2:	e8 09 76 fe ff       	call   c00008c0 <strcmp>
c00192b7:	83 c4 10             	add    esp,0x10
c00192ba:	85 c0                	test   eax,eax
c00192bc:	74 23                	je     c00192e1 <CPU::detectFeatures()+0x24d>
c00192be:	50                   	push   eax
c00192bf:	50                   	push   eax
c00192c0:	68 fb b8 02 c0       	push   0xc002b8fb
c00192c5:	57                   	push   edi
c00192c6:	e8 f5 75 fe ff       	call   c00008c0 <strcmp>
c00192cb:	83 c4 10             	add    esp,0x10
c00192ce:	85 c0                	test   eax,eax
c00192d0:	75 1e                	jne    c00192f0 <CPU::detectFeatures()+0x25c>
c00192d2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192dc:	e9 8a 01 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c00192e1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192eb:	e9 7b 01 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c00192f0:	50                   	push   eax
c00192f1:	50                   	push   eax
c00192f2:	68 08 b9 02 c0       	push   0xc002b908
c00192f7:	57                   	push   edi
c00192f8:	e8 c3 75 fe ff       	call   c00008c0 <strcmp>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	85 c0                	test   eax,eax
c0019302:	75 0f                	jne    c0019313 <CPU::detectFeatures()+0x27f>
c0019304:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001930e:	e9 58 01 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c0019313:	50                   	push   eax
c0019314:	50                   	push   eax
c0019315:	68 c7 b8 02 c0       	push   0xc002b8c7
c001931a:	57                   	push   edi
c001931b:	e8 a0 75 fe ff       	call   c00008c0 <strcmp>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	85 c0                	test   eax,eax
c0019325:	75 0f                	jne    c0019336 <CPU::detectFeatures()+0x2a2>
c0019327:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019331:	e9 35 01 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c0019336:	50                   	push   eax
c0019337:	50                   	push   eax
c0019338:	68 15 b9 02 c0       	push   0xc002b915
c001933d:	57                   	push   edi
c001933e:	e8 7d 75 fe ff       	call   c00008c0 <strcmp>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	85 c0                	test   eax,eax
c0019348:	75 0f                	jne    c0019359 <CPU::detectFeatures()+0x2c5>
c001934a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019354:	e9 12 01 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c0019359:	51                   	push   ecx
c001935a:	51                   	push   ecx
c001935b:	68 22 b9 02 c0       	push   0xc002b922
c0019360:	57                   	push   edi
c0019361:	e8 5a 75 fe ff       	call   c00008c0 <strcmp>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	85 c0                	test   eax,eax
c001936b:	75 0f                	jne    c001937c <CPU::detectFeatures()+0x2e8>
c001936d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019377:	e9 ef 00 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c001937c:	52                   	push   edx
c001937d:	52                   	push   edx
c001937e:	68 2f b9 02 c0       	push   0xc002b92f
c0019383:	57                   	push   edi
c0019384:	e8 37 75 fe ff       	call   c00008c0 <strcmp>
c0019389:	83 c4 10             	add    esp,0x10
c001938c:	85 c0                	test   eax,eax
c001938e:	75 0f                	jne    c001939f <CPU::detectFeatures()+0x30b>
c0019390:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001939a:	e9 cc 00 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c001939f:	50                   	push   eax
c00193a0:	50                   	push   eax
c00193a1:	68 3c b9 02 c0       	push   0xc002b93c
c00193a6:	57                   	push   edi
c00193a7:	e8 14 75 fe ff       	call   c00008c0 <strcmp>
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	85 c0                	test   eax,eax
c00193b1:	75 0f                	jne    c00193c2 <CPU::detectFeatures()+0x32e>
c00193b3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193bd:	e9 a9 00 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c00193c2:	50                   	push   eax
c00193c3:	50                   	push   eax
c00193c4:	68 49 b9 02 c0       	push   0xc002b949
c00193c9:	57                   	push   edi
c00193ca:	e8 f1 74 fe ff       	call   c00008c0 <strcmp>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	85 c0                	test   eax,eax
c00193d4:	75 0f                	jne    c00193e5 <CPU::detectFeatures()+0x351>
c00193d6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193e0:	e9 86 00 00 00       	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c00193e5:	50                   	push   eax
c00193e6:	50                   	push   eax
c00193e7:	68 56 b9 02 c0       	push   0xc002b956
c00193ec:	57                   	push   edi
c00193ed:	e8 ce 74 fe ff       	call   c00008c0 <strcmp>
c00193f2:	83 c4 10             	add    esp,0x10
c00193f5:	85 c0                	test   eax,eax
c00193f7:	75 0c                	jne    c0019405 <CPU::detectFeatures()+0x371>
c00193f9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019403:	eb 66                	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c0019405:	50                   	push   eax
c0019406:	50                   	push   eax
c0019407:	68 63 b9 02 c0       	push   0xc002b963
c001940c:	57                   	push   edi
c001940d:	e8 ae 74 fe ff       	call   c00008c0 <strcmp>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	85 c0                	test   eax,eax
c0019417:	75 0c                	jne    c0019425 <CPU::detectFeatures()+0x391>
c0019419:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019423:	eb 46                	jmp    c001946b <CPU::detectFeatures()+0x3d7>
c0019425:	50                   	push   eax
c0019426:	50                   	push   eax
c0019427:	68 70 b9 02 c0       	push   0xc002b970
c001942c:	57                   	push   edi
c001942d:	e8 8e 74 fe ff       	call   c00008c0 <strcmp>
c0019432:	83 c4 10             	add    esp,0x10
c0019435:	85 c0                	test   eax,eax
c0019437:	74 e0                	je     c0019419 <CPU::detectFeatures()+0x385>
c0019439:	50                   	push   eax
c001943a:	50                   	push   eax
c001943b:	68 7d b9 02 c0       	push   0xc002b97d
c0019440:	57                   	push   edi
c0019441:	e8 7a 74 fe ff       	call   c00008c0 <strcmp>
c0019446:	83 c4 10             	add    esp,0x10
c0019449:	85 c0                	test   eax,eax
c001944b:	74 cc                	je     c0019419 <CPU::detectFeatures()+0x385>
c001944d:	51                   	push   ecx
c001944e:	51                   	push   ecx
c001944f:	68 8a b9 02 c0       	push   0xc002b98a
c0019454:	57                   	push   edi
c0019455:	e8 66 74 fe ff       	call   c00008c0 <strcmp>
c001945a:	83 c4 10             	add    esp,0x10
c001945d:	85 c0                	test   eax,eax
c001945f:	74 b8                	je     c0019419 <CPU::detectFeatures()+0x385>
c0019461:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001946b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019470:	0f 86 be 00 00 00    	jbe    c0019534 <CPU::detectFeatures()+0x4a0>
c0019476:	83 ec 0c             	sub    esp,0xc
c0019479:	68 80 00 00 00       	push   0x80
c001947e:	e8 ab f8 ff ff       	call   c0018d2e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019483:	83 e0 01             	and    eax,0x1
c0019486:	c1 e0 06             	shl    eax,0x6
c0019489:	88 c2                	mov    dl,al
c001948b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019491:	83 e0 bf             	and    eax,0xffffffbf
c0019494:	09 d0                	or     eax,edx
c0019496:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001949c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194a3:	e8 86 f8 ff ff       	call   c0018d2e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194a8:	83 e0 01             	and    eax,0x1
c00194ab:	c1 e0 04             	shl    eax,0x4
c00194ae:	88 c2                	mov    dl,al
c00194b0:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194b6:	83 e0 ef             	and    eax,0xffffffef
c00194b9:	09 d0                	or     eax,edx
c00194bb:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194c1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194c8:	e8 61 f8 ff ff       	call   c0018d2e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194cd:	c1 e0 07             	shl    eax,0x7
c00194d0:	88 c2                	mov    dl,al
c00194d2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194d8:	83 e0 7f             	and    eax,0x7f
c00194db:	09 d0                	or     eax,edx
c00194dd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194ea:	e8 6d f8 ff ff       	call   c0018d5c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194ef:	83 e0 01             	and    eax,0x1
c00194f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194f9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194ff:	83 e0 f7             	and    eax,0xfffffff7
c0019502:	09 d0                	or     eax,edx
c0019504:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001950a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019511:	e8 46 f8 ff ff       	call   c0018d5c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019516:	83 c4 10             	add    esp,0x10
c0019519:	83 e0 01             	and    eax,0x1
c001951c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019523:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019529:	83 e0 fb             	and    eax,0xfffffffb
c001952c:	09 d0                	or     eax,edx
c001952e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	56                   	push   esi
c0019538:	55                   	push   ebp
c0019539:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001953d:	57                   	push   edi
c001953e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019542:	50                   	push   eax
c0019543:	6a 01                	push   0x1
c0019545:	e8 04 f7 ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001954a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001954e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019554:	88 ca                	mov    dl,cl
c0019556:	83 e0 f0             	and    eax,0xfffffff0
c0019559:	83 e2 0f             	and    edx,0xf
c001955c:	09 d0                	or     eax,edx
c001955e:	88 ca                	mov    dl,cl
c0019560:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019566:	c0 ea 04             	shr    dl,0x4
c0019569:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001956d:	0f b6 c2             	movzx  eax,dl
c0019570:	83 c4 20             	add    esp,0x20
c0019573:	c1 e0 06             	shl    eax,0x6
c0019576:	89 c5                	mov    ebp,eax
c0019578:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001957e:	66 25 3f c0          	and    ax,0xc03f
c0019582:	09 e8                	or     eax,ebp
c0019584:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001958b:	89 c8                	mov    eax,ecx
c001958d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019593:	c1 e8 08             	shr    eax,0x8
c0019596:	83 e2 3f             	and    edx,0x3f
c0019599:	83 e0 0f             	and    eax,0xf
c001959c:	89 c5                	mov    ebp,eax
c001959e:	c1 e5 06             	shl    ebp,0x6
c00195a1:	09 d5                	or     ebp,edx
c00195a3:	89 ea                	mov    edx,ebp
c00195a5:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195ab:	88 c2                	mov    dl,al
c00195ad:	c0 ea 02             	shr    dl,0x2
c00195b0:	89 d5                	mov    ebp,edx
c00195b2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195b8:	83 e2 c0             	and    edx,0xffffffc0
c00195bb:	09 d5                	or     ebp,edx
c00195bd:	89 ea                	mov    edx,ebp
c00195bf:	89 cd                	mov    ebp,ecx
c00195c1:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195c7:	c1 ed 0c             	shr    ebp,0xc
c00195ca:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195d0:	83 e5 03             	and    ebp,0x3
c00195d3:	83 e2 cf             	and    edx,0xffffffcf
c00195d6:	c1 e5 04             	shl    ebp,0x4
c00195d9:	09 d5                	or     ebp,edx
c00195db:	3c 06                	cmp    al,0x6
c00195dd:	89 ea                	mov    edx,ebp
c00195df:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195e5:	74 04                	je     c00195eb <CPU::detectFeatures()+0x557>
c00195e7:	3c 0f                	cmp    al,0xf
c00195e9:	75 5c                	jne    c0019647 <CPU::detectFeatures()+0x5b3>
c00195eb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195ef:	89 cd                	mov    ebp,ecx
c00195f1:	c1 ed 10             	shr    ebp,0x10
c00195f4:	c1 e5 04             	shl    ebp,0x4
c00195f7:	09 ea                	or     edx,ebp
c00195f9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195ff:	0f b6 d2             	movzx  edx,dl
c0019602:	66 81 e5 3f c0       	and    bp,0xc03f
c0019607:	c1 e2 06             	shl    edx,0x6
c001960a:	09 ea                	or     edx,ebp
c001960c:	3c 0f                	cmp    al,0xf
c001960e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019615:	75 30                	jne    c0019647 <CPU::detectFeatures()+0x5b3>
c0019617:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001961d:	c1 e9 14             	shr    ecx,0x14
c0019620:	83 e0 3f             	and    eax,0x3f
c0019623:	83 c1 0f             	add    ecx,0xf
c0019626:	88 ca                	mov    dl,cl
c0019628:	c0 e9 02             	shr    cl,0x2
c001962b:	c1 e2 06             	shl    edx,0x6
c001962e:	09 d0                	or     eax,edx
c0019630:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019636:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001963c:	83 e0 c0             	and    eax,0xffffffc0
c001963f:	09 c1                	or     ecx,eax
c0019641:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019647:	83 ec 0c             	sub    esp,0xc
c001964a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019651:	56                   	push   esi
c0019652:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019656:	50                   	push   eax
c0019657:	57                   	push   edi
c0019658:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001965c:	55                   	push   ebp
c001965d:	68 00 00 00 80       	push   0x80000000
c0019662:	e8 e7 f5 ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019667:	83 c4 20             	add    esp,0x20
c001966a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019672:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019676:	76 1e                	jbe    c0019696 <CPU::detectFeatures()+0x602>
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	56                   	push   esi
c001967c:	50                   	push   eax
c001967d:	57                   	push   edi
c001967e:	55                   	push   ebp
c001967f:	68 01 00 00 80       	push   0x80000001
c0019684:	e8 c5 f5 ff ff       	call   c0018c4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019689:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019693:	83 c4 20             	add    esp,0x20
c0019696:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001969c:	83 f8 01             	cmp    eax,0x1
c001969f:	75 6f                	jne    c0019710 <CPU::detectFeatures()+0x67c>
c00196a1:	51                   	push   ecx
c00196a2:	51                   	push   ecx
c00196a3:	68 96 b9 02 c0       	push   0xc002b996
c00196a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196ac:	56                   	push   esi
c00196ad:	e8 82 71 fe ff       	call   c0000834 <strcpy>
c00196b2:	5f                   	pop    edi
c00196b3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196b9:	5d                   	pop    ebp
c00196ba:	66 c1 e8 06          	shr    ax,0x6
c00196be:	0f b6 c0             	movzx  eax,al
c00196c1:	50                   	push   eax
c00196c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196c8:	c1 e8 0e             	shr    eax,0xe
c00196cb:	0f b6 c0             	movzx  eax,al
c00196ce:	50                   	push   eax
c00196cf:	e8 24 f2 ff ff       	call   c00188f8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196d4:	5a                   	pop    edx
c00196d5:	59                   	pop    ecx
c00196d6:	50                   	push   eax
c00196d7:	56                   	push   esi
c00196d8:	e8 97 72 fe ff       	call   c0000974 <strcat>
c00196dd:	5f                   	pop    edi
c00196de:	5d                   	pop    ebp
c00196df:	56                   	push   esi
c00196e0:	53                   	push   ebx
c00196e1:	e8 34 ae ff ff       	call   c001451a <Device::setName(char const*)>
c00196e6:	58                   	pop    eax
c00196e7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196ed:	5a                   	pop    edx
c00196ee:	68 9d b9 02 c0       	push   0xc002b99d
c00196f3:	50                   	push   eax
c00196f4:	e8 c7 71 fe ff       	call   c00008c0 <strcmp>
c00196f9:	83 c4 10             	add    esp,0x10
c00196fc:	85 c0                	test   eax,eax
c00196fe:	0f 85 71 03 00 00    	jne    c0019a75 <CPU::detectFeatures()+0x9e1>
c0019704:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001970b:	e9 65 03 00 00       	jmp    c0019a75 <CPU::detectFeatures()+0x9e1>
c0019710:	83 f8 02             	cmp    eax,0x2
c0019713:	0f 85 b5 00 00 00    	jne    c00197ce <CPU::detectFeatures()+0x73a>
c0019719:	57                   	push   edi
c001971a:	57                   	push   edi
c001971b:	68 af b9 02 c0       	push   0xc002b9af
c0019720:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019724:	56                   	push   esi
c0019725:	e8 0a 71 fe ff       	call   c0000834 <strcpy>
c001972a:	5d                   	pop    ebp
c001972b:	58                   	pop    eax
c001972c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019732:	66 c1 e8 06          	shr    ax,0x6
c0019736:	0f b6 c0             	movzx  eax,al
c0019739:	50                   	push   eax
c001973a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019740:	c1 e8 0e             	shr    eax,0xe
c0019743:	0f b6 c0             	movzx  eax,al
c0019746:	50                   	push   eax
c0019747:	e8 18 f0 ff ff       	call   c0018764 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001974c:	5a                   	pop    edx
c001974d:	59                   	pop    ecx
c001974e:	50                   	push   eax
c001974f:	56                   	push   esi
c0019750:	e8 1f 72 fe ff       	call   c0000974 <strcat>
c0019755:	5f                   	pop    edi
c0019756:	5d                   	pop    ebp
c0019757:	56                   	push   esi
c0019758:	53                   	push   ebx
c0019759:	e8 bc ad ff ff       	call   c001451a <Device::setName(char const*)>
c001975e:	58                   	pop    eax
c001975f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019765:	5a                   	pop    edx
c0019766:	68 b4 b9 02 c0       	push   0xc002b9b4
c001976b:	50                   	push   eax
c001976c:	e8 4f 71 fe ff       	call   c00008c0 <strcmp>
c0019771:	83 c4 10             	add    esp,0x10
c0019774:	85 c0                	test   eax,eax
c0019776:	75 20                	jne    c0019798 <CPU::detectFeatures()+0x704>
c0019778:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c001977e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019784:	a8 01                	test   al,0x1
c0019786:	74 10                	je     c0019798 <CPU::detectFeatures()+0x704>
c0019788:	83 e0 fe             	and    eax,0xfffffffe
c001978b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019791:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019798:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001979e:	c1 e8 0e             	shr    eax,0xe
c00197a1:	3c 05                	cmp    al,0x5
c00197a3:	0f 85 cc 02 00 00    	jne    c0019a75 <CPU::detectFeatures()+0x9e1>
c00197a9:	56                   	push   esi
c00197aa:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197b0:	83 e0 0f             	and    eax,0xf
c00197b3:	50                   	push   eax
c00197b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ba:	66 c1 e8 06          	shr    ax,0x6
c00197be:	0f b6 c0             	movzx  eax,al
c00197c1:	50                   	push   eax
c00197c2:	6a 05                	push   0x5
c00197c4:	e8 11 f4 ff ff       	call   c0018bda <CPU::AMD_K6_writeback(int, int, int)>
c00197c9:	e9 1f 02 00 00       	jmp    c00199ed <CPU::detectFeatures()+0x959>
c00197ce:	8d 50 fd             	lea    edx,[eax-0x3]
c00197d1:	83 fa 01             	cmp    edx,0x1
c00197d4:	76 09                	jbe    c00197df <CPU::detectFeatures()+0x74b>
c00197d6:	83 f8 06             	cmp    eax,0x6
c00197d9:	0f 85 91 01 00 00    	jne    c0019970 <CPU::detectFeatures()+0x8dc>
c00197df:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197e5:	c1 ea 0e             	shr    edx,0xe
c00197e8:	80 fa 05             	cmp    dl,0x5
c00197eb:	75 7b                	jne    c0019868 <CPU::detectFeatures()+0x7d4>
c00197ed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197f3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197f8:	66 81 fa 00 01       	cmp    dx,0x100
c00197fd:	75 0c                	jne    c001980b <CPU::detectFeatures()+0x777>
c00197ff:	51                   	push   ecx
c0019800:	51                   	push   ecx
c0019801:	68 bb b9 02 c0       	push   0xc002b9bb
c0019806:	e9 dc 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c001980b:	66 81 fa 00 02       	cmp    dx,0x200
c0019810:	75 0c                	jne    c001981e <CPU::detectFeatures()+0x78a>
c0019812:	52                   	push   edx
c0019813:	52                   	push   edx
c0019814:	68 ce b9 02 c0       	push   0xc002b9ce
c0019819:	e9 c9 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c001981e:	66 81 fa 40 02       	cmp    dx,0x240
c0019823:	75 0c                	jne    c0019831 <CPU::detectFeatures()+0x79d>
c0019825:	50                   	push   eax
c0019826:	50                   	push   eax
c0019827:	68 e0 b9 02 c0       	push   0xc002b9e0
c001982c:	e9 b6 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c0019831:	83 f8 06             	cmp    eax,0x6
c0019834:	75 0c                	jne    c0019842 <CPU::detectFeatures()+0x7ae>
c0019836:	50                   	push   eax
c0019837:	50                   	push   eax
c0019838:	68 f2 b9 02 c0       	push   0xc002b9f2
c001983d:	e9 a5 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c0019842:	83 f8 04             	cmp    eax,0x4
c0019845:	75 0c                	jne    c0019853 <CPU::detectFeatures()+0x7bf>
c0019847:	50                   	push   eax
c0019848:	50                   	push   eax
c0019849:	68 fe b9 02 c0       	push   0xc002b9fe
c001984e:	e9 94 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c0019853:	83 f8 03             	cmp    eax,0x3
c0019856:	0f 85 19 02 00 00    	jne    c0019a75 <CPU::detectFeatures()+0x9e1>
c001985c:	50                   	push   eax
c001985d:	50                   	push   eax
c001985e:	68 06 ba 02 c0       	push   0xc002ba06
c0019863:	e9 7f 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c0019868:	80 fa 06             	cmp    dl,0x6
c001986b:	0f 85 db 00 00 00    	jne    c001994c <CPU::detectFeatures()+0x8b8>
c0019871:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019877:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001987c:	66 81 fa 80 01       	cmp    dx,0x180
c0019881:	75 0c                	jne    c001988f <CPU::detectFeatures()+0x7fb>
c0019883:	50                   	push   eax
c0019884:	50                   	push   eax
c0019885:	68 11 ba 02 c0       	push   0xc002ba11
c001988a:	e9 58 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c001988f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019895:	66 f7 c1 80 ff       	test   cx,0xff80
c001989a:	75 0c                	jne    c00198a8 <CPU::detectFeatures()+0x814>
c001989c:	50                   	push   eax
c001989d:	50                   	push   eax
c001989e:	68 21 ba 02 c0       	push   0xc002ba21
c00198a3:	e9 3f 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00198a8:	66 81 fa 40 02       	cmp    dx,0x240
c00198ad:	75 0c                	jne    c00198bb <CPU::detectFeatures()+0x827>
c00198af:	55                   	push   ebp
c00198b0:	55                   	push   ebp
c00198b1:	68 28 ba 02 c0       	push   0xc002ba28
c00198b6:	e9 2c 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00198bb:	66 81 fa 80 02       	cmp    dx,0x280
c00198c0:	75 0c                	jne    c00198ce <CPU::detectFeatures()+0x83a>
c00198c2:	57                   	push   edi
c00198c3:	57                   	push   edi
c00198c4:	68 31 ba 02 c0       	push   0xc002ba31
c00198c9:	e9 19 01 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00198ce:	66 81 fa 40 03       	cmp    dx,0x340
c00198d3:	74 ed                	je     c00198c2 <CPU::detectFeatures()+0x82e>
c00198d5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198da:	75 0c                	jne    c00198e8 <CPU::detectFeatures()+0x854>
c00198dc:	56                   	push   esi
c00198dd:	56                   	push   esi
c00198de:	68 38 ba 02 c0       	push   0xc002ba38
c00198e3:	e9 ff 00 00 00       	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00198e8:	83 f8 06             	cmp    eax,0x6
c00198eb:	0f 84 45 ff ff ff    	je     c0019836 <CPU::detectFeatures()+0x7a2>
c00198f1:	83 f8 04             	cmp    eax,0x4
c00198f4:	0f 84 4d ff ff ff    	je     c0019847 <CPU::detectFeatures()+0x7b3>
c00198fa:	83 f8 03             	cmp    eax,0x3
c00198fd:	0f 85 72 01 00 00    	jne    c0019a75 <CPU::detectFeatures()+0x9e1>
c0019903:	51                   	push   ecx
c0019904:	51                   	push   ecx
c0019905:	68 41 ba 02 c0       	push   0xc002ba41
c001990a:	53                   	push   ebx
c001990b:	e8 0a ac ff ff       	call   c001451a <Device::setName(char const*)>
c0019910:	b1 c1                	mov    cl,0xc1
c0019912:	88 c8                	mov    al,cl
c0019914:	e6 22                	out    0x22,al
c0019916:	e4 23                	in     al,0x23
c0019918:	88 c2                	mov    dl,al
c001991a:	88 c8                	mov    al,cl
c001991c:	e6 22                	out    0x22,al
c001991e:	88 d0                	mov    al,dl
c0019920:	83 c8 10             	or     eax,0x10
c0019923:	e6 23                	out    0x23,al
c0019925:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001992c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001992f:	89 d0                	mov    eax,edx
c0019931:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019937:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001993b:	40                   	inc    eax
c001993c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019942:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019947:	e9 a1 00 00 00       	jmp    c00199ed <CPU::detectFeatures()+0x959>
c001994c:	83 f8 06             	cmp    eax,0x6
c001994f:	0f 84 e1 fe ff ff    	je     c0019836 <CPU::detectFeatures()+0x7a2>
c0019955:	83 f8 04             	cmp    eax,0x4
c0019958:	0f 84 e9 fe ff ff    	je     c0019847 <CPU::detectFeatures()+0x7b3>
c001995e:	83 f8 03             	cmp    eax,0x3
c0019961:	0f 85 0e 01 00 00    	jne    c0019a75 <CPU::detectFeatures()+0x9e1>
c0019967:	52                   	push   edx
c0019968:	52                   	push   edx
c0019969:	68 4c ba 02 c0       	push   0xc002ba4c
c001996e:	eb 77                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c0019970:	83 f8 07             	cmp    eax,0x7
c0019973:	75 09                	jne    c001997e <CPU::detectFeatures()+0x8ea>
c0019975:	50                   	push   eax
c0019976:	50                   	push   eax
c0019977:	68 56 ba 02 c0       	push   0xc002ba56
c001997c:	eb 69                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c001997e:	83 f8 0a             	cmp    eax,0xa
c0019981:	75 09                	jne    c001998c <CPU::detectFeatures()+0x8f8>
c0019983:	50                   	push   eax
c0019984:	50                   	push   eax
c0019985:	68 61 ba 02 c0       	push   0xc002ba61
c001998a:	eb 5b                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c001998c:	83 f8 0b             	cmp    eax,0xb
c001998f:	75 09                	jne    c001999a <CPU::detectFeatures()+0x906>
c0019991:	50                   	push   eax
c0019992:	50                   	push   eax
c0019993:	68 69 ba 02 c0       	push   0xc002ba69
c0019998:	eb 4d                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c001999a:	83 f8 08             	cmp    eax,0x8
c001999d:	75 09                	jne    c00199a8 <CPU::detectFeatures()+0x914>
c001999f:	50                   	push   eax
c00199a0:	50                   	push   eax
c00199a1:	68 72 ba 02 c0       	push   0xc002ba72
c00199a6:	eb 3f                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00199a8:	83 f8 09             	cmp    eax,0x9
c00199ab:	75 09                	jne    c00199b6 <CPU::detectFeatures()+0x922>
c00199ad:	50                   	push   eax
c00199ae:	50                   	push   eax
c00199af:	68 7a ba 02 c0       	push   0xc002ba7a
c00199b4:	eb 31                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00199b6:	83 f8 05             	cmp    eax,0x5
c00199b9:	75 09                	jne    c00199c4 <CPU::detectFeatures()+0x930>
c00199bb:	50                   	push   eax
c00199bc:	50                   	push   eax
c00199bd:	68 82 ba 02 c0       	push   0xc002ba82
c00199c2:	eb 23                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00199c4:	83 f8 0c             	cmp    eax,0xc
c00199c7:	75 09                	jne    c00199d2 <CPU::detectFeatures()+0x93e>
c00199c9:	55                   	push   ebp
c00199ca:	55                   	push   ebp
c00199cb:	68 90 ba 02 c0       	push   0xc002ba90
c00199d0:	eb 15                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00199d2:	83 f8 0d             	cmp    eax,0xd
c00199d5:	75 09                	jne    c00199e0 <CPU::detectFeatures()+0x94c>
c00199d7:	57                   	push   edi
c00199d8:	57                   	push   edi
c00199d9:	68 9b ba 02 c0       	push   0xc002ba9b
c00199de:	eb 07                	jmp    c00199e7 <CPU::detectFeatures()+0x953>
c00199e0:	56                   	push   esi
c00199e1:	56                   	push   esi
c00199e2:	68 af ba 02 c0       	push   0xc002baaf
c00199e7:	53                   	push   ebx
c00199e8:	e8 2d ab ff ff       	call   c001451a <Device::setName(char const*)>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	e9 80 00 00 00       	jmp    c0019a75 <CPU::detectFeatures()+0x9e1>
c00199f5:	51                   	push   ecx
c00199f6:	51                   	push   ecx
c00199f7:	68 fb b8 02 c0       	push   0xc002b8fb
c00199fc:	57                   	push   edi
c00199fd:	e8 32 6e fe ff       	call   c0000834 <strcpy>
c0019a02:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a0c:	e8 9d 68 fe ff       	call   c00002ae <is486>
c0019a11:	83 c4 10             	add    esp,0x10
c0019a14:	85 c0                	test   eax,eax
c0019a16:	74 2b                	je     c0019a43 <CPU::detectFeatures()+0x9af>
c0019a18:	52                   	push   edx
c0019a19:	52                   	push   edx
c0019a1a:	68 bb ba 02 c0       	push   0xc002babb
c0019a1f:	53                   	push   ebx
c0019a20:	e8 f5 aa ff ff       	call   c001451a <Device::setName(char const*)>
c0019a25:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a2c:	0f 20 c0             	mov    eax,cr0
c0019a2f:	83 e0 14             	and    eax,0x14
c0019a32:	83 c4 10             	add    esp,0x10
c0019a35:	83 f8 04             	cmp    eax,0x4
c0019a38:	75 1f                	jne    c0019a59 <CPU::detectFeatures()+0x9c5>
c0019a3a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a41:	eb 32                	jmp    c0019a75 <CPU::detectFeatures()+0x9e1>
c0019a43:	50                   	push   eax
c0019a44:	50                   	push   eax
c0019a45:	68 c6 ba 02 c0       	push   0xc002bac6
c0019a4a:	53                   	push   ebx
c0019a4b:	e8 ca aa ff ff       	call   c001451a <Device::setName(char const*)>
c0019a50:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a57:	eb d3                	jmp    c0019a2c <CPU::detectFeatures()+0x998>
c0019a59:	e8 2b 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a5e:	83 e0 01             	and    eax,0x1
c0019a61:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a64:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a6a:	83 e0 fd             	and    eax,0xfffffffd
c0019a6d:	09 d0                	or     eax,edx
c0019a6f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a75:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a7c:	83 c4 4c             	add    esp,0x4c
c0019a7f:	5b                   	pop    ebx
c0019a80:	5e                   	pop    esi
c0019a81:	5f                   	pop    edi
c0019a82:	5d                   	pop    ebp
c0019a83:	c3                   	ret    

c0019a84 <CPU::setupSMEP()>:
c0019a84:	0f 20 e0             	mov    eax,cr4
c0019a87:	0d 00 00 10 00       	or     eax,0x100000
c0019a8c:	0f 22 e0             	mov    cr4,eax
c0019a8f:	c3                   	ret    

c0019a90 <CPU::setupUMIP()>:
c0019a90:	0f 20 e0             	mov    eax,cr4
c0019a93:	80 cc 08             	or     ah,0x8
c0019a96:	0f 22 e0             	mov    cr4,eax
c0019a99:	c3                   	ret    

c0019a9a <CPU::setupTSC()>:
c0019a9a:	0f 20 e0             	mov    eax,cr4
c0019a9d:	83 c8 04             	or     eax,0x4
c0019aa0:	0f 22 e0             	mov    cr4,eax
c0019aa3:	c3                   	ret    

c0019aa4 <CPU::setupLargePages()>:
c0019aa4:	0f 20 e0             	mov    eax,cr4
c0019aa7:	83 c8 10             	or     eax,0x10
c0019aaa:	0f 22 e0             	mov    cr4,eax
c0019aad:	c3                   	ret    

c0019aae <CPU::setupPAT()>:
c0019aae:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0019ab3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019aba:	74 2c                	je     c0019ae8 <CPU::setupPAT()+0x3a>
c0019abc:	53                   	push   ebx
c0019abd:	83 ec 10             	sub    esp,0x10
c0019ac0:	68 77 02 00 00       	push   0x277
c0019ac5:	50                   	push   eax
c0019ac6:	e8 1d 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019acb:	83 e2 f8             	and    edx,0xfffffff8
c0019ace:	83 ca 01             	or     edx,0x1
c0019ad1:	52                   	push   edx
c0019ad2:	50                   	push   eax
c0019ad3:	68 77 02 00 00       	push   0x277
c0019ad8:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0019ade:	e8 31 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019ae3:	83 c4 28             	add    esp,0x28
c0019ae6:	5b                   	pop    ebx
c0019ae7:	c3                   	ret    
c0019ae8:	c3                   	ret    
c0019ae9:	90                   	nop

c0019aea <CPU::setupMTRR()>:
c0019aea:	c3                   	ret    
c0019aeb:	90                   	nop

c0019aec <CPU::setupGlobalPages()>:
c0019aec:	0f 20 e0             	mov    eax,cr4
c0019aef:	0c 80                	or     al,0x80
c0019af1:	0f 22 e0             	mov    cr4,eax
c0019af4:	c3                   	ret    
c0019af5:	90                   	nop

c0019af6 <CPU::allowUsermodeDataAccess()>:
c0019af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afa:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b01:	74 03                	je     c0019b06 <CPU::allowUsermodeDataAccess()+0x10>
c0019b03:	0f 01 cb             	stac   
c0019b06:	c3                   	ret    
c0019b07:	90                   	nop

c0019b08 <CPU::prohibitUsermodeDataAccess()>:
c0019b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b0c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b13:	74 03                	je     c0019b18 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b15:	0f 01 ca             	clac   
c0019b18:	c3                   	ret    
c0019b19:	90                   	nop

c0019b1a <CPU::setupSMAP()>:
c0019b1a:	0f 20 e0             	mov    eax,cr4
c0019b1d:	0d 00 00 20 00       	or     eax,0x200000
c0019b22:	0f 22 e0             	mov    cr4,eax
c0019b25:	eb e1                	jmp    c0019b08 <CPU::prohibitUsermodeDataAccess()>
c0019b27:	90                   	nop

c0019b28 <CPU::setupFeatures()>:
c0019b28:	83 ec 0c             	sub    esp,0xc
c0019b2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b2f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b36:	74 07                	je     c0019b3f <CPU::setupFeatures()+0x17>
c0019b38:	52                   	push   edx
c0019b39:	e8 46 ff ff ff       	call   c0019a84 <CPU::setupSMEP()>
c0019b3e:	58                   	pop    eax
c0019b3f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b46:	74 07                	je     c0019b4f <CPU::setupFeatures()+0x27>
c0019b48:	52                   	push   edx
c0019b49:	e8 cc ff ff ff       	call   c0019b1a <CPU::setupSMAP()>
c0019b4e:	58                   	pop    eax
c0019b4f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b56:	74 07                	je     c0019b5f <CPU::setupFeatures()+0x37>
c0019b58:	52                   	push   edx
c0019b59:	e8 32 ff ff ff       	call   c0019a90 <CPU::setupUMIP()>
c0019b5e:	58                   	pop    eax
c0019b5f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b66:	74 07                	je     c0019b6f <CPU::setupFeatures()+0x47>
c0019b68:	52                   	push   edx
c0019b69:	e8 2c ff ff ff       	call   c0019a9a <CPU::setupTSC()>
c0019b6e:	58                   	pop    eax
c0019b6f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b76:	74 07                	je     c0019b7f <CPU::setupFeatures()+0x57>
c0019b78:	52                   	push   edx
c0019b79:	e8 26 ff ff ff       	call   c0019aa4 <CPU::setupLargePages()>
c0019b7e:	59                   	pop    ecx
c0019b7f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b86:	74 07                	je     c0019b8f <CPU::setupFeatures()+0x67>
c0019b88:	52                   	push   edx
c0019b89:	e8 5e ff ff ff       	call   c0019aec <CPU::setupGlobalPages()>
c0019b8e:	58                   	pop    eax
c0019b8f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b96:	74 0c                	je     c0019ba4 <CPU::setupFeatures()+0x7c>
c0019b98:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b9c:	83 c4 0c             	add    esp,0xc
c0019b9f:	e9 0a ff ff ff       	jmp    c0019aae <CPU::setupPAT()>
c0019ba4:	83 c4 0c             	add    esp,0xc
c0019ba7:	c3                   	ret    

c0019ba8 <CPU::open(int, int, void*)>:
c0019ba8:	57                   	push   edi
c0019ba9:	56                   	push   esi
c0019baa:	53                   	push   ebx
c0019bab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019baf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bb3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bb9:	83 ec 0c             	sub    esp,0xc
c0019bbc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019bc2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019bc8:	50                   	push   eax
c0019bc9:	e8 06 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019bce:	83 c4 0c             	add    esp,0xc
c0019bd1:	6a 00                	push   0x0
c0019bd3:	68 ef be ad de       	push   0xdeadbeef
c0019bd8:	57                   	push   edi
c0019bd9:	e8 68 79 ff ff       	call   c0011546 <TSS::setup(unsigned long, unsigned long)>
c0019bde:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019be1:	e8 40 79 ff ff       	call   c0011526 <TSS::flush()>
c0019be6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019bec:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bef:	e8 3c 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bf4:	b8 00 04 00 00       	mov    eax,0x400
c0019bf9:	0f 23 f8             	mov    db7,eax
c0019bfc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c06:	e8 d7 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c0b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c11:	89 30                	mov    DWORD PTR [eax],esi
c0019c13:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c19:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c1c:	58                   	pop    eax
c0019c1d:	5a                   	pop    edx
c0019c1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c28:	e8 25 8a ff ff       	call   c0012652 <VAS::setCPUSpecific(unsigned long)>
c0019c2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c30:	e8 5f f4 ff ff       	call   c0019094 <CPU::detectFeatures()>
c0019c35:	e8 cf bc ff ff       	call   c0015909 <setupInterruptController()>
c0019c3a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c40:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0019c45:	83 e0 10             	and    eax,0x10
c0019c48:	83 f8 01             	cmp    eax,0x1
c0019c4b:	19 c0                	sbb    eax,eax
c0019c4d:	83 e0 46             	and    eax,0x46
c0019c50:	83 c0 1e             	add    eax,0x1e
c0019c53:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c56:	e8 bb d1 ff ff       	call   c0016e16 <setupTimer(int)>
c0019c5b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c64:	e8 bf fe ff ff       	call   c0019b28 <CPU::setupFeatures()>
c0019c69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c6c:	e8 a7 f1 ff ff       	call   c0018e18 <CPU::displayFeatures()>
c0019c71:	83 c4 10             	add    esp,0x10
c0019c74:	31 c0                	xor    eax,eax
c0019c76:	5b                   	pop    ebx
c0019c77:	5e                   	pop    esi
c0019c78:	5f                   	pop    edi
c0019c79:	c3                   	ret    

c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c7a:	57                   	push   edi
c0019c7b:	56                   	push   esi
c0019c7c:	53                   	push   ebx
c0019c7d:	51                   	push   ecx
c0019c7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c82:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c85:	0f 02 c0             	lar    eax,ax
c0019c88:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c8b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c8f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c92:	88 ca                	mov    dl,cl
c0019c94:	c0 ea 06             	shr    dl,0x6
c0019c97:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c9b:	89 ca                	mov    edx,ecx
c0019c9d:	66 c1 ea 03          	shr    dx,0x3
c0019ca1:	83 e2 07             	and    edx,0x7
c0019ca4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ca9:	88 17                	mov    BYTE PTR [edi],dl
c0019cab:	0f 84 a6 01 00 00    	je     c0019e57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cb1:	83 e1 07             	and    ecx,0x7
c0019cb4:	80 f9 04             	cmp    cl,0x4
c0019cb7:	0f 84 98 00 00 00    	je     c0019d55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cbd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cc2:	0f 95 c0             	setne  al
c0019cc5:	80 f9 05             	cmp    cl,0x5
c0019cc8:	0f 95 c2             	setne  dl
c0019ccb:	08 c2                	or     dl,al
c0019ccd:	74 79                	je     c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ccf:	84 c9                	test   cl,cl
c0019cd1:	75 05                	jne    c0019cd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019cd3:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cd6:	eb 3c                	jmp    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cd8:	80 f9 01             	cmp    cl,0x1
c0019cdb:	75 05                	jne    c0019ce2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019cdd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ce0:	eb 32                	jmp    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ce2:	80 f9 02             	cmp    cl,0x2
c0019ce5:	75 05                	jne    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ce7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cea:	eb 28                	jmp    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cec:	31 c0                	xor    eax,eax
c0019cee:	80 f9 03             	cmp    cl,0x3
c0019cf1:	75 05                	jne    c0019cf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cf3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cf6:	eb 1c                	jmp    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cf8:	80 f9 05             	cmp    cl,0x5
c0019cfb:	75 05                	jne    c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cfd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d00:	eb 12                	jmp    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d02:	80 f9 06             	cmp    cl,0x6
c0019d05:	75 05                	jne    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d07:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d0a:	eb 08                	jmp    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d0c:	80 f9 07             	cmp    cl,0x7
c0019d0f:	75 03                	jne    c0019d14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d11:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d14:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d19:	75 10                	jne    c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d1b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d1f:	b9 03 00 00 00       	mov    ecx,0x3
c0019d24:	01 d0                	add    eax,edx
c0019d26:	e9 37 01 00 00       	jmp    c0019e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d2b:	b9 02 00 00 00       	mov    ecx,0x2
c0019d30:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d35:	0f 85 27 01 00 00    	jne    c0019e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d3b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d3e:	b9 06 00 00 00       	mov    ecx,0x6
c0019d43:	e9 1a 01 00 00       	jmp    c0019e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d48:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d4b:	b9 06 00 00 00       	mov    ecx,0x6
c0019d50:	e9 0f 01 00 00       	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d55:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d58:	88 ca                	mov    dl,cl
c0019d5a:	c0 ea 06             	shr    dl,0x6
c0019d5d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d61:	89 ca                	mov    edx,ecx
c0019d63:	66 c1 ea 03          	shr    dx,0x3
c0019d67:	83 e2 07             	and    edx,0x7
c0019d6a:	80 e1 07             	and    cl,0x7
c0019d6d:	75 05                	jne    c0019d74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d6f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d72:	eb 4c                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d74:	80 f9 01             	cmp    cl,0x1
c0019d77:	75 05                	jne    c0019d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d79:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d7c:	eb 42                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d7e:	80 f9 02             	cmp    cl,0x2
c0019d81:	75 05                	jne    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d83:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d86:	eb 38                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d88:	80 f9 03             	cmp    cl,0x3
c0019d8b:	75 05                	jne    c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d8d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d90:	eb 2e                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d92:	80 f9 04             	cmp    cl,0x4
c0019d95:	75 12                	jne    c0019da9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d97:	f6 c4 60             	test   ah,0x60
c0019d9a:	75 08                	jne    c0019da4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d9c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d9f:	8d 78 14             	lea    edi,[eax+0x14]
c0019da2:	eb 1c                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019da7:	eb 17                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da9:	80 f9 05             	cmp    cl,0x5
c0019dac:	75 05                	jne    c0019db3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019dae:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019db1:	eb 0d                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db3:	80 f9 06             	cmp    cl,0x6
c0019db6:	75 05                	jne    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019db8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019dbb:	eb 03                	jmp    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019dc0:	84 d2                	test   dl,dl
c0019dc2:	75 05                	jne    c0019dc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019dc4:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dc7:	eb 3c                	jmp    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dc9:	80 fa 01             	cmp    dl,0x1
c0019dcc:	75 05                	jne    c0019dd3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019dce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dd1:	eb 32                	jmp    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dd3:	80 fa 02             	cmp    dl,0x2
c0019dd6:	75 05                	jne    c0019ddd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019dd8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ddb:	eb 28                	jmp    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ddd:	80 fa 03             	cmp    dl,0x3
c0019de0:	75 05                	jne    c0019de7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019de2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019de5:	eb 1e                	jmp    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019de7:	31 c0                	xor    eax,eax
c0019de9:	80 fa 04             	cmp    dl,0x4
c0019dec:	74 17                	je     c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dee:	80 fa 05             	cmp    dl,0x5
c0019df1:	75 05                	jne    c0019df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019df3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019df6:	eb 0d                	jmp    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df8:	80 fa 06             	cmp    dl,0x6
c0019dfb:	75 05                	jne    c0019e02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019dfd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e00:	eb 03                	jmp    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e02:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e05:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e0a:	0f 94 c2             	sete   dl
c0019e0d:	80 f9 05             	cmp    cl,0x5
c0019e10:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e14:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e19:	d3 e0                	shl    eax,cl
c0019e1b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e1f:	74 0a                	je     c0019e2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e21:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e24:	b9 07 00 00 00       	mov    ecx,0x7
c0019e29:	eb 37                	jmp    c0019e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e2b:	01 f8                	add    eax,edi
c0019e2d:	b9 03 00 00 00       	mov    ecx,0x3
c0019e32:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e37:	74 2b                	je     c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e39:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e3e:	75 0d                	jne    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e40:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e44:	01 c8                	add    eax,ecx
c0019e46:	b9 04 00 00 00       	mov    ecx,0x4
c0019e4b:	eb 17                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e4d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e50:	b9 07 00 00 00       	mov    ecx,0x7
c0019e55:	eb 0d                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e57:	b9 02 00 00 00       	mov    ecx,0x2
c0019e5c:	b2 01                	mov    dl,0x1
c0019e5e:	31 c0                	xor    eax,eax
c0019e60:	eb 02                	jmp    c0019e64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e62:	31 d2                	xor    edx,edx
c0019e64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e68:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e6a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e6e:	88 11                	mov    BYTE PTR [ecx],dl
c0019e70:	5a                   	pop    edx
c0019e71:	5b                   	pop    ebx
c0019e72:	5e                   	pop    esi
c0019e73:	5f                   	pop    edi
c0019e74:	c3                   	ret    

c0019e75 <Krnl::smpEntry()>:
c0019e75:	eb fe                	jmp    c0019e75 <Krnl::smpEntry()>

c0019e77 <Krnl::startCPU(int)>:
c0019e77:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0019e7c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e83:	0f 84 36 01 00 00    	je     c0019fbf <Krnl::startCPU(int)+0x148>
c0019e89:	53                   	push   ebx
c0019e8a:	83 ec 08             	sub    esp,0x8
c0019e8d:	e8 46 3f 00 00       	call   c001ddd8 <lockScheduler()>
c0019e92:	52                   	push   edx
c0019e93:	52                   	push   edx
c0019e94:	6a 1b                	push   0x1b
c0019e96:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0019e9c:	e8 47 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ea1:	59                   	pop    ecx
c0019ea2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ea7:	89 c3                	mov    ebx,eax
c0019ea9:	58                   	pop    eax
c0019eaa:	53                   	push   ebx
c0019eab:	68 00 bb 02 c0       	push   0xc002bb00
c0019eb0:	e8 5d 90 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0019eb5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ec3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ecd:	c1 e0 18             	shl    eax,0x18
c0019ed0:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ed6:	83 c4 10             	add    esp,0x10
c0019ed9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019edf:	09 c2                	or     edx,eax
c0019ee1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ee7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019eed:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ef3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ef9:	80 cd c5             	or     ch,0xc5
c0019efc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f02:	f3 90                	pause  
c0019f04:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f06:	0f ba e1 0c          	bt     ecx,0xc
c0019f0a:	72 f6                	jb     c0019f02 <Krnl::startCPU(int)+0x8b>
c0019f0c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f12:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f18:	09 c1                	or     ecx,eax
c0019f1a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f20:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f26:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f2c:	80 cd 85             	or     ch,0x85
c0019f2f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f35:	f3 90                	pause  
c0019f37:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f39:	0f ba e1 0c          	bt     ecx,0xc
c0019f3d:	72 f6                	jb     c0019f35 <Krnl::startCPU(int)+0xbe>
c0019f3f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f49:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f4f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f55:	09 c1                	or     ecx,eax
c0019f57:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f5d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f63:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f69:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f6f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f75:	f3 90                	pause  
c0019f77:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f79:	0f ba e1 0c          	bt     ecx,0xc
c0019f7d:	72 f6                	jb     c0019f75 <Krnl::startCPU(int)+0xfe>
c0019f7f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f89:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f8f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f95:	09 c8                	or     eax,ecx
c0019f97:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f9d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fa3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fa8:	0d 02 06 00 00       	or     eax,0x602
c0019fad:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fb3:	f3 90                	pause  
c0019fb5:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fb7:	0f ba e0 0c          	bt     eax,0xc
c0019fbb:	72 f6                	jb     c0019fb3 <Krnl::startCPU(int)+0x13c>
c0019fbd:	eb fe                	jmp    c0019fbd <Krnl::startCPU(int)+0x146>
c0019fbf:	c3                   	ret    

c0019fc0 <Krnl::startCPUs()>:
c0019fc0:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0019fc5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fcb:	88 c2                	mov    dl,al
c0019fcd:	83 e2 0a             	and    edx,0xa
c0019fd0:	80 fa 0a             	cmp    dl,0xa
c0019fd3:	75 09                	jne    c0019fde <Krnl::startCPUs()+0x1e>
c0019fd5:	a8 01                	test   al,0x1
c0019fd7:	74 05                	je     c0019fde <Krnl::startCPUs()+0x1e>
c0019fd9:	e9 bd 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fde:	c3                   	ret    
c0019fdf:	90                   	nop

c0019fe0 <EnvVarContainer::getEnv(char const*)>:
c0019fe0:	57                   	push   edi
c0019fe1:	56                   	push   esi
c0019fe2:	53                   	push   ebx
c0019fe3:	31 db                	xor    ebx,ebx
c0019fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fe9:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019feb:	7e 2b                	jle    c001a018 <EnvVarContainer::getEnv(char const*)+0x38>
c0019fed:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019ff4:	50                   	push   eax
c0019ff5:	50                   	push   eax
c0019ff6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ff9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ffc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a000:	e8 bb 68 fe ff       	call   c00008c0 <strcmp>
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	85 c0                	test   eax,eax
c001a00a:	75 09                	jne    c001a015 <EnvVarContainer::getEnv(char const*)+0x35>
c001a00c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a00f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a013:	eb 05                	jmp    c001a01a <EnvVarContainer::getEnv(char const*)+0x3a>
c001a015:	43                   	inc    ebx
c001a016:	eb d1                	jmp    c0019fe9 <EnvVarContainer::getEnv(char const*)+0x9>
c001a018:	31 c0                	xor    eax,eax
c001a01a:	5b                   	pop    ebx
c001a01b:	5e                   	pop    esi
c001a01c:	5f                   	pop    edi
c001a01d:	c3                   	ret    

c001a01e <EnvVarContainer::setEnv(char const*, char const*)>:
c001a01e:	57                   	push   edi
c001a01f:	56                   	push   esi
c001a020:	53                   	push   ebx
c001a021:	83 ec 1c             	sub    esp,0x1c
c001a024:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a028:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a02c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a030:	57                   	push   edi
c001a031:	e8 5e 67 fe ff       	call   c0000794 <strlen>
c001a036:	40                   	inc    eax
c001a037:	89 04 24             	mov    DWORD PTR [esp],eax
c001a03a:	e8 01 58 ff ff       	call   c000f840 <malloc>
c001a03f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a046:	e8 49 67 fe ff       	call   c0000794 <strlen>
c001a04b:	40                   	inc    eax
c001a04c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a04f:	e8 ec 57 ff ff       	call   c000f840 <malloc>
c001a054:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a057:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a05b:	e8 34 67 fe ff       	call   c0000794 <strlen>
c001a060:	83 c4 0c             	add    esp,0xc
c001a063:	40                   	inc    eax
c001a064:	50                   	push   eax
c001a065:	6a 00                	push   0x0
c001a067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a06b:	e8 08 67 fe ff       	call   c0000778 <memset>
c001a070:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a073:	e8 1c 67 fe ff       	call   c0000794 <strlen>
c001a078:	83 c4 0c             	add    esp,0xc
c001a07b:	40                   	inc    eax
c001a07c:	50                   	push   eax
c001a07d:	57                   	push   edi
c001a07e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a082:	e8 bd 66 fe ff       	call   c0000744 <memcpy>
c001a087:	89 34 24             	mov    DWORD PTR [esp],esi
c001a08a:	e8 05 67 fe ff       	call   c0000794 <strlen>
c001a08f:	83 c4 0c             	add    esp,0xc
c001a092:	40                   	inc    eax
c001a093:	50                   	push   eax
c001a094:	6a 00                	push   0x0
c001a096:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a09a:	e8 d9 66 fe ff       	call   c0000778 <memset>
c001a09f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0a2:	e8 ed 66 fe ff       	call   c0000794 <strlen>
c001a0a7:	83 c4 0c             	add    esp,0xc
c001a0aa:	40                   	inc    eax
c001a0ab:	50                   	push   eax
c001a0ac:	56                   	push   esi
c001a0ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0b1:	e8 8e 66 fe ff       	call   c0000744 <memcpy>
c001a0b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b8:	40                   	inc    eax
c001a0b9:	89 03                	mov    DWORD PTR [ebx],eax
c001a0bb:	c1 e0 03             	shl    eax,0x3
c001a0be:	5a                   	pop    edx
c001a0bf:	59                   	pop    ecx
c001a0c0:	50                   	push   eax
c001a0c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0c4:	e8 63 57 ff ff       	call   c000f82c <realloc>
c001a0c9:	83 c4 0c             	add    esp,0xc
c001a0cc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0cf:	6a 08                	push   0x8
c001a0d1:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0d5:	52                   	push   edx
c001a0d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0d8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0dc:	50                   	push   eax
c001a0dd:	e8 62 66 fe ff       	call   c0000744 <memcpy>
c001a0e2:	83 c4 20             	add    esp,0x20
c001a0e5:	5b                   	pop    ebx
c001a0e6:	5e                   	pop    esi
c001a0e7:	5f                   	pop    edi
c001a0e8:	c3                   	ret    
c001a0e9:	90                   	nop

c001a0ea <EnvVarContainer::deleteEnv(char const*)>:
c001a0ea:	c3                   	ret    
c001a0eb:	90                   	nop

c001a0ec <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0ec:	55                   	push   ebp
c001a0ed:	57                   	push   edi
c001a0ee:	56                   	push   esi
c001a0ef:	53                   	push   ebx
c001a0f0:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0f6:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0fd:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a104:	68 14 01 00 00       	push   0x114
c001a109:	e8 32 57 ff ff       	call   c000f840 <malloc>
c001a10e:	83 c4 0c             	add    esp,0xc
c001a111:	89 c7                	mov    edi,eax
c001a113:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a116:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a11d:	50                   	push   eax
c001a11e:	e8 47 93 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001a123:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a126:	e8 11 96 ff ff       	call   c001373c <File::exists()>
c001a12b:	83 c4 10             	add    esp,0x10
c001a12e:	84 c0                	test   al,al
c001a130:	75 31                	jne    c001a163 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a132:	51                   	push   ecx
c001a133:	51                   	push   ecx
c001a134:	6a 12                	push   0x12
c001a136:	57                   	push   edi
c001a137:	e8 92 93 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001a13c:	8b 07                	mov    eax,DWORD PTR [edi]
c001a13e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a141:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a144:	e8 4b 66 fe ff       	call   c0000794 <strlen>
c001a149:	5a                   	pop    edx
c001a14a:	31 d2                	xor    edx,edx
c001a14c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a150:	51                   	push   ecx
c001a151:	55                   	push   ebp
c001a152:	52                   	push   edx
c001a153:	50                   	push   eax
c001a154:	57                   	push   edi
c001a155:	ff d3                	call   ebx
c001a157:	83 c4 14             	add    esp,0x14
c001a15a:	57                   	push   edi
c001a15b:	e8 cc 93 ff ff       	call   c001352c <File::close()>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	31 db                	xor    ebx,ebx
c001a165:	50                   	push   eax
c001a166:	31 ed                	xor    ebp,ebp
c001a168:	68 00 01 00 00       	push   0x100
c001a16d:	6a 00                	push   0x0
c001a16f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a173:	50                   	push   eax
c001a174:	e8 ff 65 fe ff       	call   c0000778 <memset>
c001a179:	58                   	pop    eax
c001a17a:	5a                   	pop    edx
c001a17b:	6a 01                	push   0x1
c001a17d:	57                   	push   edi
c001a17e:	e8 4b 93 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001a183:	83 c4 10             	add    esp,0x10
c001a186:	83 ec 0c             	sub    esp,0xc
c001a189:	8b 07                	mov    eax,DWORD PTR [edi]
c001a18b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a18f:	51                   	push   ecx
c001a190:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a194:	52                   	push   edx
c001a195:	6a 00                	push   0x0
c001a197:	6a 01                	push   0x1
c001a199:	57                   	push   edi
c001a19a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a19d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1a1:	83 c4 20             	add    esp,0x20
c001a1a4:	3c 0d                	cmp    al,0xd
c001a1a6:	0f 84 12 01 00 00    	je     c001a2be <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1ac:	85 db                	test   ebx,ebx
c001a1ae:	0f 84 fd 00 00 00    	je     c001a2b1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1b4:	3c 0a                	cmp    al,0xa
c001a1b6:	74 13                	je     c001a1cb <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1b8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1bd:	74 0c                	je     c001a1cb <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1bf:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1c5:	0f 8e e6 00 00 00    	jle    c001a2b1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1cb:	83 ec 0c             	sub    esp,0xc
c001a1ce:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1d1:	29 dd                	sub    ebp,ebx
c001a1d3:	52                   	push   edx
c001a1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1d8:	e8 63 56 ff ff       	call   c000f840 <malloc>
c001a1dd:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1e4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1e7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1eb:	e8 50 56 ff ff       	call   c000f840 <malloc>
c001a1f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1f4:	83 c4 0c             	add    esp,0xc
c001a1f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1fb:	52                   	push   edx
c001a1fc:	6a 00                	push   0x0
c001a1fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a202:	e8 71 65 fe ff       	call   c0000778 <memset>
c001a207:	83 c4 0c             	add    esp,0xc
c001a20a:	53                   	push   ebx
c001a20b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a20f:	55                   	push   ebp
c001a210:	01 eb                	add    ebx,ebp
c001a212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a216:	e8 29 65 fe ff       	call   c0000744 <memcpy>
c001a21b:	83 c4 0c             	add    esp,0xc
c001a21e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a222:	51                   	push   ecx
c001a223:	6a 00                	push   0x0
c001a225:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a229:	e8 4a 65 fe ff       	call   c0000778 <memset>
c001a22e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a231:	e8 5e 65 fe ff       	call   c0000794 <strlen>
c001a236:	83 c4 0c             	add    esp,0xc
c001a239:	50                   	push   eax
c001a23a:	53                   	push   ebx
c001a23b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a23f:	e8 00 65 fe ff       	call   c0000744 <memcpy>
c001a244:	5b                   	pop    ebx
c001a245:	58                   	pop    eax
c001a246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a24a:	68 11 bb 02 c0       	push   0xc002bb11
c001a24f:	e8 be 8c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a254:	8b 06                	mov    eax,DWORD PTR [esi]
c001a256:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a259:	40                   	inc    eax
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	89 06                	mov    DWORD PTR [esi],eax
c001a25f:	85 d2                	test   edx,edx
c001a261:	75 0c                	jne    c001a26f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a263:	83 ec 0c             	sub    esp,0xc
c001a266:	6a 08                	push   0x8
c001a268:	e8 d3 55 ff ff       	call   c000f840 <malloc>
c001a26d:	eb 0c                	jmp    c001a27b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a26f:	c1 e0 03             	shl    eax,0x3
c001a272:	51                   	push   ecx
c001a273:	51                   	push   ecx
c001a274:	50                   	push   eax
c001a275:	52                   	push   edx
c001a276:	e8 b1 55 ff ff       	call   c000f82c <realloc>
c001a27b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a27e:	83 c4 10             	add    esp,0x10
c001a281:	31 db                	xor    ebx,ebx
c001a283:	52                   	push   edx
c001a284:	6a 08                	push   0x8
c001a286:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a28a:	50                   	push   eax
c001a28b:	8b 16                	mov    edx,DWORD PTR [esi]
c001a28d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a290:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a294:	50                   	push   eax
c001a295:	e8 aa 64 fe ff       	call   c0000744 <memcpy>
c001a29a:	83 c4 0c             	add    esp,0xc
c001a29d:	68 00 01 00 00       	push   0x100
c001a2a2:	6a 00                	push   0x0
c001a2a4:	55                   	push   ebp
c001a2a5:	31 ed                	xor    ebp,ebp
c001a2a7:	e8 cc 64 fe ff       	call   c0000778 <memset>
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	eb 0d                	jmp    c001a2be <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2b1:	3c 3d                	cmp    al,0x3d
c001a2b3:	74 07                	je     c001a2bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2b5:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2b9:	45                   	inc    ebp
c001a2ba:	eb 02                	jmp    c001a2be <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2bc:	89 eb                	mov    ebx,ebp
c001a2be:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2c3:	0f 85 bd fe ff ff    	jne    c001a186 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2c9:	50                   	push   eax
c001a2ca:	50                   	push   eax
c001a2cb:	ff 36                	push   DWORD PTR [esi]
c001a2cd:	68 1f bb 02 c0       	push   0xc002bb1f
c001a2d2:	e8 3b 8c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a2d7:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2dd:	5b                   	pop    ebx
c001a2de:	5e                   	pop    esi
c001a2df:	5f                   	pop    edi
c001a2e0:	5d                   	pop    ebp
c001a2e1:	c3                   	ret    

c001a2e2 <EnvVarContainer::__loadSystem()>:
c001a2e2:	83 ec 10             	sub    esp,0x10
c001a2e5:	68 c0 da 02 c0       	push   0xc002dac0
c001a2ea:	68 4a bb 02 c0       	push   0xc002bb4a
c001a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2f3:	e8 f4 fd ff ff       	call   c001a0ec <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2f8:	83 c4 1c             	add    esp,0x1c
c001a2fb:	c3                   	ret    

c001a2fc <EnvVarContainer::__loadUser()>:
c001a2fc:	c3                   	ret    
c001a2fd:	90                   	nop

c001a2fe <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a302:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a30c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a310:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a317:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a31e:	90                   	nop
c001a31f:	c3                   	ret    

c001a320 <EnvVarContainer::~EnvVarContainer()>:
c001a320:	83 ec 0c             	sub    esp,0xc
c001a323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a327:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a32a:	85 c0                	test   eax,eax
c001a32c:	74 1d                	je     c001a34b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a332:	8b 00                	mov    eax,DWORD PTR [eax]
c001a334:	85 c0                	test   eax,eax
c001a336:	74 13                	je     c001a34b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a33c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	50                   	push   eax
c001a343:	e8 08 55 ff ff       	call   c000f850 <free>
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	90                   	nop
c001a34c:	83 c4 0c             	add    esp,0xc
c001a34f:	c3                   	ret    

c001a350 <Krnl::getEnv(Process*, char const*)>:
c001a350:	53                   	push   ebx
c001a351:	83 ec 08             	sub    esp,0x8
c001a354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a358:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a35c:	39 05 f4 1a 03 c0    	cmp    DWORD PTR ds:0xc0031af4,eax
c001a362:	74 04                	je     c001a368 <Krnl::getEnv(Process*, char const*)+0x18>
c001a364:	85 c0                	test   eax,eax
c001a366:	75 0b                	jne    c001a373 <Krnl::getEnv(Process*, char const*)+0x23>
c001a368:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a36d:	85 c0                	test   eax,eax
c001a36f:	75 19                	jne    c001a38a <Krnl::getEnv(Process*, char const*)+0x3a>
c001a371:	eb 27                	jmp    c001a39a <Krnl::getEnv(Process*, char const*)+0x4a>
c001a373:	52                   	push   edx
c001a374:	52                   	push   edx
c001a375:	53                   	push   ebx
c001a376:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a37c:	e8 5f fc ff ff       	call   c0019fe0 <EnvVarContainer::getEnv(char const*)>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	85 c0                	test   eax,eax
c001a386:	75 28                	jne    c001a3b0 <Krnl::getEnv(Process*, char const*)+0x60>
c001a388:	eb de                	jmp    c001a368 <Krnl::getEnv(Process*, char const*)+0x18>
c001a38a:	52                   	push   edx
c001a38b:	52                   	push   edx
c001a38c:	53                   	push   ebx
c001a38d:	50                   	push   eax
c001a38e:	e8 4d fc ff ff       	call   c0019fe0 <EnvVarContainer::getEnv(char const*)>
c001a393:	83 c4 10             	add    esp,0x10
c001a396:	85 c0                	test   eax,eax
c001a398:	75 16                	jne    c001a3b0 <Krnl::getEnv(Process*, char const*)+0x60>
c001a39a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a39e:	a1 d8 10 03 c0       	mov    eax,ds:0xc00310d8
c001a3a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3a7:	83 c4 08             	add    esp,0x8
c001a3aa:	5b                   	pop    ebx
c001a3ab:	e9 30 fc ff ff       	jmp    c0019fe0 <EnvVarContainer::getEnv(char const*)>
c001a3b0:	83 c4 08             	add    esp,0x8
c001a3b3:	5b                   	pop    ebx
c001a3b4:	c3                   	ret    

c001a3b5 <Krnl::setEnvSystem(char const*, char const*)>:
c001a3b5:	83 ec 10             	sub    esp,0x10
c001a3b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3c0:	ff 35 d8 10 03 c0    	push   DWORD PTR ds:0xc00310d8
c001a3c6:	e8 53 fc ff ff       	call   c001a01e <EnvVarContainer::setEnv(char const*, char const*)>
c001a3cb:	83 c4 1c             	add    esp,0x1c
c001a3ce:	c3                   	ret    

c001a3cf <Krnl::setEnvUser(char const*, char const*)>:
c001a3cf:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	74 15                	je     c001a3ed <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3d8:	83 ec 10             	sub    esp,0x10
c001a3db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3e3:	50                   	push   eax
c001a3e4:	e8 35 fc ff ff       	call   c001a01e <EnvVarContainer::setEnv(char const*, char const*)>
c001a3e9:	83 c4 1c             	add    esp,0x1c
c001a3ec:	c3                   	ret    
c001a3ed:	c3                   	ret    

c001a3ee <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f2:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a3f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3fc:	e9 1d fc ff ff       	jmp    c001a01e <EnvVarContainer::setEnv(char const*, char const*)>

c001a401 <Krnl::deleteEnvSystem(char const*)>:
c001a401:	c3                   	ret    

c001a402 <Krnl::deleteEnvUser(char const*)>:
c001a402:	c3                   	ret    

c001a403 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a403:	c3                   	ret    

c001a404 <Krnl::newProcessEnv(Process*)>:
c001a404:	83 ec 28             	sub    esp,0x28
c001a407:	6a 0c                	push   0xc
c001a409:	e8 32 54 ff ff       	call   c000f840 <malloc>
c001a40e:	5a                   	pop    edx
c001a40f:	59                   	pop    ecx
c001a410:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a414:	50                   	push   eax
c001a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a419:	e8 e0 fe ff ff       	call   c001a2fe <EnvVarContainer::EnvVarContainer(Process*)>
c001a41e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a422:	83 c4 2c             	add    esp,0x2c
c001a425:	c3                   	ret    

c001a426 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a426:	56                   	push   esi
c001a427:	53                   	push   ebx
c001a428:	83 ec 10             	sub    esp,0x10
c001a42b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a42f:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a435:	6a 0c                	push   0xc
c001a437:	e8 04 54 ff ff       	call   c000f840 <malloc>
c001a43c:	89 c3                	mov    ebx,eax
c001a43e:	58                   	pop    eax
c001a43f:	5a                   	pop    edx
c001a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a444:	53                   	push   ebx
c001a445:	e8 b4 fe ff ff       	call   c001a2fe <EnvVarContainer::EnvVarContainer(Process*)>
c001a44a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a44c:	89 03                	mov    DWORD PTR [ebx],eax
c001a44e:	c1 e0 03             	shl    eax,0x3
c001a451:	89 04 24             	mov    DWORD PTR [esp],eax
c001a454:	e8 e7 53 ff ff       	call   c000f840 <malloc>
c001a459:	83 c4 0c             	add    esp,0xc
c001a45c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a45f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a461:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a468:	52                   	push   edx
c001a469:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a46c:	50                   	push   eax
c001a46d:	e8 d2 62 fe ff       	call   c0000744 <memcpy>
c001a472:	89 d8                	mov    eax,ebx
c001a474:	83 c4 14             	add    esp,0x14
c001a477:	5b                   	pop    ebx
c001a478:	5e                   	pop    esi
c001a479:	c3                   	ret    

c001a47a <Krnl::loadSystemEnv()>:
c001a47a:	53                   	push   ebx
c001a47b:	83 ec 14             	sub    esp,0x14
c001a47e:	6a 0c                	push   0xc
c001a480:	e8 bb 53 ff ff       	call   c000f840 <malloc>
c001a485:	89 c3                	mov    ebx,eax
c001a487:	58                   	pop    eax
c001a488:	5a                   	pop    edx
c001a489:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001a48f:	53                   	push   ebx
c001a490:	e8 69 fe ff ff       	call   c001a2fe <EnvVarContainer::EnvVarContainer(Process*)>
c001a495:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a498:	89 1d d8 10 03 c0    	mov    DWORD PTR ds:0xc00310d8,ebx
c001a49e:	e8 3f fe ff ff       	call   c001a2e2 <EnvVarContainer::__loadSystem()>
c001a4a3:	83 c4 18             	add    esp,0x18
c001a4a6:	5b                   	pop    ebx
c001a4a7:	c3                   	ret    

c001a4a8 <Krnl::loadUserEnv()>:
c001a4a8:	53                   	push   ebx
c001a4a9:	83 ec 14             	sub    esp,0x14
c001a4ac:	6a 0c                	push   0xc
c001a4ae:	e8 8d 53 ff ff       	call   c000f840 <malloc>
c001a4b3:	89 c3                	mov    ebx,eax
c001a4b5:	58                   	pop    eax
c001a4b6:	5a                   	pop    edx
c001a4b7:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001a4bd:	53                   	push   ebx
c001a4be:	e8 3b fe ff ff       	call   c001a2fe <EnvVarContainer::EnvVarContainer(Process*)>
c001a4c3:	89 1d d4 10 03 c0    	mov    DWORD PTR ds:0xc00310d4,ebx
c001a4c9:	83 c4 18             	add    esp,0x18
c001a4cc:	5b                   	pop    ebx
c001a4cd:	c3                   	ret    

c001a4ce <Krnl::flushEnv()>:
c001a4ce:	c3                   	ret    

c001a4cf <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d3:	8b 15 d4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310d4
c001a4d9:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4df:	a1 d8 10 03 c0       	mov    eax,ds:0xc00310d8
c001a4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4e6:	03 01                	add    eax,DWORD PTR [ecx]
c001a4e8:	85 d2                	test   edx,edx
c001a4ea:	74 02                	je     c001a4ee <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4ec:	03 02                	add    eax,DWORD PTR [edx]
c001a4ee:	c3                   	ret    

c001a4ef <Krnl::getProcessEnvPair(Process*, int)>:
c001a4ef:	57                   	push   edi
c001a4f0:	8b 0d d4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310d4
c001a4f6:	56                   	push   esi
c001a4f7:	85 c9                	test   ecx,ecx
c001a4f9:	53                   	push   ebx
c001a4fa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a502:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a508:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a50c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a50e:	75 47                	jne    c001a557 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a510:	39 c3                	cmp    ebx,eax
c001a512:	7c 47                	jl     c001a55b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a514:	8b 15 d8 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310d8
c001a51a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a51c:	01 c1                	add    ecx,eax
c001a51e:	39 d9                	cmp    ecx,ebx
c001a520:	7e 6c                	jle    c001a58e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a522:	51                   	push   ecx
c001a523:	89 d9                	mov    ecx,ebx
c001a525:	29 c1                	sub    ecx,eax
c001a527:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a52a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a52e:	53                   	push   ebx
c001a52f:	68 6c bb 02 c0       	push   0xc002bb6c
c001a534:	e8 d9 89 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a539:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a53f:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a541:	a1 d8 10 03 c0       	mov    eax,ds:0xc00310d8
c001a546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a549:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a54d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a550:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a553:	89 06                	mov    DWORD PTR [esi],eax
c001a555:	eb 51                	jmp    c001a5a8 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a557:	39 c3                	cmp    ebx,eax
c001a559:	7d 05                	jge    c001a560 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a55b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a55e:	eb 20                	jmp    c001a580 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a560:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a562:	8d 14 07             	lea    edx,[edi+eax*1]
c001a565:	39 da                	cmp    edx,ebx
c001a567:	7e 04                	jle    c001a56d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a569:	29 c3                	sub    ebx,eax
c001a56b:	eb 10                	jmp    c001a57d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a56d:	8b 0d d8 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310d8
c001a573:	03 11                	add    edx,DWORD PTR [ecx]
c001a575:	39 da                	cmp    edx,ebx
c001a577:	7e 15                	jle    c001a58e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a579:	29 c3                	sub    ebx,eax
c001a57b:	29 fb                	sub    ebx,edi
c001a57d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a580:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a584:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a587:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a58a:	89 06                	mov    DWORD PTR [esi],eax
c001a58c:	eb 1d                	jmp    c001a5ab <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a58e:	83 ec 0c             	sub    esp,0xc
c001a591:	68 80 bb 02 c0       	push   0xc002bb80
c001a596:	e8 18 00 00 00       	call   c001a5b3 <Krnl::panic(char const*)>
c001a59b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5a1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5a8:	83 c4 10             	add    esp,0x10
c001a5ab:	89 f0                	mov    eax,esi
c001a5ad:	5b                   	pop    ebx
c001a5ae:	5e                   	pop    esi
c001a5af:	5f                   	pop    edi
c001a5b0:	c2 04 00             	ret    0x4

c001a5b3 <Krnl::panic(char const*)>:
c001a5b3:	55                   	push   ebp
c001a5b4:	89 e5                	mov    ebp,esp
c001a5b6:	53                   	push   ebx
c001a5b7:	83 ec 0c             	sub    esp,0xc
c001a5ba:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5bd:	fa                   	cli    
c001a5be:	c6 05 e4 10 03 c0 01 	mov    BYTE PTR ds:0xc00310e4,0x1
c001a5c5:	53                   	push   ebx
c001a5c6:	c6 05 c4 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d4c4,0x0
c001a5cd:	68 9a bb 02 c0       	push   0xc002bb9a
c001a5d2:	e8 3b 89 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a5d7:	58                   	pop    eax
c001a5d8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a5dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e3:	e8 9f 67 ff ff       	call   c0010d87 <setActiveTerminal(VgaText*)>
c001a5e8:	83 c4 0c             	add    esp,0xc
c001a5eb:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a5f0:	6a 01                	push   0x1
c001a5f2:	6a 0f                	push   0xf
c001a5f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5fa:	e8 b9 61 ff ff       	call   c00107b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5ff:	58                   	pop    eax
c001a600:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a605:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a60b:	e8 18 6a ff ff       	call   c0011028 <VgaText::clearScreen()>
c001a610:	58                   	pop    eax
c001a611:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a616:	5a                   	pop    edx
c001a617:	68 b3 bb 02 c0       	push   0xc002bbb3
c001a61c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a622:	e8 7f 6b ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a627:	59                   	pop    ecx
c001a628:	58                   	pop    eax
c001a629:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a62e:	68 58 bc 02 c0       	push   0xc002bc58
c001a633:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a639:	e8 68 6b ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a63e:	58                   	pop    eax
c001a63f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a644:	5a                   	pop    edx
c001a645:	68 cf bb 02 c0       	push   0xc002bbcf
c001a64a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a650:	e8 51 6b ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a655:	59                   	pop    ecx
c001a656:	58                   	pop    eax
c001a657:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a65c:	53                   	push   ebx
c001a65d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a663:	e8 3e 6b ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a668:	58                   	pop    eax
c001a669:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a66e:	5a                   	pop    edx
c001a66f:	68 ef bb 02 c0       	push   0xc002bbef
c001a674:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a67a:	e8 27 6b ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a67f:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	85 c0                	test   eax,eax
c001a689:	74 02                	je     c001a68d <Krnl::panic(char const*)+0xda>
c001a68b:	ff d0                	call   eax
c001a68d:	83 ec 0c             	sub    esp,0xc
c001a690:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a693:	e8 47 30 00 00       	call   c001d6df <Thr::getDriverNameFromAddress(unsigned long)>
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	89 c3                	mov    ebx,eax
c001a69d:	85 c0                	test   eax,eax
c001a69f:	0f 84 50 02 00 00    	je     c001a8f5 <Krnl::panic(char const*)+0x342>
c001a6a5:	83 ec 08             	sub    esp,0x8
c001a6a8:	8b 15 f4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031af4
c001a6ae:	68 94 bc 02 c0       	push   0xc002bc94
c001a6b3:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6b9:	e8 e8 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a6be:	58                   	pop    eax
c001a6bf:	5a                   	pop    edx
c001a6c0:	8b 15 f4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031af4
c001a6c6:	68 cf bb 02 c0       	push   0xc002bbcf
c001a6cb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6d1:	e8 d0 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a6d6:	59                   	pop    ecx
c001a6d7:	58                   	pop    eax
c001a6d8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a6dd:	53                   	push   ebx
c001a6de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e4:	e8 bd 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	83 ec 08             	sub    esp,0x8
c001a6ef:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a6f4:	68 ee bb 02 c0       	push   0xc002bbee
c001a6f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ff:	e8 a2 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a704:	58                   	pop    eax
c001a705:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a70a:	5a                   	pop    edx
c001a70b:	68 ec bc 02 c0       	push   0xc002bcec
c001a710:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a716:	e8 8b 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a71b:	59                   	pop    ecx
c001a71c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a721:	5b                   	pop    ebx
c001a722:	68 2c bd 02 c0       	push   0xc002bd2c
c001a727:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72d:	e8 74 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a732:	58                   	pop    eax
c001a733:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a738:	5a                   	pop    edx
c001a739:	68 da bb 02 c0       	push   0xc002bbda
c001a73e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a744:	e8 5d 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a749:	59                   	pop    ecx
c001a74a:	5b                   	pop    ebx
c001a74b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a74e:	68 f2 bb 02 c0       	push   0xc002bbf2
c001a753:	e8 ba 87 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a758:	58                   	pop    eax
c001a759:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a75c:	5a                   	pop    edx
c001a75d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a760:	68 fb bb 02 c0       	push   0xc002bbfb
c001a765:	e8 a8 87 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a76a:	59                   	pop    ecx
c001a76b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a76e:	5b                   	pop    ebx
c001a76f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a771:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a774:	68 04 bc 02 c0       	push   0xc002bc04
c001a779:	e8 94 87 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001a77e:	58                   	pop    eax
c001a77f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a784:	5a                   	pop    edx
c001a785:	68 70 bd 02 c0       	push   0xc002bd70
c001a78a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a790:	e8 11 6a ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a795:	59                   	pop    ecx
c001a796:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a79b:	5b                   	pop    ebx
c001a79c:	68 0d bc 02 c0       	push   0xc002bc0d
c001a7a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a7:	e8 fa 69 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a7ac:	0f 20 c0             	mov    eax,cr0
c001a7af:	5a                   	pop    edx
c001a7b0:	59                   	pop    ecx
c001a7b1:	50                   	push   eax
c001a7b2:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a7b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7bd:	e8 0a 6a ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a7c2:	5b                   	pop    ebx
c001a7c3:	58                   	pop    eax
c001a7c4:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a7c9:	68 17 bc 02 c0       	push   0xc002bc17
c001a7ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d4:	e8 cd 69 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a7d9:	0f 20 d0             	mov    eax,cr2
c001a7dc:	5a                   	pop    edx
c001a7dd:	59                   	pop    ecx
c001a7de:	50                   	push   eax
c001a7df:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a7e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ea:	e8 dd 69 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a7ef:	5b                   	pop    ebx
c001a7f0:	58                   	pop    eax
c001a7f1:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a7f6:	68 21 bc 02 c0       	push   0xc002bc21
c001a7fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a801:	e8 a0 69 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a806:	0f 20 d8             	mov    eax,cr3
c001a809:	5a                   	pop    edx
c001a80a:	59                   	pop    ecx
c001a80b:	50                   	push   eax
c001a80c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a811:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a817:	e8 b0 69 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a81c:	5b                   	pop    ebx
c001a81d:	58                   	pop    eax
c001a81e:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a823:	68 34 bc 02 c0       	push   0xc002bc34
c001a828:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82e:	e8 73 69 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a833:	0f 20 e0             	mov    eax,cr4
c001a836:	5a                   	pop    edx
c001a837:	59                   	pop    ecx
c001a838:	50                   	push   eax
c001a839:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a83e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a844:	e8 83 69 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a849:	5b                   	pop    ebx
c001a84a:	58                   	pop    eax
c001a84b:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a850:	68 3e bc 02 c0       	push   0xc002bc3e
c001a855:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85b:	e8 46 69 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a860:	5a                   	pop    edx
c001a861:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a866:	59                   	pop    ecx
c001a867:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a86d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a870:	50                   	push   eax
c001a871:	e8 56 69 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a876:	5b                   	pop    ebx
c001a877:	58                   	pop    eax
c001a878:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a87d:	68 55 bc 02 c0       	push   0xc002bc55
c001a882:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a888:	e8 19 69 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a88d:	5a                   	pop    edx
c001a88e:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a893:	59                   	pop    ecx
c001a894:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a89a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a89d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8a0:	50                   	push   eax
c001a8a1:	e8 26 69 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a8a6:	5b                   	pop    ebx
c001a8a7:	58                   	pop    eax
c001a8a8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8ad:	68 55 bc 02 c0       	push   0xc002bc55
c001a8b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b8:	e8 e9 68 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a8bd:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8c5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8cb:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8cd:	59                   	pop    ecx
c001a8ce:	5b                   	pop    ebx
c001a8cf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8d2:	50                   	push   eax
c001a8d3:	e8 f4 68 ff ff       	call   c00111cc <VgaText::putx(unsigned int)>
c001a8d8:	83 c4 10             	add    esp,0x10
c001a8db:	b2 fe                	mov    dl,0xfe
c001a8dd:	e4 60                	in     al,0x60
c001a8df:	3c 1c                	cmp    al,0x1c
c001a8e1:	74 04                	je     c001a8e7 <Krnl::panic(char const*)+0x334>
c001a8e3:	3c 5a                	cmp    al,0x5a
c001a8e5:	75 f6                	jne    c001a8dd <Krnl::panic(char const*)+0x32a>
c001a8e7:	e4 64                	in     al,0x64
c001a8e9:	a8 02                	test   al,0x2
c001a8eb:	75 fa                	jne    c001a8e7 <Krnl::panic(char const*)+0x334>
c001a8ed:	88 d0                	mov    al,dl
c001a8ef:	e6 64                	out    0x64,al
c001a8f1:	fa                   	cli    
c001a8f2:	f4                   	hlt    
c001a8f3:	eb e8                	jmp    c001a8dd <Krnl::panic(char const*)+0x32a>
c001a8f5:	50                   	push   eax
c001a8f6:	50                   	push   eax
c001a8f7:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8fc:	68 c0 bc 02 c0       	push   0xc002bcc0
c001a901:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a907:	e8 9a 68 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a90c:	58                   	pop    eax
c001a90d:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a912:	5a                   	pop    edx
c001a913:	68 cf bb 02 c0       	push   0xc002bbcf
c001a918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91e:	e8 83 68 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a923:	59                   	pop    ecx
c001a924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a929:	5b                   	pop    ebx
c001a92a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a92d:	83 c0 0c             	add    eax,0xc
c001a930:	50                   	push   eax
c001a931:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93c:	e8 65 68 ff ff       	call   c00111a6 <VgaText::puts(char const*)>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	e9 a3 fd ff ff       	jmp    c001a6ec <Krnl::panic(char const*)+0x139>

c001a949 <Net::switchEndian16(unsigned short)>:
c001a949:	83 ec 04             	sub    esp,0x4
c001a94c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a950:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a954:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a958:	c1 f8 08             	sar    eax,0x8
c001a95b:	89 c2                	mov    edx,eax
c001a95d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a961:	c1 e0 08             	shl    eax,0x8
c001a964:	09 d0                	or     eax,edx
c001a966:	83 c4 04             	add    esp,0x4
c001a969:	c3                   	ret    

c001a96a <Net::switchEndian32(unsigned int)>:
c001a96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a96e:	c1 e8 18             	shr    eax,0x18
c001a971:	89 c2                	mov    edx,eax
c001a973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a977:	c1 e0 08             	shl    eax,0x8
c001a97a:	25 00 00 ff 00       	and    eax,0xff0000
c001a97f:	09 c2                	or     edx,eax
c001a981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a985:	c1 e8 08             	shr    eax,0x8
c001a988:	25 00 ff 00 00       	and    eax,0xff00
c001a98d:	09 c2                	or     edx,eax
c001a98f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a993:	c1 e0 18             	shl    eax,0x18
c001a996:	09 d0                	or     eax,edx
c001a998:	c3                   	ret    

c001a999 <Net::crc32Calc(unsigned char*, int)>:
c001a999:	83 ec 10             	sub    esp,0x10
c001a99c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9a1:	75 07                	jne    c001a9aa <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9a3:	b8 00 00 00 00       	mov    eax,0x0
c001a9a8:	eb 7c                	jmp    c001aa26 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9aa:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9af:	7f 07                	jg     c001a9b8 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9b1:	b8 00 00 00 00       	mov    eax,0x0
c001a9b6:	eb 6e                	jmp    c001aa26 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9b8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9d0:	7d 4e                	jge    c001aa20 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9da:	01 d0                	add    eax,edx
c001a9dc:	8a 00                	mov    al,BYTE PTR [eax]
c001a9de:	0f b6 c0             	movzx  eax,al
c001a9e1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9ed:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9f2:	7f 26                	jg     c001aa1a <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f8:	83 e0 01             	and    eax,0x1
c001a9fb:	74 0d                	je     c001aa0a <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa01:	d1 e8                	shr    eax,1
c001aa03:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa08:	eb 06                	jmp    c001aa10 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0e:	d1 e8                	shr    eax,1
c001aa10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa14:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa18:	eb d3                	jmp    c001a9ed <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa1a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa1e:	eb a8                	jmp    c001a9c8 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa24:	f7 d0                	not    eax
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	c3                   	ret    

c001aa2a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa2a:	83 ec 1c             	sub    esp,0x1c
c001aa2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa3d:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa42:	7f 14                	jg     c001aa58 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa48:	8d 50 01             	lea    edx,[eax+0x1]
c001aa4b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa4f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa56:	eb e5                	jmp    c001aa3d <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa5c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa63:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa66:	83 ec 04             	sub    esp,0x4
c001aa69:	6a 06                	push   0x6
c001aa6b:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa6f:	50                   	push   eax
c001aa70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa74:	e8 cb 5c fe ff       	call   c0000744 <memcpy>
c001aa79:	83 c4 10             	add    esp,0x10
c001aa7c:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa81:	83 ec 04             	sub    esp,0x4
c001aa84:	6a 06                	push   0x6
c001aa86:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa8a:	50                   	push   eax
c001aa8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa8f:	e8 b0 5c fe ff       	call   c0000744 <memcpy>
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaa0:	0f b7 c0             	movzx  eax,ax
c001aaa3:	c1 f8 08             	sar    eax,0x8
c001aaa6:	89 c1                	mov    ecx,eax
c001aaa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaac:	8d 50 01             	lea    edx,[eax+0x1]
c001aaaf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aab3:	88 ca                	mov    dl,cl
c001aab5:	88 10                	mov    BYTE PTR [eax],dl
c001aab7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aabb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aabf:	8d 48 01             	lea    ecx,[eax+0x1]
c001aac2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aac6:	88 10                	mov    BYTE PTR [eax],dl
c001aac8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad0:	83 ec 04             	sub    esp,0x4
c001aad3:	52                   	push   edx
c001aad4:	50                   	push   eax
c001aad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aad9:	e8 66 5c fe ff       	call   c0000744 <memcpy>
c001aade:	83 c4 10             	add    esp,0x10
c001aae1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aae5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aae9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaed:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aaf1:	83 ec 08             	sub    esp,0x8
c001aaf4:	50                   	push   eax
c001aaf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aaf9:	e8 9b fe ff ff       	call   c001a999 <Net::crc32Calc(unsigned char*, int)>
c001aafe:	83 c4 10             	add    esp,0x10
c001ab01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab09:	c1 e8 18             	shr    eax,0x18
c001ab0c:	89 c1                	mov    ecx,eax
c001ab0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab12:	8d 50 01             	lea    edx,[eax+0x1]
c001ab15:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab19:	88 ca                	mov    dl,cl
c001ab1b:	88 10                	mov    BYTE PTR [eax],dl
c001ab1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab21:	c1 e8 10             	shr    eax,0x10
c001ab24:	89 c1                	mov    ecx,eax
c001ab26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab31:	88 ca                	mov    dl,cl
c001ab33:	88 10                	mov    BYTE PTR [eax],dl
c001ab35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab39:	c1 e8 08             	shr    eax,0x8
c001ab3c:	89 c1                	mov    ecx,eax
c001ab3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab42:	8d 50 01             	lea    edx,[eax+0x1]
c001ab45:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab49:	88 ca                	mov    dl,cl
c001ab4b:	88 10                	mov    BYTE PTR [eax],dl
c001ab4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab51:	8d 50 01             	lea    edx,[eax+0x1]
c001ab54:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab5c:	88 10                	mov    BYTE PTR [eax],dl
c001ab5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab62:	83 c4 1c             	add    esp,0x1c
c001ab65:	c3                   	ret    

c001ab66 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab66:	83 ec 2c             	sub    esp,0x2c
c001ab69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab71:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab76:	83 ec 04             	sub    esp,0x4
c001ab79:	6a 06                	push   0x6
c001ab7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab83:	83 c0 0e             	add    eax,0xe
c001ab86:	50                   	push   eax
c001ab87:	e8 b8 5b fe ff       	call   c0000744 <memcpy>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab94:	83 ec 04             	sub    esp,0x4
c001ab97:	6a 06                	push   0x6
c001ab99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aba1:	83 c0 08             	add    eax,0x8
c001aba4:	50                   	push   eax
c001aba5:	e8 9a 5b fe ff       	call   c0000744 <memcpy>
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abb6:	8d 50 01             	lea    edx,[eax+0x1]
c001abb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abbd:	8a 00                	mov    al,BYTE PTR [eax]
c001abbf:	0f b6 c0             	movzx  eax,al
c001abc2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abcb:	8d 50 01             	lea    edx,[eax+0x1]
c001abce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abd2:	8a 00                	mov    al,BYTE PTR [eax]
c001abd4:	0f b6 c0             	movzx  eax,al
c001abd7:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abdc:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abe1:	c1 e0 08             	shl    eax,0x8
c001abe4:	89 c2                	mov    edx,eax
c001abe6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abea:	09 d0                	or     eax,edx
c001abec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abf0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abf4:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abf9:	75 3a                	jne    c001ac35 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac02:	66 3d dc 05          	cmp    ax,0x5dc
c001ac06:	77 10                	ja     c001ac18 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac0f:	0f b7 c0             	movzx  eax,ax
c001ac12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac16:	eb 1d                	jmp    c001ac35 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac18:	83 ec 0c             	sub    esp,0xc
c001ac1b:	68 98 bd 02 c0       	push   0xc002bd98
c001ac20:	e8 ed 82 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac2c:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac30:	e9 c0 00 00 00       	jmp    c001acf5 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac35:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac3f:	83 ec 04             	sub    esp,0x4
c001ac42:	52                   	push   edx
c001ac43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac47:	50                   	push   eax
c001ac48:	e8 f7 5a fe ff       	call   c0000744 <memcpy>
c001ac4d:	83 c4 10             	add    esp,0x10
c001ac50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac54:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac5c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac63:	8a 00                	mov    al,BYTE PTR [eax]
c001ac65:	0f b6 c0             	movzx  eax,al
c001ac68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac70:	8d 50 01             	lea    edx,[eax+0x1]
c001ac73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac77:	8a 00                	mov    al,BYTE PTR [eax]
c001ac79:	0f b6 c0             	movzx  eax,al
c001ac7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac84:	8d 50 01             	lea    edx,[eax+0x1]
c001ac87:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac8b:	8a 00                	mov    al,BYTE PTR [eax]
c001ac8d:	0f b6 c0             	movzx  eax,al
c001ac90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac98:	8d 50 01             	lea    edx,[eax+0x1]
c001ac9b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac9f:	8a 00                	mov    al,BYTE PTR [eax]
c001aca1:	0f b6 c0             	movzx  eax,al
c001aca4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aca8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acac:	c1 e0 18             	shl    eax,0x18
c001acaf:	89 c2                	mov    edx,eax
c001acb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb5:	c1 e0 10             	shl    eax,0x10
c001acb8:	09 c2                	or     edx,eax
c001acba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acbe:	c1 e0 08             	shl    eax,0x8
c001acc1:	09 d0                	or     eax,edx
c001acc3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001acc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001accb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001accf:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001acd3:	83 e8 04             	sub    eax,0x4
c001acd6:	83 ec 08             	sub    esp,0x8
c001acd9:	50                   	push   eax
c001acda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001acde:	e8 b6 fc ff ff       	call   c001a999 <Net::crc32Calc(unsigned char*, int)>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001acea:	0f 94 c2             	sete   dl
c001aced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf1:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acf4:	90                   	nop
c001acf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf9:	83 c4 2c             	add    esp,0x2c
c001acfc:	c2 04 00             	ret    0x4

c001acff <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acff:	55                   	push   ebp
c001ad00:	57                   	push   edi
c001ad01:	56                   	push   esi
c001ad02:	53                   	push   ebx
c001ad03:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad09:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad10:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad12:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad15:	80 fb 40             	cmp    bl,0x40
c001ad18:	75 1b                	jne    c001ad35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad1a:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad1c:	84 d2                	test   dl,dl
c001ad1e:	0f 84 f1 00 00 00    	je     c001ae15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad24:	8d 46 01             	lea    eax,[esi+0x1]
c001ad27:	80 fa 3a             	cmp    dl,0x3a
c001ad2a:	74 04                	je     c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad2c:	89 c6                	mov    esi,eax
c001ad2e:	eb ea                	jmp    c001ad1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad30:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad33:	89 c6                	mov    esi,eax
c001ad35:	50                   	push   eax
c001ad36:	6a 40                	push   0x40
c001ad38:	6a 00                	push   0x0
c001ad3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad3e:	50                   	push   eax
c001ad3f:	e8 34 5a fe ff       	call   c0000778 <memset>
c001ad44:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad4b:	31 c0                	xor    eax,eax
c001ad4d:	83 c4 10             	add    esp,0x10
c001ad50:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad52:	84 c9                	test   cl,cl
c001ad54:	0f 84 bb 00 00 00    	je     c001ae15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad5a:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad5f:	0f 8f b0 00 00 00    	jg     c001ae15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad65:	80 f9 0a             	cmp    cl,0xa
c001ad68:	0f 85 98 00 00 00    	jne    c001ae06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad6e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad73:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad77:	a8 df                	test   al,0xdf
c001ad79:	0f 94 c1             	sete   cl
c001ad7c:	3c 23                	cmp    al,0x23
c001ad7e:	0f 94 c2             	sete   dl
c001ad81:	08 d1                	or     cl,dl
c001ad83:	75 4a                	jne    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad85:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad88:	80 fa 01             	cmp    dl,0x1
c001ad8b:	76 42                	jbe    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad8d:	3c 5b                	cmp    al,0x5b
c001ad8f:	75 42                	jne    c001add3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad91:	80 fb 40             	cmp    bl,0x40
c001ad94:	75 39                	jne    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad9d:	52                   	push   edx
c001ad9e:	e8 f1 59 fe ff       	call   c0000794 <strlen>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	83 f8 3f             	cmp    eax,0x3f
c001ada9:	77 6a                	ja     c001ae15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adab:	50                   	push   eax
c001adac:	50                   	push   eax
c001adad:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adb1:	52                   	push   edx
c001adb2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adb6:	52                   	push   edx
c001adb7:	e8 78 5a fe ff       	call   c0000834 <strcpy>
c001adbc:	58                   	pop    eax
c001adbd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adc1:	52                   	push   edx
c001adc2:	e8 cd 59 fe ff       	call   c0000794 <strlen>
c001adc7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001adcc:	83 c4 10             	add    esp,0x10
c001adcf:	31 d2                	xor    edx,edx
c001add1:	eb 3a                	jmp    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001add3:	80 fb 40             	cmp    bl,0x40
c001add6:	74 06                	je     c001adde <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001add8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001addc:	eb 20                	jmp    c001adfe <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001adde:	50                   	push   eax
c001addf:	50                   	push   eax
c001ade0:	55                   	push   ebp
c001ade1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ade5:	50                   	push   eax
c001ade6:	e8 d5 5a fe ff       	call   c00008c0 <strcmp>
c001adeb:	83 c4 10             	add    esp,0x10
c001adee:	85 c0                	test   eax,eax
c001adf0:	75 dd                	jne    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf2:	eb e4                	jmp    c001add8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adf4:	8d 50 01             	lea    edx,[eax+0x1]
c001adf7:	80 f9 3d             	cmp    cl,0x3d
c001adfa:	74 1d                	je     c001ae19 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adfc:	89 d0                	mov    eax,edx
c001adfe:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae00:	84 c9                	test   cl,cl
c001ae02:	75 f0                	jne    c001adf4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae04:	eb 0f                	jmp    c001ae15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae06:	8d 50 01             	lea    edx,[eax+0x1]
c001ae09:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae0d:	47                   	inc    edi
c001ae0e:	89 d0                	mov    eax,edx
c001ae10:	e9 3b ff ff ff       	jmp    c001ad50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae15:	31 c0                	xor    eax,eax
c001ae17:	eb 33                	jmp    c001ae4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae1d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae20:	50                   	push   eax
c001ae21:	50                   	push   eax
c001ae22:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae26:	50                   	push   eax
c001ae27:	56                   	push   esi
c001ae28:	e8 93 5a fe ff       	call   c00008c0 <strcmp>
c001ae2d:	83 c4 10             	add    esp,0x10
c001ae30:	85 c0                	test   eax,eax
c001ae32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae36:	75 97                	jne    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae38:	51                   	push   ecx
c001ae39:	51                   	push   ecx
c001ae3a:	52                   	push   edx
c001ae3b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae42:	e8 ed 59 fe ff       	call   c0000834 <strcpy>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	b0 01                	mov    al,0x1
c001ae4c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae52:	5b                   	pop    ebx
c001ae53:	5e                   	pop    esi
c001ae54:	5f                   	pop    edi
c001ae55:	5d                   	pop    ebp
c001ae56:	c3                   	ret    

c001ae57 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae57:	57                   	push   edi
c001ae58:	56                   	push   esi
c001ae59:	53                   	push   ebx
c001ae5a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae60:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae67:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae6e:	53                   	push   ebx
c001ae6f:	e8 20 59 fe ff       	call   c0000794 <strlen>
c001ae74:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae77:	89 c7                	mov    edi,eax
c001ae79:	e8 16 59 fe ff       	call   c0000794 <strlen>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae85:	3d ff 00 00 00       	cmp    eax,0xff
c001ae8a:	0f 87 d3 00 00 00    	ja     c001af63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae90:	57                   	push   edi
c001ae91:	57                   	push   edi
c001ae92:	56                   	push   esi
c001ae93:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae97:	56                   	push   esi
c001ae98:	e8 97 59 fe ff       	call   c0000834 <strcpy>
c001ae9d:	58                   	pop    eax
c001ae9e:	5a                   	pop    edx
c001ae9f:	68 61 c3 02 c0       	push   0xc002c361
c001aea4:	56                   	push   esi
c001aea5:	e8 ca 5a fe ff       	call   c0000974 <strcat>
c001aeaa:	59                   	pop    ecx
c001aeab:	5f                   	pop    edi
c001aeac:	53                   	push   ebx
c001aead:	56                   	push   esi
c001aeae:	e8 c1 5a fe ff       	call   c0000974 <strcat>
c001aeb3:	58                   	pop    eax
c001aeb4:	5a                   	pop    edx
c001aeb5:	68 e4 bd 02 c0       	push   0xc002bde4
c001aeba:	56                   	push   esi
c001aebb:	e8 b4 5a fe ff       	call   c0000974 <strcat>
c001aec0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aec7:	e8 74 49 ff ff       	call   c000f840 <malloc>
c001aecc:	83 c4 0c             	add    esp,0xc
c001aecf:	89 c3                	mov    ebx,eax
c001aed1:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001aed7:	56                   	push   esi
c001aed8:	50                   	push   eax
c001aed9:	e8 8c 85 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001aede:	83 c4 10             	add    esp,0x10
c001aee1:	85 db                	test   ebx,ebx
c001aee3:	74 7e                	je     c001af63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aee5:	51                   	push   ecx
c001aee6:	51                   	push   ecx
c001aee7:	6a 01                	push   0x1
c001aee9:	53                   	push   ebx
c001aeea:	e8 df 85 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	85 c0                	test   eax,eax
c001aef4:	74 08                	je     c001aefe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aef6:	83 ec 0c             	sub    esp,0xc
c001aef9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aefb:	53                   	push   ebx
c001aefc:	eb 5f                	jmp    c001af5d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aefe:	52                   	push   edx
c001aeff:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af03:	50                   	push   eax
c001af04:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af08:	50                   	push   eax
c001af09:	53                   	push   ebx
c001af0a:	e8 6b 88 ff ff       	call   c001377a <File::stat(unsigned long long*, bool*)>
c001af0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	89 c1                	mov    ecx,eax
c001af18:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af1c:	74 31                	je     c001af4f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af1e:	83 ec 0c             	sub    esp,0xc
c001af21:	50                   	push   eax
c001af22:	e8 19 49 ff ff       	call   c000f840 <malloc>
c001af27:	89 c6                	mov    esi,eax
c001af29:	58                   	pop    eax
c001af2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af30:	52                   	push   edx
c001af31:	56                   	push   esi
c001af32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af3a:	53                   	push   ebx
c001af3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af3e:	83 c4 20             	add    esp,0x20
c001af41:	85 c0                	test   eax,eax
c001af43:	75 0a                	jne    c001af4f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af49:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af4d:	74 18                	je     c001af67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af4f:	83 ec 0c             	sub    esp,0xc
c001af52:	53                   	push   ebx
c001af53:	e8 d4 85 ff ff       	call   c001352c <File::close()>
c001af58:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af60:	83 c4 10             	add    esp,0x10
c001af63:	31 c0                	xor    eax,eax
c001af65:	eb 3b                	jmp    c001afa2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af67:	83 ec 0c             	sub    esp,0xc
c001af6a:	53                   	push   ebx
c001af6b:	e8 bc 85 ff ff       	call   c001352c <File::close()>
c001af70:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af78:	83 c4 0c             	add    esp,0xc
c001af7b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af82:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af89:	56                   	push   esi
c001af8a:	e8 70 fd ff ff       	call   c001acff <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af8f:	89 34 24             	mov    DWORD PTR [esp],esi
c001af92:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af96:	e8 b5 48 ff ff       	call   c000f850 <free>
c001af9b:	83 c4 10             	add    esp,0x10
c001af9e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afa2:	81 c4 20 01 00 00    	add    esp,0x120
c001afa8:	5b                   	pop    ebx
c001afa9:	5e                   	pop    esi
c001afaa:	5f                   	pop    edi
c001afab:	c3                   	ret    

c001afac <Reg::getLine(char*, char*, char*)>:
c001afac:	57                   	push   edi
c001afad:	56                   	push   esi
c001afae:	53                   	push   ebx
c001afaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afb3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afbb:	57                   	push   edi
c001afbc:	56                   	push   esi
c001afbd:	53                   	push   ebx
c001afbe:	68 e9 bd 02 c0       	push   0xc002bde9
c001afc3:	e8 8f fe ff ff       	call   c001ae57 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	84 c0                	test   al,al
c001afcd:	75 10                	jne    c001afdf <Reg::getLine(char*, char*, char*)+0x33>
c001afcf:	57                   	push   edi
c001afd0:	56                   	push   esi
c001afd1:	53                   	push   ebx
c001afd2:	68 0e be 02 c0       	push   0xc002be0e
c001afd7:	e8 7b fe ff ff       	call   c001ae57 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afdc:	83 c4 10             	add    esp,0x10
c001afdf:	5b                   	pop    ebx
c001afe0:	5e                   	pop    esi
c001afe1:	5f                   	pop    edi
c001afe2:	c3                   	ret    

c001afe3 <Reg::readInt(char*, char*, int*)>:
c001afe3:	55                   	push   ebp
c001afe4:	57                   	push   edi
c001afe5:	56                   	push   esi
c001afe6:	53                   	push   ebx
c001afe7:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afed:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aff1:	57                   	push   edi
c001aff2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aff9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b000:	e8 a7 ff ff ff       	call   c001afac <Reg::getLine(char*, char*, char*)>
c001b005:	83 c4 10             	add    esp,0x10
c001b008:	84 c0                	test   al,al
c001b00a:	0f 84 b3 00 00 00    	je     c001b0c3 <Reg::readInt(char*, char*, int*)+0xe0>
c001b010:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b014:	80 fa 2b             	cmp    dl,0x2b
c001b017:	74 0c                	je     c001b025 <Reg::readInt(char*, char*, int*)+0x42>
c001b019:	80 fa 2d             	cmp    dl,0x2d
c001b01c:	75 0e                	jne    c001b02c <Reg::readInt(char*, char*, int*)+0x49>
c001b01e:	ba 01 00 00 00       	mov    edx,0x1
c001b023:	eb 0b                	jmp    c001b030 <Reg::readInt(char*, char*, int*)+0x4d>
c001b025:	ba 01 00 00 00       	mov    edx,0x1
c001b02a:	eb 02                	jmp    c001b02e <Reg::readInt(char*, char*, int*)+0x4b>
c001b02c:	31 d2                	xor    edx,edx
c001b02e:	31 c0                	xor    eax,eax
c001b030:	be 0a 00 00 00       	mov    esi,0xa
c001b035:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b03a:	75 20                	jne    c001b05c <Reg::readInt(char*, char*, int*)+0x79>
c001b03c:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b040:	80 f9 78             	cmp    cl,0x78
c001b043:	75 0a                	jne    c001b04f <Reg::readInt(char*, char*, int*)+0x6c>
c001b045:	83 c2 02             	add    edx,0x2
c001b048:	be 10 00 00 00       	mov    esi,0x10
c001b04d:	eb 0d                	jmp    c001b05c <Reg::readInt(char*, char*, int*)+0x79>
c001b04f:	80 f9 62             	cmp    cl,0x62
c001b052:	75 08                	jne    c001b05c <Reg::readInt(char*, char*, int*)+0x79>
c001b054:	83 c2 02             	add    edx,0x2
c001b057:	be 02 00 00 00       	mov    esi,0x2
c001b05c:	01 d7                	add    edi,edx
c001b05e:	31 d2                	xor    edx,edx
c001b060:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b062:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b066:	80 fb 0d             	cmp    bl,0xd
c001b069:	0f 94 c3             	sete   bl
c001b06c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b071:	0f 94 c1             	sete   cl
c001b074:	08 cb                	or     bl,cl
c001b076:	75 3a                	jne    c001b0b2 <Reg::readInt(char*, char*, int*)+0xcf>
c001b078:	0f af d6             	imul   edx,esi
c001b07b:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b080:	83 fe 10             	cmp    esi,0x10
c001b083:	75 26                	jne    c001b0ab <Reg::readInt(char*, char*, int*)+0xc8>
c001b085:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b089:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b08c:	89 e9                	mov    ecx,ebp
c001b08e:	80 f9 05             	cmp    cl,0x5
c001b091:	77 06                	ja     c001b099 <Reg::readInt(char*, char*, int*)+0xb6>
c001b093:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b097:	eb 16                	jmp    c001b0af <Reg::readInt(char*, char*, int*)+0xcc>
c001b099:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b09d:	83 e9 61             	sub    ecx,0x61
c001b0a0:	80 f9 05             	cmp    cl,0x5
c001b0a3:	77 06                	ja     c001b0ab <Reg::readInt(char*, char*, int*)+0xc8>
c001b0a5:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0a9:	eb 04                	jmp    c001b0af <Reg::readInt(char*, char*, int*)+0xcc>
c001b0ab:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0af:	47                   	inc    edi
c001b0b0:	eb ae                	jmp    c001b060 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0b2:	84 c0                	test   al,al
c001b0b4:	74 02                	je     c001b0b8 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0b6:	f7 da                	neg    edx
c001b0b8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0bf:	89 10                	mov    DWORD PTR [eax],edx
c001b0c1:	88 d8                	mov    al,bl
c001b0c3:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0c9:	5b                   	pop    ebx
c001b0ca:	5e                   	pop    esi
c001b0cb:	5f                   	pop    edi
c001b0cc:	5d                   	pop    ebp
c001b0cd:	c3                   	ret    

c001b0ce <Reg::readString(char*, char*, char*, int)>:
c001b0ce:	57                   	push   edi
c001b0cf:	56                   	push   esi
c001b0d0:	53                   	push   ebx
c001b0d1:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0d7:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0de:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0e2:	57                   	push   edi
c001b0e3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0ea:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0f1:	e8 b6 fe ff ff       	call   c001afac <Reg::getLine(char*, char*, char*)>
c001b0f6:	83 c4 10             	add    esp,0x10
c001b0f9:	89 c6                	mov    esi,eax
c001b0fb:	84 c0                	test   al,al
c001b0fd:	74 44                	je     c001b143 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0ff:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b106:	31 c0                	xor    eax,eax
c001b108:	4a                   	dec    edx
c001b109:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b10c:	84 c9                	test   cl,cl
c001b10e:	74 0f                	je     c001b11f <Reg::readString(char*, char*, char*, int)+0x51>
c001b110:	39 c2                	cmp    edx,eax
c001b112:	7e 0b                	jle    c001b11f <Reg::readString(char*, char*, char*, int)+0x51>
c001b114:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b117:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b11c:	40                   	inc    eax
c001b11d:	eb ea                	jmp    c001b109 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b11f:	83 ec 0c             	sub    esp,0xc
c001b122:	53                   	push   ebx
c001b123:	e8 6c 56 fe ff       	call   c0000794 <strlen>
c001b128:	83 c4 10             	add    esp,0x10
c001b12b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b130:	75 11                	jne    c001b143 <Reg::readString(char*, char*, char*, int)+0x75>
c001b132:	83 ec 0c             	sub    esp,0xc
c001b135:	53                   	push   ebx
c001b136:	e8 59 56 fe ff       	call   c0000794 <strlen>
c001b13b:	83 c4 10             	add    esp,0x10
c001b13e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b143:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b149:	89 f0                	mov    eax,esi
c001b14b:	5b                   	pop    ebx
c001b14c:	5e                   	pop    esi
c001b14d:	5f                   	pop    edi
c001b14e:	c3                   	ret    

c001b14f <Reg::readBool(char*, char*, bool*)>:
c001b14f:	83 ec 20             	sub    esp,0x20
c001b152:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b156:	50                   	push   eax
c001b157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b15b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b15f:	e8 7f fe ff ff       	call   c001afe3 <Reg::readInt(char*, char*, int*)>
c001b164:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b169:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b16d:	0f 95 02             	setne  BYTE PTR [edx]
c001b170:	83 c4 2c             	add    esp,0x2c
c001b173:	c3                   	ret    

c001b174 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b174:	53                   	push   ebx
c001b175:	83 ec 1c             	sub    esp,0x1c
c001b178:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b17c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b180:	50                   	push   eax
c001b181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b189:	e8 c1 ff ff ff       	call   c001b14f <Reg::readBool(char*, char*, bool*)>
c001b18e:	83 c4 10             	add    esp,0x10
c001b191:	84 c0                	test   al,al
c001b193:	74 04                	je     c001b199 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b195:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b199:	88 d8                	mov    al,bl
c001b19b:	83 c4 18             	add    esp,0x18
c001b19e:	5b                   	pop    ebx
c001b19f:	c3                   	ret    

c001b1a0 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1a0:	53                   	push   ebx
c001b1a1:	83 ec 1c             	sub    esp,0x1c
c001b1a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1a8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1ac:	50                   	push   eax
c001b1ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b5:	e8 29 fe ff ff       	call   c001afe3 <Reg::readInt(char*, char*, int*)>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	84 c0                	test   al,al
c001b1bf:	74 04                	je     c001b1c5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1c5:	89 d8                	mov    eax,ebx
c001b1c7:	83 c4 18             	add    esp,0x18
c001b1ca:	5b                   	pop    ebx
c001b1cb:	c3                   	ret    

c001b1cc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1cc:	57                   	push   edi
c001b1cd:	56                   	push   esi
c001b1ce:	53                   	push   ebx
c001b1cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1d3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1d7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1db:	56                   	push   esi
c001b1dc:	53                   	push   ebx
c001b1dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1e5:	e8 e4 fe ff ff       	call   c001b0ce <Reg::readString(char*, char*, char*, int)>
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	84 c0                	test   al,al
c001b1ef:	75 1b                	jne    c001b20c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1f1:	50                   	push   eax
c001b1f2:	56                   	push   esi
c001b1f3:	4e                   	dec    esi
c001b1f4:	6a 00                	push   0x0
c001b1f6:	53                   	push   ebx
c001b1f7:	e8 7c 55 fe ff       	call   c0000778 <memset>
c001b1fc:	83 c4 0c             	add    esp,0xc
c001b1ff:	56                   	push   esi
c001b200:	57                   	push   edi
c001b201:	53                   	push   ebx
c001b202:	89 fb                	mov    ebx,edi
c001b204:	e8 3b 55 fe ff       	call   c0000744 <memcpy>
c001b209:	83 c4 10             	add    esp,0x10
c001b20c:	89 d8                	mov    eax,ebx
c001b20e:	5b                   	pop    ebx
c001b20f:	5e                   	pop    esi
c001b210:	5f                   	pop    edi
c001b211:	c3                   	ret    

c001b212 <Sys::eject(regs*)>:
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	83 ca ff             	or     edx,0xffffffff
c001b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b21c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b21f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b224:	83 e9 41             	sub    ecx,0x41
c001b227:	83 f9 19             	cmp    ecx,0x19
c001b22a:	77 18                	ja     c001b244 <Sys::eject(regs*)+0x32>
c001b22c:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c001b233:	85 c9                	test   ecx,ecx
c001b235:	74 0d                	je     c001b244 <Sys::eject(regs*)+0x32>
c001b237:	83 ec 0c             	sub    esp,0xc
c001b23a:	51                   	push   ecx
c001b23b:	e8 78 b4 ff ff       	call   c00166b8 <LogicalDisk::eject()>
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	99                   	cdq    
c001b244:	83 c4 0c             	add    esp,0xc
c001b247:	c3                   	ret    

c001b248 <Sys::exit(regs*)>:
c001b248:	83 ec 18             	sub    esp,0x18
c001b24b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b24f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b252:	e8 c4 35 00 00       	call   c001e81b <terminateTask(int)>
c001b257:	83 c8 ff             	or     eax,0xffffffff
c001b25a:	83 c4 1c             	add    esp,0x1c
c001b25d:	89 c2                	mov    edx,eax
c001b25f:	c3                   	ret    

c001b260 <Sys::getCwd(regs*)>:
c001b260:	83 ec 10             	sub    esp,0x10
c001b263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b267:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b26a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b26d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b272:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b275:	e8 f2 7f ff ff       	call   c001326c <Fs::getcwd(Process*, char*, int)>
c001b27a:	83 c4 1c             	add    esp,0x1c
c001b27d:	99                   	cdq    
c001b27e:	c3                   	ret    

c001b27f <Sys::getPID(regs*)>:
c001b27f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b284:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b287:	8b 00                	mov    eax,DWORD PTR [eax]
c001b289:	99                   	cdq    
c001b28a:	c3                   	ret    

c001b28b <Sys::getRAMData(regs*)>:
c001b28b:	8b 0d d0 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5d0
c001b291:	6b 05 cc e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e5cc,0x64
c001b298:	99                   	cdq    
c001b299:	f7 f9                	idiv   ecx
c001b29b:	c1 e0 18             	shl    eax,0x18
c001b29e:	09 c8                	or     eax,ecx
c001b2a0:	99                   	cdq    
c001b2a1:	c3                   	ret    

c001b2a2 <Sys::loadDLL(regs*)>:
c001b2a2:	56                   	push   esi
c001b2a3:	53                   	push   ebx
c001b2a4:	31 d2                	xor    edx,edx
c001b2a6:	51                   	push   ecx
c001b2a7:	b8 01 00 00 00       	mov    eax,0x1
c001b2ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2b0:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2b4:	0f 84 8c 00 00 00    	je     c001b346 <Sys::loadDLL(regs*)+0xa4>
c001b2ba:	83 ec 0c             	sub    esp,0xc
c001b2bd:	68 14 01 00 00       	push   0x114
c001b2c2:	e8 79 45 ff ff       	call   c000f840 <malloc>
c001b2c7:	83 c4 0c             	add    esp,0xc
c001b2ca:	89 c3                	mov    ebx,eax
c001b2cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2d4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2d7:	53                   	push   ebx
c001b2d8:	e8 8d 81 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	31 d2                	xor    edx,edx
c001b2e2:	b8 02 00 00 00       	mov    eax,0x2
c001b2e7:	85 db                	test   ebx,ebx
c001b2e9:	74 5b                	je     c001b346 <Sys::loadDLL(regs*)+0xa4>
c001b2eb:	83 ec 0c             	sub    esp,0xc
c001b2ee:	53                   	push   ebx
c001b2ef:	e8 48 84 ff ff       	call   c001373c <File::exists()>
c001b2f4:	83 c4 10             	add    esp,0x10
c001b2f7:	84 c0                	test   al,al
c001b2f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2fb:	75 11                	jne    c001b30e <Sys::loadDLL(regs*)+0x6c>
c001b2fd:	83 ec 0c             	sub    esp,0xc
c001b300:	53                   	push   ebx
c001b301:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	b8 03 00 00 00       	mov    eax,0x3
c001b30c:	eb 36                	jmp    c001b344 <Sys::loadDLL(regs*)+0xa2>
c001b30e:	83 ec 0c             	sub    esp,0xc
c001b311:	53                   	push   ebx
c001b312:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b315:	58                   	pop    eax
c001b316:	5a                   	pop    edx
c001b317:	6a 00                	push   0x0
c001b319:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b31c:	e8 0f 24 00 00       	call   c001d730 <Thr::loadDLL(char const*, bool)>
c001b321:	83 c4 10             	add    esp,0x10
c001b324:	89 c1                	mov    ecx,eax
c001b326:	31 d2                	xor    edx,edx
c001b328:	b8 04 00 00 00       	mov    eax,0x4
c001b32d:	85 c9                	test   ecx,ecx
c001b32f:	74 15                	je     c001b346 <Sys::loadDLL(regs*)+0xa4>
c001b331:	53                   	push   ebx
c001b332:	53                   	push   ebx
c001b333:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c001b339:	51                   	push   ecx
c001b33a:	e8 25 26 00 00       	call   c001d964 <Thr::executeDLL(unsigned long, void*)>
c001b33f:	83 c4 10             	add    esp,0x10
c001b342:	31 c0                	xor    eax,eax
c001b344:	31 d2                	xor    edx,edx
c001b346:	59                   	pop    ecx
c001b347:	5b                   	pop    ebx
c001b348:	5e                   	pop    esi
c001b349:	c3                   	ret    

c001b34a <Sys::read(regs*)>:
c001b34a:	57                   	push   edi
c001b34b:	56                   	push   esi
c001b34c:	53                   	push   ebx
c001b34d:	83 ec 10             	sub    esp,0x10
c001b350:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b354:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b357:	83 f8 02             	cmp    eax,0x2
c001b35a:	77 10                	ja     c001b36c <Sys::read(regs*)+0x22>
c001b35c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b361:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b364:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b36a:	eb 0e                	jmp    c001b37a <Sys::read(regs*)+0x30>
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	50                   	push   eax
c001b370:	e8 0a 67 ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	89 c1                	mov    ecx,eax
c001b37a:	83 c8 ff             	or     eax,0xffffffff
c001b37d:	85 c9                	test   ecx,ecx
c001b37f:	89 c2                	mov    edx,eax
c001b381:	74 28                	je     c001b3ab <Sys::read(regs*)+0x61>
c001b383:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b38b:	31 ff                	xor    edi,edi
c001b38d:	83 ec 0c             	sub    esp,0xc
c001b390:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b392:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b396:	52                   	push   edx
c001b397:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b39a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b39d:	57                   	push   edi
c001b39e:	56                   	push   esi
c001b39f:	51                   	push   ecx
c001b3a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3a7:	83 c4 20             	add    esp,0x20
c001b3aa:	99                   	cdq    
c001b3ab:	83 c4 10             	add    esp,0x10
c001b3ae:	5b                   	pop    ebx
c001b3af:	5e                   	pop    esi
c001b3b0:	5f                   	pop    edi
c001b3b1:	c3                   	ret    

c001b3b2 <Sys::sbrk(regs*)>:
c001b3b2:	56                   	push   esi
c001b3b3:	53                   	push   ebx
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b3bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3c3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b3c9:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b3cc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3cf:	68 29 be 02 c0       	push   0xc002be29
c001b3d4:	e8 39 7b ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b3d9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	85 c0                	test   eax,eax
c001b3e1:	75 0a                	jne    c001b3ed <Sys::sbrk(regs*)+0x3b>
c001b3e3:	50                   	push   eax
c001b3e4:	50                   	push   eax
c001b3e5:	53                   	push   ebx
c001b3e6:	68 45 be 02 c0       	push   0xc002be45
c001b3eb:	eb 54                	jmp    c001b441 <Sys::sbrk(regs*)+0x8f>
c001b3ed:	79 0a                	jns    c001b3f9 <Sys::sbrk(regs*)+0x47>
c001b3ef:	56                   	push   esi
c001b3f0:	56                   	push   esi
c001b3f1:	53                   	push   ebx
c001b3f2:	68 58 be 02 c0       	push   0xc002be58
c001b3f7:	eb 48                	jmp    c001b441 <Sys::sbrk(regs*)+0x8f>
c001b3f9:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b3fe:	76 17                	jbe    c001b417 <Sys::sbrk(regs*)+0x65>
c001b400:	51                   	push   ecx
c001b401:	51                   	push   ecx
c001b402:	53                   	push   ebx
c001b403:	68 6a be 02 c0       	push   0xc002be6a
c001b408:	e8 05 7b ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b40d:	83 c8 ff             	or     eax,0xffffffff
c001b410:	83 c4 10             	add    esp,0x10
c001b413:	89 c2                	mov    edx,eax
c001b415:	eb 36                	jmp    c001b44d <Sys::sbrk(regs*)+0x9b>
c001b417:	05 ff 0f 00 00       	add    eax,0xfff
c001b41c:	56                   	push   esi
c001b41d:	c1 e8 0c             	shr    eax,0xc
c001b420:	68 07 04 00 00       	push   0x407
c001b425:	50                   	push   eax
c001b426:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b42b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b42e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b434:	e8 41 70 ff ff       	call   c001247a <VAS::allocatePages(int, int)>
c001b439:	58                   	pop    eax
c001b43a:	5a                   	pop    edx
c001b43b:	53                   	push   ebx
c001b43c:	68 83 be 02 c0       	push   0xc002be83
c001b441:	e8 cc 7a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b446:	89 d8                	mov    eax,ebx
c001b448:	31 d2                	xor    edx,edx
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	59                   	pop    ecx
c001b44e:	5b                   	pop    ebx
c001b44f:	5e                   	pop    esi
c001b450:	c3                   	ret    

c001b451 <Sys::setCwd(regs*)>:
c001b451:	83 ec 14             	sub    esp,0x14
c001b454:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b458:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b45b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b460:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b463:	e8 73 83 ff ff       	call   c00137db <Fs::setcwd(Process*, char*)>
c001b468:	83 c4 1c             	add    esp,0x1c
c001b46b:	99                   	cdq    
c001b46c:	c3                   	ret    

c001b46d <Sys::setTime(regs*)>:
c001b46d:	55                   	push   ebp
c001b46e:	31 d2                	xor    edx,edx
c001b470:	57                   	push   edi
c001b471:	bf 18 00 00 00       	mov    edi,0x18
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b47d:	83 ec 30             	sub    esp,0x30
c001b480:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b484:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b487:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b48a:	f7 f3                	div    ebx
c001b48c:	89 d6                	mov    esi,edx
c001b48e:	31 d2                	xor    edx,edx
c001b490:	f7 f3                	div    ebx
c001b492:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b495:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b499:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b49e:	31 d2                	xor    edx,edx
c001b4a0:	f7 f3                	div    ebx
c001b4a2:	31 d2                	xor    edx,edx
c001b4a4:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4a9:	f7 f7                	div    edi
c001b4ab:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4b2:	0f b7 cd             	movzx  ecx,bp
c001b4b5:	56                   	push   esi
c001b4b6:	89 c7                	mov    edi,eax
c001b4b8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4bc:	c1 e6 10             	shl    esi,0x10
c001b4bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4c3:	83 e7 1f             	and    edi,0x1f
c001b4c6:	51                   	push   ecx
c001b4c7:	47                   	inc    edi
c001b4c8:	c1 e8 05             	shr    eax,0x5
c001b4cb:	31 d2                	xor    edx,edx
c001b4cd:	f7 f3                	div    ebx
c001b4cf:	31 db                	xor    ebx,ebx
c001b4d1:	52                   	push   edx
c001b4d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4d6:	57                   	push   edi
c001b4d7:	68 a9 be 02 c0       	push   0xc002bea9
c001b4dc:	e8 31 7a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b4e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4e5:	89 f8                	mov    eax,edi
c001b4e7:	31 c9                	xor    ecx,ecx
c001b4e9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4ed:	88 c1                	mov    cl,al
c001b4ef:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4f5:	88 d5                	mov    ch,dl
c001b4f7:	c1 e0 10             	shl    eax,0x10
c001b4fa:	0f b7 d1             	movzx  edx,cx
c001b4fd:	09 c2                	or     edx,eax
c001b4ff:	89 d8                	mov    eax,ebx
c001b501:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b506:	09 f0                	or     eax,esi
c001b508:	89 c3                	mov    ebx,eax
c001b50a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b50e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b512:	83 c4 18             	add    esp,0x18
c001b515:	53                   	push   ebx
c001b516:	52                   	push   edx
c001b517:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b51b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b51f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b523:	e8 cd 89 ff ff       	call   c0013ef5 <datetimeToSeconds(datetime_t)>
c001b528:	83 c4 0c             	add    esp,0xc
c001b52b:	52                   	push   edx
c001b52c:	50                   	push   eax
c001b52d:	56                   	push   esi
c001b52e:	e8 49 8b ff ff       	call   c001407c <secondsToDatetime(unsigned long long)>
c001b533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b537:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b53b:	51                   	push   ecx
c001b53c:	89 d6                	mov    esi,edx
c001b53e:	51                   	push   ecx
c001b53f:	c1 ee 10             	shr    esi,0x10
c001b542:	89 f3                	mov    ebx,esi
c001b544:	0f b6 f3             	movzx  esi,bl
c001b547:	56                   	push   esi
c001b548:	0f b6 f6             	movzx  esi,dh
c001b54b:	0f b6 d2             	movzx  edx,dl
c001b54e:	56                   	push   esi
c001b54f:	52                   	push   edx
c001b550:	89 c2                	mov    edx,eax
c001b552:	c1 ea 10             	shr    edx,0x10
c001b555:	52                   	push   edx
c001b556:	0f b6 d4             	movzx  edx,ah
c001b559:	0f b6 c0             	movzx  eax,al
c001b55c:	52                   	push   edx
c001b55d:	50                   	push   eax
c001b55e:	68 c5 be 02 c0       	push   0xc002bec5
c001b563:	e8 aa 79 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b568:	83 c4 2c             	add    esp,0x2c
c001b56b:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001b570:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b574:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b578:	53                   	push   ebx
c001b579:	51                   	push   ecx
c001b57a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b580:	e8 97 8a ff ff       	call   c001401c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b585:	83 f0 01             	xor    eax,0x1
c001b588:	31 d2                	xor    edx,edx
c001b58a:	0f b6 c0             	movzx  eax,al
c001b58d:	83 c4 3c             	add    esp,0x3c
c001b590:	5b                   	pop    ebx
c001b591:	5e                   	pop    esi
c001b592:	5f                   	pop    edi
c001b593:	5d                   	pop    ebp
c001b594:	c3                   	ret    

c001b595 <Sys::timezone(regs*)>:
c001b595:	53                   	push   ebx
c001b596:	83 ec 08             	sub    esp,0x8
c001b599:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b59d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5a1:	75 17                	jne    c001b5ba <Sys::timezone(regs*)+0x25>
c001b5a3:	83 ec 0c             	sub    esp,0xc
c001b5a6:	68 e1 be 02 c0       	push   0xc002bee1
c001b5ab:	e8 62 79 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b5b0:	83 c8 ff             	or     eax,0xffffffff
c001b5b3:	83 c4 10             	add    esp,0x10
c001b5b6:	89 c2                	mov    edx,eax
c001b5b8:	eb 20                	jmp    c001b5da <Sys::timezone(regs*)+0x45>
c001b5ba:	83 ec 0c             	sub    esp,0xc
c001b5bd:	68 19 bf 02 c0       	push   0xc002bf19
c001b5c2:	e8 4b 79 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b5c7:	58                   	pop    eax
c001b5c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5cb:	e8 ae 87 ff ff       	call   c0013d7e <User::loadClockSettings(int)>
c001b5d0:	83 c4 10             	add    esp,0x10
c001b5d3:	b8 01 00 00 00       	mov    eax,0x1
c001b5d8:	31 d2                	xor    edx,edx
c001b5da:	83 c4 08             	add    esp,0x8
c001b5dd:	5b                   	pop    ebx
c001b5de:	c3                   	ret    

c001b5df <Sys::write(regs*)>:
c001b5df:	57                   	push   edi
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 10             	sub    esp,0x10
c001b5e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5ec:	83 f8 02             	cmp    eax,0x2
c001b5ef:	77 10                	ja     c001b601 <Sys::write(regs*)+0x22>
c001b5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5f9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5ff:	eb 0e                	jmp    c001b60f <Sys::write(regs*)+0x30>
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	50                   	push   eax
c001b605:	e8 75 64 ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	89 c1                	mov    ecx,eax
c001b60f:	83 c8 ff             	or     eax,0xffffffff
c001b612:	85 c9                	test   ecx,ecx
c001b614:	89 c2                	mov    edx,eax
c001b616:	74 28                	je     c001b640 <Sys::write(regs*)+0x61>
c001b618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b620:	31 ff                	xor    edi,edi
c001b622:	83 ec 0c             	sub    esp,0xc
c001b625:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b627:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b62b:	52                   	push   edx
c001b62c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b62f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b632:	57                   	push   edi
c001b633:	56                   	push   esi
c001b634:	51                   	push   ecx
c001b635:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b638:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b63c:	83 c4 20             	add    esp,0x20
c001b63f:	99                   	cdq    
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	5b                   	pop    ebx
c001b644:	5e                   	pop    esi
c001b645:	5f                   	pop    edi
c001b646:	c3                   	ret    

c001b647 <Sys::wsbe(regs*)>:
c001b647:	57                   	push   edi
c001b648:	b9 0b 00 00 00       	mov    ecx,0xb
c001b64d:	56                   	push   esi
c001b64e:	be 58 bf 02 c0       	mov    esi,0xc002bf58
c001b653:	53                   	push   ebx
c001b654:	83 ec 30             	sub    esp,0x30
c001b657:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b65b:	fc                   	cld    
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b661:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b665:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b66a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b66d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b673:	8b 06                	mov    eax,DWORD PTR [esi]
c001b675:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b678:	57                   	push   edi
c001b679:	e8 16 51 fe ff       	call   c0000794 <strlen>
c001b67e:	5a                   	pop    edx
c001b67f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b683:	52                   	push   edx
c001b684:	31 d2                	xor    edx,edx
c001b686:	57                   	push   edi
c001b687:	52                   	push   edx
c001b688:	50                   	push   eax
c001b689:	56                   	push   esi
c001b68a:	ff d3                	call   ebx
c001b68c:	83 c4 14             	add    esp,0x14
c001b68f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b693:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b696:	e8 80 31 00 00       	call   c001e81b <terminateTask(int)>
c001b69b:	83 c4 40             	add    esp,0x40
c001b69e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6a3:	5b                   	pop    ebx
c001b6a4:	31 d2                	xor    edx,edx
c001b6a6:	5e                   	pop    esi
c001b6a7:	5f                   	pop    edi
c001b6a8:	c3                   	ret    

c001b6a9 <Sys::yield(regs*)>:
c001b6a9:	57                   	push   edi
c001b6aa:	56                   	push   esi
c001b6ab:	53                   	push   ebx
c001b6ac:	e8 27 27 00 00       	call   c001ddd8 <lockScheduler()>
c001b6b1:	e8 5e 2a 00 00       	call   c001e114 <schedule()>
c001b6b6:	e8 1f 27 00 00       	call   c001ddda <unlockScheduler()>
c001b6bb:	8b 35 10 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec10
c001b6c1:	8b 3d 14 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec14
c001b6c7:	89 f0                	mov    eax,esi
c001b6c9:	89 fb                	mov    ebx,edi
c001b6cb:	89 f1                	mov    ecx,esi
c001b6cd:	c1 e0 07             	shl    eax,0x7
c001b6d0:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6d4:	25 80 30 0f 00       	and    eax,0xf3080
c001b6d9:	c1 eb 17             	shr    ebx,0x17
c001b6dc:	31 c8                	xor    eax,ecx
c001b6de:	89 da                	mov    edx,ebx
c001b6e0:	5b                   	pop    ebx
c001b6e1:	5e                   	pop    esi
c001b6e2:	5f                   	pop    edi
c001b6e3:	c3                   	ret    

c001b6e4 <sysCallSeekDir(regs*)>:
c001b6e4:	31 c0                	xor    eax,eax
c001b6e6:	31 d2                	xor    edx,edx
c001b6e8:	c3                   	ret    

c001b6e9 <sysCallTellDir(regs*)>:
c001b6e9:	31 c0                	xor    eax,eax
c001b6eb:	31 d2                	xor    edx,edx
c001b6ed:	c3                   	ret    

c001b6ee <sysCallVerify(regs*)>:
c001b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6f2:	31 d2                	xor    edx,edx
c001b6f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6f7:	c3                   	ret    

c001b6f8 <sysFormatDisk(regs*)>:
c001b6f8:	56                   	push   esi
c001b6f9:	53                   	push   ebx
c001b6fa:	53                   	push   ebx
c001b6fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6ff:	8b 1d 0c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e70c
c001b705:	eb 25                	jmp    c001b72c <sysFormatDisk(regs*)+0x34>
c001b707:	83 ec 0c             	sub    esp,0xc
c001b70a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b70d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b70f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b712:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b715:	50                   	push   eax
c001b716:	ff 34 85 a0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1460]
c001b71d:	53                   	push   ebx
c001b71e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b721:	83 c4 20             	add    esp,0x20
c001b724:	83 f8 08             	cmp    eax,0x8
c001b727:	75 12                	jne    c001b73b <sysFormatDisk(regs*)+0x43>
c001b729:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b72c:	85 db                	test   ebx,ebx
c001b72e:	75 d7                	jne    c001b707 <sysFormatDisk(regs*)+0xf>
c001b730:	59                   	pop    ecx
c001b731:	b8 03 00 00 00       	mov    eax,0x3
c001b736:	31 d2                	xor    edx,edx
c001b738:	5b                   	pop    ebx
c001b739:	5e                   	pop    esi
c001b73a:	c3                   	ret    
c001b73b:	85 c0                	test   eax,eax
c001b73d:	74 1b                	je     c001b75a <sysFormatDisk(regs*)+0x62>
c001b73f:	83 f8 09             	cmp    eax,0x9
c001b742:	74 0b                	je     c001b74f <sysFormatDisk(regs*)+0x57>
c001b744:	59                   	pop    ecx
c001b745:	b8 02 00 00 00       	mov    eax,0x2
c001b74a:	31 d2                	xor    edx,edx
c001b74c:	5b                   	pop    ebx
c001b74d:	5e                   	pop    esi
c001b74e:	c3                   	ret    
c001b74f:	59                   	pop    ecx
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	31 d2                	xor    edx,edx
c001b757:	5b                   	pop    ebx
c001b758:	5e                   	pop    esi
c001b759:	c3                   	ret    
c001b75a:	59                   	pop    ecx
c001b75b:	31 c0                	xor    eax,eax
c001b75d:	31 d2                	xor    edx,edx
c001b75f:	5b                   	pop    ebx
c001b760:	5e                   	pop    esi
c001b761:	c3                   	ret    

c001b762 <sysSetDiskVolumeLabel(regs*)>:
c001b762:	56                   	push   esi
c001b763:	53                   	push   ebx
c001b764:	53                   	push   ebx
c001b765:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b76c:	83 f8 19             	cmp    eax,0x19
c001b76f:	77 29                	ja     c001b79a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b771:	8b 0c 85 a0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1460]
c001b778:	85 c9                	test   ecx,ecx
c001b77a:	74 1e                	je     c001b79a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b77f:	85 d2                	test   edx,edx
c001b781:	74 17                	je     c001b79a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b783:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b789:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b78b:	52                   	push   edx
c001b78c:	50                   	push   eax
c001b78d:	51                   	push   ecx
c001b78e:	53                   	push   ebx
c001b78f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b792:	83 c4 10             	add    esp,0x10
c001b795:	99                   	cdq    
c001b796:	59                   	pop    ecx
c001b797:	5b                   	pop    ebx
c001b798:	5e                   	pop    esi
c001b799:	c3                   	ret    
c001b79a:	59                   	pop    ecx
c001b79b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a5:	5b                   	pop    ebx
c001b7a6:	5e                   	pop    esi
c001b7a7:	c3                   	ret    

c001b7a8 <sysGetDiskVolumeLabel(regs*)>:
c001b7a8:	57                   	push   edi
c001b7a9:	56                   	push   esi
c001b7aa:	53                   	push   ebx
c001b7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7af:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7b2:	83 fa 19             	cmp    edx,0x19
c001b7b5:	77 34                	ja     c001b7eb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7b7:	8b 0c 95 a0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1460]
c001b7be:	85 c9                	test   ecx,ecx
c001b7c0:	74 29                	je     c001b7eb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7c5:	85 db                	test   ebx,ebx
c001b7c7:	74 22                	je     c001b7eb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7cc:	85 c0                	test   eax,eax
c001b7ce:	74 1b                	je     c001b7eb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d0:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7db:	50                   	push   eax
c001b7dc:	53                   	push   ebx
c001b7dd:	52                   	push   edx
c001b7de:	51                   	push   ecx
c001b7df:	56                   	push   esi
c001b7e0:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7e3:	83 c4 20             	add    esp,0x20
c001b7e6:	99                   	cdq    
c001b7e7:	5b                   	pop    ebx
c001b7e8:	5e                   	pop    esi
c001b7e9:	5f                   	pop    edi
c001b7ea:	c3                   	ret    
c001b7eb:	5b                   	pop    ebx
c001b7ec:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	c3                   	ret    

c001b7f9 <sysShutdown(regs*)>:
c001b7f9:	83 ec 0c             	sub    esp,0xc
c001b7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b800:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b803:	85 c0                	test   eax,eax
c001b805:	74 18                	je     c001b81f <sysShutdown(regs*)+0x26>
c001b807:	83 f8 01             	cmp    eax,0x1
c001b80a:	74 38                	je     c001b844 <sysShutdown(regs*)+0x4b>
c001b80c:	83 f8 02             	cmp    eax,0x2
c001b80f:	74 24                	je     c001b835 <sysShutdown(regs*)+0x3c>
c001b811:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b816:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b81b:	83 c4 0c             	add    esp,0xc
c001b81e:	c3                   	ret    
c001b81f:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001b824:	8b 10                	mov    edx,DWORD PTR [eax]
c001b826:	6a 00                	push   0x0
c001b828:	6a 00                	push   0x0
c001b82a:	6a 00                	push   0x0
c001b82c:	50                   	push   eax
c001b82d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	eb dc                	jmp    c001b811 <sysShutdown(regs*)+0x18>
c001b835:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001b83a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b83c:	6a 00                	push   0x0
c001b83e:	6a 00                	push   0x0
c001b840:	6a 01                	push   0x1
c001b842:	eb e8                	jmp    c001b82c <sysShutdown(regs*)+0x33>
c001b844:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c001b849:	85 c0                	test   eax,eax
c001b84b:	74 02                	je     c001b84f <sysShutdown(regs*)+0x56>
c001b84d:	ff d0                	call   eax
c001b84f:	31 c0                	xor    eax,eax
c001b851:	31 d2                	xor    edx,edx
c001b853:	83 c4 0c             	add    esp,0xc
c001b856:	c3                   	ret    

c001b857 <sysCallRealpath(regs*)>:
c001b857:	83 ec 0c             	sub    esp,0xc
c001b85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b861:	85 d2                	test   edx,edx
c001b863:	74 07                	je     c001b86c <sysCallRealpath(regs*)+0x15>
c001b865:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b868:	85 c0                	test   eax,eax
c001b86a:	75 0b                	jne    c001b877 <sysCallRealpath(regs*)+0x20>
c001b86c:	b8 01 00 00 00       	mov    eax,0x1
c001b871:	31 d2                	xor    edx,edx
c001b873:	83 c4 0c             	add    esp,0xc
c001b876:	c3                   	ret    
c001b877:	51                   	push   ecx
c001b878:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b87e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b881:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b887:	51                   	push   ecx
c001b888:	52                   	push   edx
c001b889:	50                   	push   eax
c001b88a:	e8 31 7a ff ff       	call   c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b88f:	83 c4 10             	add    esp,0x10
c001b892:	31 c0                	xor    eax,eax
c001b894:	31 d2                	xor    edx,edx
c001b896:	83 c4 0c             	add    esp,0xc
c001b899:	c3                   	ret    

c001b89a <sysCallGetArgc(regs*)>:
c001b89a:	83 ec 14             	sub    esp,0x14
c001b89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8a5:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8ab:	68 84 bf 02 c0       	push   0xc002bf84
c001b8b0:	e8 5d 76 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b8b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8bd:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8c3:	83 c4 1c             	add    esp,0x1c
c001b8c6:	99                   	cdq    
c001b8c7:	c3                   	ret    

c001b8c8 <sysCallReadDir(regs*)>:
c001b8c8:	53                   	push   ebx
c001b8c9:	83 ec 18             	sub    esp,0x18
c001b8cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8d0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8d3:	83 f8 02             	cmp    eax,0x2
c001b8d6:	76 53                	jbe    c001b92b <sysCallReadDir(regs*)+0x63>
c001b8d8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8db:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8e1:	77 4f                	ja     c001b932 <sysCallReadDir(regs*)+0x6a>
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	50                   	push   eax
c001b8e7:	e8 93 61 ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001b8ec:	83 c4 10             	add    esp,0x10
c001b8ef:	85 c0                	test   eax,eax
c001b8f1:	74 50                	je     c001b943 <sysCallReadDir(regs*)+0x7b>
c001b8f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8fb:	83 ec 0c             	sub    esp,0xc
c001b8fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001b900:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b904:	51                   	push   ecx
c001b905:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b908:	6a 00                	push   0x0
c001b90a:	68 10 01 00 00       	push   0x110
c001b90f:	50                   	push   eax
c001b910:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b913:	83 c4 20             	add    esp,0x20
c001b916:	85 c0                	test   eax,eax
c001b918:	74 38                	je     c001b952 <sysCallReadDir(regs*)+0x8a>
c001b91a:	83 f8 07             	cmp    eax,0x7
c001b91d:	74 0c                	je     c001b92b <sysCallReadDir(regs*)+0x63>
c001b91f:	b8 02 00 00 00       	mov    eax,0x2
c001b924:	31 d2                	xor    edx,edx
c001b926:	83 c4 18             	add    esp,0x18
c001b929:	5b                   	pop    ebx
c001b92a:	c3                   	ret    
c001b92b:	b8 01 00 00 00       	mov    eax,0x1
c001b930:	eb f2                	jmp    c001b924 <sysCallReadDir(regs*)+0x5c>
c001b932:	83 ec 08             	sub    esp,0x8
c001b935:	52                   	push   edx
c001b936:	68 9c c0 02 c0       	push   0xc002c09c
c001b93b:	e8 d2 75 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001b940:	83 c4 10             	add    esp,0x10
c001b943:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b948:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b94d:	83 c4 18             	add    esp,0x18
c001b950:	5b                   	pop    ebx
c001b951:	c3                   	ret    
c001b952:	31 c0                	xor    eax,eax
c001b954:	eb ce                	jmp    c001b924 <sysCallReadDir(regs*)+0x5c>

c001b956 <sysCallIsATTY(regs*)>:
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b960:	83 f8 02             	cmp    eax,0x2
c001b963:	76 07                	jbe    c001b96c <sysCallIsATTY(regs*)+0x16>
c001b965:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b96a:	75 26                	jne    c001b992 <sysCallIsATTY(regs*)+0x3c>
c001b96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b974:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b97a:	85 c0                	test   eax,eax
c001b97c:	74 24                	je     c001b9a2 <sysCallIsATTY(regs*)+0x4c>
c001b97e:	83 ec 0c             	sub    esp,0xc
c001b981:	8b 10                	mov    edx,DWORD PTR [eax]
c001b983:	50                   	push   eax
c001b984:	ff 12                	call   DWORD PTR [edx]
c001b986:	31 d2                	xor    edx,edx
c001b988:	0f b6 c0             	movzx  eax,al
c001b98b:	83 c4 10             	add    esp,0x10
c001b98e:	83 c4 0c             	add    esp,0xc
c001b991:	c3                   	ret    
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	50                   	push   eax
c001b996:	e8 e4 60 ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001b99b:	83 c4 10             	add    esp,0x10
c001b99e:	85 c0                	test   eax,eax
c001b9a0:	75 dc                	jne    c001b97e <sysCallIsATTY(regs*)+0x28>
c001b9a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ac:	83 c4 0c             	add    esp,0xc
c001b9af:	c3                   	ret    

c001b9b0 <sysCallSeek(regs*)>:
c001b9b0:	53                   	push   ebx
c001b9b1:	83 ec 08             	sub    esp,0x8
c001b9b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9bb:	83 f8 02             	cmp    eax,0x2
c001b9be:	76 4a                	jbe    c001ba0a <sysCallSeek(regs*)+0x5a>
c001b9c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9c5:	77 32                	ja     c001b9f9 <sysCallSeek(regs*)+0x49>
c001b9c7:	83 ec 0c             	sub    esp,0xc
c001b9ca:	50                   	push   eax
c001b9cb:	e8 af 60 ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001b9d0:	83 c4 0c             	add    esp,0xc
c001b9d3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9d6:	31 db                	xor    ebx,ebx
c001b9d8:	53                   	push   ebx
c001b9d9:	51                   	push   ecx
c001b9da:	50                   	push   eax
c001b9db:	e8 ac 7b ff ff       	call   c001358c <File::seek(unsigned long long)>
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	85 c0                	test   eax,eax
c001b9e5:	0f 95 c0             	setne  al
c001b9e8:	31 d2                	xor    edx,edx
c001b9ea:	0f b6 c0             	movzx  eax,al
c001b9ed:	f7 d8                	neg    eax
c001b9ef:	83 d2 00             	adc    edx,0x0
c001b9f2:	83 c4 08             	add    esp,0x8
c001b9f5:	f7 da                	neg    edx
c001b9f7:	5b                   	pop    ebx
c001b9f8:	c3                   	ret    
c001b9f9:	83 ec 08             	sub    esp,0x8
c001b9fc:	50                   	push   eax
c001b9fd:	68 8f bf 02 c0       	push   0xc002bf8f
c001ba02:	e8 0b 75 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ba07:	83 c4 10             	add    esp,0x10
c001ba0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba14:	83 c4 08             	add    esp,0x8
c001ba17:	5b                   	pop    ebx
c001ba18:	c3                   	ret    

c001ba19 <sysCallTell(regs*)>:
c001ba19:	53                   	push   ebx
c001ba1a:	83 ec 08             	sub    esp,0x8
c001ba1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba24:	83 f8 02             	cmp    eax,0x2
c001ba27:	76 5e                	jbe    c001ba87 <sysCallTell(regs*)+0x6e>
c001ba29:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba2e:	77 2d                	ja     c001ba5d <sysCallTell(regs*)+0x44>
c001ba30:	83 ec 0c             	sub    esp,0xc
c001ba33:	50                   	push   eax
c001ba34:	e8 46 60 ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001ba39:	5a                   	pop    edx
c001ba3a:	59                   	pop    ecx
c001ba3b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba3e:	50                   	push   eax
c001ba3f:	e8 9e 7b ff ff       	call   c00135e2 <File::tell(unsigned long long*)>
c001ba44:	83 c4 10             	add    esp,0x10
c001ba47:	85 c0                	test   eax,eax
c001ba49:	0f 95 c0             	setne  al
c001ba4c:	31 d2                	xor    edx,edx
c001ba4e:	0f b6 c0             	movzx  eax,al
c001ba51:	f7 d8                	neg    eax
c001ba53:	83 d2 00             	adc    edx,0x0
c001ba56:	83 c4 08             	add    esp,0x8
c001ba59:	f7 da                	neg    edx
c001ba5b:	5b                   	pop    ebx
c001ba5c:	c3                   	ret    
c001ba5d:	83 ec 08             	sub    esp,0x8
c001ba60:	50                   	push   eax
c001ba61:	68 a9 bf 02 c0       	push   0xc002bfa9
c001ba66:	e8 a7 74 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ba6b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba6e:	83 c4 10             	add    esp,0x10
c001ba71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba7e:	31 d2                	xor    edx,edx
c001ba80:	31 c0                	xor    eax,eax
c001ba82:	83 c4 08             	add    esp,0x8
c001ba85:	5b                   	pop    ebx
c001ba86:	c3                   	ret    
c001ba87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba91:	83 c4 08             	add    esp,0x8
c001ba94:	5b                   	pop    ebx
c001ba95:	c3                   	ret    

c001ba96 <sysCallSize(regs*)>:
c001ba96:	53                   	push   ebx
c001ba97:	83 ec 18             	sub    esp,0x18
c001ba9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba9e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa1:	83 f8 02             	cmp    eax,0x2
c001baa4:	76 64                	jbe    c001bb0a <sysCallSize(regs*)+0x74>
c001baa6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baab:	77 33                	ja     c001bae0 <sysCallSize(regs*)+0x4a>
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	50                   	push   eax
c001bab1:	e8 c9 5f ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001bab6:	83 c4 0c             	add    esp,0xc
c001bab9:	8d 54 24 13          	lea    edx,[esp+0x13]
c001babd:	52                   	push   edx
c001babe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bac1:	50                   	push   eax
c001bac2:	e8 b3 7c ff ff       	call   c001377a <File::stat(unsigned long long*, bool*)>
c001bac7:	83 c4 10             	add    esp,0x10
c001baca:	85 c0                	test   eax,eax
c001bacc:	0f 95 c0             	setne  al
c001bacf:	31 d2                	xor    edx,edx
c001bad1:	0f b6 c0             	movzx  eax,al
c001bad4:	f7 d8                	neg    eax
c001bad6:	83 d2 00             	adc    edx,0x0
c001bad9:	83 c4 18             	add    esp,0x18
c001badc:	f7 da                	neg    edx
c001bade:	5b                   	pop    ebx
c001badf:	c3                   	ret    
c001bae0:	83 ec 08             	sub    esp,0x8
c001bae3:	50                   	push   eax
c001bae4:	68 c3 bf 02 c0       	push   0xc002bfc3
c001bae9:	e8 24 74 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001baee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baf1:	83 c4 10             	add    esp,0x10
c001baf4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bafa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb01:	31 d2                	xor    edx,edx
c001bb03:	31 c0                	xor    eax,eax
c001bb05:	83 c4 18             	add    esp,0x18
c001bb08:	5b                   	pop    ebx
c001bb09:	c3                   	ret    
c001bb0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb14:	83 c4 18             	add    esp,0x18
c001bb17:	5b                   	pop    ebx
c001bb18:	c3                   	ret    

c001bb19 <sysCallSizeFromFilename(regs*)>:
c001bb19:	57                   	push   edi
c001bb1a:	56                   	push   esi
c001bb1b:	53                   	push   ebx
c001bb1c:	83 ec 20             	sub    esp,0x20
c001bb1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb23:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb26:	83 fb 02             	cmp    ebx,0x2
c001bb29:	0f 86 99 00 00 00    	jbe    c001bbc8 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb2f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb35:	77 65                	ja     c001bb9c <sysCallSizeFromFilename(regs*)+0x83>
c001bb37:	83 ec 0c             	sub    esp,0xc
c001bb3a:	68 14 01 00 00       	push   0x114
c001bb3f:	e8 fc 3c ff ff       	call   c000f840 <malloc>
c001bb44:	83 c4 0c             	add    esp,0xc
c001bb47:	89 c6                	mov    esi,eax
c001bb49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb4e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb51:	53                   	push   ebx
c001bb52:	56                   	push   esi
c001bb53:	e8 12 79 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001bb58:	83 c4 0c             	add    esp,0xc
c001bb5b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb5f:	50                   	push   eax
c001bb60:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb63:	56                   	push   esi
c001bb64:	e8 11 7c ff ff       	call   c001377a <File::stat(unsigned long long*, bool*)>
c001bb69:	83 c4 10             	add    esp,0x10
c001bb6c:	85 f6                	test   esi,esi
c001bb6e:	74 14                	je     c001bb84 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb74:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb76:	83 ec 0c             	sub    esp,0xc
c001bb79:	56                   	push   esi
c001bb7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb7d:	83 c4 10             	add    esp,0x10
c001bb80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb84:	85 c0                	test   eax,eax
c001bb86:	0f 95 c0             	setne  al
c001bb89:	31 d2                	xor    edx,edx
c001bb8b:	0f b6 c0             	movzx  eax,al
c001bb8e:	f7 d8                	neg    eax
c001bb90:	83 d2 00             	adc    edx,0x0
c001bb93:	83 c4 20             	add    esp,0x20
c001bb96:	f7 da                	neg    edx
c001bb98:	5b                   	pop    ebx
c001bb99:	5e                   	pop    esi
c001bb9a:	5f                   	pop    edi
c001bb9b:	c3                   	ret    
c001bb9c:	83 ec 08             	sub    esp,0x8
c001bb9f:	53                   	push   ebx
c001bba0:	68 c3 bf 02 c0       	push   0xc002bfc3
c001bba5:	e8 68 73 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001bbaa:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbbd:	31 d2                	xor    edx,edx
c001bbbf:	83 c4 20             	add    esp,0x20
c001bbc2:	31 c0                	xor    eax,eax
c001bbc4:	5b                   	pop    ebx
c001bbc5:	5e                   	pop    esi
c001bbc6:	5f                   	pop    edi
c001bbc7:	c3                   	ret    
c001bbc8:	83 c4 20             	add    esp,0x20
c001bbcb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbd0:	5b                   	pop    ebx
c001bbd1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbd6:	5e                   	pop    esi
c001bbd7:	5f                   	pop    edi
c001bbd8:	c3                   	ret    

c001bbd9 <sysCallClose(regs*)>:
c001bbd9:	53                   	push   ebx
c001bbda:	83 ec 08             	sub    esp,0x8
c001bbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbe4:	83 f8 02             	cmp    eax,0x2
c001bbe7:	76 50                	jbe    c001bc39 <sysCallClose(regs*)+0x60>
c001bbe9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbee:	74 58                	je     c001bc48 <sysCallClose(regs*)+0x6f>
c001bbf0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbf5:	74 60                	je     c001bc57 <sysCallClose(regs*)+0x7e>
c001bbf7:	77 2f                	ja     c001bc28 <sysCallClose(regs*)+0x4f>
c001bbf9:	83 ec 0c             	sub    esp,0xc
c001bbfc:	50                   	push   eax
c001bbfd:	e8 7d 5e ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001bc02:	89 c3                	mov    ebx,eax
c001bc04:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc07:	e8 20 79 ff ff       	call   c001352c <File::close()>
c001bc0c:	83 c4 10             	add    esp,0x10
c001bc0f:	85 db                	test   ebx,ebx
c001bc11:	74 0c                	je     c001bc1f <sysCallClose(regs*)+0x46>
c001bc13:	83 ec 0c             	sub    esp,0xc
c001bc16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc18:	53                   	push   ebx
c001bc19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc1c:	83 c4 10             	add    esp,0x10
c001bc1f:	31 c0                	xor    eax,eax
c001bc21:	31 d2                	xor    edx,edx
c001bc23:	83 c4 08             	add    esp,0x8
c001bc26:	5b                   	pop    ebx
c001bc27:	c3                   	ret    
c001bc28:	83 ec 08             	sub    esp,0x8
c001bc2b:	50                   	push   eax
c001bc2c:	68 c0 c0 02 c0       	push   0xc002c0c0
c001bc31:	e8 dc 72 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001bc36:	83 c4 10             	add    esp,0x10
c001bc39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc43:	83 c4 08             	add    esp,0x8
c001bc46:	5b                   	pop    ebx
c001bc47:	c3                   	ret    
c001bc48:	83 ec 0c             	sub    esp,0xc
c001bc4b:	68 de bf 02 c0       	push   0xc002bfde
c001bc50:	e8 bd 72 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001bc55:	eb c5                	jmp    c001bc1c <sysCallClose(regs*)+0x43>
c001bc57:	83 ec 0c             	sub    esp,0xc
c001bc5a:	68 ec bf 02 c0       	push   0xc002bfec
c001bc5f:	eb ef                	jmp    c001bc50 <sysCallClose(regs*)+0x77>

c001bc61 <sysCallOpenDir(regs*)>:
c001bc61:	56                   	push   esi
c001bc62:	53                   	push   ebx
c001bc63:	53                   	push   ebx
c001bc64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc68:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc6b:	85 f6                	test   esi,esi
c001bc6d:	74 59                	je     c001bcc8 <sysCallOpenDir(regs*)+0x67>
c001bc6f:	83 ec 0c             	sub    esp,0xc
c001bc72:	68 14 01 00 00       	push   0x114
c001bc77:	e8 c4 3b ff ff       	call   c000f840 <malloc>
c001bc7c:	83 c4 0c             	add    esp,0xc
c001bc7f:	89 c6                	mov    esi,eax
c001bc81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc86:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc8c:	56                   	push   esi
c001bc8d:	e8 84 7c ff ff       	call   c0013916 <Directory::Directory(char const*, Process*)>
c001bc92:	83 c4 10             	add    esp,0x10
c001bc95:	85 f6                	test   esi,esi
c001bc97:	74 2f                	je     c001bcc8 <sysCallOpenDir(regs*)+0x67>
c001bc99:	83 ec 0c             	sub    esp,0xc
c001bc9c:	56                   	push   esi
c001bc9d:	e8 d8 7c ff ff       	call   c001397a <Directory::open()>
c001bca2:	83 c4 10             	add    esp,0x10
c001bca5:	85 c0                	test   eax,eax
c001bca7:	75 1f                	jne    c001bcc8 <sysCallOpenDir(regs*)+0x67>
c001bca9:	83 ec 0c             	sub    esp,0xc
c001bcac:	56                   	push   esi
c001bcad:	e8 d8 5a ff ff       	call   c001178a <UnixFile::getFileDescriptor()>
c001bcb2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcb5:	83 c4 10             	add    esp,0x10
c001bcb8:	89 02                	mov    DWORD PTR [edx],eax
c001bcba:	c1 f8 1f             	sar    eax,0x1f
c001bcbd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcc0:	31 c0                	xor    eax,eax
c001bcc2:	59                   	pop    ecx
c001bcc3:	31 d2                	xor    edx,edx
c001bcc5:	5b                   	pop    ebx
c001bcc6:	5e                   	pop    esi
c001bcc7:	c3                   	ret    
c001bcc8:	59                   	pop    ecx
c001bcc9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd3:	5b                   	pop    ebx
c001bcd4:	5e                   	pop    esi
c001bcd5:	c3                   	ret    

c001bcd6 <sysCallCloseDir(regs*)>:
c001bcd6:	53                   	push   ebx
c001bcd7:	83 ec 08             	sub    esp,0x8
c001bcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcde:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bce1:	83 f8 02             	cmp    eax,0x2
c001bce4:	76 47                	jbe    c001bd2d <sysCallCloseDir(regs*)+0x57>
c001bce6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bceb:	77 2f                	ja     c001bd1c <sysCallCloseDir(regs*)+0x46>
c001bced:	83 ec 0c             	sub    esp,0xc
c001bcf0:	50                   	push   eax
c001bcf1:	e8 89 5d ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001bcf6:	89 c3                	mov    ebx,eax
c001bcf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcfb:	e8 d6 7c ff ff       	call   c00139d6 <Directory::close()>
c001bd00:	83 c4 10             	add    esp,0x10
c001bd03:	85 db                	test   ebx,ebx
c001bd05:	74 0c                	je     c001bd13 <sysCallCloseDir(regs*)+0x3d>
c001bd07:	83 ec 0c             	sub    esp,0xc
c001bd0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd0c:	53                   	push   ebx
c001bd0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd10:	83 c4 10             	add    esp,0x10
c001bd13:	31 c0                	xor    eax,eax
c001bd15:	31 d2                	xor    edx,edx
c001bd17:	83 c4 08             	add    esp,0x8
c001bd1a:	5b                   	pop    ebx
c001bd1b:	c3                   	ret    
c001bd1c:	83 ec 08             	sub    esp,0x8
c001bd1f:	50                   	push   eax
c001bd20:	68 e8 c0 02 c0       	push   0xc002c0e8
c001bd25:	e8 e8 71 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001bd2a:	83 c4 10             	add    esp,0x10
c001bd2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd32:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd37:	83 c4 08             	add    esp,0x8
c001bd3a:	5b                   	pop    ebx
c001bd3b:	c3                   	ret    

c001bd3c <sysCallMakeDir(regs*)>:
c001bd3c:	56                   	push   esi
c001bd3d:	53                   	push   ebx
c001bd3e:	83 ec 10             	sub    esp,0x10
c001bd41:	68 14 01 00 00       	push   0x114
c001bd46:	e8 f5 3a ff ff       	call   c000f840 <malloc>
c001bd4b:	83 c4 0c             	add    esp,0xc
c001bd4e:	89 c3                	mov    ebx,eax
c001bd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd5c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd5f:	53                   	push   ebx
c001bd60:	e8 b1 7b ff ff       	call   c0013916 <Directory::Directory(char const*, Process*)>
c001bd65:	83 c4 10             	add    esp,0x10
c001bd68:	85 db                	test   ebx,ebx
c001bd6a:	74 32                	je     c001bd9e <sysCallMakeDir(regs*)+0x62>
c001bd6c:	83 ec 0c             	sub    esp,0xc
c001bd6f:	53                   	push   ebx
c001bd70:	e8 e5 7d ff ff       	call   c0013b5a <Directory::create()>
c001bd75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd78:	89 c6                	mov    esi,eax
c001bd7a:	e8 57 7c ff ff       	call   c00139d6 <Directory::close()>
c001bd7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	31 c0                	xor    eax,eax
c001bd8c:	59                   	pop    ecx
c001bd8d:	85 f6                	test   esi,esi
c001bd8f:	5b                   	pop    ebx
c001bd90:	0f 95 c0             	setne  al
c001bd93:	5e                   	pop    esi
c001bd94:	31 d2                	xor    edx,edx
c001bd96:	f7 d8                	neg    eax
c001bd98:	83 d2 00             	adc    edx,0x0
c001bd9b:	f7 da                	neg    edx
c001bd9d:	c3                   	ret    
c001bd9e:	59                   	pop    ecx
c001bd9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bda4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda9:	5b                   	pop    ebx
c001bdaa:	5e                   	pop    esi
c001bdab:	c3                   	ret    

c001bdac <sysCallWait(regs*)>:
c001bdac:	83 ec 10             	sub    esp,0x10
c001bdaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdb3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdb6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdb9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdbc:	e8 ce 24 00 00       	call   c001e28f <waitTask(int, int*, int)>
c001bdc1:	83 c4 1c             	add    esp,0x1c
c001bdc4:	99                   	cdq    
c001bdc5:	c3                   	ret    

c001bdc6 <sysCallNotImpl(regs*)>:
c001bdc6:	83 ec 18             	sub    esp,0x18
c001bdc9:	68 fa bf 02 c0       	push   0xc002bffa
c001bdce:	e8 e0 e7 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001bdd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bddd:	83 c4 1c             	add    esp,0x1c
c001bde0:	c3                   	ret    

c001bde1 <sysPanic(regs*)>:
c001bde1:	83 ec 18             	sub    esp,0x18
c001bde4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bde8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdeb:	e8 c3 e7 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001bdf0:	c7 04 24 14 c0 02 c0 	mov    DWORD PTR [esp],0xc002c014
c001bdf7:	e8 b7 e7 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001bdfc:	b8 01 00 00 00       	mov    eax,0x1
c001be01:	31 d2                	xor    edx,edx
c001be03:	83 c4 1c             	add    esp,0x1c
c001be06:	c3                   	ret    

c001be07 <sysCallRmdir(regs*)>:
c001be07:	56                   	push   esi
c001be08:	53                   	push   ebx
c001be09:	83 ec 20             	sub    esp,0x20
c001be0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be10:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be13:	68 14 01 00 00       	push   0x114
c001be18:	e8 23 3a ff ff       	call   c000f840 <malloc>
c001be1d:	83 c4 0c             	add    esp,0xc
c001be20:	89 c3                	mov    ebx,eax
c001be22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be27:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be2a:	56                   	push   esi
c001be2b:	53                   	push   ebx
c001be2c:	e8 39 76 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001be31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be34:	e8 0d 78 ff ff       	call   c0013646 <File::unlink()>
c001be39:	83 c4 10             	add    esp,0x10
c001be3c:	85 db                	test   ebx,ebx
c001be3e:	74 14                	je     c001be54 <sysCallRmdir(regs*)+0x4d>
c001be40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be44:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be46:	83 ec 0c             	sub    esp,0xc
c001be49:	53                   	push   ebx
c001be4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be54:	85 c0                	test   eax,eax
c001be56:	0f 95 c0             	setne  al
c001be59:	31 d2                	xor    edx,edx
c001be5b:	0f b6 c0             	movzx  eax,al
c001be5e:	f7 d8                	neg    eax
c001be60:	83 d2 00             	adc    edx,0x0
c001be63:	83 c4 14             	add    esp,0x14
c001be66:	f7 da                	neg    edx
c001be68:	5b                   	pop    ebx
c001be69:	5e                   	pop    esi
c001be6a:	c3                   	ret    

c001be6b <sysCallUnlink(regs*)>:
c001be6b:	56                   	push   esi
c001be6c:	53                   	push   ebx
c001be6d:	83 ec 20             	sub    esp,0x20
c001be70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be74:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be77:	68 14 01 00 00       	push   0x114
c001be7c:	e8 bf 39 ff ff       	call   c000f840 <malloc>
c001be81:	83 c4 0c             	add    esp,0xc
c001be84:	89 c3                	mov    ebx,eax
c001be86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be8e:	56                   	push   esi
c001be8f:	53                   	push   ebx
c001be90:	e8 d5 75 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001be95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be98:	e8 a9 77 ff ff       	call   c0013646 <File::unlink()>
c001be9d:	83 c4 10             	add    esp,0x10
c001bea0:	85 db                	test   ebx,ebx
c001bea2:	74 14                	je     c001beb8 <sysCallUnlink(regs*)+0x4d>
c001bea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bea8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beaa:	83 ec 0c             	sub    esp,0xc
c001bead:	53                   	push   ebx
c001beae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beb8:	85 c0                	test   eax,eax
c001beba:	0f 95 c0             	setne  al
c001bebd:	31 d2                	xor    edx,edx
c001bebf:	0f b6 c0             	movzx  eax,al
c001bec2:	f7 d8                	neg    eax
c001bec4:	83 d2 00             	adc    edx,0x0
c001bec7:	83 c4 14             	add    esp,0x14
c001beca:	f7 da                	neg    edx
c001becc:	5b                   	pop    ebx
c001becd:	5e                   	pop    esi
c001bece:	c3                   	ret    

c001becf <sysCallGetArgv(regs*)>:
c001becf:	83 ec 0c             	sub    esp,0xc
c001bed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bed6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bed9:	85 c0                	test   eax,eax
c001bedb:	78 2b                	js     c001bf08 <sysCallGetArgv(regs*)+0x39>
c001bedd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bee3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bee6:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001beec:	7d 1a                	jge    c001bf08 <sysCallGetArgv(regs*)+0x39>
c001beee:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bef5:	85 c0                	test   eax,eax
c001bef7:	74 17                	je     c001bf10 <sysCallGetArgv(regs*)+0x41>
c001bef9:	83 ec 08             	sub    esp,0x8
c001befc:	50                   	push   eax
c001befd:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf00:	e8 2f 49 fe ff       	call   c0000834 <strcpy>
c001bf05:	83 c4 10             	add    esp,0x10
c001bf08:	31 c0                	xor    eax,eax
c001bf0a:	31 d2                	xor    edx,edx
c001bf0c:	83 c4 0c             	add    esp,0xc
c001bf0f:	c3                   	ret    
c001bf10:	b8 01 00 00 00       	mov    eax,0x1
c001bf15:	31 d2                	xor    edx,edx
c001bf17:	83 c4 0c             	add    esp,0xc
c001bf1a:	c3                   	ret    

c001bf1b <sysCallTTYName(regs*)>:
c001bf1b:	56                   	push   esi
c001bf1c:	53                   	push   ebx
c001bf1d:	53                   	push   ebx
c001bf1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf22:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf25:	85 c0                	test   eax,eax
c001bf27:	74 5f                	je     c001bf88 <sysCallTTYName(regs*)+0x6d>
c001bf29:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf2c:	83 f8 02             	cmp    eax,0x2
c001bf2f:	77 3e                	ja     c001bf6f <sysCallTTYName(regs*)+0x54>
c001bf31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf39:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf3f:	85 db                	test   ebx,ebx
c001bf41:	74 45                	je     c001bf88 <sysCallTTYName(regs*)+0x6d>
c001bf43:	83 ec 0c             	sub    esp,0xc
c001bf46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf48:	53                   	push   ebx
c001bf49:	ff 10                	call   DWORD PTR [eax]
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	84 c0                	test   al,al
c001bf50:	74 41                	je     c001bf93 <sysCallTTYName(regs*)+0x78>
c001bf52:	83 ec 08             	sub    esp,0x8
c001bf55:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf5b:	53                   	push   ebx
c001bf5c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf5f:	e8 d0 48 fe ff       	call   c0000834 <strcpy>
c001bf64:	83 c4 10             	add    esp,0x10
c001bf67:	31 c0                	xor    eax,eax
c001bf69:	59                   	pop    ecx
c001bf6a:	31 d2                	xor    edx,edx
c001bf6c:	5b                   	pop    ebx
c001bf6d:	5e                   	pop    esi
c001bf6e:	c3                   	ret    
c001bf6f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf74:	74 bb                	je     c001bf31 <sysCallTTYName(regs*)+0x16>
c001bf76:	83 ec 0c             	sub    esp,0xc
c001bf79:	50                   	push   eax
c001bf7a:	e8 00 5b ff ff       	call   c0011a7f <getFromFileDescriptor(int)>
c001bf7f:	83 c4 10             	add    esp,0x10
c001bf82:	89 c3                	mov    ebx,eax
c001bf84:	85 db                	test   ebx,ebx
c001bf86:	75 bb                	jne    c001bf43 <sysCallTTYName(regs*)+0x28>
c001bf88:	59                   	pop    ecx
c001bf89:	b8 01 00 00 00       	mov    eax,0x1
c001bf8e:	31 d2                	xor    edx,edx
c001bf90:	5b                   	pop    ebx
c001bf91:	5e                   	pop    esi
c001bf92:	c3                   	ret    
c001bf93:	59                   	pop    ecx
c001bf94:	b8 02 00 00 00       	mov    eax,0x2
c001bf99:	31 d2                	xor    edx,edx
c001bf9b:	5b                   	pop    ebx
c001bf9c:	5e                   	pop    esi
c001bf9d:	c3                   	ret    

c001bf9e <sysCallUSleep(regs*)>:
c001bf9e:	83 ec 14             	sub    esp,0x14
c001bfa1:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfa6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfaa:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfb1:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfb4:	01 ca                	add    edx,ecx
c001bfb6:	52                   	push   edx
c001bfb7:	50                   	push   eax
c001bfb8:	e8 6b 23 00 00       	call   c001e328 <nanoSleep(unsigned long long)>
c001bfbd:	31 c0                	xor    eax,eax
c001bfbf:	31 d2                	xor    edx,edx
c001bfc1:	83 c4 1c             	add    esp,0x1c
c001bfc4:	c3                   	ret    

c001bfc5 <sysCallSpawn(regs*)>:
c001bfc5:	56                   	push   esi
c001bfc6:	53                   	push   ebx
c001bfc7:	53                   	push   ebx
c001bfc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfcc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfcf:	85 f6                	test   esi,esi
c001bfd1:	75 08                	jne    c001bfdb <sysCallSpawn(regs*)+0x16>
c001bfd3:	59                   	pop    ecx
c001bfd4:	31 c0                	xor    eax,eax
c001bfd6:	31 d2                	xor    edx,edx
c001bfd8:	5b                   	pop    ebx
c001bfd9:	5e                   	pop    esi
c001bfda:	c3                   	ret    
c001bfdb:	83 ec 0c             	sub    esp,0xc
c001bfde:	68 3f 07 00 00       	push   0x73f
c001bfe3:	e8 58 38 ff ff       	call   c000f840 <malloc>
c001bfe8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfeb:	89 c6                	mov    esi,eax
c001bfed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bff5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bff8:	56                   	push   esi
c001bff9:	e8 2a 1a 00 00       	call   c001da28 <Process::Process(char const*, Process*, char**)>
c001bffe:	83 c4 20             	add    esp,0x20
c001c001:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c008:	75 c9                	jne    c001bfd3 <sysCallSpawn(regs*)+0xe>
c001c00a:	83 ec 0c             	sub    esp,0xc
c001c00d:	56                   	push   esi
c001c00e:	e8 db 1f 00 00       	call   c001dfee <Process::createUserThread()>
c001c013:	8b 06                	mov    eax,DWORD PTR [esi]
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	99                   	cdq    
c001c019:	59                   	pop    ecx
c001c01a:	5b                   	pop    ebx
c001c01b:	5e                   	pop    esi
c001c01c:	c3                   	ret    

c001c01d <sysCallGetEnv(regs*)>:
c001c01d:	55                   	push   ebp
c001c01e:	57                   	push   edi
c001c01f:	56                   	push   esi
c001c020:	53                   	push   ebx
c001c021:	83 ec 28             	sub    esp,0x28
c001c024:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c028:	68 23 c0 02 c0       	push   0xc002c023
c001c02d:	e8 e0 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c032:	5f                   	pop    edi
c001c033:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c036:	5d                   	pop    ebp
c001c037:	53                   	push   ebx
c001c038:	68 52 c3 02 c0       	push   0xc002c352
c001c03d:	e8 d0 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c042:	58                   	pop    eax
c001c043:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c046:	5a                   	pop    edx
c001c047:	57                   	push   edi
c001c048:	68 2c c0 02 c0       	push   0xc002c02c
c001c04d:	e8 c0 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c052:	59                   	pop    ecx
c001c053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c058:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c05b:	e8 6f e4 ff ff       	call   c001a4cf <Krnl::getProcessTotalEnvCount(Process*)>
c001c060:	5a                   	pop    edx
c001c061:	89 c5                	mov    ebp,eax
c001c063:	59                   	pop    ecx
c001c064:	50                   	push   eax
c001c065:	68 36 c0 02 c0       	push   0xc002c036
c001c06a:	e8 a3 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c06f:	83 c4 10             	add    esp,0x10
c001c072:	39 ef                	cmp    edi,ebp
c001c074:	7c 15                	jl     c001c08b <sysCallGetEnv(regs*)+0x6e>
c001c076:	85 db                	test   ebx,ebx
c001c078:	75 0c                	jne    c001c086 <sysCallGetEnv(regs*)+0x69>
c001c07a:	83 c4 1c             	add    esp,0x1c
c001c07d:	31 c0                	xor    eax,eax
c001c07f:	5b                   	pop    ebx
c001c080:	31 d2                	xor    edx,edx
c001c082:	5e                   	pop    esi
c001c083:	5f                   	pop    edi
c001c084:	5d                   	pop    ebp
c001c085:	c3                   	ret    
c001c086:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c089:	eb ef                	jmp    c001c07a <sysCallGetEnv(regs*)+0x5d>
c001c08b:	83 ec 0c             	sub    esp,0xc
c001c08e:	68 42 c0 02 c0       	push   0xc002c042
c001c093:	e8 7a 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c098:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c09c:	83 c4 0c             	add    esp,0xc
c001c09f:	57                   	push   edi
c001c0a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0a6:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0a9:	50                   	push   eax
c001c0aa:	e8 40 e4 ff ff       	call   c001a4ef <Krnl::getProcessEnvPair(Process*, int)>
c001c0af:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0b7:	68 d1 c3 02 c0       	push   0xc002c3d1
c001c0bc:	e8 51 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c0c1:	83 c4 10             	add    esp,0x10
c001c0c4:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0c7:	85 f6                	test   esi,esi
c001c0c9:	75 47                	jne    c001c112 <sysCallGetEnv(regs*)+0xf5>
c001c0cb:	83 ec 0c             	sub    esp,0xc
c001c0ce:	55                   	push   ebp
c001c0cf:	e8 c0 46 fe ff       	call   c0000794 <strlen>
c001c0d4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0d7:	89 c3                	mov    ebx,eax
c001c0d9:	e8 b6 46 fe ff       	call   c0000794 <strlen>
c001c0de:	5a                   	pop    edx
c001c0df:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0e3:	59                   	pop    ecx
c001c0e4:	50                   	push   eax
c001c0e5:	68 45 c0 02 c0       	push   0xc002c045
c001c0ea:	e8 23 6e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c0ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0f2:	e8 9d 46 fe ff       	call   c0000794 <strlen>
c001c0f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0fa:	89 c3                	mov    ebx,eax
c001c0fc:	e8 93 46 fe ff       	call   c0000794 <strlen>
c001c101:	83 c4 10             	add    esp,0x10
c001c104:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c108:	83 c4 1c             	add    esp,0x1c
c001c10b:	31 d2                	xor    edx,edx
c001c10d:	5b                   	pop    ebx
c001c10e:	5e                   	pop    esi
c001c10f:	5f                   	pop    edi
c001c110:	5d                   	pop    ebp
c001c111:	c3                   	ret    
c001c112:	83 ec 0c             	sub    esp,0xc
c001c115:	68 eb c3 02 c0       	push   0xc002c3eb
c001c11a:	e8 f3 6d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c11f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c122:	58                   	pop    eax
c001c123:	5a                   	pop    edx
c001c124:	55                   	push   ebp
c001c125:	53                   	push   ebx
c001c126:	e8 09 47 fe ff       	call   c0000834 <strcpy>
c001c12b:	59                   	pop    ecx
c001c12c:	5e                   	pop    esi
c001c12d:	68 4f c0 02 c0       	push   0xc002c04f
c001c132:	53                   	push   ebx
c001c133:	e8 3c 48 fe ff       	call   c0000974 <strcat>
c001c138:	5d                   	pop    ebp
c001c139:	58                   	pop    eax
c001c13a:	57                   	push   edi
c001c13b:	53                   	push   ebx
c001c13c:	e8 33 48 fe ff       	call   c0000974 <strcat>
c001c141:	c7 04 24 05 c4 02 c0 	mov    DWORD PTR [esp],0xc002c405
c001c148:	e8 c5 6d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c14d:	83 c4 10             	add    esp,0x10
c001c150:	e9 25 ff ff ff       	jmp    c001c07a <sysCallGetEnv(regs*)+0x5d>

c001c155 <sysAppSettings(regs*)>:
c001c155:	53                   	push   ebx
c001c156:	83 ec 08             	sub    esp,0x8
c001c159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c160:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c166:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c16b:	66 3d c0 09          	cmp    ax,0x9c0
c001c16f:	75 2f                	jne    c001c1a0 <sysAppSettings(regs*)+0x4b>
c001c171:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c177:	83 e0 1f             	and    eax,0x1f
c001c17a:	3c 01                	cmp    al,0x1
c001c17c:	74 2e                	je     c001c1ac <sysAppSettings(regs*)+0x57>
c001c17e:	3c 07                	cmp    al,0x7
c001c180:	0f 84 bd 00 00 00    	je     c001c243 <sysAppSettings(regs*)+0xee>
c001c186:	84 c0                	test   al,al
c001c188:	0f 84 dc 00 00 00    	je     c001c26a <sysAppSettings(regs*)+0x115>
c001c18e:	3c 08                	cmp    al,0x8
c001c190:	74 6d                	je     c001c1ff <sysAppSettings(regs*)+0xaa>
c001c192:	0f b6 c0             	movzx  eax,al
c001c195:	83 c4 08             	add    esp,0x8
c001c198:	05 e8 03 00 00       	add    eax,0x3e8
c001c19d:	5b                   	pop    ebx
c001c19e:	99                   	cdq    
c001c19f:	c3                   	ret    
c001c1a0:	b8 01 00 00 00       	mov    eax,0x1
c001c1a5:	31 d2                	xor    edx,edx
c001c1a7:	83 c4 08             	add    esp,0x8
c001c1aa:	5b                   	pop    ebx
c001c1ab:	c3                   	ret    
c001c1ac:	51                   	push   ecx
c001c1ad:	68 00 01 00 00       	push   0x100
c001c1b2:	6a 00                	push   0x0
c001c1b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1bc:	83 c0 0c             	add    eax,0xc
c001c1bf:	50                   	push   eax
c001c1c0:	e8 b3 45 fe ff       	call   c0000778 <memset>
c001c1c5:	83 c4 0c             	add    esp,0xc
c001c1c8:	68 ff 00 00 00       	push   0xff
c001c1cd:	53                   	push   ebx
c001c1ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d6:	83 c0 0c             	add    eax,0xc
c001c1d9:	50                   	push   eax
c001c1da:	e8 65 45 fe ff       	call   c0000744 <memcpy>
c001c1df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e4:	5b                   	pop    ebx
c001c1e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e8:	5a                   	pop    edx
c001c1e9:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1ec:	52                   	push   edx
c001c1ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1f3:	e8 02 4a ff ff       	call   c0010bfa <VgaText::setTitle(char*)>
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	31 c0                	xor    eax,eax
c001c1fd:	eb a6                	jmp    c001c1a5 <sysAppSettings(regs*)+0x50>
c001c1ff:	83 ec 08             	sub    esp,0x8
c001c202:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c208:	83 e0 0f             	and    eax,0xf
c001c20b:	50                   	push   eax
c001c20c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c211:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c214:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c21a:	e8 cb 49 ff ff       	call   c0010bea <VgaText::setTitleColour(VgaColour)>
c001c21f:	58                   	pop    eax
c001c220:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c226:	5a                   	pop    edx
c001c227:	c1 e8 04             	shr    eax,0x4
c001c22a:	83 e0 0f             	and    eax,0xf
c001c22d:	50                   	push   eax
c001c22e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c233:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23c:	e8 99 49 ff ff       	call   c0010bda <VgaText::setTitleTextColour(VgaColour)>
c001c241:	eb b5                	jmp    c001c1f8 <sysAppSettings(regs*)+0xa3>
c001c243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c248:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c24b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c251:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c257:	c0 e8 06             	shr    al,0x6
c001c25a:	83 e0 01             	and    eax,0x1
c001c25d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c263:	31 c0                	xor    eax,eax
c001c265:	e9 3b ff ff ff       	jmp    c001c1a5 <sysAppSettings(regs*)+0x50>
c001c26a:	b8 02 00 00 00       	mov    eax,0x2
c001c26f:	e9 31 ff ff ff       	jmp    c001c1a5 <sysAppSettings(regs*)+0x50>

c001c274 <sysSetFatAttrib(regs*)>:
c001c274:	57                   	push   edi
c001c275:	56                   	push   esi
c001c276:	53                   	push   ebx
c001c277:	83 ec 1c             	sub    esp,0x1c
c001c27a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c27e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c281:	68 14 01 00 00       	push   0x114
c001c286:	e8 b5 35 ff ff       	call   c000f840 <malloc>
c001c28b:	83 c4 0c             	add    esp,0xc
c001c28e:	89 c3                	mov    ebx,eax
c001c290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c295:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c298:	57                   	push   edi
c001c299:	53                   	push   ebx
c001c29a:	e8 cb 71 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001c29f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2a2:	83 c4 0c             	add    esp,0xc
c001c2a5:	0f b6 d4             	movzx  edx,ah
c001c2a8:	0f b6 c0             	movzx  eax,al
c001c2ab:	52                   	push   edx
c001c2ac:	50                   	push   eax
c001c2ad:	53                   	push   ebx
c001c2ae:	e8 2d 74 ff ff       	call   c00136e0 <File::chfatattr(unsigned char, unsigned char)>
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	85 db                	test   ebx,ebx
c001c2b8:	74 14                	je     c001c2ce <sysSetFatAttrib(regs*)+0x5a>
c001c2ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2be:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2c0:	83 ec 0c             	sub    esp,0xc
c001c2c3:	53                   	push   ebx
c001c2c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2c7:	83 c4 10             	add    esp,0x10
c001c2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2ce:	85 c0                	test   eax,eax
c001c2d0:	0f 95 c0             	setne  al
c001c2d3:	31 d2                	xor    edx,edx
c001c2d5:	0f b6 c0             	movzx  eax,al
c001c2d8:	f7 d8                	neg    eax
c001c2da:	83 d2 00             	adc    edx,0x0
c001c2dd:	83 c4 10             	add    esp,0x10
c001c2e0:	f7 da                	neg    edx
c001c2e2:	5b                   	pop    ebx
c001c2e3:	5e                   	pop    esi
c001c2e4:	5f                   	pop    edi
c001c2e5:	c3                   	ret    

c001c2e6 <sysPipe(regs*)>:
c001c2e6:	57                   	push   edi
c001c2e7:	56                   	push   esi
c001c2e8:	53                   	push   ebx
c001c2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ed:	83 ec 0c             	sub    esp,0xc
c001c2f0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2f3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2f6:	6a 20                	push   0x20
c001c2f8:	e8 43 35 ff ff       	call   c000f840 <malloc>
c001c2fd:	89 c3                	mov    ebx,eax
c001c2ff:	58                   	pop    eax
c001c300:	5a                   	pop    edx
c001c301:	68 00 50 00 00       	push   0x5000
c001c306:	53                   	push   ebx
c001c307:	e8 1e 42 ff ff       	call   c001052a <Pipe::Pipe(int)>
c001c30c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c30f:	e8 76 54 ff ff       	call   c001178a <UnixFile::getFileDescriptor()>
c001c314:	89 07                	mov    DWORD PTR [edi],eax
c001c316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c319:	e8 6c 54 ff ff       	call   c001178a <UnixFile::getFileDescriptor()>
c001c31e:	83 c4 10             	add    esp,0x10
c001c321:	89 06                	mov    DWORD PTR [esi],eax
c001c323:	31 d2                	xor    edx,edx
c001c325:	5b                   	pop    ebx
c001c326:	31 c0                	xor    eax,eax
c001c328:	5e                   	pop    esi
c001c329:	5f                   	pop    edi
c001c32a:	c3                   	ret    

c001c32b <sysGetUnixTime(regs*)>:
c001c32b:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001c330:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c336:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c33a:	e9 15 7b ff ff       	jmp    c0013e54 <Clock::timeInSecondsLocal()>

c001c33f <string_ends_with(char const*, char const*)>:
c001c33f:	57                   	push   edi
c001c340:	56                   	push   esi
c001c341:	53                   	push   ebx
c001c342:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c346:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c34a:	83 ec 0c             	sub    esp,0xc
c001c34d:	53                   	push   ebx
c001c34e:	e8 41 44 fe ff       	call   c0000794 <strlen>
c001c353:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c356:	89 c6                	mov    esi,eax
c001c358:	e8 37 44 fe ff       	call   c0000794 <strlen>
c001c35d:	83 c4 10             	add    esp,0x10
c001c360:	39 c6                	cmp    esi,eax
c001c362:	7d 06                	jge    c001c36a <string_ends_with(char const*, char const*)+0x2b>
c001c364:	5b                   	pop    ebx
c001c365:	31 c0                	xor    eax,eax
c001c367:	5e                   	pop    esi
c001c368:	5f                   	pop    edi
c001c369:	c3                   	ret    
c001c36a:	83 ec 08             	sub    esp,0x8
c001c36d:	29 c6                	sub    esi,eax
c001c36f:	57                   	push   edi
c001c370:	01 f3                	add    ebx,esi
c001c372:	53                   	push   ebx
c001c373:	e8 48 45 fe ff       	call   c00008c0 <strcmp>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	85 c0                	test   eax,eax
c001c37d:	5b                   	pop    ebx
c001c37e:	0f 94 c0             	sete   al
c001c381:	5e                   	pop    esi
c001c382:	0f b6 c0             	movzx  eax,al
c001c385:	5f                   	pop    edi
c001c386:	c3                   	ret    

c001c387 <sysCallOpen(regs*)>:
c001c387:	56                   	push   esi
c001c388:	53                   	push   ebx
c001c389:	81 ec 04 01 00 00    	sub    esp,0x104
c001c38f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c396:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c399:	85 c9                	test   ecx,ecx
c001c39b:	0f 84 b3 00 00 00    	je     c001c454 <sysCallOpen(regs*)+0xcd>
c001c3a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3a4:	85 c0                	test   eax,eax
c001c3a6:	0f 84 a8 00 00 00    	je     c001c454 <sysCallOpen(regs*)+0xcd>
c001c3ac:	52                   	push   edx
c001c3ad:	68 51 c0 02 c0       	push   0xc002c051
c001c3b2:	50                   	push   eax
c001c3b3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3b7:	56                   	push   esi
c001c3b8:	e8 03 6f ff ff       	call   c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3bd:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3c0:	e8 cf 43 fe ff       	call   c0000794 <strlen>
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	48                   	dec    eax
c001c3c9:	74 1d                	je     c001c3e8 <sysCallOpen(regs*)+0x61>
c001c3cb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3ce:	eb 0f                	jmp    c001c3df <sysCallOpen(regs*)+0x58>
c001c3d0:	80 fa 3a             	cmp    dl,0x3a
c001c3d3:	74 0f                	je     c001c3e4 <sysCallOpen(regs*)+0x5d>
c001c3d5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3d9:	48                   	dec    eax
c001c3da:	74 0c                	je     c001c3e8 <sysCallOpen(regs*)+0x61>
c001c3dc:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3df:	80 fa 2e             	cmp    dl,0x2e
c001c3e2:	75 ec                	jne    c001c3d0 <sysCallOpen(regs*)+0x49>
c001c3e4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3e8:	83 ec 08             	sub    esp,0x8
c001c3eb:	68 55 c0 02 c0       	push   0xc002c055
c001c3f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3f3:	e8 47 ff ff ff       	call   c001c33f <string_ends_with(char const*, char const*)>
c001c3f8:	83 c4 10             	add    esp,0x10
c001c3fb:	85 c0                	test   eax,eax
c001c3fd:	75 17                	jne    c001c416 <sysCallOpen(regs*)+0x8f>
c001c3ff:	83 ec 08             	sub    esp,0x8
c001c402:	68 76 c0 02 c0       	push   0xc002c076
c001c407:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40a:	e8 30 ff ff ff       	call   c001c33f <string_ends_with(char const*, char const*)>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	85 c0                	test   eax,eax
c001c414:	74 51                	je     c001c467 <sysCallOpen(regs*)+0xe0>
c001c416:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c419:	83 ec 08             	sub    esp,0x8
c001c41c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c422:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c429:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c42c:	ff 30                	push   DWORD PTR [eax]
c001c42e:	68 5a c0 02 c0       	push   0xc002c05a
c001c433:	e8 da 6a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c438:	c7 04 24 69 c0 02 c0 	mov    DWORD PTR [esp],0xc002c069
c001c43f:	e8 ce 6a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	81 c4 04 01 00 00    	add    esp,0x104
c001c44d:	31 c0                	xor    eax,eax
c001c44f:	31 d2                	xor    edx,edx
c001c451:	5b                   	pop    ebx
c001c452:	5e                   	pop    esi
c001c453:	c3                   	ret    
c001c454:	81 c4 04 01 00 00    	add    esp,0x104
c001c45a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c45f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c464:	5b                   	pop    ebx
c001c465:	5e                   	pop    esi
c001c466:	c3                   	ret    
c001c467:	83 ec 08             	sub    esp,0x8
c001c46a:	68 56 c0 02 c0       	push   0xc002c056
c001c46f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c472:	e8 49 44 fe ff       	call   c00008c0 <strcmp>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	85 c0                	test   eax,eax
c001c47c:	74 98                	je     c001c416 <sysCallOpen(regs*)+0x8f>
c001c47e:	83 ec 08             	sub    esp,0x8
c001c481:	68 55 c0 02 c0       	push   0xc002c055
c001c486:	56                   	push   esi
c001c487:	e8 b3 fe ff ff       	call   c001c33f <string_ends_with(char const*, char const*)>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	85 c0                	test   eax,eax
c001c491:	75 83                	jne    c001c416 <sysCallOpen(regs*)+0x8f>
c001c493:	83 ec 08             	sub    esp,0x8
c001c496:	68 7b c0 02 c0       	push   0xc002c07b
c001c49b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c49e:	e8 9c fe ff ff       	call   c001c33f <string_ends_with(char const*, char const*)>
c001c4a3:	83 c4 10             	add    esp,0x10
c001c4a6:	85 c0                	test   eax,eax
c001c4a8:	0f 85 d9 00 00 00    	jne    c001c587 <sysCallOpen(regs*)+0x200>
c001c4ae:	83 ec 08             	sub    esp,0x8
c001c4b1:	68 80 c0 02 c0       	push   0xc002c080
c001c4b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4b9:	e8 81 fe ff ff       	call   c001c33f <string_ends_with(char const*, char const*)>
c001c4be:	83 c4 10             	add    esp,0x10
c001c4c1:	85 c0                	test   eax,eax
c001c4c3:	0f 85 be 00 00 00    	jne    c001c587 <sysCallOpen(regs*)+0x200>
c001c4c9:	83 ec 08             	sub    esp,0x8
c001c4cc:	68 7c c0 02 c0       	push   0xc002c07c
c001c4d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d4:	e8 e7 43 fe ff       	call   c00008c0 <strcmp>
c001c4d9:	83 c4 10             	add    esp,0x10
c001c4dc:	85 c0                	test   eax,eax
c001c4de:	0f 84 a3 00 00 00    	je     c001c587 <sysCallOpen(regs*)+0x200>
c001c4e4:	83 ec 08             	sub    esp,0x8
c001c4e7:	68 7b c0 02 c0       	push   0xc002c07b
c001c4ec:	56                   	push   esi
c001c4ed:	e8 4d fe ff ff       	call   c001c33f <string_ends_with(char const*, char const*)>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	85 c0                	test   eax,eax
c001c4f7:	0f 85 8a 00 00 00    	jne    c001c587 <sysCallOpen(regs*)+0x200>
c001c4fd:	83 ec 0c             	sub    esp,0xc
c001c500:	68 14 01 00 00       	push   0x114
c001c505:	e8 36 33 ff ff       	call   c000f840 <malloc>
c001c50a:	83 c4 0c             	add    esp,0xc
c001c50d:	89 c6                	mov    esi,eax
c001c50f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c514:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c517:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c51a:	56                   	push   esi
c001c51b:	e8 4a 6f ff ff       	call   c001346a <File::File(char const*, Process*)>
c001c520:	83 c4 10             	add    esp,0x10
c001c523:	85 f6                	test   esi,esi
c001c525:	0f 84 29 ff ff ff    	je     c001c454 <sysCallOpen(regs*)+0xcd>
c001c52b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c52e:	0f b6 c2             	movzx  eax,dl
c001c531:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c534:	89 d0                	mov    eax,edx
c001c536:	83 e0 01             	and    eax,0x1
c001c539:	f6 c2 02             	test   dl,0x2
c001c53c:	74 03                	je     c001c541 <sysCallOpen(regs*)+0x1ba>
c001c53e:	83 c8 02             	or     eax,0x2
c001c541:	f6 c2 04             	test   dl,0x4
c001c544:	74 03                	je     c001c549 <sysCallOpen(regs*)+0x1c2>
c001c546:	83 c8 04             	or     eax,0x4
c001c549:	f6 c2 08             	test   dl,0x8
c001c54c:	74 03                	je     c001c551 <sysCallOpen(regs*)+0x1ca>
c001c54e:	83 c8 0a             	or     eax,0xa
c001c551:	83 e2 10             	and    edx,0x10
c001c554:	74 03                	je     c001c559 <sysCallOpen(regs*)+0x1d2>
c001c556:	83 c8 12             	or     eax,0x12
c001c559:	83 ec 08             	sub    esp,0x8
c001c55c:	50                   	push   eax
c001c55d:	56                   	push   esi
c001c55e:	e8 6b 6f ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001c563:	83 c4 10             	add    esp,0x10
c001c566:	85 c0                	test   eax,eax
c001c568:	0f 85 e6 fe ff ff    	jne    c001c454 <sysCallOpen(regs*)+0xcd>
c001c56e:	83 ec 0c             	sub    esp,0xc
c001c571:	56                   	push   esi
c001c572:	e8 13 52 ff ff       	call   c001178a <UnixFile::getFileDescriptor()>
c001c577:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c57a:	89 02                	mov    DWORD PTR [edx],eax
c001c57c:	c1 f8 1f             	sar    eax,0x1f
c001c57f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c582:	e9 bd fe ff ff       	jmp    c001c444 <sysCallOpen(regs*)+0xbd>
c001c587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c58a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c590:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c597:	e9 ab fe ff ff       	jmp    c001c447 <sysCallOpen(regs*)+0xc0>

c001c59c <Sys::loadSyscalls()>:
c001c59c:	c7 05 00 11 03 c0 a9 b6 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001b6a9
c001c5a6:	c7 05 04 11 03 c0 48 b2 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001b248
c001c5b0:	c7 05 08 11 03 c0 b2 b3 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001b3b2
c001c5ba:	c7 05 0c 11 03 c0 df b5 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b5df
c001c5c4:	c7 05 10 11 03 c0 4a b3 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001b34a
c001c5ce:	c7 05 14 11 03 c0 7f b2 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001b27f
c001c5d8:	c7 05 18 11 03 c0 60 b2 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001b260
c001c5e2:	c7 05 1c 11 03 c0 51 b4 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001b451
c001c5ec:	c7 05 24 11 03 c0 d9 bb 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001bbd9
c001c5f6:	c7 05 20 11 03 c0 87 c3 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001c387
c001c600:	c7 05 28 11 03 c0 61 bc 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001bc61
c001c60a:	c7 05 2c 11 03 c0 c8 b8 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b8c8
c001c614:	c7 05 30 11 03 c0 e4 b6 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b6e4
c001c61e:	c7 05 34 11 03 c0 e9 b6 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b6e9
c001c628:	c7 05 38 11 03 c0 3c bd 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001bd3c
c001c632:	c7 05 3c 11 03 c0 d6 bc 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001bcd6
c001c63c:	c7 05 40 11 03 c0 b0 b9 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b9b0
c001c646:	c7 05 44 11 03 c0 19 ba 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001ba19
c001c650:	c7 05 48 11 03 c0 96 ba 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001ba96
c001c65a:	c7 05 4c 11 03 c0 ee b6 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b6ee
c001c664:	c7 05 50 11 03 c0 ac bd 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001bdac
c001c66e:	c7 05 54 11 03 c0 c6 bd 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001bdc6
c001c678:	c7 05 58 11 03 c0 c6 bd 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001bdc6
c001c682:	c7 05 5c 11 03 c0 07 be 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001be07
c001c68c:	c7 05 60 11 03 c0 6b be 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001be6b
c001c696:	c7 05 64 11 03 c0 9a b8 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001b89a
c001c6a0:	c7 05 68 11 03 c0 cf be 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001becf
c001c6aa:	c7 05 6c 11 03 c0 57 b8 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b857
c001c6b4:	c7 05 70 11 03 c0 1b bf 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001bf1b
c001c6be:	c7 05 74 11 03 c0 56 b9 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b956
c001c6c8:	c7 05 78 11 03 c0 9e bf 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001bf9e
c001c6d2:	c7 05 7c 11 03 c0 19 bb 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bb19
c001c6dc:	c7 05 80 11 03 c0 c5 bf 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001bfc5
c001c6e6:	c7 05 84 11 03 c0 1d c0 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001c01d
c001c6f0:	c7 05 88 11 03 c0 55 c1 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001c155
c001c6fa:	c7 05 8c 11 03 c0 f8 b6 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b6f8
c001c704:	c7 05 90 11 03 c0 62 b7 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b762
c001c70e:	c7 05 94 11 03 c0 a8 b7 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b7a8
c001c718:	c7 05 98 11 03 c0 74 c2 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001c274
c001c722:	c7 05 9c 11 03 c0 e1 bd 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bde1
c001c72c:	c7 05 a0 11 03 c0 f9 b7 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001b7f9
c001c736:	c7 05 a4 11 03 c0 e6 c2 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001c2e6
c001c740:	c7 05 a8 11 03 c0 2b c3 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001c32b
c001c74a:	c7 05 ac 11 03 c0 a2 b2 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b2a2
c001c754:	c7 05 b0 11 03 c0 6d b4 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001b46d
c001c75e:	c7 05 b4 11 03 c0 95 b5 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b595
c001c768:	c7 05 b8 11 03 c0 12 b2 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001b212
c001c772:	c7 05 bc 11 03 c0 47 b6 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001b647
c001c77c:	c7 05 c0 11 03 c0 8b b2 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b28b
c001c786:	c3                   	ret    

c001c787 <Sys::systemCall(regs*, void*)>:
c001c787:	53                   	push   ebx
c001c788:	83 ec 08             	sub    esp,0x8
c001c78b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c78f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c792:	83 f8 7f             	cmp    eax,0x7f
c001c795:	77 16                	ja     c001c7ad <Sys::systemCall(regs*, void*)+0x26>
c001c797:	8b 14 85 00 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef00]
c001c79e:	85 d2                	test   edx,edx
c001c7a0:	74 0b                	je     c001c7ad <Sys::systemCall(regs*, void*)+0x26>
c001c7a2:	83 ec 0c             	sub    esp,0xc
c001c7a5:	53                   	push   ebx
c001c7a6:	ff d2                	call   edx
c001c7a8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7ab:	eb 0d                	jmp    c001c7ba <Sys::systemCall(regs*, void*)+0x33>
c001c7ad:	52                   	push   edx
c001c7ae:	52                   	push   edx
c001c7af:	50                   	push   eax
c001c7b0:	68 85 c0 02 c0       	push   0xc002c085
c001c7b5:	e8 58 67 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c7ba:	83 c4 10             	add    esp,0x10
c001c7bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7c2:	31 d2                	xor    edx,edx
c001c7c4:	83 c4 08             	add    esp,0x8
c001c7c7:	5b                   	pop    ebx
c001c7c8:	c3                   	ret    

c001c7c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7c9:	55                   	push   ebp
c001c7ca:	57                   	push   edi
c001c7cb:	56                   	push   esi
c001c7cc:	53                   	push   ebx
c001c7cd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7d3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7da:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7e1:	85 c0                	test   eax,eax
c001c7e3:	0f 95 c1             	setne  cl
c001c7e6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7ee:	0f 94 c2             	sete   dl
c001c7f1:	84 d1                	test   cl,dl
c001c7f3:	74 23                	je     c001c818 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7f5:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7fb:	74 1b                	je     c001c818 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c803:	89 da                	mov    edx,ebx
c001c805:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c80b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c811:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c818:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c81f:	05 ff 0f 00 00       	add    eax,0xfff
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c82b:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c831:	c1 e8 0c             	shr    eax,0xc
c001c834:	89 ef                	mov    edi,ebp
c001c836:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c83a:	c1 ef 0c             	shr    edi,0xc
c001c83d:	6a 01                	push   0x1
c001c83f:	e8 91 53 ff ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c001c844:	89 c6                	mov    esi,eax
c001c846:	58                   	pop    eax
c001c847:	5a                   	pop    edx
c001c848:	57                   	push   edi
c001c849:	68 0b c1 02 c0       	push   0xc002c10b
c001c84e:	e8 bf 66 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c853:	59                   	pop    ecx
c001c854:	58                   	pop    eax
c001c855:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c859:	68 1d c1 02 c0       	push   0xc002c11d
c001c85e:	e8 af 66 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c86c:	0f 86 24 01 00 00    	jbe    c001c996 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c872:	c1 e7 0c             	shl    edi,0xc
c001c875:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c878:	89 df                	mov    edi,ebx
c001c87a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c87e:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c885:	01 dd                	add    ebp,ebx
c001c887:	29 fd                	sub    ebp,edi
c001c889:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c88d:	0f 84 01 01 00 00    	je     c001c994 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c893:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c899:	76 05                	jbe    c001c8a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c89b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8a0:	83 ec 0c             	sub    esp,0xc
c001c8a3:	31 d2                	xor    edx,edx
c001c8a5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8b2:	50                   	push   eax
c001c8b3:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8b7:	50                   	push   eax
c001c8b8:	52                   	push   edx
c001c8b9:	55                   	push   ebp
c001c8ba:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8c4:	83 c4 20             	add    esp,0x20
c001c8c7:	85 c0                	test   eax,eax
c001c8c9:	74 0a                	je     c001c8d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8cb:	53                   	push   ebx
c001c8cc:	53                   	push   ebx
c001c8cd:	50                   	push   eax
c001c8ce:	68 2f c1 02 c0       	push   0xc002c12f
c001c8d3:	eb 0f                	jmp    c001c8e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8d5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8d9:	74 20                	je     c001c8fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8db:	51                   	push   ecx
c001c8dc:	51                   	push   ecx
c001c8dd:	6a 00                	push   0x0
c001c8df:	68 5a c1 02 c0       	push   0xc002c15a
c001c8e4:	e8 29 66 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001c8e9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8ec:	e8 22 57 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8f1:	83 c4 10             	add    esp,0x10
c001c8f4:	31 c0                	xor    eax,eax
c001c8f6:	e9 55 01 00 00       	jmp    c001ca50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8fb:	e8 d8 14 00 00       	call   c001ddd8 <lockScheduler()>
c001c900:	e8 dd 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c905:	6a 07                	push   0x7
c001c907:	89 c5                	mov    ebp,eax
c001c909:	56                   	push   esi
c001c90a:	50                   	push   eax
c001c90b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c910:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c913:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c919:	e8 5c 5a ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c91e:	83 c4 0c             	add    esp,0xc
c001c921:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c928:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c92e:	6a 00                	push   0x0
c001c930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c935:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c938:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c93e:	e8 a1 58 ff ff       	call   c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c943:	58                   	pop    eax
c001c944:	5a                   	pop    edx
c001c945:	68 07 0c 00 00       	push   0xc07
c001c94a:	57                   	push   edi
c001c94b:	81 c7 00 10 00 00    	add    edi,0x1000
c001c951:	55                   	push   ebp
c001c952:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c959:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c95f:	6a 00                	push   0x0
c001c961:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c966:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c969:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c96f:	e8 c0 5d ff ff       	call   c0012734 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c974:	83 c4 1c             	add    esp,0x1c
c001c977:	68 00 10 00 00       	push   0x1000
c001c97c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c980:	50                   	push   eax
c001c981:	56                   	push   esi
c001c982:	e8 bd 3d fe ff       	call   c0000744 <memcpy>
c001c987:	e8 4e 14 00 00       	call   c001ddda <unlockScheduler()>
c001c98c:	83 c4 10             	add    esp,0x10
c001c98f:	e9 ea fe ff ff       	jmp    c001c87e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c994:	89 fb                	mov    ebx,edi
c001c996:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c99e:	0f 86 9e 00 00 00    	jbe    c001ca42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9a4:	e8 2f 14 00 00       	call   c001ddd8 <lockScheduler()>
c001c9a9:	51                   	push   ecx
c001c9aa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9b1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b7:	6a 00                	push   0x0
c001c9b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9c1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c7:	e8 18 58 ff ff       	call   c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9cc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9d0:	c1 e7 0c             	shl    edi,0xc
c001c9d3:	01 df                	add    edi,ebx
c001c9d5:	83 c4 10             	add    esp,0x10
c001c9d8:	39 fb                	cmp    ebx,edi
c001c9da:	74 61                	je     c001ca3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9dc:	e8 01 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9e1:	6a 07                	push   0x7
c001c9e3:	89 c5                	mov    ebp,eax
c001c9e5:	56                   	push   esi
c001c9e6:	50                   	push   eax
c001c9e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f5:	e8 80 59 ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9fa:	58                   	pop    eax
c001c9fb:	5a                   	pop    edx
c001c9fc:	68 07 0c 00 00       	push   0xc07
c001ca01:	53                   	push   ebx
c001ca02:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca08:	55                   	push   ebp
c001ca09:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca10:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca16:	6a 00                	push   0x0
c001ca18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca20:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca26:	e8 09 5d ff ff       	call   c0012734 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca2b:	83 c4 1c             	add    esp,0x1c
c001ca2e:	68 00 10 00 00       	push   0x1000
c001ca33:	6a 00                	push   0x0
c001ca35:	56                   	push   esi
c001ca36:	e8 3d 3d fe ff       	call   c0000778 <memset>
c001ca3b:	eb 98                	jmp    c001c9d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca3d:	e8 98 13 00 00       	call   c001ddda <unlockScheduler()>
c001ca42:	83 ec 0c             	sub    esp,0xc
c001ca45:	56                   	push   esi
c001ca46:	e8 c8 55 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca4b:	83 c4 10             	add    esp,0x10
c001ca4e:	b0 01                	mov    al,0x1
c001ca50:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca56:	5b                   	pop    ebx
c001ca57:	5e                   	pop    esi
c001ca58:	5f                   	pop    edi
c001ca59:	5d                   	pop    ebp
c001ca5a:	c3                   	ret    

c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca5b:	55                   	push   ebp
c001ca5c:	57                   	push   edi
c001ca5d:	56                   	push   esi
c001ca5e:	53                   	push   ebx
c001ca5f:	83 ec 48             	sub    esp,0x48
c001ca62:	68 14 01 00 00       	push   0x114
c001ca67:	e8 d4 2d ff ff       	call   c000f840 <malloc>
c001ca6c:	83 c4 0c             	add    esp,0xc
c001ca6f:	89 c6                	mov    esi,eax
c001ca71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca75:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca79:	50                   	push   eax
c001ca7a:	e8 eb 69 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001ca7f:	58                   	pop    eax
c001ca80:	5a                   	pop    edx
c001ca81:	6a 01                	push   0x1
c001ca83:	56                   	push   esi
c001ca84:	e8 45 6a ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	85 c0                	test   eax,eax
c001ca8e:	0f 85 47 01 00 00    	jne    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca94:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca9c:	83 ec 0c             	sub    esp,0xc
c001ca9f:	6a 34                	push   0x34
c001caa1:	e8 9a 2d ff ff       	call   c000f840 <malloc>
c001caa6:	89 c3                	mov    ebx,eax
c001caa8:	58                   	pop    eax
c001caa9:	8b 06                	mov    eax,DWORD PTR [esi]
c001caab:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caaf:	57                   	push   edi
c001cab0:	53                   	push   ebx
c001cab1:	6a 00                	push   0x0
c001cab3:	6a 34                	push   0x34
c001cab5:	56                   	push   esi
c001cab6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cab9:	83 c4 20             	add    esp,0x20
c001cabc:	85 c0                	test   eax,eax
c001cabe:	0f 85 17 01 00 00    	jne    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001caca:	0f 85 0b 01 00 00    	jne    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cad0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cad3:	85 c0                	test   eax,eax
c001cad5:	0f 84 00 01 00 00    	je     c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cadb:	31 d2                	xor    edx,edx
c001cadd:	55                   	push   ebp
c001cade:	52                   	push   edx
c001cadf:	50                   	push   eax
c001cae0:	56                   	push   esi
c001cae1:	e8 a6 6a ff ff       	call   c001358c <File::seek(unsigned long long)>
c001cae6:	83 c4 10             	add    esp,0x10
c001cae9:	85 c0                	test   eax,eax
c001caeb:	0f 85 ea 00 00 00    	jne    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf1:	83 ec 0c             	sub    esp,0xc
c001caf4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caf7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cafb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001caff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb03:	0f af c2             	imul   eax,edx
c001cb06:	50                   	push   eax
c001cb07:	e8 34 2d ff ff       	call   c000f840 <malloc>
c001cb0c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb12:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb19:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb1d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb21:	0f af c2             	imul   eax,edx
c001cb24:	99                   	cdq    
c001cb25:	52                   	push   edx
c001cb26:	50                   	push   eax
c001cb27:	56                   	push   esi
c001cb28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb2b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb2e:	83 c4 20             	add    esp,0x20
c001cb31:	85 c0                	test   eax,eax
c001cb33:	0f 84 a2 00 00 00    	je     c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb39:	31 d2                	xor    edx,edx
c001cb3b:	51                   	push   ecx
c001cb3c:	52                   	push   edx
c001cb3d:	50                   	push   eax
c001cb3e:	56                   	push   esi
c001cb3f:	e8 48 6a ff ff       	call   c001358c <File::seek(unsigned long long)>
c001cb44:	83 c4 10             	add    esp,0x10
c001cb47:	85 c0                	test   eax,eax
c001cb49:	0f 85 8c 00 00 00    	jne    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb56:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb5a:	31 ed                	xor    ebp,ebp
c001cb5c:	0f af c2             	imul   eax,edx
c001cb5f:	50                   	push   eax
c001cb60:	e8 db 2c ff ff       	call   c000f840 <malloc>
c001cb65:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb72:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb76:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb7a:	0f af c2             	imul   eax,edx
c001cb7d:	99                   	cdq    
c001cb7e:	52                   	push   edx
c001cb7f:	50                   	push   eax
c001cb80:	56                   	push   esi
c001cb81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb84:	83 c4 20             	add    esp,0x20
c001cb87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb8f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb93:	0f 86 80 00 00 00    	jbe    c001cc19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb99:	0f b7 fd             	movzx  edi,bp
c001cb9c:	c1 e7 05             	shl    edi,0x5
c001cb9f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cba3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cba6:	75 6b                	jne    c001cc13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cba8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbaf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbb6:	52                   	push   edx
c001cbb7:	31 d2                	xor    edx,edx
c001cbb9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbbc:	52                   	push   edx
c001cbbd:	50                   	push   eax
c001cbbe:	56                   	push   esi
c001cbbf:	e8 c8 69 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001cbc4:	83 c4 10             	add    esp,0x10
c001cbc7:	85 c0                	test   eax,eax
c001cbc9:	74 17                	je     c001cbe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	68 86 c1 02 c0       	push   0xc002c186
c001cbd3:	e8 3a 63 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001cbd8:	83 c4 10             	add    esp,0x10
c001cbdb:	31 c0                	xor    eax,eax
c001cbdd:	e9 87 00 00 00       	jmp    c001cc69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbe2:	83 ec 0c             	sub    esp,0xc
c001cbe5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbe8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbeb:	50                   	push   eax
c001cbec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbf4:	56                   	push   esi
c001cbf5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbf9:	e8 cb fb ff ff       	call   c001c7c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc02:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc06:	83 c4 20             	add    esp,0x20
c001cc09:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc0d:	73 04                	jae    c001cc13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc13:	45                   	inc    ebp
c001cc14:	e9 76 ff ff ff       	jmp    c001cb8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc19:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc25:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc2b:	83 ec 0c             	sub    esp,0xc
c001cc2e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc34:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc39:	05 00 10 00 00       	add    eax,0x1000
c001cc3e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc45:	e8 06 2c ff ff       	call   c000f850 <free>
c001cc4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc4d:	e8 fe 2b ff ff       	call   c000f850 <free>
c001cc52:	58                   	pop    eax
c001cc53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc57:	e8 f4 2b ff ff       	call   c000f850 <free>
c001cc5c:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc5f:	e8 c8 68 ff ff       	call   c001352c <File::close()>
c001cc64:	83 c4 10             	add    esp,0x10
c001cc67:	b0 01                	mov    al,0x1
c001cc69:	83 c4 3c             	add    esp,0x3c
c001cc6c:	5b                   	pop    ebx
c001cc6d:	5e                   	pop    esi
c001cc6e:	5f                   	pop    edi
c001cc6f:	5d                   	pop    ebp
c001cc70:	c3                   	ret    

c001cc71 <Thr::runtimeReferenceHelper()>:
c001cc71:	83 ec 18             	sub    esp,0x18
c001cc74:	68 8e c1 02 c0       	push   0xc002c18e
c001cc79:	e8 94 62 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001cc7e:	fa                   	cli    
c001cc7f:	83 c4 10             	add    esp,0x10
c001cc82:	eb fe                	jmp    c001cc82 <Thr::runtimeReferenceHelper()+0x11>

c001cc84 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc84:	57                   	push   edi
c001cc85:	56                   	push   esi
c001cc86:	53                   	push   ebx
c001cc87:	31 db                	xor    ebx,ebx
c001cc89:	39 1d a0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031aa0,ebx
c001cc8f:	7e 3c                	jle    c001cccd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc91:	8b 34 9d 20 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5e0]
c001cc98:	31 ff                	xor    edi,edi
c001cc9a:	39 3c 9d 20 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6e0],edi
c001cca1:	7e 27                	jle    c001ccca <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cca3:	50                   	push   eax
c001cca4:	50                   	push   eax
c001cca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cca9:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccab:	03 04 9d a0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce660]
c001ccb2:	50                   	push   eax
c001ccb3:	e8 08 3c fe ff       	call   c00008c0 <strcmp>
c001ccb8:	83 c4 10             	add    esp,0x10
c001ccbb:	85 c0                	test   eax,eax
c001ccbd:	75 05                	jne    c001ccc4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccbf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccc2:	eb 0b                	jmp    c001cccf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccc4:	83 c6 10             	add    esi,0x10
c001ccc7:	47                   	inc    edi
c001ccc8:	eb d0                	jmp    c001cc9a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccca:	43                   	inc    ebx
c001cccb:	eb bc                	jmp    c001cc89 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cccd:	31 c0                	xor    eax,eax
c001cccf:	5b                   	pop    ebx
c001ccd0:	5e                   	pop    esi
c001ccd1:	5f                   	pop    edi
c001ccd2:	c3                   	ret    

c001ccd3 <Thr::loadKernelSymbolTable(char const*)>:
c001ccd3:	55                   	push   ebp
c001ccd4:	57                   	push   edi
c001ccd5:	56                   	push   esi
c001ccd6:	53                   	push   ebx
c001ccd7:	83 ec 68             	sub    esp,0x68
c001ccda:	8b 35 f4 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031af4
c001cce0:	68 14 01 00 00       	push   0x114
c001cce5:	e8 56 2b ff ff       	call   c000f840 <malloc>
c001ccea:	83 c4 0c             	add    esp,0xc
c001cced:	89 c3                	mov    ebx,eax
c001ccef:	56                   	push   esi
c001ccf0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccf4:	50                   	push   eax
c001ccf5:	e8 70 67 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001ccfa:	5e                   	pop    esi
c001ccfb:	5f                   	pop    edi
c001ccfc:	6a 01                	push   0x1
c001ccfe:	53                   	push   ebx
c001ccff:	e8 ca 67 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	85 c0                	test   eax,eax
c001cd09:	74 0a                	je     c001cd15 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd0b:	83 ec 0c             	sub    esp,0xc
c001cd0e:	68 b0 c1 02 c0       	push   0xc002c1b0
c001cd13:	eb 34                	jmp    c001cd49 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd15:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd1d:	83 ec 0c             	sub    esp,0xc
c001cd20:	6a 34                	push   0x34
c001cd22:	e8 19 2b ff ff       	call   c000f840 <malloc>
c001cd27:	59                   	pop    ecx
c001cd28:	89 c7                	mov    edi,eax
c001cd2a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd30:	56                   	push   esi
c001cd31:	57                   	push   edi
c001cd32:	6a 00                	push   0x0
c001cd34:	6a 34                	push   0x34
c001cd36:	53                   	push   ebx
c001cd37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd3a:	83 c4 20             	add    esp,0x20
c001cd3d:	85 c0                	test   eax,eax
c001cd3f:	74 17                	je     c001cd58 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	68 c7 c1 02 c0       	push   0xc002c1c7
c001cd49:	e8 65 d8 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	31 c0                	xor    eax,eax
c001cd53:	e9 31 02 00 00       	jmp    c001cf89 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd58:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd5e:	75 e1                	jne    c001cd41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd60:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd63:	85 c0                	test   eax,eax
c001cd65:	74 da                	je     c001cd41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd67:	52                   	push   edx
c001cd68:	31 d2                	xor    edx,edx
c001cd6a:	52                   	push   edx
c001cd6b:	50                   	push   eax
c001cd6c:	53                   	push   ebx
c001cd6d:	e8 1a 68 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001cd72:	83 c4 10             	add    esp,0x10
c001cd75:	85 c0                	test   eax,eax
c001cd77:	75 c8                	jne    c001cd41 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd79:	83 ec 0c             	sub    esp,0xc
c001cd7c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd80:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd84:	31 ed                	xor    ebp,ebp
c001cd86:	0f af c2             	imul   eax,edx
c001cd89:	50                   	push   eax
c001cd8a:	e8 b1 2a ff ff       	call   c000f840 <malloc>
c001cd8f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd95:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd9c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cda0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cda4:	0f af c2             	imul   eax,edx
c001cda7:	99                   	cdq    
c001cda8:	52                   	push   edx
c001cda9:	50                   	push   eax
c001cdaa:	53                   	push   ebx
c001cdab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdae:	83 c4 20             	add    esp,0x20
c001cdb1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdb9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdc1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdc9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdd1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdd5:	0f 86 aa 00 00 00    	jbe    c001ce85 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cddb:	0f b7 f5             	movzx  esi,bp
c001cdde:	6b f6 28             	imul   esi,esi,0x28
c001cde1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cde5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cde8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdec:	50                   	push   eax
c001cded:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdf1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdf5:	8b 16                	mov    edx,DWORD PTR [esi]
c001cdf7:	6b c0 28             	imul   eax,eax,0x28
c001cdfa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cdfe:	89 d0                	mov    eax,edx
c001ce00:	31 d2                	xor    edx,edx
c001ce02:	52                   	push   edx
c001ce03:	50                   	push   eax
c001ce04:	53                   	push   ebx
c001ce05:	e8 82 67 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001ce0a:	83 c4 0c             	add    esp,0xc
c001ce0d:	6a 20                	push   0x20
c001ce0f:	6a 00                	push   0x0
c001ce11:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce15:	52                   	push   edx
c001ce16:	e8 5d 39 fe ff       	call   c0000778 <memset>
c001ce1b:	58                   	pop    eax
c001ce1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce1e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce22:	51                   	push   ecx
c001ce23:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce27:	52                   	push   edx
c001ce28:	6a 00                	push   0x0
c001ce2a:	6a 1f                	push   0x1f
c001ce2c:	53                   	push   ebx
c001ce2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce30:	83 c4 18             	add    esp,0x18
c001ce33:	68 de c1 02 c0       	push   0xc002c1de
c001ce38:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce3c:	52                   	push   edx
c001ce3d:	e8 7e 3a fe ff       	call   c00008c0 <strcmp>
c001ce42:	83 c4 10             	add    esp,0x10
c001ce45:	85 c0                	test   eax,eax
c001ce47:	75 0f                	jne    c001ce58 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce49:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce58:	50                   	push   eax
c001ce59:	50                   	push   eax
c001ce5a:	68 e6 c1 02 c0       	push   0xc002c1e6
c001ce5f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce63:	50                   	push   eax
c001ce64:	e8 57 3a fe ff       	call   c00008c0 <strcmp>
c001ce69:	83 c4 10             	add    esp,0x10
c001ce6c:	85 c0                	test   eax,eax
c001ce6e:	75 0f                	jne    c001ce7f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce7f:	45                   	inc    ebp
c001ce80:	e9 4c ff ff ff       	jmp    c001cdd1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce8a:	75 10                	jne    c001ce9c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce8c:	83 ec 0c             	sub    esp,0xc
c001ce8f:	68 ee c1 02 c0       	push   0xc002c1ee
c001ce94:	e8 1a d7 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cea1:	75 10                	jne    c001ceb3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cea3:	83 ec 0c             	sub    esp,0xc
c001cea6:	68 ee c1 02 c0       	push   0xc002c1ee
c001ceab:	e8 03 d7 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001ceb0:	83 c4 10             	add    esp,0x10
c001ceb3:	31 d2                	xor    edx,edx
c001ceb5:	50                   	push   eax
c001ceb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceba:	52                   	push   edx
c001cebb:	50                   	push   eax
c001cebc:	53                   	push   ebx
c001cebd:	e8 ca 66 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001cec2:	5a                   	pop    edx
c001cec3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cec7:	e8 74 29 ff ff       	call   c000f840 <malloc>
c001cecc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ced0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ced4:	31 c9                	xor    ecx,ecx
c001ced6:	5e                   	pop    esi
c001ced7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ced9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cedd:	55                   	push   ebp
c001cede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee2:	51                   	push   ecx
c001cee3:	52                   	push   edx
c001cee4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cee8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ceec:	53                   	push   ebx
c001ceed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cef0:	83 c4 14             	add    esp,0x14
c001cef3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cef7:	e8 44 29 ff ff       	call   c000f840 <malloc>
c001cefc:	89 c6                	mov    esi,eax
c001cefe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf03:	56                   	push   esi
c001cf04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf0c:	51                   	push   ecx
c001cf0d:	52                   	push   edx
c001cf0e:	53                   	push   ebx
c001cf0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf16:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c001cf1c:	83 c4 1c             	add    esp,0x1c
c001cf1f:	c1 e8 04             	shr    eax,0x4
c001cf22:	89 04 95 20 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6e0],eax
c001cf29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf2d:	31 d2                	xor    edx,edx
c001cf2f:	52                   	push   edx
c001cf30:	50                   	push   eax
c001cf31:	53                   	push   ebx
c001cf32:	e8 55 66 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001cf37:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf39:	31 d2                	xor    edx,edx
c001cf3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf3e:	56                   	push   esi
c001cf3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf43:	52                   	push   edx
c001cf44:	50                   	push   eax
c001cf45:	53                   	push   ebx
c001cf46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf49:	83 c4 14             	add    esp,0x14
c001cf4c:	53                   	push   ebx
c001cf4d:	e8 da 65 ff ff       	call   c001352c <File::close()>
c001cf52:	5d                   	pop    ebp
c001cf53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf57:	e8 f4 28 ff ff       	call   c000f850 <free>
c001cf5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf5f:	e8 ec 28 ff ff       	call   c000f850 <free>
c001cf64:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c001cf69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf6d:	8d 50 01             	lea    edx,[eax+0x1]
c001cf70:	89 0c 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],ecx
c001cf77:	89 34 85 a0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce660],esi
c001cf7e:	89 15 a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,edx
c001cf84:	83 c4 10             	add    esp,0x10
c001cf87:	b0 01                	mov    al,0x1
c001cf89:	83 c4 5c             	add    esp,0x5c
c001cf8c:	5b                   	pop    ebx
c001cf8d:	5e                   	pop    esi
c001cf8e:	5f                   	pop    edi
c001cf8f:	5d                   	pop    ebp
c001cf90:	c3                   	ret    

c001cf91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf91:	55                   	push   ebp
c001cf92:	57                   	push   edi
c001cf93:	56                   	push   esi
c001cf94:	53                   	push   ebx
c001cf95:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf9b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfa2:	8b 1d f4 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031af4
c001cfa8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfac:	68 14 01 00 00       	push   0x114
c001cfb1:	e8 8a 28 ff ff       	call   c000f840 <malloc>
c001cfb6:	83 c4 0c             	add    esp,0xc
c001cfb9:	89 c5                	mov    ebp,eax
c001cfbb:	53                   	push   ebx
c001cfbc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfc3:	50                   	push   eax
c001cfc4:	e8 a1 64 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001cfc9:	5e                   	pop    esi
c001cfca:	5f                   	pop    edi
c001cfcb:	6a 01                	push   0x1
c001cfcd:	55                   	push   ebp
c001cfce:	e8 fb 64 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	85 c0                	test   eax,eax
c001cfd8:	0f 85 8d 06 00 00    	jne    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfde:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfe6:	83 ec 0c             	sub    esp,0xc
c001cfe9:	6a 34                	push   0x34
c001cfeb:	e8 50 28 ff ff       	call   c000f840 <malloc>
c001cff0:	5b                   	pop    ebx
c001cff1:	89 c7                	mov    edi,eax
c001cff3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cffa:	53                   	push   ebx
c001cffb:	57                   	push   edi
c001cffc:	6a 00                	push   0x0
c001cffe:	6a 34                	push   0x34
c001d000:	55                   	push   ebp
c001d001:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d004:	83 c4 20             	add    esp,0x20
c001d007:	85 c0                	test   eax,eax
c001d009:	0f 85 5c 06 00 00    	jne    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d00f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d015:	0f 85 50 06 00 00    	jne    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d01b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d01e:	85 c0                	test   eax,eax
c001d020:	0f 84 45 06 00 00    	je     c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d026:	31 d2                	xor    edx,edx
c001d028:	51                   	push   ecx
c001d029:	52                   	push   edx
c001d02a:	50                   	push   eax
c001d02b:	55                   	push   ebp
c001d02c:	e8 5b 65 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d031:	83 c4 10             	add    esp,0x10
c001d034:	85 c0                	test   eax,eax
c001d036:	0f 85 2f 06 00 00    	jne    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03c:	83 ec 0c             	sub    esp,0xc
c001d03f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d042:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d046:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d04a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d04e:	0f af c2             	imul   eax,edx
c001d051:	50                   	push   eax
c001d052:	e8 e9 27 ff ff       	call   c000f840 <malloc>
c001d057:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d05a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d05e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d065:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d069:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d06d:	0f af c2             	imul   eax,edx
c001d070:	99                   	cdq    
c001d071:	52                   	push   edx
c001d072:	50                   	push   eax
c001d073:	55                   	push   ebp
c001d074:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d077:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d07a:	83 c4 20             	add    esp,0x20
c001d07d:	85 c0                	test   eax,eax
c001d07f:	0f 84 e6 05 00 00    	je     c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d085:	52                   	push   edx
c001d086:	31 d2                	xor    edx,edx
c001d088:	52                   	push   edx
c001d089:	50                   	push   eax
c001d08a:	55                   	push   ebp
c001d08b:	e8 fc 64 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d090:	83 c4 10             	add    esp,0x10
c001d093:	85 c0                	test   eax,eax
c001d095:	0f 85 d0 05 00 00    	jne    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d09b:	83 ec 0c             	sub    esp,0xc
c001d09e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0a2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0a6:	31 f6                	xor    esi,esi
c001d0a8:	0f af c2             	imul   eax,edx
c001d0ab:	50                   	push   eax
c001d0ac:	e8 8f 27 ff ff       	call   c000f840 <malloc>
c001d0b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0c7:	0f af c2             	imul   eax,edx
c001d0ca:	99                   	cdq    
c001d0cb:	52                   	push   edx
c001d0cc:	50                   	push   eax
c001d0cd:	55                   	push   ebp
c001d0ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d1:	83 c4 20             	add    esp,0x20
c001d0d4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0d8:	0f 86 8a 00 00 00    	jbe    c001d168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0de:	0f b7 de             	movzx  ebx,si
c001d0e1:	c1 e3 05             	shl    ebx,0x5
c001d0e4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0e8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0eb:	75 75                	jne    c001d162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0f0:	31 d2                	xor    edx,edx
c001d0f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0fd:	50                   	push   eax
c001d0fe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d101:	52                   	push   edx
c001d102:	50                   	push   eax
c001d103:	55                   	push   ebp
c001d104:	e8 83 64 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	85 c0                	test   eax,eax
c001d10e:	0f 85 57 05 00 00    	jne    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d114:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d11b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d11e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d122:	31 d2                	xor    edx,edx
c001d124:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d12f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d136:	50                   	push   eax
c001d137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d13b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13f:	52                   	push   edx
c001d140:	50                   	push   eax
c001d141:	55                   	push   ebp
c001d142:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d145:	83 c4 1c             	add    esp,0x1c
c001d148:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d14b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d14e:	50                   	push   eax
c001d14f:	6a 00                	push   0x0
c001d151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d155:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d159:	50                   	push   eax
c001d15a:	e8 19 36 fe ff       	call   c0000778 <memset>
c001d15f:	83 c4 10             	add    esp,0x10
c001d162:	46                   	inc    esi
c001d163:	e9 6c ff ff ff       	jmp    c001d0d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d168:	53                   	push   ebx
c001d169:	31 db                	xor    ebx,ebx
c001d16b:	68 00 01 00 00       	push   0x100
c001d170:	6a 00                	push   0x0
c001d172:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d176:	50                   	push   eax
c001d177:	e8 fc 35 fe ff       	call   c0000778 <memset>
c001d17c:	83 c4 0c             	add    esp,0xc
c001d17f:	68 00 01 00 00       	push   0x100
c001d184:	6a 00                	push   0x0
c001d186:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d18d:	50                   	push   eax
c001d18e:	e8 e5 35 fe ff       	call   c0000778 <memset>
c001d193:	83 c4 10             	add    esp,0x10
c001d196:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d19e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1a6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1be:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1c2:	0f 86 30 01 00 00    	jbe    c001d2f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1c8:	0f b7 f3             	movzx  esi,bx
c001d1cb:	6b f6 28             	imul   esi,esi,0x28
c001d1ce:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1d9:	52                   	push   edx
c001d1da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1de:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1e4:	6b d2 28             	imul   edx,edx,0x28
c001d1e7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1eb:	31 d2                	xor    edx,edx
c001d1ed:	52                   	push   edx
c001d1ee:	50                   	push   eax
c001d1ef:	55                   	push   ebp
c001d1f0:	e8 97 63 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d1f5:	83 c4 0c             	add    esp,0xc
c001d1f8:	6a 20                	push   0x20
c001d1fa:	6a 00                	push   0x0
c001d1fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d203:	51                   	push   ecx
c001d204:	e8 6f 35 fe ff       	call   c0000778 <memset>
c001d209:	59                   	pop    ecx
c001d20a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d20d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d211:	52                   	push   edx
c001d212:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d219:	51                   	push   ecx
c001d21a:	6a 00                	push   0x0
c001d21c:	6a 1f                	push   0x1f
c001d21e:	55                   	push   ebp
c001d21f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d222:	83 c4 1c             	add    esp,0x1c
c001d225:	6a 09                	push   0x9
c001d227:	68 08 c2 02 c0       	push   0xc002c208
c001d22c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d233:	51                   	push   ecx
c001d234:	e8 07 34 fe ff       	call   c0000640 <memcmp>
c001d239:	83 c4 10             	add    esp,0x10
c001d23c:	85 c0                	test   eax,eax
c001d23e:	75 21                	jne    c001d261 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d244:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d248:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d24c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d250:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d253:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d25a:	89 d0                	mov    eax,edx
c001d25c:	40                   	inc    eax
c001d25d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d261:	50                   	push   eax
c001d262:	6a 09                	push   0x9
c001d264:	68 12 c2 02 c0       	push   0xc002c212
c001d269:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d270:	50                   	push   eax
c001d271:	e8 ca 33 fe ff       	call   c0000640 <memcmp>
c001d276:	83 c4 10             	add    esp,0x10
c001d279:	85 c0                	test   eax,eax
c001d27b:	75 21                	jne    c001d29e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d27d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d281:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d285:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d289:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d28d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d290:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d297:	89 d0                	mov    eax,edx
c001d299:	40                   	inc    eax
c001d29a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d29e:	50                   	push   eax
c001d29f:	50                   	push   eax
c001d2a0:	68 de c1 02 c0       	push   0xc002c1de
c001d2a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ac:	50                   	push   eax
c001d2ad:	e8 0e 36 fe ff       	call   c00008c0 <strcmp>
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	85 c0                	test   eax,eax
c001d2b7:	75 0f                	jne    c001d2c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2c8:	50                   	push   eax
c001d2c9:	50                   	push   eax
c001d2ca:	68 e6 c1 02 c0       	push   0xc002c1e6
c001d2cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d6:	50                   	push   eax
c001d2d7:	e8 e4 35 fe ff       	call   c00008c0 <strcmp>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	85 c0                	test   eax,eax
c001d2e1:	75 0f                	jne    c001d2f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2f2:	43                   	inc    ebx
c001d2f3:	e9 c6 fe ff ff       	jmp    c001d1be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2f8:	31 d2                	xor    edx,edx
c001d2fa:	50                   	push   eax
c001d2fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2ff:	52                   	push   edx
c001d300:	50                   	push   eax
c001d301:	55                   	push   ebp
c001d302:	e8 85 62 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d307:	58                   	pop    eax
c001d308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d30c:	e8 2f 25 ff ff       	call   c000f840 <malloc>
c001d311:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d314:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d318:	31 d2                	xor    edx,edx
c001d31a:	58                   	pop    eax
c001d31b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d31f:	53                   	push   ebx
c001d320:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d324:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d328:	52                   	push   edx
c001d329:	50                   	push   eax
c001d32a:	55                   	push   ebp
c001d32b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d32e:	83 c4 14             	add    esp,0x14
c001d331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d335:	e8 06 25 ff ff       	call   c000f840 <malloc>
c001d33a:	31 d2                	xor    edx,edx
c001d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d340:	83 c4 0c             	add    esp,0xc
c001d343:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d347:	52                   	push   edx
c001d348:	50                   	push   eax
c001d349:	55                   	push   ebp
c001d34a:	e8 3d 62 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d34f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d352:	31 d2                	xor    edx,edx
c001d354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d357:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d35b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d35f:	52                   	push   edx
c001d360:	50                   	push   eax
c001d361:	55                   	push   ebp
c001d362:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d365:	83 c4 20             	add    esp,0x20
c001d368:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d370:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d374:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d378:	0f 84 f1 02 00 00    	je     c001d66f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d37e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d385:	31 d2                	xor    edx,edx
c001d387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d38b:	c1 e8 03             	shr    eax,0x3
c001d38e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d392:	51                   	push   ecx
c001d393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d397:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d39b:	52                   	push   edx
c001d39c:	50                   	push   eax
c001d39d:	55                   	push   ebp
c001d39e:	e8 e9 61 ff ff       	call   c001358c <File::seek(unsigned long long)>
c001d3a3:	5b                   	pop    ebx
c001d3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3af:	e8 8c 24 ff ff       	call   c000f840 <malloc>
c001d3b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3bb:	31 d2                	xor    edx,edx
c001d3bd:	5e                   	pop    esi
c001d3be:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3c2:	50                   	push   eax
c001d3c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3cb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3d2:	52                   	push   edx
c001d3d3:	50                   	push   eax
c001d3d4:	55                   	push   ebp
c001d3d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3d8:	83 c4 20             	add    esp,0x20
c001d3db:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3e7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3eb:	0f 8d 62 02 00 00    	jge    c001d653 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3fe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d401:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d409:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d40d:	89 d8                	mov    eax,ebx
c001d40f:	c1 e8 08             	shr    eax,0x8
c001d412:	89 c6                	mov    esi,eax
c001d414:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d418:	c1 e6 04             	shl    esi,0x4
c001d41b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d41f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d422:	85 d2                	test   edx,edx
c001d424:	0f 85 bf 00 00 00    	jne    c001d4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d42a:	83 ec 0c             	sub    esp,0xc
c001d42d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d431:	03 06                	add    eax,DWORD PTR [esi]
c001d433:	50                   	push   eax
c001d434:	e8 4b f8 ff ff       	call   c001cc84 <Thr::getAddressOfKernelSymbol(char const*)>
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	89 c2                	mov    edx,eax
c001d43e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d443:	85 c0                	test   eax,eax
c001d445:	0f 85 9e 00 00 00    	jne    c001d4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d44b:	83 ec 0c             	sub    esp,0xc
c001d44e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d452:	03 06                	add    eax,DWORD PTR [esi]
c001d454:	50                   	push   eax
c001d455:	e8 9b 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	89 c2                	mov    edx,eax
c001d45f:	85 c0                	test   eax,eax
c001d461:	0f 85 82 00 00 00    	jne    c001d4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d467:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d46b:	50                   	push   eax
c001d46c:	50                   	push   eax
c001d46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d471:	03 06                	add    eax,DWORD PTR [esi]
c001d473:	50                   	push   eax
c001d474:	68 1c c2 02 c0       	push   0xc002c21c
c001d479:	e8 94 5a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001d47e:	58                   	pop    eax
c001d47f:	5a                   	pop    edx
c001d480:	68 36 c2 02 c0       	push   0xc002c236
c001d485:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d48c:	50                   	push   eax
c001d48d:	e8 a2 33 fe ff       	call   c0000834 <strcpy>
c001d492:	59                   	pop    ecx
c001d493:	58                   	pop    eax
c001d494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d498:	03 06                	add    eax,DWORD PTR [esi]
c001d49a:	50                   	push   eax
c001d49b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4a2:	50                   	push   eax
c001d4a3:	e8 cc 34 fe ff       	call   c0000974 <strcat>
c001d4a8:	58                   	pop    eax
c001d4a9:	5a                   	pop    edx
c001d4aa:	68 cc c2 02 c0       	push   0xc002c2cc
c001d4af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b6:	50                   	push   eax
c001d4b7:	e8 b8 34 fe ff       	call   c0000974 <strcat>
c001d4bc:	83 c4 10             	add    esp,0x10
c001d4bf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4c4:	0f 84 43 01 00 00    	je     c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ca:	83 ec 0c             	sub    esp,0xc
c001d4cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d4:	50                   	push   eax
c001d4d5:	e8 d9 d0 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d4da:	83 c4 10             	add    esp,0x10
c001d4dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4e1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4e5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4e9:	80 fb 01             	cmp    bl,0x1
c001d4ec:	75 7d                	jne    c001d56b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4ee:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4f5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4f9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4fd:	01 ce                	add    esi,ecx
c001d4ff:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d505:	0f 94 c0             	sete   al
c001d508:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d50e:	0f 94 c3             	sete   bl
c001d511:	09 c3                	or     ebx,eax
c001d513:	8b 06                	mov    eax,DWORD PTR [esi]
c001d515:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d51a:	74 36                	je     c001d552 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d51c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d51f:	84 db                	test   bl,bl
c001d521:	75 0a                	jne    c001d52d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d523:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d527:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d52b:	76 37                	jbe    c001d564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d52d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d531:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d536:	0f 84 d1 00 00 00    	je     c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d53c:	83 ec 0c             	sub    esp,0xc
c001d53f:	68 4d c2 02 c0       	push   0xc002c24d
c001d544:	e8 6a d0 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d549:	83 c4 10             	add    esp,0x10
c001d54c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d550:	eb 12                	jmp    c001d564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d552:	01 c1                	add    ecx,eax
c001d554:	84 db                	test   bl,bl
c001d556:	75 0c                	jne    c001d564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d558:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d55c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d560:	77 02                	ja     c001d564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d562:	01 d1                	add    ecx,edx
c001d564:	89 0e                	mov    DWORD PTR [esi],ecx
c001d566:	e9 df 00 00 00       	jmp    c001d64a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d56b:	80 fb 02             	cmp    bl,0x2
c001d56e:	75 71                	jne    c001d5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d570:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d577:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d57b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d57f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d585:	74 15                	je     c001d59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d587:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d58d:	74 0d                	je     c001d59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d58f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d593:	83 e8 04             	sub    eax,0x4
c001d596:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d59a:	76 1f                	jbe    c001d5bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d59c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5a0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a5:	74 66                	je     c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5a7:	83 ec 0c             	sub    esp,0xc
c001d5aa:	68 69 c2 02 c0       	push   0xc002c269
c001d5af:	e8 ff cf ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d5b4:	83 c4 10             	add    esp,0x10
c001d5b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5bb:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5bd:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5c2:	74 13                	je     c001d5d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5c4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5c8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5cf:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5d3:	01 c8                	add    eax,ecx
c001d5d5:	eb 04                	jmp    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5d7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5db:	01 c2                	add    edx,eax
c001d5dd:	89 16                	mov    DWORD PTR [esi],edx
c001d5df:	eb 69                	jmp    c001d64a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5e1:	0f b6 db             	movzx  ebx,bl
c001d5e4:	50                   	push   eax
c001d5e5:	50                   	push   eax
c001d5e6:	53                   	push   ebx
c001d5e7:	68 85 c2 02 c0       	push   0xc002c285
c001d5ec:	e8 21 59 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5f9:	74 12                	je     c001d60d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5fb:	83 ec 0c             	sub    esp,0xc
c001d5fe:	68 90 c2 02 c0       	push   0xc002c290
c001d603:	e8 ab cf ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d608:	83 c4 10             	add    esp,0x10
c001d60b:	eb 3d                	jmp    c001d64a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d60d:	83 ec 0c             	sub    esp,0xc
c001d610:	55                   	push   ebp
c001d611:	e8 16 5f ff ff       	call   c001352c <File::close()>
c001d616:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d619:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d61c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d61f:	59                   	pop    ecx
c001d620:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d624:	e8 27 22 ff ff       	call   c000f850 <free>
c001d629:	5b                   	pop    ebx
c001d62a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d62e:	e8 1d 22 ff ff       	call   c000f850 <free>
c001d633:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d636:	e8 15 22 ff ff       	call   c000f850 <free>
c001d63b:	5e                   	pop    esi
c001d63c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d640:	e8 0b 22 ff ff       	call   c000f850 <free>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	eb 21                	jmp    c001d66b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d64a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d64e:	e9 90 fd ff ff       	jmp    c001d3e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d653:	83 ec 0c             	sub    esp,0xc
c001d656:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d65a:	e8 f1 21 ff ff       	call   c000f850 <free>
c001d65f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d663:	83 c4 10             	add    esp,0x10
c001d666:	e9 05 fd ff ff       	jmp    c001d370 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d66b:	31 c0                	xor    eax,eax
c001d66d:	eb 33                	jmp    c001d6a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d66f:	83 ec 0c             	sub    esp,0xc
c001d672:	55                   	push   ebp
c001d673:	e8 b4 5e ff ff       	call   c001352c <File::close()>
c001d678:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d67b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d67e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d681:	58                   	pop    eax
c001d682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d686:	e8 c5 21 ff ff       	call   c000f850 <free>
c001d68b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d68e:	e8 bd 21 ff ff       	call   c000f850 <free>
c001d693:	5a                   	pop    edx
c001d694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d698:	e8 b3 21 ff ff       	call   c000f850 <free>
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	b0 01                	mov    al,0x1
c001d6a2:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6a8:	5b                   	pop    ebx
c001d6a9:	5e                   	pop    esi
c001d6aa:	5f                   	pop    edi
c001d6ab:	5d                   	pop    ebp
c001d6ac:	c3                   	ret    

c001d6ad <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6ad:	56                   	push   esi
c001d6ae:	31 d2                	xor    edx,edx
c001d6b0:	53                   	push   ebx
c001d6b1:	8b 1d 00 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031300
c001d6b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6bb:	39 d3                	cmp    ebx,edx
c001d6bd:	7e 1b                	jle    c001d6da <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6bf:	8b 04 95 20 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceae0]
c001d6c6:	39 c8                	cmp    eax,ecx
c001d6c8:	77 0d                	ja     c001d6d7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6ca:	8b 34 95 20 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcece0]
c001d6d1:	01 c6                	add    esi,eax
c001d6d3:	39 ce                	cmp    esi,ecx
c001d6d5:	77 05                	ja     c001d6dc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6d7:	42                   	inc    edx
c001d6d8:	eb e1                	jmp    c001d6bb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6da:	31 c0                	xor    eax,eax
c001d6dc:	5b                   	pop    ebx
c001d6dd:	5e                   	pop    esi
c001d6de:	c3                   	ret    

c001d6df <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6df:	53                   	push   ebx
c001d6e0:	31 c0                	xor    eax,eax
c001d6e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6e6:	8b 1d 00 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031300
c001d6ec:	39 c3                	cmp    ebx,eax
c001d6ee:	7e 22                	jle    c001d712 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6f0:	8b 14 85 20 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceae0]
c001d6f7:	39 ca                	cmp    edx,ecx
c001d6f9:	77 14                	ja     c001d70f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6fb:	03 14 85 20 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcece0]
c001d702:	39 ca                	cmp    edx,ecx
c001d704:	76 09                	jbe    c001d70f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d706:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c001d70d:	eb 05                	jmp    c001d714 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d70f:	40                   	inc    eax
c001d710:	eb da                	jmp    c001d6ec <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d712:	31 c0                	xor    eax,eax
c001d714:	5b                   	pop    ebx
c001d715:	c3                   	ret    

c001d716 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d716:	53                   	push   ebx
c001d717:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d71b:	53                   	push   ebx
c001d71c:	e8 8c ff ff ff       	call   c001d6ad <Thr::getDriverBaseFromAddress(unsigned long)>
c001d721:	5a                   	pop    edx
c001d722:	31 d2                	xor    edx,edx
c001d724:	85 c0                	test   eax,eax
c001d726:	74 04                	je     c001d72c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d728:	89 da                	mov    edx,ebx
c001d72a:	29 c2                	sub    edx,eax
c001d72c:	89 d0                	mov    eax,edx
c001d72e:	5b                   	pop    ebx
c001d72f:	c3                   	ret    

c001d730 <Thr::loadDLL(char const*, bool)>:
c001d730:	55                   	push   ebp
c001d731:	57                   	push   edi
c001d732:	56                   	push   esi
c001d733:	53                   	push   ebx
c001d734:	81 ec 34 01 00 00    	sub    esp,0x134
c001d73a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d741:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d748:	56                   	push   esi
c001d749:	68 a8 c2 02 c0       	push   0xc002c2a8
c001d74e:	e8 bf 57 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001d753:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d75a:	e8 e1 20 ff ff       	call   c000f840 <malloc>
c001d75f:	83 c4 0c             	add    esp,0xc
c001d762:	89 c3                	mov    ebx,eax
c001d764:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001d76a:	56                   	push   esi
c001d76b:	50                   	push   eax
c001d76c:	e8 f9 5c ff ff       	call   c001346a <File::File(char const*, Process*)>
c001d771:	83 c4 10             	add    esp,0x10
c001d774:	85 db                	test   ebx,ebx
c001d776:	75 3c                	jne    c001d7b4 <Thr::loadDLL(char const*, bool)+0x84>
c001d778:	89 e8                	mov    eax,ebp
c001d77a:	84 c0                	test   al,al
c001d77c:	0f 84 d5 01 00 00    	je     c001d957 <Thr::loadDLL(char const*, bool)+0x227>
c001d782:	57                   	push   edi
c001d783:	57                   	push   edi
c001d784:	68 b9 c2 02 c0       	push   0xc002c2b9
c001d789:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d78d:	57                   	push   edi
c001d78e:	e8 a1 30 fe ff       	call   c0000834 <strcpy>
c001d793:	58                   	pop    eax
c001d794:	5a                   	pop    edx
c001d795:	56                   	push   esi
c001d796:	57                   	push   edi
c001d797:	e8 d8 31 fe ff       	call   c0000974 <strcat>
c001d79c:	59                   	pop    ecx
c001d79d:	58                   	pop    eax
c001d79e:	68 cc c2 02 c0       	push   0xc002c2cc
c001d7a3:	57                   	push   edi
c001d7a4:	e8 cb 31 fe ff       	call   c0000974 <strcat>
c001d7a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7ac:	e8 02 ce ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d7b1:	83 c4 10             	add    esp,0x10
c001d7b4:	51                   	push   ecx
c001d7b5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7b9:	50                   	push   eax
c001d7ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7be:	50                   	push   eax
c001d7bf:	53                   	push   ebx
c001d7c0:	e8 b5 5f ff ff       	call   c001377a <File::stat(unsigned long long*, bool*)>
c001d7c5:	83 c4 10             	add    esp,0x10
c001d7c8:	85 db                	test   ebx,ebx
c001d7ca:	74 0c                	je     c001d7d8 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7cc:	83 ec 0c             	sub    esp,0xc
c001d7cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7d1:	53                   	push   ebx
c001d7d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7d5:	83 c4 10             	add    esp,0x10
c001d7d8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7dd:	75 0a                	jne    c001d7e9 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7e3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7e7:	75 3c                	jne    c001d825 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7e9:	89 e8                	mov    eax,ebp
c001d7eb:	84 c0                	test   al,al
c001d7ed:	0f 84 4c 01 00 00    	je     c001d93f <Thr::loadDLL(char const*, bool)+0x20f>
c001d7f3:	51                   	push   ecx
c001d7f4:	51                   	push   ecx
c001d7f5:	68 b9 c2 02 c0       	push   0xc002c2b9
c001d7fa:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7fe:	53                   	push   ebx
c001d7ff:	e8 30 30 fe ff       	call   c0000834 <strcpy>
c001d804:	5f                   	pop    edi
c001d805:	58                   	pop    eax
c001d806:	56                   	push   esi
c001d807:	53                   	push   ebx
c001d808:	e8 67 31 fe ff       	call   c0000974 <strcat>
c001d80d:	58                   	pop    eax
c001d80e:	5a                   	pop    edx
c001d80f:	68 cc c2 02 c0       	push   0xc002c2cc
c001d814:	53                   	push   ebx
c001d815:	e8 5a 31 fe ff       	call   c0000974 <strcat>
c001d81a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d81d:	e8 91 cd ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d822:	83 c4 10             	add    esp,0x10
c001d825:	e8 14 46 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001d82a:	51                   	push   ecx
c001d82b:	6a 03                	push   0x3
c001d82d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d831:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d835:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d83b:	83 d3 00             	adc    ebx,0x0
c001d83e:	89 ca                	mov    edx,ecx
c001d840:	89 d1                	mov    ecx,edx
c001d842:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d846:	51                   	push   ecx
c001d847:	50                   	push   eax
c001d848:	e8 2d 4c ff ff       	call   c001247a <VAS::allocatePages(int, int)>
c001d84d:	5f                   	pop    edi
c001d84e:	89 c3                	mov    ebx,eax
c001d850:	58                   	pop    eax
c001d851:	53                   	push   ebx
c001d852:	68 ce c2 02 c0       	push   0xc002c2ce
c001d857:	e8 b6 56 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001d85c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d85f:	e8 30 2f fe ff       	call   c0000794 <strlen>
c001d864:	8b 3d 00 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031300
c001d86a:	40                   	inc    eax
c001d86b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d86e:	e8 cd 1f ff ff       	call   c000f840 <malloc>
c001d873:	89 04 bd 20 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8e0],eax
c001d87a:	58                   	pop    eax
c001d87b:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c001d880:	5a                   	pop    edx
c001d881:	56                   	push   esi
c001d882:	ff 34 85 20 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8e0]
c001d889:	e8 a6 2f fe ff       	call   c0000834 <strcpy>
c001d88e:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c001d893:	8d 50 01             	lea    edx,[eax+0x1]
c001d896:	89 1c 85 20 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceae0],ebx
c001d89d:	89 15 00 13 03 c0    	mov    DWORD PTR ds:0xc0031300,edx
c001d8a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8a7:	83 c4 0c             	add    esp,0xc
c001d8aa:	89 14 85 20 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcece0],edx
c001d8b1:	6a 01                	push   0x1
c001d8b3:	53                   	push   ebx
c001d8b4:	56                   	push   esi
c001d8b5:	e8 d7 f6 ff ff       	call   c001cf91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	89 c7                	mov    edi,eax
c001d8bf:	84 c0                	test   al,al
c001d8c1:	0f 85 8c 00 00 00    	jne    c001d953 <Thr::loadDLL(char const*, bool)+0x223>
c001d8c7:	89 e8                	mov    eax,ebp
c001d8c9:	84 c0                	test   al,al
c001d8cb:	74 76                	je     c001d943 <Thr::loadDLL(char const*, bool)+0x213>
c001d8cd:	83 ec 0c             	sub    esp,0xc
c001d8d0:	68 db c2 02 c0       	push   0xc002c2db
c001d8d5:	e8 d9 cc ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d8da:	83 c4 10             	add    esp,0x10
c001d8dd:	eb 64                	jmp    c001d943 <Thr::loadDLL(char const*, bool)+0x213>
c001d8df:	e8 5a 45 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001d8e4:	89 f5                	mov    ebp,esi
c001d8e6:	c1 e5 0c             	shl    ebp,0xc
c001d8e9:	52                   	push   edx
c001d8ea:	01 dd                	add    ebp,ebx
c001d8ec:	52                   	push   edx
c001d8ed:	55                   	push   ebp
c001d8ee:	50                   	push   eax
c001d8ef:	e8 00 47 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8fa:	75 0c                	jne    c001d908 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8fc:	83 ec 0c             	sub    esp,0xc
c001d8ff:	55                   	push   ebp
c001d900:	e8 53 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d905:	83 c4 10             	add    esp,0x10
c001d908:	46                   	inc    esi
c001d909:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d90d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d911:	05 ff 0f 00 00       	add    eax,0xfff
c001d916:	83 d2 00             	adc    edx,0x0
c001d919:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d91d:	c1 ea 0c             	shr    edx,0xc
c001d920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d928:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d92c:	ba 00 00 00 00       	mov    edx,0x0
c001d931:	89 d0                	mov    eax,edx
c001d933:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d937:	72 a6                	jb     c001d8df <Thr::loadDLL(char const*, bool)+0x1af>
c001d939:	89 f8                	mov    eax,edi
c001d93b:	84 c0                	test   al,al
c001d93d:	75 18                	jne    c001d957 <Thr::loadDLL(char const*, bool)+0x227>
c001d93f:	31 db                	xor    ebx,ebx
c001d941:	eb 14                	jmp    c001d957 <Thr::loadDLL(char const*, bool)+0x227>
c001d943:	83 ec 0c             	sub    esp,0xc
c001d946:	68 fa c2 02 c0       	push   0xc002c2fa
c001d94b:	e8 63 cc ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	31 f6                	xor    esi,esi
c001d955:	eb b2                	jmp    c001d909 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d957:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d95d:	89 d8                	mov    eax,ebx
c001d95f:	5b                   	pop    ebx
c001d960:	5e                   	pop    esi
c001d961:	5f                   	pop    edi
c001d962:	5d                   	pop    ebp
c001d963:	c3                   	ret    

c001d964 <Thr::executeDLL(unsigned long, void*)>:
c001d964:	56                   	push   esi
c001d965:	53                   	push   ebx
c001d966:	52                   	push   edx
c001d967:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d96b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d96f:	85 db                	test   ebx,ebx
c001d971:	75 10                	jne    c001d983 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d973:	83 ec 0c             	sub    esp,0xc
c001d976:	68 16 c3 02 c0       	push   0xc002c316
c001d97b:	e8 33 cc ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001d980:	83 c4 10             	add    esp,0x10
c001d983:	50                   	push   eax
c001d984:	50                   	push   eax
c001d985:	53                   	push   ebx
c001d986:	68 40 c3 02 c0       	push   0xc002c340
c001d98b:	e8 82 55 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001d990:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d994:	89 d8                	mov    eax,ebx
c001d996:	83 c4 14             	add    esp,0x14
c001d999:	5b                   	pop    ebx
c001d99a:	5e                   	pop    esi
c001d99b:	ff e0                	jmp    eax
c001d99d:	90                   	nop

c001d99e <changeTSS>:
c001d99e:	83 ec 14             	sub    esp,0x14
c001d9a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9a6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9a9:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9ae:	c1 e2 15             	shl    edx,0x15
c001d9b1:	29 d0                	sub    eax,edx
c001d9b3:	50                   	push   eax
c001d9b4:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001d9b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9bf:	05 7c 11 00 00       	add    eax,0x117c
c001d9c4:	50                   	push   eax
c001d9c5:	e8 4a 3b ff ff       	call   c0011514 <TSS::setESP(unsigned long)>
c001d9ca:	83 c4 1c             	add    esp,0x1c
c001d9cd:	c3                   	ret    

c001d9ce <Process::addArgs(char**)>:
c001d9ce:	57                   	push   edi
c001d9cf:	56                   	push   esi
c001d9d0:	53                   	push   ebx
c001d9d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9d5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9d9:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9e3:	85 ff                	test   edi,edi
c001d9e5:	74 3d                	je     c001da24 <Process::addArgs(char**)+0x56>
c001d9e7:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9e9:	85 c0                	test   eax,eax
c001d9eb:	74 37                	je     c001da24 <Process::addArgs(char**)+0x56>
c001d9ed:	31 db                	xor    ebx,ebx
c001d9ef:	83 ec 0c             	sub    esp,0xc
c001d9f2:	50                   	push   eax
c001d9f3:	e8 9c 2d fe ff       	call   c0000794 <strlen>
c001d9f8:	40                   	inc    eax
c001d9f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9fc:	e8 3f 1e ff ff       	call   c000f840 <malloc>
c001da01:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da08:	5a                   	pop    edx
c001da09:	59                   	pop    ecx
c001da0a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da0d:	43                   	inc    ebx
c001da0e:	50                   	push   eax
c001da0f:	e8 20 2e fe ff       	call   c0000834 <strcpy>
c001da14:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da1a:	83 c4 10             	add    esp,0x10
c001da1d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da20:	85 c0                	test   eax,eax
c001da22:	75 cb                	jne    c001d9ef <Process::addArgs(char**)+0x21>
c001da24:	5b                   	pop    ebx
c001da25:	5e                   	pop    esi
c001da26:	5f                   	pop    edi
c001da27:	c3                   	ret    

c001da28 <Process::Process(char const*, Process*, char**)>:
c001da28:	56                   	push   esi
c001da29:	53                   	push   ebx
c001da2a:	83 ec 14             	sub    esp,0x14
c001da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da31:	05 0c 02 00 00       	add    eax,0x20c
c001da36:	bb 07 00 00 00       	mov    ebx,0x7
c001da3b:	89 c6                	mov    esi,eax
c001da3d:	85 db                	test   ebx,ebx
c001da3f:	78 12                	js     c001da53 <Process::Process(char const*, Process*, char**)+0x2b>
c001da41:	83 ec 0c             	sub    esp,0xc
c001da44:	56                   	push   esi
c001da45:	e8 28 b2 00 00       	call   c0028c72 <ThreadControlBlock::ThreadControlBlock()>
c001da4a:	83 c4 10             	add    esp,0x10
c001da4d:	83 c6 63             	add    esi,0x63
c001da50:	4b                   	dec    ebx
c001da51:	eb ea                	jmp    c001da3d <Process::Process(char const*, Process*, char**)+0x15>
c001da53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da57:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da5e:	83 ec 0c             	sub    esp,0xc
c001da61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da65:	e8 9a c9 ff ff       	call   c001a404 <Krnl::newProcessEnv(Process*)>
c001da6a:	83 c4 10             	add    esp,0x10
c001da6d:	89 c2                	mov    edx,eax
c001da6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da73:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da86:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c001da8b:	8d 50 01             	lea    edx,[eax+0x1]
c001da8e:	89 15 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,edx
c001da94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da98:	89 02                	mov    DWORD PTR [edx],eax
c001da9a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001daa2:	83 ec 0c             	sub    esp,0xc
c001daa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daa9:	e8 92 1d ff ff       	call   c000f840 <malloc>
c001daae:	83 c4 10             	add    esp,0x10
c001dab1:	89 c3                	mov    ebx,eax
c001dab3:	83 ec 08             	sub    esp,0x8
c001dab6:	6a 00                	push   0x0
c001dab8:	53                   	push   ebx
c001dab9:	e8 64 4d ff ff       	call   c0012822 <VAS::VAS(bool)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dae1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daeb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daf1:	85 c0                	test   eax,eax
c001daf3:	74 42                	je     c001db37 <Process::Process(char const*, Process*, char**)+0x10f>
c001daf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daff:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db09:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db13:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db19:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db23:	05 0c 01 00 00       	add    eax,0x10c
c001db28:	83 ec 08             	sub    esp,0x8
c001db2b:	52                   	push   edx
c001db2c:	50                   	push   eax
c001db2d:	e8 02 2d fe ff       	call   c0000834 <strcpy>
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	eb 63                	jmp    c001db9a <Process::Process(char const*, Process*, char**)+0x172>
c001db37:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db3f:	83 ec 0c             	sub    esp,0xc
c001db42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db46:	e8 f5 1c ff ff       	call   c000f840 <malloc>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	89 c3                	mov    ebx,eax
c001db50:	83 ec 08             	sub    esp,0x8
c001db53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db57:	53                   	push   ebx
c001db58:	e8 b5 36 ff ff       	call   c0011212 <VgaText::VgaText(char const*)>
c001db5d:	83 c4 10             	add    esp,0x10
c001db60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db64:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db74:	83 ec 0c             	sub    esp,0xc
c001db77:	50                   	push   eax
c001db78:	e8 88 2a ff ff       	call   c0010605 <addToTerminalCycle(VgaText*)>
c001db7d:	83 c4 10             	add    esp,0x10
c001db80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db84:	05 0c 01 00 00       	add    eax,0x10c
c001db89:	83 ec 08             	sub    esp,0x8
c001db8c:	68 5f c3 02 c0       	push   0xc002c35f
c001db91:	50                   	push   eax
c001db92:	e8 9d 2c fe ff       	call   c0000834 <strcpy>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9e:	83 c0 0c             	add    eax,0xc
c001dba1:	83 ec 08             	sub    esp,0x8
c001dba4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dba8:	50                   	push   eax
c001dba9:	e8 86 2c fe ff       	call   c0000834 <strcpy>
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	83 ec 08             	sub    esp,0x8
c001dbb4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbbc:	e8 0d fe ff ff       	call   c001d9ce <Process::addArgs(char**)>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	83 ec 08             	sub    esp,0x8
c001dbc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbcf:	e8 87 ee ff ff       	call   c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbdb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbdf:	83 f0 01             	xor    eax,0x1
c001dbe2:	88 c2                	mov    dl,al
c001dbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe8:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbee:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbf3:	83 ec 08             	sub    esp,0x8
c001dbf6:	50                   	push   eax
c001dbf7:	68 5c c4 02 c0       	push   0xc002c45c
c001dbfc:	e8 11 53 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001dc01:	83 c4 10             	add    esp,0x10
c001dc04:	90                   	nop
c001dc05:	83 c4 14             	add    esp,0x14
c001dc08:	5b                   	pop    ebx
c001dc09:	5e                   	pop    esi
c001dc0a:	c3                   	ret    
c001dc0b:	90                   	nop

c001dc0c <Process::Process(bool, char const*, Process*, char**)>:
c001dc0c:	56                   	push   esi
c001dc0d:	53                   	push   ebx
c001dc0e:	83 ec 24             	sub    esp,0x24
c001dc11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc15:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1d:	05 0c 02 00 00       	add    eax,0x20c
c001dc22:	bb 07 00 00 00       	mov    ebx,0x7
c001dc27:	89 c6                	mov    esi,eax
c001dc29:	85 db                	test   ebx,ebx
c001dc2b:	78 12                	js     c001dc3f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc2d:	83 ec 0c             	sub    esp,0xc
c001dc30:	56                   	push   esi
c001dc31:	e8 3c b0 00 00       	call   c0028c72 <ThreadControlBlock::ThreadControlBlock()>
c001dc36:	83 c4 10             	add    esp,0x10
c001dc39:	83 c6 63             	add    esi,0x63
c001dc3c:	4b                   	dec    ebx
c001dc3d:	eb ea                	jmp    c001dc29 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc43:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc51:	e8 ae c7 ff ff       	call   c001a404 <Krnl::newProcessEnv(Process*)>
c001dc56:	83 c4 10             	add    esp,0x10
c001dc59:	89 c2                	mov    edx,eax
c001dc5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc69:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc72:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c001dc77:	8d 50 01             	lea    edx,[eax+0x1]
c001dc7a:	89 15 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,edx
c001dc80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc84:	89 02                	mov    DWORD PTR [edx],eax
c001dc86:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc8e:	83 ec 0c             	sub    esp,0xc
c001dc91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc95:	e8 a6 1b ff ff       	call   c000f840 <malloc>
c001dc9a:	83 c4 10             	add    esp,0x10
c001dc9d:	89 c3                	mov    ebx,eax
c001dc9f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dca4:	83 ec 08             	sub    esp,0x8
c001dca7:	50                   	push   eax
c001dca8:	53                   	push   ebx
c001dca9:	e8 74 4b ff ff       	call   c0012822 <VAS::VAS(bool)>
c001dcae:	83 c4 10             	add    esp,0x10
c001dcb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcd1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dce1:	85 c0                	test   eax,eax
c001dce3:	74 42                	je     c001dd27 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcef:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dcf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dcff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd03:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd09:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd13:	05 0c 01 00 00       	add    eax,0x10c
c001dd18:	83 ec 08             	sub    esp,0x8
c001dd1b:	52                   	push   edx
c001dd1c:	50                   	push   eax
c001dd1d:	e8 12 2b fe ff       	call   c0000834 <strcpy>
c001dd22:	83 c4 10             	add    esp,0x10
c001dd25:	eb 63                	jmp    c001dd8a <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd27:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd36:	e8 05 1b ff ff       	call   c000f840 <malloc>
c001dd3b:	83 c4 10             	add    esp,0x10
c001dd3e:	89 c3                	mov    ebx,eax
c001dd40:	83 ec 08             	sub    esp,0x8
c001dd43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd47:	53                   	push   ebx
c001dd48:	e8 c5 34 ff ff       	call   c0011212 <VgaText::VgaText(char const*)>
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd54:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd64:	83 ec 0c             	sub    esp,0xc
c001dd67:	50                   	push   eax
c001dd68:	e8 98 28 ff ff       	call   c0010605 <addToTerminalCycle(VgaText*)>
c001dd6d:	83 c4 10             	add    esp,0x10
c001dd70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd74:	05 0c 01 00 00       	add    eax,0x10c
c001dd79:	83 ec 08             	sub    esp,0x8
c001dd7c:	68 5f c3 02 c0       	push   0xc002c35f
c001dd81:	50                   	push   eax
c001dd82:	e8 ad 2a fe ff       	call   c0000834 <strcpy>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8e:	83 c0 0c             	add    eax,0xc
c001dd91:	83 ec 08             	sub    esp,0x8
c001dd94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd98:	50                   	push   eax
c001dd99:	e8 96 2a fe ff       	call   c0000834 <strcpy>
c001dd9e:	83 c4 10             	add    esp,0x10
c001dda1:	83 ec 08             	sub    esp,0x8
c001dda4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dda8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddac:	e8 1d fc ff ff       	call   c001d9ce <Process::addArgs(char**)>
c001ddb1:	83 c4 10             	add    esp,0x10
c001ddb4:	90                   	nop
c001ddb5:	83 c4 24             	add    esp,0x24
c001ddb8:	5b                   	pop    ebx
c001ddb9:	5e                   	pop    esi
c001ddba:	c3                   	ret    

c001ddbb <disableIRQs()>:
c001ddbb:	fa                   	cli    
c001ddbc:	ff 05 cc 1a 03 c0    	inc    DWORD PTR ds:0xc0031acc
c001ddc2:	c3                   	ret    

c001ddc3 <getIRQNestingLevel()>:
c001ddc3:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001ddc8:	c3                   	ret    

c001ddc9 <enableIRQs()>:
c001ddc9:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001ddce:	48                   	dec    eax
c001ddcf:	a3 cc 1a 03 c0       	mov    ds:0xc0031acc,eax
c001ddd4:	75 01                	jne    c001ddd7 <enableIRQs()+0xe>
c001ddd6:	fb                   	sti    
c001ddd7:	c3                   	ret    

c001ddd8 <lockScheduler()>:
c001ddd8:	eb e1                	jmp    c001ddbb <disableIRQs()>

c001ddda <unlockScheduler()>:
c001ddda:	eb ed                	jmp    c001ddc9 <enableIRQs()>

c001dddc <userModeEntryPoint(void*)>:
c001dddc:	83 ec 0c             	sub    esp,0xc
c001dddf:	e8 f6 ff ff ff       	call   c001ddda <unlockScheduler()>
c001dde4:	fb                   	sti    
c001dde5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dded:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ddf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddf7:	83 c4 0c             	add    esp,0xc
c001ddfa:	e9 2b 25 fe ff       	jmp    c000032a <goToUsermode>

c001ddff <lockStuff()>:
c001ddff:	e8 b7 ff ff ff       	call   c001ddbb <disableIRQs()>
c001de04:	ff 05 c8 1a 03 c0    	inc    DWORD PTR ds:0xc0031ac8
c001de0a:	c3                   	ret    

c001de0b <taskStartupFunction>:
c001de0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de10:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de13:	c3                   	ret    

c001de14 <updateTimeUsed()>:
c001de14:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001de19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de1f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de26:	74 50                	je     c001de78 <updateTimeUsed()+0x64>
c001de28:	57                   	push   edi
c001de29:	56                   	push   esi
c001de2a:	53                   	push   ebx
c001de2b:	0f 31                	rdtsc  
c001de2d:	89 c1                	mov    ecx,eax
c001de2f:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001de34:	2b 0d f8 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031af8
c001de3a:	89 d3                	mov    ebx,edx
c001de3c:	89 0d 00 1b 03 c0    	mov    DWORD PTR ds:0xc0031b00,ecx
c001de42:	1b 1d fc 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031afc
c001de48:	a3 f8 1a 03 c0       	mov    ds:0xc0031af8,eax
c001de4d:	89 1d 04 1b 03 c0    	mov    DWORD PTR ds:0xc0031b04,ebx
c001de53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de58:	89 15 0c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b0c,edx
c001de5e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de61:	89 15 fc 1a 03 c0    	mov    DWORD PTR ds:0xc0031afc,edx
c001de67:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de6a:	01 f1                	add    ecx,esi
c001de6c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de6f:	11 fb                	adc    ebx,edi
c001de71:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de74:	5b                   	pop    ebx
c001de75:	5e                   	pop    esi
c001de76:	5f                   	pop    edi
c001de77:	c3                   	ret    
c001de78:	c3                   	ret    

c001de79 <switchToThread(ThreadControlBlock*)>:
c001de79:	53                   	push   ebx
c001de7a:	83 ec 08             	sub    esp,0x8
c001de7d:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001de82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de86:	85 c0                	test   eax,eax
c001de88:	75 30                	jne    c001deba <switchToThread(ThreadControlBlock*)+0x41>
c001de8a:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de8d:	3c ff                	cmp    al,0xff
c001de8f:	74 25                	je     c001deb6 <switchToThread(ThreadControlBlock*)+0x3d>
c001de91:	0f b6 d0             	movzx  edx,al
c001de94:	b8 84 03 00 00       	mov    eax,0x384
c001de99:	29 d0                	sub    eax,edx
c001de9b:	c1 e0 10             	shl    eax,0x10
c001de9e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dea1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dea4:	e8 6b ff ff ff       	call   c001de14 <updateTimeUsed()>
c001dea9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dead:	83 c4 08             	add    esp,0x8
c001deb0:	5b                   	pop    ebx
c001deb1:	e9 ac 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001deb6:	31 c0                	xor    eax,eax
c001deb8:	eb e7                	jmp    c001dea1 <switchToThread(ThreadControlBlock*)+0x28>
c001deba:	c7 05 c4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ac4,0x1
c001dec4:	83 c4 08             	add    esp,0x8
c001dec7:	5b                   	pop    ebx
c001dec8:	c3                   	ret    
c001dec9:	90                   	nop

c001deca <Semaphore::Semaphore(int)>:
c001deca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ded2:	89 10                	mov    DWORD PTR [eax],edx
c001ded4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dedf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001deea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001def5:	90                   	nop
c001def6:	c3                   	ret    
c001def7:	90                   	nop

c001def8 <Mutex::Mutex()>:
c001def8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defc:	6a 01                	push   0x1
c001defe:	50                   	push   eax
c001deff:	e8 c6 ff ff ff       	call   c001deca <Semaphore::Semaphore(int)>
c001df04:	83 c4 08             	add    esp,0x8
c001df07:	90                   	nop
c001df08:	c3                   	ret    
c001df09:	90                   	nop

c001df0a <Process::createThread(void (*)(void*), void*, int)>:
c001df0a:	55                   	push   ebp
c001df0b:	31 c9                	xor    ecx,ecx
c001df0d:	57                   	push   edi
c001df0e:	56                   	push   esi
c001df0f:	53                   	push   ebx
c001df10:	83 ec 1c             	sub    esp,0x1c
c001df13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df17:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df1e:	89 f2                	mov    edx,esi
c001df20:	0f b7 c2             	movzx  eax,dx
c001df23:	83 e2 01             	and    edx,0x1
c001df26:	74 14                	je     c001df3c <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df28:	d1 f8                	sar    eax,1
c001df2a:	41                   	inc    ecx
c001df2b:	89 c2                	mov    edx,eax
c001df2d:	83 f9 10             	cmp    ecx,0x10
c001df30:	75 ee                	jne    c001df20 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df32:	83 c4 1c             	add    esp,0x1c
c001df35:	31 c0                	xor    eax,eax
c001df37:	5b                   	pop    ebx
c001df38:	5e                   	pop    esi
c001df39:	5f                   	pop    edi
c001df3a:	5d                   	pop    ebp
c001df3b:	c3                   	ret    
c001df3c:	83 ec 08             	sub    esp,0x8
c001df3f:	b8 01 00 00 00       	mov    eax,0x1
c001df44:	d3 e0                	shl    eax,cl
c001df46:	09 c6                	or     esi,eax
c001df48:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df4e:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df55:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df58:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df5b:	01 ce                	add    esi,ecx
c001df5d:	89 f0                	mov    eax,esi
c001df5f:	c1 e0 05             	shl    eax,0x5
c001df62:	01 c6                	add    esi,eax
c001df64:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df67:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df6d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df77:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df7d:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df83:	89 ca                	mov    edx,ecx
c001df85:	f7 da                	neg    edx
c001df87:	c1 e2 15             	shl    edx,0x15
c001df8a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df90:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df96:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df9a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfa4:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfaa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfae:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfb4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfbe:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfc8:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfcf:	50                   	push   eax
c001dfd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfd4:	68 e8 1a 03 c0       	push   0xc0031ae8
c001dfd9:	e8 22 ab 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfe5:	83 c4 1c             	add    esp,0x1c
c001dfe8:	5b                   	pop    ebx
c001dfe9:	5e                   	pop    esi
c001dfea:	5f                   	pop    edi
c001dfeb:	5d                   	pop    ebp
c001dfec:	c3                   	ret    
c001dfed:	90                   	nop

c001dfee <Process::createUserThread()>:
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	68 80 00 00 00       	push   0x80
c001dff6:	6a 00                	push   0x0
c001dff8:	68 dc dd 01 c0       	push   0xc001dddc
c001dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e001:	e8 04 ff ff ff       	call   c001df0a <Process::createThread(void (*)(void*), void*, int)>
c001e006:	83 c4 1c             	add    esp,0x1c
c001e009:	c3                   	ret    

c001e00a <setupMultitasking(void (*)())>:
c001e00a:	56                   	push   esi
c001e00b:	53                   	push   ebx
c001e00c:	53                   	push   ebx
c001e00d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e011:	eb 10                	jmp    c001e023 <setupMultitasking(void (*)())+0x19>
c001e013:	83 ec 0c             	sub    esp,0xc
c001e016:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e01b:	e8 32 aa 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	83 ec 0c             	sub    esp,0xc
c001e026:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e02b:	e8 06 aa 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e030:	83 c4 10             	add    esp,0x10
c001e033:	84 c0                	test   al,al
c001e035:	74 dc                	je     c001e013 <setupMultitasking(void (*)())+0x9>
c001e037:	83 ec 0c             	sub    esp,0xc
c001e03a:	68 3f 07 00 00       	push   0x73f
c001e03f:	e8 fc 17 ff ff       	call   c000f840 <malloc>
c001e044:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e04b:	89 c3                	mov    ebx,eax
c001e04d:	6a 00                	push   0x0
c001e04f:	68 63 c3 02 c0       	push   0xc002c363
c001e054:	6a 01                	push   0x1
c001e056:	50                   	push   eax
c001e057:	e8 b0 fb ff ff       	call   c001dc0c <Process::Process(bool, char const*, Process*, char**)>
c001e05c:	83 c4 18             	add    esp,0x18
c001e05f:	89 1d f4 1a 03 c0    	mov    DWORD PTR ds:0xc0031af4,ebx
c001e065:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e06b:	68 84 c4 02 c0       	push   0xc002c484
c001e070:	e8 9d 4e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e075:	58                   	pop    eax
c001e076:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e07c:	e8 06 2d ff ff       	call   c0010d87 <setActiveTerminal(VgaText*)>
c001e081:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e089:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e08f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e092:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e09c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0a2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0a8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0b2:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0bc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0c6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0cc:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0d2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0dc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0e2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0ec:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0f2:	5a                   	pop    edx
c001e0f3:	59                   	pop    ecx
c001e0f4:	68 5f c3 02 c0       	push   0xc002c35f
c001e0f9:	50                   	push   eax
c001e0fa:	e8 35 27 fe ff       	call   c0000834 <strcpy>
c001e0ff:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e106:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e10a:	83 c4 14             	add    esp,0x14
c001e10d:	5b                   	pop    ebx
c001e10e:	5e                   	pop    esi
c001e10f:	e9 40 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e114 <schedule()>:
c001e114:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001e119:	85 c0                	test   eax,eax
c001e11b:	74 0b                	je     c001e128 <schedule()+0x14>
c001e11d:	c7 05 c4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ac4,0x1
c001e127:	c3                   	ret    
c001e128:	53                   	push   ebx
c001e129:	83 ec 14             	sub    esp,0x14
c001e12c:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e131:	e8 00 a9 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	84 c0                	test   al,al
c001e13b:	75 38                	jne    c001e175 <schedule()+0x61>
c001e13d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e142:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e145:	4a                   	dec    edx
c001e146:	74 32                	je     c001e17a <schedule()+0x66>
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e150:	e8 d9 a8 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e155:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e15c:	89 c3                	mov    ebx,eax
c001e15e:	e8 ef a8 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e163:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e16a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e16d:	e8 07 fd ff ff       	call   c001de79 <switchToThread(ThreadControlBlock*)>
c001e172:	83 c4 10             	add    esp,0x10
c001e175:	83 c4 08             	add    esp,0x8
c001e178:	5b                   	pop    ebx
c001e179:	c3                   	ret    
c001e17a:	83 ec 08             	sub    esp,0x8
c001e17d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e184:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e18a:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e18f:	e8 6c a9 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e194:	83 c4 10             	add    esp,0x10
c001e197:	eb af                	jmp    c001e148 <schedule()+0x34>

c001e199 <unlockStuff()>:
c001e199:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001e19e:	48                   	dec    eax
c001e19f:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c001e1a4:	75 09                	jne    c001e1af <unlockStuff()+0x16>
c001e1a6:	a1 c4 1a 03 c0       	mov    eax,ds:0xc0031ac4
c001e1ab:	85 c0                	test   eax,eax
c001e1ad:	75 05                	jne    c001e1b4 <unlockStuff()+0x1b>
c001e1af:	e9 15 fc ff ff       	jmp    c001ddc9 <enableIRQs()>
c001e1b4:	83 ec 0c             	sub    esp,0xc
c001e1b7:	c7 05 c4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ac4,0x0
c001e1c1:	e8 4e ff ff ff       	call   c001e114 <schedule()>
c001e1c6:	83 c4 0c             	add    esp,0xc
c001e1c9:	e9 fb fb ff ff       	jmp    c001ddc9 <enableIRQs()>

c001e1ce <Semaphore::tryAcquire()>:
c001e1ce:	83 ec 0c             	sub    esp,0xc
c001e1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d5:	e8 25 fc ff ff       	call   c001ddff <lockStuff()>
c001e1da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1dd:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1df:	7c 0b                	jl     c001e1ec <Semaphore::tryAcquire()+0x1e>
c001e1e1:	e8 b3 ff ff ff       	call   c001e199 <unlockStuff()>
c001e1e6:	31 c0                	xor    eax,eax
c001e1e8:	83 c4 0c             	add    esp,0xc
c001e1eb:	c3                   	ret    
c001e1ec:	42                   	inc    edx
c001e1ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1f0:	e8 a4 ff ff ff       	call   c001e199 <unlockStuff()>
c001e1f5:	b0 01                	mov    al,0x1
c001e1f7:	83 c4 0c             	add    esp,0xc
c001e1fa:	c3                   	ret    
c001e1fb:	90                   	nop

c001e1fc <Semaphore::assertLocked(char const*)>:
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e203:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e207:	e8 f3 fb ff ff       	call   c001ddff <lockStuff()>
c001e20c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e20e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e211:	7c 05                	jl     c001e218 <Semaphore::assertLocked(char const*)+0x1c>
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	eb 81                	jmp    c001e199 <unlockStuff()>
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	52                   	push   edx
c001e21c:	e8 92 c3 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001e221:	83 c4 10             	add    esp,0x10
c001e224:	83 c4 0c             	add    esp,0xc
c001e227:	e9 6d ff ff ff       	jmp    c001e199 <unlockStuff()>

c001e22c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	e8 8f fb ff ff       	call   c001ddc3 <getIRQNestingLevel()>
c001e234:	83 ec 08             	sub    esp,0x8
c001e237:	50                   	push   eax
c001e238:	68 b8 c4 02 c0       	push   0xc002c4b8
c001e23d:	e8 d0 4c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e242:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e24b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e24e:	e8 c1 fe ff ff       	call   c001e114 <schedule()>
c001e253:	e8 82 fb ff ff       	call   c001ddda <unlockScheduler()>
c001e258:	e8 66 fb ff ff       	call   c001ddc3 <getIRQNestingLevel()>
c001e25d:	5a                   	pop    edx
c001e25e:	59                   	pop    ecx
c001e25f:	50                   	push   eax
c001e260:	68 ec c4 02 c0       	push   0xc002c4ec
c001e265:	e8 a8 4c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e26a:	83 c4 1c             	add    esp,0x1c
c001e26d:	c3                   	ret    

c001e26e <blockTask(TaskState)>:
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e275:	e8 5e fb ff ff       	call   c001ddd8 <lockScheduler()>
c001e27a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e27f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e282:	e8 8d fe ff ff       	call   c001e114 <schedule()>
c001e287:	83 c4 0c             	add    esp,0xc
c001e28a:	e9 4b fb ff ff       	jmp    c001ddda <unlockScheduler()>

c001e28f <waitTask(int, int*, int)>:
c001e28f:	83 ec 18             	sub    esp,0x18
c001e292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e29b:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e29e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a7:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2aa:	6a 07                	push   0x7
c001e2ac:	e8 bd ff ff ff       	call   c001e26e <blockTask(TaskState)>
c001e2b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b6:	83 c4 10             	add    esp,0x10
c001e2b9:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2bc:	85 d2                	test   edx,edx
c001e2be:	74 0a                	je     c001e2ca <waitTask(int, int*, int)+0x3b>
c001e2c0:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2c3:	89 02                	mov    DWORD PTR [edx],eax
c001e2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ca:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2cd:	83 c4 0c             	add    esp,0xc
c001e2d0:	c3                   	ret    

c001e2d1 <nanoSleepUntil(unsigned long long)>:
c001e2d1:	83 ec 0c             	sub    esp,0xc
c001e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2dc:	3b 05 10 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec10
c001e2e2:	89 d1                	mov    ecx,edx
c001e2e4:	1b 0d 14 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec14
c001e2ea:	73 04                	jae    c001e2f0 <nanoSleepUntil(unsigned long long)+0x1f>
c001e2ec:	83 c4 0c             	add    esp,0xc
c001e2ef:	c3                   	ret    
c001e2f0:	e8 0a fb ff ff       	call   c001ddff <lockStuff()>
c001e2f5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2fb:	83 ec 08             	sub    esp,0x8
c001e2fe:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e301:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e304:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e30a:	68 dc 1a 03 c0       	push   0xc0031adc
c001e30f:	e8 ec a7 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e314:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e31b:	e8 4e ff ff ff       	call   c001e26e <blockTask(TaskState)>
c001e320:	83 c4 1c             	add    esp,0x1c
c001e323:	e9 71 fe ff ff       	jmp    c001e199 <unlockStuff()>

c001e328 <nanoSleep(unsigned long long)>:
c001e328:	a1 10 ec 02 c0       	mov    eax,ds:0xc002ec10
c001e32d:	8b 15 14 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec14
c001e333:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e337:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e33b:	eb 94                	jmp    c001e2d1 <nanoSleepUntil(unsigned long long)>

c001e33d <sleep(unsigned long long)>:
c001e33d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e345:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e34a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e34e:	01 ca                	add    edx,ecx
c001e350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e354:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e358:	eb ce                	jmp    c001e328 <nanoSleep(unsigned long long)>

c001e35a <Semaphore::acquire()>:
c001e35a:	83 ec 0c             	sub    esp,0xc
c001e35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e361:	e8 99 fa ff ff       	call   c001ddff <lockStuff()>
c001e366:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e369:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e36b:	7d 0c                	jge    c001e379 <Semaphore::acquire()+0x1f>
c001e36d:	42                   	inc    edx
c001e36e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e371:	83 c4 0c             	add    esp,0xc
c001e374:	e9 20 fe ff ff       	jmp    c001e199 <unlockStuff()>
c001e379:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e37f:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e386:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e389:	85 d2                	test   edx,edx
c001e38b:	74 2a                	je     c001e3b7 <Semaphore::acquire()+0x5d>
c001e38d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e390:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e396:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e399:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3a5:	6a 05                	push   0x5
c001e3a7:	e8 c2 fe ff ff       	call   c001e26e <blockTask(TaskState)>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	83 c4 0c             	add    esp,0xc
c001e3b2:	e9 e2 fd ff ff       	jmp    c001e199 <unlockStuff()>
c001e3b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3c0:	eb d7                	jmp    c001e399 <Semaphore::acquire()+0x3f>

c001e3c2 <taskReturned>:
c001e3c2:	83 ec 18             	sub    esp,0x18
c001e3c5:	68 20 c5 02 c0       	push   0xc002c520
c001e3ca:	e8 e4 c1 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001e3cf:	83 c4 10             	add    esp,0x10
c001e3d2:	83 ec 0c             	sub    esp,0xc
c001e3d5:	6a 02                	push   0x2
c001e3d7:	e8 92 fe ff ff       	call   c001e26e <blockTask(TaskState)>
c001e3dc:	e8 f7 f9 ff ff       	call   c001ddd8 <lockScheduler()>
c001e3e1:	e8 2e fd ff ff       	call   c001e114 <schedule()>
c001e3e6:	e8 ef f9 ff ff       	call   c001ddda <unlockScheduler()>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	eb e2                	jmp    c001e3d2 <taskReturned+0x10>

c001e3f0 <unblockTask(ThreadControlBlock*)>:
c001e3f0:	53                   	push   ebx
c001e3f1:	83 ec 08             	sub    esp,0x8
c001e3f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3f8:	e8 db f9 ff ff       	call   c001ddd8 <lockScheduler()>
c001e3fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e400:	85 c0                	test   eax,eax
c001e402:	74 5c                	je     c001e460 <unblockTask(ThreadControlBlock*)+0x70>
c001e404:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e407:	48                   	dec    eax
c001e408:	74 31                	je     c001e43b <unblockTask(ThreadControlBlock*)+0x4b>
c001e40a:	83 ec 0c             	sub    esp,0xc
c001e40d:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e412:	e8 17 a6 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e417:	83 c4 10             	add    esp,0x10
c001e41a:	85 c0                	test   eax,eax
c001e41c:	75 17                	jne    c001e435 <unblockTask(ThreadControlBlock*)+0x45>
c001e41e:	eb 65                	jmp    c001e485 <unblockTask(ThreadControlBlock*)+0x95>
c001e420:	83 ec 08             	sub    esp,0x8
c001e423:	50                   	push   eax
c001e424:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e429:	e8 da a8 00 00       	call   c0028d08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	85 c0                	test   eax,eax
c001e433:	74 50                	je     c001e485 <unblockTask(ThreadControlBlock*)+0x95>
c001e435:	39 c3                	cmp    ebx,eax
c001e437:	75 e7                	jne    c001e420 <unblockTask(ThreadControlBlock*)+0x30>
c001e439:	eb 1c                	jmp    c001e457 <unblockTask(ThreadControlBlock*)+0x67>
c001e43b:	83 ec 0c             	sub    esp,0xc
c001e43e:	68 10 c6 02 c0       	push   0xc002c610
c001e443:	e8 ca 4a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e448:	c7 04 24 9c c5 02 c0 	mov    DWORD PTR [esp],0xc002c59c
c001e44f:	e8 be 4a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e454:	83 c4 10             	add    esp,0x10
c001e457:	83 c4 08             	add    esp,0x8
c001e45a:	5b                   	pop    ebx
c001e45b:	e9 7a f9 ff ff       	jmp    c001ddda <unlockScheduler()>
c001e460:	83 ec 0c             	sub    esp,0xc
c001e463:	68 54 c5 02 c0       	push   0xc002c554
c001e468:	e8 a5 4a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e46d:	c7 04 24 9c c5 02 c0 	mov    DWORD PTR [esp],0xc002c59c
c001e474:	e8 99 4a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e479:	83 c4 10             	add    esp,0x10
c001e47c:	83 c4 08             	add    esp,0x8
c001e47f:	5b                   	pop    ebx
c001e480:	e9 55 f9 ff ff       	jmp    c001ddda <unlockScheduler()>
c001e485:	83 ec 08             	sub    esp,0x8
c001e488:	53                   	push   ebx
c001e489:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e48e:	e8 6d a6 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e493:	83 c4 10             	add    esp,0x10
c001e496:	83 c4 08             	add    esp,0x8
c001e499:	5b                   	pop    ebx
c001e49a:	e9 3b f9 ff ff       	jmp    c001ddda <unlockScheduler()>

c001e49f <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e49f:	55                   	push   ebp
c001e4a0:	57                   	push   edi
c001e4a1:	56                   	push   esi
c001e4a2:	53                   	push   ebx
c001e4a3:	83 ec 1c             	sub    esp,0x1c
c001e4a6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4aa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4ad:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4b3:	85 ff                	test   edi,edi
c001e4b5:	7e 20                	jle    c001e4d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4b7:	31 f6                	xor    esi,esi
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4c3:	46                   	inc    esi
c001e4c4:	e8 87 13 ff ff       	call   c000f850 <free>
c001e4c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4d5:	7f e2                	jg     c001e4b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4d7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4e1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4e6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4e9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4ec:	d3 c0                	rol    eax,cl
c001e4ee:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4f5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4f8:	89 f7                	mov    edi,esi
c001e4fa:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e502:	0f 85 74 01 00 00    	jne    c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e508:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e50e:	85 ed                	test   ebp,ebp
c001e510:	74 1b                	je     c001e52d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e512:	83 ec 0c             	sub    esp,0xc
c001e515:	55                   	push   ebp
c001e516:	e8 05 be ff ff       	call   c001a320 <EnvVarContainer::~EnvVarContainer()>
c001e51b:	59                   	pop    ecx
c001e51c:	5e                   	pop    esi
c001e51d:	6a 0c                	push   0xc
c001e51f:	55                   	push   ebp
c001e520:	e8 0d 49 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c001e525:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e528:	83 c4 10             	add    esp,0x10
c001e52b:	89 f7                	mov    edi,esi
c001e52d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e533:	85 c0                	test   eax,eax
c001e535:	0f 84 aa 00 00 00    	je     c001e5e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e53b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e53e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e542:	31 c9                	xor    ecx,ecx
c001e544:	eb 10                	jmp    c001e556 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e546:	41                   	inc    ecx
c001e547:	83 f9 10             	cmp    ecx,0x10
c001e54a:	0f 84 95 00 00 00    	je     c001e5e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e550:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e556:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e55d:	d3 fa                	sar    edx,cl
c001e55f:	83 e2 01             	and    edx,0x1
c001e562:	74 e2                	je     c001e546 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e564:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e567:	01 ca                	add    edx,ecx
c001e569:	89 d5                	mov    ebp,edx
c001e56b:	c1 e5 05             	shl    ebp,0x5
c001e56e:	01 ea                	add    edx,ebp
c001e570:	01 d0                	add    eax,edx
c001e572:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e578:	83 fd 07             	cmp    ebp,0x7
c001e57b:	75 c9                	jne    c001e546 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e57d:	05 40 02 00 00       	add    eax,0x240
c001e582:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e585:	83 fd ff             	cmp    ebp,0xffffffff
c001e588:	0f 8c 08 01 00 00    	jl     c001e696 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e58e:	0f 84 b9 01 00 00    	je     c001e74d <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e594:	85 ed                	test   ebp,ebp
c001e596:	0f 84 a0 01 00 00    	je     c001e73c <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e59c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e59e:	75 a6                	jne    c001e546 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5a0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5aa:	01 d0                	add    eax,edx
c001e5ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5b0:	83 ec 0c             	sub    esp,0xc
c001e5b3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5bc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5c2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5c9:	50                   	push   eax
c001e5ca:	e8 21 fe ff ff       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c001e5cf:	83 c4 10             	add    esp,0x10
c001e5d2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5d9:	89 f7                	mov    edi,esi
c001e5db:	41                   	inc    ecx
c001e5dc:	83 f9 10             	cmp    ecx,0x10
c001e5df:	0f 85 6b ff ff ff    	jne    c001e550 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5e5:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5eb:	85 c0                	test   eax,eax
c001e5ed:	74 5d                	je     c001e64c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5ef:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5f5:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5fb:	74 4f                	je     c001e64c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5fd:	83 ec 0c             	sub    esp,0xc
c001e600:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e605:	e8 24 a4 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e60a:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e611:	89 c7                	mov    edi,eax
c001e613:	e8 1e a4 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e618:	83 c4 10             	add    esp,0x10
c001e61b:	84 c0                	test   al,al
c001e61d:	0f 84 e4 00 00 00    	je     c001e707 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e626:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e62c:	85 d2                	test   edx,edx
c001e62e:	74 0f                	je     c001e63f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e630:	83 ec 0c             	sub    esp,0xc
c001e633:	8b 02                	mov    eax,DWORD PTR [edx]
c001e635:	52                   	push   edx
c001e636:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e639:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63c:	83 c4 10             	add    esp,0x10
c001e63f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e649:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e64c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e652:	85 db                	test   ebx,ebx
c001e654:	74 16                	je     c001e66c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e656:	83 ec 0c             	sub    esp,0xc
c001e659:	53                   	push   ebx
c001e65a:	e8 af 3b ff ff       	call   c001220e <VAS::~VAS()>
c001e65f:	58                   	pop    eax
c001e660:	5a                   	pop    edx
c001e661:	6a 10                	push   0x10
c001e663:	53                   	push   ebx
c001e664:	e8 c9 47 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c001e669:	83 c4 10             	add    esp,0x10
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	68 6a c3 02 c0       	push   0xc002c36a
c001e674:	e8 99 48 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e679:	83 c4 10             	add    esp,0x10
c001e67c:	83 ec 08             	sub    esp,0x8
c001e67f:	68 3f 07 00 00       	push   0x73f
c001e684:	68 78 c3 02 c0       	push   0xc002c378
c001e689:	e8 84 48 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e68e:	83 c4 2c             	add    esp,0x2c
c001e691:	5b                   	pop    ebx
c001e692:	5e                   	pop    esi
c001e693:	5f                   	pop    edi
c001e694:	5d                   	pop    ebp
c001e695:	c3                   	ret    
c001e696:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	68 54 c6 02 c0       	push   0xc002c654
c001e6a2:	e8 0c bf ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001e6a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6aa:	83 c4 10             	add    esp,0x10
c001e6ad:	89 f7                	mov    edi,esi
c001e6af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6b3:	e9 8e fe ff ff       	jmp    c001e546 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6b8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6be:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6c4:	75 1c                	jne    c001e6e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6c6:	83 ec 0c             	sub    esp,0xc
c001e6c9:	68 bc c6 02 c0       	push   0xc002c6bc
c001e6ce:	e8 3f 48 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e6d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6da:	e8 8f fb ff ff       	call   c001e26e <blockTask(TaskState)>
c001e6df:	83 c4 10             	add    esp,0x10
c001e6e2:	83 ec 08             	sub    esp,0x8
c001e6e5:	56                   	push   esi
c001e6e6:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e6eb:	e8 10 a4 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6f0:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e6f7:	e8 32 a3 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6fc:	83 c4 10             	add    esp,0x10
c001e6ff:	39 f8                	cmp    eax,edi
c001e701:	0f 84 1c ff ff ff    	je     c001e623 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e707:	83 ec 0c             	sub    esp,0xc
c001e70a:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e70f:	e8 1a a3 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e714:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e71b:	89 c6                	mov    esi,eax
c001e71d:	e8 30 a3 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	39 f3                	cmp    ebx,esi
c001e727:	74 b9                	je     c001e6e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e729:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e72c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e72f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e735:	75 ab                	jne    c001e6e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e737:	e9 7c ff ff ff       	jmp    c001e6b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e73c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e740:	83 ec 0c             	sub    esp,0xc
c001e743:	68 88 c6 02 c0       	push   0xc002c688
c001e748:	e9 55 ff ff ff       	jmp    c001e6a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e74d:	8b 36                	mov    esi,DWORD PTR [esi]
c001e74f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e753:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e756:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e759:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e75f:	01 d7                	add    edi,edx
c001e761:	89 f8                	mov    eax,edi
c001e763:	e9 44 fe ff ff       	jmp    c001e5ac <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e768 <cleanerTaskFunction(void*)>:
c001e768:	53                   	push   ebx
c001e769:	83 ec 08             	sub    esp,0x8
c001e76c:	e8 69 f6 ff ff       	call   c001ddda <unlockScheduler()>
c001e771:	e8 62 f6 ff ff       	call   c001ddd8 <lockScheduler()>
c001e776:	80 3d ac 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aac,0x0
c001e77d:	0f 85 8e 00 00 00    	jne    c001e811 <cleanerTaskFunction(void*)+0xa9>
c001e783:	83 ec 0c             	sub    esp,0xc
c001e786:	6a 02                	push   0x2
c001e788:	e8 9f fa ff ff       	call   c001e22c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e78d:	83 c4 10             	add    esp,0x10
c001e790:	c6 05 ac 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031aac,0x0
c001e797:	e8 63 f6 ff ff       	call   c001ddff <lockStuff()>
c001e79c:	e8 37 f6 ff ff       	call   c001ddd8 <lockScheduler()>
c001e7a1:	83 ec 0c             	sub    esp,0xc
c001e7a4:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e7a9:	e8 88 a2 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7ae:	83 c4 10             	add    esp,0x10
c001e7b1:	84 c0                	test   al,al
c001e7b3:	75 40                	jne    c001e7f5 <cleanerTaskFunction(void*)+0x8d>
c001e7b5:	83 ec 0c             	sub    esp,0xc
c001e7b8:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e7bd:	e8 6c a2 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7c2:	c7 04 24 d0 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ad0
c001e7c9:	89 c3                	mov    ebx,eax
c001e7cb:	e8 82 a2 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7d0:	c7 04 24 8e c3 02 c0 	mov    DWORD PTR [esp],0xc002c38e
c001e7d7:	e8 36 47 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7df:	e8 bb fc ff ff       	call   c001e49f <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7e4:	c7 04 24 a7 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3a7
c001e7eb:	e8 22 47 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e7f0:	83 c4 10             	add    esp,0x10
c001e7f3:	eb ac                	jmp    c001e7a1 <cleanerTaskFunction(void*)+0x39>
c001e7f5:	e8 e0 f5 ff ff       	call   c001ddda <unlockScheduler()>
c001e7fa:	e8 9a f9 ff ff       	call   c001e199 <unlockStuff()>
c001e7ff:	e8 d4 f5 ff ff       	call   c001ddd8 <lockScheduler()>
c001e804:	80 3d ac 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aac,0x0
c001e80b:	0f 84 72 ff ff ff    	je     c001e783 <cleanerTaskFunction(void*)+0x1b>
c001e811:	e8 c4 f5 ff ff       	call   c001ddda <unlockScheduler()>
c001e816:	e9 75 ff ff ff       	jmp    c001e790 <cleanerTaskFunction(void*)+0x28>

c001e81b <terminateTask(int)>:
c001e81b:	83 ec 14             	sub    esp,0x14
c001e81e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e823:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e826:	83 c0 0c             	add    eax,0xc
c001e829:	50                   	push   eax
c001e82a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001e82f:	e8 de 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e834:	e8 c6 f5 ff ff       	call   c001ddff <lockStuff()>
c001e839:	e8 9a f5 ff ff       	call   c001ddd8 <lockScheduler()>
c001e83e:	c7 04 24 ba c3 02 c0 	mov    DWORD PTR [esp],0xc002c3ba
c001e845:	e8 c8 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e84a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e84e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e853:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e85b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e85e:	5a                   	pop    edx
c001e85f:	59                   	pop    ecx
c001e860:	50                   	push   eax
c001e861:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e866:	e8 95 a2 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e86b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e870:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e877:	c7 04 24 d4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3d4
c001e87e:	e8 8f 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c001e88b:	85 c0                	test   eax,eax
c001e88d:	74 5a                	je     c001e8e9 <terminateTask(int)+0xce>
c001e88f:	83 ec 0c             	sub    esp,0xc
c001e892:	68 ee c3 02 c0       	push   0xc002c3ee
c001e897:	e8 76 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e89c:	58                   	pop    eax
c001e89d:	c6 05 ac 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aac,0x1
c001e8a4:	ff 35 a8 1a 03 c0    	push   DWORD PTR ds:0xc0031aa8
c001e8aa:	e8 41 fb ff ff       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c001e8af:	c7 04 24 08 c4 02 c0 	mov    DWORD PTR [esp],0xc002c408
c001e8b6:	e8 57 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e8bb:	83 c4 10             	add    esp,0x10
c001e8be:	e8 17 f5 ff ff       	call   c001ddda <unlockScheduler()>
c001e8c3:	e8 d1 f8 ff ff       	call   c001e199 <unlockStuff()>
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	68 40 c4 02 c0       	push   0xc002c440
c001e8d0:	e8 3d 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	e8 fb f4 ff ff       	call   c001ddd8 <lockScheduler()>
c001e8dd:	e8 32 f8 ff ff       	call   c001e114 <schedule()>
c001e8e2:	e8 f3 f4 ff ff       	call   c001ddda <unlockScheduler()>
c001e8e7:	eb ef                	jmp    c001e8d8 <terminateTask(int)+0xbd>
c001e8e9:	83 ec 0c             	sub    esp,0xc
c001e8ec:	68 22 c4 02 c0       	push   0xc002c422
c001e8f1:	e8 1c 46 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001e8f6:	83 c4 10             	add    esp,0x10
c001e8f9:	eb c3                	jmp    c001e8be <terminateTask(int)+0xa3>

c001e8fb <Thr::terminateFromIRQ(int)>:
c001e8fb:	83 ec 18             	sub    esp,0x18
c001e8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e902:	e8 14 ff ff ff       	call   c001e81b <terminateTask(int)>
c001e907:	90                   	nop

c001e908 <Semaphore::release()>:
c001e908:	83 ec 0c             	sub    esp,0xc
c001e90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90f:	e8 eb f4 ff ff       	call   c001ddff <lockStuff()>
c001e914:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e917:	85 d2                	test   edx,edx
c001e919:	74 1a                	je     c001e935 <Semaphore::release()+0x2d>
c001e91b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e91e:	83 ec 0c             	sub    esp,0xc
c001e921:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e924:	52                   	push   edx
c001e925:	e8 c6 fa ff ff       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c001e92a:	83 c4 10             	add    esp,0x10
c001e92d:	83 c4 0c             	add    esp,0xc
c001e930:	e9 64 f8 ff ff       	jmp    c001e199 <unlockStuff()>
c001e935:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e938:	83 c4 0c             	add    esp,0xc
c001e93b:	e9 59 f8 ff ff       	jmp    c001e199 <unlockStuff()>

c001e940 <__static_initialization_and_destruction_0(int, int)>:
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e948:	0f 85 88 00 00 00    	jne    c001e9d6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e94e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e956:	75 7e                	jne    c001e9d6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e960:	e8 4b a3 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	83 ec 04             	sub    esp,0x4
c001e96b:	68 9c d4 02 c0       	push   0xc002d49c
c001e970:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e975:	68 70 8c 02 c0       	push   0xc0028c70
c001e97a:	e8 2d 44 ff ff       	call   c0012dac <__cxa_atexit>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	83 ec 0c             	sub    esp,0xc
c001e985:	68 dc 1a 03 c0       	push   0xc0031adc
c001e98a:	e8 21 a3 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	83 ec 04             	sub    esp,0x4
c001e995:	68 9c d4 02 c0       	push   0xc002d49c
c001e99a:	68 dc 1a 03 c0       	push   0xc0031adc
c001e99f:	68 70 8c 02 c0       	push   0xc0028c70
c001e9a4:	e8 03 44 ff ff       	call   c0012dac <__cxa_atexit>
c001e9a9:	83 c4 10             	add    esp,0x10
c001e9ac:	83 ec 0c             	sub    esp,0xc
c001e9af:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e9b4:	e8 f7 a2 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9b9:	83 c4 10             	add    esp,0x10
c001e9bc:	83 ec 04             	sub    esp,0x4
c001e9bf:	68 9c d4 02 c0       	push   0xc002d49c
c001e9c4:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e9c9:	68 70 8c 02 c0       	push   0xc0028c70
c001e9ce:	e8 d9 43 ff ff       	call   c0012dac <__cxa_atexit>
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	90                   	nop
c001e9d7:	83 c4 0c             	add    esp,0xc
c001e9da:	c3                   	ret    

c001e9db <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9db:	83 ec 0c             	sub    esp,0xc
c001e9de:	83 ec 08             	sub    esp,0x8
c001e9e1:	68 ff ff 00 00       	push   0xffff
c001e9e6:	6a 01                	push   0x1
c001e9e8:	e8 53 ff ff ff       	call   c001e940 <__static_initialization_and_destruction_0(int, int)>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	83 c4 0c             	add    esp,0xc
c001e9f3:	c3                   	ret    

c001e9f4 <Vm::inbv(unsigned short)>:
c001e9f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9f8:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9fd:	75 06                	jne    c001ea05 <Vm::inbv(unsigned short)+0x11>
c001e9ff:	a0 2c 1b 03 c0       	mov    al,ds:0xc0031b2c
c001ea04:	c3                   	ret    
c001ea05:	ec                   	in     al,dx
c001ea06:	c3                   	ret    

c001ea07 <Vm::outbv(unsigned short, unsigned char)>:
c001ea07:	53                   	push   ebx
c001ea08:	83 ec 08             	sub    esp,0x8
c001ea0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea13:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea18:	75 38                	jne    c001ea52 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea1a:	0f b6 c3             	movzx  eax,bl
c001ea1d:	51                   	push   ecx
c001ea1e:	51                   	push   ecx
c001ea1f:	50                   	push   eax
c001ea20:	68 03 c7 02 c0       	push   0xc002c703
c001ea25:	e8 e8 44 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ea2a:	8b 15 2c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b2c
c001ea30:	83 c4 10             	add    esp,0x10
c001ea33:	8d 42 01             	lea    eax,[edx+0x1]
c001ea36:	88 9a 40 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4c0],bl
c001ea3c:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c001ea41:	83 f8 20             	cmp    eax,0x20
c001ea44:	75 0f                	jne    c001ea55 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea46:	c7 05 2c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b2c,0x1f
c001ea50:	eb 03                	jmp    c001ea55 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea52:	88 d8                	mov    al,bl
c001ea54:	ee                   	out    dx,al
c001ea55:	83 c4 08             	add    esp,0x8
c001ea58:	5b                   	pop    ebx
c001ea59:	c3                   	ret    

c001ea5a <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea64:	c1 e0 04             	shl    eax,0x4
c001ea67:	01 d0                	add    eax,edx
c001ea69:	c3                   	ret    

c001ea6a <Vm::getSegment(unsigned int)>:
c001ea6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6e:	c1 e8 10             	shr    eax,0x10
c001ea71:	c3                   	ret    

c001ea72 <Vm::getOffset(unsigned int)>:
c001ea72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea76:	c3                   	ret    

c001ea77 <Vm::mainloop2()>:
c001ea77:	83 ec 0c             	sub    esp,0xc
c001ea7a:	e8 59 f3 ff ff       	call   c001ddd8 <lockScheduler()>
c001ea7f:	83 ec 0c             	sub    esp,0xc
c001ea82:	c6 05 25 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b25,0x1
c001ea89:	6a 02                	push   0x2
c001ea8b:	e8 9c f7 ff ff       	call   c001e22c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea95:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea99:	52                   	push   edx
c001ea9a:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea9e:	52                   	push   edx
c001ea9f:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaa3:	52                   	push   edx
c001eaa4:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaa8:	50                   	push   eax
c001eaa9:	e8 4c 18 fe ff       	call   c00002fa <goToVM86>
c001eaae:	83 c4 2c             	add    esp,0x2c
c001eab1:	c3                   	ret    

c001eab2 <Vm::mainVm8086Loop(void*)>:
c001eab2:	83 ec 0c             	sub    esp,0xc
c001eab5:	e8 20 f3 ff ff       	call   c001ddda <unlockScheduler()>
c001eaba:	83 c4 0c             	add    esp,0xc
c001eabd:	eb b8                	jmp    c001ea77 <Vm::mainloop2()>

c001eabf <Vm::mainloop3(unsigned long)>:
c001eabf:	53                   	push   ebx
c001eac0:	83 ec 08             	sub    esp,0x8
c001eac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eac7:	e8 0c f3 ff ff       	call   c001ddd8 <lockScheduler()>
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	89 1d 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,ebx
c001ead5:	6a 02                	push   0x2
c001ead7:	c6 05 24 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b24,0x1
c001eade:	e8 49 f7 ff ff       	call   c001e22c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eae3:	83 c4 18             	add    esp,0x18
c001eae6:	5b                   	pop    ebx
c001eae7:	eb 8e                	jmp    c001ea77 <Vm::mainloop2()>

c001eae9 <Vm::initialise8086()>:
c001eae9:	83 ec 0c             	sub    esp,0xc
c001eaec:	68 80 00 00 00       	push   0x80
c001eaf1:	6a 00                	push   0x0
c001eaf3:	68 b2 ea 01 c0       	push   0xc001eab2
c001eaf8:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001eafe:	e8 07 f4 ff ff       	call   c001df0a <Process::createThread(void (*)(void*), void*, int)>
c001eb03:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb0a:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c001eb0f:	68 00 01 00 00       	push   0x100
c001eb14:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001eb19:	6a 00                	push   0x0
c001eb1b:	6a 00                	push   0x0
c001eb1d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb23:	e8 46 3b ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb28:	83 c4 2c             	add    esp,0x2c
c001eb2b:	c3                   	ret    

c001eb2c <Vm::finish8086()>:
c001eb2c:	53                   	push   ebx
c001eb2d:	83 ec 08             	sub    esp,0x8
c001eb30:	e8 a3 f2 ff ff       	call   c001ddd8 <lockScheduler()>
c001eb35:	80 3d 24 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b24,0x0
c001eb3c:	75 0c                	jne    c001eb4a <Vm::finish8086()+0x1e>
c001eb3e:	e8 d1 f5 ff ff       	call   c001e114 <schedule()>
c001eb43:	e8 92 f2 ff ff       	call   c001ddda <unlockScheduler()>
c001eb48:	eb e6                	jmp    c001eb30 <Vm::finish8086()+0x4>
c001eb4a:	83 ec 0c             	sub    esp,0xc
c001eb4d:	8b 1d 20 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b20
c001eb53:	ff 35 28 1b 03 c0    	push   DWORD PTR ds:0xc0031b28
c001eb59:	c6 05 24 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b24,0x0
c001eb60:	e8 8b f8 ff ff       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c001eb65:	e8 70 f2 ff ff       	call   c001ddda <unlockScheduler()>
c001eb6a:	89 d8                	mov    eax,ebx
c001eb6c:	83 c4 18             	add    esp,0x18
c001eb6f:	5b                   	pop    ebx
c001eb70:	c3                   	ret    

c001eb71 <Vm::getOutput8086(unsigned char*)>:
c001eb71:	83 ec 10             	sub    esp,0x10
c001eb74:	ff 35 2c 1b 03 c0    	push   DWORD PTR ds:0xc0031b2c
c001eb7a:	68 40 1b 03 c0       	push   0xc0031b40
c001eb7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb83:	e8 bc 1b fe ff       	call   c0000744 <memcpy>
c001eb88:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c001eb8d:	c7 05 2c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b2c,0x0
c001eb97:	83 c4 1c             	add    esp,0x1c
c001eb9a:	c3                   	ret    

c001eb9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb9b:	55                   	push   ebp
c001eb9c:	57                   	push   edi
c001eb9d:	56                   	push   esi
c001eb9e:	53                   	push   ebx
c001eb9f:	83 ec 2c             	sub    esp,0x2c
c001eba2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eba6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebaa:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebae:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebb2:	e8 21 f2 ff ff       	call   c001ddd8 <lockScheduler()>
c001ebb7:	a0 25 1b 03 c0       	mov    al,ds:0xc0031b25
c001ebbc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebc0:	84 c0                	test   al,al
c001ebc2:	75 0c                	jne    c001ebd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebc4:	e8 4b f5 ff ff       	call   c001e114 <schedule()>
c001ebc9:	e8 0c f2 ff ff       	call   c001ddda <unlockScheduler()>
c001ebce:	eb e2                	jmp    c001ebb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebd0:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001ebd5:	c7 05 2c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b2c,0x0
c001ebdf:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebe3:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ebe7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebeb:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebef:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebf3:	50                   	push   eax
c001ebf4:	6a 20                	push   0x20
c001ebf6:	6a 00                	push   0x0
c001ebf8:	68 40 1b 03 c0       	push   0xc0031b40
c001ebfd:	e8 76 1b fe ff       	call   c0000778 <memset>
c001ec02:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec09:	e8 32 0c ff ff       	call   c000f840 <malloc>
c001ec0e:	83 c4 0c             	add    esp,0xc
c001ec11:	89 c7                	mov    edi,eax
c001ec13:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001ec19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec1d:	50                   	push   eax
c001ec1e:	e8 47 48 ff ff       	call   c001346a <File::File(char const*, Process*)>
c001ec23:	83 c4 10             	add    esp,0x10
c001ec26:	85 ff                	test   edi,edi
c001ec28:	75 0a                	jne    c001ec34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec2a:	83 ec 0c             	sub    esp,0xc
c001ec2d:	68 1f c7 02 c0       	push   0xc002c71f
c001ec32:	eb 27                	jmp    c001ec5b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec34:	50                   	push   eax
c001ec35:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec39:	50                   	push   eax
c001ec3a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec3e:	50                   	push   eax
c001ec3f:	57                   	push   edi
c001ec40:	e8 35 4b ff ff       	call   c001377a <File::stat(unsigned long long*, bool*)>
c001ec45:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec4a:	83 c4 10             	add    esp,0x10
c001ec4d:	89 e8                	mov    eax,ebp
c001ec4f:	84 c0                	test   al,al
c001ec51:	74 19                	je     c001ec6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec53:	83 ec 0c             	sub    esp,0xc
c001ec56:	68 33 c7 02 c0       	push   0xc002c733
c001ec5b:	e8 53 b9 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001ec60:	31 ed                	xor    ebp,ebp
c001ec62:	e8 73 f1 ff ff       	call   c001ddda <unlockScheduler()>
c001ec67:	83 c4 10             	add    esp,0x10
c001ec6a:	eb 75                	jmp    c001ece1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec6c:	50                   	push   eax
c001ec6d:	50                   	push   eax
c001ec6e:	6a 01                	push   0x1
c001ec70:	57                   	push   edi
c001ec71:	e8 58 48 ff ff       	call   c00134ce <File::open(FileOpenMode)>
c001ec76:	83 c4 10             	add    esp,0x10
c001ec79:	85 c0                	test   eax,eax
c001ec7b:	74 17                	je     c001ec94 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec7d:	83 ec 0c             	sub    esp,0xc
c001ec80:	68 4c c7 02 c0       	push   0xc002c74c
c001ec85:	e8 29 b9 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001ec8a:	e8 4b f1 ff ff       	call   c001ddda <unlockScheduler()>
c001ec8f:	83 c4 10             	add    esp,0x10
c001ec92:	eb 4d                	jmp    c001ece1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec94:	0f b7 f6             	movzx  esi,si
c001ec97:	50                   	push   eax
c001ec98:	0f b7 db             	movzx  ebx,bx
c001ec9b:	50                   	push   eax
c001ec9c:	56                   	push   esi
c001ec9d:	53                   	push   ebx
c001ec9e:	e8 b7 fd ff ff       	call   c001ea5a <Vm::realToLinear(unsigned short, unsigned short)>
c001eca3:	5a                   	pop    edx
c001eca4:	8b 17                	mov    edx,DWORD PTR [edi]
c001eca6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecaa:	51                   	push   ecx
c001ecab:	50                   	push   eax
c001ecac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecb4:	57                   	push   edi
c001ecb5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecb8:	83 c4 14             	add    esp,0x14
c001ecbb:	57                   	push   edi
c001ecbc:	e8 6b 48 ff ff       	call   c001352c <File::close()>
c001ecc1:	c6 05 25 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b25,0x0
c001ecc8:	e8 0d f1 ff ff       	call   c001ddda <unlockScheduler()>
c001eccd:	59                   	pop    ecx
c001ecce:	ff 35 28 1b 03 c0    	push   DWORD PTR ds:0xc0031b28
c001ecd4:	e8 17 f7 ff ff       	call   c001e3f0 <unblockTask(ThreadControlBlock*)>
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ece1:	83 c4 2c             	add    esp,0x2c
c001ece4:	89 e8                	mov    eax,ebp
c001ece6:	5b                   	pop    ebx
c001ece7:	5e                   	pop    esi
c001ece8:	5f                   	pop    edi
c001ece9:	5d                   	pop    ebp
c001ecea:	c3                   	ret    

c001eceb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eceb:	57                   	push   edi
c001ecec:	56                   	push   esi
c001eced:	53                   	push   ebx
c001ecee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecfa:	83 e8 06             	sub    eax,0x6
c001ecfd:	0f b7 c0             	movzx  eax,ax
c001ed00:	50                   	push   eax
c001ed01:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed06:	50                   	push   eax
c001ed07:	e8 4e fd ff ff       	call   c001ea5a <Vm::realToLinear(unsigned short, unsigned short)>
c001ed0c:	5a                   	pop    edx
c001ed0d:	5e                   	pop    esi
c001ed0e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed11:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed14:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed1a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed1d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed20:	83 c2 02             	add    edx,0x2
c001ed23:	66 89 10             	mov    WORD PTR [eax],dx
c001ed26:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed29:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed2d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed30:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed34:	89 d6                	mov    esi,edx
c001ed36:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed3c:	66 81 e6 ff fd       	and    si,0xfdff
c001ed41:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed45:	74 07                	je     c001ed4e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed47:	89 d6                	mov    esi,edx
c001ed49:	66 81 ce 00 02       	or     si,0x200
c001ed4e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed57:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed5b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed63:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed66:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed6e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed71:	5b                   	pop    ebx
c001ed72:	5e                   	pop    esi
c001ed73:	5f                   	pop    edi
c001ed74:	c3                   	ret    

c001ed75 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed75:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed7a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7f:	c1 e0 04             	shl    eax,0x4
c001ed82:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed85:	c3                   	ret    

c001ed86 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed90:	c1 e0 04             	shl    eax,0x4
c001ed93:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed97:	c3                   	ret    

c001ed98 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed98:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda2:	c1 e0 04             	shl    eax,0x4
c001eda5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eda8:	c3                   	ret    

c001eda9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eda9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edae:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb3:	c1 e0 04             	shl    eax,0x4
c001edb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edba:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edbd:	c3                   	ret    

c001edbe <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edbe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc8:	c1 e0 04             	shl    eax,0x4
c001edcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edcf:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edd3:	c3                   	ret    

c001edd4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edd4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edde:	c1 e0 04             	shl    eax,0x4
c001ede1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ede5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ede8:	c3                   	ret    

c001ede9 <Vm::faultHandler(regs*)>:
c001ede9:	55                   	push   ebp
c001edea:	57                   	push   edi
c001edeb:	56                   	push   esi
c001edec:	53                   	push   ebx
c001eded:	83 ec 1c             	sub    esp,0x1c
c001edf0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edf4:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001edf7:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001edfa:	0f b7 c1             	movzx  eax,cx
c001edfd:	50                   	push   eax
c001edfe:	0f b7 c3             	movzx  eax,bx
c001ee01:	c1 e3 04             	shl    ebx,0x4
c001ee04:	50                   	push   eax
c001ee05:	e8 50 fc ff ff       	call   c001ea5a <Vm::realToLinear(unsigned short, unsigned short)>
c001ee0a:	5a                   	pop    edx
c001ee0b:	89 c5                	mov    ebp,eax
c001ee0d:	5e                   	pop    esi
c001ee0e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee12:	50                   	push   eax
c001ee13:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee17:	50                   	push   eax
c001ee18:	e8 3d fc ff ff       	call   c001ea5a <Vm::realToLinear(unsigned short, unsigned short)>
c001ee1d:	01 cb                	add    ebx,ecx
c001ee1f:	89 c6                	mov    esi,eax
c001ee21:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee25:	50                   	push   eax
c001ee26:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee2a:	50                   	push   eax
c001ee2b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee2f:	50                   	push   eax
c001ee30:	55                   	push   ebp
c001ee31:	53                   	push   ebx
c001ee32:	b3 06                	mov    bl,0x6
c001ee34:	68 65 c7 02 c0       	push   0xc002c765
c001ee39:	e8 d4 40 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ee3e:	83 c4 20             	add    esp,0x20
c001ee41:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee46:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee4b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee4f:	3c 9d                	cmp    al,0x9d
c001ee51:	0f 84 d7 02 00 00    	je     c001f12e <Vm::faultHandler(regs*)+0x345>
c001ee57:	0f 87 a3 00 00 00    	ja     c001ef00 <Vm::faultHandler(regs*)+0x117>
c001ee5d:	3c 66                	cmp    al,0x66
c001ee5f:	0f 84 15 02 00 00    	je     c001f07a <Vm::faultHandler(regs*)+0x291>
c001ee65:	77 5f                	ja     c001eec6 <Vm::faultHandler(regs*)+0xdd>
c001ee67:	3c 36                	cmp    al,0x36
c001ee69:	0f 84 f1 01 00 00    	je     c001f060 <Vm::faultHandler(regs*)+0x277>
c001ee6f:	77 28                	ja     c001ee99 <Vm::faultHandler(regs*)+0xb0>
c001ee71:	3c 26                	cmp    al,0x26
c001ee73:	0f 84 99 01 00 00    	je     c001f012 <Vm::faultHandler(regs*)+0x229>
c001ee79:	3c 2e                	cmp    al,0x2e
c001ee7b:	0f 85 3b 07 00 00    	jne    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001ee81:	83 ec 0c             	sub    esp,0xc
c001ee84:	31 db                	xor    ebx,ebx
c001ee86:	68 7a c7 02 c0       	push   0xc002c77a
c001ee8b:	e8 82 40 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ee90:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	45                   	inc    ebp
c001ee97:	eb b2                	jmp    c001ee4b <Vm::faultHandler(regs*)+0x62>
c001ee99:	3c 64                	cmp    al,0x64
c001ee9b:	0f 84 8b 01 00 00    	je     c001f02c <Vm::faultHandler(regs*)+0x243>
c001eea1:	0f 87 9f 01 00 00    	ja     c001f046 <Vm::faultHandler(regs*)+0x25d>
c001eea7:	3c 3e                	cmp    al,0x3e
c001eea9:	0f 85 0d 07 00 00    	jne    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001eeaf:	83 ec 0c             	sub    esp,0xc
c001eeb2:	b3 01                	mov    bl,0x1
c001eeb4:	68 7e c7 02 c0       	push   0xc002c77e
c001eeb9:	e8 54 40 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001eebe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eec1:	83 c4 10             	add    esp,0x10
c001eec4:	eb d0                	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001eec6:	3c 6d                	cmp    al,0x6d
c001eec8:	0f 84 af 03 00 00    	je     c001f27d <Vm::faultHandler(regs*)+0x494>
c001eece:	77 15                	ja     c001eee5 <Vm::faultHandler(regs*)+0xfc>
c001eed0:	3c 67                	cmp    al,0x67
c001eed2:	0f 84 bf 01 00 00    	je     c001f097 <Vm::faultHandler(regs*)+0x2ae>
c001eed8:	3c 6c                	cmp    al,0x6c
c001eeda:	0f 84 3f 03 00 00    	je     c001f21f <Vm::faultHandler(regs*)+0x436>
c001eee0:	e9 d7 06 00 00       	jmp    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001eee5:	3c 6f                	cmp    al,0x6f
c001eee7:	0f 84 a4 04 00 00    	je     c001f391 <Vm::faultHandler(regs*)+0x5a8>
c001eeed:	0f 82 11 04 00 00    	jb     c001f304 <Vm::faultHandler(regs*)+0x51b>
c001eef3:	3c 9c                	cmp    al,0x9c
c001eef5:	0f 84 ba 01 00 00    	je     c001f0b5 <Vm::faultHandler(regs*)+0x2cc>
c001eefb:	e9 bc 06 00 00       	jmp    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001ef00:	3c ec                	cmp    al,0xec
c001ef02:	0f 84 24 06 00 00    	je     c001f52c <Vm::faultHandler(regs*)+0x743>
c001ef08:	0f 87 93 00 00 00    	ja     c001efa1 <Vm::faultHandler(regs*)+0x1b8>
c001ef0e:	3c e4                	cmp    al,0xe4
c001ef10:	0f 84 5c 05 00 00    	je     c001f472 <Vm::faultHandler(regs*)+0x689>
c001ef16:	77 6a                	ja     c001ef82 <Vm::faultHandler(regs*)+0x199>
c001ef18:	3c cd                	cmp    al,0xcd
c001ef1a:	0f 84 7e 02 00 00    	je     c001f19e <Vm::faultHandler(regs*)+0x3b5>
c001ef20:	3c cf                	cmp    al,0xcf
c001ef22:	0f 85 94 06 00 00    	jne    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001ef28:	83 ec 0c             	sub    esp,0xc
c001ef2b:	68 c2 c7 02 c0       	push   0xc002c7c2
c001ef30:	e8 dd 3f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ef35:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef38:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef3b:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef3f:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef42:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef46:	0d 00 02 02 00       	or     eax,0x20200
c001ef4b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef4e:	56                   	push   esi
c001ef4f:	53                   	push   ebx
c001ef50:	52                   	push   edx
c001ef51:	68 c8 c7 02 c0       	push   0xc002c7c8
c001ef56:	e8 b7 3f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001ef5b:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef5f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef65:	66 c1 e8 09          	shr    ax,0x9
c001ef69:	83 e0 01             	and    eax,0x1
c001ef6c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef6f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef72:	83 c0 06             	add    eax,0x6
c001ef75:	25 ff ff 00 00       	and    eax,0xffff
c001ef7a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef7d:	e9 95 02 00 00       	jmp    c001f217 <Vm::faultHandler(regs*)+0x42e>
c001ef82:	3c e6                	cmp    al,0xe6
c001ef84:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef88:	0f 84 4e 05 00 00    	je     c001f4dc <Vm::faultHandler(regs*)+0x6f3>
c001ef8e:	0f 82 0a 05 00 00    	jb     c001f49e <Vm::faultHandler(regs*)+0x6b5>
c001ef94:	3c e7                	cmp    al,0xe7
c001ef96:	0f 84 69 05 00 00    	je     c001f505 <Vm::faultHandler(regs*)+0x71c>
c001ef9c:	e9 1b 06 00 00       	jmp    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001efa1:	3c ef                	cmp    al,0xef
c001efa3:	0f 84 e6 05 00 00    	je     c001f58f <Vm::faultHandler(regs*)+0x7a6>
c001efa9:	77 37                	ja     c001efe2 <Vm::faultHandler(regs*)+0x1f9>
c001efab:	3c ed                	cmp    al,0xed
c001efad:	0f 84 a3 05 00 00    	je     c001f556 <Vm::faultHandler(regs*)+0x76d>
c001efb3:	3c ee                	cmp    al,0xee
c001efb5:	0f 85 01 06 00 00    	jne    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001efbb:	52                   	push   edx
c001efbc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efbf:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efc2:	68 63 c8 02 c0       	push   0xc002c863
c001efc7:	e8 46 3f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001efcc:	59                   	pop    ecx
c001efcd:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efd1:	5b                   	pop    ebx
c001efd2:	50                   	push   eax
c001efd3:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efd7:	50                   	push   eax
c001efd8:	e8 2a fa ff ff       	call   c001ea07 <Vm::outbv(unsigned short, unsigned char)>
c001efdd:	e9 a5 05 00 00       	jmp    c001f587 <Vm::faultHandler(regs*)+0x79e>
c001efe2:	3c fa                	cmp    al,0xfa
c001efe4:	0f 84 f7 01 00 00    	je     c001f1e1 <Vm::faultHandler(regs*)+0x3f8>
c001efea:	3c fb                	cmp    al,0xfb
c001efec:	0f 84 0a 02 00 00    	je     c001f1fc <Vm::faultHandler(regs*)+0x413>
c001eff2:	3c f3                	cmp    al,0xf3
c001eff4:	0f 85 c2 05 00 00    	jne    c001f5bc <Vm::faultHandler(regs*)+0x7d3>
c001effa:	83 ec 0c             	sub    esp,0xc
c001effd:	68 9b c7 02 c0       	push   0xc002c79b
c001f002:	e8 0b 3f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f007:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f00a:	83 c4 10             	add    esp,0x10
c001f00d:	e9 84 fe ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	b3 02                	mov    bl,0x2
c001f017:	68 76 c7 02 c0       	push   0xc002c776
c001f01c:	e8 f1 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f021:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	e9 6a fe ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	b3 03                	mov    bl,0x3
c001f031:	68 82 c7 02 c0       	push   0xc002c782
c001f036:	e8 d7 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f03b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f03e:	83 c4 10             	add    esp,0x10
c001f041:	e9 50 fe ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	b3 04                	mov    bl,0x4
c001f04b:	68 86 c7 02 c0       	push   0xc002c786
c001f050:	e8 bd 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f055:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	e9 36 fe ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	b3 05                	mov    bl,0x5
c001f065:	68 8a c7 02 c0       	push   0xc002c78a
c001f06a:	e8 a3 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f06f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f072:	83 c4 10             	add    esp,0x10
c001f075:	e9 1c fe ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f07a:	83 ec 0c             	sub    esp,0xc
c001f07d:	68 8e c7 02 c0       	push   0xc002c78e
c001f082:	e8 8b 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f092:	e9 ff fd ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f097:	50                   	push   eax
c001f098:	50                   	push   eax
c001f099:	6a 01                	push   0x1
c001f09b:	68 93 c7 02 c0       	push   0xc002c793
c001f0a0:	e8 6d 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0b0:	e9 e1 fd ff ff       	jmp    c001ee96 <Vm::faultHandler(regs*)+0xad>
c001f0b5:	83 ec 0c             	sub    esp,0xc
c001f0b8:	68 a1 c7 02 c0       	push   0xc002c7a1
c001f0bd:	e8 50 3e ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f0c2:	83 c4 10             	add    esp,0x10
c001f0c5:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0c8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0cd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0d0:	74 2f                	je     c001f101 <Vm::faultHandler(regs*)+0x318>
c001f0d2:	83 ea 04             	sub    edx,0x4
c001f0d5:	25 ff 0d 00 00       	and    eax,0xdff
c001f0da:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0e0:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0e3:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0ec:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0f0:	0f 84 bf 04 00 00    	je     c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f0f6:	80 cc 02             	or     ah,0x2
c001f0f9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0fc:	e9 b4 04 00 00       	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f101:	83 ea 02             	sub    edx,0x2
c001f104:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f10a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f10d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f111:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f117:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f11b:	74 05                	je     c001f122 <Vm::faultHandler(regs*)+0x339>
c001f11d:	80 cc 02             	or     ah,0x2
c001f120:	eb 03                	jmp    c001f125 <Vm::faultHandler(regs*)+0x33c>
c001f122:	80 e4 fd             	and    ah,0xfd
c001f125:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f129:	e9 87 04 00 00       	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	68 a8 c7 02 c0       	push   0xc002c7a8
c001f136:	e8 d7 3d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f13b:	83 c4 10             	add    esp,0x10
c001f13e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f143:	74 28                	je     c001f16d <Vm::faultHandler(regs*)+0x384>
c001f145:	8b 06                	mov    eax,DWORD PTR [esi]
c001f147:	25 ff 0d 00 00       	and    eax,0xdff
c001f14c:	0d 00 02 02 00       	or     eax,0x20200
c001f151:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f154:	8b 06                	mov    eax,DWORD PTR [esi]
c001f156:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15c:	c1 e8 09             	shr    eax,0x9
c001f15f:	83 e0 01             	and    eax,0x1
c001f162:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f165:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f168:	83 c0 04             	add    eax,0x4
c001f16b:	eb 24                	jmp    c001f191 <Vm::faultHandler(regs*)+0x3a8>
c001f16d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f170:	0d 00 02 02 00       	or     eax,0x20200
c001f175:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f178:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f17b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f181:	66 c1 e8 09          	shr    ax,0x9
c001f185:	83 e0 01             	and    eax,0x1
c001f188:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f18b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f18e:	83 c0 02             	add    eax,0x2
c001f191:	25 ff ff 00 00       	and    eax,0xffff
c001f196:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f199:	e9 17 04 00 00       	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f19e:	53                   	push   ebx
c001f19f:	53                   	push   ebx
c001f1a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1a4:	50                   	push   eax
c001f1a5:	68 ae c7 02 c0       	push   0xc002c7ae
c001f1aa:	e8 63 3d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f1af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	3c ee                	cmp    al,0xee
c001f1b8:	75 10                	jne    c001f1ca <Vm::faultHandler(regs*)+0x3e1>
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1c0:	e8 fa f8 ff ff       	call   c001eabf <Vm::mainloop3(unsigned long)>
c001f1c5:	e9 c0 03 00 00       	jmp    c001f58a <Vm::faultHandler(regs*)+0x7a1>
c001f1ca:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1ce:	83 ec 0c             	sub    esp,0xc
c001f1d1:	53                   	push   ebx
c001f1d2:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1d6:	53                   	push   ebx
c001f1d7:	55                   	push   ebp
c001f1d8:	50                   	push   eax
c001f1d9:	57                   	push   edi
c001f1da:	e8 0c fb ff ff       	call   c001eceb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1df:	eb 36                	jmp    c001f217 <Vm::faultHandler(regs*)+0x42e>
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	68 b8 c7 02 c0       	push   0xc002c7b8
c001f1e9:	e8 24 3d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f1ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1f3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1f7:	e9 8b 03 00 00       	jmp    c001f587 <Vm::faultHandler(regs*)+0x79e>
c001f1fc:	83 ec 0c             	sub    esp,0xc
c001f1ff:	68 bd c7 02 c0       	push   0xc002c7bd
c001f204:	e8 09 3d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f20e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f212:	e9 70 03 00 00       	jmp    c001f587 <Vm::faultHandler(regs*)+0x79e>
c001f217:	83 c4 20             	add    esp,0x20
c001f21a:	e9 99 03 00 00       	jmp    c001f5b8 <Vm::faultHandler(regs*)+0x7cf>
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	68 fb c7 02 c0       	push   0xc002c7fb
c001f227:	e8 e6 3c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f22c:	83 c4 10             	add    esp,0x10
c001f22f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f232:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f237:	74 0d                	je     c001f246 <Vm::faultHandler(regs*)+0x45d>
c001f239:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f240:	0f 87 9e 01 00 00    	ja     c001f3e4 <Vm::faultHandler(regs*)+0x5fb>
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f24d:	0f b7 db             	movzx  ebx,bx
c001f250:	50                   	push   eax
c001f251:	e8 9e f7 ff ff       	call   c001e9f4 <Vm::inbv(unsigned short)>
c001f256:	83 c4 0c             	add    esp,0xc
c001f259:	0f b6 c0             	movzx  eax,al
c001f25c:	50                   	push   eax
c001f25d:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f261:	50                   	push   eax
c001f262:	53                   	push   ebx
c001f263:	e8 41 fb ff ff       	call   c001eda9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f268:	83 c4 10             	add    esp,0x10
c001f26b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f26e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f272:	74 03                	je     c001f277 <Vm::faultHandler(regs*)+0x48e>
c001f274:	48                   	dec    eax
c001f275:	eb 01                	jmp    c001f278 <Vm::faultHandler(regs*)+0x48f>
c001f277:	40                   	inc    eax
c001f278:	0f b7 c0             	movzx  eax,ax
c001f27b:	eb 7f                	jmp    c001f2fc <Vm::faultHandler(regs*)+0x513>
c001f27d:	83 ec 0c             	sub    esp,0xc
c001f280:	68 2d c8 02 c0       	push   0xc002c82d
c001f285:	e8 88 3c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f28a:	83 c4 10             	add    esp,0x10
c001f28d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f290:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f295:	74 0d                	je     c001f2a4 <Vm::faultHandler(regs*)+0x4bb>
c001f297:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f29e:	0f 87 40 01 00 00    	ja     c001f3e4 <Vm::faultHandler(regs*)+0x5fb>
c001f2a4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2a7:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2ab:	0f b7 db             	movzx  ebx,bx
c001f2ae:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2b3:	74 20                	je     c001f2d5 <Vm::faultHandler(regs*)+0x4ec>
c001f2b5:	ed                   	in     eax,dx
c001f2b6:	51                   	push   ecx
c001f2b7:	50                   	push   eax
c001f2b8:	56                   	push   esi
c001f2b9:	53                   	push   ebx
c001f2ba:	e8 15 fb ff ff       	call   c001edd4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2c5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2c9:	74 05                	je     c001f2d0 <Vm::faultHandler(regs*)+0x4e7>
c001f2cb:	83 e8 04             	sub    eax,0x4
c001f2ce:	eb 27                	jmp    c001f2f7 <Vm::faultHandler(regs*)+0x50e>
c001f2d0:	83 c0 04             	add    eax,0x4
c001f2d3:	eb 22                	jmp    c001f2f7 <Vm::faultHandler(regs*)+0x50e>
c001f2d5:	66 ed                	in     ax,dx
c001f2d7:	0f b7 c0             	movzx  eax,ax
c001f2da:	52                   	push   edx
c001f2db:	50                   	push   eax
c001f2dc:	56                   	push   esi
c001f2dd:	53                   	push   ebx
c001f2de:	e8 db fa ff ff       	call   c001edbe <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2e3:	83 c4 10             	add    esp,0x10
c001f2e6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2e9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ed:	74 05                	je     c001f2f4 <Vm::faultHandler(regs*)+0x50b>
c001f2ef:	83 e8 02             	sub    eax,0x2
c001f2f2:	eb 03                	jmp    c001f2f7 <Vm::faultHandler(regs*)+0x50e>
c001f2f4:	83 c0 02             	add    eax,0x2
c001f2f7:	25 ff ff 00 00       	and    eax,0xffff
c001f2fc:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2ff:	e9 b1 02 00 00       	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f304:	83 ec 0c             	sub    esp,0xc
c001f307:	4b                   	dec    ebx
c001f308:	68 33 c8 02 c0       	push   0xc002c833
c001f30d:	e8 00 3c ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f312:	83 c4 10             	add    esp,0x10
c001f315:	80 fb 05             	cmp    bl,0x5
c001f318:	77 0a                	ja     c001f324 <Vm::faultHandler(regs*)+0x53b>
c001f31a:	0f b6 db             	movzx  ebx,bl
c001f31d:	ff 24 9d a4 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd375c]
c001f324:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f328:	eb 1b                	jmp    c001f345 <Vm::faultHandler(regs*)+0x55c>
c001f32a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f32e:	eb 15                	jmp    c001f345 <Vm::faultHandler(regs*)+0x55c>
c001f330:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f334:	eb 0f                	jmp    c001f345 <Vm::faultHandler(regs*)+0x55c>
c001f336:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f33a:	eb 09                	jmp    c001f345 <Vm::faultHandler(regs*)+0x55c>
c001f33c:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f33f:	eb 04                	jmp    c001f345 <Vm::faultHandler(regs*)+0x55c>
c001f341:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f345:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f34a:	74 0d                	je     c001f359 <Vm::faultHandler(regs*)+0x570>
c001f34c:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f353:	0f 87 8b 00 00 00    	ja     c001f3e4 <Vm::faultHandler(regs*)+0x5fb>
c001f359:	53                   	push   ebx
c001f35a:	53                   	push   ebx
c001f35b:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f35f:	52                   	push   edx
c001f360:	50                   	push   eax
c001f361:	e8 0f fa ff ff       	call   c001ed75 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f366:	5e                   	pop    esi
c001f367:	0f b6 c0             	movzx  eax,al
c001f36a:	5d                   	pop    ebp
c001f36b:	50                   	push   eax
c001f36c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f370:	50                   	push   eax
c001f371:	e8 91 f6 ff ff       	call   c001ea07 <Vm::outbv(unsigned short, unsigned char)>
c001f376:	83 c4 10             	add    esp,0x10
c001f379:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f37c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f380:	74 03                	je     c001f385 <Vm::faultHandler(regs*)+0x59c>
c001f382:	48                   	dec    eax
c001f383:	eb 01                	jmp    c001f386 <Vm::faultHandler(regs*)+0x59d>
c001f385:	40                   	inc    eax
c001f386:	0f b7 c0             	movzx  eax,ax
c001f389:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f38c:	e9 24 02 00 00       	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f391:	83 ec 0c             	sub    esp,0xc
c001f394:	4b                   	dec    ebx
c001f395:	68 33 c8 02 c0       	push   0xc002c833
c001f39a:	e8 73 3b ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	80 fb 05             	cmp    bl,0x5
c001f3a5:	77 0a                	ja     c001f3b1 <Vm::faultHandler(regs*)+0x5c8>
c001f3a7:	0f b6 db             	movzx  ebx,bl
c001f3aa:	ff 24 9d bc c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3744]
c001f3b1:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3b5:	eb 1b                	jmp    c001f3d2 <Vm::faultHandler(regs*)+0x5e9>
c001f3b7:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3bb:	eb 15                	jmp    c001f3d2 <Vm::faultHandler(regs*)+0x5e9>
c001f3bd:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3c1:	eb 0f                	jmp    c001f3d2 <Vm::faultHandler(regs*)+0x5e9>
c001f3c3:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3c7:	eb 09                	jmp    c001f3d2 <Vm::faultHandler(regs*)+0x5e9>
c001f3c9:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3cc:	eb 04                	jmp    c001f3d2 <Vm::faultHandler(regs*)+0x5e9>
c001f3ce:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3d2:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3d5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3da:	74 39                	je     c001f415 <Vm::faultHandler(regs*)+0x62c>
c001f3dc:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3e2:	76 31                	jbe    c001f415 <Vm::faultHandler(regs*)+0x62c>
c001f3e4:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3e8:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3ec:	51                   	push   ecx
c001f3ed:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3f1:	51                   	push   ecx
c001f3f2:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3f6:	51                   	push   ecx
c001f3f7:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3fb:	51                   	push   ecx
c001f3fc:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f400:	52                   	push   edx
c001f401:	50                   	push   eax
c001f402:	50                   	push   eax
c001f403:	68 00 c8 02 c0       	push   0xc002c800
c001f408:	e8 05 3b ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f40d:	83 c4 20             	add    esp,0x20
c001f410:	e9 fb 01 00 00       	jmp    c001f610 <Vm::faultHandler(regs*)+0x827>
c001f415:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f418:	0f b7 d3             	movzx  edx,bx
c001f41b:	81 e6 00 04 00 00    	and    esi,0x400
c001f421:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f424:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f429:	74 1d                	je     c001f448 <Vm::faultHandler(regs*)+0x65f>
c001f42b:	51                   	push   ecx
c001f42c:	51                   	push   ecx
c001f42d:	52                   	push   edx
c001f42e:	50                   	push   eax
c001f42f:	e8 64 f9 ff ff       	call   c001ed98 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f434:	83 c4 10             	add    esp,0x10
c001f437:	89 ea                	mov    edx,ebp
c001f439:	ef                   	out    dx,eax
c001f43a:	85 f6                	test   esi,esi
c001f43c:	74 05                	je     c001f443 <Vm::faultHandler(regs*)+0x65a>
c001f43e:	83 eb 04             	sub    ebx,0x4
c001f441:	eb 21                	jmp    c001f464 <Vm::faultHandler(regs*)+0x67b>
c001f443:	83 c3 04             	add    ebx,0x4
c001f446:	eb 1c                	jmp    c001f464 <Vm::faultHandler(regs*)+0x67b>
c001f448:	51                   	push   ecx
c001f449:	51                   	push   ecx
c001f44a:	52                   	push   edx
c001f44b:	50                   	push   eax
c001f44c:	e8 35 f9 ff ff       	call   c001ed86 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f451:	83 c4 10             	add    esp,0x10
c001f454:	89 ea                	mov    edx,ebp
c001f456:	66 ef                	out    dx,ax
c001f458:	85 f6                	test   esi,esi
c001f45a:	74 05                	je     c001f461 <Vm::faultHandler(regs*)+0x678>
c001f45c:	83 eb 02             	sub    ebx,0x2
c001f45f:	eb 03                	jmp    c001f464 <Vm::faultHandler(regs*)+0x67b>
c001f461:	83 c3 02             	add    ebx,0x2
c001f464:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f46a:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f46d:	e9 43 01 00 00       	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f472:	53                   	push   ebx
c001f473:	53                   	push   ebx
c001f474:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f478:	50                   	push   eax
c001f479:	68 39 c8 02 c0       	push   0xc002c839
c001f47e:	e8 8f 3a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f483:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f48a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f48e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f491:	e8 5e f5 ff ff       	call   c001e9f4 <Vm::inbv(unsigned short)>
c001f496:	0f b6 c0             	movzx  eax,al
c001f499:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f49c:	eb 5e                	jmp    c001f4fc <Vm::faultHandler(regs*)+0x713>
c001f49e:	51                   	push   ecx
c001f49f:	51                   	push   ecx
c001f4a0:	53                   	push   ebx
c001f4a1:	68 3f c8 02 c0       	push   0xc002c83f
c001f4a6:	e8 67 3a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f4ab:	83 c4 10             	add    esp,0x10
c001f4ae:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4b3:	74 07                	je     c001f4bc <Vm::faultHandler(regs*)+0x6d3>
c001f4b5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4b9:	ed                   	in     eax,dx
c001f4ba:	eb 14                	jmp    c001f4d0 <Vm::faultHandler(regs*)+0x6e7>
c001f4bc:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4bf:	66 31 db             	xor    bx,bx
c001f4c2:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4c5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4c9:	66 ed                	in     ax,dx
c001f4cb:	0f b7 c0             	movzx  eax,ax
c001f4ce:	09 d8                	or     eax,ebx
c001f4d0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4d3:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4d7:	e9 dc 00 00 00       	jmp    c001f5b8 <Vm::faultHandler(regs*)+0x7cf>
c001f4dc:	50                   	push   eax
c001f4dd:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4e0:	53                   	push   ebx
c001f4e1:	68 45 c8 02 c0       	push   0xc002c845
c001f4e6:	e8 27 3a ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f4eb:	58                   	pop    eax
c001f4ec:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4f0:	5a                   	pop    edx
c001f4f1:	50                   	push   eax
c001f4f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4f6:	50                   	push   eax
c001f4f7:	e8 0b f5 ff ff       	call   c001ea07 <Vm::outbv(unsigned short, unsigned char)>
c001f4fc:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f500:	e9 85 00 00 00       	jmp    c001f58a <Vm::faultHandler(regs*)+0x7a1>
c001f505:	50                   	push   eax
c001f506:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f509:	53                   	push   ebx
c001f50a:	68 4e c8 02 c0       	push   0xc002c84e
c001f50f:	e8 fe 39 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f514:	83 c4 10             	add    esp,0x10
c001f517:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f51b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f520:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f523:	74 03                	je     c001f528 <Vm::faultHandler(regs*)+0x73f>
c001f525:	ef                   	out    dx,eax
c001f526:	eb ab                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x6ea>
c001f528:	66 ef                	out    dx,ax
c001f52a:	eb a7                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x6ea>
c001f52c:	55                   	push   ebp
c001f52d:	55                   	push   ebp
c001f52e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f531:	68 57 c8 02 c0       	push   0xc002c857
c001f536:	e8 d7 39 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f53b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f542:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f546:	89 04 24             	mov    DWORD PTR [esp],eax
c001f549:	e8 a6 f4 ff ff       	call   c001e9f4 <Vm::inbv(unsigned short)>
c001f54e:	0f b6 c0             	movzx  eax,al
c001f551:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f554:	eb 31                	jmp    c001f587 <Vm::faultHandler(regs*)+0x79e>
c001f556:	56                   	push   esi
c001f557:	56                   	push   esi
c001f558:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f55b:	68 5d c8 02 c0       	push   0xc002c85d
c001f560:	e8 ad 39 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f565:	83 c4 10             	add    esp,0x10
c001f568:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f56b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f570:	74 03                	je     c001f575 <Vm::faultHandler(regs*)+0x78c>
c001f572:	ed                   	in     eax,dx
c001f573:	eb 0d                	jmp    c001f582 <Vm::faultHandler(regs*)+0x799>
c001f575:	66 ed                	in     ax,dx
c001f577:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f57a:	0f b7 c0             	movzx  eax,ax
c001f57d:	66 31 d2             	xor    dx,dx
c001f580:	09 d0                	or     eax,edx
c001f582:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f585:	eb 2e                	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f587:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f58a:	83 c4 10             	add    esp,0x10
c001f58d:	eb 29                	jmp    c001f5b8 <Vm::faultHandler(regs*)+0x7cf>
c001f58f:	50                   	push   eax
c001f590:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f593:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f596:	68 6c c8 02 c0       	push   0xc002c86c
c001f59b:	e8 72 39 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f5a0:	83 c4 10             	add    esp,0x10
c001f5a3:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5a6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5ab:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5ae:	74 03                	je     c001f5b3 <Vm::faultHandler(regs*)+0x7ca>
c001f5b0:	ef                   	out    dx,eax
c001f5b1:	eb 02                	jmp    c001f5b5 <Vm::faultHandler(regs*)+0x7cc>
c001f5b3:	66 ef                	out    dx,ax
c001f5b5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5b8:	b0 01                	mov    al,0x1
c001f5ba:	eb 56                	jmp    c001f612 <Vm::faultHandler(regs*)+0x829>
c001f5bc:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5c0:	51                   	push   ecx
c001f5c1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5c5:	51                   	push   ecx
c001f5c6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5ca:	51                   	push   ecx
c001f5cb:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5cf:	51                   	push   ecx
c001f5d0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5d4:	52                   	push   edx
c001f5d5:	50                   	push   eax
c001f5d6:	50                   	push   eax
c001f5d7:	68 75 c8 02 c0       	push   0xc002c875
c001f5dc:	e8 31 39 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c001f5e1:	83 c4 20             	add    esp,0x20
c001f5e4:	83 ec 0c             	sub    esp,0xc
c001f5e7:	6a 60                	push   0x60
c001f5e9:	e8 06 f4 ff ff       	call   c001e9f4 <Vm::inbv(unsigned short)>
c001f5ee:	83 c4 10             	add    esp,0x10
c001f5f1:	3c 1c                	cmp    al,0x1c
c001f5f3:	74 04                	je     c001f5f9 <Vm::faultHandler(regs*)+0x810>
c001f5f5:	3c 5a                	cmp    al,0x5a
c001f5f7:	75 eb                	jne    c001f5e4 <Vm::faultHandler(regs*)+0x7fb>
c001f5f9:	3c 1c                	cmp    al,0x1c
c001f5fb:	74 04                	je     c001f601 <Vm::faultHandler(regs*)+0x818>
c001f5fd:	3c 5a                	cmp    al,0x5a
c001f5ff:	75 0f                	jne    c001f610 <Vm::faultHandler(regs*)+0x827>
c001f601:	83 ec 0c             	sub    esp,0xc
c001f604:	6a 60                	push   0x60
c001f606:	e8 e9 f3 ff ff       	call   c001e9f4 <Vm::inbv(unsigned short)>
c001f60b:	83 c4 10             	add    esp,0x10
c001f60e:	eb e9                	jmp    c001f5f9 <Vm::faultHandler(regs*)+0x810>
c001f610:	31 c0                	xor    eax,eax
c001f612:	83 c4 1c             	add    esp,0x1c
c001f615:	5b                   	pop    ebx
c001f616:	5e                   	pop    esi
c001f617:	5f                   	pop    edi
c001f618:	5d                   	pop    ebp
c001f619:	c3                   	ret    

c001f61a <Vm::fpuInternalTo32(unsigned long long)>:
c001f61a:	57                   	push   edi
c001f61b:	56                   	push   esi
c001f61c:	53                   	push   ebx
c001f61d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f625:	89 d6                	mov    esi,edx
c001f627:	89 d7                	mov    edi,edx
c001f629:	89 c1                	mov    ecx,eax
c001f62b:	c1 ef 14             	shr    edi,0x14
c001f62e:	89 d3                	mov    ebx,edx
c001f630:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f636:	31 d2                	xor    edx,edx
c001f638:	89 f8                	mov    eax,edi
c001f63a:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f640:	bf ff 00 00 00       	mov    edi,0xff
c001f645:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f64a:	83 d2 ff             	adc    edx,0xffffffff
c001f64d:	39 c7                	cmp    edi,eax
c001f64f:	bf 00 00 00 00       	mov    edi,0x0
c001f654:	19 d7                	sbb    edi,edx
c001f656:	72 15                	jb     c001f66d <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f658:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f65c:	c1 e0 17             	shl    eax,0x17
c001f65f:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f665:	09 f1                	or     ecx,esi
c001f667:	09 c1                	or     ecx,eax
c001f669:	89 cf                	mov    edi,ecx
c001f66b:	eb 02                	jmp    c001f66f <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f66d:	31 ff                	xor    edi,edi
c001f66f:	89 f8                	mov    eax,edi
c001f671:	5b                   	pop    ebx
c001f672:	5e                   	pop    esi
c001f673:	5f                   	pop    edi
c001f674:	c3                   	ret    

c001f675 <Vm::fpuInternalTo64(unsigned long long)>:
c001f675:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f679:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f67d:	c3                   	ret    

c001f67e <Vm::fpu32ToInternal(unsigned int)>:
c001f67e:	57                   	push   edi
c001f67f:	31 ff                	xor    edi,edi
c001f681:	56                   	push   esi
c001f682:	53                   	push   ebx
c001f683:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f687:	89 cb                	mov    ebx,ecx
c001f689:	89 ce                	mov    esi,ecx
c001f68b:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f691:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f697:	c1 e9 17             	shr    ecx,0x17
c001f69a:	89 f0                	mov    eax,esi
c001f69c:	0f b6 d1             	movzx  edx,cl
c001f69f:	81 c2 80 03 00 00    	add    edx,0x380
c001f6a5:	89 d1                	mov    ecx,edx
c001f6a7:	89 fa                	mov    edx,edi
c001f6a9:	c1 e1 14             	shl    ecx,0x14
c001f6ac:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6b0:	c1 e0 1d             	shl    eax,0x1d
c001f6b3:	89 d7                	mov    edi,edx
c001f6b5:	89 c6                	mov    esi,eax
c001f6b7:	89 ca                	mov    edx,ecx
c001f6b9:	89 f0                	mov    eax,esi
c001f6bb:	09 fa                	or     edx,edi
c001f6bd:	09 da                	or     edx,ebx
c001f6bf:	5b                   	pop    ebx
c001f6c0:	5e                   	pop    esi
c001f6c1:	5f                   	pop    edi
c001f6c2:	c3                   	ret    

c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6cb:	c3                   	ret    

c001f6cc <Vm::fpuFloatToLong(unsigned long long)>:
c001f6cc:	57                   	push   edi
c001f6cd:	31 c0                	xor    eax,eax
c001f6cf:	56                   	push   esi
c001f6d0:	31 d2                	xor    edx,edx
c001f6d2:	53                   	push   ebx
c001f6d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6db:	89 d9                	mov    ecx,ebx
c001f6dd:	c1 e9 14             	shr    ecx,0x14
c001f6e0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6e6:	89 cf                	mov    edi,ecx
c001f6e8:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6ee:	78 33                	js     c001f723 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6f0:	89 d9                	mov    ecx,ebx
c001f6f2:	89 f0                	mov    eax,esi
c001f6f4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6fa:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f700:	89 ca                	mov    edx,ecx
c001f702:	b9 34 00 00 00       	mov    ecx,0x34
c001f707:	29 f9                	sub    ecx,edi
c001f709:	0f ad d0             	shrd   eax,edx,cl
c001f70c:	d3 fa                	sar    edx,cl
c001f70e:	f6 c1 20             	test   cl,0x20
c001f711:	74 05                	je     c001f718 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f713:	89 d0                	mov    eax,edx
c001f715:	c1 fa 1f             	sar    edx,0x1f
c001f718:	85 db                	test   ebx,ebx
c001f71a:	79 07                	jns    c001f723 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f71c:	f7 d8                	neg    eax
c001f71e:	83 d2 00             	adc    edx,0x0
c001f721:	f7 da                	neg    edx
c001f723:	5b                   	pop    ebx
c001f724:	5e                   	pop    esi
c001f725:	5f                   	pop    edi
c001f726:	c3                   	ret    

c001f727 <Vm::fpuULongToFloat(unsigned long long)>:
c001f727:	57                   	push   edi
c001f728:	31 c9                	xor    ecx,ecx
c001f72a:	56                   	push   esi
c001f72b:	53                   	push   ebx
c001f72c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f730:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f734:	0f ba e7 14          	bt     edi,0x14
c001f738:	72 07                	jb     c001f741 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f73a:	01 f6                	add    esi,esi
c001f73c:	11 ff                	adc    edi,edi
c001f73e:	41                   	inc    ecx
c001f73f:	eb f3                	jmp    c001f734 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f741:	89 fa                	mov    edx,edi
c001f743:	89 f0                	mov    eax,esi
c001f745:	bb 33 04 00 00       	mov    ebx,0x433
c001f74a:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f750:	29 cb                	sub    ebx,ecx
c001f752:	89 d9                	mov    ecx,ebx
c001f754:	5b                   	pop    ebx
c001f755:	c1 e1 14             	shl    ecx,0x14
c001f758:	5e                   	pop    esi
c001f759:	09 ca                	or     edx,ecx
c001f75b:	5f                   	pop    edi
c001f75c:	c3                   	ret    

c001f75d <Vm::fpuLongToFloat(long long)>:
c001f75d:	56                   	push   esi
c001f75e:	31 c0                	xor    eax,eax
c001f760:	53                   	push   ebx
c001f761:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f769:	39 c8                	cmp    eax,ecx
c001f76b:	19 d8                	sbb    eax,ebx
c001f76d:	7d 04                	jge    c001f773 <Vm::fpuLongToFloat(long long)+0x16>
c001f76f:	31 f6                	xor    esi,esi
c001f771:	eb 0c                	jmp    c001f77f <Vm::fpuLongToFloat(long long)+0x22>
c001f773:	f7 d9                	neg    ecx
c001f775:	be 01 00 00 00       	mov    esi,0x1
c001f77a:	83 d3 00             	adc    ebx,0x0
c001f77d:	f7 db                	neg    ebx
c001f77f:	31 c0                	xor    eax,eax
c001f781:	0f ba e3 14          	bt     ebx,0x14
c001f785:	72 07                	jb     c001f78e <Vm::fpuLongToFloat(long long)+0x31>
c001f787:	01 c9                	add    ecx,ecx
c001f789:	11 db                	adc    ebx,ebx
c001f78b:	40                   	inc    eax
c001f78c:	eb f3                	jmp    c001f781 <Vm::fpuLongToFloat(long long)+0x24>
c001f78e:	ba 33 04 00 00       	mov    edx,0x433
c001f793:	29 c2                	sub    edx,eax
c001f795:	89 c8                	mov    eax,ecx
c001f797:	c1 e2 14             	shl    edx,0x14
c001f79a:	89 d9                	mov    ecx,ebx
c001f79c:	89 f3                	mov    ebx,esi
c001f79e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7a4:	09 ca                	or     edx,ecx
c001f7a6:	84 db                	test   bl,bl
c001f7a8:	74 06                	je     c001f7b0 <Vm::fpuLongToFloat(long long)+0x53>
c001f7aa:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7b0:	5b                   	pop    ebx
c001f7b1:	5e                   	pop    esi
c001f7b2:	c3                   	ret    

c001f7b3 <Vm::fpuGet0()>:
c001f7b3:	31 c0                	xor    eax,eax
c001f7b5:	31 d2                	xor    edx,edx
c001f7b7:	c3                   	ret    

c001f7b8 <Vm::fpuGet1()>:
c001f7b8:	b8 01 00 00 00       	mov    eax,0x1
c001f7bd:	31 d2                	xor    edx,edx
c001f7bf:	c3                   	ret    

c001f7c0 <Vm::fpuGetPi()>:
c001f7c0:	b8 03 00 00 00       	mov    eax,0x3
c001f7c5:	31 d2                	xor    edx,edx
c001f7c7:	c3                   	ret    

c001f7c8 <Vm::fpuGetLog2E()>:
c001f7c8:	83 ec 18             	sub    esp,0x18
c001f7cb:	68 d4 c8 02 c0       	push   0xc002c8d4
c001f7d0:	e8 de ad ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001f7d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7da:	31 d2                	xor    edx,edx
c001f7dc:	83 c4 1c             	add    esp,0x1c
c001f7df:	c3                   	ret    

c001f7e0 <Vm::fpuGetLogE2()>:
c001f7e0:	83 ec 18             	sub    esp,0x18
c001f7e3:	68 e0 c8 02 c0       	push   0xc002c8e0
c001f7e8:	e8 c6 ad ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001f7ed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7f2:	31 d2                	xor    edx,edx
c001f7f4:	83 c4 1c             	add    esp,0x1c
c001f7f7:	c3                   	ret    

c001f7f8 <Vm::fpuGetLog210()>:
c001f7f8:	83 ec 18             	sub    esp,0x18
c001f7fb:	68 ec c8 02 c0       	push   0xc002c8ec
c001f800:	e8 ae ad ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001f805:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f80a:	31 d2                	xor    edx,edx
c001f80c:	83 c4 1c             	add    esp,0x1c
c001f80f:	c3                   	ret    

c001f810 <Vm::fpuGetLog102()>:
c001f810:	83 ec 18             	sub    esp,0x18
c001f813:	68 f9 c8 02 c0       	push   0xc002c8f9
c001f818:	e8 96 ad ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001f81d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f822:	31 d2                	xor    edx,edx
c001f824:	83 c4 1c             	add    esp,0x1c
c001f827:	c3                   	ret    

c001f828 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f82c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f834:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f838:	0f 92 c0             	setb   al
c001f83b:	c3                   	ret    

c001f83c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f83c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f844:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f848:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f84c:	09 c2                	or     edx,eax
c001f84e:	0f 94 c0             	sete   al
c001f851:	c3                   	ret    

c001f852 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f852:	57                   	push   edi
c001f853:	56                   	push   esi
c001f854:	53                   	push   ebx
c001f855:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f859:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f85d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f861:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f865:	57                   	push   edi
c001f866:	56                   	push   esi
c001f867:	53                   	push   ebx
c001f868:	51                   	push   ecx
c001f869:	e8 ce ff ff ff       	call   c001f83c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	88 c2                	mov    dl,al
c001f873:	31 c0                	xor    eax,eax
c001f875:	84 d2                	test   dl,dl
c001f877:	75 0c                	jne    c001f885 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f879:	57                   	push   edi
c001f87a:	56                   	push   esi
c001f87b:	53                   	push   ebx
c001f87c:	51                   	push   ecx
c001f87d:	e8 a6 ff ff ff       	call   c001f828 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f882:	83 c4 10             	add    esp,0x10
c001f885:	83 e0 01             	and    eax,0x1
c001f888:	5b                   	pop    ebx
c001f889:	88 c1                	mov    cl,al
c001f88b:	83 e2 01             	and    edx,0x1
c001f88e:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001f893:	c1 e2 06             	shl    edx,0x6
c001f896:	83 e0 ba             	and    eax,0xffffffba
c001f899:	5e                   	pop    esi
c001f89a:	09 c8                	or     eax,ecx
c001f89c:	5f                   	pop    edi
c001f89d:	09 d0                	or     eax,edx
c001f89f:	a2 61 1b 03 c0       	mov    ds:0xc0031b61,al
c001f8a4:	c3                   	ret    

c001f8a5 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8ad:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8b1:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8b5:	c3                   	ret    

c001f8b6 <Vm::fpuAbs(unsigned long long)>:
c001f8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8be:	c3                   	ret    

c001f8bf <Vm::fpuChs(unsigned long long)>:
c001f8bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8c7:	f7 d8                	neg    eax
c001f8c9:	83 d2 00             	adc    edx,0x0
c001f8cc:	f7 da                	neg    edx
c001f8ce:	c3                   	ret    

c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8cf:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8d3:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8d8:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8dc:	eb c7                	jmp    c001f8a5 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8de <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8de:	53                   	push   ebx
c001f8df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8ef:	0f af ca             	imul   ecx,edx
c001f8f2:	0f af d8             	imul   ebx,eax
c001f8f5:	f7 e2                	mul    edx
c001f8f7:	01 d9                	add    ecx,ebx
c001f8f9:	5b                   	pop    ebx
c001f8fa:	01 ca                	add    edx,ecx
c001f8fc:	c3                   	ret    

c001f8fd <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8fd:	83 ec 0c             	sub    esp,0xc
c001f900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f910:	e8 a7 70 00 00       	call   c00269bc <__udivdi3>
c001f915:	83 c4 1c             	add    esp,0x1c
c001f918:	c3                   	ret    

c001f919 <Vm::fpuSquare(unsigned long long)>:
c001f919:	50                   	push   eax
c001f91a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f91e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f922:	52                   	push   edx
c001f923:	50                   	push   eax
c001f924:	52                   	push   edx
c001f925:	50                   	push   eax
c001f926:	e8 b3 ff ff ff       	call   c001f8de <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f92b:	83 c4 14             	add    esp,0x14
c001f92e:	c3                   	ret    

c001f92f <Vm::fpuGetReg(int)>:
c001f92f:	83 ec 0c             	sub    esp,0xc
c001f932:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f937:	76 10                	jbe    c001f949 <Vm::fpuGetReg(int)+0x1a>
c001f939:	83 ec 0c             	sub    esp,0xc
c001f93c:	68 06 c9 02 c0       	push   0xc002c906
c001f941:	e8 6d ac ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001f946:	83 c4 10             	add    esp,0x10
c001f949:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001f94e:	b9 08 00 00 00       	mov    ecx,0x8
c001f953:	c0 e8 03             	shr    al,0x3
c001f956:	83 e0 07             	and    eax,0x7
c001f959:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f95d:	99                   	cdq    
c001f95e:	f7 f9                	idiv   ecx
c001f960:	8b 04 d5 64 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce49c]
c001f967:	8b 14 d5 68 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce498]
c001f96e:	83 c4 0c             	add    esp,0xc
c001f971:	c3                   	ret    

c001f972 <Vm::fpuSetReg(int, unsigned long long)>:
c001f972:	57                   	push   edi
c001f973:	56                   	push   esi
c001f974:	52                   	push   edx
c001f975:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f979:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f97d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f982:	76 10                	jbe    c001f994 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f984:	83 ec 0c             	sub    esp,0xc
c001f987:	68 19 c9 02 c0       	push   0xc002c919
c001f98c:	e8 22 ac ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c001f991:	83 c4 10             	add    esp,0x10
c001f994:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001f999:	b9 08 00 00 00       	mov    ecx,0x8
c001f99e:	c0 e8 03             	shr    al,0x3
c001f9a1:	83 e0 07             	and    eax,0x7
c001f9a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9a8:	99                   	cdq    
c001f9a9:	f7 f9                	idiv   ecx
c001f9ab:	89 34 d5 64 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce49c],esi
c001f9b2:	89 3c d5 68 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce498],edi
c001f9b9:	58                   	pop    eax
c001f9ba:	5e                   	pop    esi
c001f9bb:	5f                   	pop    edi
c001f9bc:	c3                   	ret    

c001f9bd <Vm::fpuPush(unsigned long long)>:
c001f9bd:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001f9c2:	c0 e8 03             	shr    al,0x3
c001f9c5:	83 e0 07             	and    eax,0x7
c001f9c8:	83 c0 07             	add    eax,0x7
c001f9cb:	88 c2                	mov    dl,al
c001f9cd:	83 e0 07             	and    eax,0x7
c001f9d0:	83 e2 07             	and    edx,0x7
c001f9d3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9da:	8a 15 61 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b61
c001f9e0:	83 e2 c7             	and    edx,0xffffffc7
c001f9e3:	09 ca                	or     edx,ecx
c001f9e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9e9:	88 15 61 1b 03 c0    	mov    BYTE PTR ds:0xc0031b61,dl
c001f9ef:	89 0c c5 68 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce498],ecx
c001f9f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9fa:	89 14 c5 64 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce49c],edx
c001fa01:	a1 a4 1b 03 c0       	mov    eax,ds:0xc0031ba4
c001fa06:	83 f8 08             	cmp    eax,0x8
c001fa09:	75 08                	jne    c001fa13 <Vm::fpuPush(unsigned long long)+0x56>
c001fa0b:	80 0d 60 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b60,0x40
c001fa12:	c3                   	ret    
c001fa13:	40                   	inc    eax
c001fa14:	a3 a4 1b 03 c0       	mov    ds:0xc0031ba4,eax
c001fa19:	c3                   	ret    

c001fa1a <Vm::fpuPop()>:
c001fa1a:	8a 0d 61 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b61
c001fa20:	53                   	push   ebx
c001fa21:	c0 e9 03             	shr    cl,0x3
c001fa24:	8a 1d 61 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b61
c001fa2a:	83 e1 07             	and    ecx,0x7
c001fa2d:	83 e3 c7             	and    ebx,0xffffffc7
c001fa30:	8b 04 cd 64 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce49c]
c001fa37:	8b 14 cd 68 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce498]
c001fa3e:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa45:	83 e1 38             	and    ecx,0x38
c001fa48:	09 d9                	or     ecx,ebx
c001fa4a:	88 0d 61 1b 03 c0    	mov    BYTE PTR ds:0xc0031b61,cl
c001fa50:	8b 0d a4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ba4
c001fa56:	85 c9                	test   ecx,ecx
c001fa58:	74 09                	je     c001fa63 <Vm::fpuPop()+0x49>
c001fa5a:	49                   	dec    ecx
c001fa5b:	89 0d a4 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba4,ecx
c001fa61:	eb 07                	jmp    c001fa6a <Vm::fpuPop()+0x50>
c001fa63:	80 0d 60 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b60,0x40
c001fa6a:	5b                   	pop    ebx
c001fa6b:	c3                   	ret    

c001fa6c <Vm::x87Handler(regs*)>:
c001fa6c:	55                   	push   ebp
c001fa6d:	57                   	push   edi
c001fa6e:	56                   	push   esi
c001fa6f:	53                   	push   ebx
c001fa70:	83 ec 1c             	sub    esp,0x1c
c001fa73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa77:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa7c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa7f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa87:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa8b:	50                   	push   eax
c001fa8c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa90:	50                   	push   eax
c001fa91:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa95:	50                   	push   eax
c001fa96:	53                   	push   ebx
c001fa97:	e8 de a1 ff ff       	call   c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa9c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	89 c6                	mov    esi,eax
c001faa4:	80 fa d9             	cmp    dl,0xd9
c001faa7:	0f 85 52 01 00 00    	jne    c001fbff <Vm::x87Handler(regs*)+0x193>
c001faad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fab1:	8d 50 20             	lea    edx,[eax+0x20]
c001fab4:	80 fa 0e             	cmp    dl,0xe
c001fab7:	0f 87 86 00 00 00    	ja     c001fb43 <Vm::x87Handler(regs*)+0xd7>
c001fabd:	0f b6 d2             	movzx  edx,dl
c001fac0:	ff 24 95 2c c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd36d4]
c001fac7:	e8 e7 fc ff ff       	call   c001f7b3 <Vm::fpuGet0()>
c001facc:	eb 05                	jmp    c001fad3 <Vm::x87Handler(regs*)+0x67>
c001face:	e8 e5 fc ff ff       	call   c001f7b8 <Vm::fpuGet1()>
c001fad3:	57                   	push   edi
c001fad4:	57                   	push   edi
c001fad5:	52                   	push   edx
c001fad6:	50                   	push   eax
c001fad7:	e8 e1 fe ff ff       	call   c001f9bd <Vm::fpuPush(unsigned long long)>
c001fadc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fae0:	83 c4 10             	add    esp,0x10
c001fae3:	b0 01                	mov    al,0x1
c001fae5:	e9 e3 09 00 00       	jmp    c00204cd <Vm::x87Handler(regs*)+0xa61>
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	6a 00                	push   0x0
c001faef:	e8 3b fe ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001faf4:	59                   	pop    ecx
c001faf5:	5e                   	pop    esi
c001faf6:	52                   	push   edx
c001faf7:	50                   	push   eax
c001faf8:	e8 c2 fd ff ff       	call   c001f8bf <Vm::fpuChs(unsigned long long)>
c001fafd:	eb 13                	jmp    c001fb12 <Vm::x87Handler(regs*)+0xa6>
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	6a 00                	push   0x0
c001fb04:	e8 26 fe ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fb09:	5f                   	pop    edi
c001fb0a:	5d                   	pop    ebp
c001fb0b:	52                   	push   edx
c001fb0c:	50                   	push   eax
c001fb0d:	e8 a4 fd ff ff       	call   c001f8b6 <Vm::fpuAbs(unsigned long long)>
c001fb12:	83 c4 0c             	add    esp,0xc
c001fb15:	52                   	push   edx
c001fb16:	50                   	push   eax
c001fb17:	6a 00                	push   0x0
c001fb19:	e8 54 fe ff ff       	call   c001f972 <Vm::fpuSetReg(int, unsigned long long)>
c001fb1e:	eb bc                	jmp    c001fadc <Vm::x87Handler(regs*)+0x70>
c001fb20:	e8 d3 fc ff ff       	call   c001f7f8 <Vm::fpuGetLog210()>
c001fb25:	eb ac                	jmp    c001fad3 <Vm::x87Handler(regs*)+0x67>
c001fb27:	e8 9c fc ff ff       	call   c001f7c8 <Vm::fpuGetLog2E()>
c001fb2c:	eb a5                	jmp    c001fad3 <Vm::x87Handler(regs*)+0x67>
c001fb2e:	e8 8d fc ff ff       	call   c001f7c0 <Vm::fpuGetPi()>
c001fb33:	eb 9e                	jmp    c001fad3 <Vm::x87Handler(regs*)+0x67>
c001fb35:	e8 d6 fc ff ff       	call   c001f810 <Vm::fpuGetLog102()>
c001fb3a:	eb 97                	jmp    c001fad3 <Vm::x87Handler(regs*)+0x67>
c001fb3c:	e8 9f fc ff ff       	call   c001f7e0 <Vm::fpuGetLogE2()>
c001fb41:	eb 90                	jmp    c001fad3 <Vm::x87Handler(regs*)+0x67>
c001fb43:	8d 50 40             	lea    edx,[eax+0x40]
c001fb46:	80 fa 07             	cmp    dl,0x7
c001fb49:	77 15                	ja     c001fb60 <Vm::x87Handler(regs*)+0xf4>
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	2d c0 00 00 00       	sub    eax,0xc0
c001fb53:	50                   	push   eax
c001fb54:	e8 d6 fd ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fb59:	59                   	pop    ecx
c001fb5a:	5e                   	pop    esi
c001fb5b:	e9 75 ff ff ff       	jmp    c001fad5 <Vm::x87Handler(regs*)+0x69>
c001fb60:	8d 50 38             	lea    edx,[eax+0x38]
c001fb63:	80 fa 07             	cmp    dl,0x7
c001fb66:	77 3c                	ja     c001fba4 <Vm::x87Handler(regs*)+0x138>
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	2d c8 00 00 00       	sub    eax,0xc8
c001fb70:	50                   	push   eax
c001fb71:	e8 b9 fd ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fb76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7d:	89 c6                	mov    esi,eax
c001fb7f:	89 d7                	mov    edi,edx
c001fb81:	e8 a9 fd ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fb86:	83 c4 0c             	add    esp,0xc
c001fb89:	52                   	push   edx
c001fb8a:	50                   	push   eax
c001fb8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb8f:	2d c8 00 00 00       	sub    eax,0xc8
c001fb94:	50                   	push   eax
c001fb95:	e8 d8 fd ff ff       	call   c001f972 <Vm::fpuSetReg(int, unsigned long long)>
c001fb9a:	83 c4 0c             	add    esp,0xc
c001fb9d:	57                   	push   edi
c001fb9e:	56                   	push   esi
c001fb9f:	e9 73 ff ff ff       	jmp    c001fb17 <Vm::x87Handler(regs*)+0xab>
c001fba4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba8:	84 d2                	test   dl,dl
c001fbaa:	75 0f                	jne    c001fbbb <Vm::x87Handler(regs*)+0x14f>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	ff 36                	push   DWORD PTR [esi]
c001fbb1:	e8 c8 fa ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c001fbb6:	e9 bf 00 00 00       	jmp    c001fc7a <Vm::x87Handler(regs*)+0x20e>
c001fbbb:	80 fa 03             	cmp    dl,0x3
c001fbbe:	75 13                	jne    c001fbd3 <Vm::x87Handler(regs*)+0x167>
c001fbc0:	e8 55 fe ff ff       	call   c001fa1a <Vm::fpuPop()>
c001fbc5:	55                   	push   ebp
c001fbc6:	55                   	push   ebp
c001fbc7:	52                   	push   edx
c001fbc8:	50                   	push   eax
c001fbc9:	e8 4c fa ff ff       	call   c001f61a <Vm::fpuInternalTo32(unsigned long long)>
c001fbce:	e9 88 00 00 00       	jmp    c001fc5b <Vm::x87Handler(regs*)+0x1ef>
c001fbd3:	80 fa 05             	cmp    dl,0x5
c001fbd6:	75 0e                	jne    c001fbe6 <Vm::x87Handler(regs*)+0x17a>
c001fbd8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbdb:	66 a3 62 1b 03 c0    	mov    ds:0xc0031b62,ax
c001fbe1:	e9 df 00 00 00       	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x259>
c001fbe6:	31 c0                	xor    eax,eax
c001fbe8:	80 fa 07             	cmp    dl,0x7
c001fbeb:	0f 85 dc 08 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c001fbf1:	66 a1 62 1b 03 c0    	mov    ax,ds:0xc0031b62
c001fbf7:	66 89 06             	mov    WORD PTR [esi],ax
c001fbfa:	e9 c6 00 00 00       	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x259>
c001fbff:	80 fa d8             	cmp    dl,0xd8
c001fc02:	0f 84 c9 00 00 00    	je     c001fcd1 <Vm::x87Handler(regs*)+0x265>
c001fc08:	80 fa dc             	cmp    dl,0xdc
c001fc0b:	0f 84 0d 02 00 00    	je     c001fe1e <Vm::x87Handler(regs*)+0x3b2>
c001fc11:	80 fa de             	cmp    dl,0xde
c001fc14:	0f 84 cd 02 00 00    	je     c001fee7 <Vm::x87Handler(regs*)+0x47b>
c001fc1a:	80 fa dd             	cmp    dl,0xdd
c001fc1d:	0f 84 5f 04 00 00    	je     c0020082 <Vm::x87Handler(regs*)+0x616>
c001fc23:	80 fa da             	cmp    dl,0xda
c001fc26:	0f 84 24 05 00 00    	je     c0020150 <Vm::x87Handler(regs*)+0x6e4>
c001fc2c:	80 fa df             	cmp    dl,0xdf
c001fc2f:	0f 84 68 05 00 00    	je     c002019d <Vm::x87Handler(regs*)+0x731>
c001fc35:	31 c0                	xor    eax,eax
c001fc37:	80 fa db             	cmp    dl,0xdb
c001fc3a:	0f 85 8d 08 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c001fc40:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc44:	80 fa 03             	cmp    dl,0x3
c001fc47:	0f 85 70 06 00 00    	jne    c00202bd <Vm::x87Handler(regs*)+0x851>
c001fc4d:	e8 c8 fd ff ff       	call   c001fa1a <Vm::fpuPop()>
c001fc52:	55                   	push   ebp
c001fc53:	55                   	push   ebp
c001fc54:	52                   	push   edx
c001fc55:	50                   	push   eax
c001fc56:	e8 71 fa ff ff       	call   c001f6cc <Vm::fpuFloatToLong(unsigned long long)>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	89 06                	mov    DWORD PTR [esi],eax
c001fc60:	eb 63                	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x259>
c001fc62:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc66:	84 d2                	test   dl,dl
c001fc68:	0f 85 e6 05 00 00    	jne    c0020254 <Vm::x87Handler(regs*)+0x7e8>
c001fc6e:	57                   	push   edi
c001fc6f:	57                   	push   edi
c001fc70:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc73:	ff 36                	push   DWORD PTR [esi]
c001fc75:	e8 49 fa ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c001fc7a:	5e                   	pop    esi
c001fc7b:	5f                   	pop    edi
c001fc7c:	52                   	push   edx
c001fc7d:	50                   	push   eax
c001fc7e:	e8 3a fd ff ff       	call   c001f9bd <Vm::fpuPush(unsigned long long)>
c001fc83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc87:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc8a:	e9 51 fe ff ff       	jmp    c001fae0 <Vm::x87Handler(regs*)+0x74>
c001fc8f:	80 fa 03             	cmp    dl,0x3
c001fc92:	0f 85 d7 06 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0x903>
c001fc98:	57                   	push   edi
c001fc99:	57                   	push   edi
c001fc9a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc9d:	ff 36                	push   DWORD PTR [esi]
c001fc9f:	e8 1f fa ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c001fca4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcab:	89 c6                	mov    esi,eax
c001fcad:	89 d7                	mov    edi,edx
c001fcaf:	e8 7b fc ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fcb4:	57                   	push   edi
c001fcb5:	56                   	push   esi
c001fcb6:	52                   	push   edx
c001fcb7:	50                   	push   eax
c001fcb8:	e8 95 fb ff ff       	call   c001f852 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcbd:	83 c4 20             	add    esp,0x20
c001fcc0:	e8 55 fd ff ff       	call   c001fa1a <Vm::fpuPop()>
c001fcc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcc9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fccc:	e9 12 fe ff ff       	jmp    c001fae3 <Vm::x87Handler(regs*)+0x77>
c001fcd1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcd5:	8d 50 40             	lea    edx,[eax+0x40]
c001fcd8:	80 fa 07             	cmp    dl,0x7
c001fcdb:	77 29                	ja     c001fd06 <Vm::x87Handler(regs*)+0x29a>
c001fcdd:	83 ec 0c             	sub    esp,0xc
c001fce0:	2d c0 00 00 00       	sub    eax,0xc0
c001fce5:	50                   	push   eax
c001fce6:	e8 44 fc ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fceb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf2:	89 c6                	mov    esi,eax
c001fcf4:	89 d7                	mov    edi,edx
c001fcf6:	e8 34 fc ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fcfb:	57                   	push   edi
c001fcfc:	56                   	push   esi
c001fcfd:	52                   	push   edx
c001fcfe:	50                   	push   eax
c001fcff:	e8 a1 fb ff ff       	call   c001f8a5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd04:	eb 2f                	jmp    c001fd35 <Vm::x87Handler(regs*)+0x2c9>
c001fd06:	8d 50 38             	lea    edx,[eax+0x38]
c001fd09:	80 fa 07             	cmp    dl,0x7
c001fd0c:	77 2f                	ja     c001fd3d <Vm::x87Handler(regs*)+0x2d1>
c001fd0e:	83 ec 0c             	sub    esp,0xc
c001fd11:	2d c8 00 00 00       	sub    eax,0xc8
c001fd16:	50                   	push   eax
c001fd17:	e8 13 fc ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fd1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd23:	89 c6                	mov    esi,eax
c001fd25:	89 d7                	mov    edi,edx
c001fd27:	e8 03 fc ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fd2c:	57                   	push   edi
c001fd2d:	56                   	push   esi
c001fd2e:	52                   	push   edx
c001fd2f:	50                   	push   eax
c001fd30:	e8 a9 fb ff ff       	call   c001f8de <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd35:	83 c4 1c             	add    esp,0x1c
c001fd38:	e9 d8 fd ff ff       	jmp    c001fb15 <Vm::x87Handler(regs*)+0xa9>
c001fd3d:	8d 50 30             	lea    edx,[eax+0x30]
c001fd40:	80 fa 07             	cmp    dl,0x7
c001fd43:	77 0d                	ja     c001fd52 <Vm::x87Handler(regs*)+0x2e6>
c001fd45:	83 ec 0c             	sub    esp,0xc
c001fd48:	2d d0 00 00 00       	sub    eax,0xd0
c001fd4d:	e9 99 03 00 00       	jmp    c00200eb <Vm::x87Handler(regs*)+0x67f>
c001fd52:	8d 50 28             	lea    edx,[eax+0x28]
c001fd55:	80 fa 07             	cmp    dl,0x7
c001fd58:	77 0d                	ja     c001fd67 <Vm::x87Handler(regs*)+0x2fb>
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	2d d8 00 00 00       	sub    eax,0xd8
c001fd62:	e9 c0 03 00 00       	jmp    c0020127 <Vm::x87Handler(regs*)+0x6bb>
c001fd67:	8d 50 20             	lea    edx,[eax+0x20]
c001fd6a:	80 fa 07             	cmp    dl,0x7
c001fd6d:	77 1b                	ja     c001fd8a <Vm::x87Handler(regs*)+0x31e>
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	2d e0 00 00 00       	sub    eax,0xe0
c001fd77:	50                   	push   eax
c001fd78:	e8 b2 fb ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fd7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd84:	89 c6                	mov    esi,eax
c001fd86:	89 d7                	mov    edi,edx
c001fd88:	eb 22                	jmp    c001fdac <Vm::x87Handler(regs*)+0x340>
c001fd8a:	8d 50 18             	lea    edx,[eax+0x18]
c001fd8d:	80 fa 07             	cmp    dl,0x7
c001fd90:	77 2d                	ja     c001fdbf <Vm::x87Handler(regs*)+0x353>
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	6a 00                	push   0x0
c001fd97:	e8 93 fb ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fd9c:	89 c6                	mov    esi,eax
c001fd9e:	89 d7                	mov    edi,edx
c001fda0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda4:	2d e8 00 00 00       	sub    eax,0xe8
c001fda9:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdac:	e8 7e fb ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fdb1:	57                   	push   edi
c001fdb2:	56                   	push   esi
c001fdb3:	52                   	push   edx
c001fdb4:	50                   	push   eax
c001fdb5:	e8 15 fb ff ff       	call   c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdba:	e9 76 ff ff ff       	jmp    c001fd35 <Vm::x87Handler(regs*)+0x2c9>
c001fdbf:	8d 50 10             	lea    edx,[eax+0x10]
c001fdc2:	80 fa 07             	cmp    dl,0x7
c001fdc5:	77 1b                	ja     c001fde2 <Vm::x87Handler(regs*)+0x376>
c001fdc7:	83 ec 0c             	sub    esp,0xc
c001fdca:	2d f0 00 00 00       	sub    eax,0xf0
c001fdcf:	50                   	push   eax
c001fdd0:	e8 5a fb ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fdd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddc:	89 c6                	mov    esi,eax
c001fdde:	89 d7                	mov    edi,edx
c001fde0:	eb 22                	jmp    c001fe04 <Vm::x87Handler(regs*)+0x398>
c001fde2:	3c f7                	cmp    al,0xf7
c001fde4:	0f 86 d1 03 00 00    	jbe    c00201bb <Vm::x87Handler(regs*)+0x74f>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	6a 00                	push   0x0
c001fdef:	e8 3b fb ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fdf4:	89 c6                	mov    esi,eax
c001fdf6:	89 d7                	mov    edi,edx
c001fdf8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdfc:	2d f8 00 00 00       	sub    eax,0xf8
c001fe01:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe04:	e8 26 fb ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fe09:	57                   	push   edi
c001fe0a:	56                   	push   esi
c001fe0b:	52                   	push   edx
c001fe0c:	50                   	push   eax
c001fe0d:	e8 eb fa ff ff       	call   c001f8fd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe12:	83 c4 1c             	add    esp,0x1c
c001fe15:	52                   	push   edx
c001fe16:	50                   	push   eax
c001fe17:	6a 00                	push   0x0
c001fe19:	e9 51 02 00 00       	jmp    c002006f <Vm::x87Handler(regs*)+0x603>
c001fe1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe22:	8d 50 40             	lea    edx,[eax+0x40]
c001fe25:	80 fa 07             	cmp    dl,0x7
c001fe28:	77 37                	ja     c001fe61 <Vm::x87Handler(regs*)+0x3f5>
c001fe2a:	83 ec 0c             	sub    esp,0xc
c001fe2d:	2d c0 00 00 00       	sub    eax,0xc0
c001fe32:	50                   	push   eax
c001fe33:	e8 f7 fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fe38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe3f:	89 c6                	mov    esi,eax
c001fe41:	89 d7                	mov    edi,edx
c001fe43:	e8 e7 fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fe48:	57                   	push   edi
c001fe49:	56                   	push   esi
c001fe4a:	52                   	push   edx
c001fe4b:	50                   	push   eax
c001fe4c:	e8 54 fa ff ff       	call   c001f8a5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe51:	83 c4 1c             	add    esp,0x1c
c001fe54:	52                   	push   edx
c001fe55:	50                   	push   eax
c001fe56:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe5a:	2d c0 00 00 00       	sub    eax,0xc0
c001fe5f:	eb 3d                	jmp    c001fe9e <Vm::x87Handler(regs*)+0x432>
c001fe61:	8d 50 38             	lea    edx,[eax+0x38]
c001fe64:	80 fa 07             	cmp    dl,0x7
c001fe67:	77 3b                	ja     c001fea4 <Vm::x87Handler(regs*)+0x438>
c001fe69:	83 ec 0c             	sub    esp,0xc
c001fe6c:	2d c8 00 00 00       	sub    eax,0xc8
c001fe71:	50                   	push   eax
c001fe72:	e8 b8 fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fe77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe7e:	89 c6                	mov    esi,eax
c001fe80:	89 d7                	mov    edi,edx
c001fe82:	e8 a8 fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fe87:	57                   	push   edi
c001fe88:	56                   	push   esi
c001fe89:	52                   	push   edx
c001fe8a:	50                   	push   eax
c001fe8b:	e8 4e fa ff ff       	call   c001f8de <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe90:	83 c4 1c             	add    esp,0x1c
c001fe93:	52                   	push   edx
c001fe94:	50                   	push   eax
c001fe95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe99:	2d c8 00 00 00       	sub    eax,0xc8
c001fe9e:	50                   	push   eax
c001fe9f:	e9 75 fc ff ff       	jmp    c001fb19 <Vm::x87Handler(regs*)+0xad>
c001fea4:	83 c0 18             	add    eax,0x18
c001fea7:	3c 07                	cmp    al,0x7
c001fea9:	0f 87 3b 04 00 00    	ja     c00202ea <Vm::x87Handler(regs*)+0x87e>
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	6a 00                	push   0x0
c001feb4:	e8 76 fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001feb9:	89 c6                	mov    esi,eax
c001febb:	89 d7                	mov    edi,edx
c001febd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec1:	2d e8 00 00 00       	sub    eax,0xe8
c001fec6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec9:	e8 61 fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001fece:	57                   	push   edi
c001fecf:	56                   	push   esi
c001fed0:	52                   	push   edx
c001fed1:	50                   	push   eax
c001fed2:	e8 f8 f9 ff ff       	call   c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fed7:	83 c4 1c             	add    esp,0x1c
c001feda:	52                   	push   edx
c001fedb:	50                   	push   eax
c001fedc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee0:	2d e8 00 00 00       	sub    eax,0xe8
c001fee5:	eb b7                	jmp    c001fe9e <Vm::x87Handler(regs*)+0x432>
c001fee7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feeb:	8d 50 40             	lea    edx,[eax+0x40]
c001feee:	80 fa 07             	cmp    dl,0x7
c001fef1:	77 3a                	ja     c001ff2d <Vm::x87Handler(regs*)+0x4c1>
c001fef3:	83 ec 0c             	sub    esp,0xc
c001fef6:	2d c0 00 00 00       	sub    eax,0xc0
c001fefb:	50                   	push   eax
c001fefc:	e8 2e fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ff01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff08:	89 c6                	mov    esi,eax
c001ff0a:	89 d7                	mov    edi,edx
c001ff0c:	e8 1e fa ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ff11:	57                   	push   edi
c001ff12:	56                   	push   esi
c001ff13:	52                   	push   edx
c001ff14:	50                   	push   eax
c001ff15:	e8 8b f9 ff ff       	call   c001f8a5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff1a:	83 c4 1c             	add    esp,0x1c
c001ff1d:	52                   	push   edx
c001ff1e:	50                   	push   eax
c001ff1f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff23:	2d c0 00 00 00       	sub    eax,0xc0
c001ff28:	e9 9e 01 00 00       	jmp    c00200cb <Vm::x87Handler(regs*)+0x65f>
c001ff2d:	8d 50 20             	lea    edx,[eax+0x20]
c001ff30:	80 fa 07             	cmp    dl,0x7
c001ff33:	77 3a                	ja     c001ff6f <Vm::x87Handler(regs*)+0x503>
c001ff35:	83 ec 0c             	sub    esp,0xc
c001ff38:	2d e0 00 00 00       	sub    eax,0xe0
c001ff3d:	50                   	push   eax
c001ff3e:	e8 ec f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ff43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff4a:	89 c6                	mov    esi,eax
c001ff4c:	89 d7                	mov    edi,edx
c001ff4e:	e8 dc f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ff53:	57                   	push   edi
c001ff54:	56                   	push   esi
c001ff55:	52                   	push   edx
c001ff56:	50                   	push   eax
c001ff57:	e8 73 f9 ff ff       	call   c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff5c:	83 c4 1c             	add    esp,0x1c
c001ff5f:	52                   	push   edx
c001ff60:	50                   	push   eax
c001ff61:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff65:	2d e0 00 00 00       	sub    eax,0xe0
c001ff6a:	e9 5c 01 00 00       	jmp    c00200cb <Vm::x87Handler(regs*)+0x65f>
c001ff6f:	8d 50 18             	lea    edx,[eax+0x18]
c001ff72:	80 fa 07             	cmp    dl,0x7
c001ff75:	77 3b                	ja     c001ffb2 <Vm::x87Handler(regs*)+0x546>
c001ff77:	83 ec 0c             	sub    esp,0xc
c001ff7a:	6a 00                	push   0x0
c001ff7c:	e8 ae f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ff81:	89 c6                	mov    esi,eax
c001ff83:	89 d7                	mov    edi,edx
c001ff85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff89:	2d e8 00 00 00       	sub    eax,0xe8
c001ff8e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff91:	e8 99 f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ff96:	57                   	push   edi
c001ff97:	56                   	push   esi
c001ff98:	52                   	push   edx
c001ff99:	50                   	push   eax
c001ff9a:	e8 30 f9 ff ff       	call   c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff9f:	83 c4 1c             	add    esp,0x1c
c001ffa2:	52                   	push   edx
c001ffa3:	50                   	push   eax
c001ffa4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa8:	2d e8 00 00 00       	sub    eax,0xe8
c001ffad:	e9 19 01 00 00       	jmp    c00200cb <Vm::x87Handler(regs*)+0x65f>
c001ffb2:	8d 50 38             	lea    edx,[eax+0x38]
c001ffb5:	80 fa 07             	cmp    dl,0x7
c001ffb8:	77 37                	ja     c001fff1 <Vm::x87Handler(regs*)+0x585>
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	2d c8 00 00 00       	sub    eax,0xc8
c001ffc2:	50                   	push   eax
c001ffc3:	e8 67 f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ffc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffcf:	89 c6                	mov    esi,eax
c001ffd1:	89 d7                	mov    edi,edx
c001ffd3:	e8 57 f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ffd8:	57                   	push   edi
c001ffd9:	56                   	push   esi
c001ffda:	52                   	push   edx
c001ffdb:	50                   	push   eax
c001ffdc:	e8 fd f8 ff ff       	call   c001f8de <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffe1:	83 c4 1c             	add    esp,0x1c
c001ffe4:	52                   	push   edx
c001ffe5:	50                   	push   eax
c001ffe6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffea:	2d c8 00 00 00       	sub    eax,0xc8
c001ffef:	eb 7d                	jmp    c002006e <Vm::x87Handler(regs*)+0x602>
c001fff1:	3c f7                	cmp    al,0xf7
c001fff3:	76 38                	jbe    c002002d <Vm::x87Handler(regs*)+0x5c1>
c001fff5:	83 ec 0c             	sub    esp,0xc
c001fff8:	6a 00                	push   0x0
c001fffa:	e8 30 f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c001ffff:	89 c6                	mov    esi,eax
c0020001:	89 d7                	mov    edi,edx
c0020003:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020007:	2d f8 00 00 00       	sub    eax,0xf8
c002000c:	89 04 24             	mov    DWORD PTR [esp],eax
c002000f:	e8 1b f9 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020014:	57                   	push   edi
c0020015:	56                   	push   esi
c0020016:	52                   	push   edx
c0020017:	50                   	push   eax
c0020018:	e8 e0 f8 ff ff       	call   c001f8fd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002001d:	83 c4 1c             	add    esp,0x1c
c0020020:	52                   	push   edx
c0020021:	50                   	push   eax
c0020022:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020026:	2d f8 00 00 00       	sub    eax,0xf8
c002002b:	eb 41                	jmp    c002006e <Vm::x87Handler(regs*)+0x602>
c002002d:	8d 50 10             	lea    edx,[eax+0x10]
c0020030:	80 fa 07             	cmp    dl,0x7
c0020033:	0f 87 5a 01 00 00    	ja     c0020193 <Vm::x87Handler(regs*)+0x727>
c0020039:	83 ec 0c             	sub    esp,0xc
c002003c:	2d f0 00 00 00       	sub    eax,0xf0
c0020041:	50                   	push   eax
c0020042:	e8 e8 f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020047:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002004e:	89 c6                	mov    esi,eax
c0020050:	89 d7                	mov    edi,edx
c0020052:	e8 d8 f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020057:	57                   	push   edi
c0020058:	56                   	push   esi
c0020059:	52                   	push   edx
c002005a:	50                   	push   eax
c002005b:	e8 9d f8 ff ff       	call   c001f8fd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020060:	83 c4 1c             	add    esp,0x1c
c0020063:	52                   	push   edx
c0020064:	50                   	push   eax
c0020065:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020069:	2d f0 00 00 00       	sub    eax,0xf0
c002006e:	50                   	push   eax
c002006f:	e8 fe f8 ff ff       	call   c001f972 <Vm::fpuSetReg(int, unsigned long long)>
c0020074:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020078:	e8 9d f9 ff ff       	call   c001fa1a <Vm::fpuPop()>
c002007d:	e9 5e fa ff ff       	jmp    c001fae0 <Vm::x87Handler(regs*)+0x74>
c0020082:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020086:	8d 50 30             	lea    edx,[eax+0x30]
c0020089:	80 fa 07             	cmp    dl,0x7
c002008c:	77 1d                	ja     c00200ab <Vm::x87Handler(regs*)+0x63f>
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	6a 00                	push   0x0
c0020093:	e8 97 f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020098:	83 c4 0c             	add    esp,0xc
c002009b:	52                   	push   edx
c002009c:	50                   	push   eax
c002009d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a1:	2d d0 00 00 00       	sub    eax,0xd0
c00200a6:	e9 f3 fd ff ff       	jmp    c001fe9e <Vm::x87Handler(regs*)+0x432>
c00200ab:	8d 50 28             	lea    edx,[eax+0x28]
c00200ae:	80 fa 07             	cmp    dl,0x7
c00200b1:	77 28                	ja     c00200db <Vm::x87Handler(regs*)+0x66f>
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	6a 00                	push   0x0
c00200b8:	e8 72 f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c00200bd:	83 c4 0c             	add    esp,0xc
c00200c0:	52                   	push   edx
c00200c1:	50                   	push   eax
c00200c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c6:	2d d8 00 00 00       	sub    eax,0xd8
c00200cb:	50                   	push   eax
c00200cc:	e8 a1 f8 ff ff       	call   c001f972 <Vm::fpuSetReg(int, unsigned long long)>
c00200d1:	e8 44 f9 ff ff       	call   c001fa1a <Vm::fpuPop()>
c00200d6:	e9 01 fa ff ff       	jmp    c001fadc <Vm::x87Handler(regs*)+0x70>
c00200db:	8d 50 20             	lea    edx,[eax+0x20]
c00200de:	80 fa 07             	cmp    dl,0x7
c00200e1:	77 30                	ja     c0020113 <Vm::x87Handler(regs*)+0x6a7>
c00200e3:	83 ec 0c             	sub    esp,0xc
c00200e6:	2d e0 00 00 00       	sub    eax,0xe0
c00200eb:	50                   	push   eax
c00200ec:	e8 3e f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c00200f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f8:	89 c6                	mov    esi,eax
c00200fa:	89 d7                	mov    edi,edx
c00200fc:	e8 2e f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020101:	57                   	push   edi
c0020102:	56                   	push   esi
c0020103:	52                   	push   edx
c0020104:	50                   	push   eax
c0020105:	e8 48 f7 ff ff       	call   c001f852 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002010a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002010e:	e9 54 02 00 00       	jmp    c0020367 <Vm::x87Handler(regs*)+0x8fb>
c0020113:	8d 50 18             	lea    edx,[eax+0x18]
c0020116:	80 fa 07             	cmp    dl,0x7
c0020119:	0f 87 43 fb ff ff    	ja     c001fc62 <Vm::x87Handler(regs*)+0x1f6>
c002011f:	83 ec 0c             	sub    esp,0xc
c0020122:	2d e8 00 00 00       	sub    eax,0xe8
c0020127:	50                   	push   eax
c0020128:	e8 02 f8 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c002012d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020134:	89 c6                	mov    esi,eax
c0020136:	89 d7                	mov    edi,edx
c0020138:	e8 f2 f7 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c002013d:	57                   	push   edi
c002013e:	56                   	push   esi
c002013f:	52                   	push   edx
c0020140:	50                   	push   eax
c0020141:	e8 0c f7 ff ff       	call   c001f852 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020146:	83 c4 20             	add    esp,0x20
c0020149:	e8 cc f8 ff ff       	call   c001fa1a <Vm::fpuPop()>
c002014e:	eb 62                	jmp    c00201b2 <Vm::x87Handler(regs*)+0x746>
c0020150:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020154:	0f 85 0f 01 00 00    	jne    c0020269 <Vm::x87Handler(regs*)+0x7fd>
c002015a:	83 ec 0c             	sub    esp,0xc
c002015d:	6a 01                	push   0x1
c002015f:	e8 cb f7 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020164:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002016b:	89 c6                	mov    esi,eax
c002016d:	89 d7                	mov    edi,edx
c002016f:	e8 bb f7 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020174:	57                   	push   edi
c0020175:	56                   	push   esi
c0020176:	52                   	push   edx
c0020177:	50                   	push   eax
c0020178:	e8 d5 f6 ff ff       	call   c001f852 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002017d:	83 c4 20             	add    esp,0x20
c0020180:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020184:	e8 91 f8 ff ff       	call   c001fa1a <Vm::fpuPop()>
c0020189:	e8 8c f8 ff ff       	call   c001fa1a <Vm::fpuPop()>
c002018e:	e9 50 f9 ff ff       	jmp    c001fae3 <Vm::x87Handler(regs*)+0x77>
c0020193:	3c d9                	cmp    al,0xd9
c0020195:	0f 85 b5 02 00 00    	jne    c0020450 <Vm::x87Handler(regs*)+0x9e4>
c002019b:	eb bd                	jmp    c002015a <Vm::x87Handler(regs*)+0x6ee>
c002019d:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201a1:	0f 85 ea 02 00 00    	jne    c0020491 <Vm::x87Handler(regs*)+0xa25>
c00201a7:	0f b7 05 60 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b60
c00201ae:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201b2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201b6:	e9 28 f9 ff ff       	jmp    c001fae3 <Vm::x87Handler(regs*)+0x77>
c00201bb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201bf:	84 d2                	test   dl,dl
c00201c1:	75 0f                	jne    c00201d2 <Vm::x87Handler(regs*)+0x766>
c00201c3:	83 ec 0c             	sub    esp,0xc
c00201c6:	ff 36                	push   DWORD PTR [esi]
c00201c8:	e8 b1 f4 ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c00201cd:	e9 2c 01 00 00       	jmp    c00202fe <Vm::x87Handler(regs*)+0x892>
c00201d2:	80 fa 01             	cmp    dl,0x1
c00201d5:	75 0f                	jne    c00201e6 <Vm::x87Handler(regs*)+0x77a>
c00201d7:	83 ec 0c             	sub    esp,0xc
c00201da:	ff 36                	push   DWORD PTR [esi]
c00201dc:	e8 9d f4 ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c00201e1:	e9 81 02 00 00       	jmp    c0020467 <Vm::x87Handler(regs*)+0x9fb>
c00201e6:	80 fa 04             	cmp    dl,0x4
c00201e9:	75 0f                	jne    c00201fa <Vm::x87Handler(regs*)+0x78e>
c00201eb:	83 ec 0c             	sub    esp,0xc
c00201ee:	ff 36                	push   DWORD PTR [esi]
c00201f0:	e8 89 f4 ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c00201f5:	e9 86 01 00 00       	jmp    c0020380 <Vm::x87Handler(regs*)+0x914>
c00201fa:	80 fa 05             	cmp    dl,0x5
c00201fd:	75 1b                	jne    c002021a <Vm::x87Handler(regs*)+0x7ae>
c00201ff:	83 ec 0c             	sub    esp,0xc
c0020202:	6a 00                	push   0x0
c0020204:	e8 26 f7 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020209:	89 c7                	mov    edi,eax
c002020b:	89 d5                	mov    ebp,edx
c002020d:	58                   	pop    eax
c002020e:	ff 36                	push   DWORD PTR [esi]
c0020210:	e8 69 f4 ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c0020215:	e9 a3 01 00 00       	jmp    c00203bd <Vm::x87Handler(regs*)+0x951>
c002021a:	80 fa 06             	cmp    dl,0x6
c002021d:	75 0f                	jne    c002022e <Vm::x87Handler(regs*)+0x7c2>
c002021f:	83 ec 0c             	sub    esp,0xc
c0020222:	ff 36                	push   DWORD PTR [esi]
c0020224:	e8 55 f4 ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c0020229:	e9 ae 01 00 00       	jmp    c00203dc <Vm::x87Handler(regs*)+0x970>
c002022e:	31 c0                	xor    eax,eax
c0020230:	80 fa 07             	cmp    dl,0x7
c0020233:	0f 85 94 02 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	6a 00                	push   0x0
c002023e:	e8 ec f6 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020243:	89 c7                	mov    edi,eax
c0020245:	89 d5                	mov    ebp,edx
c0020247:	58                   	pop    eax
c0020248:	ff 36                	push   DWORD PTR [esi]
c002024a:	e8 2f f4 ff ff       	call   c001f67e <Vm::fpu32ToInternal(unsigned int)>
c002024f:	e9 cb 01 00 00       	jmp    c002041f <Vm::x87Handler(regs*)+0x9b3>
c0020254:	80 fa 03             	cmp    dl,0x3
c0020257:	0f 85 d3 01 00 00    	jne    c0020430 <Vm::x87Handler(regs*)+0x9c4>
c002025d:	e8 b8 f7 ff ff       	call   c001fa1a <Vm::fpuPop()>
c0020262:	51                   	push   ecx
c0020263:	51                   	push   ecx
c0020264:	e9 de 01 00 00       	jmp    c0020447 <Vm::x87Handler(regs*)+0x9db>
c0020269:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002026d:	80 fa 01             	cmp    dl,0x1
c0020270:	75 09                	jne    c002027b <Vm::x87Handler(regs*)+0x80f>
c0020272:	57                   	push   edi
c0020273:	57                   	push   edi
c0020274:	8b 06                	mov    eax,DWORD PTR [esi]
c0020276:	e9 e3 01 00 00       	jmp    c002045e <Vm::x87Handler(regs*)+0x9f2>
c002027b:	80 fa 04             	cmp    dl,0x4
c002027e:	75 12                	jne    c0020292 <Vm::x87Handler(regs*)+0x826>
c0020280:	31 d2                	xor    edx,edx
c0020282:	51                   	push   ecx
c0020283:	51                   	push   ecx
c0020284:	8b 06                	mov    eax,DWORD PTR [esi]
c0020286:	52                   	push   edx
c0020287:	50                   	push   eax
c0020288:	e8 d0 f4 ff ff       	call   c001f75d <Vm::fpuLongToFloat(long long)>
c002028d:	e9 ee 00 00 00       	jmp    c0020380 <Vm::x87Handler(regs*)+0x914>
c0020292:	31 c0                	xor    eax,eax
c0020294:	80 fa 07             	cmp    dl,0x7
c0020297:	0f 85 30 02 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c002029d:	83 ec 0c             	sub    esp,0xc
c00202a0:	6a 00                	push   0x0
c00202a2:	e8 88 f6 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c00202a7:	89 c7                	mov    edi,eax
c00202a9:	89 d5                	mov    ebp,edx
c00202ab:	58                   	pop    eax
c00202ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00202ae:	5a                   	pop    edx
c00202af:	31 d2                	xor    edx,edx
c00202b1:	52                   	push   edx
c00202b2:	50                   	push   eax
c00202b3:	e8 a5 f4 ff ff       	call   c001f75d <Vm::fpuLongToFloat(long long)>
c00202b8:	e9 62 01 00 00       	jmp    c002041f <Vm::x87Handler(regs*)+0x9b3>
c00202bd:	84 d2                	test   dl,dl
c00202bf:	75 0d                	jne    c00202ce <Vm::x87Handler(regs*)+0x862>
c00202c1:	31 d2                	xor    edx,edx
c00202c3:	55                   	push   ebp
c00202c4:	55                   	push   ebp
c00202c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00202c7:	52                   	push   edx
c00202c8:	50                   	push   eax
c00202c9:	e9 d3 01 00 00       	jmp    c00204a1 <Vm::x87Handler(regs*)+0xa35>
c00202ce:	31 c0                	xor    eax,eax
c00202d0:	80 fa 02             	cmp    dl,0x2
c00202d3:	0f 85 f4 01 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c00202d9:	83 ec 0c             	sub    esp,0xc
c00202dc:	6a 00                	push   0x0
c00202de:	e8 4c f6 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c00202e3:	59                   	pop    ecx
c00202e4:	5f                   	pop    edi
c00202e5:	e9 6a f9 ff ff       	jmp    c001fc54 <Vm::x87Handler(regs*)+0x1e8>
c00202ea:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ee:	84 d2                	test   dl,dl
c00202f0:	75 2a                	jne    c002031c <Vm::x87Handler(regs*)+0x8b0>
c00202f2:	50                   	push   eax
c00202f3:	50                   	push   eax
c00202f4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f7:	ff 36                	push   DWORD PTR [esi]
c00202f9:	e8 c5 f3 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c00202fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020305:	89 c6                	mov    esi,eax
c0020307:	89 d7                	mov    edi,edx
c0020309:	e8 21 f6 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c002030e:	57                   	push   edi
c002030f:	56                   	push   esi
c0020310:	52                   	push   edx
c0020311:	50                   	push   eax
c0020312:	e8 8e f5 ff ff       	call   c001f8a5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020317:	e9 64 01 00 00       	jmp    c0020480 <Vm::x87Handler(regs*)+0xa14>
c002031c:	80 fa 01             	cmp    dl,0x1
c002031f:	75 11                	jne    c0020332 <Vm::x87Handler(regs*)+0x8c6>
c0020321:	50                   	push   eax
c0020322:	50                   	push   eax
c0020323:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020326:	ff 36                	push   DWORD PTR [esi]
c0020328:	e8 96 f3 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c002032d:	e9 35 01 00 00       	jmp    c0020467 <Vm::x87Handler(regs*)+0x9fb>
c0020332:	80 fa 02             	cmp    dl,0x2
c0020335:	0f 85 54 f9 ff ff    	jne    c001fc8f <Vm::x87Handler(regs*)+0x223>
c002033b:	55                   	push   ebp
c002033c:	55                   	push   ebp
c002033d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020340:	ff 36                	push   DWORD PTR [esi]
c0020342:	e8 7c f3 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c0020347:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002034e:	89 c6                	mov    esi,eax
c0020350:	89 d7                	mov    edi,edx
c0020352:	e8 d8 f5 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020357:	57                   	push   edi
c0020358:	56                   	push   esi
c0020359:	52                   	push   edx
c002035a:	50                   	push   eax
c002035b:	e8 f2 f4 ff ff       	call   c001f852 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020360:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020364:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020367:	83 c4 20             	add    esp,0x20
c002036a:	e9 74 f7 ff ff       	jmp    c001fae3 <Vm::x87Handler(regs*)+0x77>
c002036f:	80 fa 04             	cmp    dl,0x4
c0020372:	75 2a                	jne    c002039e <Vm::x87Handler(regs*)+0x932>
c0020374:	51                   	push   ecx
c0020375:	51                   	push   ecx
c0020376:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020379:	ff 36                	push   DWORD PTR [esi]
c002037b:	e8 43 f3 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c0020380:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020387:	89 c6                	mov    esi,eax
c0020389:	89 d7                	mov    edi,edx
c002038b:	e8 9f f5 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020390:	57                   	push   edi
c0020391:	56                   	push   esi
c0020392:	52                   	push   edx
c0020393:	50                   	push   eax
c0020394:	e8 36 f5 ff ff       	call   c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020399:	e9 e2 00 00 00       	jmp    c0020480 <Vm::x87Handler(regs*)+0xa14>
c002039e:	80 fa 05             	cmp    dl,0x5
c00203a1:	75 28                	jne    c00203cb <Vm::x87Handler(regs*)+0x95f>
c00203a3:	83 ec 0c             	sub    esp,0xc
c00203a6:	6a 00                	push   0x0
c00203a8:	e8 82 f5 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c00203ad:	89 c7                	mov    edi,eax
c00203af:	89 d5                	mov    ebp,edx
c00203b1:	58                   	pop    eax
c00203b2:	5a                   	pop    edx
c00203b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b6:	ff 36                	push   DWORD PTR [esi]
c00203b8:	e8 06 f3 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c00203bd:	83 c4 10             	add    esp,0x10
c00203c0:	55                   	push   ebp
c00203c1:	57                   	push   edi
c00203c2:	52                   	push   edx
c00203c3:	50                   	push   eax
c00203c4:	e8 06 f5 ff ff       	call   c001f8cf <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203c9:	eb 60                	jmp    c002042b <Vm::x87Handler(regs*)+0x9bf>
c00203cb:	80 fa 06             	cmp    dl,0x6
c00203ce:	75 2a                	jne    c00203fa <Vm::x87Handler(regs*)+0x98e>
c00203d0:	51                   	push   ecx
c00203d1:	51                   	push   ecx
c00203d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d5:	ff 36                	push   DWORD PTR [esi]
c00203d7:	e8 e7 f2 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c00203dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e3:	89 c6                	mov    esi,eax
c00203e5:	89 d7                	mov    edi,edx
c00203e7:	e8 43 f5 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c00203ec:	57                   	push   edi
c00203ed:	56                   	push   esi
c00203ee:	52                   	push   edx
c00203ef:	50                   	push   eax
c00203f0:	e8 08 f5 ff ff       	call   c001f8fd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203f5:	e9 86 00 00 00       	jmp    c0020480 <Vm::x87Handler(regs*)+0xa14>
c00203fa:	31 c0                	xor    eax,eax
c00203fc:	80 fa 07             	cmp    dl,0x7
c00203ff:	0f 85 c8 00 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c0020405:	83 ec 0c             	sub    esp,0xc
c0020408:	6a 00                	push   0x0
c002040a:	e8 20 f5 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c002040f:	89 c7                	mov    edi,eax
c0020411:	89 d5                	mov    ebp,edx
c0020413:	58                   	pop    eax
c0020414:	5a                   	pop    edx
c0020415:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020418:	ff 36                	push   DWORD PTR [esi]
c002041a:	e8 a4 f2 ff ff       	call   c001f6c3 <Vm::fpu64ToInternal(unsigned long long)>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	55                   	push   ebp
c0020423:	57                   	push   edi
c0020424:	52                   	push   edx
c0020425:	50                   	push   eax
c0020426:	e8 d2 f4 ff ff       	call   c001f8fd <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002042b:	83 c4 0c             	add    esp,0xc
c002042e:	eb 53                	jmp    c0020483 <Vm::x87Handler(regs*)+0xa17>
c0020430:	31 c0                	xor    eax,eax
c0020432:	80 fa 02             	cmp    dl,0x2
c0020435:	0f 85 92 00 00 00    	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c002043b:	83 ec 0c             	sub    esp,0xc
c002043e:	6a 00                	push   0x0
c0020440:	e8 ea f4 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020445:	59                   	pop    ecx
c0020446:	5f                   	pop    edi
c0020447:	52                   	push   edx
c0020448:	50                   	push   eax
c0020449:	e8 27 f2 ff ff       	call   c001f675 <Vm::fpuInternalTo64(unsigned long long)>
c002044e:	eb 70                	jmp    c00204c0 <Vm::x87Handler(regs*)+0xa54>
c0020450:	31 c0                	xor    eax,eax
c0020452:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020457:	75 74                	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c0020459:	50                   	push   eax
c002045a:	50                   	push   eax
c002045b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002045e:	31 d2                	xor    edx,edx
c0020460:	52                   	push   edx
c0020461:	50                   	push   eax
c0020462:	e8 f6 f2 ff ff       	call   c001f75d <Vm::fpuLongToFloat(long long)>
c0020467:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002046e:	89 c6                	mov    esi,eax
c0020470:	89 d7                	mov    edi,edx
c0020472:	e8 b8 f4 ff ff       	call   c001f92f <Vm::fpuGetReg(int)>
c0020477:	57                   	push   edi
c0020478:	56                   	push   esi
c0020479:	52                   	push   edx
c002047a:	50                   	push   eax
c002047b:	e8 5e f4 ff ff       	call   c001f8de <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020480:	83 c4 1c             	add    esp,0x1c
c0020483:	52                   	push   edx
c0020484:	50                   	push   eax
c0020485:	6a 00                	push   0x0
c0020487:	e8 e6 f4 ff ff       	call   c001f972 <Vm::fpuSetReg(int, unsigned long long)>
c002048c:	e9 f2 f7 ff ff       	jmp    c001fc83 <Vm::x87Handler(regs*)+0x217>
c0020491:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020495:	80 fa 05             	cmp    dl,0x5
c0020498:	75 11                	jne    c00204ab <Vm::x87Handler(regs*)+0xa3f>
c002049a:	55                   	push   ebp
c002049b:	55                   	push   ebp
c002049c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049f:	ff 36                	push   DWORD PTR [esi]
c00204a1:	e8 81 f2 ff ff       	call   c001f727 <Vm::fpuULongToFloat(unsigned long long)>
c00204a6:	e9 cf f7 ff ff       	jmp    c001fc7a <Vm::x87Handler(regs*)+0x20e>
c00204ab:	31 c0                	xor    eax,eax
c00204ad:	80 fa 07             	cmp    dl,0x7
c00204b0:	75 1b                	jne    c00204cd <Vm::x87Handler(regs*)+0xa61>
c00204b2:	e8 63 f5 ff ff       	call   c001fa1a <Vm::fpuPop()>
c00204b7:	51                   	push   ecx
c00204b8:	51                   	push   ecx
c00204b9:	52                   	push   edx
c00204ba:	50                   	push   eax
c00204bb:	e8 0c f2 ff ff       	call   c001f6cc <Vm::fpuFloatToLong(unsigned long long)>
c00204c0:	83 c4 10             	add    esp,0x10
c00204c3:	89 06                	mov    DWORD PTR [esi],eax
c00204c5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204c8:	e9 f8 f7 ff ff       	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x259>
c00204cd:	83 c4 1c             	add    esp,0x1c
c00204d0:	5b                   	pop    ebx
c00204d1:	5e                   	pop    esi
c00204d2:	5f                   	pop    edi
c00204d3:	5d                   	pop    ebp
c00204d4:	c3                   	ret    

c00204d5 <__static_initialization_and_destruction_0(int, int)>:
c00204d5:	83 ec 0c             	sub    esp,0xc
c00204d8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204dd:	75 1a                	jne    c00204f9 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204df:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204e7:	75 10                	jne    c00204f9 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204e9:	83 ec 0c             	sub    esp,0xc
c00204ec:	68 60 1b 03 c0       	push   0xc0031b60
c00204f1:	e8 1a 88 00 00       	call   c0028d10 <Vm::_FPUState::_FPUState()>
c00204f6:	83 c4 10             	add    esp,0x10
c00204f9:	90                   	nop
c00204fa:	83 c4 0c             	add    esp,0xc
c00204fd:	c3                   	ret    

c00204fe <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204fe:	83 ec 0c             	sub    esp,0xc
c0020501:	83 ec 08             	sub    esp,0x8
c0020504:	68 ff ff 00 00       	push   0xffff
c0020509:	6a 01                	push   0x1
c002050b:	e8 c5 ff ff ff       	call   c00204d5 <__static_initialization_and_destruction_0(int, int)>
c0020510:	83 c4 10             	add    esp,0x10
c0020513:	83 c4 0c             	add    esp,0xc
c0020516:	c3                   	ret    
c0020517:	90                   	nop

c0020518 <FAT::getName()>:
c0020518:	b8 68 c9 02 c0       	mov    eax,0xc002c968
c002051d:	c3                   	ret    

c002051e <FAT::tell(void*, unsigned long long*)>:
c002051e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020523:	75 06                	jne    c002052b <FAT::tell(void*, unsigned long long*)+0xd>
c0020525:	b8 04 00 00 00       	mov    eax,0x4
c002052a:	c3                   	ret    
c002052b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020530:	75 06                	jne    c0020538 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020532:	b8 04 00 00 00       	mov    eax,0x4
c0020537:	c3                   	ret    
c0020538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002053c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002053f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020542:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020546:	89 01                	mov    DWORD PTR [ecx],eax
c0020548:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002054b:	b8 00 00 00 00       	mov    eax,0x0
c0020550:	c3                   	ret    
c0020551:	90                   	nop

c0020552 <FAT::stat(void*, unsigned long long*)>:
c0020552:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020557:	75 06                	jne    c002055f <FAT::stat(void*, unsigned long long*)+0xd>
c0020559:	b8 04 00 00 00       	mov    eax,0x4
c002055e:	c3                   	ret    
c002055f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020564:	75 06                	jne    c002056c <FAT::stat(void*, unsigned long long*)+0x1a>
c0020566:	b8 04 00 00 00       	mov    eax,0x4
c002056b:	c3                   	ret    
c002056c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020570:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020573:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020576:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002057a:	89 01                	mov    DWORD PTR [ecx],eax
c002057c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002057f:	b8 00 00 00 00       	mov    eax,0x0
c0020584:	c3                   	ret    
c0020585:	90                   	nop

c0020586 <FAT::~FAT()>:
c0020586:	83 ec 0c             	sub    esp,0xc
c0020589:	ba ec c9 02 c0       	mov    edx,0xc002c9ec
c002058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020592:	89 10                	mov    DWORD PTR [eax],edx
c0020594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020598:	83 ec 0c             	sub    esp,0xc
c002059b:	50                   	push   eax
c002059c:	e8 99 2c ff ff       	call   c001323a <Filesystem::~Filesystem()>
c00205a1:	83 c4 10             	add    esp,0x10
c00205a4:	90                   	nop
c00205a5:	83 c4 0c             	add    esp,0xc
c00205a8:	c3                   	ret    
c00205a9:	90                   	nop

c00205aa <FAT::~FAT()>:
c00205aa:	83 ec 0c             	sub    esp,0xc
c00205ad:	83 ec 0c             	sub    esp,0xc
c00205b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b4:	e8 cd ff ff ff       	call   c0020586 <FAT::~FAT()>
c00205b9:	83 c4 10             	add    esp,0x10
c00205bc:	83 ec 08             	sub    esp,0x8
c00205bf:	6a 08                	push   0x8
c00205c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c5:	e8 68 28 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00205ca:	83 c4 10             	add    esp,0x10
c00205cd:	83 c4 0c             	add    esp,0xc
c00205d0:	c3                   	ret    
c00205d1:	90                   	nop

c00205d2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205d2:	83 ec 1c             	sub    esp,0x1c
c00205d5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205dc:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205e5:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c00205ec:	83 f8 ff             	cmp    eax,0xffffffff
c00205ef:	75 34                	jne    c0020625 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205f1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205f5:	88 c2                	mov    dl,al
c00205f7:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00205fc:	01 d0                	add    eax,edx
c00205fe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020602:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c0020608:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002060c:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c0020613:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020618:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002061c:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020623:	eb 17                	jmp    c002063c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020625:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020629:	88 c2                	mov    dl,al
c002062b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002062f:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c0020636:	01 d0                	add    eax,edx
c0020638:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002063c:	83 ec 04             	sub    esp,0x4
c002063f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020643:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020647:	8d 44 24 15          	lea    eax,[esp+0x15]
c002064b:	50                   	push   eax
c002064c:	e8 e7 66 fe ff       	call   c0006d38 <f_getlabel>
c0020651:	83 c4 10             	add    esp,0x10
c0020654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020658:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002065d:	75 07                	jne    c0020666 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002065f:	b8 00 00 00 00       	mov    eax,0x0
c0020664:	eb 05                	jmp    c002066b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020666:	b8 01 00 00 00       	mov    eax,0x1
c002066b:	83 c4 1c             	add    esp,0x1c
c002066e:	c3                   	ret    
c002066f:	90                   	nop

c0020670 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020670:	57                   	push   edi
c0020671:	83 ec 58             	sub    esp,0x58
c0020674:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002067c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020680:	b9 0f 00 00 00       	mov    ecx,0xf
c0020685:	b8 00 00 00 00       	mov    eax,0x0
c002068a:	fc                   	cld    
c002068b:	89 d7                	mov    edi,edx
c002068d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002068f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020693:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c002069a:	83 f8 ff             	cmp    eax,0xffffffff
c002069d:	75 34                	jne    c00206d3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002069f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206a3:	88 c2                	mov    dl,al
c00206a5:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00206aa:	01 d0                	add    eax,edx
c00206ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206b0:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c00206b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ba:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c00206c1:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00206c6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206ca:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c00206d1:	eb 17                	jmp    c00206ea <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206d3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206d7:	88 c2                	mov    dl,al
c00206d9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206dd:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c00206e4:	01 d0                	add    eax,edx
c00206e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ea:	83 ec 08             	sub    esp,0x8
c00206ed:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206f5:	50                   	push   eax
c00206f6:	e8 79 02 fe ff       	call   c0000974 <strcat>
c00206fb:	83 c4 10             	add    esp,0x10
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020705:	50                   	push   eax
c0020706:	e8 1b 68 fe ff       	call   c0006f26 <f_setlabel>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020712:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020717:	75 07                	jne    c0020720 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020719:	b8 00 00 00 00       	mov    eax,0x0
c002071e:	eb 05                	jmp    c0020725 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020720:	b8 01 00 00 00       	mov    eax,0x1
c0020725:	83 c4 58             	add    esp,0x58
c0020728:	5f                   	pop    edi
c0020729:	c3                   	ret    

c002072a <FAT::format(LogicalDisk*, int, char const*, int)>:
c002072a:	83 ec 2c             	sub    esp,0x2c
c002072d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020735:	83 ec 08             	sub    esp,0x8
c0020738:	68 8c c9 02 c0       	push   0xc002c98c
c002073d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020741:	e8 7a 01 fe ff       	call   c00008c0 <strcmp>
c0020746:	83 c4 10             	add    esp,0x10
c0020749:	85 c0                	test   eax,eax
c002074b:	0f 94 c0             	sete   al
c002074e:	84 c0                	test   al,al
c0020750:	74 0d                	je     c002075f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020752:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002075a:	e9 a6 00 00 00       	jmp    c0020805 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002075f:	83 ec 08             	sub    esp,0x8
c0020762:	68 7e c9 02 c0       	push   0xc002c97e
c0020767:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002076b:	e8 50 01 fe ff       	call   c00008c0 <strcmp>
c0020770:	83 c4 10             	add    esp,0x10
c0020773:	85 c0                	test   eax,eax
c0020775:	0f 94 c0             	sete   al
c0020778:	84 c0                	test   al,al
c002077a:	74 0a                	je     c0020786 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002077c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020784:	eb 7f                	jmp    c0020805 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020786:	83 ec 08             	sub    esp,0x8
c0020789:	68 84 c9 02 c0       	push   0xc002c984
c002078e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020792:	e8 29 01 fe ff       	call   c00008c0 <strcmp>
c0020797:	83 c4 10             	add    esp,0x10
c002079a:	85 c0                	test   eax,eax
c002079c:	0f 94 c0             	sete   al
c002079f:	84 c0                	test   al,al
c00207a1:	74 0a                	je     c00207ad <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207a3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207ab:	eb 58                	jmp    c0020805 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ad:	83 ec 08             	sub    esp,0x8
c00207b0:	68 6c 94 02 c0       	push   0xc002946c
c00207b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b9:	e8 02 01 fe ff       	call   c00008c0 <strcmp>
c00207be:	83 c4 10             	add    esp,0x10
c00207c1:	85 c0                	test   eax,eax
c00207c3:	0f 94 c0             	sete   al
c00207c6:	84 c0                	test   al,al
c00207c8:	74 0a                	je     c00207d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207ca:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207d2:	eb 31                	jmp    c0020805 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207d4:	83 ec 08             	sub    esp,0x8
c00207d7:	68 8a c9 02 c0       	push   0xc002c98a
c00207dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207e0:	e8 db 00 fe ff       	call   c00008c0 <strcmp>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	85 c0                	test   eax,eax
c00207ea:	0f 94 c0             	sete   al
c00207ed:	84 c0                	test   al,al
c00207ef:	74 0a                	je     c00207fb <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207f1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207f9:	eb 0a                	jmp    c0020805 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207fb:	b8 08 00 00 00       	mov    eax,0x8
c0020800:	e9 04 01 00 00       	jmp    c0020909 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020805:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002080c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020811:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020815:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c002081c:	83 f8 ff             	cmp    eax,0xffffffff
c002081f:	75 34                	jne    c0020855 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020821:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020825:	88 c2                	mov    dl,al
c0020827:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c002082c:	01 d0                	add    eax,edx
c002082e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020832:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c0020838:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002083c:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c0020843:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020848:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002084c:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020853:	eb 17                	jmp    c002086c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020855:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020859:	88 c2                	mov    dl,al
c002085b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002085f:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c0020866:	01 d0                	add    eax,edx
c0020868:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002086c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020870:	88 04 24             	mov    BYTE PTR [esp],al
c0020873:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002087b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020883:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020888:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020890:	83 ec 0c             	sub    esp,0xc
c0020893:	68 00 20 00 00       	push   0x2000
c0020898:	e8 a3 ef fe ff       	call   c000f840 <malloc>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208a4:	68 00 20 00 00       	push   0x2000
c00208a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208b1:	50                   	push   eax
c00208b2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208b6:	50                   	push   eax
c00208b7:	e8 b5 6a fe ff       	call   c0007371 <f_mkfs>
c00208bc:	83 c4 10             	add    esp,0x10
c00208bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208c8:	75 07                	jne    c00208d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208ca:	b8 00 00 00 00       	mov    eax,0x0
c00208cf:	eb 38                	jmp    c0020909 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208d1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208d6:	75 17                	jne    c00208ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208d8:	83 ec 0c             	sub    esp,0xc
c00208db:	68 bc c9 02 c0       	push   0xc002c9bc
c00208e0:	e8 2d 26 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	b8 09 00 00 00       	mov    eax,0x9
c00208ed:	eb 1a                	jmp    c0020909 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f3:	83 ec 08             	sub    esp,0x8
c00208f6:	50                   	push   eax
c00208f7:	68 90 c9 02 c0       	push   0xc002c990
c00208fc:	e8 11 26 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0020901:	83 c4 10             	add    esp,0x10
c0020904:	b8 01 00 00 00       	mov    eax,0x1
c0020909:	83 c4 2c             	add    esp,0x2c
c002090c:	c3                   	ret    
c002090d:	90                   	nop

c002090e <FAT::tryMount(LogicalDisk*, int)>:
c002090e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020914:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020919:	83 f8 14             	cmp    eax,0x14
c002091c:	75 17                	jne    c0020935 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002091e:	83 ec 0c             	sub    esp,0xc
c0020921:	68 a2 c9 02 c0       	push   0xc002c9a2
c0020926:	e8 88 9c ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c002092b:	83 c4 10             	add    esp,0x10
c002092e:	b0 00                	mov    al,0x0
c0020930:	e9 d7 01 00 00       	jmp    c0020b0c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020935:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002093c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020942:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020948:	3d 00 02 00 00       	cmp    eax,0x200
c002094d:	74 07                	je     c0020956 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002094f:	b0 00                	mov    al,0x0
c0020951:	e9 b6 01 00 00       	jmp    c0020b0c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020956:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002095e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020965:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c002096c:	83 f8 ff             	cmp    eax,0xffffffff
c002096f:	74 07                	je     c0020978 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020971:	b0 01                	mov    al,0x1
c0020973:	e9 94 01 00 00       	jmp    c0020b0c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020978:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020982:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002098a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020991:	88 c2                	mov    dl,al
c0020993:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020998:	01 d0                	add    eax,edx
c002099a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209a1:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c00209a7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209ae:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c00209b5:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00209ba:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209c1:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c00209c8:	83 ec 0c             	sub    esp,0xc
c00209cb:	68 54 02 00 00       	push   0x254
c00209d0:	e8 6b ee fe ff       	call   c000f840 <malloc>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209df:	83 ec 04             	sub    esp,0x4
c00209e2:	6a 00                	push   0x0
c00209e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209eb:	50                   	push   eax
c00209ec:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209f3:	e8 37 45 fe ff       	call   c0004f2f <f_mount>
c00209f8:	83 c4 10             	add    esp,0x10
c00209fb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a02:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a0a:	74 19                	je     c0020a25 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a0c:	83 ec 0c             	sub    esp,0xc
c0020a0f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a16:	e8 45 ee fe ff       	call   c000f860 <rfree>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	b0 00                	mov    al,0x0
c0020a20:	e9 e7 00 00 00       	jmp    c0020b0c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a25:	83 ec 04             	sub    esp,0x4
c0020a28:	68 00 01 00 00       	push   0x100
c0020a2d:	6a 00                	push   0x0
c0020a2f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a36:	50                   	push   eax
c0020a37:	e8 3c fd fd ff       	call   c0000778 <memset>
c0020a3c:	83 c4 10             	add    esp,0x10
c0020a3f:	83 ec 08             	sub    esp,0x8
c0020a42:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a49:	50                   	push   eax
c0020a4a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a51:	50                   	push   eax
c0020a52:	e8 1d ff fd ff       	call   c0000974 <strcat>
c0020a57:	83 c4 10             	add    esp,0x10
c0020a5a:	83 ec 08             	sub    esp,0x8
c0020a5d:	68 b0 c9 02 c0       	push   0xc002c9b0
c0020a62:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a69:	50                   	push   eax
c0020a6a:	e8 05 ff fd ff       	call   c0000974 <strcat>
c0020a6f:	83 c4 10             	add    esp,0x10
c0020a72:	83 ec 04             	sub    esp,0x4
c0020a75:	6a 01                	push   0x1
c0020a77:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a7e:	50                   	push   eax
c0020a7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a83:	50                   	push   eax
c0020a84:	e8 08 45 fe ff       	call   c0004f91 <f_open>
c0020a89:	83 c4 10             	add    esp,0x10
c0020a8c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a93:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a9a:	85 c0                	test   eax,eax
c0020a9c:	74 0a                	je     c0020aa8 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a9e:	78 2d                	js     c0020acd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aa0:	83 e8 04             	sub    eax,0x4
c0020aa3:	83 f8 01             	cmp    eax,0x1
c0020aa6:	77 25                	ja     c0020acd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aa8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020ab0:	83 ec 0c             	sub    esp,0xc
c0020ab3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ab7:	50                   	push   eax
c0020ab8:	e8 26 50 fe ff       	call   c0005ae3 <f_close>
c0020abd:	83 c4 10             	add    esp,0x10
c0020ac0:	90                   	nop
c0020ac1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020ac9:	74 3a                	je     c0020b05 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020acb:	eb 2d                	jmp    c0020afa <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020acd:	83 ec 0c             	sub    esp,0xc
c0020ad0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad7:	e8 84 ed fe ff       	call   c000f860 <rfree>
c0020adc:	83 c4 10             	add    esp,0x10
c0020adf:	83 ec 04             	sub    esp,0x4
c0020ae2:	6a 00                	push   0x0
c0020ae4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aeb:	50                   	push   eax
c0020aec:	6a 00                	push   0x0
c0020aee:	e8 3c 44 fe ff       	call   c0004f2f <f_mount>
c0020af3:	83 c4 10             	add    esp,0x10
c0020af6:	b0 00                	mov    al,0x0
c0020af8:	eb 12                	jmp    c0020b0c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020afa:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020aff:	40                   	inc    eax
c0020b00:	a3 c0 1b 03 c0       	mov    ds:0xc0031bc0,eax
c0020b05:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b0c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b12:	c3                   	ret    
c0020b13:	90                   	nop

c0020b14 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b14:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b1a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b22:	74 0a                	je     c0020b2e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b24:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b2c:	75 0a                	jne    c0020b38 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b2e:	b8 04 00 00 00       	mov    eax,0x4
c0020b33:	e9 db 00 00 00       	jmp    c0020c13 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b38:	83 ec 08             	sub    esp,0x8
c0020b3b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b42:	50                   	push   eax
c0020b43:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b4a:	e8 9e 55 fe ff       	call   c00060ed <f_readdir>
c0020b4f:	83 c4 10             	add    esp,0x10
c0020b52:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b59:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b5f:	83 ec 0c             	sub    esp,0xc
c0020b62:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b69:	83 c0 1a             	add    eax,0x1a
c0020b6c:	50                   	push   eax
c0020b6d:	e8 22 fc fd ff       	call   c0000794 <strlen>
c0020b72:	83 c4 10             	add    esp,0x10
c0020b75:	ba 00 00 00 00       	mov    edx,0x0
c0020b7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b82:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b89:	0f b6 c0             	movzx  eax,al
c0020b8c:	83 e0 10             	and    eax,0x10
c0020b8f:	74 07                	je     c0020b98 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b91:	b8 02 00 00 00       	mov    eax,0x2
c0020b96:	eb 05                	jmp    c0020b9d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b98:	b8 01 00 00 00       	mov    eax,0x1
c0020b9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ba1:	83 ec 08             	sub    esp,0x8
c0020ba4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bab:	83 c0 1a             	add    eax,0x1a
c0020bae:	50                   	push   eax
c0020baf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bb3:	83 c0 10             	add    eax,0x10
c0020bb6:	50                   	push   eax
c0020bb7:	e8 78 fc fd ff       	call   c0000834 <strcpy>
c0020bbc:	83 c4 10             	add    esp,0x10
c0020bbf:	83 ec 04             	sub    esp,0x4
c0020bc2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bcd:	50                   	push   eax
c0020bce:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bd5:	e8 6a fb fd ff       	call   c0000744 <memcpy>
c0020bda:	83 c4 10             	add    esp,0x10
c0020bdd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020be4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bea:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bf1:	84 c0                	test   al,al
c0020bf3:	75 07                	jne    c0020bfc <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bf5:	b8 07 00 00 00       	mov    eax,0x7
c0020bfa:	eb 17                	jmp    c0020c13 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bfc:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c03:	85 c0                	test   eax,eax
c0020c05:	75 07                	jne    c0020c0e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c07:	b8 00 00 00 00       	mov    eax,0x0
c0020c0c:	eb 05                	jmp    c0020c13 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c0e:	b8 01 00 00 00       	mov    eax,0x1
c0020c13:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c19:	c3                   	ret    

c0020c1a <FAT::read(void*, unsigned long, void*, int*)>:
c0020c1a:	83 ec 1c             	sub    esp,0x1c
c0020c1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c22:	74 07                	je     c0020c2b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c24:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c29:	75 07                	jne    c0020c32 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c2b:	b8 04 00 00 00       	mov    eax,0x4
c0020c30:	eb 3d                	jmp    c0020c6f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c32:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c36:	50                   	push   eax
c0020c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c43:	e8 85 47 fe ff       	call   c00053cd <f_read>
c0020c48:	83 c4 10             	add    esp,0x10
c0020c4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c53:	89 c2                	mov    edx,eax
c0020c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c59:	89 10                	mov    DWORD PTR [eax],edx
c0020c5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c5f:	85 c0                	test   eax,eax
c0020c61:	75 07                	jne    c0020c6a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c63:	b8 00 00 00 00       	mov    eax,0x0
c0020c68:	eb 05                	jmp    c0020c6f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c6a:	b8 01 00 00 00       	mov    eax,0x1
c0020c6f:	83 c4 1c             	add    esp,0x1c
c0020c72:	c3                   	ret    
c0020c73:	90                   	nop

c0020c74 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c74:	83 ec 1c             	sub    esp,0x1c
c0020c77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c7c:	74 07                	je     c0020c85 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c83:	75 07                	jne    c0020c8c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c85:	b8 04 00 00 00       	mov    eax,0x4
c0020c8a:	eb 3d                	jmp    c0020cc9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c90:	50                   	push   eax
c0020c91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c9d:	e8 ab 49 fe ff       	call   c000564d <f_write>
c0020ca2:	83 c4 10             	add    esp,0x10
c0020ca5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cad:	89 c2                	mov    edx,eax
c0020caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cb3:	89 10                	mov    DWORD PTR [eax],edx
c0020cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cb9:	85 c0                	test   eax,eax
c0020cbb:	75 07                	jne    c0020cc4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cbd:	b8 00 00 00 00       	mov    eax,0x0
c0020cc2:	eb 05                	jmp    c0020cc9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cc4:	b8 01 00 00 00       	mov    eax,0x1
c0020cc9:	83 c4 1c             	add    esp,0x1c
c0020ccc:	c3                   	ret    
c0020ccd:	90                   	nop

c0020cce <FAT::close(void*)>:
c0020cce:	83 ec 1c             	sub    esp,0x1c
c0020cd1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cd6:	75 07                	jne    c0020cdf <FAT::close(void*)+0x11>
c0020cd8:	b8 04 00 00 00       	mov    eax,0x4
c0020cdd:	eb 36                	jmp    c0020d15 <FAT::close(void*)+0x47>
c0020cdf:	83 ec 0c             	sub    esp,0xc
c0020ce2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce6:	e8 f8 4d fe ff       	call   c0005ae3 <f_close>
c0020ceb:	83 c4 10             	add    esp,0x10
c0020cee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf2:	83 ec 0c             	sub    esp,0xc
c0020cf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf9:	e8 52 eb fe ff       	call   c000f850 <free>
c0020cfe:	83 c4 10             	add    esp,0x10
c0020d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d05:	85 c0                	test   eax,eax
c0020d07:	75 07                	jne    c0020d10 <FAT::close(void*)+0x42>
c0020d09:	b8 00 00 00 00       	mov    eax,0x0
c0020d0e:	eb 05                	jmp    c0020d15 <FAT::close(void*)+0x47>
c0020d10:	b8 01 00 00 00       	mov    eax,0x1
c0020d15:	83 c4 1c             	add    esp,0x1c
c0020d18:	c3                   	ret    
c0020d19:	90                   	nop

c0020d1a <FAT::closeDir(void*)>:
c0020d1a:	83 ec 1c             	sub    esp,0x1c
c0020d1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d22:	75 07                	jne    c0020d2b <FAT::closeDir(void*)+0x11>
c0020d24:	b8 04 00 00 00       	mov    eax,0x4
c0020d29:	eb 36                	jmp    c0020d61 <FAT::closeDir(void*)+0x47>
c0020d2b:	83 ec 0c             	sub    esp,0xc
c0020d2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d32:	e8 94 53 fe ff       	call   c00060cb <f_closedir>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3e:	83 ec 0c             	sub    esp,0xc
c0020d41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d45:	e8 06 eb fe ff       	call   c000f850 <free>
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d51:	85 c0                	test   eax,eax
c0020d53:	75 07                	jne    c0020d5c <FAT::closeDir(void*)+0x42>
c0020d55:	b8 00 00 00 00       	mov    eax,0x0
c0020d5a:	eb 05                	jmp    c0020d61 <FAT::closeDir(void*)+0x47>
c0020d5c:	b8 01 00 00 00       	mov    eax,0x1
c0020d61:	83 c4 1c             	add    esp,0x1c
c0020d64:	c3                   	ret    
c0020d65:	90                   	nop

c0020d66 <FAT::seek(void*, unsigned long long)>:
c0020d66:	83 ec 2c             	sub    esp,0x2c
c0020d69:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d79:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d7e:	75 07                	jne    c0020d87 <FAT::seek(void*, unsigned long long)+0x21>
c0020d80:	b8 04 00 00 00       	mov    eax,0x4
c0020d85:	eb 2f                	jmp    c0020db6 <FAT::seek(void*, unsigned long long)+0x50>
c0020d87:	83 ec 04             	sub    esp,0x4
c0020d8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d96:	e8 77 4d fe ff       	call   c0005b12 <f_lseek>
c0020d9b:	83 c4 10             	add    esp,0x10
c0020d9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020da6:	85 c0                	test   eax,eax
c0020da8:	75 07                	jne    c0020db1 <FAT::seek(void*, unsigned long long)+0x4b>
c0020daa:	b8 00 00 00 00       	mov    eax,0x0
c0020daf:	eb 05                	jmp    c0020db6 <FAT::seek(void*, unsigned long long)+0x50>
c0020db1:	b8 01 00 00 00       	mov    eax,0x1
c0020db6:	83 c4 2c             	add    esp,0x2c
c0020db9:	c3                   	ret    

c0020dba <fatWrapperReadDisk>:
c0020dba:	83 ec 1c             	sub    esp,0x1c
c0020dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dc1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dd4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dd9:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020de0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020de4:	83 ec 0c             	sub    esp,0xc
c0020de7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020deb:	52                   	push   edx
c0020dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df4:	50                   	push   eax
c0020df5:	e8 28 59 ff ff       	call   c0016722 <LogicalDisk::read(unsigned long long, int, void*)>
c0020dfa:	83 c4 20             	add    esp,0x20
c0020dfd:	83 c4 1c             	add    esp,0x1c
c0020e00:	c3                   	ret    

c0020e01 <fatWrapperWriteDisk>:
c0020e01:	83 ec 1c             	sub    esp,0x1c
c0020e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e10:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e1b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e20:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020e27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e2b:	83 ec 0c             	sub    esp,0xc
c0020e2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e32:	52                   	push   edx
c0020e33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e3b:	50                   	push   eax
c0020e3c:	e8 4d 59 ff ff       	call   c001678e <LogicalDisk::write(unsigned long long, int, void*)>
c0020e41:	83 c4 20             	add    esp,0x20
c0020e44:	83 c4 1c             	add    esp,0x1c
c0020e47:	c3                   	ret    

c0020e48 <fatWrapperIoctl>:
c0020e48:	53                   	push   ebx
c0020e49:	83 ec 28             	sub    esp,0x28
c0020e4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e54:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e58:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e5c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e61:	75 31                	jne    c0020e94 <fatWrapperIoctl+0x4c>
c0020e63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e6b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e70:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020e77:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e7d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e87:	66 89 02             	mov    WORD PTR [edx],ax
c0020e8a:	b8 00 00 00 00       	mov    eax,0x0
c0020e8f:	e9 b2 00 00 00       	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020e94:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e99:	75 6a                	jne    c0020f05 <fatWrapperIoctl+0xbd>
c0020e9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ea3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ea8:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020eaf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eb5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ebb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ec1:	89 c8                	mov    eax,ecx
c0020ec3:	89 da                	mov    edx,ebx
c0020ec5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ec9:	c1 e0 0a             	shl    eax,0xa
c0020ecc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ed1:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0020ed8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ede:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ee4:	89 cb                	mov    ebx,ecx
c0020ee6:	c1 fb 1f             	sar    ebx,0x1f
c0020ee9:	53                   	push   ebx
c0020eea:	51                   	push   ecx
c0020eeb:	52                   	push   edx
c0020eec:	50                   	push   eax
c0020eed:	e8 ca 5a 00 00       	call   c00269bc <__udivdi3>
c0020ef2:	83 c4 10             	add    esp,0x10
c0020ef5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ef9:	89 01                	mov    DWORD PTR [ecx],eax
c0020efb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020efe:	b8 00 00 00 00       	mov    eax,0x0
c0020f03:	eb 41                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f05:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f0a:	75 07                	jne    c0020f13 <fatWrapperIoctl+0xcb>
c0020f0c:	b8 00 00 00 00       	mov    eax,0x0
c0020f11:	eb 33                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f13:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f18:	75 19                	jne    c0020f33 <fatWrapperIoctl+0xeb>
c0020f1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f26:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f2c:	b8 00 00 00 00       	mov    eax,0x0
c0020f31:	eb 13                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f33:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f38:	75 07                	jne    c0020f41 <fatWrapperIoctl+0xf9>
c0020f3a:	b8 00 00 00 00       	mov    eax,0x0
c0020f3f:	eb 05                	jmp    c0020f46 <fatWrapperIoctl+0xfe>
c0020f41:	b8 04 00 00 00       	mov    eax,0x4
c0020f46:	83 c4 28             	add    esp,0x28
c0020f49:	5b                   	pop    ebx
c0020f4a:	c3                   	ret    
c0020f4b:	90                   	nop

c0020f4c <FAT::FAT()>:
c0020f4c:	83 ec 1c             	sub    esp,0x1c
c0020f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f53:	83 ec 0c             	sub    esp,0xc
c0020f56:	50                   	push   eax
c0020f57:	e8 ba 22 ff ff       	call   c0013216 <Filesystem::Filesystem()>
c0020f5c:	83 c4 10             	add    esp,0x10
c0020f5f:	ba ec c9 02 c0       	mov    edx,0xc002c9ec
c0020f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f68:	89 10                	mov    DWORD PTR [eax],edx
c0020f6a:	c7 05 c0 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bc0,0x0
c0020f74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f7c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f81:	7f 15                	jg     c0020f98 <FAT::FAT()+0x4c>
c0020f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f87:	c7 04 85 e0 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce420],0xffffffff
c0020f92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f96:	eb e4                	jmp    c0020f7c <FAT::FAT()+0x30>
c0020f98:	90                   	nop
c0020f99:	83 c4 1c             	add    esp,0x1c
c0020f9c:	c3                   	ret    
c0020f9d:	90                   	nop

c0020f9e <FAT::fixFilepath(char*)>:
c0020f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa2:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa4:	3c 40                	cmp    al,0x40
c0020fa6:	7e 2c                	jle    c0020fd4 <FAT::fixFilepath(char*)+0x36>
c0020fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fac:	8a 00                	mov    al,BYTE PTR [eax]
c0020fae:	83 e8 41             	sub    eax,0x41
c0020fb1:	88 c2                	mov    dl,al
c0020fb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb7:	88 10                	mov    BYTE PTR [eax],dl
c0020fb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbd:	8a 00                	mov    al,BYTE PTR [eax]
c0020fbf:	0f be c0             	movsx  eax,al
c0020fc2:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c0020fc9:	83 c0 30             	add    eax,0x30
c0020fcc:	88 c2                	mov    dl,al
c0020fce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd2:	88 10                	mov    BYTE PTR [eax],dl
c0020fd4:	90                   	nop
c0020fd5:	c3                   	ret    

c0020fd6 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fd6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fdc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fe4:	74 0a                	je     c0020ff0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fe6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fee:	75 0a                	jne    c0020ffa <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ff0:	b8 04 00 00 00       	mov    eax,0x4
c0020ff5:	e9 fd 00 00 00       	jmp    c00210f7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ffa:	83 ec 08             	sub    esp,0x8
c0020ffd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021004:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021008:	50                   	push   eax
c0021009:	e8 26 f8 fd ff       	call   c0000834 <strcpy>
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	83 ec 08             	sub    esp,0x8
c0021014:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021018:	50                   	push   eax
c0021019:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021020:	e8 79 ff ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021025:	83 c4 10             	add    esp,0x10
c0021028:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021030:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021037:	83 e0 01             	and    eax,0x1
c002103a:	74 08                	je     c0021044 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002103c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021044:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002104b:	83 e0 04             	and    eax,0x4
c002104e:	74 10                	je     c0021060 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021050:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021058:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021060:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021067:	83 e0 02             	and    eax,0x2
c002106a:	74 08                	je     c0021074 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002106c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021074:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107b:	83 e0 08             	and    eax,0x8
c002107e:	74 08                	je     c0021088 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021080:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021088:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002108f:	83 e0 10             	and    eax,0x10
c0021092:	74 08                	je     c002109c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021094:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002109c:	83 ec 0c             	sub    esp,0xc
c002109f:	68 50 02 00 00       	push   0x250
c00210a4:	e8 97 e7 fe ff       	call   c000f840 <malloc>
c00210a9:	83 c4 10             	add    esp,0x10
c00210ac:	89 c2                	mov    edx,eax
c00210ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b5:	89 10                	mov    DWORD PTR [eax],edx
c00210b7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210bf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00210c8:	83 ec 04             	sub    esp,0x4
c00210cb:	52                   	push   edx
c00210cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210d0:	52                   	push   edx
c00210d1:	50                   	push   eax
c00210d2:	e8 ba 3e fe ff       	call   c0004f91 <f_open>
c00210d7:	83 c4 10             	add    esp,0x10
c00210da:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210e1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210e9:	74 07                	je     c00210f2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210eb:	b8 01 00 00 00       	mov    eax,0x1
c00210f0:	eb 05                	jmp    c00210f7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210f2:	b8 00 00 00 00       	mov    eax,0x0
c00210f7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210fd:	c3                   	ret    

c00210fe <FAT::openDir(char const*, void**)>:
c00210fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021104:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002110c:	74 0a                	je     c0021118 <FAT::openDir(char const*, void**)+0x1a>
c002110e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021116:	75 07                	jne    c002111f <FAT::openDir(char const*, void**)+0x21>
c0021118:	b8 04 00 00 00       	mov    eax,0x4
c002111d:	eb 7d                	jmp    c002119c <FAT::openDir(char const*, void**)+0x9e>
c002111f:	83 ec 08             	sub    esp,0x8
c0021122:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021129:	8d 44 24 18          	lea    eax,[esp+0x18]
c002112d:	50                   	push   eax
c002112e:	e8 01 f7 fd ff       	call   c0000834 <strcpy>
c0021133:	83 c4 10             	add    esp,0x10
c0021136:	83 ec 08             	sub    esp,0x8
c0021139:	8d 44 24 14          	lea    eax,[esp+0x14]
c002113d:	50                   	push   eax
c002113e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021145:	e8 54 fe ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c002114a:	83 c4 10             	add    esp,0x10
c002114d:	83 ec 0c             	sub    esp,0xc
c0021150:	6a 4c                	push   0x4c
c0021152:	e8 e9 e6 fe ff       	call   c000f840 <malloc>
c0021157:	83 c4 10             	add    esp,0x10
c002115a:	89 c2                	mov    edx,eax
c002115c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021163:	89 10                	mov    DWORD PTR [eax],edx
c0021165:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002116c:	8b 00                	mov    eax,DWORD PTR [eax]
c002116e:	83 ec 08             	sub    esp,0x8
c0021171:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021175:	52                   	push   edx
c0021176:	50                   	push   eax
c0021177:	e8 4d 4e fe ff       	call   c0005fc9 <f_opendir>
c002117c:	83 c4 10             	add    esp,0x10
c002117f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021186:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002118e:	74 07                	je     c0021197 <FAT::openDir(char const*, void**)+0x99>
c0021190:	b8 01 00 00 00       	mov    eax,0x1
c0021195:	eb 05                	jmp    c002119c <FAT::openDir(char const*, void**)+0x9e>
c0021197:	b8 00 00 00 00       	mov    eax,0x0
c002119c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211a2:	c3                   	ret    
c00211a3:	90                   	nop

c00211a4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211aa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211b2:	75 0a                	jne    c00211be <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211b4:	b8 04 00 00 00       	mov    eax,0x4
c00211b9:	e9 c9 00 00 00       	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211be:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211c6:	75 0a                	jne    c00211d2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211c8:	b8 04 00 00 00       	mov    eax,0x4
c00211cd:	e9 b5 00 00 00       	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211da:	75 0a                	jne    c00211e6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211dc:	b8 04 00 00 00       	mov    eax,0x4
c00211e1:	e9 a1 00 00 00       	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211e6:	83 ec 08             	sub    esp,0x8
c00211e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211f0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211f7:	50                   	push   eax
c00211f8:	e8 37 f6 fd ff       	call   c0000834 <strcpy>
c00211fd:	83 c4 10             	add    esp,0x10
c0021200:	83 ec 08             	sub    esp,0x8
c0021203:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002120a:	50                   	push   eax
c002120b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021212:	e8 87 fd ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021217:	83 c4 10             	add    esp,0x10
c002121a:	83 ec 08             	sub    esp,0x8
c002121d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021221:	50                   	push   eax
c0021222:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021229:	50                   	push   eax
c002122a:	e8 59 4f fe ff       	call   c0006188 <f_stat>
c002122f:	83 c4 10             	add    esp,0x10
c0021232:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021239:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021240:	85 c0                	test   eax,eax
c0021242:	74 07                	je     c002124b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021244:	83 f8 04             	cmp    eax,0x4
c0021247:	74 32                	je     c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021249:	eb 37                	jmp    c0021282 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002124b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002124f:	0f b6 c0             	movzx  eax,al
c0021252:	83 e0 10             	and    eax,0x10
c0021255:	0f 95 c2             	setne  dl
c0021258:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002125f:	88 10                	mov    BYTE PTR [eax],dl
c0021261:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021264:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021268:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002126f:	89 01                	mov    DWORD PTR [ecx],eax
c0021271:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021274:	b8 00 00 00 00       	mov    eax,0x0
c0021279:	eb 0c                	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127b:	b8 02 00 00 00       	mov    eax,0x2
c0021280:	eb 05                	jmp    c0021287 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021282:	b8 01 00 00 00       	mov    eax,0x1
c0021287:	81 c4 2c 02 00 00    	add    esp,0x22c
c002128d:	c3                   	ret    

c002128e <FAT::unlink(char const*)>:
c002128e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021294:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002129c:	75 07                	jne    c00212a5 <FAT::unlink(char const*)+0x17>
c002129e:	b8 04 00 00 00       	mov    eax,0x4
c00212a3:	eb 5c                	jmp    c0021301 <FAT::unlink(char const*)+0x73>
c00212a5:	83 ec 08             	sub    esp,0x8
c00212a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212b3:	50                   	push   eax
c00212b4:	e8 7b f5 fd ff       	call   c0000834 <strcpy>
c00212b9:	83 c4 10             	add    esp,0x10
c00212bc:	83 ec 08             	sub    esp,0x8
c00212bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212c3:	50                   	push   eax
c00212c4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212cb:	e8 ce fc ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00212d0:	83 c4 10             	add    esp,0x10
c00212d3:	83 ec 0c             	sub    esp,0xc
c00212d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212da:	50                   	push   eax
c00212db:	e8 fa 51 fe ff       	call   c00064da <f_unlink>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212ea:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212f1:	85 c0                	test   eax,eax
c00212f3:	75 07                	jne    c00212fc <FAT::unlink(char const*)+0x6e>
c00212f5:	b8 00 00 00 00       	mov    eax,0x0
c00212fa:	eb 05                	jmp    c0021301 <FAT::unlink(char const*)+0x73>
c00212fc:	b8 01 00 00 00       	mov    eax,0x1
c0021301:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021307:	c3                   	ret    

c0021308 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021308:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002130e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021315:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002131c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021320:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021324:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002132c:	75 0a                	jne    c0021338 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002132e:	b8 04 00 00 00       	mov    eax,0x4
c0021333:	e9 1c 01 00 00       	jmp    c0021454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021338:	83 ec 08             	sub    esp,0x8
c002133b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021342:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021346:	50                   	push   eax
c0021347:	e8 e8 f4 fd ff       	call   c0000834 <strcpy>
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	83 ec 08             	sub    esp,0x8
c0021352:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021356:	50                   	push   eax
c0021357:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002135e:	e8 3b fc ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002136e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021376:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002137b:	83 e0 01             	and    eax,0x1
c002137e:	74 08                	je     c0021388 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021380:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021388:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002138d:	83 e0 02             	and    eax,0x2
c0021390:	74 08                	je     c002139a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021392:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002139a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139f:	83 e0 04             	and    eax,0x4
c00213a2:	74 08                	je     c00213ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213a4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b1:	83 e0 08             	and    eax,0x8
c00213b4:	74 08                	je     c00213be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213b6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c3:	83 e0 01             	and    eax,0x1
c00213c6:	74 08                	je     c00213d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213c8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d5:	83 e0 02             	and    eax,0x2
c00213d8:	74 08                	je     c00213e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213da:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213e2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e7:	83 e0 04             	and    eax,0x4
c00213ea:	74 08                	je     c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213ec:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f9:	83 e0 08             	and    eax,0x8
c00213fc:	74 08                	je     c0021406 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213fe:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021406:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002140d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021414:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002141c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021424:	83 ec 04             	sub    esp,0x4
c0021427:	52                   	push   edx
c0021428:	50                   	push   eax
c0021429:	8d 44 24 24          	lea    eax,[esp+0x24]
c002142d:	50                   	push   eax
c002142e:	e8 49 57 fe ff       	call   c0006b7c <f_chmod>
c0021433:	83 c4 10             	add    esp,0x10
c0021436:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002143d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021444:	85 c0                	test   eax,eax
c0021446:	75 07                	jne    c002144f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021448:	b8 00 00 00 00       	mov    eax,0x0
c002144d:	eb 05                	jmp    c0021454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002144f:	b8 01 00 00 00       	mov    eax,0x1
c0021454:	81 c4 2c 01 00 00    	add    esp,0x12c
c002145a:	c3                   	ret    
c002145b:	90                   	nop

c002145c <FAT::rename(char const*, char const*)>:
c002145c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021462:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002146a:	74 0a                	je     c0021476 <FAT::rename(char const*, char const*)+0x1a>
c002146c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021474:	75 0a                	jne    c0021480 <FAT::rename(char const*, char const*)+0x24>
c0021476:	b8 04 00 00 00       	mov    eax,0x4
c002147b:	e9 98 00 00 00       	jmp    c0021518 <FAT::rename(char const*, char const*)+0xbc>
c0021480:	83 ec 08             	sub    esp,0x8
c0021483:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002148a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021491:	50                   	push   eax
c0021492:	e8 9d f3 fd ff       	call   c0000834 <strcpy>
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	83 ec 08             	sub    esp,0x8
c002149d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214a4:	50                   	push   eax
c00214a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ac:	e8 ed fa ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00214b1:	83 c4 10             	add    esp,0x10
c00214b4:	83 ec 08             	sub    esp,0x8
c00214b7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214c2:	50                   	push   eax
c00214c3:	e8 6c f3 fd ff       	call   c0000834 <strcpy>
c00214c8:	83 c4 10             	add    esp,0x10
c00214cb:	83 ec 08             	sub    esp,0x8
c00214ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214d2:	50                   	push   eax
c00214d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214da:	e8 bf fa ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00214df:	83 c4 10             	add    esp,0x10
c00214e2:	83 ec 08             	sub    esp,0x8
c00214e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214e9:	50                   	push   eax
c00214ea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214f1:	50                   	push   eax
c00214f2:	e8 92 53 fe ff       	call   c0006889 <f_rename>
c00214f7:	83 c4 10             	add    esp,0x10
c00214fa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021501:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021508:	85 c0                	test   eax,eax
c002150a:	75 07                	jne    c0021513 <FAT::rename(char const*, char const*)+0xb7>
c002150c:	b8 00 00 00 00       	mov    eax,0x0
c0021511:	eb 05                	jmp    c0021518 <FAT::rename(char const*, char const*)+0xbc>
c0021513:	b8 01 00 00 00       	mov    eax,0x1
c0021518:	81 c4 1c 02 00 00    	add    esp,0x21c
c002151e:	c3                   	ret    
c002151f:	90                   	nop

c0021520 <FAT::mkdir(char const*)>:
c0021520:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021526:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002152e:	75 07                	jne    c0021537 <FAT::mkdir(char const*)+0x17>
c0021530:	b8 04 00 00 00       	mov    eax,0x4
c0021535:	eb 5c                	jmp    c0021593 <FAT::mkdir(char const*)+0x73>
c0021537:	83 ec 08             	sub    esp,0x8
c002153a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021541:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021545:	50                   	push   eax
c0021546:	e8 e9 f2 fd ff       	call   c0000834 <strcpy>
c002154b:	83 c4 10             	add    esp,0x10
c002154e:	83 ec 08             	sub    esp,0x8
c0021551:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021555:	50                   	push   eax
c0021556:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002155d:	e8 3c fa ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c0021562:	83 c4 10             	add    esp,0x10
c0021565:	83 ec 0c             	sub    esp,0xc
c0021568:	8d 44 24 18          	lea    eax,[esp+0x18]
c002156c:	50                   	push   eax
c002156d:	e8 eb 50 fe ff       	call   c000665d <f_mkdir>
c0021572:	83 c4 10             	add    esp,0x10
c0021575:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002157c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021583:	85 c0                	test   eax,eax
c0021585:	75 07                	jne    c002158e <FAT::mkdir(char const*)+0x6e>
c0021587:	b8 00 00 00 00       	mov    eax,0x0
c002158c:	eb 05                	jmp    c0021593 <FAT::mkdir(char const*)+0x73>
c002158e:	b8 01 00 00 00       	mov    eax,0x1
c0021593:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021599:	c3                   	ret    

c002159a <FAT::exists(char const*)>:
c002159a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215a0:	83 ec 08             	sub    esp,0x8
c00215a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215ae:	50                   	push   eax
c00215af:	e8 80 f2 fd ff       	call   c0000834 <strcpy>
c00215b4:	83 c4 10             	add    esp,0x10
c00215b7:	83 ec 08             	sub    esp,0x8
c00215ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215be:	50                   	push   eax
c00215bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215c6:	e8 d3 f9 ff ff       	call   c0020f9e <FAT::fixFilepath(char*)>
c00215cb:	83 c4 10             	add    esp,0x10
c00215ce:	83 ec 08             	sub    esp,0x8
c00215d1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215d8:	50                   	push   eax
c00215d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215dd:	50                   	push   eax
c00215de:	e8 a5 4b fe ff       	call   c0006188 <f_stat>
c00215e3:	83 c4 10             	add    esp,0x10
c00215e6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215ed:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215f4:	85 c0                	test   eax,eax
c00215f6:	75 04                	jne    c00215fc <FAT::exists(char const*)+0x62>
c00215f8:	b0 01                	mov    al,0x1
c00215fa:	eb 02                	jmp    c00215fe <FAT::exists(char const*)+0x64>
c00215fc:	b0 00                	mov    al,0x0
c00215fe:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021604:	c3                   	ret    
c0021605:	90                   	nop

c0021606 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021606:	b8 08 00 00 00       	mov    eax,0x8
c002160b:	c3                   	ret    

c002160c <ISO9660::seek(void*, unsigned long long)>:
c002160c:	53                   	push   ebx
c002160d:	b8 04 00 00 00       	mov    eax,0x4
c0021612:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021616:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002161a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002161e:	85 d2                	test   edx,edx
c0021620:	74 17                	je     c0021639 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021622:	89 c8                	mov    eax,ecx
c0021624:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021627:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002162a:	b8 01 00 00 00       	mov    eax,0x1
c002162f:	73 08                	jae    c0021639 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021631:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021634:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021637:	31 c0                	xor    eax,eax
c0021639:	5b                   	pop    ebx
c002163a:	c3                   	ret    
c002163b:	90                   	nop

c002163c <ISO9660::tell(void*, unsigned long long*)>:
c002163c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021644:	85 d2                	test   edx,edx
c0021646:	74 12                	je     c002165a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021648:	85 c0                	test   eax,eax
c002164a:	74 0e                	je     c002165a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002164c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002164f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021652:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021655:	89 10                	mov    DWORD PTR [eax],edx
c0021657:	31 c0                	xor    eax,eax
c0021659:	c3                   	ret    
c002165a:	b8 04 00 00 00       	mov    eax,0x4
c002165f:	c3                   	ret    

c0021660 <ISO9660::getName()>:
c0021660:	b8 48 ca 02 c0       	mov    eax,0xc002ca48
c0021665:	c3                   	ret    

c0021666 <ISO9660::stat(void*, unsigned long long*)>:
c0021666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002166a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002166e:	85 d2                	test   edx,edx
c0021670:	74 12                	je     c0021684 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021672:	85 c0                	test   eax,eax
c0021674:	74 0e                	je     c0021684 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021676:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021679:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002167c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002167f:	89 10                	mov    DWORD PTR [eax],edx
c0021681:	31 c0                	xor    eax,eax
c0021683:	c3                   	ret    
c0021684:	b8 04 00 00 00       	mov    eax,0x4
c0021689:	c3                   	ret    

c002168a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002168a:	b8 01 00 00 00       	mov    eax,0x1
c002168f:	c3                   	ret    

c0021690 <ISO9660::unlink(char const*)>:
c0021690:	b8 01 00 00 00       	mov    eax,0x1
c0021695:	c3                   	ret    

c0021696 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021696:	b8 01 00 00 00       	mov    eax,0x1
c002169b:	c3                   	ret    

c002169c <ISO9660::rename(char const*, char const*)>:
c002169c:	b8 01 00 00 00       	mov    eax,0x1
c00216a1:	c3                   	ret    

c00216a2 <ISO9660::mkdir(char const*)>:
c00216a2:	b8 01 00 00 00       	mov    eax,0x1
c00216a7:	c3                   	ret    

c00216a8 <ISO9660::close(void*)>:
c00216a8:	83 ec 0c             	sub    esp,0xc
c00216ab:	b8 04 00 00 00       	mov    eax,0x4
c00216b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b4:	85 d2                	test   edx,edx
c00216b6:	74 0e                	je     c00216c6 <ISO9660::close(void*)+0x1e>
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	52                   	push   edx
c00216bc:	e8 8f e1 fe ff       	call   c000f850 <free>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	31 c0                	xor    eax,eax
c00216c6:	83 c4 0c             	add    esp,0xc
c00216c9:	c3                   	ret    

c00216ca <ISO9660::closeDir(void*)>:
c00216ca:	83 ec 0c             	sub    esp,0xc
c00216cd:	b8 04 00 00 00       	mov    eax,0x4
c00216d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d6:	85 d2                	test   edx,edx
c00216d8:	74 0e                	je     c00216e8 <ISO9660::closeDir(void*)+0x1e>
c00216da:	83 ec 0c             	sub    esp,0xc
c00216dd:	52                   	push   edx
c00216de:	e8 6d e1 fe ff       	call   c000f850 <free>
c00216e3:	83 c4 10             	add    esp,0x10
c00216e6:	31 c0                	xor    eax,eax
c00216e8:	83 c4 0c             	add    esp,0xc
c00216eb:	c3                   	ret    

c00216ec <ISO9660::~ISO9660()>:
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	ba ac ca 02 c0       	mov    edx,0xc002caac
c00216f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f8:	89 10                	mov    DWORD PTR [eax],edx
c00216fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216fe:	83 ec 0c             	sub    esp,0xc
c0021701:	50                   	push   eax
c0021702:	e8 33 1b ff ff       	call   c001323a <Filesystem::~Filesystem()>
c0021707:	83 c4 10             	add    esp,0x10
c002170a:	90                   	nop
c002170b:	83 c4 0c             	add    esp,0xc
c002170e:	c3                   	ret    
c002170f:	90                   	nop

c0021710 <ISO9660::~ISO9660()>:
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	83 ec 0c             	sub    esp,0xc
c0021716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002171a:	e8 cd ff ff ff       	call   c00216ec <ISO9660::~ISO9660()>
c002171f:	83 c4 10             	add    esp,0x10
c0021722:	83 ec 08             	sub    esp,0x8
c0021725:	6a 08                	push   0x8
c0021727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002172b:	e8 02 17 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0021730:	83 c4 10             	add    esp,0x10
c0021733:	83 c4 0c             	add    esp,0xc
c0021736:	c3                   	ret    

c0021737 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021737:	55                   	push   ebp
c0021738:	31 c9                	xor    ecx,ecx
c002173a:	57                   	push   edi
c002173b:	56                   	push   esi
c002173c:	53                   	push   ebx
c002173d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021741:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021745:	89 eb                	mov    ebx,ebp
c0021747:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002174b:	39 ce                	cmp    esi,ecx
c002174d:	7e 17                	jle    c0021766 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002174f:	31 d2                	xor    edx,edx
c0021751:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021755:	7d 13                	jge    c002176a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021757:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002175b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002175e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021761:	75 0d                	jne    c0021770 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021763:	42                   	inc    edx
c0021764:	eb eb                	jmp    c0021751 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021766:	31 c0                	xor    eax,eax
c0021768:	eb 0a                	jmp    c0021774 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002176a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002176e:	eb 04                	jmp    c0021774 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021770:	41                   	inc    ecx
c0021771:	43                   	inc    ebx
c0021772:	eb d7                	jmp    c002174b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021774:	5b                   	pop    ebx
c0021775:	5e                   	pop    esi
c0021776:	5f                   	pop    edi
c0021777:	5d                   	pop    ebp
c0021778:	c3                   	ret    

c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021779:	56                   	push   esi
c002177a:	53                   	push   ebx
c002177b:	52                   	push   edx
c002177c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021780:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021784:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021788:	39 0d c0 1c 03 c0    	cmp    DWORD PTR ds:0xc0031cc0,ecx
c002178e:	75 08                	jne    c0021798 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021790:	38 05 14 db 02 c0    	cmp    BYTE PTR ds:0xc002db14,al
c0021796:	74 2b                	je     c00217c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021798:	83 ec 0c             	sub    esp,0xc
c002179b:	a2 14 db 02 c0       	mov    ds:0xc002db14,al
c00217a0:	68 e0 1c 03 c0       	push   0xc0031ce0
c00217a5:	0f be c0             	movsx  eax,al
c00217a8:	6a 01                	push   0x1
c00217aa:	89 0d c0 1c 03 c0    	mov    DWORD PTR ds:0xc0031cc0,ecx
c00217b0:	31 db                	xor    ebx,ebx
c00217b2:	53                   	push   ebx
c00217b3:	51                   	push   ecx
c00217b4:	ff 34 85 9c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1564]
c00217bb:	e8 62 4f ff ff       	call   c0016722 <LogicalDisk::read(unsigned long long, int, void*)>
c00217c0:	83 c4 20             	add    esp,0x20
c00217c3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217cb:	c7 44 24 14 e0 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ce0
c00217d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217d7:	58                   	pop    eax
c00217d8:	5b                   	pop    ebx
c00217d9:	5e                   	pop    esi
c00217da:	e9 65 ef fd ff       	jmp    c0000744 <memcpy>
c00217df:	90                   	nop

c00217e0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217e0:	81 ec 10 08 00 00    	sub    esp,0x810
c00217e6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217ed:	83 c0 41             	add    eax,0x41
c00217f0:	0f be c0             	movsx  eax,al
c00217f3:	50                   	push   eax
c00217f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217f8:	50                   	push   eax
c00217f9:	6a 10                	push   0x10
c00217fb:	e8 79 ff ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021800:	83 c4 10             	add    esp,0x10
c0021803:	31 c0                	xor    eax,eax
c0021805:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002180a:	75 1d                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002180c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021811:	75 16                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021813:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021818:	75 0f                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002181a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002181f:	75 08                	jne    c0021829 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021821:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021826:	0f 94 c0             	sete   al
c0021829:	81 c4 0c 08 00 00    	add    esp,0x80c
c002182f:	c3                   	ret    

c0021830 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021830:	55                   	push   ebp
c0021831:	57                   	push   edi
c0021832:	56                   	push   esi
c0021833:	53                   	push   ebx
c0021834:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002183a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021841:	85 ed                	test   ebp,ebp
c0021843:	0f 84 d6 01 00 00    	je     c0021a1f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021849:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021851:	0f 84 c8 01 00 00    	je     c0021a1f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021857:	b8 01 00 00 00       	mov    eax,0x1
c002185c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021860:	0f 85 be 01 00 00    	jne    c0021a24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021866:	31 d2                	xor    edx,edx
c0021868:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002186f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021872:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021875:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021879:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002187c:	89 04 24             	mov    DWORD PTR [esp],eax
c002187f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021883:	01 f0                	add    eax,esi
c0021885:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021888:	11 fa                	adc    edx,edi
c002188a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002188e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021892:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021896:	19 d1                	sbb    ecx,edx
c0021898:	72 0a                	jb     c00218a4 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002189a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002189e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218a2:	eb 13                	jmp    c00218b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218ac:	29 f0                	sub    eax,esi
c00218ae:	19 fa                	sbb    edx,edi
c00218b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00218b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218ba:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218bd:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218c1:	51                   	push   ecx
c00218c2:	c1 e0 0b             	shl    eax,0xb
c00218c5:	01 c6                	add    esi,eax
c00218c7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218cb:	11 d7                	adc    edi,edx
c00218cd:	50                   	push   eax
c00218ce:	89 fa                	mov    edx,edi
c00218d0:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218d4:	89 f0                	mov    eax,esi
c00218d6:	53                   	push   ebx
c00218d7:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218db:	50                   	push   eax
c00218dc:	e8 98 fe ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218e5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218ec:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218f2:	83 c4 10             	add    esp,0x10
c00218f5:	b8 00 08 00 00       	mov    eax,0x800
c00218fa:	29 d0                	sub    eax,edx
c00218fc:	39 c1                	cmp    ecx,eax
c00218fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021902:	83 d9 00             	sbb    ecx,0x0
c0021905:	7d 1c                	jge    c0021923 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021907:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002190c:	75 12                	jne    c0021920 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002190e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021915:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002191b:	e9 fb 00 00 00       	jmp    c0021a1b <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021920:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021923:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021926:	31 d2                	xor    edx,edx
c0021928:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002192c:	39 c2                	cmp    edx,eax
c002192e:	7d 14                	jge    c0021944 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021930:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002193b:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002193e:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021941:	42                   	inc    edx
c0021942:	eb e8                	jmp    c002192c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021944:	89 c3                	mov    ebx,eax
c0021946:	85 c0                	test   eax,eax
c0021948:	79 02                	jns    c002194c <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002194a:	31 db                	xor    ebx,ebx
c002194c:	99                   	cdq    
c002194d:	01 c3                	add    ebx,eax
c002194f:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021956:	01 c6                	add    esi,eax
c0021958:	11 d7                	adc    edi,edx
c002195a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002195e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021962:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021965:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021969:	29 c6                	sub    esi,eax
c002196b:	19 d7                	sbb    edi,edx
c002196d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021970:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021974:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021979:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002197c:	b8 00 00 00 00       	mov    eax,0x0
c0021981:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021985:	7d 3e                	jge    c00219c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021987:	52                   	push   edx
c0021988:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198c:	50                   	push   eax
c002198d:	53                   	push   ebx
c002198e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021992:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021996:	0f ac d0 0b          	shrd   eax,edx,0xb
c002199a:	50                   	push   eax
c002199b:	e8 d9 fd ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219a0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219a8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219ad:	81 c3 00 08 00 00    	add    ebx,0x800
c00219b3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219bb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219c0:	83 c4 10             	add    esp,0x10
c00219c3:	eb af                	jmp    c0021974 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219c9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219cc:	74 32                	je     c0021a00 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219ce:	50                   	push   eax
c00219cf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d3:	50                   	push   eax
c00219d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219d8:	50                   	push   eax
c00219d9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219e1:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219e5:	56                   	push   esi
c00219e6:	e8 8e fd ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219eb:	83 c4 0c             	add    esp,0xc
c00219ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219f6:	50                   	push   eax
c00219f7:	53                   	push   ebx
c00219f8:	e8 47 ed fd ff       	call   c0000744 <memcpy>
c00219fd:	83 c4 10             	add    esp,0x10
c0021a00:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a0f:	89 38                	mov    DWORD PTR [eax],edi
c0021a11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a15:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a18:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a1b:	31 c0                	xor    eax,eax
c0021a1d:	eb 05                	jmp    c0021a24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a1f:	b8 04 00 00 00       	mov    eax,0x4
c0021a24:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a2a:	5b                   	pop    ebx
c0021a2b:	5e                   	pop    esi
c0021a2c:	5f                   	pop    edi
c0021a2d:	5d                   	pop    ebp
c0021a2e:	c3                   	ret    
c0021a2f:	90                   	nop

c0021a30 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a30:	55                   	push   ebp
c0021a31:	57                   	push   edi
c0021a32:	56                   	push   esi
c0021a33:	53                   	push   ebx
c0021a34:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a3a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a41:	85 f6                	test   esi,esi
c0021a43:	0f 84 64 02 00 00    	je     c0021cad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a49:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a51:	0f 84 56 02 00 00    	je     c0021cad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a57:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a5a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a5d:	75 0a                	jne    c0021a69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a5f:	b8 07 00 00 00       	mov    eax,0x7
c0021a64:	e9 49 02 00 00       	jmp    c0021cb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a69:	50                   	push   eax
c0021a6a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a6e:	50                   	push   eax
c0021a6f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a76:	53                   	push   ebx
c0021a77:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a79:	c1 e0 0b             	shl    eax,0xb
c0021a7c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a7f:	c1 e8 0b             	shr    eax,0xb
c0021a82:	50                   	push   eax
c0021a83:	e8 f1 fc ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a88:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a8b:	83 c4 10             	add    esp,0x10
c0021a8e:	89 c1                	mov    ecx,eax
c0021a90:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a93:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a99:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a9c:	84 db                	test   bl,bl
c0021a9e:	0f 85 90 00 00 00    	jne    c0021b34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aa4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021aaa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ab0:	29 c7                	sub    edi,eax
c0021ab2:	89 fb                	mov    ebx,edi
c0021ab4:	c1 fb 1f             	sar    ebx,0x1f
c0021ab7:	01 f8                	add    eax,edi
c0021ab9:	11 da                	adc    edx,ebx
c0021abb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021abf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ac6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021ac9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021acc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021acf:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ad2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ad6:	89 d8                	mov    eax,ebx
c0021ad8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021adb:	ba 00 00 00 00       	mov    edx,0x0
c0021ae0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ae4:	b8 00 00 00 00       	mov    eax,0x0
c0021ae9:	73 0b                	jae    c0021af6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021aeb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021aee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021af2:	29 f8                	sub    eax,edi
c0021af4:	19 da                	sbb    edx,ebx
c0021af6:	89 d3                	mov    ebx,edx
c0021af8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021afb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021afe:	09 c3                	or     ebx,eax
c0021b00:	0f 84 59 ff ff ff    	je     c0021a5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b06:	55                   	push   ebp
c0021b07:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b0b:	50                   	push   eax
c0021b0c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b13:	53                   	push   ebx
c0021b14:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b16:	c1 e0 0b             	shl    eax,0xb
c0021b19:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b1d:	c1 e8 0b             	shr    eax,0xb
c0021b20:	50                   	push   eax
c0021b21:	e8 53 fc ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b29:	83 c4 10             	add    esp,0x10
c0021b2c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b31:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b34:	57                   	push   edi
c0021b35:	6a 28                	push   0x28
c0021b37:	6a 00                	push   0x0
c0021b39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b3d:	50                   	push   eax
c0021b3e:	e8 35 ec fd ff       	call   c0000778 <memset>
c0021b43:	31 d2                	xor    edx,edx
c0021b45:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b48:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b4e:	89 f8                	mov    eax,edi
c0021b50:	83 c0 21             	add    eax,0x21
c0021b53:	83 d2 00             	adc    edx,0x0
c0021b56:	89 c7                	mov    edi,eax
c0021b58:	89 d5                	mov    ebp,edx
c0021b5a:	83 c4 10             	add    esp,0x10
c0021b5d:	31 c9                	xor    ecx,ecx
c0021b5f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b66:	83 f9 28             	cmp    ecx,0x28
c0021b69:	88 04 24             	mov    BYTE PTR [esp],al
c0021b6c:	0f 94 c2             	sete   dl
c0021b6f:	88 d0                	mov    al,dl
c0021b71:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b76:	39 fa                	cmp    edx,edi
c0021b78:	ba 00 00 00 00       	mov    edx,0x0
c0021b7d:	19 ea                	sbb    edx,ebp
c0021b7f:	0f 92 c2             	setb   dl
c0021b82:	09 c2                	or     edx,eax
c0021b84:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b88:	0f 94 c0             	sete   al
c0021b8b:	08 d0                	or     al,dl
c0021b8d:	75 16                	jne    c0021ba5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b8f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b93:	74 10                	je     c0021ba5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b95:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b98:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b9c:	41                   	inc    ecx
c0021b9d:	83 c7 01             	add    edi,0x1
c0021ba0:	83 d5 00             	adc    ebp,0x0
c0021ba3:	eb ba                	jmp    c0021b5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021ba5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bac:	83 ec 0c             	sub    esp,0xc
c0021baf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bb3:	57                   	push   edi
c0021bb4:	e8 db eb fd ff       	call   c0000794 <strlen>
c0021bb9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bc1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bc5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bcc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bcf:	5a                   	pop    edx
c0021bd0:	25 ff 07 00 00       	and    eax,0x7ff
c0021bd5:	01 c8                	add    eax,ecx
c0021bd7:	59                   	pop    ecx
c0021bd8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bde:	83 e0 02             	and    eax,0x2
c0021be1:	3c 01                	cmp    al,0x1
c0021be3:	19 c0                	sbb    eax,eax
c0021be5:	83 c0 02             	add    eax,0x2
c0021be8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bec:	57                   	push   edi
c0021bed:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bf1:	50                   	push   eax
c0021bf2:	e8 3d ec fd ff       	call   c0000834 <strcpy>
c0021bf7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bfb:	83 c4 10             	add    esp,0x10
c0021bfe:	84 c0                	test   al,al
c0021c00:	75 21                	jne    c0021c23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c02:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c0a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c12:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c1a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c21:	eb 28                	jmp    c0021c4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c23:	fe c8                	dec    al
c0021c25:	75 24                	jne    c0021c4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c27:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c2f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c37:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c3f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c46:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c4b:	0f b6 fb             	movzx  edi,bl
c0021c4e:	31 db                	xor    ebx,ebx
c0021c50:	50                   	push   eax
c0021c51:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c58:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c5c:	50                   	push   eax
c0021c5d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c64:	e8 db ea fd ff       	call   c0000744 <memcpy>
c0021c69:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c70:	89 f9                	mov    ecx,edi
c0021c72:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c78:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c7b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c7e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c81:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c84:	83 c4 10             	add    esp,0x10
c0021c87:	39 c7                	cmp    edi,eax
c0021c89:	89 df                	mov    edi,ebx
c0021c8b:	19 d7                	sbb    edi,edx
c0021c8d:	72 10                	jb     c0021c9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c8f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c96:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c9d:	eb 0a                	jmp    c0021ca9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c9f:	29 c8                	sub    eax,ecx
c0021ca1:	19 da                	sbb    edx,ebx
c0021ca3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ca6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ca9:	31 c0                	xor    eax,eax
c0021cab:	eb 05                	jmp    c0021cb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cad:	b8 04 00 00 00       	mov    eax,0x4
c0021cb2:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cb8:	5b                   	pop    ebx
c0021cb9:	5e                   	pop    esi
c0021cba:	5f                   	pop    edi
c0021cbb:	5d                   	pop    ebp
c0021cbc:	c3                   	ret    

c0021cbd <readRoot(unsigned int*, unsigned int*, char)>:
c0021cbd:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cc3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ccb:	50                   	push   eax
c0021ccc:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cd0:	50                   	push   eax
c0021cd1:	6a 10                	push   0x10
c0021cd3:	e8 a1 fa ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cd8:	83 c4 0c             	add    esp,0xc
c0021cdb:	6a 22                	push   0x22
c0021cdd:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ce4:	50                   	push   eax
c0021ce5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ce9:	50                   	push   eax
c0021cea:	e8 55 ea fd ff       	call   c0000744 <memcpy>
c0021cef:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cf6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cfa:	89 10                	mov    DWORD PTR [eax],edx
c0021cfc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d07:	89 10                	mov    DWORD PTR [eax],edx
c0021d09:	b0 01                	mov    al,0x1
c0021d0b:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d11:	c3                   	ret    

c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d12:	55                   	push   ebp
c0021d13:	57                   	push   edi
c0021d14:	56                   	push   esi
c0021d15:	53                   	push   ebx
c0021d16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d1c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d23:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d2e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d32:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d36:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d3a:	75 03                	jne    c0021d3f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d3c:	83 c3 02             	add    ebx,0x2
c0021d3f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d42:	75 03                	jne    c0021d47 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d44:	43                   	inc    ebx
c0021d45:	eb f8                	jmp    c0021d3f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d47:	51                   	push   ecx
c0021d48:	68 00 01 00 00       	push   0x100
c0021d4d:	6a 00                	push   0x0
c0021d4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d53:	50                   	push   eax
c0021d54:	e8 1f ea fd ff       	call   c0000778 <memset>
c0021d59:	83 c4 10             	add    esp,0x10
c0021d5c:	31 d2                	xor    edx,edx
c0021d5e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d61:	84 c0                	test   al,al
c0021d63:	74 21                	je     c0021d86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d65:	3c 2f                	cmp    al,0x2f
c0021d67:	75 0b                	jne    c0021d74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d69:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d6d:	bd 01 00 00 00       	mov    ebp,0x1
c0021d72:	eb 14                	jmp    c0021d88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d74:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d77:	80 f9 19             	cmp    cl,0x19
c0021d7a:	77 03                	ja     c0021d7f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d7c:	83 e8 20             	sub    eax,0x20
c0021d7f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d83:	42                   	inc    edx
c0021d84:	eb d8                	jmp    c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d86:	31 ed                	xor    ebp,ebp
c0021d88:	83 ec 0c             	sub    esp,0xc
c0021d8b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d92:	e8 a9 da fe ff       	call   c000f840 <malloc>
c0021d97:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d9e:	89 c6                	mov    esi,eax
c0021da0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021da6:	c1 ef 0b             	shr    edi,0xb
c0021da9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021db0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021db4:	83 c4 10             	add    esp,0x10
c0021db7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dc0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dc7:	74 28                	je     c0021df1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dc9:	52                   	push   edx
c0021dca:	57                   	push   edi
c0021dcb:	50                   	push   eax
c0021dcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dd0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dd7:	e8 9d f9 ff ff       	call   c0021779 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021de0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021de7:	05 00 08 00 00       	add    eax,0x800
c0021dec:	83 c4 10             	add    esp,0x10
c0021def:	eb cb                	jmp    c0021dbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021df1:	83 ec 0c             	sub    esp,0xc
c0021df4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021df8:	57                   	push   edi
c0021df9:	e8 96 e9 fd ff       	call   c0000794 <strlen>
c0021dfe:	50                   	push   eax
c0021dff:	57                   	push   edi
c0021e00:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e07:	56                   	push   esi
c0021e08:	e8 2a f9 ff ff       	call   c0021737 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e0d:	83 c4 20             	add    esp,0x20
c0021e10:	85 c0                	test   eax,eax
c0021e12:	75 13                	jne    c0021e27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e14:	83 ec 0c             	sub    esp,0xc
c0021e17:	56                   	push   esi
c0021e18:	e8 33 da fe ff       	call   c000f850 <free>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	31 c0                	xor    eax,eax
c0021e22:	e9 b3 00 00 00       	jmp    c0021eda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e27:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e2b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e2f:	c1 e7 08             	shl    edi,0x8
c0021e32:	c1 e2 10             	shl    edx,0x10
c0021e35:	09 d7                	or     edi,edx
c0021e37:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e3b:	09 d7                	or     edi,edx
c0021e3d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e41:	c1 e2 18             	shl    edx,0x18
c0021e44:	09 d7                	or     edi,edx
c0021e46:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e4a:	89 d1                	mov    ecx,edx
c0021e4c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e50:	c1 e1 08             	shl    ecx,0x8
c0021e53:	c1 e2 10             	shl    edx,0x10
c0021e56:	09 ca                	or     edx,ecx
c0021e58:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e5c:	09 ca                	or     edx,ecx
c0021e5e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e62:	c1 e1 18             	shl    ecx,0x18
c0021e65:	09 ca                	or     edx,ecx
c0021e67:	89 e9                	mov    ecx,ebp
c0021e69:	84 c9                	test   cl,cl
c0021e6b:	74 3c                	je     c0021ea9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e71:	83 ec 0c             	sub    esp,0xc
c0021e74:	56                   	push   esi
c0021e75:	e8 d6 d9 fe ff       	call   c000f850 <free>
c0021e7a:	83 c4 0c             	add    esp,0xc
c0021e7d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e84:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e89:	50                   	push   eax
c0021e8a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e91:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e9c:	52                   	push   edx
c0021e9d:	57                   	push   edi
c0021e9e:	53                   	push   ebx
c0021e9f:	e8 6e fe ff ff       	call   c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ea4:	83 c4 20             	add    esp,0x20
c0021ea7:	eb 31                	jmp    c0021eda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ea9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021eac:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021eb3:	d0 e8                	shr    al,1
c0021eb5:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eb7:	83 e0 01             	and    eax,0x1
c0021eba:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ec1:	83 ec 0c             	sub    esp,0xc
c0021ec4:	89 13                	mov    DWORD PTR [ebx],edx
c0021ec6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ecd:	89 03                	mov    DWORD PTR [ebx],eax
c0021ecf:	56                   	push   esi
c0021ed0:	e8 7b d9 fe ff       	call   c000f850 <free>
c0021ed5:	83 c4 10             	add    esp,0x10
c0021ed8:	b0 01                	mov    al,0x1
c0021eda:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ee0:	5b                   	pop    ebx
c0021ee1:	5e                   	pop    esi
c0021ee2:	5f                   	pop    edi
c0021ee3:	5d                   	pop    ebp
c0021ee4:	c3                   	ret    

c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ee5:	55                   	push   ebp
c0021ee6:	57                   	push   edi
c0021ee7:	56                   	push   esi
c0021ee8:	53                   	push   ebx
c0021ee9:	83 ec 20             	sub    esp,0x20
c0021eec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ef0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ef4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ef8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f00:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f08:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f0d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f13:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f19:	57                   	push   edi
c0021f1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f1e:	50                   	push   eax
c0021f1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f23:	50                   	push   eax
c0021f24:	e8 94 fd ff ff       	call   c0021cbd <readRoot(unsigned int*, unsigned int*, char)>
c0021f29:	5a                   	pop    edx
c0021f2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f2e:	e8 61 e8 fd ff       	call   c0000794 <strlen>
c0021f33:	83 c4 10             	add    esp,0x10
c0021f36:	83 f8 03             	cmp    eax,0x3
c0021f39:	77 17                	ja     c0021f52 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f3f:	89 03                	mov    DWORD PTR [ebx],eax
c0021f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f45:	89 06                	mov    DWORD PTR [esi],eax
c0021f47:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f4e:	b0 01                	mov    al,0x1
c0021f50:	eb 19                	jmp    c0021f6b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f52:	50                   	push   eax
c0021f53:	55                   	push   ebp
c0021f54:	57                   	push   edi
c0021f55:	56                   	push   esi
c0021f56:	53                   	push   ebx
c0021f57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f63:	e8 aa fd ff ff       	call   c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f68:	83 c4 20             	add    esp,0x20
c0021f6b:	83 c4 1c             	add    esp,0x1c
c0021f6e:	5b                   	pop    ebx
c0021f6f:	5e                   	pop    esi
c0021f70:	5f                   	pop    edi
c0021f71:	5d                   	pop    ebp
c0021f72:	c3                   	ret    
c0021f73:	90                   	nop

c0021f74 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f74:	57                   	push   edi
c0021f75:	56                   	push   esi
c0021f76:	53                   	push   ebx
c0021f77:	83 ec 10             	sub    esp,0x10
c0021f7a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f7e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f82:	85 ff                	test   edi,edi
c0021f84:	0f 84 9d 00 00 00    	je     c0022027 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f8a:	85 f6                	test   esi,esi
c0021f8c:	0f 84 95 00 00 00    	je     c0022027 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f92:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f97:	74 17                	je     c0021fb0 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f99:	83 ec 0c             	sub    esp,0xc
c0021f9c:	68 63 ca 02 c0       	push   0xc002ca63
c0021fa1:	e8 6c 0f ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0021fa6:	83 c4 10             	add    esp,0x10
c0021fa9:	b8 03 00 00 00       	mov    eax,0x3
c0021fae:	eb 7c                	jmp    c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fb0:	83 ec 0c             	sub    esp,0xc
c0021fb3:	6a 1c                	push   0x1c
c0021fb5:	e8 86 d8 fe ff       	call   c000f840 <malloc>
c0021fba:	89 07                	mov    DWORD PTR [edi],eax
c0021fbc:	89 c3                	mov    ebx,eax
c0021fbe:	58                   	pop    eax
c0021fbf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fc3:	50                   	push   eax
c0021fc4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fc7:	50                   	push   eax
c0021fc8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fcc:	50                   	push   eax
c0021fcd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fd1:	50                   	push   eax
c0021fd2:	56                   	push   esi
c0021fd3:	e8 0d ff ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fd8:	83 c4 20             	add    esp,0x20
c0021fdb:	84 c0                	test   al,al
c0021fdd:	74 07                	je     c0021fe6 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fdf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fe4:	74 0b                	je     c0021ff1 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fe6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fea:	b8 01 00 00 00       	mov    eax,0x1
c0021fef:	eb 3b                	jmp    c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ff9:	89 03                	mov    DWORD PTR [ebx],eax
c0021ffb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022006:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002200d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022014:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022017:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002201e:	8a 06                	mov    al,BYTE PTR [esi]
c0022020:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022023:	31 c0                	xor    eax,eax
c0022025:	eb 05                	jmp    c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022027:	b8 04 00 00 00       	mov    eax,0x4
c002202c:	83 c4 10             	add    esp,0x10
c002202f:	5b                   	pop    ebx
c0022030:	5e                   	pop    esi
c0022031:	5f                   	pop    edi
c0022032:	c3                   	ret    
c0022033:	90                   	nop

c0022034 <ISO9660::exists(char const*)>:
c0022034:	83 ec 28             	sub    esp,0x28
c0022037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002203b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002203f:	52                   	push   edx
c0022040:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022043:	52                   	push   edx
c0022044:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022048:	52                   	push   edx
c0022049:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002204d:	52                   	push   edx
c002204e:	50                   	push   eax
c002204f:	e8 91 fe ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022054:	83 c4 3c             	add    esp,0x3c
c0022057:	c3                   	ret    

c0022058 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022058:	56                   	push   esi
c0022059:	53                   	push   ebx
c002205a:	83 ec 14             	sub    esp,0x14
c002205d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022061:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022065:	85 db                	test   ebx,ebx
c0022067:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002206b:	0f 94 c2             	sete   dl
c002206e:	85 f6                	test   esi,esi
c0022070:	0f 94 c0             	sete   al
c0022073:	08 c2                	or     dl,al
c0022075:	75 68                	jne    c00220df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022077:	85 c9                	test   ecx,ecx
c0022079:	74 64                	je     c00220df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002207b:	83 ec 0c             	sub    esp,0xc
c002207e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022081:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002208b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022092:	50                   	push   eax
c0022093:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022096:	50                   	push   eax
c0022097:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002209b:	50                   	push   eax
c002209c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220a0:	50                   	push   eax
c00220a1:	51                   	push   ecx
c00220a2:	e8 3e fe ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220a7:	83 c4 20             	add    esp,0x20
c00220aa:	ba 01 00 00 00       	mov    edx,0x1
c00220af:	84 c0                	test   al,al
c00220b1:	74 31                	je     c00220e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220be:	89 03                	mov    DWORD PTR [ebx],eax
c00220c0:	ba 00 00 00 00       	mov    edx,0x0
c00220c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220c9:	85 c0                	test   eax,eax
c00220cb:	0f 95 06             	setne  BYTE PTR [esi]
c00220ce:	74 14                	je     c00220e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220d0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220dd:	eb 05                	jmp    c00220e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220df:	ba 04 00 00 00       	mov    edx,0x4
c00220e4:	83 c4 14             	add    esp,0x14
c00220e7:	89 d0                	mov    eax,edx
c00220e9:	5b                   	pop    ebx
c00220ea:	5e                   	pop    esi
c00220eb:	c3                   	ret    

c00220ec <ISO9660::openDir(char const*, void**)>:
c00220ec:	57                   	push   edi
c00220ed:	56                   	push   esi
c00220ee:	53                   	push   ebx
c00220ef:	83 ec 10             	sub    esp,0x10
c00220f2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220fa:	85 ff                	test   edi,edi
c00220fc:	0f 84 95 00 00 00    	je     c0022197 <ISO9660::openDir(char const*, void**)+0xab>
c0022102:	85 f6                	test   esi,esi
c0022104:	0f 84 8d 00 00 00    	je     c0022197 <ISO9660::openDir(char const*, void**)+0xab>
c002210a:	83 ec 0c             	sub    esp,0xc
c002210d:	6a 1c                	push   0x1c
c002210f:	e8 2c d7 fe ff       	call   c000f840 <malloc>
c0022114:	89 07                	mov    DWORD PTR [edi],eax
c0022116:	89 c3                	mov    ebx,eax
c0022118:	59                   	pop    ecx
c0022119:	8d 44 24 18          	lea    eax,[esp+0x18]
c002211d:	50                   	push   eax
c002211e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022121:	50                   	push   eax
c0022122:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022126:	50                   	push   eax
c0022127:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002212b:	50                   	push   eax
c002212c:	56                   	push   esi
c002212d:	e8 b3 fd ff ff       	call   c0021ee5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022132:	83 c4 20             	add    esp,0x20
c0022135:	84 c0                	test   al,al
c0022137:	74 07                	je     c0022140 <ISO9660::openDir(char const*, void**)+0x54>
c0022139:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002213e:	75 21                	jne    c0022161 <ISO9660::openDir(char const*, void**)+0x75>
c0022140:	0f b6 c0             	movzx  eax,al
c0022143:	52                   	push   edx
c0022144:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022148:	50                   	push   eax
c0022149:	68 89 ca 02 c0       	push   0xc002ca89
c002214e:	e8 bf 0d ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0022153:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022157:	83 c4 10             	add    esp,0x10
c002215a:	b8 01 00 00 00       	mov    eax,0x1
c002215f:	eb 3b                	jmp    c002219c <ISO9660::openDir(char const*, void**)+0xb0>
c0022161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022165:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022169:	89 03                	mov    DWORD PTR [ebx],eax
c002216b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022172:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022176:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002217d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022187:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002218e:	8a 06                	mov    al,BYTE PTR [esi]
c0022190:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022193:	31 c0                	xor    eax,eax
c0022195:	eb 05                	jmp    c002219c <ISO9660::openDir(char const*, void**)+0xb0>
c0022197:	b8 04 00 00 00       	mov    eax,0x4
c002219c:	83 c4 10             	add    esp,0x10
c002219f:	5b                   	pop    ebx
c00221a0:	5e                   	pop    esi
c00221a1:	5f                   	pop    edi
c00221a2:	c3                   	ret    
c00221a3:	90                   	nop

c00221a4 <ISO9660::ISO9660()>:
c00221a4:	83 ec 0c             	sub    esp,0xc
c00221a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ab:	83 ec 0c             	sub    esp,0xc
c00221ae:	50                   	push   eax
c00221af:	e8 62 10 ff ff       	call   c0013216 <Filesystem::Filesystem()>
c00221b4:	83 c4 10             	add    esp,0x10
c00221b7:	ba ac ca 02 c0       	mov    edx,0xc002caac
c00221bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c0:	89 10                	mov    DWORD PTR [eax],edx
c00221c2:	90                   	nop
c00221c3:	83 c4 0c             	add    esp,0xc
c00221c6:	c3                   	ret    
c00221c7:	90                   	nop

c00221c8 <SoundChannel::~SoundChannel()>:
c00221c8:	83 ec 0c             	sub    esp,0xc
c00221cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221d2:	83 ec 0c             	sub    esp,0xc
c00221d5:	50                   	push   eax
c00221d6:	e8 75 d6 fe ff       	call   c000f850 <free>
c00221db:	83 c4 10             	add    esp,0x10
c00221de:	90                   	nop
c00221df:	83 c4 0c             	add    esp,0xc
c00221e2:	c3                   	ret    
c00221e3:	90                   	nop

c00221e4 <SoundChannel::setSpeed(float)>:
c00221e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221ec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221ef:	c3                   	ret    

c00221f0 <SoundChannel::getSpeed()>:
c00221f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221f7:	c3                   	ret    

c00221f8 <SoundChannel::setVolume(int)>:
c00221f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221fc:	83 f8 64             	cmp    eax,0x64
c00221ff:	7e 05                	jle    c0022206 <SoundChannel::setVolume(int)+0xe>
c0022201:	b8 64 00 00 00       	mov    eax,0x64
c0022206:	85 c0                	test   eax,eax
c0022208:	79 02                	jns    c002220c <SoundChannel::setVolume(int)+0x14>
c002220a:	31 c0                	xor    eax,eax
c002220c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022210:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022213:	c3                   	ret    

c0022214 <SoundChannel::getVolume()>:
c0022214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022218:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002221b:	c3                   	ret    

c002221c <SoundChannel::pause()>:
c002221c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022220:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022224:	c3                   	ret    
c0022225:	90                   	nop

c0022226 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022226:	83 ec 1c             	sub    esp,0x1c
c0022229:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002222d:	e8 ea ff ff ff       	call   c002221c <SoundChannel::pause()>
c0022232:	83 c4 04             	add    esp,0x4
c0022235:	6a 50                	push   0x50
c0022237:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002223b:	e8 b8 ff ff ff       	call   c00221f8 <SoundChannel::setVolume(int)>
c0022240:	83 c4 08             	add    esp,0x8
c0022243:	a1 24 cb 02 c0       	mov    eax,ds:0xc002cb24
c0022248:	50                   	push   eax
c0022249:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002224d:	e8 92 ff ff ff       	call   c00221e4 <SoundChannel::setSpeed(float)>
c0022252:	83 c4 08             	add    esp,0x8
c0022255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022259:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002225d:	89 10                	mov    DWORD PTR [eax],edx
c002225f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022263:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022267:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002226a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022272:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022275:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002227a:	75 23                	jne    c002229f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002227c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022280:	8b 10                	mov    edx,DWORD PTR [eax]
c0022282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022289:	0f af c2             	imul   eax,edx
c002228c:	85 c0                	test   eax,eax
c002228e:	79 03                	jns    c0022293 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022290:	83 c0 03             	add    eax,0x3
c0022293:	c1 f8 02             	sar    eax,0x2
c0022296:	05 a0 0f 00 00       	add    eax,0xfa0
c002229b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002229f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222a7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ae:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222c7:	c1 e0 02             	shl    eax,0x2
c00222ca:	83 ec 0c             	sub    esp,0xc
c00222cd:	50                   	push   eax
c00222ce:	e8 6d d5 fe ff       	call   c000f840 <malloc>
c00222d3:	83 c4 10             	add    esp,0x10
c00222d6:	89 c2                	mov    edx,eax
c00222d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222df:	83 ec 04             	sub    esp,0x4
c00222e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222e6:	50                   	push   eax
c00222e7:	6a 01                	push   0x1
c00222e9:	6a 04                	push   0x4
c00222eb:	e8 af 68 fe ff       	call   c0008b9f <src_new>
c00222f0:	83 c4 10             	add    esp,0x10
c00222f3:	89 c2                	mov    edx,eax
c00222f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022300:	85 c0                	test   eax,eax
c0022302:	74 10                	je     c0022314 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022304:	83 ec 0c             	sub    esp,0xc
c0022307:	68 08 cb 02 c0       	push   0xc002cb08
c002230c:	e8 a2 82 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0022311:	83 c4 10             	add    esp,0x10
c0022314:	a0 e0 28 03 c0       	mov    al,ds:0xc00328e0
c0022319:	83 f0 01             	xor    eax,0x1
c002231c:	84 c0                	test   al,al
c002231e:	74 57                	je     c0022377 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022320:	a1 28 cb 02 c0       	mov    eax,ds:0xc002cb28
c0022325:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022329:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022331:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022339:	7f 35                	jg     c0022370 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002233b:	83 ec 0c             	sub    esp,0xc
c002233e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022342:	e8 a0 4f 00 00       	call   c00272e7 <__floatsisf>
c0022347:	83 c4 10             	add    esp,0x10
c002234a:	8b 15 28 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb28
c0022350:	83 ec 08             	sub    esp,0x8
c0022353:	52                   	push   edx
c0022354:	50                   	push   eax
c0022355:	e8 9f 4b 00 00       	call   c0026ef9 <__mulsf3>
c002235a:	83 c4 10             	add    esp,0x10
c002235d:	89 c2                	mov    edx,eax
c002235f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022363:	89 14 85 e0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb20],edx
c002236a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002236e:	eb c1                	jmp    c0022331 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022370:	c6 05 e0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328e0,0x1
c0022377:	90                   	nop
c0022378:	83 c4 1c             	add    esp,0x1c
c002237b:	c3                   	ret    

c002237c <SoundChannel::play()>:
c002237c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022380:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022384:	c3                   	ret    
c0022385:	90                   	nop

c0022386 <SoundChannel::paused()>:
c0022386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002238d:	c3                   	ret    

c002238e <SoundChannel::getSampleRate()>:
c002238e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022392:	8b 00                	mov    eax,DWORD PTR [eax]
c0022394:	c3                   	ret    
c0022395:	90                   	nop

c0022396 <SoundChannel::getBits()>:
c0022396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002239d:	c3                   	ret    

c002239e <SoundChannel::getBufferUsed()>:
c002239e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223a5:	c3                   	ret    

c00223a6 <SoundChannel::getBufferSize()>:
c00223a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223aa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223ad:	c3                   	ret    

c00223ae <SoundChannel::unbuffer(float*, int, int)>:
c00223ae:	56                   	push   esi
c00223af:	53                   	push   ebx
c00223b0:	83 ec 40             	sub    esp,0x40
c00223b3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223be:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223d9:	e8 09 4f 00 00       	call   c00272e7 <__floatsisf>
c00223de:	5a                   	pop    edx
c00223df:	89 c6                	mov    esi,eax
c00223e1:	ff 33                	push   DWORD PTR [ebx]
c00223e3:	e8 ff 4e 00 00       	call   c00272e7 <__floatsisf>
c00223e8:	59                   	pop    ecx
c00223e9:	5a                   	pop    edx
c00223ea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223ed:	50                   	push   eax
c00223ee:	e8 06 4b 00 00       	call   c0026ef9 <__mulsf3>
c00223f3:	59                   	pop    ecx
c00223f4:	5a                   	pop    edx
c00223f5:	50                   	push   eax
c00223f6:	56                   	push   esi
c00223f7:	e8 c0 4c 00 00       	call   c00270bc <__divsf3>
c00223fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00223ff:	e8 b3 61 00 00       	call   c00285b7 <__extendsfdf2>
c0022404:	59                   	pop    ecx
c0022405:	5e                   	pop    esi
c0022406:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002240a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002240e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022416:	8d 44 24 14          	lea    eax,[esp+0x14]
c002241a:	50                   	push   eax
c002241b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002241e:	e8 71 63 fe ff       	call   c0008794 <src_process>
c0022423:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022427:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002242a:	83 c4 0c             	add    esp,0xc
c002242d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022430:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022433:	29 d0                	sub    eax,edx
c0022435:	c1 e0 02             	shl    eax,0x2
c0022438:	50                   	push   eax
c0022439:	8d 04 91             	lea    eax,[ecx+edx*4]
c002243c:	50                   	push   eax
c002243d:	51                   	push   ecx
c002243e:	e8 39 e2 fd ff       	call   c000067c <memmove>
c0022443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022447:	83 c4 44             	add    esp,0x44
c002244a:	5b                   	pop    ebx
c002244b:	5e                   	pop    esi
c002244c:	c3                   	ret    
c002244d:	90                   	nop

c002244e <SoundChannel::buffer8(unsigned char*, int)>:
c002244e:	55                   	push   ebp
c002244f:	57                   	push   edi
c0022450:	56                   	push   esi
c0022451:	53                   	push   ebx
c0022452:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022456:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002245a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002245d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022461:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022464:	74 7a                	je     c00224e0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022466:	85 ff                	test   edi,edi
c0022468:	7e 76                	jle    c00224e0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002246a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002246e:	8d 70 01             	lea    esi,[eax+0x1]
c0022471:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022474:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022477:	8b 1c 9d e0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb20]
c002247e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022481:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022484:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022487:	74 5e                	je     c00224e7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022489:	83 ff 01             	cmp    edi,0x1
c002248c:	74 4b                	je     c00224d9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002248e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022492:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022495:	8d 70 01             	lea    esi,[eax+0x1]
c0022498:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002249b:	8b 1c 9d e0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb20]
c00224a2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224a5:	b8 02 00 00 00       	mov    eax,0x2
c00224aa:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224ad:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224b0:	75 23                	jne    c00224d5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224b2:	eb 27                	jmp    c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224b4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224b9:	8d 71 01             	lea    esi,[ecx+0x1]
c00224bc:	40                   	inc    eax
c00224bd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224c0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224c3:	8b 1c 9d e0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb20]
c00224ca:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224cd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224d0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d3:	74 06                	je     c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224d5:	39 c7                	cmp    edi,eax
c00224d7:	75 db                	jne    c00224b4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224d9:	89 f8                	mov    eax,edi
c00224db:	5b                   	pop    ebx
c00224dc:	5e                   	pop    esi
c00224dd:	5f                   	pop    edi
c00224de:	5d                   	pop    ebp
c00224df:	c3                   	ret    
c00224e0:	5b                   	pop    ebx
c00224e1:	31 c0                	xor    eax,eax
c00224e3:	5e                   	pop    esi
c00224e4:	5f                   	pop    edi
c00224e5:	5d                   	pop    ebp
c00224e6:	c3                   	ret    
c00224e7:	b8 01 00 00 00       	mov    eax,0x1
c00224ec:	eb ed                	jmp    c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224ee <SoundDevice::SoundDevice(char const*)>:
c00224ee:	83 ec 1c             	sub    esp,0x1c
c00224f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f5:	83 ec 08             	sub    esp,0x8
c00224f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224fc:	50                   	push   eax
c00224fd:	e8 26 20 ff ff       	call   c0014528 <Device::Device(char const*)>
c0022502:	83 c4 10             	add    esp,0x10
c0022505:	ba 34 cb 02 c0       	mov    edx,0xc002cb34
c002250a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250e:	89 10                	mov    DWORD PTR [eax],edx
c0022510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022514:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002251e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022522:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002252c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022534:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022539:	7f 19                	jg     c0022554 <SoundDevice::SoundDevice(char const*)+0x66>
c002253b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022543:	83 c2 54             	add    edx,0x54
c0022546:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002254e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022552:	eb e0                	jmp    c0022534 <SoundDevice::SoundDevice(char const*)+0x46>
c0022554:	90                   	nop
c0022555:	83 c4 1c             	add    esp,0x1c
c0022558:	c3                   	ret    
c0022559:	90                   	nop

c002255a <SoundDevice::~SoundDevice()>:
c002255a:	53                   	push   ebx
c002255b:	83 ec 18             	sub    esp,0x18
c002255e:	ba 34 cb 02 c0       	mov    edx,0xc002cb34
c0022563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022567:	89 10                	mov    DWORD PTR [eax],edx
c0022569:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022571:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022576:	7f 46                	jg     c00225be <SoundDevice::~SoundDevice()+0x64>
c0022578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022580:	83 c2 54             	add    edx,0x54
c0022583:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022587:	85 c0                	test   eax,eax
c0022589:	74 2d                	je     c00225b8 <SoundDevice::~SoundDevice()+0x5e>
c002258b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022593:	83 c2 54             	add    edx,0x54
c0022596:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002259a:	85 db                	test   ebx,ebx
c002259c:	74 1a                	je     c00225b8 <SoundDevice::~SoundDevice()+0x5e>
c002259e:	83 ec 0c             	sub    esp,0xc
c00225a1:	53                   	push   ebx
c00225a2:	e8 21 fc ff ff       	call   c00221c8 <SoundChannel::~SoundChannel()>
c00225a7:	83 c4 10             	add    esp,0x10
c00225aa:	83 ec 08             	sub    esp,0x8
c00225ad:	6a 2c                	push   0x2c
c00225af:	53                   	push   ebx
c00225b0:	e8 7d 08 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00225b5:	83 c4 10             	add    esp,0x10
c00225b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225bc:	eb b3                	jmp    c0022571 <SoundDevice::~SoundDevice()+0x17>
c00225be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c2:	83 ec 0c             	sub    esp,0xc
c00225c5:	50                   	push   eax
c00225c6:	e8 3f 1c ff ff       	call   c001420a <Device::~Device()>
c00225cb:	83 c4 10             	add    esp,0x10
c00225ce:	90                   	nop
c00225cf:	83 c4 18             	add    esp,0x18
c00225d2:	5b                   	pop    ebx
c00225d3:	c3                   	ret    

c00225d4 <SoundDevice::~SoundDevice()>:
c00225d4:	83 ec 0c             	sub    esp,0xc
c00225d7:	83 ec 0c             	sub    esp,0xc
c00225da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225de:	e8 77 ff ff ff       	call   c002255a <SoundDevice::~SoundDevice()>
c00225e3:	83 c4 10             	add    esp,0x10
c00225e6:	83 ec 08             	sub    esp,0x8
c00225e9:	68 e4 01 00 00       	push   0x1e4
c00225ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f2:	e8 3b 08 ff ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00225f7:	83 c4 10             	add    esp,0x10
c00225fa:	83 c4 0c             	add    esp,0xc
c00225fd:	c3                   	ret    

c00225fe <SoundDevice::getFreeChannelNum()>:
c00225fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022602:	31 c0                	xor    eax,eax
c0022604:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002260c:	74 09                	je     c0022617 <SoundDevice::getFreeChannelNum()+0x19>
c002260e:	40                   	inc    eax
c002260f:	83 f8 20             	cmp    eax,0x20
c0022612:	75 f0                	jne    c0022604 <SoundDevice::getFreeChannelNum()+0x6>
c0022614:	83 c8 ff             	or     eax,0xffffffff
c0022617:	c3                   	ret    

c0022618 <SoundDevice::addChannel(SoundChannel*)>:
c0022618:	56                   	push   esi
c0022619:	53                   	push   ebx
c002261a:	51                   	push   ecx
c002261b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002261f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022623:	53                   	push   ebx
c0022624:	e8 d5 ff ff ff       	call   c00225fe <SoundDevice::getFreeChannelNum()>
c0022629:	5a                   	pop    edx
c002262a:	83 f8 ff             	cmp    eax,0xffffffff
c002262d:	74 51                	je     c0022680 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002262f:	85 f6                	test   esi,esi
c0022631:	74 4d                	je     c0022680 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022633:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002263a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022641:	75 30                	jne    c0022673 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022643:	83 ec 0c             	sub    esp,0xc
c0022646:	56                   	push   esi
c0022647:	e8 42 fd ff ff       	call   c002238e <SoundChannel::getSampleRate()>
c002264c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022652:	89 34 24             	mov    DWORD PTR [esp],esi
c0022655:	e8 3c fd ff ff       	call   c0022396 <SoundChannel::getBits()>
c002265a:	83 c4 0c             	add    esp,0xc
c002265d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022663:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022665:	50                   	push   eax
c0022666:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002266c:	53                   	push   ebx
c002266d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022670:	83 c4 10             	add    esp,0x10
c0022673:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022679:	b8 01 00 00 00       	mov    eax,0x1
c002267e:	eb 03                	jmp    c0022683 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022680:	83 c8 ff             	or     eax,0xffffffff
c0022683:	5a                   	pop    edx
c0022684:	5b                   	pop    ebx
c0022685:	5e                   	pop    esi
c0022686:	c3                   	ret    
c0022687:	90                   	nop

c0022688 <SoundDevice::removeChannel(int)>:
c0022688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002268c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022690:	83 fa 1f             	cmp    edx,0x1f
c0022693:	77 23                	ja     c00226b8 <SoundDevice::removeChannel(int)+0x30>
c0022695:	8d 14 90             	lea    edx,[eax+edx*4]
c0022698:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002269f:	74 17                	je     c00226b8 <SoundDevice::removeChannel(int)+0x30>
c00226a1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226ab:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226b1:	75 05                	jne    c00226b8 <SoundDevice::removeChannel(int)+0x30>
c00226b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00226b5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226b8:	c3                   	ret    
c00226b9:	90                   	nop

c00226ba <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226ba:	57                   	push   edi
c00226bb:	56                   	push   esi
c00226bc:	53                   	push   ebx
c00226bd:	31 db                	xor    ebx,ebx
c00226bf:	83 ec 10             	sub    esp,0x10
c00226c2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226c6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226ca:	0f 8d cb 00 00 00    	jge    c002279b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226d7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226da:	e8 d8 5e 00 00       	call   c00285b7 <__extendsfdf2>
c00226df:	83 c4 10             	add    esp,0x10
c00226e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226ea:	68 00 00 f0 3f       	push   0x3ff00000
c00226ef:	6a 00                	push   0x0
c00226f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f9:	e8 45 4e 00 00       	call   c0027543 <__adddf3>
c00226fe:	83 c4 10             	add    esp,0x10
c0022701:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022705:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022709:	68 00 00 e0 3f       	push   0x3fe00000
c002270e:	6a 00                	push   0x0
c0022710:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022718:	e8 a3 54 00 00       	call   c0027bc0 <__muldf3>
c002271d:	83 c4 10             	add    esp,0x10
c0022720:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022724:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022728:	68 00 00 60 40       	push   0x40600000
c002272d:	6a 00                	push   0x0
c002272f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022737:	e8 84 54 00 00       	call   c0027bc0 <__muldf3>
c002273c:	59                   	pop    ecx
c002273d:	5f                   	pop    edi
c002273e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022742:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274e:	e8 40 5d 00 00       	call   c0028493 <__truncdfsf2>
c0022753:	5a                   	pop    edx
c0022754:	89 c7                	mov    edi,eax
c0022756:	59                   	pop    ecx
c0022757:	68 00 00 fe 42       	push   0x42fe0000
c002275c:	50                   	push   eax
c002275d:	e8 db 4d 00 00       	call   c002753d <__gesf2>
c0022762:	83 c4 10             	add    esp,0x10
c0022765:	85 c0                	test   eax,eax
c0022767:	78 06                	js     c002276f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022769:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002276d:	eb 26                	jmp    c0022795 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002276f:	50                   	push   eax
c0022770:	50                   	push   eax
c0022771:	6a 00                	push   0x0
c0022773:	57                   	push   edi
c0022774:	e8 c8 4d 00 00       	call   c0027541 <__lesf2>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	85 c0                	test   eax,eax
c002277e:	7f 06                	jg     c0022786 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022780:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022784:	eb 0f                	jmp    c0022795 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022786:	83 ec 0c             	sub    esp,0xc
c0022789:	57                   	push   edi
c002278a:	e8 bd 5e 00 00       	call   c002864c <lrintf>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022795:	43                   	inc    ebx
c0022796:	e9 2b ff ff ff       	jmp    c00226c6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	5b                   	pop    ebx
c002279f:	5e                   	pop    esi
c00227a0:	5f                   	pop    edi
c00227a1:	c3                   	ret    

c00227a2 <SoundDevice::getAudio(int, float*, float*)>:
c00227a2:	55                   	push   ebp
c00227a3:	57                   	push   edi
c00227a4:	56                   	push   esi
c00227a5:	53                   	push   ebx
c00227a6:	31 db                	xor    ebx,ebx
c00227a8:	83 ec 20             	sub    esp,0x20
c00227ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227b3:	c1 e0 02             	shl    eax,0x2
c00227b6:	50                   	push   eax
c00227b7:	6a 00                	push   0x0
c00227b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227bd:	e8 b6 df fd ff       	call   c0000778 <memset>
c00227c2:	83 c4 10             	add    esp,0x10
c00227c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227c9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227d0:	85 c0                	test   eax,eax
c00227d2:	0f 84 d7 00 00 00    	je     c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227d8:	83 ec 0c             	sub    esp,0xc
c00227db:	50                   	push   eax
c00227dc:	e8 a5 fb ff ff       	call   c0022386 <SoundChannel::paused()>
c00227e1:	83 c4 10             	add    esp,0x10
c00227e4:	84 c0                	test   al,al
c00227e6:	0f 85 c3 00 00 00    	jne    c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227ec:	83 ec 0c             	sub    esp,0xc
c00227ef:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227f6:	e8 19 fa ff ff       	call   c0022214 <SoundChannel::getVolume()>
c00227fb:	83 c4 10             	add    esp,0x10
c00227fe:	85 c0                	test   eax,eax
c0022800:	0f 84 a9 00 00 00    	je     c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022806:	83 ec 0c             	sub    esp,0xc
c0022809:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022810:	e8 ff f9 ff ff       	call   c0022214 <SoundChannel::getVolume()>
c0022815:	83 ec 0c             	sub    esp,0xc
c0022818:	50                   	push   eax
c0022819:	e8 c9 4a 00 00       	call   c00272e7 <__floatsisf>
c002281e:	59                   	pop    ecx
c002281f:	5d                   	pop    ebp
c0022820:	31 ed                	xor    ebp,ebp
c0022822:	68 00 00 c8 42       	push   0x42c80000
c0022827:	50                   	push   eax
c0022828:	e8 8f 48 00 00       	call   c00270bc <__divsf3>
c002282d:	83 c4 10             	add    esp,0x10
c0022830:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022834:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022838:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002283e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022842:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022849:	e8 60 fb ff ff       	call   c00223ae <SoundChannel::unbuffer(float*, int, int)>
c002284e:	83 c4 20             	add    esp,0x20
c0022851:	89 c1                	mov    ecx,eax
c0022853:	39 cd                	cmp    ebp,ecx
c0022855:	7d 52                	jge    c00228a9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022857:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002285b:	50                   	push   eax
c002285c:	50                   	push   eax
c002285d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022861:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022864:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022868:	e8 8c 46 00 00       	call   c0026ef9 <__mulsf3>
c002286d:	5a                   	pop    edx
c002286e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022872:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022878:	e8 6a 4a 00 00       	call   c00272e7 <__floatsisf>
c002287d:	59                   	pop    ecx
c002287e:	5a                   	pop    edx
c002287f:	50                   	push   eax
c0022880:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022884:	e8 33 48 00 00       	call   c00270bc <__divsf3>
c0022889:	59                   	pop    ecx
c002288a:	5a                   	pop    edx
c002288b:	50                   	push   eax
c002288c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022890:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022893:	e8 3e 43 00 00       	call   c0026bd6 <__addsf3>
c0022898:	83 c4 10             	add    esp,0x10
c002289b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002289f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228a3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228a6:	45                   	inc    ebp
c00228a7:	eb aa                	jmp    c0022853 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228a9:	39 cf                	cmp    edi,ecx
c00228ab:	7e 02                	jle    c00228af <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ad:	89 cf                	mov    edi,ecx
c00228af:	43                   	inc    ebx
c00228b0:	83 fb 20             	cmp    ebx,0x20
c00228b3:	0f 85 10 ff ff ff    	jne    c00227c9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228b9:	83 c4 1c             	add    esp,0x1c
c00228bc:	89 f8                	mov    eax,edi
c00228be:	5b                   	pop    ebx
c00228bf:	5e                   	pop    esi
c00228c0:	5f                   	pop    edi
c00228c1:	5d                   	pop    ebp
c00228c2:	c3                   	ret    
c00228c3:	90                   	nop

c00228c4 <PCI::open(int, int, void*)>:
c00228c4:	83 ec 18             	sub    esp,0x18
c00228c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00228cd:	50                   	push   eax
c00228ce:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228d1:	31 c0                	xor    eax,eax
c00228d3:	83 c4 1c             	add    esp,0x1c
c00228d6:	c3                   	ret    
c00228d7:	90                   	nop

c00228d8 <PCI::close(int, int, void*)>:
c00228d8:	31 c0                	xor    eax,eax
c00228da:	c3                   	ret    
c00228db:	90                   	nop

c00228dc <PCI::PCI()>:
c00228dc:	83 ec 0c             	sub    esp,0xc
c00228df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e3:	83 ec 08             	sub    esp,0x8
c00228e6:	68 64 cb 02 c0       	push   0xc002cb64
c00228eb:	50                   	push   eax
c00228ec:	e8 bb 12 ff ff       	call   c0013bac <Bus::Bus(char const*)>
c00228f1:	83 c4 10             	add    esp,0x10
c00228f4:	ba d0 cb 02 c0       	mov    edx,0xc002cbd0
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	89 10                	mov    DWORD PTR [eax],edx
c00228ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022903:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022909:	0f b6 d0             	movzx  edx,al
c002290c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022910:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022921:	0f b6 d0             	movzx  edx,al
c0022924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022928:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002292d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022931:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022937:	8d 50 01             	lea    edx,[eax+0x1]
c002293a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002293e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022944:	0f b6 d0             	movzx  edx,al
c0022947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002294f:	83 c9 c0             	or     ecx,0xffffffc0
c0022952:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022956:	90                   	nop
c0022957:	83 c4 0c             	add    esp,0xc
c002295a:	c3                   	ret    
c002295b:	90                   	nop

c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002295c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022965:	89 ca                	mov    edx,ecx
c0022967:	c1 e0 10             	shl    eax,0x10
c002296a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022970:	09 d0                	or     eax,edx
c0022972:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022977:	c1 e2 08             	shl    edx,0x8
c002297a:	09 d0                	or     eax,edx
c002297c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022981:	c1 e2 0b             	shl    edx,0xb
c0022984:	09 d0                	or     eax,edx
c0022986:	ba f8 0c 00 00       	mov    edx,0xcf8
c002298b:	0d 00 00 00 80       	or     eax,0x80000000
c0022990:	ef                   	out    dx,eax
c0022991:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022996:	ed                   	in     eax,dx
c0022997:	83 e1 02             	and    ecx,0x2
c002299a:	0f b6 c9             	movzx  ecx,cl
c002299d:	c1 e1 03             	shl    ecx,0x3
c00229a0:	d3 e8                	shr    eax,cl
c00229a2:	c3                   	ret    
c00229a3:	90                   	nop

c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229a4:	6a 00                	push   0x0
c00229a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ab:	50                   	push   eax
c00229ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b1:	50                   	push   eax
c00229b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b7:	50                   	push   eax
c00229b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229bc:	e8 9b ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c1:	83 c4 14             	add    esp,0x14
c00229c4:	c3                   	ret    
c00229c5:	90                   	nop

c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229c6:	6a 0e                	push   0xe
c00229c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cd:	50                   	push   eax
c00229ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d3:	50                   	push   eax
c00229d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d9:	50                   	push   eax
c00229da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229de:	e8 79 ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e3:	83 c4 14             	add    esp,0x14
c00229e6:	0f b6 c0             	movzx  eax,al
c00229e9:	c3                   	ret    

c00229ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229ea:	55                   	push   ebp
c00229eb:	57                   	push   edi
c00229ec:	56                   	push   esi
c00229ed:	53                   	push   ebx
c00229ee:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229f3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229f8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229fd:	6a 0a                	push   0xa
c00229ff:	56                   	push   esi
c0022a00:	55                   	push   ebp
c0022a01:	57                   	push   edi
c0022a02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a06:	e8 51 ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a0b:	6a 0a                	push   0xa
c0022a0d:	89 c3                	mov    ebx,eax
c0022a0f:	56                   	push   esi
c0022a10:	0f b6 db             	movzx  ebx,bl
c0022a13:	55                   	push   ebp
c0022a14:	57                   	push   edi
c0022a15:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a19:	e8 3e ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a1e:	83 c4 28             	add    esp,0x28
c0022a21:	25 00 ff 00 00       	and    eax,0xff00
c0022a26:	09 d8                	or     eax,ebx
c0022a28:	5b                   	pop    ebx
c0022a29:	5e                   	pop    esi
c0022a2a:	5f                   	pop    edi
c0022a2b:	5d                   	pop    ebp
c0022a2c:	c3                   	ret    
c0022a2d:	90                   	nop

c0022a2e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a2e:	6a 08                	push   0x8
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3b:	50                   	push   eax
c0022a3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a41:	50                   	push   eax
c0022a42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a46:	e8 11 ff ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4b:	83 c4 14             	add    esp,0x14
c0022a4e:	0f b6 c4             	movzx  eax,ah
c0022a51:	c3                   	ret    

c0022a52 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a52:	6a 08                	push   0x8
c0022a54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a59:	50                   	push   eax
c0022a5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5f:	50                   	push   eax
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6a:	e8 ed fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6f:	83 c4 14             	add    esp,0x14
c0022a72:	c3                   	ret    
c0022a73:	90                   	nop

c0022a74 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a74:	6a 3c                	push   0x3c
c0022a76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7b:	50                   	push   eax
c0022a7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a81:	50                   	push   eax
c0022a82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a87:	50                   	push   eax
c0022a88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8c:	e8 cb fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a91:	83 c4 14             	add    esp,0x14
c0022a94:	c3                   	ret    
c0022a95:	90                   	nop

c0022a96 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a96:	6a 18                	push   0x18
c0022a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9d:	50                   	push   eax
c0022a9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa3:	50                   	push   eax
c0022aa4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa9:	50                   	push   eax
c0022aaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aae:	e8 a9 fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab3:	83 c4 14             	add    esp,0x14
c0022ab6:	0f b6 c4             	movzx  eax,ah
c0022ab9:	c3                   	ret    

c0022aba <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aba:	55                   	push   ebp
c0022abb:	57                   	push   edi
c0022abc:	56                   	push   esi
c0022abd:	53                   	push   ebx
c0022abe:	50                   	push   eax
c0022abf:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ac3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022ac8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022acd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022ad2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ad9:	8d 43 12             	lea    eax,[ebx+0x12]
c0022adc:	83 c3 10             	add    ebx,0x10
c0022adf:	0f b6 c0             	movzx  eax,al
c0022ae2:	0f b6 db             	movzx  ebx,bl
c0022ae5:	50                   	push   eax
c0022ae6:	51                   	push   ecx
c0022ae7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022aeb:	57                   	push   edi
c0022aec:	55                   	push   ebp
c0022aed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022af1:	e8 66 fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af6:	53                   	push   ebx
c0022af7:	89 c6                	mov    esi,eax
c0022af9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022afd:	c1 e6 10             	shl    esi,0x10
c0022b00:	51                   	push   ecx
c0022b01:	57                   	push   edi
c0022b02:	55                   	push   ebp
c0022b03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b07:	e8 50 fe ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0c:	83 c4 2c             	add    esp,0x2c
c0022b0f:	0f b7 c0             	movzx  eax,ax
c0022b12:	5b                   	pop    ebx
c0022b13:	09 f0                	or     eax,esi
c0022b15:	5e                   	pop    esi
c0022b16:	5f                   	pop    edi
c0022b17:	5d                   	pop    ebp
c0022b18:	c3                   	ret    
c0022b19:	90                   	nop

c0022b1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b1a:	53                   	push   ebx
c0022b1b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b20:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b29:	c1 e1 10             	shl    ecx,0x10
c0022b2c:	25 fc 00 00 00       	and    eax,0xfc
c0022b31:	09 c1                	or     ecx,eax
c0022b33:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b38:	c1 e0 08             	shl    eax,0x8
c0022b3b:	09 c1                	or     ecx,eax
c0022b3d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b42:	c1 e0 0b             	shl    eax,0xb
c0022b45:	09 c1                	or     ecx,eax
c0022b47:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b4d:	89 c8                	mov    eax,ecx
c0022b4f:	ef                   	out    dx,eax
c0022b50:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b55:	ed                   	in     eax,dx
c0022b56:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b5b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b60:	74 0a                	je     c0022b6c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b62:	0f b7 d8             	movzx  ebx,ax
c0022b65:	89 d0                	mov    eax,edx
c0022b67:	c1 e0 10             	shl    eax,0x10
c0022b6a:	eb 05                	jmp    c0022b71 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b6c:	66 31 c0             	xor    ax,ax
c0022b6f:	89 d3                	mov    ebx,edx
c0022b71:	09 c3                	or     ebx,eax
c0022b73:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b78:	89 c8                	mov    eax,ecx
c0022b7a:	ef                   	out    dx,eax
c0022b7b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b80:	89 d8                	mov    eax,ebx
c0022b82:	ef                   	out    dx,eax
c0022b83:	5b                   	pop    ebx
c0022b84:	c3                   	ret    
c0022b85:	90                   	nop

c0022b86 <PCI::checkBus(unsigned char)>:
c0022b86:	56                   	push   esi
c0022b87:	53                   	push   ebx
c0022b88:	31 db                	xor    ebx,ebx
c0022b8a:	51                   	push   ecx
c0022b8b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b90:	52                   	push   edx
c0022b91:	53                   	push   ebx
c0022b92:	43                   	inc    ebx
c0022b93:	56                   	push   esi
c0022b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b98:	e8 2b 03 00 00       	call   c0022ec8 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b9d:	83 c4 10             	add    esp,0x10
c0022ba0:	83 fb 20             	cmp    ebx,0x20
c0022ba3:	75 eb                	jne    c0022b90 <PCI::checkBus(unsigned char)+0xa>
c0022ba5:	58                   	pop    eax
c0022ba6:	5b                   	pop    ebx
c0022ba7:	5e                   	pop    esi
c0022ba8:	c3                   	ret    
c0022ba9:	90                   	nop

c0022baa <PCI::foundDevice(PCIDeviceInfo)>:
c0022baa:	55                   	push   ebp
c0022bab:	57                   	push   edi
c0022bac:	56                   	push   esi
c0022bad:	53                   	push   ebx
c0022bae:	83 ec 1c             	sub    esp,0x1c
c0022bb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bb5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bbb:	0f 84 52 01 00 00    	je     c0022d13 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bc1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bc5:	66 81 f9 06 04       	cmp    cx,0x406
c0022bca:	75 2c                	jne    c0022bf8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bcc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bd1:	50                   	push   eax
c0022bd2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bd7:	50                   	push   eax
c0022bd8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bdd:	50                   	push   eax
c0022bde:	56                   	push   esi
c0022bdf:	e8 b2 fe ff ff       	call   c0022a96 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022be4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022be8:	0f b6 c0             	movzx  eax,al
c0022beb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bef:	83 c4 2c             	add    esp,0x2c
c0022bf2:	5b                   	pop    ebx
c0022bf3:	5e                   	pop    esi
c0022bf4:	5f                   	pop    edi
c0022bf5:	5d                   	pop    ebp
c0022bf6:	eb 8e                	jmp    c0022b86 <PCI::checkBus(unsigned char)>
c0022bf8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bfc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c06:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c0a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c0e:	88 d3                	mov    bl,dl
c0022c10:	85 c0                	test   eax,eax
c0022c12:	74 33                	je     c0022c47 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c17:	85 d2                	test   edx,edx
c0022c19:	74 28                	je     c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c1b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c21:	31 ef                	xor    edi,ebp
c0022c23:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c29:	75 18                	jne    c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c2f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c35:	75 0c                	jne    c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c37:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c3d:	0f 84 d0 00 00 00    	je     c0022d13 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c45:	eb c9                	jmp    c0022c10 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c47:	66 81 f9 01 06       	cmp    cx,0x601
c0022c4c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c50:	75 19                	jne    c0022c6b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c52:	83 ec 0c             	sub    esp,0xc
c0022c55:	68 64 01 00 00       	push   0x164
c0022c5a:	e8 e1 cb fe ff       	call   c000f840 <malloc>
c0022c5f:	89 c5                	mov    ebp,eax
c0022c61:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c64:	e8 95 0f 00 00       	call   c0023bfe <SATABus::SATABus()>
c0022c69:	eb 1e                	jmp    c0022c89 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c6b:	66 81 f9 01 01       	cmp    cx,0x101
c0022c70:	75 60                	jne    c0022cd2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c72:	83 ec 0c             	sub    esp,0xc
c0022c75:	68 70 02 00 00       	push   0x270
c0022c7a:	e8 c1 cb fe ff       	call   c000f840 <malloc>
c0022c7f:	89 c5                	mov    ebp,eax
c0022c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c84:	e8 03 03 00 00       	call   c0022f8c <IDE::IDE()>
c0022c89:	58                   	pop    eax
c0022c8a:	5a                   	pop    edx
c0022c8b:	55                   	push   ebp
c0022c8c:	56                   	push   esi
c0022c8d:	e8 a6 16 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0022c92:	83 ec 1c             	sub    esp,0x1c
c0022c95:	b9 09 00 00 00       	mov    ecx,0x9
c0022c9a:	fc                   	cld    
c0022c9b:	89 e7                	mov    edi,esp
c0022c9d:	89 de                	mov    esi,ebx
c0022c9f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ca1:	55                   	push   ebp
c0022ca2:	e8 9b 15 ff ff       	call   c0014242 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022caa:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cae:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cb6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cbe:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cc9:	83 c4 4c             	add    esp,0x4c
c0022ccc:	5b                   	pop    ebx
c0022ccd:	5e                   	pop    esi
c0022cce:	5f                   	pop    edi
c0022ccf:	5d                   	pop    ebp
c0022cd0:	ff e0                	jmp    eax
c0022cd2:	83 ec 0c             	sub    esp,0xc
c0022cd5:	68 58 01 00 00       	push   0x158
c0022cda:	e8 61 cb fe ff       	call   c000f840 <malloc>
c0022cdf:	89 c5                	mov    ebp,eax
c0022ce1:	58                   	pop    eax
c0022ce2:	5a                   	pop    edx
c0022ce3:	68 6c cb 02 c0       	push   0xc002cb6c
c0022ce8:	55                   	push   ebp
c0022ce9:	e8 40 19 ff ff       	call   c001462e <DriverlessDevice::DriverlessDevice(char const*)>
c0022cee:	59                   	pop    ecx
c0022cef:	5f                   	pop    edi
c0022cf0:	55                   	push   ebp
c0022cf1:	56                   	push   esi
c0022cf2:	e8 41 16 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0022cf7:	b9 09 00 00 00       	mov    ecx,0x9
c0022cfc:	fc                   	cld    
c0022cfd:	89 df                	mov    edi,ebx
c0022cff:	89 de                	mov    esi,ebx
c0022d01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d03:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d07:	83 c4 2c             	add    esp,0x2c
c0022d0a:	5b                   	pop    ebx
c0022d0b:	5e                   	pop    esi
c0022d0c:	5f                   	pop    edi
c0022d0d:	5d                   	pop    ebp
c0022d0e:	e9 2f 15 ff ff       	jmp    c0014242 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d13:	83 c4 1c             	add    esp,0x1c
c0022d16:	5b                   	pop    ebx
c0022d17:	5e                   	pop    esi
c0022d18:	5f                   	pop    edi
c0022d19:	5d                   	pop    ebp
c0022d1a:	c3                   	ret    
c0022d1b:	90                   	nop

c0022d1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d1c:	55                   	push   ebp
c0022d1d:	57                   	push   edi
c0022d1e:	56                   	push   esi
c0022d1f:	53                   	push   ebx
c0022d20:	83 ec 5c             	sub    esp,0x5c
c0022d23:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d2b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d2f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d38:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d3c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d45:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d4a:	6a 0c                	push   0xc
c0022d4c:	55                   	push   ebp
c0022d4d:	53                   	push   ebx
c0022d4e:	57                   	push   edi
c0022d4f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d56:	e8 01 fc ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d5b:	55                   	push   ebp
c0022d5c:	53                   	push   ebx
c0022d5d:	57                   	push   edi
c0022d5e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d65:	e8 80 fc ff ff       	call   c00229ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d6a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d6f:	83 c4 24             	add    esp,0x24
c0022d72:	55                   	push   ebp
c0022d73:	53                   	push   ebx
c0022d74:	57                   	push   edi
c0022d75:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d79:	e8 f6 fc ff ff       	call   c0022a74 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d7e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d82:	6a 3c                	push   0x3c
c0022d84:	55                   	push   ebp
c0022d85:	53                   	push   ebx
c0022d86:	57                   	push   edi
c0022d87:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d8e:	e8 c9 fb ff ff       	call   c002295c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d93:	0f b6 c4             	movzx  eax,ah
c0022d96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d9a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d9e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022da2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0022da7:	83 c4 24             	add    esp,0x24
c0022daa:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022db0:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022db7:	74 6c                	je     c0022e25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022db9:	31 f6                	xor    esi,esi
c0022dbb:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0022dc1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dc7:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dcd:	7e 56                	jle    c0022e25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dcf:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dd2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dd9:	39 cb                	cmp    ebx,ecx
c0022ddb:	75 45                	jne    c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ddd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022de4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022de8:	75 38                	jne    c0022e22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dea:	83 ec 0c             	sub    esp,0xc
c0022ded:	68 86 cb 02 c0       	push   0xc002cb86
c0022df2:	e8 1b 01 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0022df7:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0022dfd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e03:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e0b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e0f:	52                   	push   edx
c0022e10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e14:	53                   	push   ebx
c0022e15:	68 ab cb 02 c0       	push   0xc002cbab
c0022e1a:	e8 f3 00 ff ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0022e1f:	83 c4 20             	add    esp,0x20
c0022e22:	46                   	inc    esi
c0022e23:	eb 96                	jmp    c0022dbb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e25:	31 d2                	xor    edx,edx
c0022e27:	83 ec 0c             	sub    esp,0xc
c0022e2a:	55                   	push   ebp
c0022e2b:	53                   	push   ebx
c0022e2c:	57                   	push   edi
c0022e2d:	52                   	push   edx
c0022e2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e32:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e39:	e8 7c fc ff ff       	call   c0022aba <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e46:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e4a:	42                   	inc    edx
c0022e4b:	83 c4 20             	add    esp,0x20
c0022e4e:	83 fa 06             	cmp    edx,0x6
c0022e51:	75 d4                	jne    c0022e27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e53:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e57:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e5b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e5f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e63:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e67:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e70:	86 e0                	xchg   al,ah
c0022e72:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e77:	55                   	push   ebp
c0022e78:	53                   	push   ebx
c0022e79:	57                   	push   edi
c0022e7a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e7e:	e8 ab fb ff ff       	call   c0022a2e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e83:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e87:	55                   	push   ebp
c0022e88:	53                   	push   ebx
c0022e89:	57                   	push   edi
c0022e8a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e91:	e8 0e fb ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e96:	83 ec 0c             	sub    esp,0xc
c0022e99:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e9e:	b9 09 00 00 00       	mov    ecx,0x9
c0022ea3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ea7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022eab:	fc                   	cld    
c0022eac:	89 e7                	mov    edi,esp
c0022eae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eb0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eb7:	e8 ee fc ff ff       	call   c0022baa <PCI::foundDevice(PCIDeviceInfo)>
c0022ebc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ec2:	5b                   	pop    ebx
c0022ec3:	5e                   	pop    esi
c0022ec4:	5f                   	pop    edi
c0022ec5:	5d                   	pop    ebp
c0022ec6:	c3                   	ret    
c0022ec7:	90                   	nop

c0022ec8 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ec8:	55                   	push   ebp
c0022ec9:	57                   	push   edi
c0022eca:	56                   	push   esi
c0022ecb:	53                   	push   ebx
c0022ecc:	83 ec 0c             	sub    esp,0xc
c0022ecf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ed3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ed8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022edd:	6a 00                	push   0x0
c0022edf:	56                   	push   esi
c0022ee0:	57                   	push   edi
c0022ee1:	55                   	push   ebp
c0022ee2:	e8 bd fa ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee7:	6a 00                	push   0x0
c0022ee9:	56                   	push   esi
c0022eea:	57                   	push   edi
c0022eeb:	55                   	push   ebp
c0022eec:	e8 2b fe ff ff       	call   c0022d1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ef1:	83 c4 20             	add    esp,0x20
c0022ef4:	6a 00                	push   0x0
c0022ef6:	56                   	push   esi
c0022ef7:	57                   	push   edi
c0022ef8:	55                   	push   ebp
c0022ef9:	e8 c8 fa ff ff       	call   c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022efe:	83 c4 10             	add    esp,0x10
c0022f01:	84 c0                	test   al,al
c0022f03:	79 27                	jns    c0022f2c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f05:	bb 01 00 00 00       	mov    ebx,0x1
c0022f0a:	53                   	push   ebx
c0022f0b:	56                   	push   esi
c0022f0c:	57                   	push   edi
c0022f0d:	55                   	push   ebp
c0022f0e:	e8 91 fa ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f13:	83 c4 10             	add    esp,0x10
c0022f16:	66 40                	inc    ax
c0022f18:	74 0c                	je     c0022f26 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f1a:	53                   	push   ebx
c0022f1b:	56                   	push   esi
c0022f1c:	57                   	push   edi
c0022f1d:	55                   	push   ebp
c0022f1e:	e8 f9 fd ff ff       	call   c0022d1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f23:	83 c4 10             	add    esp,0x10
c0022f26:	43                   	inc    ebx
c0022f27:	83 fb 08             	cmp    ebx,0x8
c0022f2a:	75 de                	jne    c0022f0a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f2c:	83 c4 0c             	add    esp,0xc
c0022f2f:	5b                   	pop    ebx
c0022f30:	5e                   	pop    esi
c0022f31:	5f                   	pop    edi
c0022f32:	5d                   	pop    ebp
c0022f33:	c3                   	ret    

c0022f34 <PCI::detect()>:
c0022f34:	56                   	push   esi
c0022f35:	53                   	push   ebx
c0022f36:	53                   	push   ebx
c0022f37:	31 db                	xor    ebx,ebx
c0022f39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f3d:	6a 00                	push   0x0
c0022f3f:	6a 00                	push   0x0
c0022f41:	6a 00                	push   0x0
c0022f43:	56                   	push   esi
c0022f44:	e8 7d fa ff ff       	call   c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f49:	83 c4 10             	add    esp,0x10
c0022f4c:	a8 80                	test   al,0x80
c0022f4e:	75 21                	jne    c0022f71 <PCI::detect()+0x3d>
c0022f50:	51                   	push   ecx
c0022f51:	51                   	push   ecx
c0022f52:	6a 00                	push   0x0
c0022f54:	56                   	push   esi
c0022f55:	e8 2c fc ff ff       	call   c0022b86 <PCI::checkBus(unsigned char)>
c0022f5a:	83 c4 10             	add    esp,0x10
c0022f5d:	eb 24                	jmp    c0022f83 <PCI::detect()+0x4f>
c0022f5f:	52                   	push   edx
c0022f60:	52                   	push   edx
c0022f61:	53                   	push   ebx
c0022f62:	43                   	inc    ebx
c0022f63:	56                   	push   esi
c0022f64:	e8 1d fc ff ff       	call   c0022b86 <PCI::checkBus(unsigned char)>
c0022f69:	83 c4 10             	add    esp,0x10
c0022f6c:	83 fb 08             	cmp    ebx,0x8
c0022f6f:	74 12                	je     c0022f83 <PCI::detect()+0x4f>
c0022f71:	53                   	push   ebx
c0022f72:	6a 00                	push   0x0
c0022f74:	6a 00                	push   0x0
c0022f76:	56                   	push   esi
c0022f77:	e8 28 fa ff ff       	call   c00229a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f7c:	83 c4 10             	add    esp,0x10
c0022f7f:	66 40                	inc    ax
c0022f81:	74 dc                	je     c0022f5f <PCI::detect()+0x2b>
c0022f83:	58                   	pop    eax
c0022f84:	5b                   	pop    ebx
c0022f85:	5e                   	pop    esi
c0022f86:	c3                   	ret    
c0022f87:	90                   	nop

c0022f88 <IDE::close(int, int, void*)>:
c0022f88:	83 c8 ff             	or     eax,0xffffffff
c0022f8b:	c3                   	ret    

c0022f8c <IDE::IDE()>:
c0022f8c:	83 ec 0c             	sub    esp,0xc
c0022f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f93:	83 ec 08             	sub    esp,0x8
c0022f96:	68 f4 cb 02 c0       	push   0xc002cbf4
c0022f9b:	50                   	push   eax
c0022f9c:	e8 23 17 ff ff       	call   c00146c4 <HardDiskController::HardDiskController(char const*)>
c0022fa1:	83 c4 10             	add    esp,0x10
c0022fa4:	ba 34 ce 02 c0       	mov    edx,0xc002ce34
c0022fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fad:	89 10                	mov    DWORD PTR [eax],edx
c0022faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fba:	90                   	nop
c0022fbb:	83 c4 0c             	add    esp,0xc
c0022fbe:	c3                   	ret    
c0022fbf:	90                   	nop

c0022fc0 <IDE::prepareInterrupt(unsigned char)>:
c0022fc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fc9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fd1:	c3                   	ret    

c0022fd2 <selectDrive(unsigned char, unsigned char)>:
c0022fd2:	c3                   	ret    
c0022fd3:	90                   	nop

c0022fd4 <IDE::getBase(unsigned char)>:
c0022fd4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fe5:	c3                   	ret    

c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fe6:	55                   	push   ebp
c0022fe7:	57                   	push   edi
c0022fe8:	56                   	push   esi
c0022fe9:	53                   	push   ebx
c0022fea:	83 ec 1c             	sub    esp,0x1c
c0022fed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ff8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ffc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023000:	80 f9 03             	cmp    cl,0x3
c0023003:	77 51                	ja     c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023009:	0f b6 f2             	movzx  esi,dl
c002300c:	0f b6 db             	movzx  ebx,bl
c002300f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023012:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023016:	83 ca 80             	or     edx,0xffffff80
c0023019:	0f b6 d2             	movzx  edx,dl
c002301c:	52                   	push   edx
c002301d:	6a 0c                	push   0xc
c002301f:	56                   	push   esi
c0023020:	57                   	push   edi
c0023021:	e8 c0 ff ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023026:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002302b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002302f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023033:	ee                   	out    dx,al
c0023034:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023039:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002303d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023041:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023045:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002304d:	83 c4 2c             	add    esp,0x2c
c0023050:	5b                   	pop    ebx
c0023051:	5e                   	pop    esi
c0023052:	5f                   	pop    edi
c0023053:	5d                   	pop    ebp
c0023054:	eb 90                	jmp    c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023056:	80 fb 07             	cmp    bl,0x7
c0023059:	77 12                	ja     c002306d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002305b:	0f b6 d2             	movzx  edx,dl
c002305e:	0f b6 db             	movzx  ebx,bl
c0023061:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023069:	89 da                	mov    edx,ebx
c002306b:	eb 2f                	jmp    c002309c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002306d:	80 fb 0d             	cmp    bl,0xd
c0023070:	77 13                	ja     c0023085 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023072:	0f b6 d2             	movzx  edx,dl
c0023075:	0f b6 db             	movzx  ebx,bl
c0023078:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002307f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023083:	eb 17                	jmp    c002309c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023085:	80 fb 15             	cmp    bl,0x15
c0023088:	77 13                	ja     c002309d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002308a:	0f b6 d2             	movzx  edx,dl
c002308d:	0f b6 db             	movzx  ebx,bl
c0023090:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023098:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002309c:	ee                   	out    dx,al
c002309d:	83 c4 1c             	add    esp,0x1c
c00230a0:	5b                   	pop    ebx
c00230a1:	5e                   	pop    esi
c00230a2:	5f                   	pop    edi
c00230a3:	5d                   	pop    ebp
c00230a4:	c3                   	ret    
c00230a5:	90                   	nop

c00230a6 <IDE::read(unsigned char, unsigned char)>:
c00230a6:	55                   	push   ebp
c00230a7:	57                   	push   edi
c00230a8:	56                   	push   esi
c00230a9:	53                   	push   ebx
c00230aa:	83 ec 1c             	sub    esp,0x1c
c00230ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230bc:	3c 03                	cmp    al,0x3
c00230be:	77 43                	ja     c0023103 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230c0:	0f b6 f2             	movzx  esi,dl
c00230c3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230c6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230ca:	83 c8 80             	or     eax,0xffffff80
c00230cd:	0f b6 c0             	movzx  eax,al
c00230d0:	50                   	push   eax
c00230d1:	6a 0c                	push   0xc
c00230d3:	56                   	push   esi
c00230d4:	57                   	push   edi
c00230d5:	e8 0c ff ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230da:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230df:	0f b6 c3             	movzx  eax,bl
c00230e2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230e6:	ec                   	in     al,dx
c00230e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230eb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230f0:	52                   	push   edx
c00230f1:	6a 0c                	push   0xc
c00230f3:	56                   	push   esi
c00230f4:	57                   	push   edi
c00230f5:	e8 ec fe ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230fa:	83 c4 20             	add    esp,0x20
c00230fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023101:	eb 49                	jmp    c002314c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023103:	80 fb 07             	cmp    bl,0x7
c0023106:	77 12                	ja     c002311a <IDE::read(unsigned char, unsigned char)+0x74>
c0023108:	0f b6 d2             	movzx  edx,dl
c002310b:	0f b6 c3             	movzx  eax,bl
c002310e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023116:	89 c2                	mov    edx,eax
c0023118:	eb 31                	jmp    c002314b <IDE::read(unsigned char, unsigned char)+0xa5>
c002311a:	80 fb 0d             	cmp    bl,0xd
c002311d:	77 13                	ja     c0023132 <IDE::read(unsigned char, unsigned char)+0x8c>
c002311f:	0f b6 d2             	movzx  edx,dl
c0023122:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023129:	0f b6 d3             	movzx  edx,bl
c002312c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023130:	eb 19                	jmp    c002314b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023132:	31 c0                	xor    eax,eax
c0023134:	80 fb 15             	cmp    bl,0x15
c0023137:	77 13                	ja     c002314c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023139:	0f b6 d2             	movzx  edx,dl
c002313c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023144:	0f b6 d3             	movzx  edx,bl
c0023147:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002314b:	ec                   	in     al,dx
c002314c:	83 c4 1c             	add    esp,0x1c
c002314f:	5b                   	pop    ebx
c0023150:	5e                   	pop    esi
c0023151:	5f                   	pop    edi
c0023152:	5d                   	pop    ebp
c0023153:	c3                   	ret    

c0023154 <IDE::waitInterrupt(unsigned char)>:
c0023154:	55                   	push   ebp
c0023155:	57                   	push   edi
c0023156:	56                   	push   esi
c0023157:	53                   	push   ebx
c0023158:	31 db                	xor    ebx,ebx
c002315a:	83 ec 0c             	sub    esp,0xc
c002315d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023161:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023166:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002316e:	89 e8                	mov    eax,ebp
c0023170:	84 c0                	test   al,al
c0023172:	75 34                	jne    c00231a8 <IDE::waitInterrupt(unsigned char)+0x54>
c0023174:	52                   	push   edx
c0023175:	6a 0c                	push   0xc
c0023177:	56                   	push   esi
c0023178:	57                   	push   edi
c0023179:	e8 28 ff ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002317e:	83 c4 10             	add    esp,0x10
c0023181:	a8 01                	test   al,0x1
c0023183:	75 2b                	jne    c00231b0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023185:	f6 c3 04             	test   bl,0x4
c0023188:	75 16                	jne    c00231a0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002318a:	83 fb 32             	cmp    ebx,0x32
c002318d:	7e 11                	jle    c00231a0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002318f:	50                   	push   eax
c0023190:	50                   	push   eax
c0023191:	6a 00                	push   0x0
c0023193:	68 80 96 98 00       	push   0x989680
c0023198:	e8 8b b1 ff ff       	call   c001e328 <nanoSleep(unsigned long long)>
c002319d:	83 c4 10             	add    esp,0x10
c00231a0:	83 fb 3c             	cmp    ebx,0x3c
c00231a3:	74 0b                	je     c00231b0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a5:	43                   	inc    ebx
c00231a6:	eb be                	jmp    c0023166 <IDE::waitInterrupt(unsigned char)+0x12>
c00231a8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231b0:	83 c4 0c             	add    esp,0xc
c00231b3:	89 e8                	mov    eax,ebp
c00231b5:	5b                   	pop    ebx
c00231b6:	5e                   	pop    esi
c00231b7:	5f                   	pop    edi
c00231b8:	5d                   	pop    ebp
c00231b9:	c3                   	ret    

c00231ba <ideChannel0IRQHandler(regs*, void*)>:
c00231ba:	83 ec 10             	sub    esp,0x10
c00231bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231c1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231c8:	6a 07                	push   0x7
c00231ca:	6a 00                	push   0x0
c00231cc:	50                   	push   eax
c00231cd:	e8 d4 fe ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00231d2:	83 c4 1c             	add    esp,0x1c
c00231d5:	c3                   	ret    

c00231d6 <ideChannel1IRQHandler(regs*, void*)>:
c00231d6:	83 ec 10             	sub    esp,0x10
c00231d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231dd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231e4:	6a 07                	push   0x7
c00231e6:	6a 01                	push   0x1
c00231e8:	50                   	push   eax
c00231e9:	e8 b8 fe ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00231ee:	83 c4 1c             	add    esp,0x1c
c00231f1:	c3                   	ret    

c00231f2 <IDE::enableIRQs(unsigned char, bool)>:
c00231f2:	57                   	push   edi
c00231f3:	56                   	push   esi
c00231f4:	be 04 00 00 00       	mov    esi,0x4
c00231f9:	53                   	push   ebx
c00231fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023203:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023208:	0f 94 c0             	sete   al
c002320b:	d1 e0                	shl    eax,1
c002320d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023214:	0f b6 c0             	movzx  eax,al
c0023217:	50                   	push   eax
c0023218:	6a 0c                	push   0xc
c002321a:	57                   	push   edi
c002321b:	53                   	push   ebx
c002321c:	e8 c5 fd ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023221:	83 c4 10             	add    esp,0x10
c0023224:	50                   	push   eax
c0023225:	6a 0c                	push   0xc
c0023227:	57                   	push   edi
c0023228:	53                   	push   ebx
c0023229:	e8 78 fe ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002322e:	83 c4 10             	add    esp,0x10
c0023231:	4e                   	dec    esi
c0023232:	75 f0                	jne    c0023224 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023234:	5b                   	pop    ebx
c0023235:	5e                   	pop    esi
c0023236:	5f                   	pop    edi
c0023237:	c3                   	ret    

c0023238 <IDE::open(int, int, void*)>:
c0023238:	55                   	push   ebp
c0023239:	57                   	push   edi
c002323a:	56                   	push   esi
c002323b:	53                   	push   ebx
c002323c:	83 ec 1c             	sub    esp,0x1c
c002323f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023243:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002324c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023255:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002325c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023263:	0f 85 b0 02 00 00    	jne    c0023519 <IDE::open(int, int, void*)+0x2e1>
c0023269:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002326f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023273:	83 e0 7f             	and    eax,0x7f
c0023276:	3c 05                	cmp    al,0x5
c0023278:	74 04                	je     c002327e <IDE::open(int, int, void*)+0x46>
c002327a:	3c 0f                	cmp    al,0xf
c002327c:	75 32                	jne    c00232b0 <IDE::open(int, int, void*)+0x78>
c002327e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023284:	83 e0 fc             	and    eax,0xfffffffc
c0023287:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002328e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023294:	83 e0 fc             	and    eax,0xfffffffc
c0023297:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002329e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232a4:	83 e0 fc             	and    eax,0xfffffffc
c00232a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232ae:	eb 14                	jmp    c00232c4 <IDE::open(int, int, void*)+0x8c>
c00232b0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232ba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232c4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232cb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232d6:	89 c6                	mov    esi,eax
c00232d8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232dd:	c1 e6 10             	shl    esi,0x10
c00232e0:	89 e8                	mov    eax,ebp
c00232e2:	89 fa                	mov    edx,edi
c00232e4:	c1 e0 0b             	shl    eax,0xb
c00232e7:	09 f0                	or     eax,esi
c00232e9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232f0:	c1 e6 08             	shl    esi,0x8
c00232f3:	09 c6                	or     esi,eax
c00232f5:	89 f0                	mov    eax,esi
c00232f7:	0d 08 00 00 80       	or     eax,0x80000008
c00232fc:	ef                   	out    dx,eax
c00232fd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023302:	89 ca                	mov    edx,ecx
c0023304:	ed                   	in     eax,dx
c0023305:	c1 e8 10             	shr    eax,0x10
c0023308:	3d ff ff 00 00       	cmp    eax,0xffff
c002330d:	0f 84 f5 00 00 00    	je     c0023408 <IDE::open(int, int, void*)+0x1d0>
c0023313:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023319:	89 fa                	mov    edx,edi
c002331b:	89 f0                	mov    eax,esi
c002331d:	ef                   	out    dx,eax
c002331e:	b0 fe                	mov    al,0xfe
c0023320:	89 ca                	mov    edx,ecx
c0023322:	ee                   	out    dx,al
c0023323:	89 f0                	mov    eax,esi
c0023325:	89 fa                	mov    edx,edi
c0023327:	ef                   	out    dx,eax
c0023328:	89 ca                	mov    edx,ecx
c002332a:	ed                   	in     eax,dx
c002332b:	3c fe                	cmp    al,0xfe
c002332d:	0f 85 a9 00 00 00    	jne    c00233dc <IDE::open(int, int, void*)+0x1a4>
c0023333:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0023339:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023340:	74 33                	je     c0023375 <IDE::open(int, int, void*)+0x13d>
c0023342:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023348:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002334c:	40                   	inc    eax
c002334d:	83 ec 0c             	sub    esp,0xc
c0023350:	0f b6 c0             	movzx  eax,al
c0023353:	50                   	push   eax
c0023354:	55                   	push   ebp
c0023355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023359:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002335f:	51                   	push   ecx
c0023360:	e8 a7 4e ff ff       	call   c001820c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023365:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002336a:	83 c4 1c             	add    esp,0x1c
c002336d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023373:	eb 0a                	jmp    c002337f <IDE::open(int, int, void*)+0x147>
c0023375:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002337f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023386:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002338d:	c1 e1 10             	shl    ecx,0x10
c0023390:	c1 e0 08             	shl    eax,0x8
c0023393:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023398:	09 c1                	or     ecx,eax
c002339a:	89 fa                	mov    edx,edi
c002339c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233a3:	c1 e0 0b             	shl    eax,0xb
c00233a6:	09 c1                	or     ecx,eax
c00233a8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233ae:	89 c8                	mov    eax,ecx
c00233b0:	ef                   	out    dx,eax
c00233b1:	be fc 0c 00 00       	mov    esi,0xcfc
c00233b6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233bc:	89 f2                	mov    edx,esi
c00233be:	ee                   	out    dx,al
c00233bf:	89 c8                	mov    eax,ecx
c00233c1:	89 fa                	mov    edx,edi
c00233c3:	ef                   	out    dx,eax
c00233c4:	89 f2                	mov    edx,esi
c00233c6:	ed                   	in     eax,dx
c00233c7:	0f b6 c0             	movzx  eax,al
c00233ca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233d0:	74 46                	je     c0023418 <IDE::open(int, int, void*)+0x1e0>
c00233d2:	83 ec 0c             	sub    esp,0xc
c00233d5:	68 0c cc 02 c0       	push   0xc002cc0c
c00233da:	eb 34                	jmp    c0023410 <IDE::open(int, int, void*)+0x1d8>
c00233dc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233e5:	75 17                	jne    c00233fe <IDE::open(int, int, void*)+0x1c6>
c00233e7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233ec:	74 07                	je     c00233f5 <IDE::open(int, int, void*)+0x1bd>
c00233ee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233f3:	75 09                	jne    c00233fe <IDE::open(int, int, void*)+0x1c6>
c00233f5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fc:	eb 1a                	jmp    c0023418 <IDE::open(int, int, void*)+0x1e0>
c00233fe:	83 ec 0c             	sub    esp,0xc
c0023401:	68 14 cc 02 c0       	push   0xc002cc14
c0023406:	eb 08                	jmp    c0023410 <IDE::open(int, int, void*)+0x1d8>
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	68 45 cc 02 c0       	push   0xc002cc45
c0023410:	e8 9e 71 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0023415:	83 c4 10             	add    esp,0x10
c0023418:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002341f:	79 1a                	jns    c002343b <IDE::open(int, int, void*)+0x203>
c0023421:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023427:	83 e0 fc             	and    eax,0xfffffffc
c002342a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023431:	83 c0 08             	add    eax,0x8
c0023434:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002343b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023441:	89 c2                	mov    edx,eax
c0023443:	83 e2 0f             	and    edx,0xf
c0023446:	66 83 fa 08          	cmp    dx,0x8
c002344a:	75 0a                	jne    c0023456 <IDE::open(int, int, void*)+0x21e>
c002344c:	83 e8 02             	sub    eax,0x2
c002344f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023456:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002345c:	89 c2                	mov    edx,eax
c002345e:	83 e2 0f             	and    edx,0xf
c0023461:	66 83 fa 08          	cmp    dx,0x8
c0023465:	75 0a                	jne    c0023471 <IDE::open(int, int, void*)+0x239>
c0023467:	83 e8 02             	sub    eax,0x2
c002346a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023471:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023478:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002347f:	89 d0                	mov    eax,edx
c0023481:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023484:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023488:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002348c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002348f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023494:	0f b6 c9             	movzx  ecx,cl
c0023497:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002349e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234a5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234a9:	8d 50 02             	lea    edx,[eax+0x2]
c00234ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234b1:	0f b6 d2             	movzx  edx,dl
c00234b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234ba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234bd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234c5:	8d 48 03             	lea    ecx,[eax+0x3]
c00234c8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234cd:	0f b6 c9             	movzx  ecx,cl
c00234d0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234dd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234e1:	8d 50 04             	lea    edx,[eax+0x4]
c00234e4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234ef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234f6:	66 85 f6             	test   si,si
c00234f9:	74 3e                	je     c0023539 <IDE::open(int, int, void*)+0x301>
c00234fb:	0f b6 d2             	movzx  edx,dl
c00234fe:	83 c0 05             	add    eax,0x5
c0023501:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023504:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023508:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002350c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023512:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023517:	eb 20                	jmp    c0023539 <IDE::open(int, int, void*)+0x301>
c0023519:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023523:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002352d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023534:	e9 02 ff ff ff       	jmp    c002343b <IDE::open(int, int, void*)+0x203>
c0023539:	52                   	push   edx
c002353a:	52                   	push   edx
c002353b:	6a 00                	push   0x0
c002353d:	53                   	push   ebx
c002353e:	e8 7d fa ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c0023543:	59                   	pop    ecx
c0023544:	5e                   	pop    esi
c0023545:	6a 01                	push   0x1
c0023547:	53                   	push   ebx
c0023548:	e8 73 fa ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c002354d:	83 c4 0c             	add    esp,0xc
c0023550:	6a 00                	push   0x0
c0023552:	6a 00                	push   0x0
c0023554:	53                   	push   ebx
c0023555:	e8 98 fc ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c002355a:	83 c4 0c             	add    esp,0xc
c002355d:	6a 00                	push   0x0
c002355f:	6a 01                	push   0x1
c0023561:	53                   	push   ebx
c0023562:	e8 8b fc ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c0023567:	83 c4 10             	add    esp,0x10
c002356a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023571:	74 40                	je     c00235b3 <IDE::open(int, int, void*)+0x37b>
c0023573:	83 ec 0c             	sub    esp,0xc
c0023576:	68 6f cc 02 c0       	push   0xc002cc6f
c002357b:	e8 92 f9 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023580:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023583:	6a 01                	push   0x1
c0023585:	68 ba 31 02 c0       	push   0xc00231ba
c002358a:	6a 0e                	push   0xe
c002358c:	53                   	push   ebx
c002358d:	e8 2a 0d ff ff       	call   c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023592:	83 c4 14             	add    esp,0x14
c0023595:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002359b:	53                   	push   ebx
c002359c:	6a 01                	push   0x1
c002359e:	68 d6 31 02 c0       	push   0xc00231d6
c00235a3:	6a 0f                	push   0xf
c00235a5:	53                   	push   ebx
c00235a6:	e8 11 0d ff ff       	call   c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ab:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235b1:	eb 4a                	jmp    c00235fd <IDE::open(int, int, void*)+0x3c5>
c00235b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235bd:	50                   	push   eax
c00235be:	6a 0f                	push   0xf
c00235c0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235c6:	68 8b cc 02 c0       	push   0xc002cc8b
c00235cb:	e8 42 f9 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00235d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235d3:	6a 00                	push   0x0
c00235d5:	68 ba 31 02 c0       	push   0xc00231ba
c00235da:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e0:	53                   	push   ebx
c00235e1:	e8 d6 0c ff ff       	call   c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e6:	83 c4 14             	add    esp,0x14
c00235e9:	53                   	push   ebx
c00235ea:	6a 00                	push   0x0
c00235ec:	68 d6 31 02 c0       	push   0xc00231d6
c00235f1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235f7:	53                   	push   ebx
c00235f8:	e8 bf 0c ff ff       	call   c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235ff:	83 c4 20             	add    esp,0x20
c0023602:	83 ec 0c             	sub    esp,0xc
c0023605:	53                   	push   ebx
c0023606:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023609:	83 c4 0c             	add    esp,0xc
c002360c:	6a 07                	push   0x7
c002360e:	6a 00                	push   0x0
c0023610:	53                   	push   ebx
c0023611:	e8 90 fa ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023616:	83 c4 0c             	add    esp,0xc
c0023619:	6a 07                	push   0x7
c002361b:	6a 01                	push   0x1
c002361d:	53                   	push   ebx
c002361e:	e8 83 fa ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023623:	83 c4 0c             	add    esp,0xc
c0023626:	6a 01                	push   0x1
c0023628:	6a 00                	push   0x0
c002362a:	53                   	push   ebx
c002362b:	e8 c2 fb ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c0023630:	83 c4 0c             	add    esp,0xc
c0023633:	6a 01                	push   0x1
c0023635:	6a 01                	push   0x1
c0023637:	53                   	push   ebx
c0023638:	e8 b5 fb ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c002363d:	83 c4 2c             	add    esp,0x2c
c0023640:	31 c0                	xor    eax,eax
c0023642:	5b                   	pop    ebx
c0023643:	5e                   	pop    esi
c0023644:	5f                   	pop    edi
c0023645:	5d                   	pop    ebp
c0023646:	c3                   	ret    
c0023647:	90                   	nop

c0023648 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023648:	55                   	push   ebp
c0023649:	57                   	push   edi
c002364a:	56                   	push   esi
c002364b:	53                   	push   ebx
c002364c:	83 ec 1c             	sub    esp,0x1c
c002364f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023653:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023657:	8d 50 f8             	lea    edx,[eax-0x8]
c002365a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002365e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023662:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023666:	80 fa 03             	cmp    dl,0x3
c0023669:	77 5d                	ja     c00236c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002366b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002366f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023673:	0f b6 db             	movzx  ebx,bl
c0023676:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023679:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002367d:	83 ca 80             	or     edx,0xffffff80
c0023680:	0f b6 d2             	movzx  edx,dl
c0023683:	52                   	push   edx
c0023684:	6a 0c                	push   0xc
c0023686:	53                   	push   ebx
c0023687:	56                   	push   esi
c0023688:	e8 59 f9 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023692:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023696:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002369a:	0f b6 c0             	movzx  eax,al
c002369d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236a3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236a8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236ac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236b4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236bc:	83 c4 2c             	add    esp,0x2c
c00236bf:	5b                   	pop    ebx
c00236c0:	5e                   	pop    esi
c00236c1:	5f                   	pop    edi
c00236c2:	5d                   	pop    ebp
c00236c3:	e9 1e f9 ff ff       	jmp    c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c8:	3c 07                	cmp    al,0x7
c00236ca:	77 10                	ja     c00236dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236cc:	0f b6 db             	movzx  ebx,bl
c00236cf:	0f b6 d0             	movzx  edx,al
c00236d2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236da:	eb 2d                	jmp    c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236dc:	3c 0d                	cmp    al,0xd
c00236de:	77 13                	ja     c00236f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236e0:	0f b6 db             	movzx  ebx,bl
c00236e3:	0f b6 c0             	movzx  eax,al
c00236e6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236ed:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236f1:	eb 16                	jmp    c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f3:	3c 15                	cmp    al,0x15
c00236f5:	77 14                	ja     c002370b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236f7:	0f b6 db             	movzx  ebx,bl
c00236fa:	0f b6 c0             	movzx  eax,al
c00236fd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023705:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023709:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002370b:	83 c4 1c             	add    esp,0x1c
c002370e:	5b                   	pop    ebx
c002370f:	5e                   	pop    esi
c0023710:	5f                   	pop    edi
c0023711:	5d                   	pop    ebp
c0023712:	c3                   	ret    
c0023713:	90                   	nop

c0023714 <IDE::detect()>:
c0023714:	55                   	push   ebp
c0023715:	57                   	push   edi
c0023716:	56                   	push   esi
c0023717:	53                   	push   ebx
c0023718:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002371e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023725:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002372c:	0f 85 be 02 00 00    	jne    c00239f0 <IDE::detect()+0x2dc>
c0023732:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023739:	31 f6                	xor    esi,esi
c002373b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023743:	31 ed                	xor    ebp,ebp
c0023745:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023749:	c1 e0 06             	shl    eax,0x6
c002374c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023754:	89 e8                	mov    eax,ebp
c0023756:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002375a:	c1 e0 04             	shl    eax,0x4
c002375d:	83 c8 a0             	or     eax,0xffffffa0
c0023760:	0f b6 c0             	movzx  eax,al
c0023763:	50                   	push   eax
c0023764:	6a 06                	push   0x6
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	e8 79 f8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376d:	83 c4 0c             	add    esp,0xc
c0023770:	6a 0c                	push   0xc
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	e8 2d f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023779:	83 c4 0c             	add    esp,0xc
c002377c:	6a 0c                	push   0xc
c002377e:	56                   	push   esi
c002377f:	53                   	push   ebx
c0023780:	e8 21 f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023785:	83 c4 0c             	add    esp,0xc
c0023788:	6a 0c                	push   0xc
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	e8 15 f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023791:	83 c4 0c             	add    esp,0xc
c0023794:	6a 0c                	push   0xc
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	e8 09 f9 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002379d:	68 ec 00 00 00       	push   0xec
c00237a2:	6a 07                	push   0x7
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 3b f8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ab:	83 c4 1c             	add    esp,0x1c
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 ef f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237b7:	83 c4 0c             	add    esp,0xc
c00237ba:	6a 0c                	push   0xc
c00237bc:	56                   	push   esi
c00237bd:	53                   	push   ebx
c00237be:	e8 e3 f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237c3:	83 c4 0c             	add    esp,0xc
c00237c6:	6a 0c                	push   0xc
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	e8 d7 f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237cf:	83 c4 0c             	add    esp,0xc
c00237d2:	6a 0c                	push   0xc
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 cb f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237db:	83 c4 0c             	add    esp,0xc
c00237de:	6a 0c                	push   0xc
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	e8 bf f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237e7:	83 c4 10             	add    esp,0x10
c00237ea:	84 c0                	test   al,al
c00237ec:	0f 84 8b 01 00 00    	je     c002397d <IDE::detect()+0x269>
c00237f2:	31 ff                	xor    edi,edi
c00237f4:	50                   	push   eax
c00237f5:	6a 0c                	push   0xc
c00237f7:	56                   	push   esi
c00237f8:	53                   	push   ebx
c00237f9:	e8 a8 f8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00237fe:	83 c4 10             	add    esp,0x10
c0023801:	a8 01                	test   al,0x1
c0023803:	0f 85 8e 01 00 00    	jne    c0023997 <IDE::detect()+0x283>
c0023809:	84 c0                	test   al,al
c002380b:	78 04                	js     c0023811 <IDE::detect()+0xfd>
c002380d:	a8 08                	test   al,0x8
c002380f:	75 27                	jne    c0023838 <IDE::detect()+0x124>
c0023811:	47                   	inc    edi
c0023812:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023818:	7e da                	jle    c00237f4 <IDE::detect()+0xe0>
c002381a:	50                   	push   eax
c002381b:	50                   	push   eax
c002381c:	6a 00                	push   0x0
c002381e:	68 40 4b 4c 00       	push   0x4c4b40
c0023823:	e8 00 ab ff ff       	call   c001e328 <nanoSleep(unsigned long long)>
c0023828:	83 c4 10             	add    esp,0x10
c002382b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023831:	75 c1                	jne    c00237f4 <IDE::detect()+0xe0>
c0023833:	e9 5f 01 00 00       	jmp    c0023997 <IDE::detect()+0x283>
c0023838:	31 c9                	xor    ecx,ecx
c002383a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002383e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023842:	83 ec 0c             	sub    esp,0xc
c0023845:	68 80 00 00 00       	push   0x80
c002384a:	57                   	push   edi
c002384b:	6a 00                	push   0x0
c002384d:	56                   	push   esi
c002384e:	53                   	push   ebx
c002384f:	e8 f4 fd ff ff       	call   c0023648 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023854:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023859:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002385d:	89 d1                	mov    ecx,edx
c002385f:	c1 e0 06             	shl    eax,0x6
c0023862:	01 d8                	add    eax,ebx
c0023864:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002386b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023872:	89 f2                	mov    edx,esi
c0023874:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002387a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002387e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023884:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023888:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002388f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023897:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002389e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238a6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238ac:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238b3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238b9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238c1:	83 c4 20             	add    esp,0x20
c00238c4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238c7:	83 c0 02             	add    eax,0x2
c00238ca:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238d0:	83 c7 02             	add    edi,0x2
c00238d3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238d6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238dc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238e0:	75 e2                	jne    c00238c4 <IDE::detect()+0x1b0>
c00238e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238e6:	c1 e0 06             	shl    eax,0x6
c00238e9:	01 d8                	add    eax,ebx
c00238eb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238f1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238f8:	66 c1 ea 09          	shr    dx,0x9
c00238fc:	83 e2 01             	and    edx,0x1
c00238ff:	84 c9                	test   cl,cl
c0023901:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023907:	75 2f                	jne    c0023938 <IDE::detect()+0x224>
c0023909:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002390f:	85 c0                	test   eax,eax
c0023911:	74 66                	je     c0023979 <IDE::detect()+0x265>
c0023913:	50                   	push   eax
c0023914:	55                   	push   ebp
c0023915:	56                   	push   esi
c0023916:	68 a7 cc 02 c0       	push   0xc002cca7
c002391b:	e8 f2 f5 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023920:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023927:	e8 14 bf fe ff       	call   c000f840 <malloc>
c002392c:	89 c7                	mov    edi,eax
c002392e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023931:	e8 78 06 00 00       	call   c0023fae <ATA::ATA()>
c0023936:	eb 28                	jmp    c0023960 <IDE::detect()+0x24c>
c0023938:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002393e:	55                   	push   ebp
c002393f:	56                   	push   esi
c0023940:	68 d6 cc 02 c0       	push   0xc002ccd6
c0023945:	e8 c8 f5 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c002394a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023951:	e8 ea be fe ff       	call   c000f840 <malloc>
c0023956:	89 c7                	mov    edi,eax
c0023958:	89 04 24             	mov    DWORD PTR [esp],eax
c002395b:	e8 8e 0c 00 00       	call   c00245ee <ATAPI::ATAPI()>
c0023960:	5a                   	pop    edx
c0023961:	59                   	pop    ecx
c0023962:	57                   	push   edi
c0023963:	53                   	push   ebx
c0023964:	e8 cf 09 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0023969:	8b 07                	mov    eax,DWORD PTR [edi]
c002396b:	53                   	push   ebx
c002396c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023970:	6a 00                	push   0x0
c0023972:	57                   	push   edi
c0023973:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023976:	83 c4 20             	add    esp,0x20
c0023979:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002397d:	4d                   	dec    ebp
c002397e:	74 0a                	je     c002398a <IDE::detect()+0x276>
c0023980:	bd 01 00 00 00       	mov    ebp,0x1
c0023985:	e9 bb fd ff ff       	jmp    c0023745 <IDE::detect()+0x31>
c002398a:	4e                   	dec    esi
c002398b:	74 63                	je     c00239f0 <IDE::detect()+0x2dc>
c002398d:	be 01 00 00 00       	mov    esi,0x1
c0023992:	e9 ac fd ff ff       	jmp    c0023743 <IDE::detect()+0x2f>
c0023997:	50                   	push   eax
c0023998:	6a 04                	push   0x4
c002399a:	56                   	push   esi
c002399b:	53                   	push   ebx
c002399c:	e8 05 f7 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00239a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239a5:	83 c4 0c             	add    esp,0xc
c00239a8:	6a 05                	push   0x5
c00239aa:	56                   	push   esi
c00239ab:	53                   	push   ebx
c00239ac:	e8 f5 f6 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239b8:	80 fa 14             	cmp    dl,0x14
c00239bb:	75 04                	jne    c00239c1 <IDE::detect()+0x2ad>
c00239bd:	3c eb                	cmp    al,0xeb
c00239bf:	eb 07                	jmp    c00239c8 <IDE::detect()+0x2b4>
c00239c1:	3c 96                	cmp    al,0x96
c00239c3:	75 b8                	jne    c002397d <IDE::detect()+0x269>
c00239c5:	80 fa 69             	cmp    dl,0x69
c00239c8:	75 b3                	jne    c002397d <IDE::detect()+0x269>
c00239ca:	68 a1 00 00 00       	push   0xa1
c00239cf:	6a 07                	push   0x7
c00239d1:	56                   	push   esi
c00239d2:	53                   	push   ebx
c00239d3:	e8 0e f6 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d8:	5f                   	pop    edi
c00239d9:	58                   	pop    eax
c00239da:	6a 00                	push   0x0
c00239dc:	68 40 42 0f 00       	push   0xf4240
c00239e1:	e8 42 a9 ff ff       	call   c001e328 <nanoSleep(unsigned long long)>
c00239e6:	83 c4 10             	add    esp,0x10
c00239e9:	b1 01                	mov    cl,0x1
c00239eb:	e9 4a fe ff ff       	jmp    c002383a <IDE::detect()+0x126>
c00239f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239f6:	5b                   	pop    ebx
c00239f7:	5e                   	pop    esi
c00239f8:	5f                   	pop    edi
c00239f9:	5d                   	pop    ebp
c00239fa:	c3                   	ret    
c00239fb:	90                   	nop

c00239fc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239fc:	55                   	push   ebp
c00239fd:	57                   	push   edi
c00239fe:	56                   	push   esi
c00239ff:	53                   	push   ebx
c0023a00:	83 ec 1c             	sub    esp,0x1c
c0023a03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a0f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a13:	88 c3                	mov    bl,al
c0023a15:	84 c0                	test   al,al
c0023a17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a1b:	0f 84 67 01 00 00    	je     c0023b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a21:	83 ec 0c             	sub    esp,0xc
c0023a24:	68 07 cd 02 c0       	push   0xc002cd07
c0023a29:	e8 e4 f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023a2e:	83 c4 10             	add    esp,0x10
c0023a31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a35:	3c 01                	cmp    al,0x1
c0023a37:	75 17                	jne    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a39:	83 ec 0c             	sub    esp,0xc
c0023a3c:	b3 13                	mov    bl,0x13
c0023a3e:	68 13 cd 02 c0       	push   0xc002cd13
c0023a43:	e8 ca f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023a48:	83 c4 10             	add    esp,0x10
c0023a4b:	e9 25 01 00 00       	jmp    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a50:	3c 02                	cmp    al,0x2
c0023a52:	0f 85 ef 00 00 00    	jne    c0023b47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a58:	d1 e6                	shl    esi,1
c0023a5a:	09 ee                	or     esi,ebp
c0023a5c:	52                   	push   edx
c0023a5d:	89 f0                	mov    eax,esi
c0023a5f:	6a 01                	push   0x1
c0023a61:	0f b6 f0             	movzx  esi,al
c0023a64:	c1 e6 06             	shl    esi,0x6
c0023a67:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a6f:	50                   	push   eax
c0023a70:	57                   	push   edi
c0023a71:	e8 30 f6 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023a76:	83 c4 10             	add    esp,0x10
c0023a79:	89 c6                	mov    esi,eax
c0023a7b:	a8 01                	test   al,0x1
c0023a7d:	74 12                	je     c0023a91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a7f:	83 ec 0c             	sub    esp,0xc
c0023a82:	b3 07                	mov    bl,0x7
c0023a84:	68 28 cd 02 c0       	push   0xc002cd28
c0023a89:	e8 84 f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023a8e:	83 c4 10             	add    esp,0x10
c0023a91:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a97:	74 12                	je     c0023aab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a99:	83 ec 0c             	sub    esp,0xc
c0023a9c:	b3 03                	mov    bl,0x3
c0023a9e:	68 46 cd 02 c0       	push   0xc002cd46
c0023aa3:	e8 6a f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023aa8:	83 c4 10             	add    esp,0x10
c0023aab:	f7 c6 04 00 00 00    	test   esi,0x4
c0023ab1:	74 12                	je     c0023ac5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ab3:	83 ec 0c             	sub    esp,0xc
c0023ab6:	b3 14                	mov    bl,0x14
c0023ab8:	68 66 cd 02 c0       	push   0xc002cd66
c0023abd:	e8 50 f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023ac2:	83 c4 10             	add    esp,0x10
c0023ac5:	f7 c6 08 00 00 00    	test   esi,0x8
c0023acb:	74 12                	je     c0023adf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	b3 03                	mov    bl,0x3
c0023ad2:	68 46 cd 02 c0       	push   0xc002cd46
c0023ad7:	e8 36 f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023adc:	83 c4 10             	add    esp,0x10
c0023adf:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ae5:	74 12                	je     c0023af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ae7:	83 ec 0c             	sub    esp,0xc
c0023aea:	b3 15                	mov    bl,0x15
c0023aec:	68 7e cd 02 c0       	push   0xc002cd7e
c0023af1:	e8 1c f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023af6:	83 c4 10             	add    esp,0x10
c0023af9:	f7 c6 20 00 00 00    	test   esi,0x20
c0023aff:	74 12                	je     c0023b13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b01:	83 ec 0c             	sub    esp,0xc
c0023b04:	b3 03                	mov    bl,0x3
c0023b06:	68 46 cd 02 c0       	push   0xc002cd46
c0023b0b:	e8 02 f4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023b10:	83 c4 10             	add    esp,0x10
c0023b13:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b19:	74 12                	je     c0023b2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b1b:	83 ec 0c             	sub    esp,0xc
c0023b1e:	b3 16                	mov    bl,0x16
c0023b20:	68 98 cd 02 c0       	push   0xc002cd98
c0023b25:	e8 e8 f3 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023b2a:	83 c4 10             	add    esp,0x10
c0023b2d:	89 f0                	mov    eax,esi
c0023b2f:	84 c0                	test   al,al
c0023b31:	79 42                	jns    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b33:	83 ec 0c             	sub    esp,0xc
c0023b36:	b3 0d                	mov    bl,0xd
c0023b38:	68 b9 cd 02 c0       	push   0xc002cdb9
c0023b3d:	e8 d0 f3 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023b42:	83 c4 10             	add    esp,0x10
c0023b45:	eb 2e                	jmp    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b47:	3c 03                	cmp    al,0x3
c0023b49:	75 14                	jne    c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b4b:	83 ec 0c             	sub    esp,0xc
c0023b4e:	b3 17                	mov    bl,0x17
c0023b50:	68 cd cd 02 c0       	push   0xc002cdcd
c0023b55:	e8 b8 f3 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023b5a:	83 c4 10             	add    esp,0x10
c0023b5d:	eb 16                	jmp    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b5f:	3c 04                	cmp    al,0x4
c0023b61:	75 12                	jne    c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b63:	83 ec 0c             	sub    esp,0xc
c0023b66:	b3 08                	mov    bl,0x8
c0023b68:	68 e3 cd 02 c0       	push   0xc002cde3
c0023b6d:	e8 a0 f3 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	50                   	push   eax
c0023b76:	50                   	push   eax
c0023b77:	0f b6 c3             	movzx  eax,bl
c0023b7a:	50                   	push   eax
c0023b7b:	68 fb cd 02 c0       	push   0xc002cdfb
c0023b80:	e8 8d f3 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023b85:	83 c4 10             	add    esp,0x10
c0023b88:	83 c4 1c             	add    esp,0x1c
c0023b8b:	88 d8                	mov    al,bl
c0023b8d:	5b                   	pop    ebx
c0023b8e:	5e                   	pop    esi
c0023b8f:	5f                   	pop    edi
c0023b90:	5d                   	pop    ebp
c0023b91:	c3                   	ret    

c0023b92 <IDE::polling(unsigned char, unsigned int)>:
c0023b92:	57                   	push   edi
c0023b93:	56                   	push   esi
c0023b94:	53                   	push   ebx
c0023b95:	bb 04 00 00 00       	mov    ebx,0x4
c0023b9a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b9e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023ba3:	52                   	push   edx
c0023ba4:	6a 0c                	push   0xc
c0023ba6:	56                   	push   esi
c0023ba7:	57                   	push   edi
c0023ba8:	e8 f9 f4 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023bad:	83 c4 10             	add    esp,0x10
c0023bb0:	4b                   	dec    ebx
c0023bb1:	75 f0                	jne    c0023ba3 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bb3:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bb8:	50                   	push   eax
c0023bb9:	6a 0c                	push   0xc
c0023bbb:	56                   	push   esi
c0023bbc:	57                   	push   edi
c0023bbd:	e8 e4 f4 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0023bc2:	83 c4 10             	add    esp,0x10
c0023bc5:	a8 01                	test   al,0x1
c0023bc7:	74 12                	je     c0023bdb <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bc9:	83 ec 0c             	sub    esp,0xc
c0023bcc:	68 15 ce 02 c0       	push   0xc002ce15
c0023bd1:	e8 3c f3 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023bd6:	83 c4 10             	add    esp,0x10
c0023bd9:	eb 17                	jmp    c0023bf2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bdb:	a8 20                	test   al,0x20
c0023bdd:	75 0f                	jne    c0023bee <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bdf:	4b                   	dec    ebx
c0023be0:	74 10                	je     c0023bf2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023be2:	84 c0                	test   al,al
c0023be4:	78 d2                	js     c0023bb8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023be6:	a8 08                	test   al,0x8
c0023be8:	74 ce                	je     c0023bb8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bea:	31 c0                	xor    eax,eax
c0023bec:	eb 06                	jmp    c0023bf4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bee:	b0 01                	mov    al,0x1
c0023bf0:	eb 02                	jmp    c0023bf4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bf2:	b0 02                	mov    al,0x2
c0023bf4:	5b                   	pop    ebx
c0023bf5:	5e                   	pop    esi
c0023bf6:	5f                   	pop    edi
c0023bf7:	c3                   	ret    

c0023bf8 <SATABus::close(int, int, void*)>:
c0023bf8:	31 c0                	xor    eax,eax
c0023bfa:	c3                   	ret    
c0023bfb:	90                   	nop

c0023bfc <SATABus::detect()>:
c0023bfc:	c3                   	ret    
c0023bfd:	90                   	nop

c0023bfe <SATABus::SATABus()>:
c0023bfe:	83 ec 0c             	sub    esp,0xc
c0023c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c05:	83 ec 08             	sub    esp,0x8
c0023c08:	68 58 ce 02 c0       	push   0xc002ce58
c0023c0d:	50                   	push   eax
c0023c0e:	e8 b1 0a ff ff       	call   c00146c4 <HardDiskController::HardDiskController(char const*)>
c0023c13:	83 c4 10             	add    esp,0x10
c0023c16:	ba 14 cf 02 c0       	mov    edx,0xc002cf14
c0023c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1f:	89 10                	mov    DWORD PTR [eax],edx
c0023c21:	83 ec 0c             	sub    esp,0xc
c0023c24:	6a 50                	push   0x50
c0023c26:	e8 31 c4 fe ff       	call   c001005c <Phys::allocateContiguousPages(int)>
c0023c2b:	83 c4 10             	add    esp,0x10
c0023c2e:	89 c2                	mov    edx,eax
c0023c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c3a:	83 ec 0c             	sub    esp,0xc
c0023c3d:	6a 50                	push   0x50
c0023c3f:	e8 91 df fe ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0023c44:	83 c4 10             	add    esp,0x10
c0023c47:	89 c2                	mov    edx,eax
c0023c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c53:	e8 e6 e1 fe ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0023c58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c5c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c6c:	83 ec 0c             	sub    esp,0xc
c0023c6f:	6a 03                	push   0x3
c0023c71:	6a 50                	push   0x50
c0023c73:	51                   	push   ecx
c0023c74:	52                   	push   edx
c0023c75:	50                   	push   eax
c0023c76:	e8 f3 e9 fe ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c7b:	83 c4 20             	add    esp,0x20
c0023c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c82:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c92:	83 ec 04             	sub    esp,0x4
c0023c95:	52                   	push   edx
c0023c96:	50                   	push   eax
c0023c97:	68 7c ce 02 c0       	push   0xc002ce7c
c0023c9c:	e8 71 f2 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023ca1:	83 c4 10             	add    esp,0x10
c0023ca4:	90                   	nop
c0023ca5:	83 c4 0c             	add    esp,0xc
c0023ca8:	c3                   	ret    
c0023ca9:	90                   	nop

c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023caa:	83 ec 0c             	sub    esp,0xc
c0023cad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cb1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cb7:	09 c2                	or     edx,eax
c0023cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cc5:	31 c0                	xor    eax,eax
c0023cc7:	c1 e9 08             	shr    ecx,0x8
c0023cca:	83 e1 0f             	and    ecx,0xf
c0023ccd:	39 c8                	cmp    eax,ecx
c0023ccf:	74 0a                	je     c0023cdb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cd1:	f6 c2 01             	test   dl,0x1
c0023cd4:	74 18                	je     c0023cee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cd6:	d1 ea                	shr    edx,1
c0023cd8:	40                   	inc    eax
c0023cd9:	eb f2                	jmp    c0023ccd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cdb:	83 ec 0c             	sub    esp,0xc
c0023cde:	68 a0 ce 02 c0       	push   0xc002cea0
c0023ce3:	e8 cb 68 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0023ce8:	83 c4 10             	add    esp,0x10
c0023ceb:	83 c8 ff             	or     eax,0xffffffff
c0023cee:	83 c4 0c             	add    esp,0xc
c0023cf1:	c3                   	ret    

c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cf6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cf9:	89 c2                	mov    edx,eax
c0023cfb:	c1 ea 08             	shr    edx,0x8
c0023cfe:	83 e2 0f             	and    edx,0xf
c0023d01:	fe ca                	dec    dl
c0023d03:	75 31                	jne    c0023d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d05:	83 e0 0f             	and    eax,0xf
c0023d08:	3c 03                	cmp    al,0x3
c0023d0a:	75 2a                	jne    c0023d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d0c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d0f:	b8 02 00 00 00       	mov    eax,0x2
c0023d14:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d1a:	74 1c                	je     c0023d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d1c:	b8 04 00 00 00       	mov    eax,0x4
c0023d21:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d27:	74 0f                	je     c0023d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d29:	31 c0                	xor    eax,eax
c0023d2b:	83 fa 03             	cmp    edx,0x3
c0023d2e:	0f 94 c0             	sete   al
c0023d31:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d35:	c3                   	ret    
c0023d36:	31 c0                	xor    eax,eax
c0023d38:	c3                   	ret    
c0023d39:	90                   	nop

c0023d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d41:	0f ba e2 0f          	bt     edx,0xf
c0023d45:	72 f7                	jb     c0023d3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d4a:	83 ca 10             	or     edx,0x10
c0023d4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d53:	83 ca 01             	or     edx,0x1
c0023d56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d59:	c3                   	ret    

c0023d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d61:	83 e2 fe             	and    edx,0xfffffffe
c0023d64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d67:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6a:	83 e2 ef             	and    edx,0xffffffef
c0023d6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d73:	0f ba e2 0e          	bt     edx,0xe
c0023d77:	72 f7                	jb     c0023d70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d79:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7c:	0f ba e2 0f          	bt     edx,0xf
c0023d80:	72 ee                	jb     c0023d70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d82:	c3                   	ret    
c0023d83:	90                   	nop

c0023d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d84:	55                   	push   ebp
c0023d85:	57                   	push   edi
c0023d86:	56                   	push   esi
c0023d87:	53                   	push   ebx
c0023d88:	83 ec 1c             	sub    esp,0x1c
c0023d8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d97:	53                   	push   ebx
c0023d98:	89 fd                	mov    ebp,edi
c0023d9a:	56                   	push   esi
c0023d9b:	c1 e5 0a             	shl    ebp,0xa
c0023d9e:	e8 b7 ff ff ff       	call   c0023d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023da3:	83 ec 0c             	sub    esp,0xc
c0023da6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dac:	01 e8                	add    eax,ebp
c0023dae:	89 03                	mov    DWORD PTR [ebx],eax
c0023db0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023db2:	68 00 04 00 00       	push   0x400
c0023db7:	6a 00                	push   0x0
c0023db9:	50                   	push   eax
c0023dba:	e8 b9 c9 fd ff       	call   c0000778 <memset>
c0023dbf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023dc5:	89 fa                	mov    edx,edi
c0023dc7:	01 e8                	add    eax,ebp
c0023dc9:	c1 e7 0d             	shl    edi,0xd
c0023dcc:	89 03                	mov    DWORD PTR [ebx],eax
c0023dce:	c1 e2 08             	shl    edx,0x8
c0023dd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dd8:	81 c2 00 80 00 00    	add    edx,0x8000
c0023dde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023de2:	89 d0                	mov    eax,edx
c0023de4:	83 c4 1c             	add    esp,0x1c
c0023de7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ded:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023df0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023df3:	68 00 01 00 00       	push   0x100
c0023df8:	6a 00                	push   0x0
c0023dfa:	50                   	push   eax
c0023dfb:	e8 78 c9 fd ff       	call   c0000778 <memset>
c0023e00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e04:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e0a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e14:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e17:	83 c4 10             	add    esp,0x10
c0023e1a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e21:	31 ff                	xor    edi,edi
c0023e23:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e29:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e33:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e39:	83 c5 20             	add    ebp,0x20
c0023e3c:	01 f8                	add    eax,edi
c0023e3e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e41:	52                   	push   edx
c0023e42:	68 00 01 00 00       	push   0x100
c0023e47:	6a 00                	push   0x0
c0023e49:	50                   	push   eax
c0023e4a:	e8 29 c9 fd ff       	call   c0000778 <memset>
c0023e4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e53:	83 c4 10             	add    esp,0x10
c0023e56:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e5c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e63:	01 f8                	add    eax,edi
c0023e65:	81 c7 00 01 00 00    	add    edi,0x100
c0023e6b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e6e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e74:	75 b3                	jne    c0023e29 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e76:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e7a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e7e:	83 c4 1c             	add    esp,0x1c
c0023e81:	5b                   	pop    ebx
c0023e82:	5e                   	pop    esi
c0023e83:	5f                   	pop    edi
c0023e84:	5d                   	pop    ebp
c0023e85:	e9 b0 fe ff ff       	jmp    c0023d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e8a:	55                   	push   ebp
c0023e8b:	57                   	push   edi
c0023e8c:	56                   	push   esi
c0023e8d:	53                   	push   ebx
c0023e8e:	31 db                	xor    ebx,ebx
c0023e90:	83 ec 0c             	sub    esp,0xc
c0023e93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e9b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e9e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ea4:	0f 84 aa 00 00 00    	je     c0023f54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023eaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023eae:	89 d8                	mov    eax,ebx
c0023eb0:	c1 e0 07             	shl    eax,0x7
c0023eb3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023eba:	55                   	push   ebp
c0023ebb:	56                   	push   esi
c0023ebc:	e8 31 fe ff ff       	call   c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ec1:	5a                   	pop    edx
c0023ec2:	83 f8 01             	cmp    eax,0x1
c0023ec5:	59                   	pop    ecx
c0023ec6:	75 30                	jne    c0023ef8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ec8:	50                   	push   eax
c0023ec9:	50                   	push   eax
c0023eca:	53                   	push   ebx
c0023ecb:	68 c5 ce 02 c0       	push   0xc002cec5
c0023ed0:	e8 3d f0 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023ed5:	83 c4 0c             	add    esp,0xc
c0023ed8:	53                   	push   ebx
c0023ed9:	55                   	push   ebp
c0023eda:	56                   	push   esi
c0023edb:	e8 a4 fe ff ff       	call   c0023d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ee0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ee7:	e8 54 b9 fe ff       	call   c000f840 <malloc>
c0023eec:	89 c5                	mov    ebp,eax
c0023eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ef1:	e8 60 0d 00 00       	call   c0024c56 <SATA::SATA()>
c0023ef6:	eb 33                	jmp    c0023f2b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ef8:	83 f8 04             	cmp    eax,0x4
c0023efb:	75 47                	jne    c0023f44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023efd:	50                   	push   eax
c0023efe:	50                   	push   eax
c0023eff:	53                   	push   ebx
c0023f00:	68 dc ce 02 c0       	push   0xc002cedc
c0023f05:	e8 08 f0 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023f0a:	83 c4 0c             	add    esp,0xc
c0023f0d:	53                   	push   ebx
c0023f0e:	55                   	push   ebp
c0023f0f:	56                   	push   esi
c0023f10:	e8 6f fe ff ff       	call   c0023d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f15:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f1c:	e8 1f b9 fe ff       	call   c000f840 <malloc>
c0023f21:	89 c5                	mov    ebp,eax
c0023f23:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f26:	e8 d7 10 00 00       	call   c0025002 <SATAPI::SATAPI()>
c0023f2b:	5a                   	pop    edx
c0023f2c:	59                   	pop    ecx
c0023f2d:	55                   	push   ebp
c0023f2e:	56                   	push   esi
c0023f2f:	e8 04 04 ff ff       	call   c0014338 <Device::addChild(Device*)>
c0023f34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f37:	56                   	push   esi
c0023f38:	6a 00                	push   0x0
c0023f3a:	53                   	push   ebx
c0023f3b:	55                   	push   ebp
c0023f3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f3f:	83 c4 20             	add    esp,0x20
c0023f42:	eb 10                	jmp    c0023f54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f44:	50                   	push   eax
c0023f45:	50                   	push   eax
c0023f46:	53                   	push   ebx
c0023f47:	68 f5 ce 02 c0       	push   0xc002cef5
c0023f4c:	e8 c1 ef fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0023f51:	83 c4 10             	add    esp,0x10
c0023f54:	d1 ef                	shr    edi,1
c0023f56:	43                   	inc    ebx
c0023f57:	83 fb 20             	cmp    ebx,0x20
c0023f5a:	0f 85 3e ff ff ff    	jne    c0023e9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f60:	83 c4 0c             	add    esp,0xc
c0023f63:	5b                   	pop    ebx
c0023f64:	5e                   	pop    esi
c0023f65:	5f                   	pop    edi
c0023f66:	5d                   	pop    ebp
c0023f67:	c3                   	ret    

c0023f68 <SATABus::open(int, int, void*)>:
c0023f68:	83 ec 14             	sub    esp,0x14
c0023f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f6f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f75:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f7b:	52                   	push   edx
c0023f7c:	50                   	push   eax
c0023f7d:	e8 08 ff ff ff       	call   c0023e8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f82:	31 c0                	xor    eax,eax
c0023f84:	83 c4 1c             	add    esp,0x1c
c0023f87:	c3                   	ret    

c0023f88 <ATA::close(int, int, void*)>:
c0023f88:	83 ec 0c             	sub    esp,0xc
c0023f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f95:	85 c0                	test   eax,eax
c0023f97:	74 0c                	je     c0023fa5 <ATA::close(int, int, void*)+0x1d>
c0023f99:	83 ec 0c             	sub    esp,0xc
c0023f9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f9e:	50                   	push   eax
c0023f9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fa2:	83 c4 10             	add    esp,0x10
c0023fa5:	31 c0                	xor    eax,eax
c0023fa7:	83 c4 0c             	add    esp,0xc
c0023faa:	c3                   	ret    
c0023fab:	90                   	nop

c0023fac <ATA::powerSaving(PowerSavingLevel)>:
c0023fac:	c3                   	ret    
c0023fad:	90                   	nop

c0023fae <ATA::ATA()>:
c0023fae:	83 ec 0c             	sub    esp,0xc
c0023fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb5:	83 ec 04             	sub    esp,0x4
c0023fb8:	68 00 02 00 00       	push   0x200
c0023fbd:	68 dd cf 02 c0       	push   0xc002cfdd
c0023fc2:	50                   	push   eax
c0023fc3:	e8 94 07 ff ff       	call   c001475c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fc8:	83 c4 10             	add    esp,0x10
c0023fcb:	ba 60 cf 02 c0       	mov    edx,0xc002cf60
c0023fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd4:	89 10                	mov    DWORD PTR [eax],edx
c0023fd6:	90                   	nop
c0023fd7:	83 c4 0c             	add    esp,0xc
c0023fda:	c3                   	ret    
c0023fdb:	90                   	nop

c0023fdc <ATA::flush(bool)>:
c0023fdc:	53                   	push   ebx
c0023fdd:	83 ec 08             	sub    esp,0x8
c0023fe0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fe9:	19 c0                	sbb    eax,eax
c0023feb:	83 e0 fd             	and    eax,0xfffffffd
c0023fee:	05 ea 00 00 00       	add    eax,0xea
c0023ff3:	50                   	push   eax
c0023ff4:	6a 07                	push   0x7
c0023ff6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffd:	50                   	push   eax
c0023ffe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024004:	e8 dd ef ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024009:	83 c4 0c             	add    esp,0xc
c002400c:	6a 00                	push   0x0
c002400e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024015:	50                   	push   eax
c0024016:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401c:	e8 71 fb ff ff       	call   c0023b92 <IDE::polling(unsigned char, unsigned int)>
c0024021:	83 c4 18             	add    esp,0x18
c0024024:	5b                   	pop    ebx
c0024025:	c3                   	ret    

c0024026 <ATA::readyForCommand()>:
c0024026:	56                   	push   esi
c0024027:	53                   	push   ebx
c0024028:	31 db                	xor    ebx,ebx
c002402a:	50                   	push   eax
c002402b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002402f:	50                   	push   eax
c0024030:	6a 0c                	push   0xc
c0024032:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024039:	50                   	push   eax
c002403a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024040:	e8 61 f0 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0024045:	83 c4 10             	add    esp,0x10
c0024048:	a8 88                	test   al,0x88
c002404a:	74 23                	je     c002406f <ATA::readyForCommand()+0x49>
c002404c:	43                   	inc    ebx
c002404d:	83 fb 63             	cmp    ebx,0x63
c0024050:	7e dd                	jle    c002402f <ATA::readyForCommand()+0x9>
c0024052:	51                   	push   ecx
c0024053:	51                   	push   ecx
c0024054:	6a 00                	push   0x0
c0024056:	68 40 42 0f 00       	push   0xf4240
c002405b:	e8 c8 a2 ff ff       	call   c001e328 <nanoSleep(unsigned long long)>
c0024060:	83 c4 10             	add    esp,0x10
c0024063:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024069:	75 c4                	jne    c002402f <ATA::readyForCommand()+0x9>
c002406b:	31 c0                	xor    eax,eax
c002406d:	eb 02                	jmp    c0024071 <ATA::readyForCommand()+0x4b>
c002406f:	b0 01                	mov    al,0x1
c0024071:	5a                   	pop    edx
c0024072:	5b                   	pop    ebx
c0024073:	5e                   	pop    esi
c0024074:	c3                   	ret    
c0024075:	90                   	nop

c0024076 <ATA::access(unsigned long long, int, void*, bool)>:
c0024076:	55                   	push   ebp
c0024077:	57                   	push   edi
c0024078:	56                   	push   esi
c0024079:	53                   	push   ebx
c002407a:	83 ec 2c             	sub    esp,0x2c
c002407d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024081:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024085:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024089:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002408d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024091:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024095:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024099:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002409f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240a3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240ad:	c1 e0 06             	shl    eax,0x6
c00240b0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240b8:	74 5d                	je     c0024117 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240ba:	89 fa                	mov    edx,edi
c00240bc:	89 f0                	mov    eax,esi
c00240be:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240c2:	c1 ea 1c             	shr    edx,0x1c
c00240c5:	89 d1                	mov    ecx,edx
c00240c7:	09 c1                	or     ecx,eax
c00240c9:	74 25                	je     c00240f0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240cb:	31 ed                	xor    ebp,ebp
c00240cd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240d4:	89 fa                	mov    edx,edi
c00240d6:	89 f0                	mov    eax,esi
c00240d8:	0f ad d0             	shrd   eax,edx,cl
c00240db:	d3 ea                	shr    edx,cl
c00240dd:	f6 c1 20             	test   cl,0x20
c00240e0:	74 02                	je     c00240e4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240e2:	89 d0                	mov    eax,edx
c00240e4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240e8:	45                   	inc    ebp
c00240e9:	83 fd 06             	cmp    ebp,0x6
c00240ec:	75 df                	jne    c00240cd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240ee:	eb 76                	jmp    c0024166 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240f0:	89 f0                	mov    eax,esi
c00240f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240f7:	89 fa                	mov    edx,edi
c00240f9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024100:	0f ac d0 10          	shrd   eax,edx,0x10
c0024104:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024109:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002410d:	c1 ee 18             	shr    esi,0x18
c0024110:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024115:	eb 56                	jmp    c002416d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024117:	6a 00                	push   0x0
c0024119:	6a 3f                	push   0x3f
c002411b:	57                   	push   edi
c002411c:	56                   	push   esi
c002411d:	e8 9a 29 00 00       	call   c0026abc <__umoddi3>
c0024122:	83 c4 10             	add    esp,0x10
c0024125:	40                   	inc    eax
c0024126:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002412a:	6a 00                	push   0x0
c002412c:	68 f0 03 00 00       	push   0x3f0
c0024131:	57                   	push   edi
c0024132:	56                   	push   esi
c0024133:	e8 84 28 00 00       	call   c00269bc <__udivdi3>
c0024138:	83 c4 10             	add    esp,0x10
c002413b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024140:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024147:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002414c:	6a 00                	push   0x0
c002414e:	6a 3f                	push   0x3f
c0024150:	57                   	push   edi
c0024151:	56                   	push   esi
c0024152:	e8 65 28 00 00       	call   c00269bc <__udivdi3>
c0024157:	83 c4 10             	add    esp,0x10
c002415a:	89 c6                	mov    esi,eax
c002415c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024161:	83 e6 0f             	and    esi,0xf
c0024164:	eb 07                	jmp    c002416d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024166:	31 f6                	xor    esi,esi
c0024168:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002416d:	bf 01 00 00 00       	mov    edi,0x1
c0024172:	50                   	push   eax
c0024173:	6a 00                	push   0x0
c0024175:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417c:	50                   	push   eax
c002417d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024181:	e8 6c f0 ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c0024186:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024189:	e8 98 fe ff ff       	call   c0024026 <ATA::readyForCommand()>
c002418e:	83 c4 10             	add    esp,0x10
c0024191:	84 c0                	test   al,al
c0024193:	0f 84 5a 02 00 00    	je     c00243f3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024199:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002419f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241a5:	c1 e0 04             	shl    eax,0x4
c00241a8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241af:	09 c6                	or     esi,eax
c00241b1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241b6:	75 05                	jne    c00241bd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241b8:	83 ce a0             	or     esi,0xffffffa0
c00241bb:	eb 03                	jmp    c00241c0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241bd:	83 ce e0             	or     esi,0xffffffe0
c00241c0:	89 f0                	mov    eax,esi
c00241c2:	0f b6 f0             	movzx  esi,al
c00241c5:	56                   	push   esi
c00241c6:	6a 06                	push   0x6
c00241c8:	51                   	push   ecx
c00241c9:	52                   	push   edx
c00241ca:	e8 17 ee ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cf:	83 c4 10             	add    esp,0x10
c00241d2:	6a 00                	push   0x0
c00241d4:	6a 01                	push   0x1
c00241d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241dd:	50                   	push   eax
c00241de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e4:	e8 fd ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e9:	83 c4 10             	add    esp,0x10
c00241ec:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241f1:	75 6e                	jne    c0024261 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241f3:	6a 00                	push   0x0
c00241f5:	6a 08                	push   0x8
c00241f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fe:	50                   	push   eax
c00241ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024205:	e8 dc ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002420f:	50                   	push   eax
c0024210:	6a 09                	push   0x9
c0024212:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024219:	50                   	push   eax
c002421a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024220:	e8 c1 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024225:	83 c4 20             	add    esp,0x20
c0024228:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002422d:	50                   	push   eax
c002422e:	6a 0a                	push   0xa
c0024230:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024237:	50                   	push   eax
c0024238:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423e:	e8 a3 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024243:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024248:	50                   	push   eax
c0024249:	6a 0b                	push   0xb
c002424b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024252:	50                   	push   eax
c0024253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024259:	e8 88 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425e:	83 c4 20             	add    esp,0x20
c0024261:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024266:	50                   	push   eax
c0024267:	6a 02                	push   0x2
c0024269:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024270:	50                   	push   eax
c0024271:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024277:	e8 6a ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024281:	50                   	push   eax
c0024282:	6a 03                	push   0x3
c0024284:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002428b:	50                   	push   eax
c002428c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024292:	e8 4f ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024297:	83 c4 20             	add    esp,0x20
c002429a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002429f:	50                   	push   eax
c00242a0:	6a 04                	push   0x4
c00242a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a9:	50                   	push   eax
c00242aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b0:	e8 31 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242ba:	50                   	push   eax
c00242bb:	6a 05                	push   0x5
c00242bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c4:	50                   	push   eax
c00242c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cb:	e8 16 ed ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d0:	83 c4 20             	add    esp,0x20
c00242d3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242d8:	0f 94 c0             	sete   al
c00242db:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242e0:	74 09                	je     c00242eb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242e2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242e9:	eb 07                	jmp    c00242f2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242eb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242f2:	0f b6 c0             	movzx  eax,al
c00242f5:	50                   	push   eax
c00242f6:	6a 07                	push   0x7
c00242f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ff:	50                   	push   eax
c0024300:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024306:	e8 db ec ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002430f:	83 c4 10             	add    esp,0x10
c0024312:	85 f6                	test   esi,esi
c0024314:	0f 84 ba 00 00 00    	je     c00243d4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002431a:	50                   	push   eax
c002431b:	6a 01                	push   0x1
c002431d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024324:	50                   	push   eax
c0024325:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002432b:	e8 62 f8 ff ff       	call   c0023b92 <IDE::polling(unsigned char, unsigned int)>
c0024330:	83 c4 10             	add    esp,0x10
c0024333:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024339:	84 c0                	test   al,al
c002433b:	74 2c                	je     c0024369 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002433d:	0f b6 f8             	movzx  edi,al
c0024340:	0f b6 d2             	movzx  edx,dl
c0024343:	57                   	push   edi
c0024344:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002434b:	50                   	push   eax
c002434c:	52                   	push   edx
c002434d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024353:	e8 a4 f6 ff ff       	call   c00239fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024358:	c7 04 24 38 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf38
c002435f:	e8 ae eb fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0024364:	e9 87 00 00 00       	jmp    c00243f0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024369:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002436e:	74 33                	je     c00243a3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024370:	31 ed                	xor    ebp,ebp
c0024372:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024376:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002437a:	50                   	push   eax
c002437b:	50                   	push   eax
c002437c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024383:	50                   	push   eax
c0024384:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438a:	e8 45 ec ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c002438f:	89 c2                	mov    edx,eax
c0024391:	89 f8                	mov    eax,edi
c0024393:	66 ef                	out    dx,ax
c0024395:	45                   	inc    ebp
c0024396:	83 c4 10             	add    esp,0x10
c0024399:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002439f:	75 d1                	jne    c0024372 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243a1:	eb 23                	jmp    c00243c6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243a3:	0f b6 d2             	movzx  edx,dl
c00243a6:	51                   	push   ecx
c00243a7:	51                   	push   ecx
c00243a8:	52                   	push   edx
c00243a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243af:	e8 20 ec ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c00243b4:	b9 00 01 00 00       	mov    ecx,0x100
c00243b9:	89 c2                	mov    edx,eax
c00243bb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243bf:	fc                   	cld    
c00243c0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243c3:	83 c4 10             	add    esp,0x10
c00243c6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243ce:	4e                   	dec    esi
c00243cf:	e9 3e ff ff ff       	jmp    c0024312 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243d4:	31 ff                	xor    edi,edi
c00243d6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243db:	74 16                	je     c00243f3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243dd:	50                   	push   eax
c00243de:	50                   	push   eax
c00243df:	31 c0                	xor    eax,eax
c00243e1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243e6:	0f 94 c0             	sete   al
c00243e9:	50                   	push   eax
c00243ea:	53                   	push   ebx
c00243eb:	e8 ec fb ff ff       	call   c0023fdc <ATA::flush(bool)>
c00243f0:	83 c4 10             	add    esp,0x10
c00243f3:	83 c4 2c             	add    esp,0x2c
c00243f6:	89 f8                	mov    eax,edi
c00243f8:	5b                   	pop    ebx
c00243f9:	5e                   	pop    esi
c00243fa:	5f                   	pop    edi
c00243fb:	5d                   	pop    ebp
c00243fc:	c3                   	ret    
c00243fd:	90                   	nop

c00243fe <ATA::read(unsigned long long, int, void*)>:
c00243fe:	57                   	push   edi
c00243ff:	b8 04 00 00 00       	mov    eax,0x4
c0024404:	56                   	push   esi
c0024405:	53                   	push   ebx
c0024406:	83 ec 10             	sub    esp,0x10
c0024409:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002440d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024411:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024414:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024418:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002441c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024422:	77 3b                	ja     c002445f <ATA::read(unsigned long long, int, void*)+0x61>
c0024424:	b8 06 00 00 00       	mov    eax,0x6
c0024429:	85 d2                	test   edx,edx
c002442b:	74 32                	je     c002445f <ATA::read(unsigned long long, int, void*)+0x61>
c002442d:	50                   	push   eax
c002442e:	50                   	push   eax
c002442f:	6a 00                	push   0x0
c0024431:	52                   	push   edx
c0024432:	53                   	push   ebx
c0024433:	57                   	push   edi
c0024434:	56                   	push   esi
c0024435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024439:	e8 38 fc ff ff       	call   c0024076 <ATA::access(unsigned long long, int, void*, bool)>
c002443e:	83 c4 20             	add    esp,0x20
c0024441:	85 c0                	test   eax,eax
c0024443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024447:	75 11                	jne    c002445a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024449:	01 1d e8 28 03 c0    	add    DWORD PTR ds:0xc00328e8,ebx
c002444f:	e8 d6 c5 fe ff       	call   c0010a2a <VgaText::updateDiskUsage()>
c0024454:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024458:	eb 05                	jmp    c002445f <ATA::read(unsigned long long, int, void*)+0x61>
c002445a:	b8 01 00 00 00       	mov    eax,0x1
c002445f:	83 c4 10             	add    esp,0x10
c0024462:	5b                   	pop    ebx
c0024463:	5e                   	pop    esi
c0024464:	5f                   	pop    edi
c0024465:	c3                   	ret    

c0024466 <ATA::write(unsigned long long, int, void*)>:
c0024466:	57                   	push   edi
c0024467:	b8 04 00 00 00       	mov    eax,0x4
c002446c:	56                   	push   esi
c002446d:	53                   	push   ebx
c002446e:	83 ec 10             	sub    esp,0x10
c0024471:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024475:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024479:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002447c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024480:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024484:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002448a:	77 3b                	ja     c00244c7 <ATA::write(unsigned long long, int, void*)+0x61>
c002448c:	b8 06 00 00 00       	mov    eax,0x6
c0024491:	85 d2                	test   edx,edx
c0024493:	74 32                	je     c00244c7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024495:	50                   	push   eax
c0024496:	50                   	push   eax
c0024497:	6a 01                	push   0x1
c0024499:	52                   	push   edx
c002449a:	53                   	push   ebx
c002449b:	57                   	push   edi
c002449c:	56                   	push   esi
c002449d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244a1:	e8 d0 fb ff ff       	call   c0024076 <ATA::access(unsigned long long, int, void*, bool)>
c00244a6:	83 c4 20             	add    esp,0x20
c00244a9:	85 c0                	test   eax,eax
c00244ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244af:	75 11                	jne    c00244c2 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244b1:	01 1d e4 28 03 c0    	add    DWORD PTR ds:0xc00328e4,ebx
c00244b7:	e8 6e c5 fe ff       	call   c0010a2a <VgaText::updateDiskUsage()>
c00244bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244c0:	eb 05                	jmp    c00244c7 <ATA::write(unsigned long long, int, void*)+0x61>
c00244c2:	b8 01 00 00 00       	mov    eax,0x1
c00244c7:	83 c4 10             	add    esp,0x10
c00244ca:	5b                   	pop    ebx
c00244cb:	5e                   	pop    esi
c00244cc:	5f                   	pop    edi
c00244cd:	c3                   	ret    

c00244ce <ATA::detectCHS()>:
c00244ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244d2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244d8:	c1 e0 06             	shl    eax,0x6
c00244db:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244e1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244eb:	c7 44 24 04 43 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf43
c00244f3:	e9 bb 60 ff ff       	jmp    c001a5b3 <Krnl::panic(char const*)>

c00244f8 <ATA::open(int, int, void*)>:
c00244f8:	53                   	push   ebx
c00244f9:	83 ec 08             	sub    esp,0x8
c00244fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024500:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024504:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024508:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002450e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024514:	c1 e0 06             	shl    eax,0x6
c0024517:	01 d0                	add    eax,edx
c0024519:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024520:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024526:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002452d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024537:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002453d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024544:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002454b:	75 0c                	jne    c0024559 <ATA::open(int, int, void*)+0x61>
c002454d:	83 ec 0c             	sub    esp,0xc
c0024550:	53                   	push   ebx
c0024551:	e8 78 ff ff ff       	call   c00244ce <ATA::detectCHS()>
c0024556:	83 c4 10             	add    esp,0x10
c0024559:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002455f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024565:	c1 e0 06             	shl    eax,0x6
c0024568:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002456f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024579:	d1 e8                	shr    eax,1
c002457b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024581:	6a 04                	push   0x4
c0024583:	6a 0c                	push   0xc
c0024585:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002458c:	50                   	push   eax
c002458d:	52                   	push   edx
c002458e:	e8 53 ea ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024593:	90                   	nop
c0024594:	90                   	nop
c0024595:	6a 00                	push   0x0
c0024597:	6a 0c                	push   0xc
c0024599:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a0:	50                   	push   eax
c00245a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245a7:	e8 3a ea ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ac:	83 c4 14             	add    esp,0x14
c00245af:	53                   	push   ebx
c00245b0:	e8 0f 02 ff ff       	call   c00147c4 <PhysicalDisk::startCache()>
c00245b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245b8:	e8 7d 23 ff ff       	call   c001693a <createPartitionsForDisk(PhysicalDisk*)>
c00245bd:	31 c0                	xor    eax,eax
c00245bf:	83 c4 18             	add    esp,0x18
c00245c2:	5b                   	pop    ebx
c00245c3:	c3                   	ret    

c00245c4 <ATAPI::write(unsigned long long, int, void*)>:
c00245c4:	b8 03 00 00 00       	mov    eax,0x3
c00245c9:	c3                   	ret    

c00245ca <ATAPI::close(int, int, void*)>:
c00245ca:	83 ec 0c             	sub    esp,0xc
c00245cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245d7:	85 c0                	test   eax,eax
c00245d9:	74 0c                	je     c00245e7 <ATAPI::close(int, int, void*)+0x1d>
c00245db:	83 ec 0c             	sub    esp,0xc
c00245de:	8b 10                	mov    edx,DWORD PTR [eax]
c00245e0:	50                   	push   eax
c00245e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245e4:	83 c4 10             	add    esp,0x10
c00245e7:	31 c0                	xor    eax,eax
c00245e9:	83 c4 0c             	add    esp,0xc
c00245ec:	c3                   	ret    
c00245ed:	90                   	nop

c00245ee <ATAPI::ATAPI()>:
c00245ee:	83 ec 0c             	sub    esp,0xc
c00245f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f5:	83 ec 04             	sub    esp,0x4
c00245f8:	68 00 08 00 00       	push   0x800
c00245fd:	68 7d d0 02 c0       	push   0xc002d07d
c0024602:	50                   	push   eax
c0024603:	e8 54 01 ff ff       	call   c001475c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024608:	83 c4 10             	add    esp,0x10
c002460b:	ba 98 cf 02 c0       	mov    edx,0xc002cf98
c0024610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024614:	89 10                	mov    DWORD PTR [eax],edx
c0024616:	90                   	nop
c0024617:	83 c4 0c             	add    esp,0xc
c002461a:	c3                   	ret    
c002461b:	90                   	nop

c002461c <ATAPI::readyForCommand()>:
c002461c:	56                   	push   esi
c002461d:	53                   	push   ebx
c002461e:	31 db                	xor    ebx,ebx
c0024620:	50                   	push   eax
c0024621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024625:	50                   	push   eax
c0024626:	6a 0c                	push   0xc
c0024628:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002462f:	50                   	push   eax
c0024630:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024636:	e8 6b ea ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c002463b:	83 c4 10             	add    esp,0x10
c002463e:	a8 88                	test   al,0x88
c0024640:	74 23                	je     c0024665 <ATAPI::readyForCommand()+0x49>
c0024642:	43                   	inc    ebx
c0024643:	83 fb 63             	cmp    ebx,0x63
c0024646:	7e dd                	jle    c0024625 <ATAPI::readyForCommand()+0x9>
c0024648:	51                   	push   ecx
c0024649:	51                   	push   ecx
c002464a:	6a 00                	push   0x0
c002464c:	68 40 42 0f 00       	push   0xf4240
c0024651:	e8 d2 9c ff ff       	call   c001e328 <nanoSleep(unsigned long long)>
c0024656:	83 c4 10             	add    esp,0x10
c0024659:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002465f:	75 c4                	jne    c0024625 <ATAPI::readyForCommand()+0x9>
c0024661:	31 c0                	xor    eax,eax
c0024663:	eb 02                	jmp    c0024667 <ATAPI::readyForCommand()+0x4b>
c0024665:	b0 01                	mov    al,0x1
c0024667:	5a                   	pop    edx
c0024668:	5b                   	pop    ebx
c0024669:	5e                   	pop    esi
c002466a:	c3                   	ret    
c002466b:	90                   	nop

c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002466c:	55                   	push   ebp
c002466d:	57                   	push   edi
c002466e:	56                   	push   esi
c002466f:	53                   	push   ebx
c0024670:	83 ec 20             	sub    esp,0x20
c0024673:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024677:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002467b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002467f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024683:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024687:	6a 01                	push   0x1
c0024689:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024690:	50                   	push   eax
c0024691:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024697:	e8 56 eb ff ff       	call   c00231f2 <IDE::enableIRQs(unsigned char, bool)>
c002469c:	5e                   	pop    esi
c002469d:	58                   	pop    eax
c002469e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a5:	50                   	push   eax
c00246a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ac:	e8 0f e9 ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c00246b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246b4:	e8 63 ff ff ff       	call   c002461c <ATAPI::readyForCommand()>
c00246b9:	83 c4 10             	add    esp,0x10
c00246bc:	84 c0                	test   al,al
c00246be:	75 0a                	jne    c00246ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246c0:	bb 01 00 00 00       	mov    ebx,0x1
c00246c5:	e9 57 02 00 00       	jmp    c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246ca:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246d0:	c1 e0 04             	shl    eax,0x4
c00246d3:	0f b6 c0             	movzx  eax,al
c00246d6:	50                   	push   eax
c00246d7:	6a 06                	push   0x6
c00246d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e0:	50                   	push   eax
c00246e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e7:	e8 fa e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ec:	6a 00                	push   0x0
c00246ee:	6a 01                	push   0x1
c00246f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f7:	50                   	push   eax
c00246f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fe:	e8 e3 e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024703:	83 c4 20             	add    esp,0x20
c0024706:	0f b6 c3             	movzx  eax,bl
c0024709:	0f b6 df             	movzx  ebx,bh
c002470c:	50                   	push   eax
c002470d:	6a 04                	push   0x4
c002470f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024716:	50                   	push   eax
c0024717:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471d:	e8 c4 e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024722:	53                   	push   ebx
c0024723:	6a 05                	push   0x5
c0024725:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472c:	50                   	push   eax
c002472d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024733:	e8 ae e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024738:	83 c4 20             	add    esp,0x20
c002473b:	68 a0 00 00 00       	push   0xa0
c0024740:	6a 07                	push   0x7
c0024742:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024749:	50                   	push   eax
c002474a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024750:	e8 91 e8 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024755:	83 c4 0c             	add    esp,0xc
c0024758:	6a 01                	push   0x1
c002475a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024761:	50                   	push   eax
c0024762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024768:	e8 25 f4 ff ff       	call   c0023b92 <IDE::polling(unsigned char, unsigned int)>
c002476d:	83 c4 10             	add    esp,0x10
c0024770:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024776:	84 c0                	test   al,al
c0024778:	74 23                	je     c002479d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002477a:	0f b6 d8             	movzx  ebx,al
c002477d:	0f b6 d2             	movzx  edx,dl
c0024780:	53                   	push   ebx
c0024781:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024788:	50                   	push   eax
c0024789:	52                   	push   edx
c002478a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024790:	e8 67 f2 ff ff       	call   c00239fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024795:	83 c4 10             	add    esp,0x10
c0024798:	e9 84 01 00 00       	jmp    c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002479d:	0f b6 d2             	movzx  edx,dl
c00247a0:	53                   	push   ebx
c00247a1:	53                   	push   ebx
c00247a2:	52                   	push   edx
c00247a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a9:	e8 26 e8 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c00247ae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247b2:	b9 06 00 00 00       	mov    ecx,0x6
c00247b7:	89 c2                	mov    edx,eax
c00247b9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247bc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247c0:	83 c4 10             	add    esp,0x10
c00247c3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247c9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247d0:	85 db                	test   ebx,ebx
c00247d2:	0f 84 ec 00 00 00    	je     c00248c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247d8:	51                   	push   ecx
c00247d9:	51                   	push   ecx
c00247da:	52                   	push   edx
c00247db:	50                   	push   eax
c00247dc:	e8 73 e9 ff ff       	call   c0023154 <IDE::waitInterrupt(unsigned char)>
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	84 c0                	test   al,al
c00247e6:	0f 84 d4 fe ff ff    	je     c00246c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247ec:	56                   	push   esi
c00247ed:	56                   	push   esi
c00247ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f5:	50                   	push   eax
c00247f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fc:	e8 bf e7 ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c0024801:	83 c4 0c             	add    esp,0xc
c0024804:	6a 04                	push   0x4
c0024806:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480d:	50                   	push   eax
c002480e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024814:	e8 8d e8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0024819:	83 c4 0c             	add    esp,0xc
c002481c:	89 c6                	mov    esi,eax
c002481e:	6a 05                	push   0x5
c0024820:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024827:	50                   	push   eax
c0024828:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482e:	e8 73 e8 ff ff       	call   c00230a6 <IDE::read(unsigned char, unsigned char)>
c0024833:	89 f1                	mov    ecx,esi
c0024835:	0f b6 c0             	movzx  eax,al
c0024838:	0f b6 f1             	movzx  esi,cl
c002483b:	c1 e0 08             	shl    eax,0x8
c002483e:	09 c6                	or     esi,eax
c0024840:	d1 fe                	sar    esi,1
c0024842:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024846:	83 c4 10             	add    esp,0x10
c0024849:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002484e:	74 41                	je     c0024891 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024850:	31 c9                	xor    ecx,ecx
c0024852:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024858:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002485f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024863:	75 0a                	jne    c002486f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024865:	01 c9                	add    ecx,ecx
c0024867:	01 cd                	add    ebp,ecx
c0024869:	4b                   	dec    ebx
c002486a:	e9 54 ff ff ff       	jmp    c00247c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002486f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024874:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024878:	51                   	push   ecx
c0024879:	51                   	push   ecx
c002487a:	52                   	push   edx
c002487b:	50                   	push   eax
c002487c:	e8 53 e7 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c0024881:	89 c2                	mov    edx,eax
c0024883:	89 f0                	mov    eax,esi
c0024885:	66 ef                	out    dx,ax
c0024887:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002488b:	83 c4 10             	add    esp,0x10
c002488e:	41                   	inc    ecx
c002488f:	eb c1                	jmp    c0024852 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024891:	31 f6                	xor    esi,esi
c0024893:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024899:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248a0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248a4:	75 06                	jne    c00248ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248a6:	01 f6                	add    esi,esi
c00248a8:	01 f5                	add    ebp,esi
c00248aa:	eb bd                	jmp    c0024869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248ac:	51                   	push   ecx
c00248ad:	51                   	push   ecx
c00248ae:	52                   	push   edx
c00248af:	50                   	push   eax
c00248b0:	e8 1f e7 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c00248b5:	89 c2                	mov    edx,eax
c00248b7:	66 ed                	in     ax,dx
c00248b9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248be:	83 c4 10             	add    esp,0x10
c00248c1:	46                   	inc    esi
c00248c2:	eb cf                	jmp    c0024893 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248c4:	51                   	push   ecx
c00248c5:	51                   	push   ecx
c00248c6:	52                   	push   edx
c00248c7:	50                   	push   eax
c00248c8:	e8 87 e8 ff ff       	call   c0023154 <IDE::waitInterrupt(unsigned char)>
c00248cd:	83 c4 10             	add    esp,0x10
c00248d0:	84 c0                	test   al,al
c00248d2:	0f 84 e8 fd ff ff    	je     c00246c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248d8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248dd:	52                   	push   edx
c00248de:	52                   	push   edx
c00248df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e6:	50                   	push   eax
c00248e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ed:	e8 ce e6 ff ff       	call   c0022fc0 <IDE::prepareInterrupt(unsigned char)>
c00248f2:	83 c4 10             	add    esp,0x10
c00248f5:	50                   	push   eax
c00248f6:	50                   	push   eax
c00248f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248fe:	50                   	push   eax
c00248ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024905:	e8 ca e6 ff ff       	call   c0022fd4 <IDE::getBase(unsigned char)>
c002490a:	8d 50 07             	lea    edx,[eax+0x7]
c002490d:	ec                   	in     al,dx
c002490e:	83 c4 10             	add    esp,0x10
c0024911:	a8 88                	test   al,0x88
c0024913:	74 0a                	je     c002491f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024915:	4b                   	dec    ebx
c0024916:	75 dd                	jne    c00248f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024918:	bb 02 00 00 00       	mov    ebx,0x2
c002491d:	eb 02                	jmp    c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002491f:	31 db                	xor    ebx,ebx
c0024921:	83 c4 1c             	add    esp,0x1c
c0024924:	89 d8                	mov    eax,ebx
c0024926:	5b                   	pop    ebx
c0024927:	5e                   	pop    esi
c0024928:	5f                   	pop    edi
c0024929:	5d                   	pop    ebp
c002492a:	c3                   	ret    
c002492b:	90                   	nop

c002492c <ATAPI::diskRemoved()>:
c002492c:	83 ec 18             	sub    esp,0x18
c002492f:	68 89 d0 02 c0       	push   0xc002d089
c0024934:	e8 d9 e5 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0024939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002493d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024944:	83 c4 1c             	add    esp,0x1c
c0024947:	c3                   	ret    

c0024948 <ATAPI::eject()>:
c0024948:	57                   	push   edi
c0024949:	b9 03 00 00 00       	mov    ecx,0x3
c002494e:	53                   	push   ebx
c002494f:	83 ec 14             	sub    esp,0x14
c0024952:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024956:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002495a:	fc                   	cld    
c002495b:	31 c0                	xor    eax,eax
c002495d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002495f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024964:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024969:	50                   	push   eax
c002496a:	50                   	push   eax
c002496b:	6a 00                	push   0x0
c002496d:	6a 00                	push   0x0
c002496f:	6a 00                	push   0x0
c0024971:	6a 02                	push   0x2
c0024973:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024977:	50                   	push   eax
c0024978:	53                   	push   ebx
c0024979:	e8 ee fc ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002497e:	83 c4 14             	add    esp,0x14
c0024981:	53                   	push   ebx
c0024982:	e8 a5 ff ff ff       	call   c002492c <ATAPI::diskRemoved()>
c0024987:	83 c4 24             	add    esp,0x24
c002498a:	31 c0                	xor    eax,eax
c002498c:	5b                   	pop    ebx
c002498d:	5f                   	pop    edi
c002498e:	c3                   	ret    
c002498f:	90                   	nop

c0024990 <ATAPI::diskInserted()>:
c0024990:	53                   	push   ebx
c0024991:	83 ec 14             	sub    esp,0x14
c0024994:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024998:	68 a0 d0 02 c0       	push   0xc002d0a0
c002499d:	e8 70 e5 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c00249a2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ac:	e8 13 fe fe ff       	call   c00147c4 <PhysicalDisk::startCache()>
c00249b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249b5:	83 c4 18             	add    esp,0x18
c00249b8:	5b                   	pop    ebx
c00249b9:	e9 7c 1f ff ff       	jmp    c001693a <createPartitionsForDisk(PhysicalDisk*)>

c00249be <ATAPI::detectMedia()>:
c00249be:	56                   	push   esi
c00249bf:	53                   	push   ebx
c00249c0:	83 ec 28             	sub    esp,0x28
c00249c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249c7:	6a 0c                	push   0xc
c00249c9:	6a 00                	push   0x0
c00249cb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249cf:	56                   	push   esi
c00249d0:	e8 a3 bd fd ff       	call   c0000778 <memset>
c00249d5:	58                   	pop    eax
c00249d6:	5a                   	pop    edx
c00249d7:	6a 00                	push   0x0
c00249d9:	6a 00                	push   0x0
c00249db:	6a 00                	push   0x0
c00249dd:	6a 00                	push   0x0
c00249df:	56                   	push   esi
c00249e0:	53                   	push   ebx
c00249e1:	e8 86 fc ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249e6:	83 c4 1c             	add    esp,0x1c
c00249e9:	6a 0c                	push   0xc
c00249eb:	6a 00                	push   0x0
c00249ed:	56                   	push   esi
c00249ee:	e8 85 bd fd ff       	call   c0000778 <memset>
c00249f3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249f8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249fd:	59                   	pop    ecx
c00249fe:	58                   	pop    eax
c00249ff:	6a 01                	push   0x1
c0024a01:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a05:	50                   	push   eax
c0024a06:	6a 00                	push   0x0
c0024a08:	6a 12                	push   0x12
c0024a0a:	56                   	push   esi
c0024a0b:	53                   	push   ebx
c0024a0c:	e8 5b fc ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a11:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a15:	83 c4 20             	add    esp,0x20
c0024a18:	83 e0 7f             	and    eax,0x7f
c0024a1b:	3c 70                	cmp    al,0x70
c0024a1d:	74 15                	je     c0024a34 <ATAPI::detectMedia()+0x76>
c0024a1f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a26:	75 0c                	jne    c0024a34 <ATAPI::detectMedia()+0x76>
c0024a28:	83 ec 0c             	sub    esp,0xc
c0024a2b:	53                   	push   ebx
c0024a2c:	e8 5f ff ff ff       	call   c0024990 <ATAPI::diskInserted()>
c0024a31:	83 c4 10             	add    esp,0x10
c0024a34:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a38:	83 e0 0f             	and    eax,0xf
c0024a3b:	3c 02                	cmp    al,0x2
c0024a3d:	75 1b                	jne    c0024a5a <ATAPI::detectMedia()+0x9c>
c0024a3f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a44:	75 2d                	jne    c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a46:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a4d:	74 24                	je     c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a4f:	83 ec 0c             	sub    esp,0xc
c0024a52:	53                   	push   ebx
c0024a53:	e8 d4 fe ff ff       	call   c002492c <ATAPI::diskRemoved()>
c0024a58:	eb 16                	jmp    c0024a70 <ATAPI::detectMedia()+0xb2>
c0024a5a:	84 c0                	test   al,al
c0024a5c:	75 15                	jne    c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a5e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a65:	75 0c                	jne    c0024a73 <ATAPI::detectMedia()+0xb5>
c0024a67:	83 ec 0c             	sub    esp,0xc
c0024a6a:	53                   	push   ebx
c0024a6b:	e8 20 ff ff ff       	call   c0024990 <ATAPI::diskInserted()>
c0024a70:	83 c4 10             	add    esp,0x10
c0024a73:	83 c4 24             	add    esp,0x24
c0024a76:	5b                   	pop    ebx
c0024a77:	5e                   	pop    esi
c0024a78:	c3                   	ret    
c0024a79:	90                   	nop

c0024a7a <ATAPI::open(int, int, void*)>:
c0024a7a:	53                   	push   ebx
c0024a7b:	83 ec 08             	sub    esp,0x8
c0024a7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a8a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a90:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a96:	c1 e0 06             	shl    eax,0x6
c0024a99:	01 d0                	add    eax,edx
c0024a9b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aa2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024aa8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024aaf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ab9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024abf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ac6:	6a 04                	push   0x4
c0024ac8:	6a 0c                	push   0xc
c0024aca:	51                   	push   ecx
c0024acb:	52                   	push   edx
c0024acc:	e8 15 e5 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad1:	90                   	nop
c0024ad2:	90                   	nop
c0024ad3:	6a 00                	push   0x0
c0024ad5:	6a 0c                	push   0xc
c0024ad7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ade:	50                   	push   eax
c0024adf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ae5:	e8 fc e4 ff ff       	call   c0022fe6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aea:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024af1:	83 c4 14             	add    esp,0x14
c0024af4:	53                   	push   ebx
c0024af5:	e8 c4 fe ff ff       	call   c00249be <ATAPI::detectMedia()>
c0024afa:	31 c0                	xor    eax,eax
c0024afc:	83 c4 18             	add    esp,0x18
c0024aff:	5b                   	pop    ebx
c0024b00:	c3                   	ret    
c0024b01:	90                   	nop

c0024b02 <ATAPI::read(unsigned long long, int, void*)>:
c0024b02:	55                   	push   ebp
c0024b03:	57                   	push   edi
c0024b04:	56                   	push   esi
c0024b05:	53                   	push   ebx
c0024b06:	83 ec 1c             	sub    esp,0x1c
c0024b09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b15:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b1c:	74 41                	je     c0024b5f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b1e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b22:	b9 03 00 00 00       	mov    ecx,0x3
c0024b27:	fc                   	cld    
c0024b28:	31 c0                	xor    eax,eax
c0024b2a:	86 fb                	xchg   bl,bh
c0024b2c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b2e:	c1 c3 10             	rol    ebx,0x10
c0024b31:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b36:	89 e8                	mov    eax,ebp
c0024b38:	86 fb                	xchg   bl,bh
c0024b3a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b3e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b42:	50                   	push   eax
c0024b43:	50                   	push   eax
c0024b44:	55                   	push   ebp
c0024b45:	c1 e5 0b             	shl    ebp,0xb
c0024b48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b4c:	6a 00                	push   0x0
c0024b4e:	55                   	push   ebp
c0024b4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b53:	50                   	push   eax
c0024b54:	56                   	push   esi
c0024b55:	e8 12 fb ff ff       	call   c002466c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b5a:	83 c4 20             	add    esp,0x20
c0024b5d:	eb 1a                	jmp    c0024b79 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b5f:	83 ec 0c             	sub    esp,0xc
c0024b62:	56                   	push   esi
c0024b63:	e8 56 fe ff ff       	call   c00249be <ATAPI::detectMedia()>
c0024b68:	83 c4 10             	add    esp,0x10
c0024b6b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b72:	75 aa                	jne    c0024b1e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b74:	b8 02 00 00 00       	mov    eax,0x2
c0024b79:	83 c4 1c             	add    esp,0x1c
c0024b7c:	5b                   	pop    ebx
c0024b7d:	5e                   	pop    esi
c0024b7e:	5f                   	pop    edi
c0024b7f:	5d                   	pop    ebp
c0024b80:	c3                   	ret    
c0024b81:	90                   	nop

c0024b82 <SATA::close(int, int, void*)>:
c0024b82:	83 ec 0c             	sub    esp,0xc
c0024b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b8f:	85 c0                	test   eax,eax
c0024b91:	74 0c                	je     c0024b9f <SATA::close(int, int, void*)+0x1d>
c0024b93:	83 ec 0c             	sub    esp,0xc
c0024b96:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b98:	50                   	push   eax
c0024b99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b9c:	83 c4 10             	add    esp,0x10
c0024b9f:	31 c0                	xor    eax,eax
c0024ba1:	83 c4 0c             	add    esp,0xc
c0024ba4:	c3                   	ret    
c0024ba5:	90                   	nop

c0024ba6 <SATA::powerSaving(PowerSavingLevel)>:
c0024ba6:	c3                   	ret    
c0024ba7:	90                   	nop

c0024ba8 <SATA::open(int, int, void*)>:
c0024ba8:	56                   	push   esi
c0024ba9:	53                   	push   ebx
c0024baa:	50                   	push   eax
c0024bab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bb3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bbd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bc3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bd1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bdb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024be1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024be8:	e8 f5 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bed:	89 c6                	mov    esi,eax
c0024bef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bf5:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bfb:	e8 e2 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c00:	39 c6                	cmp    esi,eax
c0024c02:	74 10                	je     c0024c14 <SATA::open(int, int, void*)+0x6c>
c0024c04:	83 ec 0c             	sub    esp,0xc
c0024c07:	68 c8 cf 02 c0       	push   0xc002cfc8
c0024c0c:	e8 a2 59 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0024c11:	83 c4 10             	add    esp,0x10
c0024c14:	83 ec 0c             	sub    esp,0xc
c0024c17:	6a 02                	push   0x2
c0024c19:	e8 b7 cf fe ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c0024c1e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c24:	e8 15 d2 fe ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0024c29:	6a 03                	push   0x3
c0024c2b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c31:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c37:	50                   	push   eax
c0024c38:	e8 3d d7 fe ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c3d:	83 c4 14             	add    esp,0x14
c0024c40:	53                   	push   ebx
c0024c41:	e8 7e fb fe ff       	call   c00147c4 <PhysicalDisk::startCache()>
c0024c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c49:	e8 ec 1c ff ff       	call   c001693a <createPartitionsForDisk(PhysicalDisk*)>
c0024c4e:	83 c4 14             	add    esp,0x14
c0024c51:	31 c0                	xor    eax,eax
c0024c53:	5b                   	pop    ebx
c0024c54:	5e                   	pop    esi
c0024c55:	c3                   	ret    

c0024c56 <SATA::SATA()>:
c0024c56:	83 ec 0c             	sub    esp,0xc
c0024c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5d:	83 ec 04             	sub    esp,0x4
c0024c60:	68 00 02 00 00       	push   0x200
c0024c65:	68 dc cf 02 c0       	push   0xc002cfdc
c0024c6a:	50                   	push   eax
c0024c6b:	e8 ec fa fe ff       	call   c001475c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c70:	83 c4 10             	add    esp,0x10
c0024c73:	ba 4c d0 02 c0       	mov    edx,0xc002d04c
c0024c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c7c:	89 10                	mov    DWORD PTR [eax],edx
c0024c7e:	90                   	nop
c0024c7f:	83 c4 0c             	add    esp,0xc
c0024c82:	c3                   	ret    
c0024c83:	90                   	nop

c0024c84 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c84:	55                   	push   ebp
c0024c85:	57                   	push   edi
c0024c86:	56                   	push   esi
c0024c87:	53                   	push   ebx
c0024c88:	83 ec 2c             	sub    esp,0x2c
c0024c8b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c8f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c97:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c9f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ca8:	7e 10                	jle    c0024cba <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024caa:	83 ec 0c             	sub    esp,0xc
c0024cad:	68 ec cf 02 c0       	push   0xc002cfec
c0024cb2:	e8 fc 58 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0024cb7:	83 c4 10             	add    esp,0x10
c0024cba:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cc0:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cd0:	89 f0                	mov    eax,esi
c0024cd2:	c1 e0 07             	shl    eax,0x7
c0024cd5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cd9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ce3:	53                   	push   ebx
c0024ce4:	8d 46 02             	lea    eax,[esi+0x2]
c0024ce7:	53                   	push   ebx
c0024ce8:	c1 e0 07             	shl    eax,0x7
c0024ceb:	bb 01 00 00 00       	mov    ebx,0x1
c0024cf0:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cf4:	50                   	push   eax
c0024cf5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cfb:	e8 aa ef ff ff       	call   c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d04:	83 c4 10             	add    esp,0x10
c0024d07:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d0c:	0f 84 ce 01 00 00    	je     c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d12:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d16:	c1 e0 09             	shl    eax,0x9
c0024d19:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d22:	74 17                	je     c0024d3b <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d24:	51                   	push   ecx
c0024d25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d29:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d2d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d33:	e8 0c ba fd ff       	call   c0000744 <memcpy>
c0024d38:	83 c4 10             	add    esp,0x10
c0024d3b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d41:	8d 46 02             	lea    eax,[esi+0x2]
c0024d44:	c1 e0 07             	shl    eax,0x7
c0024d47:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d4d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d53:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d59:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d5d:	c1 e1 05             	shl    ecx,0x5
c0024d60:	01 c8                	add    eax,ecx
c0024d62:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d66:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d68:	83 e1 01             	and    ecx,0x1
c0024d6b:	83 e3 bf             	and    ebx,0xffffffbf
c0024d6e:	c1 e1 06             	shl    ecx,0x6
c0024d71:	09 d9                	or     ecx,ebx
c0024d73:	88 08                	mov    BYTE PTR [eax],cl
c0024d75:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d77:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d7d:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d83:	89 08                	mov    DWORD PTR [eax],ecx
c0024d85:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d8b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d91:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d97:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d9a:	52                   	push   edx
c0024d9b:	68 90 00 00 00       	push   0x90
c0024da0:	6a 00                	push   0x0
c0024da2:	53                   	push   ebx
c0024da3:	e8 d0 b9 fd ff       	call   c0000778 <memset>
c0024da8:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dae:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024db2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024db8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dc0:	83 c4 10             	add    esp,0x10
c0024dc3:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dc6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dcc:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dd2:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dd7:	09 c8                	or     eax,ecx
c0024dd9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ddf:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024de2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024de9:	66 25 00 7f          	and    ax,0x7f00
c0024ded:	66 0d 27 80          	or     ax,0x8027
c0024df1:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024df6:	66 89 03             	mov    WORD PTR [ebx],ax
c0024df9:	19 c0                	sbb    eax,eax
c0024dfb:	83 e0 f0             	and    eax,0xfffffff0
c0024dfe:	83 c0 35             	add    eax,0x35
c0024e01:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e04:	89 f8                	mov    eax,edi
c0024e06:	c1 e8 10             	shr    eax,0x10
c0024e09:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e0c:	89 f8                	mov    eax,edi
c0024e0e:	c1 e8 18             	shr    eax,0x18
c0024e11:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e14:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e18:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e1f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e22:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e26:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e2a:	89 f3                	mov    ebx,esi
c0024e2c:	31 c0                	xor    eax,eax
c0024e2e:	c1 e3 07             	shl    ebx,0x7
c0024e31:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e35:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e3b:	80 e1 88             	and    cl,0x88
c0024e3e:	74 0a                	je     c0024e4a <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e40:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e45:	74 0a                	je     c0024e51 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e47:	40                   	inc    eax
c0024e48:	eb eb                	jmp    c0024e35 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e4a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e4f:	75 0a                	jne    c0024e5b <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e51:	83 ec 0c             	sub    esp,0xc
c0024e54:	68 25 d0 02 c0       	push   0xc002d025
c0024e59:	eb 56                	jmp    c0024eb1 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e5b:	b8 01 00 00 00       	mov    eax,0x1
c0024e60:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e64:	c1 e6 07             	shl    esi,0x7
c0024e67:	d3 e0                	shl    eax,cl
c0024e69:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e6d:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e73:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e79:	85 c8                	test   eax,ecx
c0024e7b:	74 20                	je     c0024e9d <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e7d:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e83:	0f ba e1 1e          	bt     ecx,0x1e
c0024e87:	73 ea                	jae    c0024e73 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e89:	83 ec 0c             	sub    esp,0xc
c0024e8c:	31 db                	xor    ebx,ebx
c0024e8e:	68 33 d0 02 c0       	push   0xc002d033
c0024e93:	e8 1b 57 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0024e98:	83 c4 10             	add    esp,0x10
c0024e9b:	eb 43                	jmp    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e9d:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ea3:	0f ba e0 1e          	bt     eax,0x1e
c0024ea7:	73 17                	jae    c0024ec0 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ea9:	83 ec 0c             	sub    esp,0xc
c0024eac:	68 33 d0 02 c0       	push   0xc002d033
c0024eb1:	e8 fd 56 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0024eb6:	bb 01 00 00 00       	mov    ebx,0x1
c0024ebb:	83 c4 10             	add    esp,0x10
c0024ebe:	eb 20                	jmp    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec0:	31 db                	xor    ebx,ebx
c0024ec2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ec7:	75 17                	jne    c0024ee0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec9:	50                   	push   eax
c0024eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ece:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ed4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ed8:	e8 67 b8 fd ff       	call   c0000744 <memcpy>
c0024edd:	83 c4 10             	add    esp,0x10
c0024ee0:	83 c4 2c             	add    esp,0x2c
c0024ee3:	89 d8                	mov    eax,ebx
c0024ee5:	5b                   	pop    ebx
c0024ee6:	5e                   	pop    esi
c0024ee7:	5f                   	pop    edi
c0024ee8:	5d                   	pop    ebp
c0024ee9:	c3                   	ret    

c0024eea <SATA::read(unsigned long long, int, void*)>:
c0024eea:	57                   	push   edi
c0024eeb:	b8 04 00 00 00       	mov    eax,0x4
c0024ef0:	56                   	push   esi
c0024ef1:	53                   	push   ebx
c0024ef2:	83 ec 10             	sub    esp,0x10
c0024ef5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ef9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024efd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f00:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f08:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f0e:	77 3b                	ja     c0024f4b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f10:	b8 06 00 00 00       	mov    eax,0x6
c0024f15:	85 d2                	test   edx,edx
c0024f17:	74 32                	je     c0024f4b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f19:	50                   	push   eax
c0024f1a:	50                   	push   eax
c0024f1b:	6a 00                	push   0x0
c0024f1d:	52                   	push   edx
c0024f1e:	53                   	push   ebx
c0024f1f:	57                   	push   edi
c0024f20:	56                   	push   esi
c0024f21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f25:	e8 5a fd ff ff       	call   c0024c84 <SATA::access(unsigned long long, int, void*, bool)>
c0024f2a:	83 c4 20             	add    esp,0x20
c0024f2d:	85 c0                	test   eax,eax
c0024f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f33:	75 11                	jne    c0024f46 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f35:	01 1d e8 28 03 c0    	add    DWORD PTR ds:0xc00328e8,ebx
c0024f3b:	e8 ea ba fe ff       	call   c0010a2a <VgaText::updateDiskUsage()>
c0024f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f44:	eb 05                	jmp    c0024f4b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f46:	b8 01 00 00 00       	mov    eax,0x1
c0024f4b:	83 c4 10             	add    esp,0x10
c0024f4e:	5b                   	pop    ebx
c0024f4f:	5e                   	pop    esi
c0024f50:	5f                   	pop    edi
c0024f51:	c3                   	ret    

c0024f52 <SATA::write(unsigned long long, int, void*)>:
c0024f52:	55                   	push   ebp
c0024f53:	b8 04 00 00 00       	mov    eax,0x4
c0024f58:	57                   	push   edi
c0024f59:	56                   	push   esi
c0024f5a:	53                   	push   ebx
c0024f5b:	83 ec 1c             	sub    esp,0x1c
c0024f5e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f62:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f66:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f69:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f6d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f71:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f77:	77 56                	ja     c0024fcf <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f79:	b8 06 00 00 00       	mov    eax,0x6
c0024f7e:	85 ff                	test   edi,edi
c0024f80:	74 4d                	je     c0024fcf <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f82:	89 ee                	mov    esi,ebp
c0024f84:	c1 e6 09             	shl    esi,0x9
c0024f87:	01 fe                	add    esi,edi
c0024f89:	89 c8                	mov    eax,ecx
c0024f8b:	89 da                	mov    edx,ebx
c0024f8d:	83 c0 01             	add    eax,0x1
c0024f90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f94:	83 d2 00             	adc    edx,0x0
c0024f97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f9b:	50                   	push   eax
c0024f9c:	50                   	push   eax
c0024f9d:	6a 01                	push   0x1
c0024f9f:	57                   	push   edi
c0024fa0:	81 c7 00 02 00 00    	add    edi,0x200
c0024fa6:	6a 01                	push   0x1
c0024fa8:	53                   	push   ebx
c0024fa9:	51                   	push   ecx
c0024faa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fae:	e8 d1 fc ff ff       	call   c0024c84 <SATA::access(unsigned long long, int, void*, bool)>
c0024fb3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fb7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fbb:	83 c4 20             	add    esp,0x20
c0024fbe:	39 f7                	cmp    edi,esi
c0024fc0:	75 c7                	jne    c0024f89 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fc2:	01 2d e4 28 03 c0    	add    DWORD PTR ds:0xc00328e4,ebp
c0024fc8:	e8 5d ba fe ff       	call   c0010a2a <VgaText::updateDiskUsage()>
c0024fcd:	31 c0                	xor    eax,eax
c0024fcf:	83 c4 1c             	add    esp,0x1c
c0024fd2:	5b                   	pop    ebx
c0024fd3:	5e                   	pop    esi
c0024fd4:	5f                   	pop    edi
c0024fd5:	5d                   	pop    ebp
c0024fd6:	c3                   	ret    
c0024fd7:	90                   	nop

c0024fd8 <SATAPI::write(unsigned long long, int, void*)>:
c0024fd8:	b8 03 00 00 00       	mov    eax,0x3
c0024fdd:	c3                   	ret    

c0024fde <SATAPI::close(int, int, void*)>:
c0024fde:	83 ec 0c             	sub    esp,0xc
c0024fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024feb:	85 c0                	test   eax,eax
c0024fed:	74 0c                	je     c0024ffb <SATAPI::close(int, int, void*)+0x1d>
c0024fef:	83 ec 0c             	sub    esp,0xc
c0024ff2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ff4:	50                   	push   eax
c0024ff5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ff8:	83 c4 10             	add    esp,0x10
c0024ffb:	31 c0                	xor    eax,eax
c0024ffd:	83 c4 0c             	add    esp,0xc
c0025000:	c3                   	ret    
c0025001:	90                   	nop

c0025002 <SATAPI::SATAPI()>:
c0025002:	83 ec 0c             	sub    esp,0xc
c0025005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025009:	83 ec 04             	sub    esp,0x4
c002500c:	68 00 08 00 00       	push   0x800
c0025011:	68 7c d0 02 c0       	push   0xc002d07c
c0025016:	50                   	push   eax
c0025017:	e8 40 f7 fe ff       	call   c001475c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002501c:	83 c4 10             	add    esp,0x10
c002501f:	ba 28 d1 02 c0       	mov    edx,0xc002d128
c0025024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025028:	89 10                	mov    DWORD PTR [eax],edx
c002502a:	90                   	nop
c002502b:	83 c4 0c             	add    esp,0xc
c002502e:	c3                   	ret    
c002502f:	90                   	nop

c0025030 <SATAPI::diskRemoved()>:
c0025030:	83 ec 18             	sub    esp,0x18
c0025033:	68 88 d0 02 c0       	push   0xc002d088
c0025038:	e8 d5 de fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c002503d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025041:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025048:	83 c4 1c             	add    esp,0x1c
c002504b:	c3                   	ret    

c002504c <SATAPI::diskInserted()>:
c002504c:	53                   	push   ebx
c002504d:	83 ec 14             	sub    esp,0x14
c0025050:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025054:	68 9f d0 02 c0       	push   0xc002d09f
c0025059:	e8 b4 de fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c002505e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025068:	e8 57 f7 fe ff       	call   c00147c4 <PhysicalDisk::startCache()>
c002506d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025071:	83 c4 18             	add    esp,0x18
c0025074:	5b                   	pop    ebx
c0025075:	e9 c0 18 ff ff       	jmp    c001693a <createPartitionsForDisk(PhysicalDisk*)>

c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002507a:	55                   	push   ebp
c002507b:	57                   	push   edi
c002507c:	56                   	push   esi
c002507d:	53                   	push   ebx
c002507e:	83 ec 24             	sub    esp,0x24
c0025081:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025085:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025089:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002508f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025093:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025097:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002509d:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250a6:	c1 e3 07             	shl    ebx,0x7
c00250a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250ad:	89 f8                	mov    eax,edi
c00250af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250b3:	c1 e0 07             	shl    eax,0x7
c00250b6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250be:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250c8:	53                   	push   ebx
c00250c9:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250cf:	e8 d6 eb ff ff       	call   c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250d8:	83 c4 10             	add    esp,0x10
c00250db:	b8 01 00 00 00       	mov    eax,0x1
c00250e0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250e5:	0f 84 8a 01 00 00    	je     c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250eb:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250f3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250f9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025103:	c1 e1 05             	shl    ecx,0x5
c0025106:	01 c8                	add    eax,ecx
c0025108:	8b 08                	mov    ecx,DWORD PTR [eax]
c002510a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025110:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025116:	89 08                	mov    DWORD PTR [eax],ecx
c0025118:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002511e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025124:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002512a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002512d:	52                   	push   edx
c002512e:	68 90 00 00 00       	push   0x90
c0025133:	6a 00                	push   0x0
c0025135:	53                   	push   ebx
c0025136:	e8 3d b6 fd ff       	call   c0000778 <memset>
c002513b:	83 c4 0c             	add    esp,0xc
c002513e:	8d 43 40             	lea    eax,[ebx+0x40]
c0025141:	6a 0c                	push   0xc
c0025143:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025147:	50                   	push   eax
c0025148:	e8 f7 b5 fd ff       	call   c0000744 <memcpy>
c002514d:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025153:	89 ea                	mov    edx,ebp
c0025155:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002515b:	c1 ea 18             	shr    edx,0x18
c002515e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025162:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025165:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025168:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002516c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025172:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025178:	25 00 00 c0 ff       	and    eax,0xffc00000
c002517d:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025181:	09 c8                	or     eax,ecx
c0025183:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025187:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002518d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025190:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025197:	66 25 00 7f          	and    ax,0x7f00
c002519b:	66 0d 27 80          	or     ax,0x8027
c002519f:	66 89 03             	mov    WORD PTR [ebx],ax
c00251a2:	89 e8                	mov    eax,ebp
c00251a4:	c1 e8 10             	shr    eax,0x10
c00251a7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251aa:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251ae:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251bc:	83 c4 10             	add    esp,0x10
c00251bf:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251c7:	31 c0                	xor    eax,eax
c00251c9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251cf:	80 e1 88             	and    cl,0x88
c00251d2:	74 0a                	je     c00251de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251d4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251d9:	74 0a                	je     c00251e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251db:	40                   	inc    eax
c00251dc:	eb eb                	jmp    c00251c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251e3:	75 0f                	jne    c00251f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251e5:	83 ec 0c             	sub    esp,0xc
c00251e8:	68 25 d0 02 c0       	push   0xc002d025
c00251ed:	e8 c1 53 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c00251f2:	eb 3a                	jmp    c002522e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251f4:	b8 01 00 00 00       	mov    eax,0x1
c00251f9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251fd:	c1 e7 07             	shl    edi,0x7
c0025200:	d3 e0                	shl    eax,cl
c0025202:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025205:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002520b:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025211:	85 d0                	test   eax,edx
c0025213:	74 23                	je     c0025238 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025215:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002521b:	0f ba e2 1e          	bt     edx,0x1e
c002521f:	73 ea                	jae    c002520b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025221:	83 ec 0c             	sub    esp,0xc
c0025224:	68 b7 d0 02 c0       	push   0xc002d0b7
c0025229:	e8 e4 dc fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c002522e:	83 c4 10             	add    esp,0x10
c0025231:	b8 01 00 00 00       	mov    eax,0x1
c0025236:	eb 3d                	jmp    c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025238:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002523e:	0f ba e0 1e          	bt     eax,0x1e
c0025242:	73 0a                	jae    c002524e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025244:	83 ec 0c             	sub    esp,0xc
c0025247:	68 ca d0 02 c0       	push   0xc002d0ca
c002524c:	eb db                	jmp    c0025229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002524e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025253:	74 1e                	je     c0025273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025255:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002525a:	74 17                	je     c0025273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002525c:	50                   	push   eax
c002525d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025261:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025267:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002526b:	e8 d4 b4 fd ff       	call   c0000744 <memcpy>
c0025270:	83 c4 10             	add    esp,0x10
c0025273:	31 c0                	xor    eax,eax
c0025275:	83 c4 1c             	add    esp,0x1c
c0025278:	5b                   	pop    ebx
c0025279:	5e                   	pop    esi
c002527a:	5f                   	pop    edi
c002527b:	5d                   	pop    ebp
c002527c:	c3                   	ret    
c002527d:	90                   	nop

c002527e <SATAPI::eject()>:
c002527e:	57                   	push   edi
c002527f:	b9 03 00 00 00       	mov    ecx,0x3
c0025284:	53                   	push   ebx
c0025285:	83 ec 14             	sub    esp,0x14
c0025288:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002528c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025290:	fc                   	cld    
c0025291:	31 c0                	xor    eax,eax
c0025293:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025295:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002529a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002529f:	50                   	push   eax
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 00                	push   0x0
c00252a4:	6a 00                	push   0x0
c00252a6:	6a 00                	push   0x0
c00252a8:	6a 02                	push   0x2
c00252aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252ae:	50                   	push   eax
c00252af:	53                   	push   ebx
c00252b0:	e8 c5 fd ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252b5:	83 c4 14             	add    esp,0x14
c00252b8:	53                   	push   ebx
c00252b9:	e8 72 fd ff ff       	call   c0025030 <SATAPI::diskRemoved()>
c00252be:	83 c4 24             	add    esp,0x24
c00252c1:	31 c0                	xor    eax,eax
c00252c3:	5b                   	pop    ebx
c00252c4:	5f                   	pop    edi
c00252c5:	c3                   	ret    

c00252c6 <SATAPI::detectMedia()>:
c00252c6:	56                   	push   esi
c00252c7:	53                   	push   ebx
c00252c8:	83 ec 28             	sub    esp,0x28
c00252cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252cf:	6a 0c                	push   0xc
c00252d1:	6a 00                	push   0x0
c00252d3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252d7:	56                   	push   esi
c00252d8:	e8 9b b4 fd ff       	call   c0000778 <memset>
c00252dd:	83 c4 0c             	add    esp,0xc
c00252e0:	6a 00                	push   0x0
c00252e2:	6a 00                	push   0x0
c00252e4:	6a 00                	push   0x0
c00252e6:	6a 00                	push   0x0
c00252e8:	6a 00                	push   0x0
c00252ea:	56                   	push   esi
c00252eb:	53                   	push   ebx
c00252ec:	e8 89 fd ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252f1:	83 c4 1c             	add    esp,0x1c
c00252f4:	6a 0c                	push   0xc
c00252f6:	6a 00                	push   0x0
c00252f8:	56                   	push   esi
c00252f9:	e8 7a b4 fd ff       	call   c0000778 <memset>
c00252fe:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025303:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025308:	83 c4 0c             	add    esp,0xc
c002530b:	6a 01                	push   0x1
c002530d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025311:	50                   	push   eax
c0025312:	6a 00                	push   0x0
c0025314:	6a 00                	push   0x0
c0025316:	6a 12                	push   0x12
c0025318:	56                   	push   esi
c0025319:	53                   	push   ebx
c002531a:	e8 5b fd ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002531f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025323:	83 c4 20             	add    esp,0x20
c0025326:	83 e0 7f             	and    eax,0x7f
c0025329:	3c 70                	cmp    al,0x70
c002532b:	74 15                	je     c0025342 <SATAPI::detectMedia()+0x7c>
c002532d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025334:	75 0c                	jne    c0025342 <SATAPI::detectMedia()+0x7c>
c0025336:	83 ec 0c             	sub    esp,0xc
c0025339:	53                   	push   ebx
c002533a:	e8 0d fd ff ff       	call   c002504c <SATAPI::diskInserted()>
c002533f:	83 c4 10             	add    esp,0x10
c0025342:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025346:	83 e0 0f             	and    eax,0xf
c0025349:	3c 02                	cmp    al,0x2
c002534b:	75 1b                	jne    c0025368 <SATAPI::detectMedia()+0xa2>
c002534d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025352:	75 2d                	jne    c0025381 <SATAPI::detectMedia()+0xbb>
c0025354:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002535b:	74 24                	je     c0025381 <SATAPI::detectMedia()+0xbb>
c002535d:	83 ec 0c             	sub    esp,0xc
c0025360:	53                   	push   ebx
c0025361:	e8 ca fc ff ff       	call   c0025030 <SATAPI::diskRemoved()>
c0025366:	eb 16                	jmp    c002537e <SATAPI::detectMedia()+0xb8>
c0025368:	84 c0                	test   al,al
c002536a:	75 15                	jne    c0025381 <SATAPI::detectMedia()+0xbb>
c002536c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025373:	75 0c                	jne    c0025381 <SATAPI::detectMedia()+0xbb>
c0025375:	83 ec 0c             	sub    esp,0xc
c0025378:	53                   	push   ebx
c0025379:	e8 ce fc ff ff       	call   c002504c <SATAPI::diskInserted()>
c002537e:	83 c4 10             	add    esp,0x10
c0025381:	83 c4 24             	add    esp,0x24
c0025384:	5b                   	pop    ebx
c0025385:	5e                   	pop    esi
c0025386:	c3                   	ret    
c0025387:	90                   	nop

c0025388 <SATAPI::open(int, int, void*)>:
c0025388:	56                   	push   esi
c0025389:	53                   	push   ebx
c002538a:	50                   	push   eax
c002538b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002538f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025393:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002539d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253a3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253bb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253c1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253c8:	e8 15 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253cd:	89 c6                	mov    esi,eax
c00253cf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253d5:	81 c6 00 10 00 00    	add    esi,0x1000
c00253db:	e8 02 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253e0:	39 c6                	cmp    esi,eax
c00253e2:	74 10                	je     c00253f4 <SATAPI::open(int, int, void*)+0x6c>
c00253e4:	83 ec 0c             	sub    esp,0xc
c00253e7:	68 df d0 02 c0       	push   0xc002d0df
c00253ec:	e8 c2 51 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c00253f1:	83 c4 10             	add    esp,0x10
c00253f4:	83 ec 0c             	sub    esp,0xc
c00253f7:	6a 02                	push   0x2
c00253f9:	e8 d7 c7 fe ff       	call   c0011bd5 <Virt::allocateKernelVirtualPages(int)>
c00253fe:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025404:	e8 35 ca fe ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0025409:	6a 03                	push   0x3
c002540b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025411:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025417:	50                   	push   eax
c0025418:	e8 5d cf fe ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c002541d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025424:	83 c4 14             	add    esp,0x14
c0025427:	53                   	push   ebx
c0025428:	e8 99 fe ff ff       	call   c00252c6 <SATAPI::detectMedia()>
c002542d:	83 c4 14             	add    esp,0x14
c0025430:	31 c0                	xor    eax,eax
c0025432:	5b                   	pop    ebx
c0025433:	5e                   	pop    esi
c0025434:	c3                   	ret    
c0025435:	90                   	nop

c0025436 <SATAPI::read(unsigned long long, int, void*)>:
c0025436:	55                   	push   ebp
c0025437:	57                   	push   edi
c0025438:	56                   	push   esi
c0025439:	53                   	push   ebx
c002543a:	83 ec 1c             	sub    esp,0x1c
c002543d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025441:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025445:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025449:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025450:	74 19                	je     c002546b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025452:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025457:	7e 2e                	jle    c0025487 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025459:	83 ec 0c             	sub    esp,0xc
c002545c:	68 f5 d0 02 c0       	push   0xc002d0f5
c0025461:	e8 4d 51 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0025466:	83 c4 10             	add    esp,0x10
c0025469:	eb 1c                	jmp    c0025487 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002546b:	83 ec 0c             	sub    esp,0xc
c002546e:	55                   	push   ebp
c002546f:	e8 52 fe ff ff       	call   c00252c6 <SATAPI::detectMedia()>
c0025474:	83 c4 10             	add    esp,0x10
c0025477:	b8 02 00 00 00       	mov    eax,0x2
c002547c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025483:	75 cd                	jne    c0025452 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025485:	eb 49                	jmp    c00254d0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025487:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002548b:	b9 03 00 00 00       	mov    ecx,0x3
c0025490:	fc                   	cld    
c0025491:	31 c0                	xor    eax,eax
c0025493:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025495:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002549a:	89 d8                	mov    eax,ebx
c002549c:	86 e0                	xchg   al,ah
c002549e:	c1 c0 10             	rol    eax,0x10
c00254a1:	86 e0                	xchg   al,ah
c00254a3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254a7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254ab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254af:	50                   	push   eax
c00254b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254b8:	56                   	push   esi
c00254b9:	53                   	push   ebx
c00254ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254be:	c1 e0 0b             	shl    eax,0xb
c00254c1:	50                   	push   eax
c00254c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254c6:	50                   	push   eax
c00254c7:	55                   	push   ebp
c00254c8:	e8 ad fb ff ff       	call   c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254cd:	83 c4 20             	add    esp,0x20
c00254d0:	83 c4 1c             	add    esp,0x1c
c00254d3:	5b                   	pop    ebx
c00254d4:	5e                   	pop    esi
c00254d5:	5f                   	pop    edi
c00254d6:	5d                   	pop    ebp
c00254d7:	c3                   	ret    

c00254d8 <AVX::open(int, int, void*)>:
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	e8 48 11 00 00       	call   c0026628 <avxInit>
c00254e0:	b8 00 00 00 00       	mov    eax,0x0
c00254e5:	83 c4 0c             	add    esp,0xc
c00254e8:	c3                   	ret    
c00254e9:	90                   	nop

c00254ea <AVX::close(int, int, void*)>:
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	e8 37 11 00 00       	call   c0026629 <avxClose>
c00254f2:	b8 00 00 00 00       	mov    eax,0x0
c00254f7:	83 c4 0c             	add    esp,0xc
c00254fa:	c3                   	ret    
c00254fb:	90                   	nop

c00254fc <AVX::available()>:
c00254fc:	83 ec 0c             	sub    esp,0xc
c00254ff:	e8 1c 11 00 00       	call   c0026620 <avxDetect>
c0025504:	85 c0                	test   eax,eax
c0025506:	0f 95 c0             	setne  al
c0025509:	83 c4 0c             	add    esp,0xc
c002550c:	c3                   	ret    
c002550d:	90                   	nop

c002550e <AVX::save(void*)>:
c002550e:	83 ec 0c             	sub    esp,0xc
c0025511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	50                   	push   eax
c0025519:	e8 08 11 00 00       	call   c0026626 <avxSave>
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	90                   	nop
c0025522:	83 c4 0c             	add    esp,0xc
c0025525:	c3                   	ret    

c0025526 <AVX::load(void*)>:
c0025526:	83 ec 0c             	sub    esp,0xc
c0025529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002552d:	83 ec 0c             	sub    esp,0xc
c0025530:	50                   	push   eax
c0025531:	e8 f1 10 00 00       	call   c0026627 <avxLoad>
c0025536:	83 c4 10             	add    esp,0x10
c0025539:	90                   	nop
c002553a:	83 c4 0c             	add    esp,0xc
c002553d:	c3                   	ret    

c002553e <AVX::AVX()>:
c002553e:	83 ec 0c             	sub    esp,0xc
c0025541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025545:	83 ec 08             	sub    esp,0x8
c0025548:	68 58 d1 02 c0       	push   0xc002d158
c002554d:	50                   	push   eax
c002554e:	e8 e7 f2 fe ff       	call   c001483a <FPU::FPU(char const*)>
c0025553:	83 c4 10             	add    esp,0x10
c0025556:	ba 68 d1 02 c0       	mov    edx,0xc002d168
c002555b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555f:	89 10                	mov    DWORD PTR [eax],edx
c0025561:	90                   	nop
c0025562:	83 c4 0c             	add    esp,0xc
c0025565:	c3                   	ret    

c0025566 <MMX::available()>:
c0025566:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c002556b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025571:	83 e0 20             	and    eax,0x20
c0025574:	84 c0                	test   al,al
c0025576:	0f 95 c0             	setne  al
c0025579:	c3                   	ret    

c002557a <MMX::open(int, int, void*)>:
c002557a:	83 ec 0c             	sub    esp,0xc
c002557d:	e8 2a 11 00 00       	call   c00266ac <x87Init>
c0025582:	b8 00 00 00 00       	mov    eax,0x0
c0025587:	83 c4 0c             	add    esp,0xc
c002558a:	c3                   	ret    
c002558b:	90                   	nop

c002558c <MMX::close(int, int, void*)>:
c002558c:	83 ec 0c             	sub    esp,0xc
c002558f:	e8 32 11 00 00       	call   c00266c6 <x87Close>
c0025594:	b8 00 00 00 00       	mov    eax,0x0
c0025599:	83 c4 0c             	add    esp,0xc
c002559c:	c3                   	ret    
c002559d:	90                   	nop

c002559e <MMX::save(void*)>:
c002559e:	83 ec 0c             	sub    esp,0xc
c00255a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a5:	83 ec 0c             	sub    esp,0xc
c00255a8:	50                   	push   eax
c00255a9:	e8 f3 10 00 00       	call   c00266a1 <x87Save>
c00255ae:	83 c4 10             	add    esp,0x10
c00255b1:	90                   	nop
c00255b2:	83 c4 0c             	add    esp,0xc
c00255b5:	c3                   	ret    

c00255b6 <MMX::load(void*)>:
c00255b6:	83 ec 0c             	sub    esp,0xc
c00255b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255bd:	83 ec 0c             	sub    esp,0xc
c00255c0:	50                   	push   eax
c00255c1:	e8 e1 10 00 00       	call   c00266a7 <x87Load>
c00255c6:	83 c4 10             	add    esp,0x10
c00255c9:	90                   	nop
c00255ca:	83 c4 0c             	add    esp,0xc
c00255cd:	c3                   	ret    

c00255ce <MMX::MMX()>:
c00255ce:	83 ec 0c             	sub    esp,0xc
c00255d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d5:	83 ec 08             	sub    esp,0x8
c00255d8:	68 98 d1 02 c0       	push   0xc002d198
c00255dd:	50                   	push   eax
c00255de:	e8 57 f2 fe ff       	call   c001483a <FPU::FPU(char const*)>
c00255e3:	83 c4 10             	add    esp,0x10
c00255e6:	ba a8 d1 02 c0       	mov    edx,0xc002d1a8
c00255eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ef:	89 10                	mov    DWORD PTR [eax],edx
c00255f1:	90                   	nop
c00255f2:	83 c4 0c             	add    esp,0xc
c00255f5:	c3                   	ret    

c00255f6 <SSE::open(int, int, void*)>:
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	e8 66 10 00 00       	call   c0026664 <sseInit>
c00255fe:	b8 00 00 00 00       	mov    eax,0x0
c0025603:	83 c4 0c             	add    esp,0xc
c0025606:	c3                   	ret    
c0025607:	90                   	nop

c0025608 <SSE::close(int, int, void*)>:
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	e8 64 10 00 00       	call   c0026674 <sseClose>
c0025610:	b8 00 00 00 00       	mov    eax,0x0
c0025615:	83 c4 0c             	add    esp,0xc
c0025618:	c3                   	ret    
c0025619:	90                   	nop

c002561a <SSE::available()>:
c002561a:	83 ec 1c             	sub    esp,0x1c
c002561d:	e8 1e 10 00 00       	call   c0026640 <absolutelyNoChanceInHell>
c0025622:	85 c0                	test   eax,eax
c0025624:	0f 95 c0             	setne  al
c0025627:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002562b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002562f:	83 c4 1c             	add    esp,0x1c
c0025632:	c3                   	ret    
c0025633:	90                   	nop

c0025634 <SSE::save(void*)>:
c0025634:	83 ec 0c             	sub    esp,0xc
c0025637:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002563b:	83 ec 0c             	sub    esp,0xc
c002563e:	50                   	push   eax
c002563f:	e8 14 10 00 00       	call   c0026658 <sseSave>
c0025644:	83 c4 10             	add    esp,0x10
c0025647:	90                   	nop
c0025648:	83 c4 0c             	add    esp,0xc
c002564b:	c3                   	ret    

c002564c <SSE::load(void*)>:
c002564c:	83 ec 0c             	sub    esp,0xc
c002564f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025653:	83 ec 0c             	sub    esp,0xc
c0025656:	50                   	push   eax
c0025657:	e8 02 10 00 00       	call   c002665e <sseLoad>
c002565c:	83 c4 10             	add    esp,0x10
c002565f:	90                   	nop
c0025660:	83 c4 0c             	add    esp,0xc
c0025663:	c3                   	ret    

c0025664 <SSE::SSE()>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566b:	83 ec 08             	sub    esp,0x8
c002566e:	68 d8 d1 02 c0       	push   0xc002d1d8
c0025673:	50                   	push   eax
c0025674:	e8 c1 f1 fe ff       	call   c001483a <FPU::FPU(char const*)>
c0025679:	83 c4 10             	add    esp,0x10
c002567c:	ba e8 d1 02 c0       	mov    edx,0xc002d1e8
c0025681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025685:	89 10                	mov    DWORD PTR [eax],edx
c0025687:	90                   	nop
c0025688:	83 c4 0c             	add    esp,0xc
c002568b:	c3                   	ret    

c002568c <x87::open(int, int, void*)>:
c002568c:	83 ec 0c             	sub    esp,0xc
c002568f:	e8 18 10 00 00       	call   c00266ac <x87Init>
c0025694:	b8 00 00 00 00       	mov    eax,0x0
c0025699:	83 c4 0c             	add    esp,0xc
c002569c:	c3                   	ret    
c002569d:	90                   	nop

c002569e <x87::close(int, int, void*)>:
c002569e:	83 ec 0c             	sub    esp,0xc
c00256a1:	e8 20 10 00 00       	call   c00266c6 <x87Close>
c00256a6:	b8 00 00 00 00       	mov    eax,0x0
c00256ab:	83 c4 0c             	add    esp,0xc
c00256ae:	c3                   	ret    
c00256af:	90                   	nop

c00256b0 <x87::available()>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	e8 ce 0f 00 00       	call   c0026686 <x87Detect>
c00256b8:	85 c0                	test   eax,eax
c00256ba:	0f 95 c0             	setne  al
c00256bd:	83 c4 0c             	add    esp,0xc
c00256c0:	c3                   	ret    
c00256c1:	90                   	nop

c00256c2 <x87::save(void*)>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c9:	83 ec 0c             	sub    esp,0xc
c00256cc:	50                   	push   eax
c00256cd:	e8 cf 0f 00 00       	call   c00266a1 <x87Save>
c00256d2:	83 c4 10             	add    esp,0x10
c00256d5:	90                   	nop
c00256d6:	83 c4 0c             	add    esp,0xc
c00256d9:	c3                   	ret    

c00256da <x87::load(void*)>:
c00256da:	83 ec 0c             	sub    esp,0xc
c00256dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256e1:	83 ec 0c             	sub    esp,0xc
c00256e4:	50                   	push   eax
c00256e5:	e8 bd 0f 00 00       	call   c00266a7 <x87Load>
c00256ea:	83 c4 10             	add    esp,0x10
c00256ed:	90                   	nop
c00256ee:	83 c4 0c             	add    esp,0xc
c00256f1:	c3                   	ret    

c00256f2 <x87::x87()>:
c00256f2:	83 ec 0c             	sub    esp,0xc
c00256f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f9:	83 ec 08             	sub    esp,0x8
c00256fc:	68 18 d2 02 c0       	push   0xc002d218
c0025701:	50                   	push   eax
c0025702:	e8 33 f1 fe ff       	call   c001483a <FPU::FPU(char const*)>
c0025707:	83 c4 10             	add    esp,0x10
c002570a:	ba 28 d2 02 c0       	mov    edx,0xc002d228
c002570f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025713:	89 10                	mov    DWORD PTR [eax],edx
c0025715:	90                   	nop
c0025716:	83 c4 0c             	add    esp,0xc
c0025719:	c3                   	ret    

c002571a <APIC::disable()>:
c002571a:	90                   	nop
c002571b:	c3                   	ret    

c002571c <APIC::close(int, int, void*)>:
c002571c:	55                   	push   ebp
c002571d:	89 e5                	mov    ebp,esp
c002571f:	83 ec 08             	sub    esp,0x8
c0025722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025725:	8b 00                	mov    eax,DWORD PTR [eax]
c0025727:	83 c0 3c             	add    eax,0x3c
c002572a:	8b 00                	mov    eax,DWORD PTR [eax]
c002572c:	83 ec 0c             	sub    esp,0xc
c002572f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025732:	ff d0                	call   eax
c0025734:	83 c4 10             	add    esp,0x10
c0025737:	b8 00 00 00 00       	mov    eax,0x0
c002573c:	c9                   	leave  
c002573d:	c3                   	ret    

c002573e <IOAPIC::close(int, int, void*)>:
c002573e:	b8 00 00 00 00       	mov    eax,0x0
c0025743:	c3                   	ret    

c0025744 <APIC::io_wait()>:
c0025744:	eb 00                	jmp    c0025746 <APIC::io_wait()+0x2>
c0025746:	eb 00                	jmp    c0025748 <APIC::io_wait()+0x4>
c0025748:	90                   	nop
c0025749:	c3                   	ret    

c002574a <APIC::getBase()>:
c002574a:	55                   	push   ebp
c002574b:	89 e5                	mov    ebp,esp
c002574d:	83 ec 18             	sub    esp,0x18
c0025750:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0025755:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002575b:	83 e0 08             	and    eax,0x8
c002575e:	84 c0                	test   al,al
c0025760:	75 07                	jne    c0025769 <APIC::getBase()+0x1f>
c0025762:	b8 00 00 00 00       	mov    eax,0x0
c0025767:	eb 21                	jmp    c002578a <APIC::getBase()+0x40>
c0025769:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c002576e:	83 ec 08             	sub    esp,0x8
c0025771:	6a 1b                	push   0x1b
c0025773:	50                   	push   eax
c0025774:	e8 6f 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025779:	83 c4 10             	add    esp,0x10
c002577c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002577f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025782:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025785:	25 00 f0 ff ff       	and    eax,0xfffff000
c002578a:	c9                   	leave  
c002578b:	c3                   	ret    

c002578c <APIC::eoi(unsigned char)>:
c002578c:	55                   	push   ebp
c002578d:	89 e5                	mov    ebp,esp
c002578f:	83 ec 28             	sub    esp,0x28
c0025792:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025795:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025798:	83 ec 0c             	sub    esp,0xc
c002579b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002579e:	e8 a7 ff ff ff       	call   c002574a <APIC::getBase()>
c00257a3:	83 c4 10             	add    esp,0x10
c00257a6:	05 b0 00 00 00       	add    eax,0xb0
c00257ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257b1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257b7:	90                   	nop
c00257b8:	c9                   	leave  
c00257b9:	c3                   	ret    

c00257ba <APIC::open(int, int, void*)>:
c00257ba:	55                   	push   ebp
c00257bb:	89 e5                	mov    ebp,esp
c00257bd:	57                   	push   edi
c00257be:	56                   	push   esi
c00257bf:	53                   	push   ebx
c00257c0:	83 ec 2c             	sub    esp,0x2c
c00257c3:	83 ec 0c             	sub    esp,0xc
c00257c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c9:	e8 7c ff ff ff       	call   c002574a <APIC::getBase()>
c00257ce:	83 c4 10             	add    esp,0x10
c00257d1:	89 c2                	mov    edx,eax
c00257d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257dc:	0f b6 f8             	movzx  edi,al
c00257df:	89 d0                	mov    eax,edx
c00257e1:	ba 00 00 00 00       	mov    edx,0x0
c00257e6:	89 c1                	mov    ecx,eax
c00257e8:	80 e5 ff             	and    ch,0xff
c00257eb:	89 cb                	mov    ebx,ecx
c00257ed:	0f b6 f2             	movzx  esi,dl
c00257f0:	89 d8                	mov    eax,ebx
c00257f2:	89 f2                	mov    edx,esi
c00257f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025802:	83 e0 00             	and    eax,0x0
c0025805:	09 d0                	or     eax,edx
c0025807:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025814:	8d 50 01             	lea    edx,[eax+0x1]
c0025817:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002581a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025820:	0f b6 d0             	movzx  edx,al
c0025823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025826:	83 c2 08             	add    edx,0x8
c0025829:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002582d:	0f b6 c9             	movzx  ecx,cl
c0025830:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025836:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002583a:	83 ec 0c             	sub    esp,0xc
c002583d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025840:	e8 05 ff ff ff       	call   c002574a <APIC::getBase()>
c0025845:	83 c4 10             	add    esp,0x10
c0025848:	05 f0 00 00 00       	add    eax,0xf0
c002584d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025850:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025853:	8b 00                	mov    eax,DWORD PTR [eax]
c0025855:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025858:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002585f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025866:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025869:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002586c:	89 10                	mov    DWORD PTR [eax],edx
c002586e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025875:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c002587a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002587d:	7d 7c                	jge    c00258fb <APIC::open(int, int, void*)+0x141>
c002587f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025882:	8b 04 85 80 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf180]
c0025889:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002588c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002588f:	8b 04 85 80 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf180]
c0025896:	c1 e8 08             	shr    eax,0x8
c0025899:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002589d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258a0:	8b 04 85 80 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf180]
c00258a7:	c1 e8 18             	shr    eax,0x18
c00258aa:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258ad:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258b1:	75 40                	jne    c00258f3 <APIC::open(int, int, void*)+0x139>
c00258b3:	83 ec 0c             	sub    esp,0xc
c00258b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b9:	e8 8c fe ff ff       	call   c002574a <APIC::getBase()>
c00258be:	83 c4 10             	add    esp,0x10
c00258c1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258c5:	75 07                	jne    c00258ce <APIC::open(int, int, void*)+0x114>
c00258c7:	ba 60 03 00 00       	mov    edx,0x360
c00258cc:	eb 05                	jmp    c00258d3 <APIC::open(int, int, void*)+0x119>
c00258ce:	ba 50 03 00 00       	mov    edx,0x350
c00258d3:	01 d0                	add    eax,edx
c00258d5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258db:	8b 00                	mov    eax,DWORD PTR [eax]
c00258dd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258e0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258e7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258eb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258ee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258f1:	89 10                	mov    DWORD PTR [eax],edx
c00258f3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258f6:	e9 7a ff ff ff       	jmp    c0025875 <APIC::open(int, int, void*)+0xbb>
c00258fb:	b8 00 00 00 00       	mov    eax,0x0
c0025900:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025903:	5b                   	pop    ebx
c0025904:	5e                   	pop    esi
c0025905:	5f                   	pop    edi
c0025906:	5d                   	pop    ebp
c0025907:	c3                   	ret    

c0025908 <IOAPIC::IOAPIC()>:
c0025908:	83 ec 0c             	sub    esp,0xc
c002590b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002590f:	83 ec 08             	sub    esp,0x8
c0025912:	68 58 d2 02 c0       	push   0xc002d258
c0025917:	50                   	push   eax
c0025918:	e8 0b ec fe ff       	call   c0014528 <Device::Device(char const*)>
c002591d:	83 c4 10             	add    esp,0x10
c0025920:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0025925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025929:	89 10                	mov    DWORD PTR [eax],edx
c002592b:	90                   	nop
c002592c:	83 c4 0c             	add    esp,0xc
c002592f:	c3                   	ret    

c0025930 <APIC::APIC()>:
c0025930:	53                   	push   ebx
c0025931:	83 ec 18             	sub    esp,0x18
c0025934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025938:	83 ec 08             	sub    esp,0x8
c002593b:	68 60 d2 02 c0       	push   0xc002d260
c0025940:	50                   	push   eax
c0025941:	e8 4e f3 fe ff       	call   c0014c94 <InterruptController::InterruptController(char const*)>
c0025946:	83 c4 10             	add    esp,0x10
c0025949:	ba 38 d3 02 c0       	mov    edx,0xc002d338
c002594e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025952:	89 10                	mov    DWORD PTR [eax],edx
c0025954:	a0 40 29 03 c0       	mov    al,ds:0xc0032940
c0025959:	83 f0 01             	xor    eax,0x1
c002595c:	84 c0                	test   al,al
c002595e:	0f 84 a1 00 00 00    	je     c0025a05 <APIC::APIC()+0xd5>
c0025964:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025969:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c002596e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025972:	0f 83 86 00 00 00    	jae    c00259fe <APIC::APIC()+0xce>
c0025978:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025980:	83 ec 0c             	sub    esp,0xc
c0025983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025987:	e8 b4 9e fe ff       	call   c000f840 <malloc>
c002598c:	83 c4 10             	add    esp,0x10
c002598f:	89 c3                	mov    ebx,eax
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	53                   	push   ebx
c0025995:	e8 6e ff ff ff       	call   c0025908 <IOAPIC::IOAPIC()>
c002599a:	83 c4 10             	add    esp,0x10
c002599d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259a1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259aa:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c00259b1:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c00259b6:	40                   	inc    eax
c00259b7:	a3 00 29 03 c0       	mov    ds:0xc0032900,eax
c00259bc:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00259c1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259c7:	83 ec 08             	sub    esp,0x8
c00259ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259ce:	50                   	push   eax
c00259cf:	e8 64 e9 fe ff       	call   c0014338 <Device::addChild(Device*)>
c00259d4:	83 c4 10             	add    esp,0x10
c00259d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259db:	8b 00                	mov    eax,DWORD PTR [eax]
c00259dd:	83 c0 08             	add    eax,0x8
c00259e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259e7:	6a 00                	push   0x0
c00259e9:	6a 00                	push   0x0
c00259eb:	52                   	push   edx
c00259ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259f0:	ff d0                	call   eax
c00259f2:	83 c4 10             	add    esp,0x10
c00259f5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259f9:	e9 6b ff ff ff       	jmp    c0025969 <APIC::APIC()+0x39>
c00259fe:	c6 05 40 29 03 c0 01 	mov    BYTE PTR ds:0xc0032940,0x1
c0025a05:	90                   	nop
c0025a06:	83 c4 18             	add    esp,0x18
c0025a09:	5b                   	pop    ebx
c0025a0a:	c3                   	ret    
c0025a0b:	90                   	nop

c0025a0c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a0c:	55                   	push   ebp
c0025a0d:	89 e5                	mov    ebp,esp
c0025a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a18:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a1b:	72 1d                	jb     c0025a3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a20:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a29:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a2f:	01 d0                	add    eax,edx
c0025a31:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a34:	73 04                	jae    c0025a3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a36:	b0 01                	mov    al,0x1
c0025a38:	eb 02                	jmp    c0025a3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a3a:	b0 00                	mov    al,0x0
c0025a3c:	5d                   	pop    ebp
c0025a3d:	c3                   	ret    

c0025a3e <IOAPIC::read(int)>:
c0025a3e:	55                   	push   ebp
c0025a3f:	89 e5                	mov    ebp,esp
c0025a41:	83 ec 10             	sub    esp,0x10
c0025a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a53:	0f b6 d0             	movzx  edx,al
c0025a56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a59:	89 10                	mov    DWORD PTR [eax],edx
c0025a5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a5e:	83 c0 10             	add    eax,0x10
c0025a61:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a63:	c9                   	leave  
c0025a64:	c3                   	ret    
c0025a65:	90                   	nop

c0025a66 <IOAPIC::open(int, int, void*)>:
c0025a66:	55                   	push   ebp
c0025a67:	89 e5                	mov    ebp,esp
c0025a69:	57                   	push   edi
c0025a6a:	56                   	push   esi
c0025a6b:	53                   	push   ebx
c0025a6c:	83 ec 0c             	sub    esp,0xc
c0025a6f:	83 ec 0c             	sub    esp,0xc
c0025a72:	68 8b d2 02 c0       	push   0xc002d28b
c0025a77:	e8 96 d4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0025a7c:	83 c4 10             	add    esp,0x10
c0025a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a94:	8b 14 85 60 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0a0]
c0025a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aad:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c0025ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025acf:	0f b6 f8             	movzx  edi,al
c0025ad2:	89 d0                	mov    eax,edx
c0025ad4:	ba 00 00 00 00       	mov    edx,0x0
c0025ad9:	89 c1                	mov    ecx,eax
c0025adb:	80 e5 ff             	and    ch,0xff
c0025ade:	89 cb                	mov    ebx,ecx
c0025ae0:	0f b6 f2             	movzx  esi,dl
c0025ae3:	89 d8                	mov    eax,ebx
c0025ae5:	89 f2                	mov    edx,esi
c0025ae7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aea:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aed:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025af1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025af5:	83 e0 00             	and    eax,0x0
c0025af8:	09 d0                	or     eax,edx
c0025afa:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b07:	8d 50 01             	lea    edx,[eax+0x1]
c0025b0a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b0d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b13:	0f b6 d0             	movzx  edx,al
c0025b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b19:	83 c2 08             	add    edx,0x8
c0025b1c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b20:	0f b6 c9             	movzx  ecx,cl
c0025b23:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b29:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b2d:	83 ec 08             	sub    esp,0x8
c0025b30:	6a 01                	push   0x1
c0025b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b35:	e8 04 ff ff ff       	call   c0025a3e <IOAPIC::read(int)>
c0025b3a:	83 c4 10             	add    esp,0x10
c0025b3d:	c1 f8 10             	sar    eax,0x10
c0025b40:	0f b6 c0             	movzx  eax,al
c0025b43:	8d 50 01             	lea    edx,[eax+0x1]
c0025b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b49:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b4f:	b8 00 00 00 00       	mov    eax,0x0
c0025b54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b57:	5b                   	pop    ebx
c0025b58:	5e                   	pop    esi
c0025b59:	5f                   	pop    edi
c0025b5a:	5d                   	pop    ebp
c0025b5b:	c3                   	ret    

c0025b5c <IOAPIC::write(int, int)>:
c0025b5c:	55                   	push   ebp
c0025b5d:	89 e5                	mov    ebp,esp
c0025b5f:	83 ec 10             	sub    esp,0x10
c0025b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b6b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b71:	0f b6 d0             	movzx  edx,al
c0025b74:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b77:	89 10                	mov    DWORD PTR [eax],edx
c0025b79:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b7c:	8d 50 10             	lea    edx,[eax+0x10]
c0025b7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b82:	89 02                	mov    DWORD PTR [edx],eax
c0025b84:	90                   	nop
c0025b85:	c9                   	leave  
c0025b86:	c3                   	ret    
c0025b87:	90                   	nop

c0025b88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b88:	55                   	push   ebp
c0025b89:	89 e5                	mov    ebp,esp
c0025b8b:	53                   	push   ebx
c0025b8c:	83 ec 2c             	sub    esp,0x2c
c0025b8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b92:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b95:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b98:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b9e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ba1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ba4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ba7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025baa:	88 d8                	mov    al,bl
c0025bac:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025baf:	88 c8                	mov    al,cl
c0025bb1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bb4:	88 d0                	mov    al,dl
c0025bb6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bb9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bbd:	83 c0 08             	add    eax,0x8
c0025bc0:	01 c0                	add    eax,eax
c0025bc2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bc5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bc9:	83 c0 08             	add    eax,0x8
c0025bcc:	01 c0                	add    eax,eax
c0025bce:	40                   	inc    eax
c0025bcf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bd2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bd5:	50                   	push   eax
c0025bd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bd9:	e8 60 fe ff ff       	call   c0025a3e <IOAPIC::read(int)>
c0025bde:	83 c4 08             	add    esp,0x8
c0025be1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025be4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025beb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bee:	c1 e0 18             	shl    eax,0x18
c0025bf1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bf4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bfa:	52                   	push   edx
c0025bfb:	50                   	push   eax
c0025bfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bff:	e8 58 ff ff ff       	call   c0025b5c <IOAPIC::write(int, int)>
c0025c04:	83 c4 0c             	add    esp,0xc
c0025c07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c0a:	50                   	push   eax
c0025c0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c0e:	e8 2b fe ff ff       	call   c0025a3e <IOAPIC::read(int)>
c0025c13:	83 c4 08             	add    esp,0x8
c0025c16:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c19:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c20:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c27:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c2e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c32:	74 09                	je     c0025c3d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c34:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c3b:	eb 07                	jmp    c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c3d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c44:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c48:	74 09                	je     c0025c53 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c4a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c51:	eb 07                	jmp    c0025c5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c53:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c5a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c61:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c65:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c6e:	52                   	push   edx
c0025c6f:	50                   	push   eax
c0025c70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c73:	e8 e4 fe ff ff       	call   c0025b5c <IOAPIC::write(int, int)>
c0025c78:	83 c4 0c             	add    esp,0xc
c0025c7b:	90                   	nop
c0025c7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c7f:	c9                   	leave  
c0025c80:	c3                   	ret    
c0025c81:	90                   	nop

c0025c82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c82:	55                   	push   ebp
c0025c83:	89 e5                	mov    ebp,esp
c0025c85:	57                   	push   edi
c0025c86:	56                   	push   esi
c0025c87:	53                   	push   ebx
c0025c88:	83 ec 2c             	sub    esp,0x2c
c0025c8b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c8e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c91:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c95:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c99:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c9d:	74 5a                	je     c0025cf9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c9f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ca3:	7f 44                	jg     c0025ce9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ca5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca8:	05 e0 d7 02 c0       	add    eax,0xc002d7e0
c0025cad:	8a 00                	mov    al,BYTE PTR [eax]
c0025caf:	0f b6 c0             	movzx  eax,al
c0025cb2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cb5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb8:	66 8b 84 00 00 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf100]
c0025cc0:	0f b7 c0             	movzx  eax,ax
c0025cc3:	83 e0 02             	and    eax,0x2
c0025cc6:	85 c0                	test   eax,eax
c0025cc8:	74 04                	je     c0025cce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cca:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd1:	66 8b 84 00 00 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf100]
c0025cd9:	0f b7 c0             	movzx  eax,ax
c0025cdc:	83 e0 08             	and    eax,0x8
c0025cdf:	85 c0                	test   eax,eax
c0025ce1:	74 16                	je     c0025cf9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ce7:	eb 10                	jmp    c0025cf9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce9:	83 ec 0c             	sub    esp,0xc
c0025cec:	68 9c d2 02 c0       	push   0xc002d29c
c0025cf1:	e8 bd 48 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0025cf6:	83 c4 10             	add    esp,0x10
c0025cf9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cfd:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0025d02:	83 ec 08             	sub    esp,0x8
c0025d05:	50                   	push   eax
c0025d06:	68 d4 d2 02 c0       	push   0xc002d2d4
c0025d0b:	e8 02 d2 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0025d10:	83 c4 10             	add    esp,0x10
c0025d13:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d1a:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0025d1f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d22:	7d 67                	jge    c0025d8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d27:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0025d2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d31:	83 ec 08             	sub    esp,0x8
c0025d34:	52                   	push   edx
c0025d35:	50                   	push   eax
c0025d36:	e8 d1 fc ff ff       	call   c0025a0c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d3b:	83 c4 10             	add    esp,0x10
c0025d3e:	84 c0                	test   al,al
c0025d40:	74 44                	je     c0025d86 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d45:	8b 1c 85 20 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6e0]
c0025d4c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d50:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d53:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d5a:	83 c0 20             	add    eax,0x20
c0025d5d:	0f b6 f0             	movzx  esi,al
c0025d60:	b8 00 00 00 00       	mov    eax,0x0
c0025d65:	99                   	cdq    
c0025d66:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d69:	0f b6 c9             	movzx  ecx,cl
c0025d6c:	83 ec 04             	sub    esp,0x4
c0025d6f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d72:	57                   	push   edi
c0025d73:	56                   	push   esi
c0025d74:	52                   	push   edx
c0025d75:	50                   	push   eax
c0025d76:	51                   	push   ecx
c0025d77:	53                   	push   ebx
c0025d78:	e8 0b fe ff ff       	call   c0025b88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d7d:	83 c4 20             	add    esp,0x20
c0025d80:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d84:	eb 05                	jmp    c0025d8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d86:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d89:	eb 8f                	jmp    c0025d1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d8b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d8e:	83 f0 01             	xor    eax,0x1
c0025d91:	84 c0                	test   al,al
c0025d93:	74 10                	je     c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d95:	83 ec 0c             	sub    esp,0xc
c0025d98:	68 eb d2 02 c0       	push   0xc002d2eb
c0025d9d:	e8 11 48 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0025da2:	83 c4 10             	add    esp,0x10
c0025da5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025da9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025db0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025db4:	7f 65                	jg     c0025e1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dbc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dc3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc6:	01 ca                	add    edx,ecx
c0025dc8:	83 c2 54             	add    edx,0x54
c0025dcb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dcf:	85 c0                	test   eax,eax
c0025dd1:	75 43                	jne    c0025e16 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dd9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025de0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de3:	01 ca                	add    edx,ecx
c0025de5:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025de8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025deb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025df5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dfc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dff:	01 ca                	add    edx,ecx
c0025e01:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e07:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e0a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e11:	83 e8 20             	sub    eax,0x20
c0025e14:	eb 1a                	jmp    c0025e30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e16:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e19:	eb 95                	jmp    c0025db0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e1b:	83 ec 0c             	sub    esp,0xc
c0025e1e:	68 f8 d2 02 c0       	push   0xc002d2f8
c0025e23:	e8 8b 47 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0025e28:	83 c4 10             	add    esp,0x10
c0025e2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e30:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e33:	5b                   	pop    ebx
c0025e34:	5e                   	pop    esi
c0025e35:	5f                   	pop    edi
c0025e36:	5d                   	pop    ebp
c0025e37:	c3                   	ret    

c0025e38 <PIC::disable()>:
c0025e38:	55                   	push   ebp
c0025e39:	89 e5                	mov    ebp,esp
c0025e3b:	83 ec 10             	sub    esp,0x10
c0025e3e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e44:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e48:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e4b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e4f:	ee                   	out    dx,al
c0025e50:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e56:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e5a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e5d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e61:	ee                   	out    dx,al
c0025e62:	90                   	nop
c0025e63:	c9                   	leave  
c0025e64:	c3                   	ret    
c0025e65:	90                   	nop

c0025e66 <PIC::close(int, int, void*)>:
c0025e66:	55                   	push   ebp
c0025e67:	89 e5                	mov    ebp,esp
c0025e69:	83 ec 08             	sub    esp,0x8
c0025e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e71:	83 c0 3c             	add    eax,0x3c
c0025e74:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e76:	83 ec 0c             	sub    esp,0xc
c0025e79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7c:	ff d0                	call   eax
c0025e7e:	83 c4 10             	add    esp,0x10
c0025e81:	b8 00 00 00 00       	mov    eax,0x0
c0025e86:	c9                   	leave  
c0025e87:	c3                   	ret    

c0025e88 <PIC::PIC()>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8f:	83 ec 08             	sub    esp,0x8
c0025e92:	68 a4 d3 02 c0       	push   0xc002d3a4
c0025e97:	50                   	push   eax
c0025e98:	e8 f7 ed fe ff       	call   c0014c94 <InterruptController::InterruptController(char const*)>
c0025e9d:	83 c4 10             	add    esp,0x10
c0025ea0:	ba d0 d3 02 c0       	mov    edx,0xc002d3d0
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	89 10                	mov    DWORD PTR [eax],edx
c0025eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb5:	0f b6 d0             	movzx  edx,al
c0025eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecd:	0f b6 d0             	movzx  edx,al
c0025ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ee6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ef0:	0f b6 d0             	movzx  edx,al
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025efb:	83 e1 3f             	and    ecx,0x3f
c0025efe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f0c:	0f b6 d0             	movzx  edx,al
c0025f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f13:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f24:	0f b6 d0             	movzx  edx,al
c0025f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3a:	8d 50 01             	lea    edx,[eax+0x1]
c0025f3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f41:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f47:	0f b6 d0             	movzx  edx,al
c0025f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f52:	83 e1 3f             	and    ecx,0x3f
c0025f55:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f59:	90                   	nop
c0025f5a:	83 c4 0c             	add    esp,0xc
c0025f5d:	c3                   	ret    

c0025f5e <PIC::ioWait()>:
c0025f5e:	eb 00                	jmp    c0025f60 <PIC::ioWait()+0x2>
c0025f60:	eb 00                	jmp    c0025f62 <PIC::ioWait()+0x4>
c0025f62:	90                   	nop
c0025f63:	c3                   	ret    

c0025f64 <PIC::getIRQReg(int)>:
c0025f64:	55                   	push   ebp
c0025f65:	89 e5                	mov    ebp,esp
c0025f67:	83 ec 10             	sub    esp,0x10
c0025f6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f6d:	0f b6 c0             	movzx  eax,al
c0025f70:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f76:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f79:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f7c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f80:	ee                   	out    dx,al
c0025f81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f84:	0f b6 c0             	movzx  eax,al
c0025f87:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f8d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f90:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f93:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f97:	ee                   	out    dx,al
c0025f98:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f9e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fa2:	89 c2                	mov    edx,eax
c0025fa4:	ec                   	in     al,dx
c0025fa5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fa8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fab:	0f b6 c0             	movzx  eax,al
c0025fae:	c1 e0 08             	shl    eax,0x8
c0025fb1:	89 c1                	mov    ecx,eax
c0025fb3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fb9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fbd:	89 c2                	mov    edx,eax
c0025fbf:	ec                   	in     al,dx
c0025fc0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fc3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fc6:	0f b6 c0             	movzx  eax,al
c0025fc9:	09 c8                	or     eax,ecx
c0025fcb:	c9                   	leave  
c0025fcc:	c3                   	ret    
c0025fcd:	90                   	nop

c0025fce <PIC::eoi(unsigned char)>:
c0025fce:	55                   	push   ebp
c0025fcf:	89 e5                	mov    ebp,esp
c0025fd1:	83 ec 14             	sub    esp,0x14
c0025fd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fda:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fde:	75 1e                	jne    c0025ffe <PIC::eoi(unsigned char)+0x30>
c0025fe0:	6a 0b                	push   0xb
c0025fe2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe5:	e8 7a ff ff ff       	call   c0025f64 <PIC::getIRQReg(int)>
c0025fea:	83 c4 08             	add    esp,0x8
c0025fed:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025ff1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ff5:	25 80 00 00 00       	and    eax,0x80
c0025ffa:	85 c0                	test   eax,eax
c0025ffc:	74 5f                	je     c002605d <PIC::eoi(unsigned char)+0x8f>
c0025ffe:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026002:	75 2d                	jne    c0026031 <PIC::eoi(unsigned char)+0x63>
c0026004:	6a 0b                	push   0xb
c0026006:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026009:	e8 56 ff ff ff       	call   c0025f64 <PIC::getIRQReg(int)>
c002600e:	83 c4 08             	add    esp,0x8
c0026011:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026015:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026018:	66 85 c0             	test   ax,ax
c002601b:	78 14                	js     c0026031 <PIC::eoi(unsigned char)+0x63>
c002601d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026023:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026027:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002602a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002602e:	ee                   	out    dx,al
c002602f:	eb 2d                	jmp    c002605e <PIC::eoi(unsigned char)+0x90>
c0026031:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026035:	76 12                	jbe    c0026049 <PIC::eoi(unsigned char)+0x7b>
c0026037:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002603d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026041:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026044:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026048:	ee                   	out    dx,al
c0026049:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002604f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026053:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026056:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002605a:	ee                   	out    dx,al
c002605b:	eb 01                	jmp    c002605e <PIC::eoi(unsigned char)+0x90>
c002605d:	90                   	nop
c002605e:	c9                   	leave  
c002605f:	c3                   	ret    

c0026060 <PIC::remap()>:
c0026060:	55                   	push   ebp
c0026061:	89 e5                	mov    ebp,esp
c0026063:	83 ec 48             	sub    esp,0x48
c0026066:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002606d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026074:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002607a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002607d:	89 c2                	mov    edx,eax
c002607f:	ec                   	in     al,dx
c0026080:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026083:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026086:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026089:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002608f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026092:	89 c2                	mov    edx,eax
c0026094:	ec                   	in     al,dx
c0026095:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026098:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002609b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002609e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260a4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260a8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260ab:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260ae:	ee                   	out    dx,al
c00260af:	83 ec 0c             	sub    esp,0xc
c00260b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b5:	e8 a4 fe ff ff       	call   c0025f5e <PIC::ioWait()>
c00260ba:	83 c4 10             	add    esp,0x10
c00260bd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260c3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260c7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260ca:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260cd:	ee                   	out    dx,al
c00260ce:	83 ec 0c             	sub    esp,0xc
c00260d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d4:	e8 85 fe ff ff       	call   c0025f5e <PIC::ioWait()>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260df:	0f b6 c0             	movzx  eax,al
c00260e2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260e8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260eb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260ee:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260f1:	ee                   	out    dx,al
c00260f2:	83 ec 0c             	sub    esp,0xc
c00260f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f8:	e8 61 fe ff ff       	call   c0025f5e <PIC::ioWait()>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026103:	0f b6 c0             	movzx  eax,al
c0026106:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002610c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002610f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026112:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026115:	ee                   	out    dx,al
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611c:	e8 3d fe ff ff       	call   c0025f5e <PIC::ioWait()>
c0026121:	83 c4 10             	add    esp,0x10
c0026124:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002612a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002612e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026131:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026134:	ee                   	out    dx,al
c0026135:	83 ec 0c             	sub    esp,0xc
c0026138:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002613b:	e8 1e fe ff ff       	call   c0025f5e <PIC::ioWait()>
c0026140:	83 c4 10             	add    esp,0x10
c0026143:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026149:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002614d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026150:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026153:	ee                   	out    dx,al
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615a:	e8 ff fd ff ff       	call   c0025f5e <PIC::ioWait()>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026168:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002616c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002616f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026172:	ee                   	out    dx,al
c0026173:	83 ec 0c             	sub    esp,0xc
c0026176:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026179:	e8 e0 fd ff ff       	call   c0025f5e <PIC::ioWait()>
c002617e:	83 c4 10             	add    esp,0x10
c0026181:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026187:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002618b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002618e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026191:	ee                   	out    dx,al
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026198:	e8 c1 fd ff ff       	call   c0025f5e <PIC::ioWait()>
c002619d:	83 c4 10             	add    esp,0x10
c00261a0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261a4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261aa:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261ad:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261b0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261b3:	ee                   	out    dx,al
c00261b4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261b8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261be:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261c1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261c7:	ee                   	out    dx,al
c00261c8:	90                   	nop
c00261c9:	c9                   	leave  
c00261ca:	c3                   	ret    
c00261cb:	90                   	nop

c00261cc <PIC::open(int, int, void*)>:
c00261cc:	55                   	push   ebp
c00261cd:	89 e5                	mov    ebp,esp
c00261cf:	83 ec 18             	sub    esp,0x18
c00261d2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261d8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261dc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261df:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261e3:	ee                   	out    dx,al
c00261e4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261ea:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261ee:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261f1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261f5:	ee                   	out    dx,al
c00261f6:	83 ec 0c             	sub    esp,0xc
c00261f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fc:	e8 5f fe ff ff       	call   c0026060 <PIC::remap()>
c0026201:	83 c4 10             	add    esp,0x10
c0026204:	b8 00 00 00 00       	mov    eax,0x0
c0026209:	c9                   	leave  
c002620a:	c3                   	ret    
c002620b:	90                   	nop

c002620c <APICTimer::close(int, int, void*)>:
c002620c:	b8 00 00 00 00       	mov    eax,0x0
c0026211:	c3                   	ret    

c0026212 <apicTimerHandler(regs*, void*)>:
c0026212:	83 ec 0c             	sub    esp,0xc
c0026215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026219:	8b 00                	mov    eax,DWORD PTR [eax]
c002621b:	99                   	cdq    
c002621c:	52                   	push   edx
c002621d:	50                   	push   eax
c002621e:	6a 00                	push   0x0
c0026220:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026225:	e8 92 07 00 00       	call   c00269bc <__udivdi3>
c002622a:	83 c4 10             	add    esp,0x10
c002622d:	83 ec 08             	sub    esp,0x8
c0026230:	52                   	push   edx
c0026231:	50                   	push   eax
c0026232:	e8 a8 0a ff ff       	call   c0016cdf <timerHandler(unsigned long long)>
c0026237:	83 c4 10             	add    esp,0x10
c002623a:	90                   	nop
c002623b:	83 c4 0c             	add    esp,0xc
c002623e:	c3                   	ret    
c002623f:	90                   	nop

c0026240 <APICTimer::write(int)>:
c0026240:	53                   	push   ebx
c0026241:	83 ec 28             	sub    esp,0x28
c0026244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026248:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002624c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026252:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0026257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002625d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026263:	83 ec 0c             	sub    esp,0xc
c0026266:	50                   	push   eax
c0026267:	e8 de f4 ff ff       	call   c002574a <APIC::getBase()>
c002626c:	83 c4 10             	add    esp,0x10
c002626f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026273:	a1 10 ec 02 c0       	mov    eax,ds:0xc002ec10
c0026278:	8b 15 14 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec14
c002627e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026282:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628a:	05 e0 03 00 00       	add    eax,0x3e0
c002628f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026299:	05 80 03 00 00       	add    eax,0x380
c002629e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262a4:	fb                   	sti    
c00262a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262ad:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262b2:	83 d2 00             	adc    edx,0x0
c00262b5:	89 c1                	mov    ecx,eax
c00262b7:	89 d3                	mov    ebx,edx
c00262b9:	a1 10 ec 02 c0       	mov    eax,ds:0xc002ec10
c00262be:	8b 15 14 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec14
c00262c4:	39 c8                	cmp    eax,ecx
c00262c6:	89 d0                	mov    eax,edx
c00262c8:	19 d8                	sbb    eax,ebx
c00262ca:	73 02                	jae    c00262ce <APICTimer::write(int)+0x8e>
c00262cc:	eb d7                	jmp    c00262a5 <APICTimer::write(int)+0x65>
c00262ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d2:	05 20 03 00 00       	add    eax,0x320
c00262d7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e1:	05 90 03 00 00       	add    eax,0x390
c00262e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00262e8:	f7 d0                	not    eax
c00262ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262f6:	ba 00 00 00 00       	mov    edx,0x0
c00262fb:	f7 f3                	div    ebx
c00262fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026305:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002630b:	0d 00 00 02 00       	or     eax,0x20000
c0026310:	89 c2                	mov    edx,eax
c0026312:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026316:	05 20 03 00 00       	add    eax,0x320
c002631b:	89 10                	mov    DWORD PTR [eax],edx
c002631d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026321:	05 e0 03 00 00       	add    eax,0x3e0
c0026326:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002632c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026330:	05 80 03 00 00       	add    eax,0x380
c0026335:	89 c2                	mov    edx,eax
c0026337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002633b:	89 02                	mov    DWORD PTR [edx],eax
c002633d:	90                   	nop
c002633e:	83 c4 28             	add    esp,0x28
c0026341:	5b                   	pop    ebx
c0026342:	c3                   	ret    
c0026343:	90                   	nop

c0026344 <APICTimer::open(int, int, void*)>:
c0026344:	57                   	push   edi
c0026345:	56                   	push   esi
c0026346:	53                   	push   ebx
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	8b 00                	mov    eax,DWORD PTR [eax]
c002634d:	83 c0 24             	add    eax,0x24
c0026350:	8b 00                	mov    eax,DWORD PTR [eax]
c0026352:	83 ec 08             	sub    esp,0x8
c0026355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002635d:	ff d0                	call   eax
c002635f:	83 c4 10             	add    esp,0x10
c0026362:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0026367:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002636d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026373:	83 ec 0c             	sub    esp,0xc
c0026376:	50                   	push   eax
c0026377:	e8 ce f3 ff ff       	call   c002574a <APIC::getBase()>
c002637c:	83 c4 10             	add    esp,0x10
c002637f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026389:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002638f:	0f b6 f8             	movzx  edi,al
c0026392:	89 d0                	mov    eax,edx
c0026394:	ba 00 00 00 00       	mov    edx,0x0
c0026399:	89 c1                	mov    ecx,eax
c002639b:	80 e5 ff             	and    ch,0xff
c002639e:	89 cb                	mov    ebx,ecx
c00263a0:	0f b6 f2             	movzx  esi,dl
c00263a3:	89 d8                	mov    eax,ebx
c00263a5:	89 f2                	mov    edx,esi
c00263a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ab:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263ae:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263b2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263b6:	83 e0 00             	and    eax,0x0
c00263b9:	09 d0                	or     eax,edx
c00263bb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263c9:	8d 50 01             	lea    edx,[eax+0x1]
c00263cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263d6:	0f b6 d0             	movzx  edx,al
c00263d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263dd:	83 c2 08             	add    edx,0x8
c00263e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263e4:	0f b6 c9             	movzx  ecx,cl
c00263e7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263ed:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263f9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026403:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026407:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002640d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026411:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026417:	83 ec 0c             	sub    esp,0xc
c002641a:	51                   	push   ecx
c002641b:	6a 01                	push   0x1
c002641d:	68 12 62 02 c0       	push   0xc0026212
c0026422:	52                   	push   edx
c0026423:	50                   	push   eax
c0026424:	e8 93 de fe ff       	call   c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026429:	83 c4 20             	add    esp,0x20
c002642c:	89 c2                	mov    edx,eax
c002642e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026432:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026438:	b8 00 00 00 00       	mov    eax,0x0
c002643d:	5b                   	pop    ebx
c002643e:	5e                   	pop    esi
c002643f:	5f                   	pop    edi
c0026440:	c3                   	ret    
c0026441:	90                   	nop

c0026442 <APICTimer::APICTimer()>:
c0026442:	83 ec 0c             	sub    esp,0xc
c0026445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026449:	83 ec 08             	sub    esp,0x8
c002644c:	68 10 d4 02 c0       	push   0xc002d410
c0026451:	50                   	push   eax
c0026452:	e8 f9 07 ff ff       	call   c0016c50 <Timer::Timer(char const*)>
c0026457:	83 c4 10             	add    esp,0x10
c002645a:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c002645f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026463:	89 10                	mov    DWORD PTR [eax],edx
c0026465:	90                   	nop
c0026466:	83 c4 0c             	add    esp,0xc
c0026469:	c3                   	ret    

c002646a <PIT::write(int)>:
c002646a:	83 ec 10             	sub    esp,0x10
c002646d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026475:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002647b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002647f:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c0026484:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026489:	99                   	cdq    
c002648a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002648e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026492:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026499:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002649e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264a2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264a7:	ee                   	out    dx,al
c00264a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ac:	0f b6 c0             	movzx  eax,al
c00264af:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264b6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264ba:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264be:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264c3:	ee                   	out    dx,al
c00264c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264c8:	c1 f8 08             	sar    eax,0x8
c00264cb:	0f b6 c0             	movzx  eax,al
c00264ce:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264d5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264d9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264dd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264e2:	ee                   	out    dx,al
c00264e3:	90                   	nop
c00264e4:	83 c4 10             	add    esp,0x10
c00264e7:	c3                   	ret    

c00264e8 <pitHandler(regs*, void*)>:
c00264e8:	83 ec 0c             	sub    esp,0xc
c00264eb:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c00264f0:	99                   	cdq    
c00264f1:	52                   	push   edx
c00264f2:	50                   	push   eax
c00264f3:	6a 00                	push   0x0
c00264f5:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264fa:	e8 bd 04 00 00       	call   c00269bc <__udivdi3>
c00264ff:	83 c4 10             	add    esp,0x10
c0026502:	83 ec 08             	sub    esp,0x8
c0026505:	52                   	push   edx
c0026506:	50                   	push   eax
c0026507:	e8 d3 07 ff ff       	call   c0016cdf <timerHandler(unsigned long long)>
c002650c:	83 c4 10             	add    esp,0x10
c002650f:	90                   	nop
c0026510:	83 c4 0c             	add    esp,0xc
c0026513:	c3                   	ret    

c0026514 <PIT::open(int, int, void*)>:
c0026514:	83 ec 0c             	sub    esp,0xc
c0026517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651b:	8b 00                	mov    eax,DWORD PTR [eax]
c002651d:	83 c0 24             	add    eax,0x24
c0026520:	8b 00                	mov    eax,DWORD PTR [eax]
c0026522:	83 ec 08             	sub    esp,0x8
c0026525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002652d:	ff d0                	call   eax
c002652f:	83 c4 10             	add    esp,0x10
c0026532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026536:	83 ec 0c             	sub    esp,0xc
c0026539:	6a 00                	push   0x0
c002653b:	6a 01                	push   0x1
c002653d:	68 e8 64 02 c0       	push   0xc00264e8
c0026542:	6a 00                	push   0x0
c0026544:	50                   	push   eax
c0026545:	e8 72 dd fe ff       	call   c00142bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002654a:	83 c4 20             	add    esp,0x20
c002654d:	89 c2                	mov    edx,eax
c002654f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026553:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026559:	b8 00 00 00 00       	mov    eax,0x0
c002655e:	83 c4 0c             	add    esp,0xc
c0026561:	c3                   	ret    

c0026562 <PIT::close(int, int, void*)>:
c0026562:	83 ec 0c             	sub    esp,0xc
c0026565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026569:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026577:	6a 01                	push   0x1
c0026579:	68 e8 64 02 c0       	push   0xc00264e8
c002657e:	6a 00                	push   0x0
c0026580:	50                   	push   eax
c0026581:	e8 74 dd fe ff       	call   c00142fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026586:	83 c4 10             	add    esp,0x10
c0026589:	b8 00 00 00 00       	mov    eax,0x0
c002658e:	83 c4 0c             	add    esp,0xc
c0026591:	c3                   	ret    

c0026592 <PIT::PIT()>:
c0026592:	83 ec 0c             	sub    esp,0xc
c0026595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026599:	83 ec 08             	sub    esp,0x8
c002659c:	68 4c d4 02 c0       	push   0xc002d44c
c00265a1:	50                   	push   eax
c00265a2:	e8 a9 06 ff ff       	call   c0016c50 <Timer::Timer(char const*)>
c00265a7:	83 c4 10             	add    esp,0x10
c00265aa:	ba 74 d4 02 c0       	mov    edx,0xc002d474
c00265af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b3:	89 10                	mov    DWORD PTR [eax],edx
c00265b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265bf:	0f b6 d0             	movzx  edx,al
c00265c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265d7:	0f b6 d0             	movzx  edx,al
c00265da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265de:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265ed:	8d 50 01             	lea    edx,[eax+0x1]
c00265f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265f4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265fa:	0f b6 d0             	movzx  edx,al
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026605:	83 e1 3f             	and    ecx,0x3f
c0026608:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002660c:	90                   	nop
c002660d:	83 c4 0c             	add    esp,0xc
c0026610:	c3                   	ret    
c0026611:	66 90                	xchg   ax,ax
c0026613:	66 90                	xchg   ax,ax
c0026615:	66 90                	xchg   ax,ax
c0026617:	66 90                	xchg   ax,ax
c0026619:	66 90                	xchg   ax,ax
c002661b:	66 90                	xchg   ax,ax
c002661d:	66 90                	xchg   ax,ax
c002661f:	90                   	nop

c0026620 <avxDetect>:
c0026620:	b8 00 00 00 00       	mov    eax,0x0
c0026625:	c3                   	ret    

c0026626 <avxSave>:
c0026626:	c3                   	ret    

c0026627 <avxLoad>:
c0026627:	c3                   	ret    

c0026628 <avxInit>:
c0026628:	c3                   	ret    

c0026629 <avxClose>:
c0026629:	c3                   	ret    

c002662a <wouldSheSayYes>:
c002662a:	c3                   	ret    
c002662b:	49                   	dec    ecx
c002662c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026630:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026634:	75 20                	jne    c0026656 <sseDetect.noSSE+0x1>
c0026636:	4e                   	dec    esi
c0026637:	79 61                	jns    c002669a <x87Detect+0x14>
c0026639:	68 2e 2e 2e 00       	push   0x2e2e2e
c002663e:	66 90                	xchg   ax,ax

c0026640 <absolutelyNoChanceInHell>:
c0026640:	b8 01 00 00 00       	mov    eax,0x1
c0026645:	0f a2                	cpuid  
c0026647:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002664d:	74 06                	je     c0026655 <sseDetect.noSSE>
c002664f:	b8 01 00 00 00       	mov    eax,0x1
c0026654:	c3                   	ret    

c0026655 <sseDetect.noSSE>:
c0026655:	31 c0                	xor    eax,eax
c0026657:	c3                   	ret    

c0026658 <sseSave>:
c0026658:	0f ae 44 24 08       	fxsave [esp+0x8]
c002665d:	c3                   	ret    

c002665e <sseLoad>:
c002665e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026663:	c3                   	ret    

c0026664 <sseInit>:
c0026664:	e8 43 00 00 00       	call   c00266ac <x87Init>
c0026669:	0f 20 e0             	mov    eax,cr4
c002666c:	66 0d 00 06          	or     ax,0x600
c0026670:	0f 22 e0             	mov    cr4,eax
c0026673:	c3                   	ret    

c0026674 <sseClose>:
c0026674:	c3                   	ret    
c0026675:	66 90                	xchg   ax,ax
c0026677:	66 90                	xchg   ax,ax
c0026679:	66 90                	xchg   ax,ax
c002667b:	66 90                	xchg   ax,ax
c002667d:	66 90                	xchg   ax,ax
c002667f:	90                   	nop

c0026680 <value_37F>:
c0026680:	7f 03                	jg     c0026685 <value_37A+0x1>

c0026682 <value_37E>:
c0026682:	7e 03                	jle    c0026687 <x87Detect+0x1>

c0026684 <value_37A>:
c0026684:	7a 03                	jp     c0026689 <x87Detect+0x3>

c0026686 <x87Detect>:
c0026686:	b8 01 00 00 00       	mov    eax,0x1
c002668b:	0f a2                	cpuid  
c002668d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026693:	74 06                	je     c002669b <x87Detect.nox87>
c0026695:	b8 01 00 00 00       	mov    eax,0x1
c002669a:	c3                   	ret    

c002669b <x87Detect.nox87>:
c002669b:	b8 00 00 00 00       	mov    eax,0x0
c00266a0:	c3                   	ret    

c00266a1 <x87Save>:
c00266a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266a6:	c3                   	ret    

c00266a7 <x87Load>:
c00266a7:	dd 64 24 08          	frstor [esp+0x8]
c00266ab:	c3                   	ret    

c00266ac <x87Init>:
c00266ac:	9b db e3             	finit  
c00266af:	0f 20 c0             	mov    eax,cr0
c00266b2:	66 25 fb ff          	and    ax,0xfffb
c00266b6:	66 0d 22 00          	or     ax,0x22
c00266ba:	0f 22 c0             	mov    cr0,eax
c00266bd:	0f 06                	clts   
c00266bf:	d9 2d 84 66 02 c0    	fldcw  WORD PTR ds:0xc0026684
c00266c5:	c3                   	ret    

c00266c6 <x87Close>:
c00266c6:	c3                   	ret    
c00266c7:	90                   	nop

c00266c8 <__do_global_ctors_aux>:
c00266c8:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c00266cd:	83 f8 ff             	cmp    eax,0xffffffff
c00266d0:	74 1a                	je     c00266ec <__do_global_ctors_aux+0x24>
c00266d2:	55                   	push   ebp
c00266d3:	89 e5                	mov    ebp,esp
c00266d5:	53                   	push   ebx
c00266d6:	52                   	push   edx
c00266d7:	bb 0c 92 02 c0       	mov    ebx,0xc002920c
c00266dc:	ff d0                	call   eax
c00266de:	83 eb 04             	sub    ebx,0x4
c00266e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266e3:	83 f8 ff             	cmp    eax,0xffffffff
c00266e6:	75 f4                	jne    c00266dc <__do_global_ctors_aux+0x14>
c00266e8:	58                   	pop    eax
c00266e9:	5b                   	pop    ebx
c00266ea:	5d                   	pop    ebp
c00266eb:	c3                   	ret    
c00266ec:	c3                   	ret    
c00266ed:	66 90                	xchg   ax,ax
c00266ef:	90                   	nop

c00266f0 <__divdi3>:
c00266f0:	55                   	push   ebp
c00266f1:	57                   	push   edi
c00266f2:	56                   	push   esi
c00266f3:	53                   	push   ebx
c00266f4:	83 ec 1c             	sub    esp,0x1c
c00266f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026702:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026706:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002670a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002670e:	85 db                	test   ebx,ebx
c0026710:	0f 88 8e 00 00 00    	js     c00267a4 <__divdi3+0xb4>
c0026716:	89 dd                	mov    ebp,ebx
c0026718:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026720:	89 d3                	mov    ebx,edx
c0026722:	85 d2                	test   edx,edx
c0026724:	79 0d                	jns    c0026733 <__divdi3+0x43>
c0026726:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002672a:	f7 d8                	neg    eax
c002672c:	83 d2 00             	adc    edx,0x0
c002672f:	f7 da                	neg    edx
c0026731:	89 d3                	mov    ebx,edx
c0026733:	89 c7                	mov    edi,eax
c0026735:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026738:	85 db                	test   ebx,ebx
c002673a:	75 48                	jne    c0026784 <__divdi3+0x94>
c002673c:	39 ef                	cmp    edi,ebp
c002673e:	76 24                	jbe    c0026764 <__divdi3+0x74>
c0026740:	89 ea                	mov    edx,ebp
c0026742:	f7 f7                	div    edi
c0026744:	89 c1                	mov    ecx,eax
c0026746:	31 f6                	xor    esi,esi
c0026748:	89 c8                	mov    eax,ecx
c002674a:	89 f2                	mov    edx,esi
c002674c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026750:	85 c9                	test   ecx,ecx
c0026752:	74 07                	je     c002675b <__divdi3+0x6b>
c0026754:	f7 d8                	neg    eax
c0026756:	83 d2 00             	adc    edx,0x0
c0026759:	f7 da                	neg    edx
c002675b:	83 c4 1c             	add    esp,0x1c
c002675e:	5b                   	pop    ebx
c002675f:	5e                   	pop    esi
c0026760:	5f                   	pop    edi
c0026761:	5d                   	pop    ebp
c0026762:	c3                   	ret    
c0026763:	90                   	nop
c0026764:	85 ff                	test   edi,edi
c0026766:	75 0b                	jne    c0026773 <__divdi3+0x83>
c0026768:	b8 01 00 00 00       	mov    eax,0x1
c002676d:	31 d2                	xor    edx,edx
c002676f:	f7 f3                	div    ebx
c0026771:	89 c7                	mov    edi,eax
c0026773:	31 d2                	xor    edx,edx
c0026775:	89 e8                	mov    eax,ebp
c0026777:	f7 f7                	div    edi
c0026779:	89 c6                	mov    esi,eax
c002677b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002677e:	f7 f7                	div    edi
c0026780:	89 c1                	mov    ecx,eax
c0026782:	eb c4                	jmp    c0026748 <__divdi3+0x58>
c0026784:	39 eb                	cmp    ebx,ebp
c0026786:	77 3c                	ja     c00267c4 <__divdi3+0xd4>
c0026788:	0f bd f3             	bsr    esi,ebx
c002678b:	83 f6 1f             	xor    esi,0x1f
c002678e:	75 40                	jne    c00267d0 <__divdi3+0xe0>
c0026790:	39 eb                	cmp    ebx,ebp
c0026792:	72 09                	jb     c002679d <__divdi3+0xad>
c0026794:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026797:	0f 87 97 00 00 00    	ja     c0026834 <__divdi3+0x144>
c002679d:	b9 01 00 00 00       	mov    ecx,0x1
c00267a2:	eb a4                	jmp    c0026748 <__divdi3+0x58>
c00267a4:	f7 d9                	neg    ecx
c00267a6:	83 d3 00             	adc    ebx,0x0
c00267a9:	f7 db                	neg    ebx
c00267ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267b2:	89 dd                	mov    ebp,ebx
c00267b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267bc:	e9 5f ff ff ff       	jmp    c0026720 <__divdi3+0x30>
c00267c1:	8d 76 00             	lea    esi,[esi+0x0]
c00267c4:	31 f6                	xor    esi,esi
c00267c6:	31 c9                	xor    ecx,ecx
c00267c8:	e9 7b ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c00267cd:	8d 76 00             	lea    esi,[esi+0x0]
c00267d0:	b8 20 00 00 00       	mov    eax,0x20
c00267d5:	29 f0                	sub    eax,esi
c00267d7:	89 f1                	mov    ecx,esi
c00267d9:	d3 e3                	shl    ebx,cl
c00267db:	89 fa                	mov    edx,edi
c00267dd:	88 c1                	mov    cl,al
c00267df:	d3 ea                	shr    edx,cl
c00267e1:	09 da                	or     edx,ebx
c00267e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267e7:	89 f1                	mov    ecx,esi
c00267e9:	d3 e7                	shl    edi,cl
c00267eb:	89 eb                	mov    ebx,ebp
c00267ed:	88 c1                	mov    cl,al
c00267ef:	d3 eb                	shr    ebx,cl
c00267f1:	89 f1                	mov    ecx,esi
c00267f3:	d3 e5                	shl    ebp,cl
c00267f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267f8:	88 c1                	mov    cl,al
c00267fa:	d3 ea                	shr    edx,cl
c00267fc:	09 d5                	or     ebp,edx
c00267fe:	89 e8                	mov    eax,ebp
c0026800:	89 da                	mov    edx,ebx
c0026802:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026806:	89 d3                	mov    ebx,edx
c0026808:	89 c5                	mov    ebp,eax
c002680a:	f7 e7                	mul    edi
c002680c:	39 d3                	cmp    ebx,edx
c002680e:	72 18                	jb     c0026828 <__divdi3+0x138>
c0026810:	74 0a                	je     c002681c <__divdi3+0x12c>
c0026812:	89 e9                	mov    ecx,ebp
c0026814:	31 f6                	xor    esi,esi
c0026816:	e9 2d ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c002681b:	90                   	nop
c002681c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002681f:	89 f1                	mov    ecx,esi
c0026821:	d3 e7                	shl    edi,cl
c0026823:	39 c7                	cmp    edi,eax
c0026825:	73 eb                	jae    c0026812 <__divdi3+0x122>
c0026827:	90                   	nop
c0026828:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002682b:	31 f6                	xor    esi,esi
c002682d:	e9 16 ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c0026832:	66 90                	xchg   ax,ax
c0026834:	31 c9                	xor    ecx,ecx
c0026836:	e9 0d ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c002683b:	90                   	nop

c002683c <__moddi3>:
c002683c:	55                   	push   ebp
c002683d:	57                   	push   edi
c002683e:	56                   	push   esi
c002683f:	53                   	push   ebx
c0026840:	83 ec 2c             	sub    esp,0x2c
c0026843:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026847:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002684b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002684f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026853:	85 db                	test   ebx,ebx
c0026855:	0f 88 85 00 00 00    	js     c00268e0 <__moddi3+0xa4>
c002685b:	89 de                	mov    esi,ebx
c002685d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026865:	89 d7                	mov    edi,edx
c0026867:	85 d2                	test   edx,edx
c0026869:	79 09                	jns    c0026874 <__moddi3+0x38>
c002686b:	f7 d8                	neg    eax
c002686d:	83 d2 00             	adc    edx,0x0
c0026870:	f7 da                	neg    edx
c0026872:	89 d7                	mov    edi,edx
c0026874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026878:	89 cd                	mov    ebp,ecx
c002687a:	85 ff                	test   edi,edi
c002687c:	75 52                	jne    c00268d0 <__moddi3+0x94>
c002687e:	89 c3                	mov    ebx,eax
c0026880:	39 f0                	cmp    eax,esi
c0026882:	76 24                	jbe    c00268a8 <__moddi3+0x6c>
c0026884:	89 c8                	mov    eax,ecx
c0026886:	89 f2                	mov    edx,esi
c0026888:	f7 f3                	div    ebx
c002688a:	89 d6                	mov    esi,edx
c002688c:	89 f0                	mov    eax,esi
c002688e:	31 d2                	xor    edx,edx
c0026890:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026894:	85 c9                	test   ecx,ecx
c0026896:	74 07                	je     c002689f <__moddi3+0x63>
c0026898:	f7 d8                	neg    eax
c002689a:	83 d2 00             	adc    edx,0x0
c002689d:	f7 da                	neg    edx
c002689f:	83 c4 2c             	add    esp,0x2c
c00268a2:	5b                   	pop    ebx
c00268a3:	5e                   	pop    esi
c00268a4:	5f                   	pop    edi
c00268a5:	5d                   	pop    ebp
c00268a6:	c3                   	ret    
c00268a7:	90                   	nop
c00268a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268ac:	85 db                	test   ebx,ebx
c00268ae:	75 0d                	jne    c00268bd <__moddi3+0x81>
c00268b0:	b8 01 00 00 00       	mov    eax,0x1
c00268b5:	31 d2                	xor    edx,edx
c00268b7:	f7 f7                	div    edi
c00268b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268bd:	89 f0                	mov    eax,esi
c00268bf:	31 d2                	xor    edx,edx
c00268c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268c5:	f7 f7                	div    edi
c00268c7:	89 e8                	mov    eax,ebp
c00268c9:	f7 f7                	div    edi
c00268cb:	89 d6                	mov    esi,edx
c00268cd:	eb bd                	jmp    c002688c <__moddi3+0x50>
c00268cf:	90                   	nop
c00268d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268d4:	39 f7                	cmp    edi,esi
c00268d6:	76 20                	jbe    c00268f8 <__moddi3+0xbc>
c00268d8:	89 c8                	mov    eax,ecx
c00268da:	89 f2                	mov    edx,esi
c00268dc:	eb b2                	jmp    c0026890 <__moddi3+0x54>
c00268de:	66 90                	xchg   ax,ax
c00268e0:	f7 d9                	neg    ecx
c00268e2:	83 d3 00             	adc    ebx,0x0
c00268e5:	f7 db                	neg    ebx
c00268e7:	89 de                	mov    esi,ebx
c00268e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268f1:	e9 6f ff ff ff       	jmp    c0026865 <__moddi3+0x29>
c00268f6:	66 90                	xchg   ax,ax
c00268f8:	0f bd c7             	bsr    eax,edi
c00268fb:	83 f0 1f             	xor    eax,0x1f
c00268fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026902:	75 24                	jne    c0026928 <__moddi3+0xec>
c0026904:	39 f7                	cmp    edi,esi
c0026906:	72 06                	jb     c002690e <__moddi3+0xd2>
c0026908:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002690c:	77 0c                	ja     c002691a <__moddi3+0xde>
c002690e:	89 e9                	mov    ecx,ebp
c0026910:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026914:	19 fe                	sbb    esi,edi
c0026916:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002691a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002691e:	89 f2                	mov    edx,esi
c0026920:	e9 6b ff ff ff       	jmp    c0026890 <__moddi3+0x54>
c0026925:	8d 76 00             	lea    esi,[esi+0x0]
c0026928:	b8 20 00 00 00       	mov    eax,0x20
c002692d:	89 c2                	mov    edx,eax
c002692f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026933:	29 da                	sub    edx,ebx
c0026935:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026939:	88 d9                	mov    cl,bl
c002693b:	d3 e7                	shl    edi,cl
c002693d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026941:	88 d1                	mov    cl,dl
c0026943:	d3 e8                	shr    eax,cl
c0026945:	09 c7                	or     edi,eax
c0026947:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002694b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002694f:	89 d8                	mov    eax,ebx
c0026951:	88 d9                	mov    cl,bl
c0026953:	d3 e7                	shl    edi,cl
c0026955:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026959:	89 f3                	mov    ebx,esi
c002695b:	88 d1                	mov    cl,dl
c002695d:	d3 eb                	shr    ebx,cl
c002695f:	89 c7                	mov    edi,eax
c0026961:	88 c1                	mov    cl,al
c0026963:	d3 e6                	shl    esi,cl
c0026965:	89 e8                	mov    eax,ebp
c0026967:	88 d1                	mov    cl,dl
c0026969:	d3 e8                	shr    eax,cl
c002696b:	09 f0                	or     eax,esi
c002696d:	89 f9                	mov    ecx,edi
c002696f:	d3 e5                	shl    ebp,cl
c0026971:	89 da                	mov    edx,ebx
c0026973:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026977:	89 d3                	mov    ebx,edx
c0026979:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002697d:	89 c6                	mov    esi,eax
c002697f:	89 d1                	mov    ecx,edx
c0026981:	39 d3                	cmp    ebx,edx
c0026983:	72 27                	jb     c00269ac <__moddi3+0x170>
c0026985:	74 21                	je     c00269a8 <__moddi3+0x16c>
c0026987:	29 f5                	sub    ebp,esi
c0026989:	19 cb                	sbb    ebx,ecx
c002698b:	89 de                	mov    esi,ebx
c002698d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026991:	d3 e6                	shl    esi,cl
c0026993:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026997:	89 f9                	mov    ecx,edi
c0026999:	d3 ed                	shr    ebp,cl
c002699b:	09 ee                	or     esi,ebp
c002699d:	89 f0                	mov    eax,esi
c002699f:	d3 eb                	shr    ebx,cl
c00269a1:	89 da                	mov    edx,ebx
c00269a3:	e9 e8 fe ff ff       	jmp    c0026890 <__moddi3+0x54>
c00269a8:	39 c5                	cmp    ebp,eax
c00269aa:	73 db                	jae    c0026987 <__moddi3+0x14b>
c00269ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269b4:	89 d1                	mov    ecx,edx
c00269b6:	89 c6                	mov    esi,eax
c00269b8:	eb cd                	jmp    c0026987 <__moddi3+0x14b>
c00269ba:	66 90                	xchg   ax,ax

c00269bc <__udivdi3>:
c00269bc:	55                   	push   ebp
c00269bd:	57                   	push   edi
c00269be:	56                   	push   esi
c00269bf:	53                   	push   ebx
c00269c0:	83 ec 1c             	sub    esp,0x1c
c00269c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269d3:	85 d2                	test   edx,edx
c00269d5:	75 41                	jne    c0026a18 <__udivdi3+0x5c>
c00269d7:	39 f7                	cmp    edi,esi
c00269d9:	76 15                	jbe    c00269f0 <__udivdi3+0x34>
c00269db:	89 e8                	mov    eax,ebp
c00269dd:	89 f2                	mov    edx,esi
c00269df:	f7 f7                	div    edi
c00269e1:	31 db                	xor    ebx,ebx
c00269e3:	89 da                	mov    edx,ebx
c00269e5:	83 c4 1c             	add    esp,0x1c
c00269e8:	5b                   	pop    ebx
c00269e9:	5e                   	pop    esi
c00269ea:	5f                   	pop    edi
c00269eb:	5d                   	pop    ebp
c00269ec:	c3                   	ret    
c00269ed:	8d 76 00             	lea    esi,[esi+0x0]
c00269f0:	89 f9                	mov    ecx,edi
c00269f2:	85 ff                	test   edi,edi
c00269f4:	75 0b                	jne    c0026a01 <__udivdi3+0x45>
c00269f6:	b8 01 00 00 00       	mov    eax,0x1
c00269fb:	31 d2                	xor    edx,edx
c00269fd:	f7 f7                	div    edi
c00269ff:	89 c1                	mov    ecx,eax
c0026a01:	31 d2                	xor    edx,edx
c0026a03:	89 f0                	mov    eax,esi
c0026a05:	f7 f1                	div    ecx
c0026a07:	89 c3                	mov    ebx,eax
c0026a09:	89 e8                	mov    eax,ebp
c0026a0b:	f7 f1                	div    ecx
c0026a0d:	89 da                	mov    edx,ebx
c0026a0f:	83 c4 1c             	add    esp,0x1c
c0026a12:	5b                   	pop    ebx
c0026a13:	5e                   	pop    esi
c0026a14:	5f                   	pop    edi
c0026a15:	5d                   	pop    ebp
c0026a16:	c3                   	ret    
c0026a17:	90                   	nop
c0026a18:	39 f2                	cmp    edx,esi
c0026a1a:	77 1c                	ja     c0026a38 <__udivdi3+0x7c>
c0026a1c:	0f bd da             	bsr    ebx,edx
c0026a1f:	83 f3 1f             	xor    ebx,0x1f
c0026a22:	75 24                	jne    c0026a48 <__udivdi3+0x8c>
c0026a24:	39 f2                	cmp    edx,esi
c0026a26:	72 08                	jb     c0026a30 <__udivdi3+0x74>
c0026a28:	39 ef                	cmp    edi,ebp
c0026a2a:	0f 87 84 00 00 00    	ja     c0026ab4 <__udivdi3+0xf8>
c0026a30:	b8 01 00 00 00       	mov    eax,0x1
c0026a35:	eb ac                	jmp    c00269e3 <__udivdi3+0x27>
c0026a37:	90                   	nop
c0026a38:	31 db                	xor    ebx,ebx
c0026a3a:	31 c0                	xor    eax,eax
c0026a3c:	89 da                	mov    edx,ebx
c0026a3e:	83 c4 1c             	add    esp,0x1c
c0026a41:	5b                   	pop    ebx
c0026a42:	5e                   	pop    esi
c0026a43:	5f                   	pop    edi
c0026a44:	5d                   	pop    ebp
c0026a45:	c3                   	ret    
c0026a46:	66 90                	xchg   ax,ax
c0026a48:	b8 20 00 00 00       	mov    eax,0x20
c0026a4d:	29 d8                	sub    eax,ebx
c0026a4f:	88 d9                	mov    cl,bl
c0026a51:	d3 e2                	shl    edx,cl
c0026a53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a57:	89 fa                	mov    edx,edi
c0026a59:	88 c1                	mov    cl,al
c0026a5b:	d3 ea                	shr    edx,cl
c0026a5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a61:	09 d1                	or     ecx,edx
c0026a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a67:	88 d9                	mov    cl,bl
c0026a69:	d3 e7                	shl    edi,cl
c0026a6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a6f:	89 f7                	mov    edi,esi
c0026a71:	88 c1                	mov    cl,al
c0026a73:	d3 ef                	shr    edi,cl
c0026a75:	88 d9                	mov    cl,bl
c0026a77:	d3 e6                	shl    esi,cl
c0026a79:	89 ea                	mov    edx,ebp
c0026a7b:	88 c1                	mov    cl,al
c0026a7d:	d3 ea                	shr    edx,cl
c0026a7f:	09 d6                	or     esi,edx
c0026a81:	89 f0                	mov    eax,esi
c0026a83:	89 fa                	mov    edx,edi
c0026a85:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a89:	89 d7                	mov    edi,edx
c0026a8b:	89 c6                	mov    esi,eax
c0026a8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a91:	39 d7                	cmp    edi,edx
c0026a93:	72 13                	jb     c0026aa8 <__udivdi3+0xec>
c0026a95:	74 09                	je     c0026aa0 <__udivdi3+0xe4>
c0026a97:	89 f0                	mov    eax,esi
c0026a99:	31 db                	xor    ebx,ebx
c0026a9b:	e9 43 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026aa0:	88 d9                	mov    cl,bl
c0026aa2:	d3 e5                	shl    ebp,cl
c0026aa4:	39 c5                	cmp    ebp,eax
c0026aa6:	73 ef                	jae    c0026a97 <__udivdi3+0xdb>
c0026aa8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026aab:	31 db                	xor    ebx,ebx
c0026aad:	e9 31 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026ab2:	66 90                	xchg   ax,ax
c0026ab4:	31 c0                	xor    eax,eax
c0026ab6:	e9 28 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026abb:	90                   	nop

c0026abc <__umoddi3>:
c0026abc:	55                   	push   ebp
c0026abd:	57                   	push   edi
c0026abe:	56                   	push   esi
c0026abf:	53                   	push   ebx
c0026ac0:	83 ec 1c             	sub    esp,0x1c
c0026ac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026acb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026acf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ad3:	89 da                	mov    edx,ebx
c0026ad5:	85 c0                	test   eax,eax
c0026ad7:	75 37                	jne    c0026b10 <__umoddi3+0x54>
c0026ad9:	39 df                	cmp    edi,ebx
c0026adb:	76 13                	jbe    c0026af0 <__umoddi3+0x34>
c0026add:	89 f0                	mov    eax,esi
c0026adf:	f7 f7                	div    edi
c0026ae1:	89 d0                	mov    eax,edx
c0026ae3:	31 d2                	xor    edx,edx
c0026ae5:	83 c4 1c             	add    esp,0x1c
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5e                   	pop    esi
c0026aea:	5f                   	pop    edi
c0026aeb:	5d                   	pop    ebp
c0026aec:	c3                   	ret    
c0026aed:	8d 76 00             	lea    esi,[esi+0x0]
c0026af0:	89 fd                	mov    ebp,edi
c0026af2:	85 ff                	test   edi,edi
c0026af4:	75 0b                	jne    c0026b01 <__umoddi3+0x45>
c0026af6:	b8 01 00 00 00       	mov    eax,0x1
c0026afb:	31 d2                	xor    edx,edx
c0026afd:	f7 f7                	div    edi
c0026aff:	89 c5                	mov    ebp,eax
c0026b01:	89 d8                	mov    eax,ebx
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	f7 f5                	div    ebp
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	f7 f5                	div    ebp
c0026b0b:	89 d0                	mov    eax,edx
c0026b0d:	eb d4                	jmp    c0026ae3 <__umoddi3+0x27>
c0026b0f:	90                   	nop
c0026b10:	89 f1                	mov    ecx,esi
c0026b12:	39 d8                	cmp    eax,ebx
c0026b14:	76 0a                	jbe    c0026b20 <__umoddi3+0x64>
c0026b16:	89 f0                	mov    eax,esi
c0026b18:	83 c4 1c             	add    esp,0x1c
c0026b1b:	5b                   	pop    ebx
c0026b1c:	5e                   	pop    esi
c0026b1d:	5f                   	pop    edi
c0026b1e:	5d                   	pop    ebp
c0026b1f:	c3                   	ret    
c0026b20:	0f bd e8             	bsr    ebp,eax
c0026b23:	83 f5 1f             	xor    ebp,0x1f
c0026b26:	75 1c                	jne    c0026b44 <__umoddi3+0x88>
c0026b28:	39 d8                	cmp    eax,ebx
c0026b2a:	72 04                	jb     c0026b30 <__umoddi3+0x74>
c0026b2c:	39 f7                	cmp    edi,esi
c0026b2e:	77 08                	ja     c0026b38 <__umoddi3+0x7c>
c0026b30:	89 da                	mov    edx,ebx
c0026b32:	29 fe                	sub    esi,edi
c0026b34:	19 c2                	sbb    edx,eax
c0026b36:	89 f1                	mov    ecx,esi
c0026b38:	89 c8                	mov    eax,ecx
c0026b3a:	83 c4 1c             	add    esp,0x1c
c0026b3d:	5b                   	pop    ebx
c0026b3e:	5e                   	pop    esi
c0026b3f:	5f                   	pop    edi
c0026b40:	5d                   	pop    ebp
c0026b41:	c3                   	ret    
c0026b42:	66 90                	xchg   ax,ax
c0026b44:	ba 20 00 00 00       	mov    edx,0x20
c0026b49:	29 ea                	sub    edx,ebp
c0026b4b:	89 e9                	mov    ecx,ebp
c0026b4d:	d3 e0                	shl    eax,cl
c0026b4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b53:	89 f8                	mov    eax,edi
c0026b55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b59:	88 d1                	mov    cl,dl
c0026b5b:	d3 e8                	shr    eax,cl
c0026b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b61:	09 c1                	or     ecx,eax
c0026b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b67:	89 e9                	mov    ecx,ebp
c0026b69:	d3 e7                	shl    edi,cl
c0026b6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b6f:	89 d8                	mov    eax,ebx
c0026b71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b75:	88 d1                	mov    cl,dl
c0026b77:	d3 e8                	shr    eax,cl
c0026b79:	89 c7                	mov    edi,eax
c0026b7b:	89 e9                	mov    ecx,ebp
c0026b7d:	d3 e3                	shl    ebx,cl
c0026b7f:	89 f0                	mov    eax,esi
c0026b81:	88 d1                	mov    cl,dl
c0026b83:	d3 e8                	shr    eax,cl
c0026b85:	09 d8                	or     eax,ebx
c0026b87:	89 e9                	mov    ecx,ebp
c0026b89:	d3 e6                	shl    esi,cl
c0026b8b:	89 f3                	mov    ebx,esi
c0026b8d:	89 fa                	mov    edx,edi
c0026b8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b93:	89 d1                	mov    ecx,edx
c0026b95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b99:	89 c6                	mov    esi,eax
c0026b9b:	89 d7                	mov    edi,edx
c0026b9d:	39 d1                	cmp    ecx,edx
c0026b9f:	72 27                	jb     c0026bc8 <__umoddi3+0x10c>
c0026ba1:	74 21                	je     c0026bc4 <__umoddi3+0x108>
c0026ba3:	89 ca                	mov    edx,ecx
c0026ba5:	29 f3                	sub    ebx,esi
c0026ba7:	19 fa                	sbb    edx,edi
c0026ba9:	89 d0                	mov    eax,edx
c0026bab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026baf:	d3 e0                	shl    eax,cl
c0026bb1:	89 e9                	mov    ecx,ebp
c0026bb3:	d3 eb                	shr    ebx,cl
c0026bb5:	09 d8                	or     eax,ebx
c0026bb7:	d3 ea                	shr    edx,cl
c0026bb9:	83 c4 1c             	add    esp,0x1c
c0026bbc:	5b                   	pop    ebx
c0026bbd:	5e                   	pop    esi
c0026bbe:	5f                   	pop    edi
c0026bbf:	5d                   	pop    ebp
c0026bc0:	c3                   	ret    
c0026bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bc4:	39 c3                	cmp    ebx,eax
c0026bc6:	73 db                	jae    c0026ba3 <__umoddi3+0xe7>
c0026bc8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bcc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bd0:	89 d7                	mov    edi,edx
c0026bd2:	89 c6                	mov    esi,eax
c0026bd4:	eb cd                	jmp    c0026ba3 <__umoddi3+0xe7>

c0026bd6 <__addsf3>:
c0026bd6:	55                   	push   ebp
c0026bd7:	89 e5                	mov    ebp,esp
c0026bd9:	57                   	push   edi
c0026bda:	56                   	push   esi
c0026bdb:	53                   	push   ebx
c0026bdc:	83 ec 08             	sub    esp,0x8
c0026bdf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026be2:	89 fa                	mov    edx,edi
c0026be4:	89 f8                	mov    eax,edi
c0026be6:	c1 f8 17             	sar    eax,0x17
c0026be9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bec:	c1 e2 08             	shl    edx,0x8
c0026bef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bf5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bf8:	89 de                	mov    esi,ebx
c0026bfa:	c1 fe 17             	sar    esi,0x17
c0026bfd:	c1 e3 08             	shl    ebx,0x8
c0026c00:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c06:	31 f0                	xor    eax,esi
c0026c08:	0f 88 3b 01 00 00    	js     c0026d49 <__addsf3+0x173>
c0026c0e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c11:	29 f1                	sub    ecx,esi
c0026c13:	85 c9                	test   ecx,ecx
c0026c15:	7e 54                	jle    c0026c6b <__addsf3+0x95>
c0026c17:	89 f0                	mov    eax,esi
c0026c19:	84 c0                	test   al,al
c0026c1b:	75 10                	jne    c0026c2d <__addsf3+0x57>
c0026c1d:	85 db                	test   ebx,ebx
c0026c1f:	0f 84 aa 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c25:	49                   	dec    ecx
c0026c26:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c29:	74 38                	je     c0026c63 <__addsf3+0x8d>
c0026c2b:	eb 13                	jmp    c0026c40 <__addsf3+0x6a>
c0026c2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c30:	f7 d0                	not    eax
c0026c32:	84 c0                	test   al,al
c0026c34:	0f 84 95 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c3a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c40:	83 f9 1f             	cmp    ecx,0x1f
c0026c43:	0f 8f 86 02 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026c49:	89 de                	mov    esi,ebx
c0026c4b:	d3 ee                	shr    esi,cl
c0026c4d:	b8 20 00 00 00       	mov    eax,0x20
c0026c52:	29 c8                	sub    eax,ecx
c0026c54:	89 c1                	mov    ecx,eax
c0026c56:	d3 e3                	shl    ebx,cl
c0026c58:	31 c0                	xor    eax,eax
c0026c5a:	85 db                	test   ebx,ebx
c0026c5c:	0f 95 c0             	setne  al
c0026c5f:	09 f0                	or     eax,esi
c0026c61:	01 d0                	add    eax,edx
c0026c63:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c66:	e9 b6 00 00 00       	jmp    c0026d21 <__addsf3+0x14b>
c0026c6b:	74 5c                	je     c0026cc9 <__addsf3+0xf3>
c0026c6d:	89 f1                	mov    ecx,esi
c0026c6f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c72:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c75:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c79:	75 14                	jne    c0026c8f <__addsf3+0xb9>
c0026c7b:	85 d2                	test   edx,edx
c0026c7d:	0f 84 4c 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c83:	49                   	dec    ecx
c0026c84:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c87:	0f 84 94 00 00 00    	je     c0026d21 <__addsf3+0x14b>
c0026c8d:	eb 12                	jmp    c0026ca1 <__addsf3+0xcb>
c0026c8f:	89 f0                	mov    eax,esi
c0026c91:	f7 d0                	not    eax
c0026c93:	84 c0                	test   al,al
c0026c95:	0f 84 34 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c9b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ca4:	83 f9 1f             	cmp    ecx,0x1f
c0026ca7:	0f 8f 22 02 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026cad:	89 d7                	mov    edi,edx
c0026caf:	d3 ef                	shr    edi,cl
c0026cb1:	b8 20 00 00 00       	mov    eax,0x20
c0026cb6:	29 c8                	sub    eax,ecx
c0026cb8:	89 c1                	mov    ecx,eax
c0026cba:	d3 e2                	shl    edx,cl
c0026cbc:	31 c0                	xor    eax,eax
c0026cbe:	85 d2                	test   edx,edx
c0026cc0:	0f 95 c0             	setne  al
c0026cc3:	09 f8                	or     eax,edi
c0026cc5:	01 d8                	add    eax,ebx
c0026cc7:	eb 58                	jmp    c0026d21 <__addsf3+0x14b>
c0026cc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ccc:	8d 70 01             	lea    esi,[eax+0x1]
c0026ccf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cd5:	75 32                	jne    c0026d09 <__addsf3+0x133>
c0026cd7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cdb:	75 1f                	jne    c0026cfc <__addsf3+0x126>
c0026cdd:	85 d2                	test   edx,edx
c0026cdf:	0f 84 e0 01 00 00    	je     c0026ec5 <__addsf3+0x2ef>
c0026ce5:	85 db                	test   ebx,ebx
c0026ce7:	0f 84 e2 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026ced:	89 d0                	mov    eax,edx
c0026cef:	01 d8                	add    eax,ebx
c0026cf1:	0f 89 a9 01 00 00    	jns    c0026ea0 <__addsf3+0x2ca>
c0026cf7:	e9 9d 01 00 00       	jmp    c0026e99 <__addsf3+0x2c3>
c0026cfc:	85 d2                	test   edx,edx
c0026cfe:	0f 85 cb 01 00 00    	jne    c0026ecf <__addsf3+0x2f9>
c0026d04:	e9 bc 01 00 00       	jmp    c0026ec5 <__addsf3+0x2ef>
c0026d09:	31 c0                	xor    eax,eax
c0026d0b:	89 f1                	mov    ecx,esi
c0026d0d:	f7 d1                	not    ecx
c0026d0f:	84 c9                	test   cl,cl
c0026d11:	0f 84 90 01 00 00    	je     c0026ea7 <__addsf3+0x2d1>
c0026d17:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d1a:	d1 e8                	shr    eax,1
c0026d1c:	e9 86 01 00 00       	jmp    c0026ea7 <__addsf3+0x2d1>
c0026d21:	85 c0                	test   eax,eax
c0026d23:	0f 89 7e 01 00 00    	jns    c0026ea7 <__addsf3+0x2d1>
c0026d29:	46                   	inc    esi
c0026d2a:	89 f2                	mov    edx,esi
c0026d2c:	f7 d2                	not    edx
c0026d2e:	84 d2                	test   dl,dl
c0026d30:	0f 84 6f 01 00 00    	je     c0026ea5 <__addsf3+0x2cf>
c0026d36:	89 c2                	mov    edx,eax
c0026d38:	83 e2 01             	and    edx,0x1
c0026d3b:	d1 e8                	shr    eax,1
c0026d3d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d42:	09 d0                	or     eax,edx
c0026d44:	e9 5e 01 00 00       	jmp    c0026ea7 <__addsf3+0x2d1>
c0026d49:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d50:	89 f0                	mov    eax,esi
c0026d52:	0f b6 c0             	movzx  eax,al
c0026d55:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d58:	29 c1                	sub    ecx,eax
c0026d5a:	85 c9                	test   ecx,ecx
c0026d5c:	7e 55                	jle    c0026db3 <__addsf3+0x1dd>
c0026d5e:	85 c0                	test   eax,eax
c0026d60:	75 11                	jne    c0026d73 <__addsf3+0x19d>
c0026d62:	85 db                	test   ebx,ebx
c0026d64:	0f 84 65 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026d6a:	49                   	dec    ecx
c0026d6b:	75 19                	jne    c0026d86 <__addsf3+0x1b0>
c0026d6d:	89 d0                	mov    eax,edx
c0026d6f:	29 d8                	sub    eax,ebx
c0026d71:	eb 38                	jmp    c0026dab <__addsf3+0x1d5>
c0026d73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d76:	f7 d0                	not    eax
c0026d78:	84 c0                	test   al,al
c0026d7a:	0f 84 4f 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026d80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d86:	83 f9 1f             	cmp    ecx,0x1f
c0026d89:	0f 8f 40 01 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026d8f:	89 de                	mov    esi,ebx
c0026d91:	d3 ee                	shr    esi,cl
c0026d93:	b8 20 00 00 00       	mov    eax,0x20
c0026d98:	29 c8                	sub    eax,ecx
c0026d9a:	89 c1                	mov    ecx,eax
c0026d9c:	d3 e3                	shl    ebx,cl
c0026d9e:	31 c0                	xor    eax,eax
c0026da0:	85 db                	test   ebx,ebx
c0026da2:	0f 95 c0             	setne  al
c0026da5:	09 f0                	or     eax,esi
c0026da7:	29 c2                	sub    edx,eax
c0026da9:	89 d0                	mov    eax,edx
c0026dab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dae:	e9 af 00 00 00       	jmp    c0026e62 <__addsf3+0x28c>
c0026db3:	74 5c                	je     c0026e11 <__addsf3+0x23b>
c0026db5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026db8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dbb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dbf:	75 14                	jne    c0026dd5 <__addsf3+0x1ff>
c0026dc1:	85 d2                	test   edx,edx
c0026dc3:	0f 84 06 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026dc9:	48                   	dec    eax
c0026dca:	75 1b                	jne    c0026de7 <__addsf3+0x211>
c0026dcc:	89 d8                	mov    eax,ebx
c0026dce:	29 d0                	sub    eax,edx
c0026dd0:	e9 8d 00 00 00       	jmp    c0026e62 <__addsf3+0x28c>
c0026dd5:	89 f1                	mov    ecx,esi
c0026dd7:	f7 d1                	not    ecx
c0026dd9:	84 c9                	test   cl,cl
c0026ddb:	0f 84 ee 00 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026de1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026de7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dea:	83 f8 1f             	cmp    eax,0x1f
c0026ded:	0f 8f dc 00 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026df3:	89 d7                	mov    edi,edx
c0026df5:	88 c1                	mov    cl,al
c0026df7:	d3 ef                	shr    edi,cl
c0026df9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dfe:	29 c1                	sub    ecx,eax
c0026e00:	d3 e2                	shl    edx,cl
c0026e02:	31 c0                	xor    eax,eax
c0026e04:	85 d2                	test   edx,edx
c0026e06:	0f 95 c0             	setne  al
c0026e09:	09 f8                	or     eax,edi
c0026e0b:	29 c3                	sub    ebx,eax
c0026e0d:	89 d8                	mov    eax,ebx
c0026e0f:	eb 51                	jmp    c0026e62 <__addsf3+0x28c>
c0026e11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e14:	40                   	inc    eax
c0026e15:	a8 fe                	test   al,0xfe
c0026e17:	75 3d                	jne    c0026e56 <__addsf3+0x280>
c0026e19:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e1d:	0f 85 a7 00 00 00    	jne    c0026eca <__addsf3+0x2f4>
c0026e23:	85 d2                	test   edx,edx
c0026e25:	75 12                	jne    c0026e39 <__addsf3+0x263>
c0026e27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2a:	85 db                	test   ebx,ebx
c0026e2c:	0f 85 9d 00 00 00    	jne    c0026ecf <__addsf3+0x2f9>
c0026e32:	31 ff                	xor    edi,edi
c0026e34:	e9 96 00 00 00       	jmp    c0026ecf <__addsf3+0x2f9>
c0026e39:	85 db                	test   ebx,ebx
c0026e3b:	0f 84 8e 00 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026e41:	89 d0                	mov    eax,edx
c0026e43:	29 d8                	sub    eax,ebx
c0026e45:	79 06                	jns    c0026e4d <__addsf3+0x277>
c0026e47:	89 d8                	mov    eax,ebx
c0026e49:	29 d0                	sub    eax,edx
c0026e4b:	eb 5a                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026e4d:	bf 00 00 00 00       	mov    edi,0x0
c0026e52:	74 7b                	je     c0026ecf <__addsf3+0x2f9>
c0026e54:	eb 4a                	jmp    c0026ea0 <__addsf3+0x2ca>
c0026e56:	89 d0                	mov    eax,edx
c0026e58:	29 d8                	sub    eax,ebx
c0026e5a:	79 12                	jns    c0026e6e <__addsf3+0x298>
c0026e5c:	89 d8                	mov    eax,ebx
c0026e5e:	29 d0                	sub    eax,edx
c0026e60:	eb 09                	jmp    c0026e6b <__addsf3+0x295>
c0026e62:	85 c0                	test   eax,eax
c0026e64:	79 41                	jns    c0026ea7 <__addsf3+0x2d1>
c0026e66:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e6b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e6e:	31 f6                	xor    esi,esi
c0026e70:	85 c0                	test   eax,eax
c0026e72:	74 33                	je     c0026ea7 <__addsf3+0x2d1>
c0026e74:	0f bd c8             	bsr    ecx,eax
c0026e77:	83 f1 1f             	xor    ecx,0x1f
c0026e7a:	d3 e0                	shl    eax,cl
c0026e7c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e80:	39 ca                	cmp    edx,ecx
c0026e82:	7f 10                	jg     c0026e94 <__addsf3+0x2be>
c0026e84:	29 d1                	sub    ecx,edx
c0026e86:	41                   	inc    ecx
c0026e87:	d3 e8                	shr    eax,cl
c0026e89:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e92:	eb 13                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026e94:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e97:	29 ce                	sub    esi,ecx
c0026e99:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e9e:	eb 07                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026ea0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ea3:	eb 02                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026ea5:	31 c0                	xor    eax,eax
c0026ea7:	89 c2                	mov    edx,eax
c0026ea9:	c1 ea 08             	shr    edx,0x8
c0026eac:	a8 7f                	test   al,0x7f
c0026eae:	0f 95 c1             	setne  cl
c0026eb1:	09 d1                	or     ecx,edx
c0026eb3:	83 e1 01             	and    ecx,0x1
c0026eb6:	c1 e8 07             	shr    eax,0x7
c0026eb9:	21 c8                	and    eax,ecx
c0026ebb:	c1 e6 17             	shl    esi,0x17
c0026ebe:	09 d6                	or     esi,edx
c0026ec0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ec3:	eb 0a                	jmp    c0026ecf <__addsf3+0x2f9>
c0026ec5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ec8:	eb 05                	jmp    c0026ecf <__addsf3+0x2f9>
c0026eca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ecf:	89 f8                	mov    eax,edi
c0026ed1:	5a                   	pop    edx
c0026ed2:	59                   	pop    ecx
c0026ed3:	5b                   	pop    ebx
c0026ed4:	5e                   	pop    esi
c0026ed5:	5f                   	pop    edi
c0026ed6:	5d                   	pop    ebp
c0026ed7:	c3                   	ret    

c0026ed8 <__subsf3>:
c0026ed8:	55                   	push   ebp
c0026ed9:	89 e5                	mov    ebp,esp
c0026edb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ede:	05 00 00 00 80       	add    eax,0x80000000
c0026ee3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ee6:	5d                   	pop    ebp
c0026ee7:	e9 ea fc ff ff       	jmp    c0026bd6 <__addsf3>

c0026eec <__negsf2>:
c0026eec:	55                   	push   ebp
c0026eed:	89 e5                	mov    ebp,esp
c0026eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ef2:	05 00 00 00 80       	add    eax,0x80000000
c0026ef7:	5d                   	pop    ebp
c0026ef8:	c3                   	ret    

c0026ef9 <__mulsf3>:
c0026ef9:	55                   	push   ebp
c0026efa:	89 e5                	mov    ebp,esp
c0026efc:	57                   	push   edi
c0026efd:	56                   	push   esi
c0026efe:	53                   	push   ebx
c0026eff:	83 ec 1c             	sub    esp,0x1c
c0026f02:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f05:	89 f0                	mov    eax,esi
c0026f07:	89 f1                	mov    ecx,esi
c0026f09:	c1 f9 17             	sar    ecx,0x17
c0026f0c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f0f:	c1 e0 08             	shl    eax,0x8
c0026f12:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f17:	89 c1                	mov    ecx,eax
c0026f19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f1c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f1f:	89 c7                	mov    edi,eax
c0026f21:	c1 ff 17             	sar    edi,0x17
c0026f24:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f28:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f2b:	89 f8                	mov    eax,edi
c0026f2d:	0f b6 c0             	movzx  eax,al
c0026f30:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f33:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f37:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f3a:	42                   	inc    edx
c0026f3b:	80 e2 fe             	and    dl,0xfe
c0026f3e:	75 7b                	jne    c0026fbb <__mulsf3+0xc2>
c0026f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f44:	74 54                	je     c0026f9a <__mulsf3+0xa1>
c0026f46:	85 c9                	test   ecx,ecx
c0026f48:	0f 85 64 01 00 00    	jne    c00270b2 <__mulsf3+0x1b9>
c0026f4e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f51:	80 e2 fe             	and    dl,0xfe
c0026f54:	75 1f                	jne    c0026f75 <__mulsf3+0x7c>
c0026f56:	85 c0                	test   eax,eax
c0026f58:	b8 00 00 00 00       	mov    eax,0x0
c0026f5d:	74 29                	je     c0026f88 <__mulsf3+0x8f>
c0026f5f:	53                   	push   ebx
c0026f60:	53                   	push   ebx
c0026f61:	50                   	push   eax
c0026f62:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f65:	e8 96 05 00 00       	call   c0027500 <__nesf2>
c0026f6a:	83 c4 10             	add    esp,0x10
c0026f6d:	85 c0                	test   eax,eax
c0026f6f:	0f 85 3a 01 00 00    	jne    c00270af <__mulsf3+0x1b6>
c0026f75:	85 ff                	test   edi,edi
c0026f77:	0f 89 35 01 00 00    	jns    c00270b2 <__mulsf3+0x1b9>
c0026f7d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f83:	e9 2a 01 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0026f88:	51                   	push   ecx
c0026f89:	51                   	push   ecx
c0026f8a:	50                   	push   eax
c0026f8b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f8e:	e8 6d 05 00 00       	call   c0027500 <__nesf2>
c0026f93:	83 c4 10             	add    esp,0x10
c0026f96:	85 c0                	test   eax,eax
c0026f98:	eb 15                	jmp    c0026faf <__mulsf3+0xb6>
c0026f9a:	85 c9                	test   ecx,ecx
c0026f9c:	74 0b                	je     c0026fa9 <__mulsf3+0xb0>
c0026f9e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fa1:	01 c9                	add    ecx,ecx
c0026fa3:	78 16                	js     c0026fbb <__mulsf3+0xc2>
c0026fa5:	89 d3                	mov    ebx,edx
c0026fa7:	eb f5                	jmp    c0026f9e <__mulsf3+0xa5>
c0026fa9:	89 f8                	mov    eax,edi
c0026fab:	f7 d0                	not    eax
c0026fad:	84 c0                	test   al,al
c0026faf:	75 c4                	jne    c0026f75 <__mulsf3+0x7c>
c0026fb1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fb6:	e9 f7 00 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0026fbb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fbe:	c1 e6 08             	shl    esi,0x8
c0026fc1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fc7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fca:	80 e2 fe             	and    dl,0xfe
c0026fcd:	75 63                	jne    c0027032 <__mulsf3+0x139>
c0026fcf:	85 c0                	test   eax,eax
c0026fd1:	74 2f                	je     c0027002 <__mulsf3+0x109>
c0026fd3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fd7:	0f 89 d2 00 00 00    	jns    c00270af <__mulsf3+0x1b6>
c0026fdd:	52                   	push   edx
c0026fde:	52                   	push   edx
c0026fdf:	6a 00                	push   0x0
c0026fe1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe4:	e8 dc 04 00 00       	call   c00274c5 <__eqsf2>
c0026fe9:	83 c4 10             	add    esp,0x10
c0026fec:	85 c0                	test   eax,eax
c0026fee:	0f 85 bb 00 00 00    	jne    c00270af <__mulsf3+0x1b6>
c0026ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ff7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ffd:	e9 b0 00 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0027002:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027005:	50                   	push   eax
c0027006:	50                   	push   eax
c0027007:	6a 00                	push   0x0
c0027009:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002700c:	e8 b4 04 00 00       	call   c00274c5 <__eqsf2>
c0027011:	83 c4 10             	add    esp,0x10
c0027014:	85 c0                	test   eax,eax
c0027016:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027019:	75 0c                	jne    c0027027 <__mulsf3+0x12e>
c002701b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002701f:	0f 89 8a 00 00 00    	jns    c00270af <__mulsf3+0x1b6>
c0027025:	eb cd                	jmp    c0026ff4 <__mulsf3+0xfb>
c0027027:	8d 43 ff             	lea    eax,[ebx-0x1]
c002702a:	01 f6                	add    esi,esi
c002702c:	78 04                	js     c0027032 <__mulsf3+0x139>
c002702e:	89 c3                	mov    ebx,eax
c0027030:	eb f5                	jmp    c0027027 <__mulsf3+0x12e>
c0027032:	89 c8                	mov    eax,ecx
c0027034:	0d 00 00 00 80       	or     eax,0x80000000
c0027039:	81 ce 00 00 00 80    	or     esi,0x80000000
c002703f:	f7 e6                	mul    esi
c0027041:	85 c0                	test   eax,eax
c0027043:	0f 95 c0             	setne  al
c0027046:	0f b6 c0             	movzx  eax,al
c0027049:	09 c2                	or     edx,eax
c002704b:	78 03                	js     c0027050 <__mulsf3+0x157>
c002704d:	01 d2                	add    edx,edx
c002704f:	4b                   	dec    ebx
c0027050:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027056:	7f 22                	jg     c002707a <__mulsf3+0x181>
c0027058:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002705e:	85 db                	test   ebx,ebx
c0027060:	7f 23                	jg     c0027085 <__mulsf3+0x18c>
c0027062:	83 fb e9             	cmp    ebx,0xffffffe9
c0027065:	7c 1a                	jl     c0027081 <__mulsf3+0x188>
c0027067:	81 ca 00 00 00 80    	or     edx,0x80000000
c002706d:	b9 01 00 00 00       	mov    ecx,0x1
c0027072:	29 d9                	sub    ecx,ebx
c0027074:	d3 ea                	shr    edx,cl
c0027076:	31 db                	xor    ebx,ebx
c0027078:	eb 0b                	jmp    c0027085 <__mulsf3+0x18c>
c002707a:	bb ff 00 00 00       	mov    ebx,0xff
c002707f:	eb 02                	jmp    c0027083 <__mulsf3+0x18a>
c0027081:	31 db                	xor    ebx,ebx
c0027083:	31 d2                	xor    edx,edx
c0027085:	89 d0                	mov    eax,edx
c0027087:	c1 e8 08             	shr    eax,0x8
c002708a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002708d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027093:	09 fb                	or     ebx,edi
c0027095:	c1 e3 17             	shl    ebx,0x17
c0027098:	09 c3                	or     ebx,eax
c002709a:	f6 c2 7f             	test   dl,0x7f
c002709d:	0f 95 c1             	setne  cl
c00270a0:	09 c8                	or     eax,ecx
c00270a2:	83 e0 01             	and    eax,0x1
c00270a5:	c1 ea 07             	shr    edx,0x7
c00270a8:	21 c2                	and    edx,eax
c00270aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270ad:	eb 03                	jmp    c00270b2 <__mulsf3+0x1b9>
c00270af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270b2:	89 f0                	mov    eax,esi
c00270b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270b7:	5b                   	pop    ebx
c00270b8:	5e                   	pop    esi
c00270b9:	5f                   	pop    edi
c00270ba:	5d                   	pop    ebp
c00270bb:	c3                   	ret    

c00270bc <__divsf3>:
c00270bc:	55                   	push   ebp
c00270bd:	89 e5                	mov    ebp,esp
c00270bf:	57                   	push   edi
c00270c0:	56                   	push   esi
c00270c1:	53                   	push   ebx
c00270c2:	83 ec 1c             	sub    esp,0x1c
c00270c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270c8:	89 d8                	mov    eax,ebx
c00270ca:	89 d9                	mov    ecx,ebx
c00270cc:	c1 f9 17             	sar    ecx,0x17
c00270cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270d2:	c1 e0 08             	shl    eax,0x8
c00270d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270da:	89 c1                	mov    ecx,eax
c00270dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270e2:	89 c7                	mov    edi,eax
c00270e4:	c1 ff 17             	sar    edi,0x17
c00270e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270ee:	89 f8                	mov    eax,edi
c00270f0:	0f b6 c0             	movzx  eax,al
c00270f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270f6:	29 c6                	sub    esi,eax
c00270f8:	83 c6 7f             	add    esi,0x7f
c00270fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270fe:	42                   	inc    edx
c00270ff:	80 e2 fe             	and    dl,0xfe
c0027102:	0f 85 9c 00 00 00    	jne    c00271a4 <__divsf3+0xe8>
c0027108:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002710c:	74 33                	je     c0027141 <__divsf3+0x85>
c002710e:	85 c9                	test   ecx,ecx
c0027110:	0f 85 c7 01 00 00    	jne    c00272dd <__divsf3+0x221>
c0027116:	8d 57 01             	lea    edx,[edi+0x1]
c0027119:	80 e2 fe             	and    dl,0xfe
c002711c:	75 2f                	jne    c002714d <__divsf3+0x91>
c002711e:	85 c0                	test   eax,eax
c0027120:	74 2b                	je     c002714d <__divsf3+0x91>
c0027122:	51                   	push   ecx
c0027123:	51                   	push   ecx
c0027124:	6a 00                	push   0x0
c0027126:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027129:	e8 d2 03 00 00       	call   c0027500 <__nesf2>
c002712e:	83 c4 10             	add    esp,0x10
c0027131:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027134:	85 c0                	test   eax,eax
c0027136:	0f 85 a1 01 00 00    	jne    c00272dd <__divsf3+0x221>
c002713c:	e9 92 01 00 00       	jmp    c00272d3 <__divsf3+0x217>
c0027141:	85 c9                	test   ecx,ecx
c0027143:	75 1b                	jne    c0027160 <__divsf3+0xa4>
c0027145:	8d 57 01             	lea    edx,[edi+0x1]
c0027148:	80 e2 fe             	and    dl,0xfe
c002714b:	74 1e                	je     c002716b <__divsf3+0xaf>
c002714d:	85 ff                	test   edi,edi
c002714f:	0f 89 88 01 00 00    	jns    c00272dd <__divsf3+0x221>
c0027155:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002715b:	e9 7d 01 00 00       	jmp    c00272dd <__divsf3+0x221>
c0027160:	8d 56 ff             	lea    edx,[esi-0x1]
c0027163:	01 c9                	add    ecx,ecx
c0027165:	78 3d                	js     c00271a4 <__divsf3+0xe8>
c0027167:	89 d6                	mov    esi,edx
c0027169:	eb f5                	jmp    c0027160 <__divsf3+0xa4>
c002716b:	85 c0                	test   eax,eax
c002716d:	b8 00 00 00 00       	mov    eax,0x0
c0027172:	74 18                	je     c002718c <__divsf3+0xd0>
c0027174:	52                   	push   edx
c0027175:	52                   	push   edx
c0027176:	50                   	push   eax
c0027177:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002717a:	e8 81 03 00 00       	call   c0027500 <__nesf2>
c002717f:	83 c4 10             	add    esp,0x10
c0027182:	85 c0                	test   eax,eax
c0027184:	0f 85 50 01 00 00    	jne    c00272da <__divsf3+0x21e>
c002718a:	eb c1                	jmp    c002714d <__divsf3+0x91>
c002718c:	56                   	push   esi
c002718d:	56                   	push   esi
c002718e:	50                   	push   eax
c002718f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027192:	e8 69 03 00 00       	call   c0027500 <__nesf2>
c0027197:	83 c4 10             	add    esp,0x10
c002719a:	85 c0                	test   eax,eax
c002719c:	0f 84 31 01 00 00    	je     c00272d3 <__divsf3+0x217>
c00271a2:	eb a9                	jmp    c002714d <__divsf3+0x91>
c00271a4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271a7:	c1 e3 08             	shl    ebx,0x8
c00271aa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271b0:	8d 57 01             	lea    edx,[edi+0x1]
c00271b3:	80 e2 fe             	and    dl,0xfe
c00271b6:	75 71                	jne    c0027229 <__divsf3+0x16d>
c00271b8:	85 c0                	test   eax,eax
c00271ba:	ba 00 00 00 00       	mov    edx,0x0
c00271bf:	74 2f                	je     c00271f0 <__divsf3+0x134>
c00271c1:	51                   	push   ecx
c00271c2:	51                   	push   ecx
c00271c3:	52                   	push   edx
c00271c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c7:	e8 f9 02 00 00       	call   c00274c5 <__eqsf2>
c00271cc:	83 c4 10             	add    esp,0x10
c00271cf:	85 c0                	test   eax,eax
c00271d1:	0f 85 03 01 00 00    	jne    c00272da <__divsf3+0x21e>
c00271d7:	31 d2                	xor    edx,edx
c00271d9:	89 d3                	mov    ebx,edx
c00271db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271de:	31 f8                	xor    eax,edi
c00271e0:	0f 89 f7 00 00 00    	jns    c00272dd <__divsf3+0x221>
c00271e6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271eb:	e9 ed 00 00 00       	jmp    c00272dd <__divsf3+0x221>
c00271f0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271f3:	50                   	push   eax
c00271f4:	50                   	push   eax
c00271f5:	52                   	push   edx
c00271f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f9:	e8 c7 02 00 00       	call   c00274c5 <__eqsf2>
c00271fe:	83 c4 10             	add    esp,0x10
c0027201:	85 c0                	test   eax,eax
c0027203:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027206:	75 16                	jne    c002721e <__divsf3+0x162>
c0027208:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002720b:	31 fb                	xor    ebx,edi
c002720d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027213:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027219:	e9 bf 00 00 00       	jmp    c00272dd <__divsf3+0x221>
c002721e:	8d 46 01             	lea    eax,[esi+0x1]
c0027221:	01 db                	add    ebx,ebx
c0027223:	78 04                	js     c0027229 <__divsf3+0x16d>
c0027225:	89 c6                	mov    esi,eax
c0027227:	eb f5                	jmp    c002721e <__divsf3+0x162>
c0027229:	89 c8                	mov    eax,ecx
c002722b:	0d 00 00 00 80       	or     eax,0x80000000
c0027230:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027236:	31 d2                	xor    edx,edx
c0027238:	39 d8                	cmp    eax,ebx
c002723a:	72 07                	jb     c0027243 <__divsf3+0x187>
c002723c:	29 d8                	sub    eax,ebx
c002723e:	ba 01 00 00 00       	mov    edx,0x1
c0027243:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002724a:	01 d2                	add    edx,edx
c002724c:	89 c1                	mov    ecx,eax
c002724e:	01 c0                	add    eax,eax
c0027250:	85 c9                	test   ecx,ecx
c0027252:	78 04                	js     c0027258 <__divsf3+0x19c>
c0027254:	39 c3                	cmp    ebx,eax
c0027256:	77 05                	ja     c002725d <__divsf3+0x1a1>
c0027258:	29 d8                	sub    eax,ebx
c002725a:	83 ca 01             	or     edx,0x1
c002725d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027260:	75 e8                	jne    c002724a <__divsf3+0x18e>
c0027262:	85 c0                	test   eax,eax
c0027264:	0f 95 c0             	setne  al
c0027267:	0f b6 c0             	movzx  eax,al
c002726a:	c1 e2 06             	shl    edx,0x6
c002726d:	09 c2                	or     edx,eax
c002726f:	78 03                	js     c0027274 <__divsf3+0x1b8>
c0027271:	01 d2                	add    edx,edx
c0027273:	4e                   	dec    esi
c0027274:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002727a:	7f 22                	jg     c002729e <__divsf3+0x1e2>
c002727c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027282:	85 f6                	test   esi,esi
c0027284:	7f 23                	jg     c00272a9 <__divsf3+0x1ed>
c0027286:	83 fe e9             	cmp    esi,0xffffffe9
c0027289:	7c 1a                	jl     c00272a5 <__divsf3+0x1e9>
c002728b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027291:	b9 01 00 00 00       	mov    ecx,0x1
c0027296:	29 f1                	sub    ecx,esi
c0027298:	d3 ea                	shr    edx,cl
c002729a:	31 f6                	xor    esi,esi
c002729c:	eb 0b                	jmp    c00272a9 <__divsf3+0x1ed>
c002729e:	be ff 00 00 00       	mov    esi,0xff
c00272a3:	eb 02                	jmp    c00272a7 <__divsf3+0x1eb>
c00272a5:	31 f6                	xor    esi,esi
c00272a7:	31 d2                	xor    edx,edx
c00272a9:	89 d0                	mov    eax,edx
c00272ab:	c1 e8 08             	shr    eax,0x8
c00272ae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272b1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272b7:	09 fe                	or     esi,edi
c00272b9:	c1 e6 17             	shl    esi,0x17
c00272bc:	09 c6                	or     esi,eax
c00272be:	f6 c2 7f             	test   dl,0x7f
c00272c1:	0f 95 c1             	setne  cl
c00272c4:	09 c8                	or     eax,ecx
c00272c6:	83 e0 01             	and    eax,0x1
c00272c9:	c1 ea 07             	shr    edx,0x7
c00272cc:	21 c2                	and    edx,eax
c00272ce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272d1:	eb 0a                	jmp    c00272dd <__divsf3+0x221>
c00272d3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272d8:	eb 03                	jmp    c00272dd <__divsf3+0x221>
c00272da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272dd:	89 d8                	mov    eax,ebx
c00272df:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272e2:	5b                   	pop    ebx
c00272e3:	5e                   	pop    esi
c00272e4:	5f                   	pop    edi
c00272e5:	5d                   	pop    ebp
c00272e6:	c3                   	ret    

c00272e7 <__floatsisf>:
c00272e7:	55                   	push   ebp
c00272e8:	89 e5                	mov    ebp,esp
c00272ea:	53                   	push   ebx
c00272eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ee:	85 d2                	test   edx,edx
c00272f0:	7e 2b                	jle    c002731d <__floatsisf+0x36>
c00272f2:	0f bd ca             	bsr    ecx,edx
c00272f5:	83 f1 1f             	xor    ecx,0x1f
c00272f8:	d3 e2                	shl    edx,cl
c00272fa:	89 d0                	mov    eax,edx
c00272fc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027301:	89 c3                	mov    ebx,eax
c0027303:	c1 eb 08             	shr    ebx,0x8
c0027306:	80 e2 7f             	and    dl,0x7f
c0027309:	0f 95 c2             	setne  dl
c002730c:	09 da                	or     edx,ebx
c002730e:	83 e2 01             	and    edx,0x1
c0027311:	c1 e8 07             	shr    eax,0x7
c0027314:	21 c2                	and    edx,eax
c0027316:	b8 9e 00 00 00       	mov    eax,0x9e
c002731b:	eb 32                	jmp    c002734f <__floatsisf+0x68>
c002731d:	b8 00 00 00 00       	mov    eax,0x0
c0027322:	74 34                	je     c0027358 <__floatsisf+0x71>
c0027324:	f7 da                	neg    edx
c0027326:	0f bd ca             	bsr    ecx,edx
c0027329:	83 f1 1f             	xor    ecx,0x1f
c002732c:	d3 e2                	shl    edx,cl
c002732e:	89 d0                	mov    eax,edx
c0027330:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027335:	89 c3                	mov    ebx,eax
c0027337:	c1 eb 08             	shr    ebx,0x8
c002733a:	80 e2 7f             	and    dl,0x7f
c002733d:	0f 95 c2             	setne  dl
c0027340:	09 da                	or     edx,ebx
c0027342:	83 e2 01             	and    edx,0x1
c0027345:	c1 e8 07             	shr    eax,0x7
c0027348:	21 c2                	and    edx,eax
c002734a:	b8 9e 01 00 00       	mov    eax,0x19e
c002734f:	29 c8                	sub    eax,ecx
c0027351:	c1 e0 17             	shl    eax,0x17
c0027354:	09 d8                	or     eax,ebx
c0027356:	01 d0                	add    eax,edx
c0027358:	5b                   	pop    ebx
c0027359:	5d                   	pop    ebp
c002735a:	c3                   	ret    

c002735b <__floatunsisf>:
c002735b:	55                   	push   ebp
c002735c:	89 e5                	mov    ebp,esp
c002735e:	53                   	push   ebx
c002735f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027362:	31 c0                	xor    eax,eax
c0027364:	85 d2                	test   edx,edx
c0027366:	74 32                	je     c002739a <__floatunsisf+0x3f>
c0027368:	0f bd ca             	bsr    ecx,edx
c002736b:	83 f1 1f             	xor    ecx,0x1f
c002736e:	d3 e2                	shl    edx,cl
c0027370:	89 d0                	mov    eax,edx
c0027372:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027377:	89 c3                	mov    ebx,eax
c0027379:	c1 eb 08             	shr    ebx,0x8
c002737c:	80 e2 7f             	and    dl,0x7f
c002737f:	0f 95 c2             	setne  dl
c0027382:	09 da                	or     edx,ebx
c0027384:	83 e2 01             	and    edx,0x1
c0027387:	c1 e8 07             	shr    eax,0x7
c002738a:	21 c2                	and    edx,eax
c002738c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027391:	29 c8                	sub    eax,ecx
c0027393:	c1 e0 17             	shl    eax,0x17
c0027396:	09 d8                	or     eax,ebx
c0027398:	01 d0                	add    eax,edx
c002739a:	5b                   	pop    ebx
c002739b:	5d                   	pop    ebp
c002739c:	c3                   	ret    

c002739d <__fixsfsi>:
c002739d:	55                   	push   ebp
c002739e:	89 e5                	mov    ebp,esp
c00273a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a3:	89 d1                	mov    ecx,edx
c00273a5:	c1 e1 08             	shl    ecx,0x8
c00273a8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ae:	c1 fa 17             	sar    edx,0x17
c00273b1:	78 1c                	js     c00273cf <__fixsfsi+0x32>
c00273b3:	83 ea 7f             	sub    edx,0x7f
c00273b6:	31 c0                	xor    eax,eax
c00273b8:	83 fa 1e             	cmp    edx,0x1e
c00273bb:	77 40                	ja     c00273fd <__fixsfsi+0x60>
c00273bd:	89 c8                	mov    eax,ecx
c00273bf:	0d 00 00 00 80       	or     eax,0x80000000
c00273c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273c9:	29 d1                	sub    ecx,edx
c00273cb:	d3 e8                	shr    eax,cl
c00273cd:	eb 2e                	jmp    c00273fd <__fixsfsi+0x60>
c00273cf:	31 c0                	xor    eax,eax
c00273d1:	81 c2 81 00 00 00    	add    edx,0x81
c00273d7:	78 24                	js     c00273fd <__fixsfsi+0x60>
c00273d9:	83 fa 1e             	cmp    edx,0x1e
c00273dc:	7e 09                	jle    c00273e7 <__fixsfsi+0x4a>
c00273de:	83 fa 1f             	cmp    edx,0x1f
c00273e1:	75 18                	jne    c00273fb <__fixsfsi+0x5e>
c00273e3:	85 c9                	test   ecx,ecx
c00273e5:	75 14                	jne    c00273fb <__fixsfsi+0x5e>
c00273e7:	89 c8                	mov    eax,ecx
c00273e9:	0d 00 00 00 80       	or     eax,0x80000000
c00273ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273f3:	29 d1                	sub    ecx,edx
c00273f5:	d3 e8                	shr    eax,cl
c00273f7:	f7 d8                	neg    eax
c00273f9:	eb 02                	jmp    c00273fd <__fixsfsi+0x60>
c00273fb:	31 c0                	xor    eax,eax
c00273fd:	5d                   	pop    ebp
c00273fe:	c3                   	ret    

c00273ff <__fixunssfsi>:
c00273ff:	55                   	push   ebp
c0027400:	89 e5                	mov    ebp,esp
c0027402:	53                   	push   ebx
c0027403:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027406:	89 d3                	mov    ebx,edx
c0027408:	c1 fb 17             	sar    ebx,0x17
c002740b:	83 eb 7f             	sub    ebx,0x7f
c002740e:	31 c0                	xor    eax,eax
c0027410:	83 fb 1f             	cmp    ebx,0x1f
c0027413:	77 18                	ja     c002742d <__fixunssfsi+0x2e>
c0027415:	89 d0                	mov    eax,edx
c0027417:	c1 e0 08             	shl    eax,0x8
c002741a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002741f:	0d 00 00 00 80       	or     eax,0x80000000
c0027424:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027429:	29 d9                	sub    ecx,ebx
c002742b:	d3 e8                	shr    eax,cl
c002742d:	5b                   	pop    ebx
c002742e:	5d                   	pop    ebp
c002742f:	c3                   	ret    

c0027430 <__cmpsf2>:
c0027430:	55                   	push   ebp
c0027431:	89 e5                	mov    ebp,esp
c0027433:	57                   	push   edi
c0027434:	56                   	push   esi
c0027435:	53                   	push   ebx
c0027436:	83 ec 24             	sub    esp,0x24
c0027439:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002743c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002743f:	e8 4f 10 00 00       	call   c0028493 <__truncdfsf2>
c0027444:	5a                   	pop    edx
c0027445:	59                   	pop    ecx
c0027446:	89 c3                	mov    ebx,eax
c0027448:	c1 e8 17             	shr    eax,0x17
c002744b:	0f b6 f0             	movzx  esi,al
c002744e:	89 d8                	mov    eax,ebx
c0027450:	c1 e8 1f             	shr    eax,0x1f
c0027453:	31 c6                	xor    esi,eax
c0027455:	c1 e3 08             	shl    ebx,0x8
c0027458:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002745b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002745e:	e8 30 10 00 00       	call   c0028493 <__truncdfsf2>
c0027463:	83 c4 10             	add    esp,0x10
c0027466:	89 c1                	mov    ecx,eax
c0027468:	c1 e9 17             	shr    ecx,0x17
c002746b:	0f b6 c9             	movzx  ecx,cl
c002746e:	89 c7                	mov    edi,eax
c0027470:	c1 ef 1f             	shr    edi,0x1f
c0027473:	89 ca                	mov    edx,ecx
c0027475:	31 fa                	xor    edx,edi
c0027477:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002747a:	c1 e0 08             	shl    eax,0x8
c002747d:	89 c2                	mov    edx,eax
c002747f:	89 d8                	mov    eax,ebx
c0027481:	09 d0                	or     eax,edx
c0027483:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027488:	09 f0                	or     eax,esi
c002748a:	75 08                	jne    c0027494 <__cmpsf2+0x64>
c002748c:	31 c0                	xor    eax,eax
c002748e:	39 f9                	cmp    ecx,edi
c0027490:	75 0c                	jne    c002749e <__cmpsf2+0x6e>
c0027492:	eb 29                	jmp    c00274bd <__cmpsf2+0x8d>
c0027494:	b8 01 00 00 00       	mov    eax,0x1
c0027499:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002749c:	7f 1f                	jg     c00274bd <__cmpsf2+0x8d>
c002749e:	83 c8 ff             	or     eax,0xffffffff
c00274a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274a4:	7c 17                	jl     c00274bd <__cmpsf2+0x8d>
c00274a6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274ac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274b2:	b8 01 00 00 00       	mov    eax,0x1
c00274b7:	39 d3                	cmp    ebx,edx
c00274b9:	77 02                	ja     c00274bd <__cmpsf2+0x8d>
c00274bb:	19 c0                	sbb    eax,eax
c00274bd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274c0:	5b                   	pop    ebx
c00274c1:	5e                   	pop    esi
c00274c2:	5f                   	pop    edi
c00274c3:	5d                   	pop    ebp
c00274c4:	c3                   	ret    

c00274c5 <__eqsf2>:
c00274c5:	55                   	push   ebp
c00274c6:	89 e5                	mov    ebp,esp
c00274c8:	83 ec 24             	sub    esp,0x24
c00274cb:	6a 01                	push   0x1
c00274cd:	83 ec 0c             	sub    esp,0xc
c00274d0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274d3:	e8 df 10 00 00       	call   c00285b7 <__extendsfdf2>
c00274d8:	83 c4 10             	add    esp,0x10
c00274db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e1:	52                   	push   edx
c00274e2:	50                   	push   eax
c00274e3:	50                   	push   eax
c00274e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274e7:	e8 cb 10 00 00       	call   c00285b7 <__extendsfdf2>
c00274ec:	59                   	pop    ecx
c00274ed:	59                   	pop    ecx
c00274ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274f1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274f4:	52                   	push   edx
c00274f5:	50                   	push   eax
c00274f6:	e8 35 ff ff ff       	call   c0027430 <__cmpsf2>
c00274fb:	83 c4 20             	add    esp,0x20
c00274fe:	c9                   	leave  
c00274ff:	c3                   	ret    

c0027500 <__nesf2>:
c0027500:	eb c3                	jmp    c00274c5 <__eqsf2>

c0027502 <__gtsf2>:
c0027502:	55                   	push   ebp
c0027503:	89 e5                	mov    ebp,esp
c0027505:	83 ec 24             	sub    esp,0x24
c0027508:	6a ff                	push   0xffffffff
c002750a:	83 ec 0c             	sub    esp,0xc
c002750d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027510:	e8 a2 10 00 00       	call   c00285b7 <__extendsfdf2>
c0027515:	83 c4 10             	add    esp,0x10
c0027518:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002751e:	52                   	push   edx
c002751f:	50                   	push   eax
c0027520:	50                   	push   eax
c0027521:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027524:	e8 8e 10 00 00       	call   c00285b7 <__extendsfdf2>
c0027529:	59                   	pop    ecx
c002752a:	59                   	pop    ecx
c002752b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002752e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027531:	52                   	push   edx
c0027532:	50                   	push   eax
c0027533:	e8 f8 fe ff ff       	call   c0027430 <__cmpsf2>
c0027538:	83 c4 20             	add    esp,0x20
c002753b:	c9                   	leave  
c002753c:	c3                   	ret    

c002753d <__gesf2>:
c002753d:	eb c3                	jmp    c0027502 <__gtsf2>

c002753f <__ltsf2>:
c002753f:	eb 84                	jmp    c00274c5 <__eqsf2>

c0027541 <__lesf2>:
c0027541:	eb 82                	jmp    c00274c5 <__eqsf2>

c0027543 <__adddf3>:
c0027543:	55                   	push   ebp
c0027544:	89 e5                	mov    ebp,esp
c0027546:	57                   	push   edi
c0027547:	56                   	push   esi
c0027548:	53                   	push   ebx
c0027549:	83 ec 24             	sub    esp,0x24
c002754c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002754f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027552:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027555:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027558:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002755b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002755e:	89 c8                	mov    eax,ecx
c0027560:	89 ce                	mov    esi,ecx
c0027562:	c1 fe 14             	sar    esi,0x14
c0027565:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027568:	89 fb                	mov    ebx,edi
c002756a:	89 fa                	mov    edx,edi
c002756c:	c1 e2 0b             	shl    edx,0xb
c002756f:	c1 e0 0b             	shl    eax,0xb
c0027572:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027577:	c1 eb 15             	shr    ebx,0x15
c002757a:	09 d8                	or     eax,ebx
c002757c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002757f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027582:	c1 fe 14             	sar    esi,0x14
c0027585:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027588:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002758b:	89 f3                	mov    ebx,esi
c002758d:	c1 e3 0b             	shl    ebx,0xb
c0027590:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027593:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027596:	c1 e3 0b             	shl    ebx,0xb
c0027599:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002759f:	c1 ee 15             	shr    esi,0x15
c00275a2:	09 f3                	or     ebx,esi
c00275a4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275a7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275aa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275ad:	0f 88 5f 02 00 00    	js     c0027812 <__adddf3+0x2cf>
c00275b3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275b6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275b9:	85 db                	test   ebx,ebx
c00275bb:	0f 8e c7 00 00 00    	jle    c0027688 <__adddf3+0x145>
c00275c1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275c8:	75 1a                	jne    c00275e4 <__adddf3+0xa1>
c00275ca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275cd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275d0:	0f 84 b2 05 00 00    	je     c0027b88 <__adddf3+0x645>
c00275d6:	4b                   	dec    ebx
c00275d7:	75 23                	jne    c00275fc <__adddf3+0xb9>
c00275d9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275dc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275df:	e9 99 00 00 00       	jmp    c002767d <__adddf3+0x13a>
c00275e4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275e7:	f7 d6                	not    esi
c00275e9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275ef:	0f 84 93 05 00 00    	je     c0027b88 <__adddf3+0x645>
c00275f5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275fc:	83 fb 1f             	cmp    ebx,0x1f
c00275ff:	7e 42                	jle    c0027643 <__adddf3+0x100>
c0027601:	83 fb 3f             	cmp    ebx,0x3f
c0027604:	0f 8f 7e 05 00 00    	jg     c0027b88 <__adddf3+0x645>
c002760a:	83 e3 1f             	and    ebx,0x1f
c002760d:	89 d9                	mov    ecx,ebx
c002760f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027612:	d3 ef                	shr    edi,cl
c0027614:	31 db                	xor    ebx,ebx
c0027616:	85 c9                	test   ecx,ecx
c0027618:	74 15                	je     c002762f <__adddf3+0xec>
c002761a:	be 20 00 00 00       	mov    esi,0x20
c002761f:	29 ce                	sub    esi,ecx
c0027621:	89 f1                	mov    ecx,esi
c0027623:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027626:	d3 e6                	shl    esi,cl
c0027628:	31 db                	xor    ebx,ebx
c002762a:	85 f6                	test   esi,esi
c002762c:	0f 95 c3             	setne  bl
c002762f:	31 c9                	xor    ecx,ecx
c0027631:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027635:	0f 95 c1             	setne  cl
c0027638:	09 cf                	or     edi,ecx
c002763a:	09 fb                	or     ebx,edi
c002763c:	01 da                	add    edx,ebx
c002763e:	83 d0 00             	adc    eax,0x0
c0027641:	eb 3a                	jmp    c002767d <__adddf3+0x13a>
c0027643:	bf 20 00 00 00       	mov    edi,0x20
c0027648:	29 df                	sub    edi,ebx
c002764a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002764d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027650:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027653:	d3 e6                	shl    esi,cl
c0027655:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027658:	88 d9                	mov    cl,bl
c002765a:	d3 ef                	shr    edi,cl
c002765c:	09 fe                	or     esi,edi
c002765e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027661:	88 d9                	mov    cl,bl
c0027663:	d3 ef                	shr    edi,cl
c0027665:	89 fb                	mov    ebx,edi
c0027667:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002766a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002766d:	d3 e7                	shl    edi,cl
c002766f:	85 ff                	test   edi,edi
c0027671:	0f 95 c1             	setne  cl
c0027674:	0f b6 c9             	movzx  ecx,cl
c0027677:	09 ce                	or     esi,ecx
c0027679:	01 f2                	add    edx,esi
c002767b:	11 d8                	adc    eax,ebx
c002767d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027680:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027683:	e9 52 01 00 00       	jmp    c00277da <__adddf3+0x297>
c0027688:	0f 84 d5 00 00 00    	je     c0027763 <__adddf3+0x220>
c002768e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027691:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027694:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027697:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002769a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276a1:	75 20                	jne    c00276c3 <__adddf3+0x180>
c00276a3:	89 d6                	mov    esi,edx
c00276a5:	09 c6                	or     esi,eax
c00276a7:	0f 84 db 04 00 00    	je     c0027b88 <__adddf3+0x645>
c00276ad:	4b                   	dec    ebx
c00276ae:	75 29                	jne    c00276d9 <__adddf3+0x196>
c00276b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276b6:	01 d1                	add    ecx,edx
c00276b8:	11 c6                	adc    esi,eax
c00276ba:	89 f0                	mov    eax,esi
c00276bc:	89 ca                	mov    edx,ecx
c00276be:	e9 17 01 00 00       	jmp    c00277da <__adddf3+0x297>
c00276c3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276c6:	f7 d6                	not    esi
c00276c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ce:	0f 84 b4 04 00 00    	je     c0027b88 <__adddf3+0x645>
c00276d4:	0d 00 00 00 80       	or     eax,0x80000000
c00276d9:	83 fb 1f             	cmp    ebx,0x1f
c00276dc:	7e 48                	jle    c0027726 <__adddf3+0x1e3>
c00276de:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e4:	83 fb 3f             	cmp    ebx,0x3f
c00276e7:	0f 8f 9b 04 00 00    	jg     c0027b88 <__adddf3+0x645>
c00276ed:	83 e3 1f             	and    ebx,0x1f
c00276f0:	89 d9                	mov    ecx,ebx
c00276f2:	89 c7                	mov    edi,eax
c00276f4:	d3 ef                	shr    edi,cl
c00276f6:	31 db                	xor    ebx,ebx
c00276f8:	85 c9                	test   ecx,ecx
c00276fa:	74 12                	je     c002770e <__adddf3+0x1cb>
c00276fc:	be 20 00 00 00       	mov    esi,0x20
c0027701:	29 ce                	sub    esi,ecx
c0027703:	89 f1                	mov    ecx,esi
c0027705:	d3 e0                	shl    eax,cl
c0027707:	31 db                	xor    ebx,ebx
c0027709:	85 c0                	test   eax,eax
c002770b:	0f 95 c3             	setne  bl
c002770e:	31 c0                	xor    eax,eax
c0027710:	85 d2                	test   edx,edx
c0027712:	0f 95 c0             	setne  al
c0027715:	09 c7                	or     edi,eax
c0027717:	09 fb                	or     ebx,edi
c0027719:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002771c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002771f:	01 da                	add    edx,ebx
c0027721:	83 d6 00             	adc    esi,0x0
c0027724:	eb 39                	jmp    c002775f <__adddf3+0x21c>
c0027726:	be 20 00 00 00       	mov    esi,0x20
c002772b:	29 de                	sub    esi,ebx
c002772d:	89 c7                	mov    edi,eax
c002772f:	89 f1                	mov    ecx,esi
c0027731:	d3 e7                	shl    edi,cl
c0027733:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027736:	89 d7                	mov    edi,edx
c0027738:	88 d9                	mov    cl,bl
c002773a:	d3 ef                	shr    edi,cl
c002773c:	89 f9                	mov    ecx,edi
c002773e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027741:	09 cf                	or     edi,ecx
c0027743:	88 d9                	mov    cl,bl
c0027745:	d3 e8                	shr    eax,cl
c0027747:	89 f1                	mov    ecx,esi
c0027749:	d3 e2                	shl    edx,cl
c002774b:	85 d2                	test   edx,edx
c002774d:	0f 95 c2             	setne  dl
c0027750:	0f b6 d2             	movzx  edx,dl
c0027753:	09 d7                	or     edi,edx
c0027755:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027758:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002775b:	01 fa                	add    edx,edi
c002775d:	11 c6                	adc    esi,eax
c002775f:	89 f0                	mov    eax,esi
c0027761:	eb 77                	jmp    c00277da <__adddf3+0x297>
c0027763:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027766:	46                   	inc    esi
c0027767:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002776a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027770:	75 41                	jne    c00277b3 <__adddf3+0x270>
c0027772:	89 d3                	mov    ebx,edx
c0027774:	09 c3                	or     ebx,eax
c0027776:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002777d:	75 27                	jne    c00277a6 <__adddf3+0x263>
c002777f:	85 db                	test   ebx,ebx
c0027781:	0f 84 fb 03 00 00    	je     c0027b82 <__adddf3+0x63f>
c0027787:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002778a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002778d:	0f 84 f5 03 00 00    	je     c0027b88 <__adddf3+0x645>
c0027793:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027796:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027799:	85 c0                	test   eax,eax
c002779b:	0f 89 91 03 00 00    	jns    c0027b32 <__adddf3+0x5ef>
c00277a1:	e9 85 03 00 00       	jmp    c0027b2b <__adddf3+0x5e8>
c00277a6:	85 db                	test   ebx,ebx
c00277a8:	0f 85 da 03 00 00    	jne    c0027b88 <__adddf3+0x645>
c00277ae:	e9 cf 03 00 00       	jmp    c0027b82 <__adddf3+0x63f>
c00277b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277bc:	f7 d1                	not    ecx
c00277be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277c4:	0f 84 70 03 00 00    	je     c0027b3a <__adddf3+0x5f7>
c00277ca:	d1 ea                	shr    edx,1
c00277cc:	89 c1                	mov    ecx,eax
c00277ce:	c1 e1 1f             	shl    ecx,0x1f
c00277d1:	09 ca                	or     edx,ecx
c00277d3:	d1 e8                	shr    eax,1
c00277d5:	e9 6f 03 00 00       	jmp    c0027b49 <__adddf3+0x606>
c00277da:	85 c0                	test   eax,eax
c00277dc:	0f 89 67 03 00 00    	jns    c0027b49 <__adddf3+0x606>
c00277e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277e8:	f7 d1                	not    ecx
c00277ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277f0:	0f 84 44 03 00 00    	je     c0027b3a <__adddf3+0x5f7>
c00277f6:	89 d1                	mov    ecx,edx
c00277f8:	d1 e9                	shr    ecx,1
c00277fa:	83 e2 01             	and    edx,0x1
c00277fd:	09 ca                	or     edx,ecx
c00277ff:	89 c1                	mov    ecx,eax
c0027801:	c1 e1 1f             	shl    ecx,0x1f
c0027804:	09 ca                	or     edx,ecx
c0027806:	d1 e8                	shr    eax,1
c0027808:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002780d:	e9 37 03 00 00       	jmp    c0027b49 <__adddf3+0x606>
c0027812:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027815:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002781b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002781e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027821:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027827:	29 de                	sub    esi,ebx
c0027829:	85 f6                	test   esi,esi
c002782b:	0f 8e bd 00 00 00    	jle    c00278ee <__adddf3+0x3ab>
c0027831:	85 db                	test   ebx,ebx
c0027833:	75 17                	jne    c002784c <__adddf3+0x309>
c0027835:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027838:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002783b:	0f 84 47 03 00 00    	je     c0027b88 <__adddf3+0x645>
c0027841:	4e                   	dec    esi
c0027842:	75 20                	jne    c0027864 <__adddf3+0x321>
c0027844:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027847:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002784a:	eb 5b                	jmp    c00278a7 <__adddf3+0x364>
c002784c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002784f:	f7 d3                	not    ebx
c0027851:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027857:	0f 84 2b 03 00 00    	je     c0027b88 <__adddf3+0x645>
c002785d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027864:	83 fe 1f             	cmp    esi,0x1f
c0027867:	7e 49                	jle    c00278b2 <__adddf3+0x36f>
c0027869:	83 fe 3f             	cmp    esi,0x3f
c002786c:	0f 8f 16 03 00 00    	jg     c0027b88 <__adddf3+0x645>
c0027872:	83 e6 1f             	and    esi,0x1f
c0027875:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027878:	89 f1                	mov    ecx,esi
c002787a:	d3 ef                	shr    edi,cl
c002787c:	31 db                	xor    ebx,ebx
c002787e:	85 f6                	test   esi,esi
c0027880:	74 13                	je     c0027895 <__adddf3+0x352>
c0027882:	b9 20 00 00 00       	mov    ecx,0x20
c0027887:	29 f1                	sub    ecx,esi
c0027889:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002788c:	d3 e6                	shl    esi,cl
c002788e:	31 db                	xor    ebx,ebx
c0027890:	85 f6                	test   esi,esi
c0027892:	0f 95 c3             	setne  bl
c0027895:	31 c9                	xor    ecx,ecx
c0027897:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002789b:	0f 95 c1             	setne  cl
c002789e:	09 cf                	or     edi,ecx
c00278a0:	09 fb                	or     ebx,edi
c00278a2:	29 da                	sub    edx,ebx
c00278a4:	83 d8 00             	sbb    eax,0x0
c00278a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ad:	e9 aa 01 00 00       	jmp    c0027a5c <__adddf3+0x519>
c00278b2:	bf 20 00 00 00       	mov    edi,0x20
c00278b7:	29 f7                	sub    edi,esi
c00278b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278c2:	d3 e3                	shl    ebx,cl
c00278c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c7:	89 f1                	mov    ecx,esi
c00278c9:	d3 ef                	shr    edi,cl
c00278cb:	09 fb                	or     ebx,edi
c00278cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278d0:	89 f1                	mov    ecx,esi
c00278d2:	d3 ef                	shr    edi,cl
c00278d4:	89 fe                	mov    esi,edi
c00278d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278dc:	d3 e7                	shl    edi,cl
c00278de:	85 ff                	test   edi,edi
c00278e0:	0f 95 c1             	setne  cl
c00278e3:	0f b6 c9             	movzx  ecx,cl
c00278e6:	09 cb                	or     ebx,ecx
c00278e8:	29 da                	sub    edx,ebx
c00278ea:	19 f0                	sbb    eax,esi
c00278ec:	eb b9                	jmp    c00278a7 <__adddf3+0x364>
c00278ee:	0f 84 cd 00 00 00    	je     c00279c1 <__adddf3+0x47e>
c00278f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027901:	75 1b                	jne    c002791e <__adddf3+0x3db>
c0027903:	89 d6                	mov    esi,edx
c0027905:	09 c6                	or     esi,eax
c0027907:	0f 84 7b 02 00 00    	je     c0027b88 <__adddf3+0x645>
c002790d:	4b                   	dec    ebx
c002790e:	75 24                	jne    c0027934 <__adddf3+0x3f1>
c0027910:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027913:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027916:	29 d1                	sub    ecx,edx
c0027918:	19 c6                	sbb    esi,eax
c002791a:	89 ca                	mov    edx,ecx
c002791c:	eb 61                	jmp    c002797f <__adddf3+0x43c>
c002791e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027921:	f7 d6                	not    esi
c0027923:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027929:	0f 84 59 02 00 00    	je     c0027b88 <__adddf3+0x645>
c002792f:	0d 00 00 00 80       	or     eax,0x80000000
c0027934:	83 fb 1f             	cmp    ebx,0x1f
c0027937:	7e 4d                	jle    c0027986 <__adddf3+0x443>
c0027939:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002793c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002793f:	83 fb 3f             	cmp    ebx,0x3f
c0027942:	0f 8f 40 02 00 00    	jg     c0027b88 <__adddf3+0x645>
c0027948:	83 e3 1f             	and    ebx,0x1f
c002794b:	89 d9                	mov    ecx,ebx
c002794d:	89 c7                	mov    edi,eax
c002794f:	d3 ef                	shr    edi,cl
c0027951:	31 db                	xor    ebx,ebx
c0027953:	85 c9                	test   ecx,ecx
c0027955:	74 12                	je     c0027969 <__adddf3+0x426>
c0027957:	be 20 00 00 00       	mov    esi,0x20
c002795c:	29 ce                	sub    esi,ecx
c002795e:	89 f1                	mov    ecx,esi
c0027960:	d3 e0                	shl    eax,cl
c0027962:	31 db                	xor    ebx,ebx
c0027964:	85 c0                	test   eax,eax
c0027966:	0f 95 c3             	setne  bl
c0027969:	31 c0                	xor    eax,eax
c002796b:	85 d2                	test   edx,edx
c002796d:	0f 95 c0             	setne  al
c0027970:	09 c7                	or     edi,eax
c0027972:	09 fb                	or     ebx,edi
c0027974:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027977:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002797a:	29 da                	sub    edx,ebx
c002797c:	83 de 00             	sbb    esi,0x0
c002797f:	89 f0                	mov    eax,esi
c0027981:	e9 d6 00 00 00       	jmp    c0027a5c <__adddf3+0x519>
c0027986:	be 20 00 00 00       	mov    esi,0x20
c002798b:	29 de                	sub    esi,ebx
c002798d:	89 c7                	mov    edi,eax
c002798f:	89 f1                	mov    ecx,esi
c0027991:	d3 e7                	shl    edi,cl
c0027993:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027996:	89 d7                	mov    edi,edx
c0027998:	88 d9                	mov    cl,bl
c002799a:	d3 ef                	shr    edi,cl
c002799c:	89 f9                	mov    ecx,edi
c002799e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279a1:	09 cf                	or     edi,ecx
c00279a3:	88 d9                	mov    cl,bl
c00279a5:	d3 e8                	shr    eax,cl
c00279a7:	89 f1                	mov    ecx,esi
c00279a9:	d3 e2                	shl    edx,cl
c00279ab:	85 d2                	test   edx,edx
c00279ad:	0f 95 c2             	setne  dl
c00279b0:	0f b6 d2             	movzx  edx,dl
c00279b3:	09 d7                	or     edi,edx
c00279b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279bb:	29 fa                	sub    edx,edi
c00279bd:	19 c6                	sbb    esi,eax
c00279bf:	eb be                	jmp    c002797f <__adddf3+0x43c>
c00279c1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279c7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279cd:	75 6a                	jne    c0027a39 <__adddf3+0x4f6>
c00279cf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279d3:	75 58                	jne    c0027a2d <__adddf3+0x4ea>
c00279d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279db:	89 d6                	mov    esi,edx
c00279dd:	09 c6                	or     esi,eax
c00279df:	75 17                	jne    c00279f8 <__adddf3+0x4b5>
c00279e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279e7:	85 db                	test   ebx,ebx
c00279e9:	0f 85 99 01 00 00    	jne    c0027b88 <__adddf3+0x645>
c00279ef:	31 ff                	xor    edi,edi
c00279f1:	31 c9                	xor    ecx,ecx
c00279f3:	e9 90 01 00 00       	jmp    c0027b88 <__adddf3+0x645>
c00279f8:	85 db                	test   ebx,ebx
c00279fa:	0f 84 88 01 00 00    	je     c0027b88 <__adddf3+0x645>
c0027a00:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a03:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a06:	85 c0                	test   eax,eax
c0027a08:	79 10                	jns    c0027a1a <__adddf3+0x4d7>
c0027a0a:	31 c9                	xor    ecx,ecx
c0027a0c:	f7 da                	neg    edx
c0027a0e:	0f 95 c1             	setne  cl
c0027a11:	01 c8                	add    eax,ecx
c0027a13:	f7 d8                	neg    eax
c0027a15:	e9 2f 01 00 00       	jmp    c0027b49 <__adddf3+0x606>
c0027a1a:	31 ff                	xor    edi,edi
c0027a1c:	31 c9                	xor    ecx,ecx
c0027a1e:	89 c3                	mov    ebx,eax
c0027a20:	09 d3                	or     ebx,edx
c0027a22:	0f 84 60 01 00 00    	je     c0027b88 <__adddf3+0x645>
c0027a28:	e9 05 01 00 00       	jmp    c0027b32 <__adddf3+0x5ef>
c0027a2d:	31 ff                	xor    edi,edi
c0027a2f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a34:	e9 4f 01 00 00       	jmp    c0027b88 <__adddf3+0x645>
c0027a39:	89 c1                	mov    ecx,eax
c0027a3b:	89 d0                	mov    eax,edx
c0027a3d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a40:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a43:	89 ca                	mov    edx,ecx
c0027a45:	85 c9                	test   ecx,ecx
c0027a47:	79 2c                	jns    c0027a75 <__adddf3+0x532>
c0027a49:	31 c9                	xor    ecx,ecx
c0027a4b:	f7 d8                	neg    eax
c0027a4d:	0f 95 c1             	setne  cl
c0027a50:	01 ca                	add    edx,ecx
c0027a52:	f7 da                	neg    edx
c0027a54:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a57:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a5a:	eb 19                	jmp    c0027a75 <__adddf3+0x532>
c0027a5c:	85 c0                	test   eax,eax
c0027a5e:	0f 89 e5 00 00 00    	jns    c0027b49 <__adddf3+0x606>
c0027a64:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a69:	89 c1                	mov    ecx,eax
c0027a6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a6e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a71:	89 d0                	mov    eax,edx
c0027a73:	89 ca                	mov    edx,ecx
c0027a75:	85 d2                	test   edx,edx
c0027a77:	74 59                	je     c0027ad2 <__adddf3+0x58f>
c0027a79:	0f bd da             	bsr    ebx,edx
c0027a7c:	83 f3 1f             	xor    ebx,0x1f
c0027a7f:	88 d9                	mov    cl,bl
c0027a81:	d3 e2                	shl    edx,cl
c0027a83:	bf 20 00 00 00       	mov    edi,0x20
c0027a88:	89 f9                	mov    ecx,edi
c0027a8a:	29 d9                	sub    ecx,ebx
c0027a8c:	89 c6                	mov    esi,eax
c0027a8e:	d3 ee                	shr    esi,cl
c0027a90:	09 d6                	or     esi,edx
c0027a92:	88 d9                	mov    cl,bl
c0027a94:	d3 e0                	shl    eax,cl
c0027a96:	89 c2                	mov    edx,eax
c0027a98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a9b:	25 ff 07 00 00       	and    eax,0x7ff
c0027aa0:	39 d8                	cmp    eax,ebx
c0027aa2:	7f 22                	jg     c0027ac6 <__adddf3+0x583>
c0027aa4:	29 c3                	sub    ebx,eax
c0027aa6:	43                   	inc    ebx
c0027aa7:	88 d9                	mov    cl,bl
c0027aa9:	d3 ea                	shr    edx,cl
c0027aab:	29 df                	sub    edi,ebx
c0027aad:	89 f9                	mov    ecx,edi
c0027aaf:	89 f0                	mov    eax,esi
c0027ab1:	d3 e0                	shl    eax,cl
c0027ab3:	09 c2                	or     edx,eax
c0027ab5:	89 f0                	mov    eax,esi
c0027ab7:	88 d9                	mov    cl,bl
c0027ab9:	d3 e8                	shr    eax,cl
c0027abb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027abe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ac4:	eb 6f                	jmp    c0027b35 <__adddf3+0x5f2>
c0027ac6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac9:	29 d8                	sub    eax,ebx
c0027acb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ace:	89 f0                	mov    eax,esi
c0027ad0:	eb 59                	jmp    c0027b2b <__adddf3+0x5e8>
c0027ad2:	85 c0                	test   eax,eax
c0027ad4:	74 6a                	je     c0027b40 <__adddf3+0x5fd>
c0027ad6:	0f bd c8             	bsr    ecx,eax
c0027ad9:	83 f1 1f             	xor    ecx,0x1f
c0027adc:	d3 e0                	shl    eax,cl
c0027ade:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ae1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ae7:	83 c1 20             	add    ecx,0x20
c0027aea:	39 cb                	cmp    ebx,ecx
c0027aec:	7f 35                	jg     c0027b23 <__adddf3+0x5e0>
c0027aee:	29 d9                	sub    ecx,ebx
c0027af0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027af3:	83 fe 1f             	cmp    esi,0x1f
c0027af6:	7e 09                	jle    c0027b01 <__adddf3+0x5be>
c0027af8:	83 e9 1f             	sub    ecx,0x1f
c0027afb:	d3 e8                	shr    eax,cl
c0027afd:	89 c3                	mov    ebx,eax
c0027aff:	eb 11                	jmp    c0027b12 <__adddf3+0x5cf>
c0027b01:	b9 20 00 00 00       	mov    ecx,0x20
c0027b06:	29 f1                	sub    ecx,esi
c0027b08:	89 c3                	mov    ebx,eax
c0027b0a:	d3 e3                	shl    ebx,cl
c0027b0c:	89 f1                	mov    ecx,esi
c0027b0e:	d3 e8                	shr    eax,cl
c0027b10:	89 c2                	mov    edx,eax
c0027b12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b15:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b1d:	89 d0                	mov    eax,edx
c0027b1f:	89 da                	mov    edx,ebx
c0027b21:	eb 26                	jmp    c0027b49 <__adddf3+0x606>
c0027b23:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b26:	29 cf                	sub    edi,ecx
c0027b28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b2b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b30:	eb 17                	jmp    c0027b49 <__adddf3+0x606>
c0027b32:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b35:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b38:	eb 0f                	jmp    c0027b49 <__adddf3+0x606>
c0027b3a:	31 d2                	xor    edx,edx
c0027b3c:	31 c0                	xor    eax,eax
c0027b3e:	eb 09                	jmp    c0027b49 <__adddf3+0x606>
c0027b40:	89 c2                	mov    edx,eax
c0027b42:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b4c:	c1 e1 14             	shl    ecx,0x14
c0027b4f:	89 c3                	mov    ebx,eax
c0027b51:	c1 eb 0b             	shr    ebx,0xb
c0027b54:	09 d9                	or     ecx,ebx
c0027b56:	89 d3                	mov    ebx,edx
c0027b58:	c1 eb 0b             	shr    ebx,0xb
c0027b5b:	c1 e0 15             	shl    eax,0x15
c0027b5e:	09 d8                	or     eax,ebx
c0027b60:	89 c7                	mov    edi,eax
c0027b62:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b68:	0f 95 c0             	setne  al
c0027b6b:	89 c6                	mov    esi,eax
c0027b6d:	09 f3                	or     ebx,esi
c0027b6f:	83 e3 01             	and    ebx,0x1
c0027b72:	c1 ea 0a             	shr    edx,0xa
c0027b75:	21 da                	and    edx,ebx
c0027b77:	89 f8                	mov    eax,edi
c0027b79:	01 d0                	add    eax,edx
c0027b7b:	83 d1 00             	adc    ecx,0x0
c0027b7e:	89 c7                	mov    edi,eax
c0027b80:	eb 06                	jmp    c0027b88 <__adddf3+0x645>
c0027b82:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b85:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b88:	89 f8                	mov    eax,edi
c0027b8a:	89 ca                	mov    edx,ecx
c0027b8c:	83 c4 24             	add    esp,0x24
c0027b8f:	5b                   	pop    ebx
c0027b90:	5e                   	pop    esi
c0027b91:	5f                   	pop    edi
c0027b92:	5d                   	pop    ebp
c0027b93:	c3                   	ret    

c0027b94 <__subdf3>:
c0027b94:	55                   	push   ebp
c0027b95:	89 e5                	mov    ebp,esp
c0027b97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b9a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b9d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ba3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ba6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ba9:	5d                   	pop    ebp
c0027baa:	e9 94 f9 ff ff       	jmp    c0027543 <__adddf3>

c0027baf <__negdf2>:
c0027baf:	55                   	push   ebp
c0027bb0:	89 e5                	mov    ebp,esp
c0027bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bb5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bbe:	5d                   	pop    ebp
c0027bbf:	c3                   	ret    

c0027bc0 <__muldf3>:
c0027bc0:	55                   	push   ebp
c0027bc1:	89 e5                	mov    ebp,esp
c0027bc3:	57                   	push   edi
c0027bc4:	56                   	push   esi
c0027bc5:	53                   	push   ebx
c0027bc6:	83 ec 24             	sub    esp,0x24
c0027bc9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bcf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bd5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bd8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bde:	89 c8                	mov    eax,ecx
c0027be0:	c1 f8 14             	sar    eax,0x14
c0027be3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027be6:	89 f8                	mov    eax,edi
c0027be8:	89 fb                	mov    ebx,edi
c0027bea:	c1 e3 0b             	shl    ebx,0xb
c0027bed:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bf0:	c1 e1 0b             	shl    ecx,0xb
c0027bf3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bf9:	c1 e8 15             	shr    eax,0x15
c0027bfc:	09 c1                	or     ecx,eax
c0027bfe:	89 d6                	mov    esi,edx
c0027c00:	89 d0                	mov    eax,edx
c0027c02:	c1 f8 14             	sar    eax,0x14
c0027c05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c0b:	89 c3                	mov    ebx,eax
c0027c0d:	c1 e3 0b             	shl    ebx,0xb
c0027c10:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c13:	c1 e6 0b             	shl    esi,0xb
c0027c16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c1c:	c1 e8 15             	shr    eax,0x15
c0027c1f:	09 c6                	or     esi,eax
c0027c21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c24:	25 ff 07 00 00       	and    eax,0x7ff
c0027c29:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c2c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c2f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c34:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c37:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c3a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c3d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c47:	40                   	inc    eax
c0027c48:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c4d:	0f 85 8d 00 00 00    	jne    c0027ce0 <__muldf3+0x120>
c0027c53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c56:	09 c8                	or     eax,ecx
c0027c58:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c5c:	74 44                	je     c0027ca2 <__muldf3+0xe2>
c0027c5e:	85 c0                	test   eax,eax
c0027c60:	0f 85 31 02 00 00    	jne    c0027e97 <__muldf3+0x2d7>
c0027c66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c69:	40                   	inc    eax
c0027c6a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c6f:	75 13                	jne    c0027c84 <__muldf3+0xc4>
c0027c71:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c74:	09 f1                	or     ecx,esi
c0027c76:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c7a:	74 22                	je     c0027c9e <__muldf3+0xde>
c0027c7c:	85 c9                	test   ecx,ecx
c0027c7e:	0f 85 0d 02 00 00    	jne    c0027e91 <__muldf3+0x2d1>
c0027c84:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c88:	0f 89 09 02 00 00    	jns    c0027e97 <__muldf3+0x2d7>
c0027c8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c91:	05 00 00 00 80       	add    eax,0x80000000
c0027c96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c99:	e9 f9 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027c9e:	85 c9                	test   ecx,ecx
c0027ca0:	eb 2e                	jmp    c0027cd0 <__muldf3+0x110>
c0027ca2:	85 c0                	test   eax,eax
c0027ca4:	74 20                	je     c0027cc6 <__muldf3+0x106>
c0027ca6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ca9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027caf:	c1 ef 1f             	shr    edi,0x1f
c0027cb2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cb5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cb8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cbe:	09 f9                	or     ecx,edi
c0027cc0:	78 1e                	js     c0027ce0 <__muldf3+0x120>
c0027cc2:	89 c3                	mov    ebx,eax
c0027cc4:	eb e0                	jmp    c0027ca6 <__muldf3+0xe6>
c0027cc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cc9:	f7 d0                	not    eax
c0027ccb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cd0:	75 b2                	jne    c0027c84 <__muldf3+0xc4>
c0027cd2:	31 ff                	xor    edi,edi
c0027cd4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cdb:	e9 b7 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027ce0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce3:	40                   	inc    eax
c0027ce4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ce9:	75 57                	jne    c0027d42 <__muldf3+0x182>
c0027ceb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cee:	09 f0                	or     eax,esi
c0027cf0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cf4:	74 23                	je     c0027d19 <__muldf3+0x159>
c0027cf6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cfa:	0f 89 91 01 00 00    	jns    c0027e91 <__muldf3+0x2d1>
c0027d00:	85 c0                	test   eax,eax
c0027d02:	0f 85 89 01 00 00    	jne    c0027e91 <__muldf3+0x2d1>
c0027d08:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d0b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d14:	e9 7e 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027d19:	85 c0                	test   eax,eax
c0027d1b:	75 0c                	jne    c0027d29 <__muldf3+0x169>
c0027d1d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d21:	0f 89 6a 01 00 00    	jns    c0027e91 <__muldf3+0x2d1>
c0027d27:	eb df                	jmp    c0027d08 <__muldf3+0x148>
c0027d29:	01 f6                	add    esi,esi
c0027d2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d2e:	c1 ea 1f             	shr    edx,0x1f
c0027d31:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d34:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d3a:	09 d6                	or     esi,edx
c0027d3c:	78 04                	js     c0027d42 <__muldf3+0x182>
c0027d3e:	89 c3                	mov    ebx,eax
c0027d40:	eb e7                	jmp    c0027d29 <__muldf3+0x169>
c0027d42:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d4e:	89 c8                	mov    eax,ecx
c0027d50:	f7 e6                	mul    esi
c0027d52:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d55:	89 c7                	mov    edi,eax
c0027d57:	89 c8                	mov    eax,ecx
c0027d59:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d5c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d5f:	89 c1                	mov    ecx,eax
c0027d61:	89 f0                	mov    eax,esi
c0027d63:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d66:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d69:	89 c6                	mov    esi,eax
c0027d6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d6e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d71:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d74:	31 c0                	xor    eax,eax
c0027d76:	01 f1                	add    ecx,esi
c0027d78:	0f 92 c0             	setb   al
c0027d7b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d7e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d81:	83 d6 00             	adc    esi,0x0
c0027d84:	01 c7                	add    edi,eax
c0027d86:	83 d6 00             	adc    esi,0x0
c0027d89:	01 ca                	add    edx,ecx
c0027d8b:	0f 92 c1             	setb   cl
c0027d8e:	0f b6 c9             	movzx  ecx,cl
c0027d91:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d94:	83 d6 00             	adc    esi,0x0
c0027d97:	01 cf                	add    edi,ecx
c0027d99:	83 d6 00             	adc    esi,0x0
c0027d9c:	31 c9                	xor    ecx,ecx
c0027d9e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027da1:	0f 95 c1             	setne  cl
c0027da4:	09 cf                	or     edi,ecx
c0027da6:	85 f6                	test   esi,esi
c0027da8:	78 0c                	js     c0027db6 <__muldf3+0x1f6>
c0027daa:	01 f6                	add    esi,esi
c0027dac:	89 f8                	mov    eax,edi
c0027dae:	c1 e8 1f             	shr    eax,0x1f
c0027db1:	09 c6                	or     esi,eax
c0027db3:	01 ff                	add    edi,edi
c0027db5:	4b                   	dec    ebx
c0027db6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dbc:	0f 8f 85 00 00 00    	jg     c0027e47 <__muldf3+0x287>
c0027dc2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027dc8:	85 db                	test   ebx,ebx
c0027dca:	0f 8f 84 00 00 00    	jg     c0027e54 <__muldf3+0x294>
c0027dd0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027dd3:	7c 79                	jl     c0027e4e <__muldf3+0x28e>
c0027dd5:	ba 01 00 00 00       	mov    edx,0x1
c0027dda:	29 da                	sub    edx,ebx
c0027ddc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027de2:	83 fa 1f             	cmp    edx,0x1f
c0027de5:	7e 30                	jle    c0027e17 <__muldf3+0x257>
c0027de7:	83 fa 20             	cmp    edx,0x20
c0027dea:	75 0b                	jne    c0027df7 <__muldf3+0x237>
c0027dec:	31 c0                	xor    eax,eax
c0027dee:	85 ff                	test   edi,edi
c0027df0:	0f 95 c0             	setne  al
c0027df3:	89 c7                	mov    edi,eax
c0027df5:	eb 1a                	jmp    c0027e11 <__muldf3+0x251>
c0027df7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dfa:	89 f0                	mov    eax,esi
c0027dfc:	d3 e0                	shl    eax,cl
c0027dfe:	09 f8                	or     eax,edi
c0027e00:	0f 95 c0             	setne  al
c0027e03:	0f b6 c0             	movzx  eax,al
c0027e06:	89 c7                	mov    edi,eax
c0027e08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e0d:	29 d9                	sub    ecx,ebx
c0027e0f:	d3 ee                	shr    esi,cl
c0027e11:	09 f7                	or     edi,esi
c0027e13:	31 db                	xor    ebx,ebx
c0027e15:	eb 3b                	jmp    c0027e52 <__muldf3+0x292>
c0027e17:	83 c3 1f             	add    ebx,0x1f
c0027e1a:	89 f0                	mov    eax,esi
c0027e1c:	88 d9                	mov    cl,bl
c0027e1e:	d3 e0                	shl    eax,cl
c0027e20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e23:	89 f8                	mov    eax,edi
c0027e25:	88 d1                	mov    cl,dl
c0027e27:	d3 e8                	shr    eax,cl
c0027e29:	89 c1                	mov    ecx,eax
c0027e2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e2e:	09 c8                	or     eax,ecx
c0027e30:	88 d9                	mov    cl,bl
c0027e32:	d3 e7                	shl    edi,cl
c0027e34:	31 db                	xor    ebx,ebx
c0027e36:	85 ff                	test   edi,edi
c0027e38:	0f 95 c3             	setne  bl
c0027e3b:	89 df                	mov    edi,ebx
c0027e3d:	09 c7                	or     edi,eax
c0027e3f:	88 d1                	mov    cl,dl
c0027e41:	d3 ee                	shr    esi,cl
c0027e43:	31 db                	xor    ebx,ebx
c0027e45:	eb 0d                	jmp    c0027e54 <__muldf3+0x294>
c0027e47:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e4c:	eb 02                	jmp    c0027e50 <__muldf3+0x290>
c0027e4e:	31 db                	xor    ebx,ebx
c0027e50:	31 ff                	xor    edi,edi
c0027e52:	31 f6                	xor    esi,esi
c0027e54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e57:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e5a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e5f:	09 c3                	or     ebx,eax
c0027e61:	c1 e3 14             	shl    ebx,0x14
c0027e64:	89 f0                	mov    eax,esi
c0027e66:	c1 e8 0b             	shr    eax,0xb
c0027e69:	09 c3                	or     ebx,eax
c0027e6b:	89 f8                	mov    eax,edi
c0027e6d:	c1 e8 0b             	shr    eax,0xb
c0027e70:	c1 e6 15             	shl    esi,0x15
c0027e73:	09 c6                	or     esi,eax
c0027e75:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e7b:	0f 95 c1             	setne  cl
c0027e7e:	09 c8                	or     eax,ecx
c0027e80:	83 e0 01             	and    eax,0x1
c0027e83:	c1 ef 0a             	shr    edi,0xa
c0027e86:	21 c7                	and    edi,eax
c0027e88:	01 f7                	add    edi,esi
c0027e8a:	83 d3 00             	adc    ebx,0x0
c0027e8d:	89 da                	mov    edx,ebx
c0027e8f:	eb 03                	jmp    c0027e94 <__muldf3+0x2d4>
c0027e91:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e94:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e97:	89 f8                	mov    eax,edi
c0027e99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e9c:	83 c4 24             	add    esp,0x24
c0027e9f:	5b                   	pop    ebx
c0027ea0:	5e                   	pop    esi
c0027ea1:	5f                   	pop    edi
c0027ea2:	5d                   	pop    ebp
c0027ea3:	c3                   	ret    

c0027ea4 <__divdf3>:
c0027ea4:	55                   	push   ebp
c0027ea5:	89 e5                	mov    ebp,esp
c0027ea7:	57                   	push   edi
c0027ea8:	56                   	push   esi
c0027ea9:	53                   	push   ebx
c0027eaa:	83 ec 2c             	sub    esp,0x2c
c0027ead:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027eb0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027eb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027eb6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027eb9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ebc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ebf:	89 ce                	mov    esi,ecx
c0027ec1:	89 c8                	mov    eax,ecx
c0027ec3:	c1 f8 14             	sar    eax,0x14
c0027ec6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ec9:	89 f8                	mov    eax,edi
c0027ecb:	89 fb                	mov    ebx,edi
c0027ecd:	c1 e3 0b             	shl    ebx,0xb
c0027ed0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ed3:	c1 e6 0b             	shl    esi,0xb
c0027ed6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027edc:	c1 e8 15             	shr    eax,0x15
c0027edf:	09 c6                	or     esi,eax
c0027ee1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ee4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ee7:	89 c2                	mov    edx,eax
c0027ee9:	c1 fa 14             	sar    edx,0x14
c0027eec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027eef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ef2:	89 de                	mov    esi,ebx
c0027ef4:	c1 e6 0b             	shl    esi,0xb
c0027ef7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027efa:	c1 e0 0b             	shl    eax,0xb
c0027efd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f02:	c1 eb 15             	shr    ebx,0x15
c0027f05:	09 d8                	or     eax,ebx
c0027f07:	89 c2                	mov    edx,eax
c0027f09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f11:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f14:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f17:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f1d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f20:	29 d8                	sub    eax,ebx
c0027f22:	05 ff 03 00 00       	add    eax,0x3ff
c0027f27:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f2a:	46                   	inc    esi
c0027f2b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f31:	0f 85 a5 00 00 00    	jne    c0027fdc <__divdf3+0x138>
c0027f37:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f3a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f3d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f41:	74 2a                	je     c0027f6d <__divdf3+0xc9>
c0027f43:	85 f6                	test   esi,esi
c0027f45:	0f 85 cc 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0027f4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f4e:	40                   	inc    eax
c0027f4f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f54:	75 26                	jne    c0027f7c <__divdf3+0xd8>
c0027f56:	85 db                	test   ebx,ebx
c0027f58:	74 22                	je     c0027f7c <__divdf3+0xd8>
c0027f5a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f5d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f63:	09 d0                	or     eax,edx
c0027f65:	0f 85 ac 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0027f6b:	eb 63                	jmp    c0027fd0 <__divdf3+0x12c>
c0027f6d:	85 f6                	test   esi,esi
c0027f6f:	75 22                	jne    c0027f93 <__divdf3+0xef>
c0027f71:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f74:	40                   	inc    eax
c0027f75:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f7a:	74 36                	je     c0027fb2 <__divdf3+0x10e>
c0027f7c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f80:	0f 89 91 02 00 00    	jns    c0028217 <__divdf3+0x373>
c0027f86:	89 f8                	mov    eax,edi
c0027f88:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f8e:	e9 80 02 00 00       	jmp    c0028213 <__divdf3+0x36f>
c0027f93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f96:	01 f6                	add    esi,esi
c0027f98:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f9b:	c1 ef 1f             	shr    edi,0x1f
c0027f9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fa1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fa4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fa7:	09 f7                	or     edi,esi
c0027fa9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fac:	78 2e                	js     c0027fdc <__divdf3+0x138>
c0027fae:	89 c8                	mov    eax,ecx
c0027fb0:	eb e1                	jmp    c0027f93 <__divdf3+0xef>
c0027fb2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fb5:	09 d0                	or     eax,edx
c0027fb7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fbb:	74 0f                	je     c0027fcc <__divdf3+0x128>
c0027fbd:	85 c0                	test   eax,eax
c0027fbf:	74 bb                	je     c0027f7c <__divdf3+0xd8>
c0027fc1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fc4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fc7:	e9 4b 02 00 00       	jmp    c0028217 <__divdf3+0x373>
c0027fcc:	85 c0                	test   eax,eax
c0027fce:	75 ac                	jne    c0027f7c <__divdf3+0xd8>
c0027fd0:	31 ff                	xor    edi,edi
c0027fd2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fd7:	e9 3b 02 00 00       	jmp    c0028217 <__divdf3+0x373>
c0027fdc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fdf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fe2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fe8:	75 6b                	jne    c0028055 <__divdf3+0x1b1>
c0027fea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fed:	09 d6                	or     esi,edx
c0027fef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ff3:	74 28                	je     c002801d <__divdf3+0x179>
c0027ff5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ff8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ffb:	85 f6                	test   esi,esi
c0027ffd:	0f 85 14 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0028003:	31 ff                	xor    edi,edi
c0028005:	31 c9                	xor    ecx,ecx
c0028007:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002800d:	0f 89 04 02 00 00    	jns    c0028217 <__divdf3+0x373>
c0028013:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028018:	e9 fa 01 00 00       	jmp    c0028217 <__divdf3+0x373>
c002801d:	85 f6                	test   esi,esi
c002801f:	75 1b                	jne    c002803c <__divdf3+0x198>
c0028021:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028024:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028027:	25 00 00 00 80       	and    eax,0x80000000
c002802c:	31 c9                	xor    ecx,ecx
c002802e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028033:	89 cf                	mov    edi,ecx
c0028035:	89 c1                	mov    ecx,eax
c0028037:	e9 db 01 00 00       	jmp    c0028217 <__divdf3+0x373>
c002803c:	01 d2                	add    edx,edx
c002803e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028041:	c1 eb 1f             	shr    ebx,0x1f
c0028044:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028047:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002804a:	8d 48 01             	lea    ecx,[eax+0x1]
c002804d:	09 da                	or     edx,ebx
c002804f:	78 04                	js     c0028055 <__divdf3+0x1b1>
c0028051:	89 c8                	mov    eax,ecx
c0028053:	eb e7                	jmp    c002803c <__divdf3+0x198>
c0028055:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028058:	81 ce 00 00 00 80    	or     esi,0x80000000
c002805e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028064:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028067:	39 d6                	cmp    esi,edx
c0028069:	77 0d                	ja     c0028078 <__divdf3+0x1d4>
c002806b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002806e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028071:	72 1b                	jb     c002808e <__divdf3+0x1ea>
c0028073:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028076:	75 16                	jne    c002808e <__divdf3+0x1ea>
c0028078:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002807b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002807e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028081:	83 de 00             	sbb    esi,0x0
c0028084:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028087:	ba 01 00 00 00       	mov    edx,0x1
c002808c:	eb 02                	jmp    c0028090 <__divdf3+0x1ec>
c002808e:	31 d2                	xor    edx,edx
c0028090:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028097:	31 ff                	xor    edi,edi
c0028099:	01 ff                	add    edi,edi
c002809b:	89 d1                	mov    ecx,edx
c002809d:	c1 e9 1f             	shr    ecx,0x1f
c00280a0:	09 cf                	or     edi,ecx
c00280a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280a8:	89 da                	mov    edx,ebx
c00280aa:	89 f3                	mov    ebx,esi
c00280ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00280af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280b2:	c1 e9 1f             	shr    ecx,0x1f
c00280b5:	09 ce                	or     esi,ecx
c00280b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ba:	01 c9                	add    ecx,ecx
c00280bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280c2:	85 db                	test   ebx,ebx
c00280c4:	78 29                	js     c00280ef <__divdf3+0x24b>
c00280c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280c9:	72 07                	jb     c00280d2 <__divdf3+0x22e>
c00280cb:	75 3c                	jne    c0028109 <__divdf3+0x265>
c00280cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280d0:	77 37                	ja     c0028109 <__divdf3+0x265>
c00280d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280d8:	31 d2                	xor    edx,edx
c00280da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280dd:	0f 97 c2             	seta   dl
c00280e0:	29 d6                	sub    esi,edx
c00280e2:	89 d9                	mov    ecx,ebx
c00280e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280ed:	eb 17                	jmp    c0028106 <__divdf3+0x262>
c00280ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280f8:	0f 97 c1             	seta   cl
c00280fb:	0f b6 c9             	movzx  ecx,cl
c00280fe:	29 ce                	sub    esi,ecx
c0028100:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028103:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028106:	83 ca 01             	or     edx,0x1
c0028109:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002810c:	75 8b                	jne    c0028099 <__divdf3+0x1f5>
c002810e:	c1 e7 09             	shl    edi,0x9
c0028111:	89 d1                	mov    ecx,edx
c0028113:	c1 e9 17             	shr    ecx,0x17
c0028116:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028119:	09 f3                	or     ebx,esi
c002811b:	0f 95 c3             	setne  bl
c002811e:	0f b6 db             	movzx  ebx,bl
c0028121:	c1 e2 09             	shl    edx,0x9
c0028124:	09 d3                	or     ebx,edx
c0028126:	89 ca                	mov    edx,ecx
c0028128:	09 fa                	or     edx,edi
c002812a:	78 0c                	js     c0028138 <__divdf3+0x294>
c002812c:	01 d2                	add    edx,edx
c002812e:	89 d9                	mov    ecx,ebx
c0028130:	c1 e9 1f             	shr    ecx,0x1f
c0028133:	09 ca                	or     edx,ecx
c0028135:	01 db                	add    ebx,ebx
c0028137:	48                   	dec    eax
c0028138:	3d fe 07 00 00       	cmp    eax,0x7fe
c002813d:	0f 8f 83 00 00 00    	jg     c00281c6 <__divdf3+0x322>
c0028143:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028149:	85 c0                	test   eax,eax
c002814b:	0f 8f 82 00 00 00    	jg     c00281d3 <__divdf3+0x32f>
c0028151:	83 f8 cc             	cmp    eax,0xffffffcc
c0028154:	7c 77                	jl     c00281cd <__divdf3+0x329>
c0028156:	be 01 00 00 00       	mov    esi,0x1
c002815b:	29 c6                	sub    esi,eax
c002815d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028163:	83 fe 1f             	cmp    esi,0x1f
c0028166:	7e 2f                	jle    c0028197 <__divdf3+0x2f3>
c0028168:	83 fe 20             	cmp    esi,0x20
c002816b:	75 0a                	jne    c0028177 <__divdf3+0x2d3>
c002816d:	85 db                	test   ebx,ebx
c002816f:	0f 95 c3             	setne  bl
c0028172:	0f b6 db             	movzx  ebx,bl
c0028175:	eb 1a                	jmp    c0028191 <__divdf3+0x2ed>
c0028177:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002817a:	89 d7                	mov    edi,edx
c002817c:	d3 e7                	shl    edi,cl
c002817e:	89 f9                	mov    ecx,edi
c0028180:	09 d9                	or     ecx,ebx
c0028182:	0f 95 c3             	setne  bl
c0028185:	0f b6 db             	movzx  ebx,bl
c0028188:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002818d:	29 c1                	sub    ecx,eax
c002818f:	d3 ea                	shr    edx,cl
c0028191:	09 d3                	or     ebx,edx
c0028193:	31 c0                	xor    eax,eax
c0028195:	eb 3a                	jmp    c00281d1 <__divdf3+0x32d>
c0028197:	83 c0 1f             	add    eax,0x1f
c002819a:	89 d7                	mov    edi,edx
c002819c:	88 c1                	mov    cl,al
c002819e:	d3 e7                	shl    edi,cl
c00281a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281a3:	89 df                	mov    edi,ebx
c00281a5:	89 f1                	mov    ecx,esi
c00281a7:	d3 ef                	shr    edi,cl
c00281a9:	89 f9                	mov    ecx,edi
c00281ab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ae:	09 cf                	or     edi,ecx
c00281b0:	88 c1                	mov    cl,al
c00281b2:	d3 e3                	shl    ebx,cl
c00281b4:	85 db                	test   ebx,ebx
c00281b6:	0f 95 c3             	setne  bl
c00281b9:	0f b6 db             	movzx  ebx,bl
c00281bc:	09 fb                	or     ebx,edi
c00281be:	89 f1                	mov    ecx,esi
c00281c0:	d3 ea                	shr    edx,cl
c00281c2:	31 c0                	xor    eax,eax
c00281c4:	eb 0d                	jmp    c00281d3 <__divdf3+0x32f>
c00281c6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281cb:	eb 02                	jmp    c00281cf <__divdf3+0x32b>
c00281cd:	31 c0                	xor    eax,eax
c00281cf:	31 db                	xor    ebx,ebx
c00281d1:	31 d2                	xor    edx,edx
c00281d3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281d6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281d9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281df:	09 c8                	or     eax,ecx
c00281e1:	c1 e0 14             	shl    eax,0x14
c00281e4:	89 d1                	mov    ecx,edx
c00281e6:	c1 e9 0b             	shr    ecx,0xb
c00281e9:	09 c8                	or     eax,ecx
c00281eb:	89 c6                	mov    esi,eax
c00281ed:	89 d9                	mov    ecx,ebx
c00281ef:	c1 e9 0b             	shr    ecx,0xb
c00281f2:	c1 e2 15             	shl    edx,0x15
c00281f5:	09 ca                	or     edx,ecx
c00281f7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281fd:	0f 95 c0             	setne  al
c0028200:	09 c1                	or     ecx,eax
c0028202:	83 e1 01             	and    ecx,0x1
c0028205:	c1 eb 0a             	shr    ebx,0xa
c0028208:	21 cb                	and    ebx,ecx
c002820a:	01 d3                	add    ebx,edx
c002820c:	89 d8                	mov    eax,ebx
c002820e:	83 d6 00             	adc    esi,0x0
c0028211:	89 f2                	mov    edx,esi
c0028213:	89 c7                	mov    edi,eax
c0028215:	89 d1                	mov    ecx,edx
c0028217:	89 f8                	mov    eax,edi
c0028219:	89 ca                	mov    edx,ecx
c002821b:	83 c4 2c             	add    esp,0x2c
c002821e:	5b                   	pop    ebx
c002821f:	5e                   	pop    esi
c0028220:	5f                   	pop    edi
c0028221:	5d                   	pop    ebp
c0028222:	c3                   	ret    

c0028223 <__floatsidf>:
c0028223:	55                   	push   ebp
c0028224:	89 e5                	mov    ebp,esp
c0028226:	56                   	push   esi
c0028227:	53                   	push   ebx
c0028228:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002822b:	85 db                	test   ebx,ebx
c002822d:	7e 15                	jle    c0028244 <__floatsidf+0x21>
c002822f:	0f bd cb             	bsr    ecx,ebx
c0028232:	83 f1 1f             	xor    ecx,0x1f
c0028235:	d3 e3                	shl    ebx,cl
c0028237:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002823d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028242:	eb 21                	jmp    c0028265 <__floatsidf+0x42>
c0028244:	b8 00 00 00 00       	mov    eax,0x0
c0028249:	ba 00 00 00 00       	mov    edx,0x0
c002824e:	74 2a                	je     c002827a <__floatsidf+0x57>
c0028250:	f7 db                	neg    ebx
c0028252:	0f bd cb             	bsr    ecx,ebx
c0028255:	83 f1 1f             	xor    ecx,0x1f
c0028258:	d3 e3                	shl    ebx,cl
c002825a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028260:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028265:	29 c8                	sub    eax,ecx
c0028267:	c1 e0 14             	shl    eax,0x14
c002826a:	89 c1                	mov    ecx,eax
c002826c:	89 de                	mov    esi,ebx
c002826e:	c1 ee 0b             	shr    esi,0xb
c0028271:	09 f1                	or     ecx,esi
c0028273:	89 ca                	mov    edx,ecx
c0028275:	c1 e3 15             	shl    ebx,0x15
c0028278:	89 d8                	mov    eax,ebx
c002827a:	5b                   	pop    ebx
c002827b:	5e                   	pop    esi
c002827c:	5d                   	pop    ebp
c002827d:	c3                   	ret    

c002827e <__floatunsidf>:
c002827e:	55                   	push   ebp
c002827f:	89 e5                	mov    ebp,esp
c0028281:	56                   	push   esi
c0028282:	53                   	push   ebx
c0028283:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028286:	85 db                	test   ebx,ebx
c0028288:	74 2a                	je     c00282b4 <__floatunsidf+0x36>
c002828a:	0f bd cb             	bsr    ecx,ebx
c002828d:	83 f1 1f             	xor    ecx,0x1f
c0028290:	d3 e3                	shl    ebx,cl
c0028292:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028298:	b8 1e 04 00 00       	mov    eax,0x41e
c002829d:	29 c8                	sub    eax,ecx
c002829f:	c1 e0 14             	shl    eax,0x14
c00282a2:	89 c1                	mov    ecx,eax
c00282a4:	89 de                	mov    esi,ebx
c00282a6:	c1 ee 0b             	shr    esi,0xb
c00282a9:	09 f1                	or     ecx,esi
c00282ab:	89 ca                	mov    edx,ecx
c00282ad:	c1 e3 15             	shl    ebx,0x15
c00282b0:	89 d8                	mov    eax,ebx
c00282b2:	eb 04                	jmp    c00282b8 <__floatunsidf+0x3a>
c00282b4:	31 c0                	xor    eax,eax
c00282b6:	31 d2                	xor    edx,edx
c00282b8:	5b                   	pop    ebx
c00282b9:	5e                   	pop    esi
c00282ba:	5d                   	pop    ebp
c00282bb:	c3                   	ret    

c00282bc <__fixdfsi>:
c00282bc:	55                   	push   ebp
c00282bd:	89 e5                	mov    ebp,esp
c00282bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282c2:	89 d1                	mov    ecx,edx
c00282c4:	c1 e1 0b             	shl    ecx,0xb
c00282c7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282d0:	c1 e8 15             	shr    eax,0x15
c00282d3:	09 c1                	or     ecx,eax
c00282d5:	c1 fa 14             	sar    edx,0x14
c00282d8:	78 1f                	js     c00282f9 <__fixdfsi+0x3d>
c00282da:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282e0:	31 c0                	xor    eax,eax
c00282e2:	83 fa 1e             	cmp    edx,0x1e
c00282e5:	77 40                	ja     c0028327 <__fixdfsi+0x6b>
c00282e7:	89 c8                	mov    eax,ecx
c00282e9:	0d 00 00 00 80       	or     eax,0x80000000
c00282ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282f3:	29 d1                	sub    ecx,edx
c00282f5:	d3 e8                	shr    eax,cl
c00282f7:	eb 2e                	jmp    c0028327 <__fixdfsi+0x6b>
c00282f9:	31 c0                	xor    eax,eax
c00282fb:	81 c2 01 04 00 00    	add    edx,0x401
c0028301:	78 24                	js     c0028327 <__fixdfsi+0x6b>
c0028303:	83 fa 1e             	cmp    edx,0x1e
c0028306:	7e 09                	jle    c0028311 <__fixdfsi+0x55>
c0028308:	83 fa 1f             	cmp    edx,0x1f
c002830b:	75 18                	jne    c0028325 <__fixdfsi+0x69>
c002830d:	85 c9                	test   ecx,ecx
c002830f:	75 14                	jne    c0028325 <__fixdfsi+0x69>
c0028311:	89 c8                	mov    eax,ecx
c0028313:	0d 00 00 00 80       	or     eax,0x80000000
c0028318:	b9 1f 00 00 00       	mov    ecx,0x1f
c002831d:	29 d1                	sub    ecx,edx
c002831f:	d3 e8                	shr    eax,cl
c0028321:	f7 d8                	neg    eax
c0028323:	eb 02                	jmp    c0028327 <__fixdfsi+0x6b>
c0028325:	31 c0                	xor    eax,eax
c0028327:	5d                   	pop    ebp
c0028328:	c3                   	ret    

c0028329 <__fixunsdfsi>:
c0028329:	55                   	push   ebp
c002832a:	89 e5                	mov    ebp,esp
c002832c:	53                   	push   ebx
c002832d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028330:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028333:	89 d3                	mov    ebx,edx
c0028335:	c1 fb 14             	sar    ebx,0x14
c0028338:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002833e:	31 c0                	xor    eax,eax
c0028340:	83 fb 1f             	cmp    ebx,0x1f
c0028343:	77 1d                	ja     c0028362 <__fixunsdfsi+0x39>
c0028345:	89 d0                	mov    eax,edx
c0028347:	c1 e0 0b             	shl    eax,0xb
c002834a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002834f:	c1 e9 15             	shr    ecx,0x15
c0028352:	09 c8                	or     eax,ecx
c0028354:	0d 00 00 00 80       	or     eax,0x80000000
c0028359:	b9 1f 00 00 00       	mov    ecx,0x1f
c002835e:	29 d9                	sub    ecx,ebx
c0028360:	d3 e8                	shr    eax,cl
c0028362:	5b                   	pop    ebx
c0028363:	5d                   	pop    ebp
c0028364:	c3                   	ret    

c0028365 <__cmpdf2>:
c0028365:	55                   	push   ebp
c0028366:	89 e5                	mov    ebp,esp
c0028368:	57                   	push   edi
c0028369:	56                   	push   esi
c002836a:	53                   	push   ebx
c002836b:	83 ec 0c             	sub    esp,0xc
c002836e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028371:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028374:	89 ca                	mov    edx,ecx
c0028376:	c1 ea 14             	shr    edx,0x14
c0028379:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002837f:	89 cb                	mov    ebx,ecx
c0028381:	c1 fb 1f             	sar    ebx,0x1f
c0028384:	31 da                	xor    edx,ebx
c0028386:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028389:	89 df                	mov    edi,ebx
c002838b:	c1 e7 0b             	shl    edi,0xb
c002838e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028391:	c1 e1 0b             	shl    ecx,0xb
c0028394:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002839a:	c1 eb 15             	shr    ebx,0x15
c002839d:	09 d9                	or     ecx,ebx
c002839f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283a5:	89 ce                	mov    esi,ecx
c00283a7:	c1 ee 14             	shr    esi,0x14
c00283aa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283b0:	89 cb                	mov    ebx,ecx
c00283b2:	c1 fb 1f             	sar    ebx,0x1f
c00283b5:	31 de                	xor    esi,ebx
c00283b7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283ba:	89 df                	mov    edi,ebx
c00283bc:	c1 e7 0b             	shl    edi,0xb
c00283bf:	c1 e1 0b             	shl    ecx,0xb
c00283c2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283c8:	c1 eb 15             	shr    ebx,0x15
c00283cb:	09 d9                	or     ecx,ebx
c00283cd:	89 d3                	mov    ebx,edx
c00283cf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283d5:	43                   	inc    ebx
c00283d6:	83 fb 01             	cmp    ebx,0x1
c00283d9:	77 08                	ja     c00283e3 <__cmpdf2+0x7e>
c00283db:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283de:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283e1:	75 68                	jne    c002844b <__cmpdf2+0xe6>
c00283e3:	89 f3                	mov    ebx,esi
c00283e5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283eb:	43                   	inc    ebx
c00283ec:	83 fb 01             	cmp    ebx,0x1
c00283ef:	77 06                	ja     c00283f7 <__cmpdf2+0x92>
c00283f1:	89 fb                	mov    ebx,edi
c00283f3:	09 cb                	or     ebx,ecx
c00283f5:	75 54                	jne    c002844b <__cmpdf2+0xe6>
c00283f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283fa:	09 f8                	or     eax,edi
c00283fc:	09 c8                	or     eax,ecx
c00283fe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028401:	75 12                	jne    c0028415 <__cmpdf2+0xb0>
c0028403:	8d 42 01             	lea    eax,[edx+0x1]
c0028406:	83 f8 01             	cmp    eax,0x1
c0028409:	77 0a                	ja     c0028415 <__cmpdf2+0xb0>
c002840b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002840e:	31 c0                	xor    eax,eax
c0028410:	83 fb 01             	cmp    ebx,0x1
c0028413:	76 36                	jbe    c002844b <__cmpdf2+0xe6>
c0028415:	b8 01 00 00 00       	mov    eax,0x1
c002841a:	39 f2                	cmp    edx,esi
c002841c:	7f 2d                	jg     c002844b <__cmpdf2+0xe6>
c002841e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028423:	7c 26                	jl     c002844b <__cmpdf2+0xe6>
c0028425:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028428:	77 07                	ja     c0028431 <__cmpdf2+0xcc>
c002842a:	72 16                	jb     c0028442 <__cmpdf2+0xdd>
c002842c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002842f:	76 0a                	jbe    c002843b <__cmpdf2+0xd6>
c0028431:	89 d0                	mov    eax,edx
c0028433:	c1 f8 1f             	sar    eax,0x1f
c0028436:	83 c8 01             	or     eax,0x1
c0028439:	eb 10                	jmp    c002844b <__cmpdf2+0xe6>
c002843b:	b8 00 00 00 00       	mov    eax,0x0
c0028440:	73 09                	jae    c002844b <__cmpdf2+0xe6>
c0028442:	89 d0                	mov    eax,edx
c0028444:	c1 f8 1f             	sar    eax,0x1f
c0028447:	83 e0 02             	and    eax,0x2
c002844a:	48                   	dec    eax
c002844b:	83 c4 0c             	add    esp,0xc
c002844e:	5b                   	pop    ebx
c002844f:	5e                   	pop    esi
c0028450:	5f                   	pop    edi
c0028451:	5d                   	pop    ebp
c0028452:	c3                   	ret    

c0028453 <__eqdf2>:
c0028453:	55                   	push   ebp
c0028454:	89 e5                	mov    ebp,esp
c0028456:	50                   	push   eax
c0028457:	6a 01                	push   0x1
c0028459:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002845c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002845f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028462:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028465:	e8 fb fe ff ff       	call   c0028365 <__cmpdf2>
c002846a:	83 c4 18             	add    esp,0x18
c002846d:	c9                   	leave  
c002846e:	c3                   	ret    

c002846f <__nedf2>:
c002846f:	eb e2                	jmp    c0028453 <__eqdf2>

c0028471 <__gtdf2>:
c0028471:	55                   	push   ebp
c0028472:	89 e5                	mov    ebp,esp
c0028474:	50                   	push   eax
c0028475:	6a ff                	push   0xffffffff
c0028477:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002847a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002847d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028483:	e8 dd fe ff ff       	call   c0028365 <__cmpdf2>
c0028488:	83 c4 18             	add    esp,0x18
c002848b:	c9                   	leave  
c002848c:	c3                   	ret    

c002848d <__gedf2>:
c002848d:	eb e2                	jmp    c0028471 <__gtdf2>

c002848f <__ltdf2>:
c002848f:	eb c2                	jmp    c0028453 <__eqdf2>

c0028491 <__ledf2>:
c0028491:	eb c0                	jmp    c0028453 <__eqdf2>

c0028493 <__truncdfsf2>:
c0028493:	55                   	push   ebp
c0028494:	89 e5                	mov    ebp,esp
c0028496:	57                   	push   edi
c0028497:	56                   	push   esi
c0028498:	53                   	push   ebx
c0028499:	83 ec 0c             	sub    esp,0xc
c002849c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002849f:	89 d1                	mov    ecx,edx
c00284a1:	c1 f9 14             	sar    ecx,0x14
c00284a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284a7:	89 df                	mov    edi,ebx
c00284a9:	c1 e7 0b             	shl    edi,0xb
c00284ac:	89 d0                	mov    eax,edx
c00284ae:	c1 e0 0b             	shl    eax,0xb
c00284b1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284b6:	c1 eb 15             	shr    ebx,0x15
c00284b9:	09 d8                	or     eax,ebx
c00284bb:	89 cb                	mov    ebx,ecx
c00284bd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284c3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284c9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284cf:	0f 86 9e 00 00 00    	jbe    c0028573 <__truncdfsf2+0xe0>
c00284d5:	85 db                	test   ebx,ebx
c00284d7:	75 0a                	jne    c00284e3 <__truncdfsf2+0x50>
c00284d9:	c1 fa 17             	sar    edx,0x17
c00284dc:	30 d2                	xor    dl,dl
c00284de:	e9 84 00 00 00       	jmp    c0028567 <__truncdfsf2+0xd4>
c00284e3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284e9:	83 fe 83             	cmp    esi,0xffffff83
c00284ec:	7d 4b                	jge    c0028539 <__truncdfsf2+0xa6>
c00284ee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284f3:	29 f1                	sub    ecx,esi
c00284f5:	83 f9 1f             	cmp    ecx,0x1f
c00284f8:	7f 6b                	jg     c0028565 <__truncdfsf2+0xd2>
c00284fa:	0d 00 00 00 80       	or     eax,0x80000000
c00284ff:	89 c3                	mov    ebx,eax
c0028501:	d3 eb                	shr    ebx,cl
c0028503:	be 01 00 00 00       	mov    esi,0x1
c0028508:	d3 e6                	shl    esi,cl
c002850a:	4e                   	dec    esi
c002850b:	21 f0                	and    eax,esi
c002850d:	09 f8                	or     eax,edi
c002850f:	0f 95 c0             	setne  al
c0028512:	0f b6 c0             	movzx  eax,al
c0028515:	09 c3                	or     ebx,eax
c0028517:	89 d9                	mov    ecx,ebx
c0028519:	c1 e9 08             	shr    ecx,0x8
c002851c:	f6 c3 7f             	test   bl,0x7f
c002851f:	0f 95 c0             	setne  al
c0028522:	09 c8                	or     eax,ecx
c0028524:	83 e0 01             	and    eax,0x1
c0028527:	c1 eb 07             	shr    ebx,0x7
c002852a:	21 c3                	and    ebx,eax
c002852c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028532:	09 d1                	or     ecx,edx
c0028534:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028537:	eb 76                	jmp    c00285af <__truncdfsf2+0x11c>
c0028539:	83 c6 80             	add    esi,0xffffff80
c002853c:	7e 1d                	jle    c002855b <__truncdfsf2+0xc8>
c002853e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028544:	75 0b                	jne    c0028551 <__truncdfsf2+0xbe>
c0028546:	09 f8                	or     eax,edi
c0028548:	74 09                	je     c0028553 <__truncdfsf2+0xc0>
c002854a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002854f:	eb 02                	jmp    c0028553 <__truncdfsf2+0xc0>
c0028551:	31 c0                	xor    eax,eax
c0028553:	c1 fa 17             	sar    edx,0x17
c0028556:	80 ca ff             	or     dl,0xff
c0028559:	eb 0e                	jmp    c0028569 <__truncdfsf2+0xd6>
c002855b:	c1 fa 1f             	sar    edx,0x1f
c002855e:	c1 e2 08             	shl    edx,0x8
c0028561:	09 ca                	or     edx,ecx
c0028563:	eb 04                	jmp    c0028569 <__truncdfsf2+0xd6>
c0028565:	31 d2                	xor    edx,edx
c0028567:	31 c0                	xor    eax,eax
c0028569:	c1 e2 17             	shl    edx,0x17
c002856c:	c1 e8 08             	shr    eax,0x8
c002856f:	09 d0                	or     eax,edx
c0028571:	eb 3c                	jmp    c00285af <__truncdfsf2+0x11c>
c0028573:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028579:	89 ca                	mov    edx,ecx
c002857b:	c1 fa 0b             	sar    edx,0xb
c002857e:	c1 e2 08             	shl    edx,0x8
c0028581:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028584:	31 db                	xor    ebx,ebx
c0028586:	85 ff                	test   edi,edi
c0028588:	0f 95 c3             	setne  bl
c002858b:	09 d8                	or     eax,ebx
c002858d:	89 c3                	mov    ebx,eax
c002858f:	c1 eb 08             	shr    ebx,0x8
c0028592:	a8 7f                	test   al,0x7f
c0028594:	0f 95 c2             	setne  dl
c0028597:	89 d6                	mov    esi,edx
c0028599:	09 de                	or     esi,ebx
c002859b:	83 e6 01             	and    esi,0x1
c002859e:	c1 e8 07             	shr    eax,0x7
c00285a1:	21 f0                	and    eax,esi
c00285a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285a6:	09 ca                	or     edx,ecx
c00285a8:	c1 e2 17             	shl    edx,0x17
c00285ab:	09 da                	or     edx,ebx
c00285ad:	01 d0                	add    eax,edx
c00285af:	83 c4 0c             	add    esp,0xc
c00285b2:	5b                   	pop    ebx
c00285b3:	5e                   	pop    esi
c00285b4:	5f                   	pop    edi
c00285b5:	5d                   	pop    ebp
c00285b6:	c3                   	ret    

c00285b7 <__extendsfdf2>:
c00285b7:	55                   	push   ebp
c00285b8:	89 e5                	mov    ebp,esp
c00285ba:	57                   	push   edi
c00285bb:	56                   	push   esi
c00285bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285bf:	89 d1                	mov    ecx,edx
c00285c1:	c1 f9 17             	sar    ecx,0x17
c00285c4:	c1 e2 08             	shl    edx,0x8
c00285c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285cd:	89 c8                	mov    eax,ecx
c00285cf:	80 e4 f8             	and    ah,0xf8
c00285d2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285d5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285db:	75 27                	jne    c0028604 <__extendsfdf2+0x4d>
c00285dd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285e3:	75 18                	jne    c00285fd <__extendsfdf2+0x46>
c00285e5:	85 d2                	test   edx,edx
c00285e7:	74 20                	je     c0028609 <__extendsfdf2+0x52>
c00285e9:	41                   	inc    ecx
c00285ea:	01 d2                	add    edx,edx
c00285ec:	79 fb                	jns    c00285e9 <__extendsfdf2+0x32>
c00285ee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285f4:	29 c8                	sub    eax,ecx
c00285f6:	05 81 03 00 00       	add    eax,0x381
c00285fb:	eb 0c                	jmp    c0028609 <__extendsfdf2+0x52>
c00285fd:	05 00 07 00 00       	add    eax,0x700
c0028602:	eb 05                	jmp    c0028609 <__extendsfdf2+0x52>
c0028604:	05 80 03 00 00       	add    eax,0x380
c0028609:	c1 e0 14             	shl    eax,0x14
c002860c:	89 c1                	mov    ecx,eax
c002860e:	89 d0                	mov    eax,edx
c0028610:	c1 e8 0b             	shr    eax,0xb
c0028613:	09 c1                	or     ecx,eax
c0028615:	c1 e2 15             	shl    edx,0x15
c0028618:	89 d0                	mov    eax,edx
c002861a:	89 ca                	mov    edx,ecx
c002861c:	5e                   	pop    esi
c002861d:	5f                   	pop    edi
c002861e:	5d                   	pop    ebp
c002861f:	c3                   	ret    

c0028620 <fabs>:
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028627:	89 04 24             	mov    DWORD PTR [esp],eax
c002862a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002862e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028633:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028637:	dd 04 24             	fld    QWORD PTR [esp]
c002863a:	83 c4 0c             	add    esp,0xc
c002863d:	c3                   	ret    
c002863e:	66 90                	xchg   ax,ax

c0028640 <lrint>:
c0028640:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028644:	83 ec 04             	sub    esp,0x4
c0028647:	db 1c 24             	fistp  DWORD PTR [esp]
c002864a:	58                   	pop    eax
c002864b:	c3                   	ret    

c002864c <lrintf>:
c002864c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028650:	83 ec 04             	sub    esp,0x4
c0028653:	db 1c 24             	fistp  DWORD PTR [esp]
c0028656:	58                   	pop    eax
c0028657:	c3                   	ret    

Disassembly of section .init:

c0028658 <_init>:
c0028658:	55                   	push   ebp
c0028659:	89 e5                	mov    ebp,esp
c002865b:	e8 b8 7a fd ff       	call   c0000118 <frame_dummy>
c0028660:	e8 63 e0 ff ff       	call   c00266c8 <__do_global_ctors_aux>
c0028665:	5d                   	pop    ebp
c0028666:	c3                   	ret    

Disassembly of section .fini:

c0028667 <_fini>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	e8 39 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002866f:	5d                   	pop    ebp
c0028670:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028672 <Computer::~Computer()>:
c0028672:	83 ec 0c             	sub    esp,0xc
c0028675:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	89 10                	mov    DWORD PTR [eax],edx
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	83 ec 0c             	sub    esp,0xc
c0028687:	50                   	push   eax
c0028688:	e8 7d bb fe ff       	call   c001420a <Device::~Device()>
c002868d:	83 c4 10             	add    esp,0x10
c0028690:	90                   	nop
c0028691:	83 c4 0c             	add    esp,0xc
c0028694:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028696 <Computer::~Computer()>:
c0028696:	83 ec 0c             	sub    esp,0xc
c0028699:	83 ec 0c             	sub    esp,0xc
c002869c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a0:	e8 cd ff ff ff       	call   c0028672 <Computer::~Computer()>
c00286a5:	83 c4 10             	add    esp,0x10
c00286a8:	83 ec 08             	sub    esp,0x8
c00286ab:	68 ec 01 00 00       	push   0x1ec
c00286b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b4:	e8 79 a7 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00286b9:	83 c4 10             	add    esp,0x10
c00286bc:	83 c4 0c             	add    esp,0xc
c00286bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286c0 <idleCommon()>:
c00286c0:	83 ec 0c             	sub    esp,0xc
c00286c3:	e8 10 57 ff ff       	call   c001ddd8 <lockScheduler()>
c00286c8:	e8 47 5a ff ff       	call   c001e114 <schedule()>
c00286cd:	83 c4 0c             	add    esp,0xc
c00286d0:	e9 05 57 ff ff       	jmp    c001ddda <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286d6 <LinkedList<UnixFile>::~LinkedList()>:
c00286d6:	90                   	nop
c00286d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286d8 <LinkedList<UnixFile>::LinkedList()>:
c00286d8:	83 ec 0c             	sub    esp,0xc
c00286db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871b:	83 ec 0c             	sub    esp,0xc
c002871e:	68 9a a4 02 c0       	push   0xc002a49a
c0028723:	e8 ea a7 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0028728:	83 c4 10             	add    esp,0x10
c002872b:	90                   	nop
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028738:	75 10                	jne    c002874a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 b4 a4 02 c0       	push   0xc002a4b4
c0028742:	e8 6c 1e ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028750:	85 c0                	test   eax,eax
c0028752:	74 34                	je     c0028788 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 29                	je     c0028788 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028775:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028786:	eb 65                	jmp    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 00                	mov    eax,DWORD PTR [eax]
c002878e:	85 c0                	test   eax,eax
c0028790:	75 4b                	jne    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 40                	jne    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 10                	mov    DWORD PTR [eax],edx
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c7:	85 c0                	test   eax,eax
c00287c9:	74 22                	je     c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 d6 a4 02 c0       	push   0xc002a4d6
c00287d3:	e8 db 1d ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	eb 10                	jmp    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287dd:	83 ec 0c             	sub    esp,0xc
c00287e0:	68 e0 a4 02 c0       	push   0xc002a4e0
c00287e5:	e8 c9 1d ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c00287ea:	83 c4 10             	add    esp,0x10
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f4:	8d 50 01             	lea    edx,[eax+0x1]
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028804 <LinkedList<UnixFile>::getFirstElement()>:
c0028804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028808:	8b 00                	mov    eax,DWORD PTR [eax]
c002880a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002880c <LinkedList<UnixFile>::removeFirst()>:
c002880c:	83 ec 0c             	sub    esp,0xc
c002880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028813:	8b 00                	mov    eax,DWORD PTR [eax]
c0028815:	85 c0                	test   eax,eax
c0028817:	75 12                	jne    c002882b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028819:	83 ec 0c             	sub    esp,0xc
c002881c:	68 ec a4 02 c0       	push   0xc002a4ec
c0028821:	e8 8d 1d ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028826:	83 c4 10             	add    esp,0x10
c0028829:	eb 7e                	jmp    c00288a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028835:	85 c0                	test   eax,eax
c0028837:	74 10                	je     c0028849 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028839:	83 ec 0c             	sub    esp,0xc
c002883c:	68 37 a5 02 c0       	push   0xc002a537
c0028841:	e8 6d 1d ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884d:	8b 00                	mov    eax,DWORD PTR [eax]
c002884f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028852:	85 c0                	test   eax,eax
c0028854:	75 33                	jne    c0028889 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028872:	83 f8 01             	cmp    eax,0x1
c0028875:	74 21                	je     c0028898 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028877:	83 ec 0c             	sub    esp,0xc
c002887a:	68 10 a5 02 c0       	push   0xc002a510
c002887f:	e8 2f 1d ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028884:	83 c4 10             	add    esp,0x10
c0028887:	eb 0f                	jmp    c0028898 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888d:	8b 00                	mov    eax,DWORD PTR [eax]
c002888f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	89 10                	mov    DWORD PTR [eax],edx
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002889f:	8d 50 ff             	lea    edx,[eax-0x1]
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288a9:	83 c4 0c             	add    esp,0xc
c00288ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288b6 <DriverlessDevice::~DriverlessDevice()>:
c00288b6:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c00288bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288bf:	89 10                	mov    DWORD PTR [eax],edx
c00288c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c5:	50                   	push   eax
c00288c6:	e8 3f b9 fe ff       	call   c001420a <Device::~Device()>
c00288cb:	83 c4 04             	add    esp,0x4
c00288ce:	90                   	nop
c00288cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288d0 <DriverlessDevice::~DriverlessDevice()>:
c00288d0:	83 ec 0c             	sub    esp,0xc
c00288d3:	83 ec 0c             	sub    esp,0xc
c00288d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288da:	e8 d7 ff ff ff       	call   c00288b6 <DriverlessDevice::~DriverlessDevice()>
c00288df:	83 c4 10             	add    esp,0x10
c00288e2:	83 ec 08             	sub    esp,0x8
c00288e5:	68 58 01 00 00       	push   0x158
c00288ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ee:	e8 3f a5 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00288f3:	83 c4 10             	add    esp,0x10
c00288f6:	83 c4 0c             	add    esp,0xc
c00288f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288fa <LinkedList<Device>::addElement(Device*)>:
c00288fa:	83 ec 0c             	sub    esp,0xc
c00288fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028902:	75 10                	jne    c0028914 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	68 b4 a4 02 c0       	push   0xc002a4b4
c002890c:	e8 a2 1c ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028911:	83 c4 10             	add    esp,0x10
c0028914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028918:	8b 00                	mov    eax,DWORD PTR [eax]
c002891a:	85 c0                	test   eax,eax
c002891c:	74 3a                	je     c0028958 <LinkedList<Device>::addElement(Device*)+0x5e>
c002891e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028925:	85 c0                	test   eax,eax
c0028927:	74 2f                	je     c0028958 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028930:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028934:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028942:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028949:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028956:	eb 68                	jmp    c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 00                	mov    eax,DWORD PTR [eax]
c002895e:	85 c0                	test   eax,eax
c0028960:	75 4e                	jne    c00289b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028969:	85 c0                	test   eax,eax
c002896b:	75 43                	jne    c00289b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028971:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028975:	89 10                	mov    DWORD PTR [eax],edx
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002897f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002899a:	85 c0                	test   eax,eax
c002899c:	74 22                	je     c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002899e:	83 ec 0c             	sub    esp,0xc
c00289a1:	68 d6 a4 02 c0       	push   0xc002a4d6
c00289a6:	e8 08 1c ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c00289ab:	83 c4 10             	add    esp,0x10
c00289ae:	eb 10                	jmp    c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	68 e0 a4 02 c0       	push   0xc002a4e0
c00289b8:	e8 f6 1b ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c00289bd:	83 c4 10             	add    esp,0x10
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289d1:	90                   	nop
c00289d2:	83 c4 0c             	add    esp,0xc
c00289d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289d6 <LinkedList<Device>::LinkedList()>:
c00289d6:	83 ec 0c             	sub    esp,0xc
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a19:	83 ec 0c             	sub    esp,0xc
c0028a1c:	68 9a a4 02 c0       	push   0xc002a49a
c0028a21:	e8 ec a4 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0028a26:	83 c4 10             	add    esp,0x10
c0028a29:	90                   	nop
c0028a2a:	83 c4 0c             	add    esp,0xc
c0028a2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3c:	85 c0                	test   eax,eax
c0028a3e:	75 0e                	jne    c0028a4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a47:	85 c0                	test   eax,eax
c0028a49:	75 03                	jne    c0028a4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a4b:	b0 01                	mov    al,0x1
c0028a4d:	c3                   	ret    
c0028a4e:	b0 00                	mov    al,0x0
c0028a50:	90                   	nop
c0028a51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a52:	83 ec 0c             	sub    esp,0xc
c0028a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5b:	85 c0                	test   eax,eax
c0028a5d:	75 15                	jne    c0028a74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a5f:	83 ec 0c             	sub    esp,0xc
c0028a62:	68 ec a4 02 c0       	push   0xc002a4ec
c0028a67:	e8 47 1b ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028a6c:	83 c4 10             	add    esp,0x10
c0028a6f:	e9 88 00 00 00       	jmp    c0028afc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a7e:	85 c0                	test   eax,eax
c0028a80:	0f 95 c0             	setne  al
c0028a83:	84 c0                	test   al,al
c0028a85:	74 10                	je     c0028a97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a87:	83 ec 0c             	sub    esp,0xc
c0028a8a:	68 37 a5 02 c0       	push   0xc002a537
c0028a8f:	e8 1f 1b ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028a94:	83 c4 10             	add    esp,0x10
c0028a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aa0:	85 c0                	test   eax,eax
c0028aa2:	0f 94 c0             	sete   al
c0028aa5:	84 c0                	test   al,al
c0028aa7:	74 33                	je     c0028adc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ac5:	83 f8 01             	cmp    eax,0x1
c0028ac8:	74 21                	je     c0028aeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	68 10 a5 02 c0       	push   0xc002a510
c0028ad2:	e8 dc 1a ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	eb 0f                	jmp    c0028aeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	89 10                	mov    DWORD PTR [eax],edx
c0028aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028af2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028afc:	83 c4 0c             	add    esp,0xc
c0028aff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b00:	83 ec 0c             	sub    esp,0xc
c0028b03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b08:	75 10                	jne    c0028b1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	68 b4 a4 02 c0       	push   0xc002a4b4
c0028b12:	e8 9c 1a ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b20:	85 c0                	test   eax,eax
c0028b22:	74 34                	je     c0028b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2b:	85 c0                	test   eax,eax
c0028b2d:	74 29                	je     c0028b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b56:	eb 65                	jmp    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5e:	85 c0                	test   eax,eax
c0028b60:	75 4b                	jne    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b69:	85 c0                	test   eax,eax
c0028b6b:	75 40                	jne    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b75:	89 10                	mov    DWORD PTR [eax],edx
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b97:	85 c0                	test   eax,eax
c0028b99:	74 22                	je     c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b9b:	83 ec 0c             	sub    esp,0xc
c0028b9e:	68 d6 a4 02 c0       	push   0xc002a4d6
c0028ba3:	e8 0b 1a ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028ba8:	83 c4 10             	add    esp,0x10
c0028bab:	eb 10                	jmp    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bad:	83 ec 0c             	sub    esp,0xc
c0028bb0:	68 e0 a4 02 c0       	push   0xc002a4e0
c0028bb5:	e8 f9 19 ff ff       	call   c001a5b3 <Krnl::panic(char const*)>
c0028bba:	83 c4 10             	add    esp,0x10
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bce:	90                   	nop
c0028bcf:	83 c4 0c             	add    esp,0xc
c0028bd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bd4 <ACPI::~ACPI()>:
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	ba ec b6 02 c0       	mov    edx,0xc002b6ec
c0028bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be0:	89 10                	mov    DWORD PTR [eax],edx
c0028be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be6:	83 ec 0c             	sub    esp,0xc
c0028be9:	50                   	push   eax
c0028bea:	e8 1b b6 fe ff       	call   c001420a <Device::~Device()>
c0028bef:	83 c4 10             	add    esp,0x10
c0028bf2:	90                   	nop
c0028bf3:	83 c4 0c             	add    esp,0xc
c0028bf6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028bf8 <ACPI::~ACPI()>:
c0028bf8:	83 ec 0c             	sub    esp,0xc
c0028bfb:	83 ec 0c             	sub    esp,0xc
c0028bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c02:	e8 cd ff ff ff       	call   c0028bd4 <ACPI::~ACPI()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	83 ec 08             	sub    esp,0x8
c0028c0d:	68 68 12 00 00       	push   0x1268
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 17 a2 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 c4 0c             	add    esp,0xc
c0028c21:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c22 <CPU::~CPU()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0028c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2e:	89 10                	mov    DWORD PTR [eax],edx
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	83 ec 0c             	sub    esp,0xc
c0028c37:	50                   	push   eax
c0028c38:	e8 cd b5 fe ff       	call   c001420a <Device::~Device()>
c0028c3d:	83 c4 10             	add    esp,0x10
c0028c40:	90                   	nop
c0028c41:	83 c4 0c             	add    esp,0xc
c0028c44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c46 <CPU::~CPU()>:
c0028c46:	83 ec 0c             	sub    esp,0xc
c0028c49:	83 ec 0c             	sub    esp,0xc
c0028c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c50:	e8 cd ff ff ff       	call   c0028c22 <CPU::~CPU()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	83 ec 08             	sub    esp,0x8
c0028c5b:	68 98 11 00 00       	push   0x1198
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 c9 a1 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 c4 0c             	add    esp,0xc
c0028c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c70 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c70:	90                   	nop
c0028c71:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c72 <ThreadControlBlock::ThreadControlBlock()>:
c0028c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c76:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c81:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c97:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028caa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cae:	90                   	nop
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf3:	83 ec 0c             	sub    esp,0xc
c0028cf6:	68 9a a4 02 c0       	push   0xc002a49a
c0028cfb:	e8 12 a2 fe ff       	call   c0012f12 <Dbg::kprintf(char const*, ...)>
c0028d00:	83 c4 10             	add    esp,0x10
c0028d03:	90                   	nop
c0028d04:	83 c4 0c             	add    esp,0xc
c0028d07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d0f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d10 <Vm::_FPUState::_FPUState()>:
c0028d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d14:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d1b:	90                   	nop
c0028d1c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d1e <PCI::~PCI()>:
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	ba d0 cb 02 c0       	mov    edx,0xc002cbd0
c0028d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2a:	89 10                	mov    DWORD PTR [eax],edx
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	50                   	push   eax
c0028d34:	e8 a9 ae fe ff       	call   c0013be2 <Bus::~Bus()>
c0028d39:	83 c4 10             	add    esp,0x10
c0028d3c:	90                   	nop
c0028d3d:	83 c4 0c             	add    esp,0xc
c0028d40:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d42 <PCI::~PCI()>:
c0028d42:	83 ec 0c             	sub    esp,0xc
c0028d45:	83 ec 0c             	sub    esp,0xc
c0028d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4c:	e8 cd ff ff ff       	call   c0028d1e <PCI::~PCI()>
c0028d51:	83 c4 10             	add    esp,0x10
c0028d54:	83 ec 08             	sub    esp,0x8
c0028d57:	68 58 01 00 00       	push   0x158
c0028d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d60:	e8 cd a0 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	83 c4 0c             	add    esp,0xc
c0028d6b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d6c <IDE::~IDE()>:
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	ba 34 ce 02 c0       	mov    edx,0xc002ce34
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	89 10                	mov    DWORD PTR [eax],edx
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	50                   	push   eax
c0028d82:	e8 73 b9 fe ff       	call   c00146fa <HardDiskController::~HardDiskController()>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	90                   	nop
c0028d8b:	83 c4 0c             	add    esp,0xc
c0028d8e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d90 <IDE::~IDE()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	83 ec 0c             	sub    esp,0xc
c0028d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9a:	e8 cd ff ff ff       	call   c0028d6c <IDE::~IDE()>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	83 ec 08             	sub    esp,0x8
c0028da5:	68 70 02 00 00       	push   0x270
c0028daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dae:	e8 7f a0 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	83 c4 0c             	add    esp,0xc
c0028db9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dba <SATABus::~SATABus()>:
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	ba 14 cf 02 c0       	mov    edx,0xc002cf14
c0028dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc6:	89 10                	mov    DWORD PTR [eax],edx
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	83 ec 0c             	sub    esp,0xc
c0028dcf:	50                   	push   eax
c0028dd0:	e8 25 b9 fe ff       	call   c00146fa <HardDiskController::~HardDiskController()>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	90                   	nop
c0028dd9:	83 c4 0c             	add    esp,0xc
c0028ddc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dde <SATABus::~SATABus()>:
c0028dde:	83 ec 0c             	sub    esp,0xc
c0028de1:	83 ec 0c             	sub    esp,0xc
c0028de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de8:	e8 cd ff ff ff       	call   c0028dba <SATABus::~SATABus()>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	83 ec 08             	sub    esp,0x8
c0028df3:	68 64 01 00 00       	push   0x164
c0028df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfc:	e8 31 a0 fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	83 c4 0c             	add    esp,0xc
c0028e07:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e08 <ATA::~ATA()>:
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	ba 60 cf 02 c0       	mov    edx,0xc002cf60
c0028e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e14:	89 10                	mov    DWORD PTR [eax],edx
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	83 ec 0c             	sub    esp,0xc
c0028e1d:	50                   	push   eax
c0028e1e:	e8 c9 b9 fe ff       	call   c00147ec <PhysicalDisk::~PhysicalDisk()>
c0028e23:	83 c4 10             	add    esp,0x10
c0028e26:	90                   	nop
c0028e27:	83 c4 0c             	add    esp,0xc
c0028e2a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e2c <ATA::~ATA()>:
c0028e2c:	83 ec 0c             	sub    esp,0xc
c0028e2f:	83 ec 0c             	sub    esp,0xc
c0028e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e36:	e8 cd ff ff ff       	call   c0028e08 <ATA::~ATA()>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	83 ec 08             	sub    esp,0x8
c0028e41:	68 7c 01 00 00       	push   0x17c
c0028e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4a:	e8 e3 9f fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	83 c4 0c             	add    esp,0xc
c0028e55:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e56 <ATAPI::~ATAPI()>:
c0028e56:	83 ec 0c             	sub    esp,0xc
c0028e59:	ba 98 cf 02 c0       	mov    edx,0xc002cf98
c0028e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e62:	89 10                	mov    DWORD PTR [eax],edx
c0028e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e68:	83 ec 0c             	sub    esp,0xc
c0028e6b:	50                   	push   eax
c0028e6c:	e8 7b b9 fe ff       	call   c00147ec <PhysicalDisk::~PhysicalDisk()>
c0028e71:	83 c4 10             	add    esp,0x10
c0028e74:	90                   	nop
c0028e75:	83 c4 0c             	add    esp,0xc
c0028e78:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e7a <ATAPI::~ATAPI()>:
c0028e7a:	83 ec 0c             	sub    esp,0xc
c0028e7d:	83 ec 0c             	sub    esp,0xc
c0028e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e84:	e8 cd ff ff ff       	call   c0028e56 <ATAPI::~ATAPI()>
c0028e89:	83 c4 10             	add    esp,0x10
c0028e8c:	83 ec 08             	sub    esp,0x8
c0028e8f:	68 80 01 00 00       	push   0x180
c0028e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e98:	e8 95 9f fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	83 c4 0c             	add    esp,0xc
c0028ea3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ea4 <SATA::~SATA()>:
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	ba 4c d0 02 c0       	mov    edx,0xc002d04c
c0028eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb0:	89 10                	mov    DWORD PTR [eax],edx
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	50                   	push   eax
c0028eba:	e8 2d b9 fe ff       	call   c00147ec <PhysicalDisk::~PhysicalDisk()>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	90                   	nop
c0028ec3:	83 c4 0c             	add    esp,0xc
c0028ec6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ec8 <SATA::~SATA()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	83 ec 0c             	sub    esp,0xc
c0028ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed2:	e8 cd ff ff ff       	call   c0028ea4 <SATA::~SATA()>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	83 ec 08             	sub    esp,0x8
c0028edd:	68 7c 01 00 00       	push   0x17c
c0028ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee6:	e8 47 9f fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	83 c4 0c             	add    esp,0xc
c0028ef1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ef2 <SATAPI::~SATAPI()>:
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	ba 28 d1 02 c0       	mov    edx,0xc002d128
c0028efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efe:	89 10                	mov    DWORD PTR [eax],edx
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	50                   	push   eax
c0028f08:	e8 df b8 fe ff       	call   c00147ec <PhysicalDisk::~PhysicalDisk()>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	90                   	nop
c0028f11:	83 c4 0c             	add    esp,0xc
c0028f14:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f16 <SATAPI::~SATAPI()>:
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	83 ec 0c             	sub    esp,0xc
c0028f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f20:	e8 cd ff ff ff       	call   c0028ef2 <SATAPI::~SATAPI()>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	83 ec 08             	sub    esp,0x8
c0028f2b:	68 80 01 00 00       	push   0x180
c0028f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f34:	e8 f9 9e fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	83 c4 0c             	add    esp,0xc
c0028f3f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f40 <AVX::~AVX()>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	ba 68 d1 02 c0       	mov    edx,0xc002d168
c0028f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4c:	89 10                	mov    DWORD PTR [eax],edx
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	83 ec 0c             	sub    esp,0xc
c0028f55:	50                   	push   eax
c0028f56:	e8 15 b9 fe ff       	call   c0014870 <FPU::~FPU()>
c0028f5b:	83 c4 10             	add    esp,0x10
c0028f5e:	90                   	nop
c0028f5f:	83 c4 0c             	add    esp,0xc
c0028f62:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f64 <AVX::~AVX()>:
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	83 ec 0c             	sub    esp,0xc
c0028f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6e:	e8 cd ff ff ff       	call   c0028f40 <AVX::~AVX()>
c0028f73:	83 c4 10             	add    esp,0x10
c0028f76:	83 ec 08             	sub    esp,0x8
c0028f79:	68 58 01 00 00       	push   0x158
c0028f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f82:	e8 ab 9e fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	83 c4 0c             	add    esp,0xc
c0028f8d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f8e <MMX::~MMX()>:
c0028f8e:	83 ec 0c             	sub    esp,0xc
c0028f91:	ba a8 d1 02 c0       	mov    edx,0xc002d1a8
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	89 10                	mov    DWORD PTR [eax],edx
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	50                   	push   eax
c0028fa4:	e8 c7 b8 fe ff       	call   c0014870 <FPU::~FPU()>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	90                   	nop
c0028fad:	83 c4 0c             	add    esp,0xc
c0028fb0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fb2 <MMX::~MMX()>:
c0028fb2:	83 ec 0c             	sub    esp,0xc
c0028fb5:	83 ec 0c             	sub    esp,0xc
c0028fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbc:	e8 cd ff ff ff       	call   c0028f8e <MMX::~MMX()>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	83 ec 08             	sub    esp,0x8
c0028fc7:	68 58 01 00 00       	push   0x158
c0028fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd0:	e8 5d 9e fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	83 c4 0c             	add    esp,0xc
c0028fdb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fdc <SSE::~SSE()>:
c0028fdc:	83 ec 0c             	sub    esp,0xc
c0028fdf:	ba e8 d1 02 c0       	mov    edx,0xc002d1e8
c0028fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe8:	89 10                	mov    DWORD PTR [eax],edx
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	83 ec 0c             	sub    esp,0xc
c0028ff1:	50                   	push   eax
c0028ff2:	e8 79 b8 fe ff       	call   c0014870 <FPU::~FPU()>
c0028ff7:	83 c4 10             	add    esp,0x10
c0028ffa:	90                   	nop
c0028ffb:	83 c4 0c             	add    esp,0xc
c0028ffe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029000 <SSE::~SSE()>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	83 ec 0c             	sub    esp,0xc
c0029006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900a:	e8 cd ff ff ff       	call   c0028fdc <SSE::~SSE()>
c002900f:	83 c4 10             	add    esp,0x10
c0029012:	83 ec 08             	sub    esp,0x8
c0029015:	68 58 01 00 00       	push   0x158
c002901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901e:	e8 0f 9e fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0029023:	83 c4 10             	add    esp,0x10
c0029026:	83 c4 0c             	add    esp,0xc
c0029029:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002902a <x87::~x87()>:
c002902a:	83 ec 0c             	sub    esp,0xc
c002902d:	ba 28 d2 02 c0       	mov    edx,0xc002d228
c0029032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029036:	89 10                	mov    DWORD PTR [eax],edx
c0029038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903c:	83 ec 0c             	sub    esp,0xc
c002903f:	50                   	push   eax
c0029040:	e8 2b b8 fe ff       	call   c0014870 <FPU::~FPU()>
c0029045:	83 c4 10             	add    esp,0x10
c0029048:	90                   	nop
c0029049:	83 c4 0c             	add    esp,0xc
c002904c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002904e <x87::~x87()>:
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	83 ec 0c             	sub    esp,0xc
c0029054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029058:	e8 cd ff ff ff       	call   c002902a <x87::~x87()>
c002905d:	83 c4 10             	add    esp,0x10
c0029060:	83 ec 08             	sub    esp,0x8
c0029063:	68 58 01 00 00       	push   0x158
c0029068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906c:	e8 c1 9d fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c0029071:	83 c4 10             	add    esp,0x10
c0029074:	83 c4 0c             	add    esp,0xc
c0029077:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029078 <IOAPIC::~IOAPIC()>:
c0029078:	83 ec 0c             	sub    esp,0xc
c002907b:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0029080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029084:	89 10                	mov    DWORD PTR [eax],edx
c0029086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908a:	83 ec 0c             	sub    esp,0xc
c002908d:	50                   	push   eax
c002908e:	e8 77 b1 fe ff       	call   c001420a <Device::~Device()>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	90                   	nop
c0029097:	83 c4 0c             	add    esp,0xc
c002909a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002909c <IOAPIC::~IOAPIC()>:
c002909c:	83 ec 0c             	sub    esp,0xc
c002909f:	83 ec 0c             	sub    esp,0xc
c00290a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a6:	e8 cd ff ff ff       	call   c0029078 <IOAPIC::~IOAPIC()>
c00290ab:	83 c4 10             	add    esp,0x10
c00290ae:	83 ec 08             	sub    esp,0x8
c00290b1:	68 68 01 00 00       	push   0x168
c00290b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ba:	e8 73 9d fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00290bf:	83 c4 10             	add    esp,0x10
c00290c2:	83 c4 0c             	add    esp,0xc
c00290c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290c6 <APIC::~APIC()>:
c00290c6:	83 ec 0c             	sub    esp,0xc
c00290c9:	ba 38 d3 02 c0       	mov    edx,0xc002d338
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	89 10                	mov    DWORD PTR [eax],edx
c00290d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d8:	83 ec 0c             	sub    esp,0xc
c00290db:	50                   	push   eax
c00290dc:	e8 59 bc fe ff       	call   c0014d3a <InterruptController::~InterruptController()>
c00290e1:	83 c4 10             	add    esp,0x10
c00290e4:	90                   	nop
c00290e5:	83 c4 0c             	add    esp,0xc
c00290e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290ea <APIC::~APIC()>:
c00290ea:	83 ec 0c             	sub    esp,0xc
c00290ed:	83 ec 0c             	sub    esp,0xc
c00290f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f4:	e8 cd ff ff ff       	call   c00290c6 <APIC::~APIC()>
c00290f9:	83 c4 10             	add    esp,0x10
c00290fc:	83 ec 08             	sub    esp,0x8
c00290ff:	68 58 21 00 00       	push   0x2158
c0029104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029108:	e8 25 9d fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	83 c4 0c             	add    esp,0xc
c0029113:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029114 <PIC::~PIC()>:
c0029114:	83 ec 0c             	sub    esp,0xc
c0029117:	ba d0 d3 02 c0       	mov    edx,0xc002d3d0
c002911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029120:	89 10                	mov    DWORD PTR [eax],edx
c0029122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029126:	83 ec 0c             	sub    esp,0xc
c0029129:	50                   	push   eax
c002912a:	e8 0b bc fe ff       	call   c0014d3a <InterruptController::~InterruptController()>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	90                   	nop
c0029133:	83 c4 0c             	add    esp,0xc
c0029136:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029138 <PIC::~PIC()>:
c0029138:	83 ec 0c             	sub    esp,0xc
c002913b:	83 ec 0c             	sub    esp,0xc
c002913e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029142:	e8 cd ff ff ff       	call   c0029114 <PIC::~PIC()>
c0029147:	83 c4 10             	add    esp,0x10
c002914a:	83 ec 08             	sub    esp,0x8
c002914d:	68 58 21 00 00       	push   0x2158
c0029152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029156:	e8 d7 9c fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c002915b:	83 c4 10             	add    esp,0x10
c002915e:	83 c4 0c             	add    esp,0xc
c0029161:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029162 <APICTimer::~APICTimer()>:
c0029162:	83 ec 0c             	sub    esp,0xc
c0029165:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c002916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916e:	89 10                	mov    DWORD PTR [eax],edx
c0029170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029174:	83 ec 0c             	sub    esp,0xc
c0029177:	50                   	push   eax
c0029178:	e8 09 db fe ff       	call   c0016c86 <Timer::~Timer()>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	90                   	nop
c0029181:	83 c4 0c             	add    esp,0xc
c0029184:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029186 <APICTimer::~APICTimer()>:
c0029186:	83 ec 0c             	sub    esp,0xc
c0029189:	83 ec 0c             	sub    esp,0xc
c002918c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029190:	e8 cd ff ff ff       	call   c0029162 <APICTimer::~APICTimer()>
c0029195:	83 c4 10             	add    esp,0x10
c0029198:	83 ec 08             	sub    esp,0x8
c002919b:	68 60 01 00 00       	push   0x160
c00291a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a4:	e8 89 9c fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00291a9:	83 c4 10             	add    esp,0x10
c00291ac:	83 c4 0c             	add    esp,0xc
c00291af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291b0 <PIT::~PIT()>:
c00291b0:	83 ec 0c             	sub    esp,0xc
c00291b3:	ba 74 d4 02 c0       	mov    edx,0xc002d474
c00291b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bc:	89 10                	mov    DWORD PTR [eax],edx
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	83 ec 0c             	sub    esp,0xc
c00291c5:	50                   	push   eax
c00291c6:	e8 bb da fe ff       	call   c0016c86 <Timer::~Timer()>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	90                   	nop
c00291cf:	83 c4 0c             	add    esp,0xc
c00291d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291d4 <PIT::~PIT()>:
c00291d4:	83 ec 0c             	sub    esp,0xc
c00291d7:	83 ec 0c             	sub    esp,0xc
c00291da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291de:	e8 cd ff ff ff       	call   c00291b0 <PIT::~PIT()>
c00291e3:	83 c4 10             	add    esp,0x10
c00291e6:	83 ec 08             	sub    esp,0x8
c00291e9:	68 5c 01 00 00       	push   0x15c
c00291ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f2:	e8 3b 9c fe ff       	call   c0012e32 <operator delete(void*, unsigned long)>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	83 c4 0c             	add    esp,0xc
c00291fd:	c3                   	ret    
