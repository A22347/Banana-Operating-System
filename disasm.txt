
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 8e 02 00       	call   c0028ea8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3e 9b 02 c0       	mov    ebx,0xc0029b3e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 4c 9b 02 c0    	cmp    ebx,0xc0029b4c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 e5 02 c0       	mov    eax,0xc002e598
c0000049:	3d 98 e5 02 c0       	cmp    eax,0xc002e598
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 e5 02 c0       	push   0xc002e598
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 e5 02 c0       	mov    eax,0xc002e598
c0000075:	2d 98 e5 02 c0       	sub    eax,0xc002e598
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 e5 02 c0       	push   0xc002e598
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 eb 02 c0 00 	cmp    BYTE PTR ds:0xc002ebc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 54 9b 02 c0       	mov    ebx,0xc0029b54
c00000bb:	81 eb 50 9b 02 c0    	sub    ebx,0xc0029b50
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 50 9b 02 c0       	mov    esi,0xc0029b50
c00000ca:	a1 cc eb 02 c0       	mov    eax,ds:0xc002ebcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc eb 02 c0       	mov    ds:0xc002ebcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc eb 02 c0       	mov    eax,ds:0xc002ebcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 e5 02 c0       	push   0xc002e598
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 eb 02 c0       	push   0xc002ebd0
c000012c:	68 98 e5 02 c0       	push   0xc002e598
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 c5 d5 01 00       	call   c001d968 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f6 22 01 00       	call   c00126b1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 a3 d5 01 00       	call   c001d968 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 4b da 01 00       	call   c001de2f <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 a9 e0 01 00       	call   c001e496 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 f0 02 c0 	lgdtd  ds:0xc002f010
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 07 40 01 00       	call   c00145e9 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 eb 02 c0       	mov    ds:0xc002ebe8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002ebe8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec00
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13fc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13fc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec2c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec3c
c0000e38:	c7 42 0c 34 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ec34
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c ec 02 c0    	mov    DWORD PTR ds:0xc002ec3c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c ec 02 c0    	mov    DWORD PTR ds:0xc002ec2c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 ec 02 c0 02 	test   BYTE PTR ds:0xc002ec00,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec00
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13fc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd13fc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 ec 02 c0 	lea    edx,[eax*8-0x3ffd13cc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec40
c00011ba:	81 fb 34 ec 02 c0    	cmp    ebx,0xc002ec34
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 ec 02 c0       	cmp    eax,0xc002ec34
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec30,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c ec 02 c0       	mov    ds:0xc002ec3c,eax
c00011f6:	a3 40 ec 02 c0       	mov    ds:0xc002ec40,eax
c00011fb:	a3 30 ec 02 c0       	mov    ds:0xc002ec30,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec34
c0001209:	c7 40 0c 34 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ec34
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 ec 02 c0       	mov    ds:0xc002ec40,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec34
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 eb 02 c0 	lea    ebp,[edx*4-0x3ffd1408]
c000125a:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 ec 02 c0 	lea    ecx,[edx*4-0x3ffd1400]
c0001275:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd10cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 ec 02 c0 	lea    eax,[eax*8-0x3ffd13cc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c ec 02 c0    	mov    DWORD PTR ds:0xc002ec3c,ecx
c000132f:	89 0d 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,ecx
c0001335:	c7 41 08 34 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ec34
c000133c:	c7 41 0c 34 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ec34
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c ec 02 c0 	lea    edx,[ecx*8-0x3ffd13d4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c ec 02 c0 	lea    edx,[eax*4-0x3ffd13d4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd10cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c ec 02 c0    	mov    DWORD PTR ds:0xc002ec3c,edi
c0001402:	89 3d 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,edi
c0001408:	c7 47 08 34 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ec34
c000140f:	c7 47 0c 34 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ec34
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 ec 02 c0    	mov    DWORD PTR ds:0xc002ec30,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c ec 02 c0    	mov    DWORD PTR ds:0xc002ec2c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 ec 02 c0       	mov    edx,0xc002ec00
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec00,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef54
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef54,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 ef 02 c0    	mov    DWORD PTR ds:0xc002ef54,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec2c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c ec 02 c0    	mov    DWORD PTR ds:0xc002ec2c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec00,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c ef 02 c0    	push   DWORD PTR ds:0xc002ef5c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec00,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c ef 02 c0       	mov    eax,ds:0xc002ef5c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec2c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13fc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 ec 02 c0       	mov    eax,0xc002ec34
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c ef 02 c0       	cmp    eax,0xc002ef2c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef50
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef64
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef74
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd639c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 ec 02 c0       	mov    eax,ds:0xc002ec00
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 ec 02 c0       	mov    ds:0xc002ec00,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 ef 02 c0    	mov    DWORD PTR ds:0xc002ef44,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 ef 02 c0    	mov    DWORD PTR ds:0xc002ef48,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c ef 02 c0    	mov    DWORD PTR ds:0xc002ef4c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef54,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd940]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 f4 f3 01 00       	jmp    c0020fe6 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd940]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 25 f4 01 00       	jmp    c002102d <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd940]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 4d f4 01 00       	jmp    c0021074 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 fa 52 02 00       	call   c0027204 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6280]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6280]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba ec d0 02 c0       	mov    edx,0xc002d0ec
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 9d 02 c0       	mov    edx,0xc0029dac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 ef 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1060]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 ef 02 c0    	mov    ax,ds:0xc002ef80
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 ef 02 c0    	mov    ds:0xc002ef80,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 f7 40 02 00       	call   c0027204 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 9d 02 c0       	mov    eax,0xc0029db2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6300]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 9d 02 c0       	mov    eax,0xc0029dbb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6280]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 c2 2a 02 00       	call   c0027204 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 9c 02 c0       	mov    edx,0xc0029c90
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1060]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 ef 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1060],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 89 14 02 00       	call   c0027204 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 6f 14 02 00       	call   c0027204 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 9c 02 c0       	mov    eax,0xc0029cd7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 9c 02 c0       	mov    eax,0xc0029cd0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1060]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 9c 02 c0       	mov    esi,0xc0029cc0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 b2 fb 01 00       	call   c0027204 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 9d 02 c0       	mov    edx,0xc0029dc2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 9d 02 c0       	mov    edx,0xc0029dce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 9d 02 c0       	mov    edx,0xc0029de2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a100
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a100
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6200]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 06 05 02 00       	call   c0028cd7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 c9 04 02 00       	call   c0028cb9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 9d 04 02 00       	call   c0028cd7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 50 fb 01 00       	call   c00283dc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 d2 05 02 00       	call   c0028e70 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 17 04 02 00       	call   c0028cd7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 59 03 02 00       	call   c0028cd7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 26 03 02 00       	call   c0028cb9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 13 02 02 00       	call   c0028cd7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 db 01 02 00       	call   c0028cb9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a2 02 c0       	mov    eax,0xc002a200
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 e7 ff 01 00       	call   c0028cd7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ac ff 01 00       	call   c0028cb9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 bc fc 01 00       	call   c0028a6b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 3a f6 01 00       	call   c0028408 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 f6 fe 01 00       	call   c0028cdb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 e4 ff 01 00       	call   c0028dff <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ce f5 01 00       	call   c0028408 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 79 fe 01 00       	call   c0028cd5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 5a fe 01 00       	call   c0028cd9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 f0 ff 01 00       	call   c0028e90 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 9a fb 01 00       	call   c0028a6b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 18 f5 01 00       	call   c0028408 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 d4 fd 01 00       	call   c0028cdb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 c2 fe 01 00       	call   c0028dff <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ac f4 01 00       	call   c0028408 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 57 fd 01 00       	call   c0028cd5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 37 fd 01 00       	call   c0028cd9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 cc fe 01 00       	call   c0028e90 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 72 fc 01 00       	call   c0028cd7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 30 fc 01 00       	call   c0028cb9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 18 fc 01 00       	call   c0028cd7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 8a f9 01 00       	call   c0028a6b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 8c ec 01 00       	call   c0027d8b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ef f2 01 00       	call   c0028408 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 41 f9 01 00       	call   c0028a6b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 47 ec 01 00       	call   c0027d8b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 16 f9 01 00       	call   c0028a6b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 66 fb 01 00       	call   c0028cd5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 43 f2 01 00       	call   c00283dc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 c5 fc 01 00       	call   c0028e70 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 ec fa 01 00       	call   c0028cb9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 e7 f1 01 00       	call   c00283dc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 65 f8 01 00       	call   c0028a6b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 e8 f1 01 00       	call   c0028408 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 3a f8 01 00       	call   c0028a6b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 a1 f4 01 00       	call   c00286ec <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 20 eb 01 00       	call   c0027d8b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 80 e4 01 00       	call   c0027720 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 57 fb 01 00       	call   c0028dff <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 40 f1 01 00       	call   c0028408 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 27 fb 01 00       	call   c0028dff <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 99 ea 01 00       	call   c0027d8b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 d2 f9 01 00       	call   c0028cdb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ba f3 01 00       	call   c00286ec <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 40 ea 01 00       	call   c0027d8b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 2e fb 01 00       	call   c0028e90 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 00 f7 01 00       	call   c0028a6b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 57 f0 01 00       	call   c00283dc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 36 f9 01 00       	call   c0028cd7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 cf e9 01 00       	call   c0027d8b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 fb ef 01 00       	call   c00283dc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 9d fa 01 00       	call   c0028e90 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 4e f6 01 00       	call   c0028a6b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 cb ef 01 00       	call   c0028408 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 1e f6 01 00       	call   c0028a6b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 24 e9 01 00       	call   c0027d8b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 f4 f5 01 00       	call   c0028a6b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 46 f8 01 00       	call   c0028cd7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 1d ef 01 00       	call   c00283dc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 9f f9 01 00       	call   c0028e70 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 c6 f7 01 00       	call   c0028cb9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 c0 ee 01 00       	call   c00283dc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 3e f5 01 00       	call   c0028a6b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 c1 ee 01 00       	call   c0028408 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 13 f5 01 00       	call   c0028a6b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 7a f1 01 00       	call   c00286ec <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 f9 e7 01 00       	call   c0027d8b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 49 e1 01 00       	call   c0027720 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 20 f8 01 00       	call   c0028dff <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 09 ee 01 00       	call   c0028408 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 f0 f7 01 00       	call   c0028dff <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 62 e7 01 00       	call   c0027d8b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 9b f6 01 00       	call   c0028cdb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 82 f0 01 00       	call   c00286ec <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 01 e7 01 00       	call   c0027d8b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ef f7 01 00       	call   c0028e90 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 c1 f3 01 00       	call   c0028a6b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 18 ed 01 00       	call   c00283dc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 f7 f5 01 00       	call   c0028cd7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 90 e6 01 00       	call   c0027d8b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 bc ec 01 00       	call   c00283dc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 31 f3 01 00       	call   c0028a6b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 37 e6 01 00       	call   c0027d8b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 a6 02 c0       	mov    eax,0xc002a6c0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 a6 02 c0       	mov    eax,0xc002a6d4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ac f1 01 00       	call   c0028a6b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 2a eb 01 00       	call   c0028408 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 bc dd 01 00       	call   c0027720 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 93 f4 01 00       	call   c0028dff <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 7c ea 01 00       	call   c0028408 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 5f f4 01 00       	call   c0028dff <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 d1 e3 01 00       	call   c0027d8b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 31 f4 01 00       	call   c0028dff <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 20 ea 01 00       	call   c0028408 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 89 e3 01 00       	call   c0027d8b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 aa dc 01 00       	call   c0027720 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 81 f3 01 00       	call   c0028dff <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 6a e9 01 00       	call   c0028408 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 4d f3 01 00       	call   c0028dff <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 bf e2 01 00       	call   c0027d8b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 1f f3 01 00       	call   c0028dff <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 0e e9 01 00       	call   c0028408 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 77 e2 01 00       	call   c0027d8b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 55 e2 01 00       	call   c0027d8b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 31 db 01 00       	call   c0027720 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 08 f2 01 00       	call   c0028dff <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 f1 e7 01 00       	call   c0028408 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 d4 f1 01 00       	call   c0028dff <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 46 e1 01 00       	call   c0027d8b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 a6 f1 01 00       	call   c0028dff <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 8f e7 01 00       	call   c0028408 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 f8 e0 01 00       	call   c0027d8b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 58 f1 01 00       	call   c0028dff <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 41 e7 01 00       	call   c0028408 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 aa e0 01 00       	call   c0027d8b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 bf d9 01 00       	call   c0027720 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 96 f0 01 00       	call   c0028dff <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 7f e6 01 00       	call   c0028408 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 66 f0 01 00       	call   c0028dff <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 d8 df 01 00       	call   c0027d8b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 38 f0 01 00       	call   c0028dff <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 21 e6 01 00       	call   c0028408 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 8a df 01 00       	call   c0027d8b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ea ef 01 00       	call   c0028dff <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 d3 e5 01 00       	call   c0028408 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 3c df 01 00       	call   c0027d8b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 10 df 01 00       	call   c0027d8b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 6d e5 01 00       	call   c0028408 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 29 ee 01 00       	call   c0028cdb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 b8 de 01 00       	call   c0027d8b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 15 e5 01 00       	call   c0028408 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 d1 ed 01 00       	call   c0028cdb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 4b d7 01 00       	call   c0027720 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 22 ee 01 00       	call   c0028dff <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 0b e4 01 00       	call   c0028408 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ee ed 01 00       	call   c0028dff <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 60 dd 01 00       	call   c0027d8b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 c0 ed 01 00       	call   c0028dff <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 a9 e3 01 00       	call   c0028408 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 12 dd 01 00       	call   c0027d8b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 72 ed 01 00       	call   c0028dff <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 5b e3 01 00       	call   c0028408 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 c4 dc 01 00       	call   c0027d8b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 24 ed 01 00       	call   c0028dff <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 0d e3 01 00       	call   c0028408 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 76 dc 01 00       	call   c0027d8b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 d6 ec 01 00       	call   c0028dff <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 bf e2 01 00       	call   c0028408 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 28 dc 01 00       	call   c0027d8b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 2a d5 01 00       	call   c0027720 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 01 ec 01 00       	call   c0028dff <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ea e1 01 00       	call   c0028408 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 d1 eb 01 00       	call   c0028dff <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 43 db 01 00       	call   c0027d8b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 a3 eb 01 00       	call   c0028dff <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 8c e1 01 00       	call   c0028408 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 f5 da 01 00       	call   c0027d8b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 55 eb 01 00       	call   c0028dff <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 3e e1 01 00       	call   c0028408 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 a7 da 01 00       	call   c0027d8b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 07 eb 01 00       	call   c0028dff <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 f0 e0 01 00       	call   c0028408 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 59 da 01 00       	call   c0027d8b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 b9 ea 01 00       	call   c0028dff <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 a2 e0 01 00       	call   c0028408 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 0b da 01 00       	call   c0027d8b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 df d9 01 00       	call   c0027d8b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 3c e0 01 00       	call   c0028408 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 f8 e8 01 00       	call   c0028cdb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 87 d9 01 00       	call   c0027d8b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 e4 df 01 00       	call   c0028408 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 a0 e8 01 00       	call   c0028cdb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 2e d9 01 00       	call   c0027d8b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8b df 01 00       	call   c0028408 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 47 e8 01 00       	call   c0028cdb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 d5 d8 01 00       	call   c0027d8b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 32 df 01 00       	call   c0028408 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ee e7 01 00       	call   c0028cdb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 4c d1 01 00       	call   c0027720 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 23 e8 01 00       	call   c0028dff <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 0c de 01 00       	call   c0028408 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ef e7 01 00       	call   c0028dff <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 61 d7 01 00       	call   c0027d8b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 c1 e7 01 00       	call   c0028dff <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 aa dd 01 00       	call   c0028408 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 13 d7 01 00       	call   c0027d8b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 73 e7 01 00       	call   c0028dff <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 5c dd 01 00       	call   c0028408 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 c5 d6 01 00       	call   c0027d8b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 25 e7 01 00       	call   c0028dff <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 0e dd 01 00       	call   c0028408 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 77 d6 01 00       	call   c0027d8b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 d7 e6 01 00       	call   c0028dff <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 c0 dc 01 00       	call   c0028408 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 29 d6 01 00       	call   c0027d8b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 89 e6 01 00       	call   c0028dff <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 72 dc 01 00       	call   c0028408 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 d8 d5 01 00       	call   c0027d8b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 38 e6 01 00       	call   c0028dff <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 21 dc 01 00       	call   c0028408 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 8a d5 01 00       	call   c0027d8b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 84 ce 01 00       	call   c0027720 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 5b e5 01 00       	call   c0028dff <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 44 db 01 00       	call   c0028408 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 24 e5 01 00       	call   c0028dff <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 96 d4 01 00       	call   c0027d8b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 f6 e4 01 00       	call   c0028dff <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 df da 01 00       	call   c0028408 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 48 d4 01 00       	call   c0027d8b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 a8 e4 01 00       	call   c0028dff <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 91 da 01 00       	call   c0028408 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 fa d3 01 00       	call   c0027d8b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 5a e4 01 00       	call   c0028dff <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 43 da 01 00       	call   c0028408 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ac d3 01 00       	call   c0027d8b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 0c e4 01 00       	call   c0028dff <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 f5 d9 01 00       	call   c0028408 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 5e d3 01 00       	call   c0027d8b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 be e3 01 00       	call   c0028dff <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 a7 d9 01 00       	call   c0028408 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 0d d3 01 00       	call   c0027d8b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 6d e3 01 00       	call   c0028dff <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 56 d9 01 00       	call   c0028408 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 c5 d2 01 00       	call   c0027d8b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 9e d2 01 00       	call   c0027d8b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 fc d8 01 00       	call   c0028408 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 b8 e1 01 00       	call   c0028cdb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 47 d2 01 00       	call   c0027d8b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 a5 d8 01 00       	call   c0028408 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 61 e1 01 00       	call   c0028cdb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ef d1 01 00       	call   c0027d8b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 4d d8 01 00       	call   c0028408 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 09 e1 01 00       	call   c0028cdb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 97 d1 01 00       	call   c0027d8b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 f5 d7 01 00       	call   c0028408 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 b1 e0 01 00       	call   c0028cdb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 3f d1 01 00       	call   c0027d8b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 9d d7 01 00       	call   c0028408 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 59 e0 01 00       	call   c0028cdb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 ed d0 01 00       	call   c0027d8b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 4b d7 01 00       	call   c0028408 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 07 e0 01 00       	call   c0028cdb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 1b c9 01 00       	call   c0027720 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 f2 df 01 00       	call   c0028dff <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 db d5 01 00       	call   c0028408 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 c2 df 01 00       	call   c0028dff <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 34 cf 01 00       	call   c0027d8b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 68 df 01 00       	call   c0028dff <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 51 d5 01 00       	call   c0028408 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 bc ce 01 00       	call   c0027d8b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 09 df 01 00       	call   c0028dff <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 f2 d4 01 00       	call   c0028408 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 5d ce 01 00       	call   c0027d8b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 aa de 01 00       	call   c0028dff <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 93 d4 01 00       	call   c0028408 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 fe cd 01 00       	call   c0027d8b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 4b de 01 00       	call   c0028dff <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 34 d4 01 00       	call   c0028408 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 9f cd 01 00       	call   c0027d8b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 ec dd 01 00       	call   c0028dff <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 d5 d3 01 00       	call   c0028408 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 40 cd 01 00       	call   c0027d8b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 8d dd 01 00       	call   c0028dff <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 76 d3 01 00       	call   c0028408 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 e1 cc 01 00       	call   c0027d8b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 2e dd 01 00       	call   c0028dff <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 17 d3 01 00       	call   c0028408 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 82 cc 01 00       	call   c0027d8b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 cf dc 01 00       	call   c0028dff <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 b8 d2 01 00       	call   c0028408 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 23 cc 01 00       	call   c0027d8b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 2d c5 01 00       	call   c0027720 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 04 dc 01 00       	call   c0028dff <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 ed d1 01 00       	call   c0028408 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 d4 db 01 00       	call   c0028dff <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 46 cb 01 00       	call   c0027d8b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 79 db 01 00       	call   c0028dff <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 62 d1 01 00       	call   c0028408 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 cd ca 01 00       	call   c0027d8b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 19 db 01 00       	call   c0028dff <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 02 d1 01 00       	call   c0028408 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 6d ca 01 00       	call   c0027d8b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 b9 da 01 00       	call   c0028dff <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 a2 d0 01 00       	call   c0028408 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 0d ca 01 00       	call   c0027d8b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 59 da 01 00       	call   c0028dff <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 42 d0 01 00       	call   c0028408 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ad c9 01 00       	call   c0027d8b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 f9 d9 01 00       	call   c0028dff <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 e2 cf 01 00       	call   c0028408 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 4d c9 01 00       	call   c0027d8b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 99 d9 01 00       	call   c0028dff <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 82 cf 01 00       	call   c0028408 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 ed c8 01 00       	call   c0027d8b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 39 d9 01 00       	call   c0028dff <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 22 cf 01 00       	call   c0028408 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 8d c8 01 00       	call   c0027d8b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 d9 d8 01 00       	call   c0028dff <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 c2 ce 01 00       	call   c0028408 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 2d c8 01 00       	call   c0027d8b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 d2 c7 01 00       	call   c0027d8b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 2f ce 01 00       	call   c0028408 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 eb d6 01 00       	call   c0028cdb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 75 c7 01 00       	call   c0027d8b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 d2 cd 01 00       	call   c0028408 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 8e d6 01 00       	call   c0028cdb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 18 c7 01 00       	call   c0027d8b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 75 cd 01 00       	call   c0028408 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 31 d6 01 00       	call   c0028cdb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 bb c6 01 00       	call   c0027d8b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 18 cd 01 00       	call   c0028408 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 d4 d5 01 00       	call   c0028cdb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 5e c6 01 00       	call   c0027d8b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 bb cc 01 00       	call   c0028408 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 77 d5 01 00       	call   c0028cdb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 01 c6 01 00       	call   c0027d8b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 5e cc 01 00       	call   c0028408 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 1a d5 01 00       	call   c0028cdb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 a4 c5 01 00       	call   c0027d8b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 01 cc 01 00       	call   c0028408 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 bd d4 01 00       	call   c0028cdb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 47 c5 01 00       	call   c0027d8b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 a4 cb 01 00       	call   c0028408 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 60 d4 01 00       	call   c0028cdb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 5c cb 01 00       	call   c0028408 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 d4 d5 01 00       	jmp    c0028e90 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 3e d2 01 00       	call   c0028cd7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 fc d1 01 00       	call   c0028cb9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 93 cf 01 00       	call   c0028a6b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 94 c2 01 00       	call   c0027d8b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 63 cf 01 00       	call   c0028a6b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ca cb 01 00       	call   c00286ec <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 69 d1 01 00       	call   c0028cb9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 6c d1 01 00       	call   c0028cd7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 3f d1 01 00       	call   c0028cd7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 38 cb 01 00       	call   c00286ec <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 c2 d2 01 00       	call   c0028e90 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 9d d2 01 00       	call   c0028e90 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 6f ce 01 00       	call   c0028a6b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 c6 c7 01 00       	call   c00283dc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 a5 d0 01 00       	call   c0028cd7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 3e c1 01 00       	call   c0027d8b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 62 c7 01 00       	call   c00283dc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 04 d2 01 00       	call   c0028e90 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 3c ca 01 00       	call   c00286ec <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 b9 c0 01 00       	call   c0027d8b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 e5 cc 01 00       	call   c0028a6b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 e5 bf 01 00       	call   c0027d8b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 c5 bf 01 00       	call   c0027d8b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 95 cc 01 00       	call   c0028a6b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 e5 ce 01 00       	call   c0028cd5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 c4 c5 01 00       	call   c00283dc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 46 d0 01 00       	call   c0028e70 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 6d ce 01 00       	call   c0028cb9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 6b c5 01 00       	call   c00283dc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 e9 cb 01 00       	call   c0028a6b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 6c c5 01 00       	call   c0028408 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 be cb 01 00       	call   c0028a6b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 25 c8 01 00       	call   c00286ec <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 a4 be 01 00       	call   c0027d8b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 6e cb 01 00       	call   c0028a6b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ba cd 01 00       	call   c0028cd7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 af c4 01 00       	call   c0028408 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 81 c4 01 00       	call   c0028408 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ba ca 01 00       	call   c0028a6b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 1e c7 01 00       	call   c00286ec <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 e6 c6 01 00       	call   c00286ec <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 65 bd 01 00       	call   c0027d8b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 52 ce 01 00       	call   c0028e90 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 24 ca 01 00       	call   c0028a6b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 7b c3 01 00       	call   c00283dc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 5a cc 01 00       	call   c0028cd7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 f2 bc 01 00       	call   c0027d8b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 16 c3 01 00       	call   c00283dc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 b8 cd 01 00       	call   c0028e90 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 79 cb 01 00       	call   c0028cd7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 37 cb 01 00       	call   c0028cb9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ce c8 01 00       	call   c0028a6b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 cf bb 01 00       	call   c0027d8b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 9e c8 01 00       	call   c0028a6b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 05 c5 01 00       	call   c00286ec <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 a4 ca 01 00       	call   c0028cb9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 a7 ca 01 00       	call   c0028cd7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 7a ca 01 00       	call   c0028cd7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 73 c4 01 00       	call   c00286ec <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 fd cb 01 00       	call   c0028e90 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 d8 cb 01 00       	call   c0028e90 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 aa c7 01 00       	call   c0028a6b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 01 c1 01 00       	call   c00283dc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 e0 c9 01 00       	call   c0028cd7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 79 ba 01 00       	call   c0027d8b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 9d c0 01 00       	call   c00283dc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 3f cb 01 00       	call   c0028e90 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 77 c3 01 00       	call   c00286ec <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 f4 b9 01 00       	call   c0027d8b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 1f c6 01 00       	call   c0028a6b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 1f b9 01 00       	call   c0027d8b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ff b8 01 00       	call   c0027d8b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 cf c5 01 00       	call   c0028a6b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 1f c8 01 00       	call   c0028cd5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 fd be 01 00       	call   c00283dc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 7f c9 01 00       	call   c0028e70 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 a6 c7 01 00       	call   c0028cb9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 a3 be 01 00       	call   c00283dc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 21 c5 01 00       	call   c0028a6b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 a4 be 01 00       	call   c0028408 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 f6 c4 01 00       	call   c0028a6b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 5d c1 01 00       	call   c00286ec <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 dc b7 01 00       	call   c0027d8b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 a6 c4 01 00       	call   c0028a6b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 f2 c6 01 00       	call   c0028cd7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 e7 bd 01 00       	call   c0028408 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 b9 bd 01 00       	call   c0028408 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 f0 c3 01 00       	call   c0028a6b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 54 c0 01 00       	call   c00286ec <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 21 c0 01 00       	call   c00286ec <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 a0 b6 01 00       	call   c0027d8b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 8d c7 01 00       	call   c0028e90 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 5f c3 01 00       	call   c0028a6b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 b6 bc 01 00       	call   c00283dc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 95 c5 01 00       	call   c0028cd7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 2d b6 01 00       	call   c0027d8b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 51 bc 01 00       	call   c00283dc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 f3 c6 01 00       	call   c0028e90 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 b4 c4 01 00       	call   c0028cd7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 72 c4 01 00       	call   c0028cb9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 09 c2 01 00       	call   c0028a6b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 0a b5 01 00       	call   c0027d8b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 d9 c1 01 00       	call   c0028a6b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 40 be 01 00       	call   c00286ec <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 df c3 01 00       	call   c0028cb9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 e2 c3 01 00       	call   c0028cd7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 b5 c3 01 00       	call   c0028cd7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ae bd 01 00       	call   c00286ec <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 38 c5 01 00       	call   c0028e90 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 13 c5 01 00       	call   c0028e90 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 e5 c0 01 00       	call   c0028a6b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 3c ba 01 00       	call   c00283dc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 1b c3 01 00       	call   c0028cd7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 b4 b3 01 00       	call   c0027d8b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 d8 b9 01 00       	call   c00283dc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 7a c4 01 00       	call   c0028e90 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 b2 bc 01 00       	call   c00286ec <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 2f b3 01 00       	call   c0027d8b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 5a bf 01 00       	call   c0028a6b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 5a b2 01 00       	call   c0027d8b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 3a b2 01 00       	call   c0027d8b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 0a bf 01 00       	call   c0028a6b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 5a c1 01 00       	call   c0028cd5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 38 b8 01 00       	call   c00283dc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ba c2 01 00       	call   c0028e70 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 e1 c0 01 00       	call   c0028cb9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 de b7 01 00       	call   c00283dc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 5c be 01 00       	call   c0028a6b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 df b7 01 00       	call   c0028408 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 31 be 01 00       	call   c0028a6b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 98 ba 01 00       	call   c00286ec <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 17 b1 01 00       	call   c0027d8b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 e1 bd 01 00       	call   c0028a6b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 2d c0 01 00       	call   c0028cd7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 22 b7 01 00       	call   c0028408 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 f4 b6 01 00       	call   c0028408 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 2b bd 01 00       	call   c0028a6b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 8f b9 01 00       	call   c00286ec <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 5c b9 01 00       	call   c00286ec <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 db af 01 00       	call   c0027d8b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 c8 c0 01 00       	call   c0028e90 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 9a bc 01 00       	call   c0028a6b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 f1 b5 01 00       	call   c00283dc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 d0 be 01 00       	call   c0028cd7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 68 af 01 00       	call   c0027d8b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 8c b5 01 00       	call   c00283dc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 2e c0 01 00       	call   c0028e90 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ef bd 01 00       	call   c0028cd7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ad bd 01 00       	call   c0028cb9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 44 bb 01 00       	call   c0028a6b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 45 ae 01 00       	call   c0027d8b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 14 bb 01 00       	call   c0028a6b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 7b b7 01 00       	call   c00286ec <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 1a bd 01 00       	call   c0028cb9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 1d bd 01 00       	call   c0028cd7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 f0 bc 01 00       	call   c0028cd7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 e9 b6 01 00       	call   c00286ec <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 73 be 01 00       	call   c0028e90 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 4e be 01 00       	call   c0028e90 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 20 ba 01 00       	call   c0028a6b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 77 b3 01 00       	call   c00283dc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 56 bc 01 00       	call   c0028cd7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ef ac 01 00       	call   c0027d8b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 13 b3 01 00       	call   c00283dc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 b5 bd 01 00       	call   c0028e90 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 ed b5 01 00       	call   c00286ec <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 6a ac 01 00       	call   c0027d8b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 95 b8 01 00       	call   c0028a6b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 95 ab 01 00       	call   c0027d8b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 75 ab 01 00       	call   c0027d8b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 45 b8 01 00       	call   c0028a6b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 95 ba 01 00       	call   c0028cd5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 73 b1 01 00       	call   c00283dc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 f5 bb 01 00       	call   c0028e70 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 1c ba 01 00       	call   c0028cb9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 19 b1 01 00       	call   c00283dc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 97 b7 01 00       	call   c0028a6b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 1a b1 01 00       	call   c0028408 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 6c b7 01 00       	call   c0028a6b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 d3 b3 01 00       	call   c00286ec <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 52 aa 01 00       	call   c0027d8b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 1c b7 01 00       	call   c0028a6b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 68 b9 01 00       	call   c0028cd7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 5d b0 01 00       	call   c0028408 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 2f b0 01 00       	call   c0028408 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 66 b6 01 00       	call   c0028a6b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ca b2 01 00       	call   c00286ec <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 97 b2 01 00       	call   c00286ec <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 16 a9 01 00       	call   c0027d8b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 03 ba 01 00       	call   c0028e90 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 d5 b5 01 00       	call   c0028a6b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 2c af 01 00       	call   c00283dc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 0b b8 01 00       	call   c0028cd7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 a3 a8 01 00       	call   c0027d8b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 c7 ae 01 00       	call   c00283dc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 69 b9 01 00       	call   c0028e90 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 27 b7 01 00       	call   c0028cd7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 e5 b6 01 00       	call   c0028cb9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 7c b4 01 00       	call   c0028a6b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 7d a7 01 00       	call   c0027d8b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 4c b4 01 00       	call   c0028a6b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 b3 b0 01 00       	call   c00286ec <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 52 b6 01 00       	call   c0028cb9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 55 b6 01 00       	call   c0028cd7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 28 b6 01 00       	call   c0028cd7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 21 b0 01 00       	call   c00286ec <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 ab b7 01 00       	call   c0028e90 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 82 b7 01 00       	call   c0028e90 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 54 b3 01 00       	call   c0028a6b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 ab ac 01 00       	call   c00283dc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 8a b5 01 00       	call   c0028cd7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 23 a6 01 00       	call   c0027d8b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 4b ac 01 00       	call   c00283dc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 ed b6 01 00       	call   c0028e90 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 26 af 01 00       	call   c00286ec <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 a3 a5 01 00       	call   c0027d8b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 cf b1 01 00       	call   c0028a6b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 cf a4 01 00       	call   c0027d8b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 af a4 01 00       	call   c0027d8b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 7f b1 01 00       	call   c0028a6b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 b3 b3 01 00       	call   c0028cb9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 aa aa 01 00       	call   c00283dc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 2c b5 01 00       	call   c0028e70 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 53 b3 01 00       	call   c0028cb9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 4d aa 01 00       	call   c00283dc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 cb b0 01 00       	call   c0028a6b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 4e aa 01 00       	call   c0028408 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 a0 b0 01 00       	call   c0028a6b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 07 ad 01 00       	call   c00286ec <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 86 a3 01 00       	call   c0027d8b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 50 b0 01 00       	call   c0028a6b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 9c b2 01 00       	call   c0028cd7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 91 a9 01 00       	call   c0028408 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 63 a9 01 00       	call   c0028408 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 a7 af 01 00       	call   c0028a6b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 0e ac 01 00       	call   c00286ec <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 f7 a8 01 00       	call   c0028408 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 b3 b1 01 00       	call   c0028cdb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 a6 ab 01 00       	call   c00286ec <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 25 a2 01 00       	call   c0027d8b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 12 b3 01 00       	call   c0028e90 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 e4 ae 01 00       	call   c0028a6b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 3b a8 01 00       	call   c00283dc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 1a b1 01 00       	call   c0028cd7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 b2 a1 01 00       	call   c0027d8b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 da a7 01 00       	call   c00283dc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 7c b2 01 00       	call   c0028e90 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd589c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 2f af 01 00       	call   c0028cd7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 ed ae 01 00       	call   c0028cb9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d9 ae 01 00       	call   c0028cd7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 4b ac 01 00       	call   c0028a6b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 c9 a5 01 00       	call   c0028408 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 1b ac 01 00       	call   c0028a6b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 21 9f 01 00       	call   c0027d8b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 f0 ab 01 00       	call   c0028a6b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 40 ae 01 00       	call   c0028cd5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 21 a5 01 00       	call   c00283dc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 a3 af 01 00       	call   c0028e70 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ca ad 01 00       	call   c0028cb9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 c9 a4 01 00       	call   c00283dc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 47 ab 01 00       	call   c0028a6b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ca a4 01 00       	call   c0028408 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 1c ab 01 00       	call   c0028a6b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 83 a7 01 00       	call   c00286ec <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 02 9e 01 00       	call   c0027d8b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 2a a7 01 00       	call   c00286ec <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 b0 9d 01 00       	call   c0027d8b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 9e ae 01 00       	call   c0028e90 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 70 aa 01 00       	call   c0028a6b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 c7 a3 01 00       	call   c00283dc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 a6 ac 01 00       	call   c0028cd7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 3f 9d 01 00       	call   c0027d8b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 6b a3 01 00       	call   c00283dc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 0d ae 01 00       	call   c0028e90 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ba a9 01 00       	call   c0028a6b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 37 a3 01 00       	call   c0028408 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 88 a9 01 00       	call   c0028a6b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 8e 9c 01 00       	call   c0027d8b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 5e a9 01 00       	call   c0028a6b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 b2 ab 01 00       	call   c0028cd9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 8b a2 01 00       	call   c00283dc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 0d ad 01 00       	call   c0028e70 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 34 ab 01 00       	call   c0028cb9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 32 a2 01 00       	call   c00283dc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 b0 a8 01 00       	call   c0028a6b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 33 a2 01 00       	call   c0028408 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 85 a8 01 00       	call   c0028a6b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 ec a4 01 00       	call   c00286ec <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 6b 9b 01 00       	call   c0027d8b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 87 a4 01 00       	call   c00286ec <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 06 9b 01 00       	call   c0027d8b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 f4 ab 01 00       	call   c0028e90 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 c6 a7 01 00       	call   c0028a6b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 1d a1 01 00       	call   c00283dc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 fc a9 01 00       	call   c0028cd7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 95 9a 01 00       	call   c0027d8b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 c1 a0 01 00       	call   c00283dc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 32 a7 01 00       	call   c0028a6b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 38 9a 01 00       	call   c0027d8b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e a8 02 c0       	mov    eax,0xc002a87e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f a8 02 c0       	mov    eax,0xc002a88f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000e4e3:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032520,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c000e50d:	e8 aa fb 00 00       	call   c001e0bc <schedule()>
c000e512:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000e517:	48                   	dec    eax
c000e518:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 f1 02 c0       	mov    eax,ds:0xc002f170
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 a8 02 c0       	push   0xc002a8c6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 f0 02 c0       	mov    eax,0xc002f008
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf a8 02 c0       	push   0xc002a8cf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 04 72 02 c0       	mov    eax,0xc0027204
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 a8 02 c0       	push   0xc002a8d9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 38 6f 02 c0       	mov    eax,0xc0026f38
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 a8 02 c0       	push   0xc002a8e2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 04 73 02 c0       	mov    eax,0xc0027304
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec a8 02 c0       	push   0xc002a8ec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 84 70 02 c0       	mov    eax,0xc0027084
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 a8 02 c0       	push   0xc002a8f5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c f0 02 c0       	mov    eax,0xc002f00c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 a9 02 c0       	push   0xc002a902
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d f0 02 c0       	mov    eax,0xc002f00d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 29 58 00 00       	call   c0013e96 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c000e6b2:	68 0f a9 02 c0       	push   0xc002a90f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 c1 f5 00 00       	call   c001dc80 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 a4 f7 00 00       	call   c001de78 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 f6 e8 01 c0       	push   0xc001e8f6
c000e6dd:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c000e6e3:	e8 90 f7 00 00       	call   c001de78 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 08 25 03 c0       	mov    ds:0xc0032508,eax
c000e6f0:	c6 05 0d f0 02 c0 01 	mov    BYTE PTR ds:0xc002f00d,0x1
c000e6f7:	e8 31 06 01 00       	call   c001ed2d <Vm::initialise8086()>
c000e6fc:	e8 5d 45 00 00       	call   c0012c5e <Fs::initVFS()>
c000e701:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 f0 dd 00 00       	call   c001c50d <Sys::loadSyscalls()>
c000e71d:	e8 ae ba 00 00       	call   c001a1d0 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 1c a9 02 c0       	push   0xc002a91c
c000e72c:	68 25 a9 02 c0       	push   0xc002a925
c000e731:	e8 89 c9 00 00       	call   c001b0bf <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 10 50 00 00       	call   c001374e <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 07 57 00 00       	call   c0013e56 <Device::loadDriversForAll()>
c000e74f:	e8 c8 b5 00 00       	call   c0019d1c <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 2d a9 02 c0       	push   0xc002a92d
c000e763:	e8 75 ef 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 97 f1 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 3d fb 00 00       	call   c001e2bb <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 49 a9 02 c0       	push   0xc002a949
c000e793:	50                   	push   eax
c000e794:	e8 77 57 00 00       	call   c0013f10 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 21 f0 02 c0 04 	test   BYTE PTR ds:0xc002f021,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 99 85 01 00       	call   c0026ec6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 c4 a0 00 00       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 9d a0 00 00       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 7b a0 00 00       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 59 a0 00 00       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 20 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f020,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 67 9f 00 00       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 42 9f 00 00       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 03 84 01 00       	call   c0026e80 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 c0 83 01 00       	call   c0026e60 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 5e 9f 00 00       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 59 a9 02 c0       	push   0xc002a959
c000eaf9:	e8 d5 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 6c a9 02 c0       	push   0xc002a96c
c000eb1c:	e8 b2 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 7d a9 02 c0       	push   0xc002a97d
c000eb3f:	e8 8f 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 8e a9 02 c0       	push   0xc002a98e
c000eb62:	e8 6c 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 9f a9 02 c0       	push   0xc002a99f
c000eb85:	e8 49 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 b0 a9 02 c0       	push   0xc002a9b0
c000eba8:	e8 26 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 c1 a9 02 c0       	push   0xc002a9c1
c000ebcb:	e8 03 3d 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 d2 a9 02 c0       	push   0xc002a9d2
c000ebee:	e8 e0 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 e3 a9 02 c0       	push   0xc002a9e3
c000ec11:	e8 bd 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 f4 a9 02 c0       	push   0xc002a9f4
c000ec34:	e8 9a 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 05 aa 02 c0       	push   0xc002aa05
c000ec57:	e8 77 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 16 aa 02 c0       	push   0xc002aa16
c000ec7a:	e8 54 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 27 aa 02 c0       	push   0xc002aa27
c000ec9d:	e8 31 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 38 aa 02 c0       	push   0xc002aa38
c000ecc0:	e8 0e 3c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 49 aa 02 c0       	push   0xc002aa49
c000ece3:	e8 eb 3b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 5a aa 02 c0       	push   0xc002aa5a
c000ed06:	e8 c8 3b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6b aa 02 c0       	push   0xc002aa6b
c000ed29:	e8 a5 3b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 7c aa 02 c0       	push   0xc002aa7c
c000ed4c:	e8 82 3b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 8d aa 02 c0       	push   0xc002aa8d
c000ed6b:	e8 63 3b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 70 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c470
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 52 3b 00 00       	jmp    c00128d3 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 9e aa 02 c0       	push   0xc002aa9e
c000ee54:	e8 b0 b4 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 a4 aa 02 c0       	push   0xc002aaa4
c000ee8c:	e8 78 b4 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 20 f0 02 c0 04 	test   BYTE PTR ds:0xc002f020,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 40 df 02 c0 	sete   BYTE PTR ds:0xc002df40
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 69 8e 00 00       	call   c0017d68 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 fe 4d 00 00       	call   c0013d0c <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 a6 9b 00 00       	call   c0018ae4 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 bf 4d 00 00       	call   c0013d0c <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 4b 53 00 00       	call   c00142b4 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 8f 4d 00 00       	call   c0013d0c <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 fb ef 00 00       	call   c001df9a <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 aa aa 02 c0       	push   0xc002aaaa
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 e6 38 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 bb aa 02 c0       	push   0xc002aabb
c000f00a:	e8 fa b2 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 c8 aa 02 c0       	push   0xc002aac8
c000f01f:	e8 e5 b2 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 d2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aad2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 ce b2 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 0c ab 02 c0       	push   0xc002ab0c
c000f0d0:	e8 fe 37 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 12 f0 02 c0       	mov    ds:0xc002f012,eax
c000f111:	66 89 15 10 f0 02 c0 	mov    WORD PTR ds:0xc002f010,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000f228:	48                   	dec    eax
c000f229:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 91 9c 01 00       	call   c0028f10 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 88 9c 01 00       	call   c0028f10 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 18 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f018,0x7ff
c000f375:	a3 1a f0 02 c0       	mov    ds:0xc002f01a,eax
c000f37a:	0f 01 1d 18 f0 02 c0 	lidtd  ds:0xc002f018
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c000f66c:	e8 95 27 00 00       	call   c0011e06 <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 6f 17 00 00       	call   c0010dfe <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 a0 17 00 00       	call   c0010e3e <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d c0 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddc0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 c0 dd 02 c0       	mov    eax,ds:0xc002ddc0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 28 ab 02 c0       	push   0xc002ab28
c000f745:	e8 89 31 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 c0 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ddc0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c000f771:	8b 2d c0 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002ddc0
c000f777:	e8 18 04 00 00       	call   c000fb94 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 7b 25 00 00       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d c0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 58 ab 02 c0       	push   0xc002ab58
c000f7fd:	e8 07 ab 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 5d ab 02 c0       	push   0xc002ab5d
c000f813:	e8 f1 aa 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000f833:	48                   	dec    eax
c000f834:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c000f854:	e8 ad 25 00 00       	call   c0011e06 <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c000f86a:	e8 41 22 00 00       	call   c0011ab0 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 64 ab 02 c0       	push   0xc002ab64
c000f92b:	e8 a3 2f 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000f930:	e8 e1 08 00 00       	call   c0010216 <installVgaTextImplementation()>
c000f935:	0f b6 05 e0 dd 02 c0 	movzx  eax,BYTE PTR ds:0xc002dde0
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	84 c0                	test   al,al
c000f941:	74 48                	je     c000f98b <kernel_main+0xa5>
c000f943:	31 c9                	xor    ecx,ecx
c000f945:	be 06 00 00 00       	mov    esi,0x6
c000f94a:	bb 0d 00 00 00       	mov    ebx,0xd
c000f94f:	eb 20                	jmp    c000f971 <kernel_main+0x8b>
c000f951:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f954:	80 cc 0f             	or     ah,0xf
c000f957:	c1 e2 04             	shl    edx,0x4
c000f95a:	01 da                	add    edx,ebx
c000f95c:	43                   	inc    ebx
c000f95d:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f965:	41                   	inc    ecx
c000f966:	0f b6 81 e0 dd 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd2220]
c000f96d:	84 c0                	test   al,al
c000f96f:	74 1a                	je     c000f98b <kernel_main+0xa5>
c000f971:	3c 0d                	cmp    al,0xd
c000f973:	74 f0                	je     c000f965 <kernel_main+0x7f>
c000f975:	3c 0a                	cmp    al,0xa
c000f977:	75 d8                	jne    c000f951 <kernel_main+0x6b>
c000f979:	41                   	inc    ecx
c000f97a:	46                   	inc    esi
c000f97b:	0f b6 81 e0 dd 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd2220]
c000f982:	bb 0d 00 00 00       	mov    ebx,0xd
c000f987:	84 c0                	test   al,al
c000f989:	75 e6                	jne    c000f971 <kernel_main+0x8b>
c000f98b:	83 ec 0c             	sub    esp,0xc
c000f98e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f993:	a3 20 f0 02 c0       	mov    ds:0xc002f020,eax
c000f998:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f99d:	05 ff 0f 00 00       	add    eax,0xfff
c000f9a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9a7:	50                   	push   eax
c000f9a8:	e8 30 03 00 00       	call   c000fcdd <Phys::physicalMemorySetup(unsigned int)>
c000f9ad:	e8 da 1c 00 00       	call   c001168c <Virt::virtualMemorySetup()>
c000f9b2:	58                   	pop    eax
c000f9b3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9b7:	53                   	push   ebx
c000f9b8:	e8 1b 1f 00 00       	call   c00118d8 <VAS::VAS()>
c000f9bd:	89 1d 70 f1 02 c0    	mov    DWORD PTR ds:0xc002f170,ebx
c000f9c3:	e8 58 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9c8:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9cf:	e8 b8 fe ff ff       	call   c000f88c <malloc>
c000f9d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d7:	89 c6                	mov    esi,eax
c000f9d9:	e8 a6 ed ff ff       	call   c000e784 <Computer::Computer()>
c000f9de:	6a 00                	push   0x0
c000f9e0:	89 35 08 f0 02 c0    	mov    DWORD PTR ds:0xc002f008,esi
c000f9e6:	6a 00                	push   0x0
c000f9e8:	6a 00                	push   0x0
c000f9ea:	56                   	push   esi
c000f9eb:	e8 e4 f4 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000f9f0:	83 c4 14             	add    esp,0x14
c000f9f3:	53                   	push   ebx
c000f9f4:	e8 8f 21 00 00       	call   c0011b88 <VAS::~VAS()>
c000f9f9:	83 c4 30             	add    esp,0x30
c000f9fc:	5b                   	pop    ebx
c000f9fd:	5e                   	pop    esi
c000f9fe:	5f                   	pop    edi
c000f9ff:	c3                   	ret    

c000fa00 <Phys::allocateDMA(unsigned long)>:
c000fa00:	55                   	push   ebp
c000fa01:	31 d2                	xor    edx,edx
c000fa03:	57                   	push   edi
c000fa04:	31 ed                	xor    ebp,ebp
c000fa06:	56                   	push   esi
c000fa07:	31 c9                	xor    ecx,ecx
c000fa09:	53                   	push   ebx
c000fa0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa0e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa14:	31 c0                	xor    eax,eax
c000fa16:	c1 ee 0c             	shr    esi,0xc
c000fa19:	eb 17                	jmp    c000fa32 <Phys::allocateDMA(unsigned long)+0x32>
c000fa1b:	85 c9                	test   ecx,ecx
c000fa1d:	75 04                	jne    c000fa23 <Phys::allocateDMA(unsigned long)+0x23>
c000fa1f:	89 d5                	mov    ebp,edx
c000fa21:	89 d0                	mov    eax,edx
c000fa23:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa26:	39 de                	cmp    esi,ebx
c000fa28:	74 20                	je     c000fa4a <Phys::allocateDMA(unsigned long)+0x4a>
c000fa2a:	42                   	inc    edx
c000fa2b:	89 d9                	mov    ecx,ebx
c000fa2d:	83 fa 2f             	cmp    edx,0x2f
c000fa30:	7f 11                	jg     c000fa43 <Phys::allocateDMA(unsigned long)+0x43>
c000fa32:	80 ba 60 f0 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0fa0],0x0
c000fa39:	74 e0                	je     c000fa1b <Phys::allocateDMA(unsigned long)+0x1b>
c000fa3b:	31 c9                	xor    ecx,ecx
c000fa3d:	42                   	inc    edx
c000fa3e:	83 fa 2f             	cmp    edx,0x2f
c000fa41:	7e ef                	jle    c000fa32 <Phys::allocateDMA(unsigned long)+0x32>
c000fa43:	5b                   	pop    ebx
c000fa44:	31 c0                	xor    eax,eax
c000fa46:	5e                   	pop    esi
c000fa47:	5f                   	pop    edi
c000fa48:	5d                   	pop    ebp
c000fa49:	c3                   	ret    
c000fa4a:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa4d:	89 d7                	mov    edi,edx
c000fa4f:	4f                   	dec    edi
c000fa50:	79 03                	jns    c000fa55 <Phys::allocateDMA(unsigned long)+0x55>
c000fa52:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa55:	c1 ff 04             	sar    edi,0x4
c000fa58:	89 c2                	mov    edx,eax
c000fa5a:	c1 fa 04             	sar    edx,0x4
c000fa5d:	39 fa                	cmp    edx,edi
c000fa5f:	75 2f                	jne    c000fa90 <Phys::allocateDMA(unsigned long)+0x90>
c000fa61:	85 db                	test   ebx,ebx
c000fa63:	74 1a                	je     c000fa7f <Phys::allocateDMA(unsigned long)+0x7f>
c000fa65:	be 60 f0 02 c0       	mov    esi,0xc002f060
c000fa6a:	8d 90 60 f0 02 c0    	lea    edx,[eax-0x3ffd0fa0]
c000fa70:	f7 d6                	not    esi
c000fa72:	29 c6                	sub    esi,eax
c000fa74:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa77:	42                   	inc    edx
c000fa78:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa7b:	39 d9                	cmp    ecx,ebx
c000fa7d:	7f f5                	jg     c000fa74 <Phys::allocateDMA(unsigned long)+0x74>
c000fa7f:	85 ff                	test   edi,edi
c000fa81:	74 13                	je     c000fa96 <Phys::allocateDMA(unsigned long)+0x96>
c000fa83:	5b                   	pop    ebx
c000fa84:	05 50 20 0c 00       	add    eax,0xc2050
c000fa89:	5e                   	pop    esi
c000fa8a:	c1 e0 0c             	shl    eax,0xc
c000fa8d:	5f                   	pop    edi
c000fa8e:	5d                   	pop    ebp
c000fa8f:	c3                   	ret    
c000fa90:	89 ea                	mov    edx,ebp
c000fa92:	31 c9                	xor    ecx,ecx
c000fa94:	eb a7                	jmp    c000fa3d <Phys::allocateDMA(unsigned long)+0x3d>
c000fa96:	5b                   	pop    ebx
c000fa97:	c1 e0 0c             	shl    eax,0xc
c000fa9a:	5e                   	pop    esi
c000fa9b:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000faa0:	5f                   	pop    edi
c000faa1:	5d                   	pop    ebp
c000faa2:	c3                   	ret    

c000faa3 <Phys::freeDMA(unsigned long, unsigned long)>:
c000faa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000faa7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000faab:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fab1:	c1 e9 0c             	shr    ecx,0xc
c000fab4:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fab9:	76 25                	jbe    c000fae0 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fabb:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fac0:	c1 e8 0c             	shr    eax,0xc
c000fac3:	8d 50 10             	lea    edx,[eax+0x10]
c000fac6:	85 c9                	test   ecx,ecx
c000fac8:	74 15                	je     c000fadf <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000faca:	8d 82 60 f0 02 c0    	lea    eax,[edx-0x3ffd0fa0]
c000fad0:	8d 94 11 60 f0 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0fa0]
c000fad7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fada:	40                   	inc    eax
c000fadb:	39 d0                	cmp    eax,edx
c000fadd:	75 f8                	jne    c000fad7 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fadf:	c3                   	ret    
c000fae0:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fae6:	c1 ea 0c             	shr    edx,0xc
c000fae9:	eb db                	jmp    c000fac6 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000faeb <Phys::setPageState(unsigned long, bool)>:
c000faeb:	56                   	push   esi
c000faec:	ba 01 00 00 00       	mov    edx,0x1
c000faf1:	53                   	push   ebx
c000faf2:	8b 35 24 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df24
c000faf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fafc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb00:	89 c8                	mov    eax,ecx
c000fb02:	83 e1 07             	and    ecx,0x7
c000fb05:	c1 e8 03             	shr    eax,0x3
c000fb08:	d3 e3                	shl    ebx,cl
c000fb0a:	01 c6                	add    esi,eax
c000fb0c:	d3 e2                	shl    edx,cl
c000fb0e:	f7 d2                	not    edx
c000fb10:	20 16                	and    BYTE PTR [esi],dl
c000fb12:	03 05 24 df 02 c0    	add    eax,DWORD PTR ds:0xc002df24
c000fb18:	08 18                	or     BYTE PTR [eax],bl
c000fb1a:	5b                   	pop    ebx
c000fb1b:	5e                   	pop    esi
c000fb1c:	c3                   	ret    

c000fb1d <Phys::getPageState(unsigned long)>:
c000fb1d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb21:	8b 15 24 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df24
c000fb27:	89 c8                	mov    eax,ecx
c000fb29:	83 e1 07             	and    ecx,0x7
c000fb2c:	c1 e8 03             	shr    eax,0x3
c000fb2f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb33:	d3 f8                	sar    eax,cl
c000fb35:	83 e0 01             	and    eax,0x1
c000fb38:	c3                   	ret    

c000fb39 <Phys::freePage(unsigned long)>:
c000fb39:	53                   	push   ebx
c000fb3a:	83 ec 08             	sub    esp,0x8
c000fb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb41:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fb46:	76 3a                	jbe    c000fb82 <Phys::freePage(unsigned long)+0x49>
c000fb48:	c1 e8 0c             	shr    eax,0xc
c000fb4b:	50                   	push   eax
c000fb4c:	89 c3                	mov    ebx,eax
c000fb4e:	e8 ca ff ff ff       	call   c000fb1d <Phys::getPageState(unsigned long)>
c000fb53:	5a                   	pop    edx
c000fb54:	84 c0                	test   al,al
c000fb56:	74 19                	je     c000fb71 <Phys::freePage(unsigned long)+0x38>
c000fb58:	83 ec 08             	sub    esp,0x8
c000fb5b:	ff 0d 50 f0 02 c0    	dec    DWORD PTR ds:0xc002f050
c000fb61:	6a 00                	push   0x0
c000fb63:	53                   	push   ebx
c000fb64:	e8 82 ff ff ff       	call   c000faeb <Phys::setPageState(unsigned long, bool)>
c000fb69:	83 c4 10             	add    esp,0x10
c000fb6c:	83 c4 08             	add    esp,0x8
c000fb6f:	5b                   	pop    ebx
c000fb70:	c3                   	ret    
c000fb71:	c7 44 24 10 7b ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab7b
c000fb79:	83 c4 08             	add    esp,0x8
c000fb7c:	5b                   	pop    ebx
c000fb7d:	e9 87 a7 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c000fb82:	68 00 10 00 00       	push   0x1000
c000fb87:	50                   	push   eax
c000fb88:	e8 16 ff ff ff       	call   c000faa3 <Phys::freeDMA(unsigned long, unsigned long)>
c000fb8d:	59                   	pop    ecx
c000fb8e:	5b                   	pop    ebx
c000fb8f:	83 c4 08             	add    esp,0x8
c000fb92:	5b                   	pop    ebx
c000fb93:	c3                   	ret    

c000fb94 <Phys::allocatePage()>:
c000fb94:	56                   	push   esi
c000fb95:	53                   	push   ebx
c000fb96:	51                   	push   ecx
c000fb97:	8b 35 44 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f044
c000fb9d:	89 f3                	mov    ebx,esi
c000fb9f:	eb 0a                	jmp    c000fbab <Phys::allocatePage()+0x17>
c000fba1:	89 1d 44 f0 02 c0    	mov    DWORD PTR ds:0xc002f044,ebx
c000fba7:	39 de                	cmp    esi,ebx
c000fba9:	74 24                	je     c000fbcf <Phys::allocatePage()+0x3b>
c000fbab:	53                   	push   ebx
c000fbac:	e8 6c ff ff ff       	call   c000fb1d <Phys::getPageState(unsigned long)>
c000fbb1:	5a                   	pop    edx
c000fbb2:	84 c0                	test   al,al
c000fbb4:	74 77                	je     c000fc2d <Phys::allocatePage()+0x99>
c000fbb6:	43                   	inc    ebx
c000fbb7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbbd:	75 e2                	jne    c000fba1 <Phys::allocatePage()+0xd>
c000fbbf:	31 db                	xor    ebx,ebx
c000fbc1:	c7 05 44 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f044,0x0
c000fbcb:	39 de                	cmp    esi,ebx
c000fbcd:	75 dc                	jne    c000fbab <Phys::allocatePage()+0x17>
c000fbcf:	83 ec 0c             	sub    esp,0xc
c000fbd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbd7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fbda:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fbe0:	e8 1b 2a 00 00       	call   c0012600 <VAS::scanForEviction()>
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	85 c0                	test   eax,eax
c000fbea:	75 59                	jne    c000fc45 <Phys::allocatePage()+0xb1>
c000fbec:	83 ec 0c             	sub    esp,0xc
c000fbef:	68 91 ab 02 c0       	push   0xc002ab91
c000fbf4:	e8 da 2c 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000fbf9:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fc00:	e8 fb fd ff ff       	call   c000fa00 <Phys::allocateDMA(unsigned long)>
c000fc05:	83 c4 10             	add    esp,0x10
c000fc08:	85 c0                	test   eax,eax
c000fc0a:	75 39                	jne    c000fc45 <Phys::allocatePage()+0xb1>
c000fc0c:	83 ec 0c             	sub    esp,0xc
c000fc0f:	68 a2 ab 02 c0       	push   0xc002aba2
c000fc14:	e8 f0 a6 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000fc19:	83 c4 10             	add    esp,0x10
c000fc1c:	8b 1d 44 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f044
c000fc22:	53                   	push   ebx
c000fc23:	e8 f5 fe ff ff       	call   c000fb1d <Phys::getPageState(unsigned long)>
c000fc28:	5a                   	pop    edx
c000fc29:	84 c0                	test   al,al
c000fc2b:	75 89                	jne    c000fbb6 <Phys::allocatePage()+0x22>
c000fc2d:	6a 01                	push   0x1
c000fc2f:	53                   	push   ebx
c000fc30:	e8 b6 fe ff ff       	call   c000faeb <Phys::setPageState(unsigned long, bool)>
c000fc35:	a1 44 f0 02 c0       	mov    eax,ds:0xc002f044
c000fc3a:	59                   	pop    ecx
c000fc3b:	ff 05 50 f0 02 c0    	inc    DWORD PTR ds:0xc002f050
c000fc41:	c1 e0 0c             	shl    eax,0xc
c000fc44:	5b                   	pop    ebx
c000fc45:	5a                   	pop    edx
c000fc46:	5b                   	pop    ebx
c000fc47:	5e                   	pop    esi
c000fc48:	c3                   	ret    

c000fc49 <Phys::allocateContiguousPages(int)>:
c000fc49:	57                   	push   edi
c000fc4a:	56                   	push   esi
c000fc4b:	53                   	push   ebx
c000fc4c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc50:	fa                   	cli    
c000fc51:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000fc57:	31 db                	xor    ebx,ebx
c000fc59:	85 db                	test   ebx,ebx
c000fc5b:	75 11                	jne    c000fc6e <Phys::allocateContiguousPages(int)+0x25>
c000fc5d:	e8 32 ff ff ff       	call   c000fb94 <Phys::allocatePage()>
c000fc62:	83 fe 01             	cmp    esi,0x1
c000fc65:	89 c7                	mov    edi,eax
c000fc67:	74 21                	je     c000fc8a <Phys::allocateContiguousPages(int)+0x41>
c000fc69:	bb 01 00 00 00       	mov    ebx,0x1
c000fc6e:	e8 21 ff ff ff       	call   c000fb94 <Phys::allocatePage()>
c000fc73:	89 da                	mov    edx,ebx
c000fc75:	c1 e2 0c             	shl    edx,0xc
c000fc78:	01 fa                	add    edx,edi
c000fc7a:	39 c2                	cmp    edx,eax
c000fc7c:	74 20                	je     c000fc9e <Phys::allocateContiguousPages(int)+0x55>
c000fc7e:	bb 01 00 00 00       	mov    ebx,0x1
c000fc83:	89 c7                	mov    edi,eax
c000fc85:	83 fe 01             	cmp    esi,0x1
c000fc88:	75 e4                	jne    c000fc6e <Phys::allocateContiguousPages(int)+0x25>
c000fc8a:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000fc8f:	48                   	dec    eax
c000fc90:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000fc95:	75 01                	jne    c000fc98 <Phys::allocateContiguousPages(int)+0x4f>
c000fc97:	fb                   	sti    
c000fc98:	89 f8                	mov    eax,edi
c000fc9a:	5b                   	pop    ebx
c000fc9b:	5e                   	pop    esi
c000fc9c:	5f                   	pop    edi
c000fc9d:	c3                   	ret    
c000fc9e:	43                   	inc    ebx
c000fc9f:	39 f3                	cmp    ebx,esi
c000fca1:	75 b6                	jne    c000fc59 <Phys::allocateContiguousPages(int)+0x10>
c000fca3:	eb e5                	jmp    c000fc8a <Phys::allocateContiguousPages(int)+0x41>

c000fca5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fca5:	56                   	push   esi
c000fca6:	53                   	push   ebx
c000fca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcab:	39 1d 48 f0 02 c0    	cmp    DWORD PTR ds:0xc002f048,ebx
c000fcb1:	73 06                	jae    c000fcb9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fcb3:	89 1d 48 f0 02 c0    	mov    DWORD PTR ds:0xc002f048,ebx
c000fcb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcbd:	c1 eb 0c             	shr    ebx,0xc
c000fcc0:	c1 e8 0c             	shr    eax,0xc
c000fcc3:	39 d8                	cmp    eax,ebx
c000fcc5:	73 13                	jae    c000fcda <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fcc7:	6a 00                	push   0x0
c000fcc9:	8d 70 01             	lea    esi,[eax+0x1]
c000fccc:	50                   	push   eax
c000fccd:	e8 19 fe ff ff       	call   c000faeb <Phys::setPageState(unsigned long, bool)>
c000fcd2:	5a                   	pop    edx
c000fcd3:	89 f0                	mov    eax,esi
c000fcd5:	59                   	pop    ecx
c000fcd6:	39 f3                	cmp    ebx,esi
c000fcd8:	75 ed                	jne    c000fcc7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fcda:	5b                   	pop    ebx
c000fcdb:	5e                   	pop    esi
c000fcdc:	c3                   	ret    

c000fcdd <Phys::physicalMemorySetup(unsigned int)>:
c000fcdd:	55                   	push   ebp
c000fcde:	57                   	push   edi
c000fcdf:	56                   	push   esi
c000fce0:	53                   	push   ebx
c000fce1:	31 db                	xor    ebx,ebx
c000fce3:	83 ec 40             	sub    esp,0x40
c000fce6:	6a 30                	push   0x30
c000fce8:	6a 00                	push   0x0
c000fcea:	68 60 f0 02 c0       	push   0xc002f060
c000fcef:	e8 5c 0a ff ff       	call   c0000750 <memset>
c000fcf4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcf8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcfd:	05 00 10 00 00       	add    eax,0x1000
c000fd02:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	83 ec 08             	sub    esp,0x8
c000fd0c:	6a 01                	push   0x1
c000fd0e:	53                   	push   ebx
c000fd0f:	43                   	inc    ebx
c000fd10:	e8 d6 fd ff ff       	call   c000faeb <Phys::setPageState(unsigned long, bool)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd1e:	75 e9                	jne    c000fd09 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd20:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd27:	66 85 c0             	test   ax,ax
c000fd2a:	0f 84 8e 01 00 00    	je     c000febe <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd34:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd40:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd49:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd51:	eb 15                	jmp    c000fd68 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd53:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd57:	83 c3 18             	add    ebx,0x18
c000fd5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd62:	0f 84 66 01 00 00    	je     c000fece <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd68:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd6b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd6e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd79:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd7b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd7e:	01 f0                	add    eax,esi
c000fd80:	55                   	push   ebp
c000fd81:	11 fa                	adc    edx,edi
c000fd83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd87:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd8f:	56                   	push   esi
c000fd90:	68 dc ab 02 c0       	push   0xc002abdc
c000fd95:	e8 39 2b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000fd9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd9e:	83 c4 10             	add    esp,0x10
c000fda1:	09 f8                	or     eax,edi
c000fda3:	0f 85 25 01 00 00    	jne    c000fece <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fda9:	4d                   	dec    ebp
c000fdaa:	75 a7                	jne    c000fd53 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdac:	ba 00 00 08 00       	mov    edx,0x80000
c000fdb1:	89 c1                	mov    ecx,eax
c000fdb3:	39 f2                	cmp    edx,esi
c000fdb5:	19 f9                	sbb    ecx,edi
c000fdb7:	0f 82 a7 00 00 00    	jb     c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdbd:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fdc1:	89 c1                	mov    ecx,eax
c000fdc3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fdc7:	0f 83 97 00 00 00    	jae    c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdcd:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fdd2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdd6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdda:	39 fa                	cmp    edx,edi
c000fddc:	19 e8                	sbb    eax,ebp
c000fdde:	0f 82 14 01 00 00    	jb     c000fef8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fde4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fde8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdec:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdf2:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdf7:	83 d5 ff             	adc    ebp,0xffffffff
c000fdfa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdfe:	31 c0                	xor    eax,eax
c000fe00:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe04:	39 fa                	cmp    edx,edi
c000fe06:	89 c1                	mov    ecx,eax
c000fe08:	19 e9                	sbb    ecx,ebp
c000fe0a:	0f 83 43 ff ff ff    	jae    c000fd53 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe10:	be 00 00 08 00       	mov    esi,0x80000
c000fe15:	50                   	push   eax
c000fe16:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe1a:	57                   	push   edi
c000fe1b:	56                   	push   esi
c000fe1c:	68 00 ac 02 c0       	push   0xc002ac00
c000fe21:	e8 ad 2a 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000fe26:	5a                   	pop    edx
c000fe27:	59                   	pop    ecx
c000fe28:	57                   	push   edi
c000fe29:	56                   	push   esi
c000fe2a:	e8 76 fe ff ff       	call   c000fca5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe37:	83 c4 0c             	add    esp,0xc
c000fe3a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe3e:	03 05 54 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f054
c000fe44:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe4b:	a3 54 f0 02 c0       	mov    ds:0xc002f054,eax
c000fe50:	52                   	push   edx
c000fe51:	50                   	push   eax
c000fe52:	68 be ab 02 c0       	push   0xc002abbe
c000fe57:	e8 77 2a 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c000fe5c:	83 c4 10             	add    esp,0x10
c000fe5f:	e9 ef fe ff ff       	jmp    c000fd53 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe64:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe70:	39 ea                	cmp    edx,ebp
c000fe72:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe76:	0f 82 d7 fe ff ff    	jb     c000fd53 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe7c:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe81:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe85:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe89:	0f 83 c4 fe ff ff    	jae    c000fd53 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe8f:	39 ee                	cmp    esi,ebp
c000fe91:	89 f8                	mov    eax,edi
c000fe93:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe97:	0f 83 78 ff ff ff    	jae    c000fe15 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fea1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fea5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fea9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fead:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000feb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feb9:	e9 57 ff ff ff       	jmp    c000fe15 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000febe:	83 ec 0c             	sub    esp,0xc
c000fec1:	68 b0 ab 02 c0       	push   0xc002abb0
c000fec6:	e8 3e a4 00 00       	call   c001a309 <Krnl::panic(char const*)>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	bb 40 01 00 00       	mov    ebx,0x140
c000fed3:	83 ec 08             	sub    esp,0x8
c000fed6:	6a 00                	push   0x0
c000fed8:	53                   	push   ebx
c000fed9:	43                   	inc    ebx
c000feda:	e8 0c fc ff ff       	call   c000faeb <Phys::setPageState(unsigned long, bool)>
c000fedf:	ff 05 54 f0 02 c0    	inc    DWORD PTR ds:0xc002f054
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000feee:	75 e3                	jne    c000fed3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fef0:	83 c4 3c             	add    esp,0x3c
c000fef3:	5b                   	pop    ebx
c000fef4:	5e                   	pop    esi
c000fef5:	5f                   	pop    edi
c000fef6:	5d                   	pop    ebp
c000fef7:	c3                   	ret    
c000fef8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff08:	e9 d7 fe ff ff       	jmp    c000fde4 <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ff0d:	90                   	nop

c000ff0e <Pipe::isAtty()>:
c000ff0e:	31 c0                	xor    eax,eax
c000ff10:	c3                   	ret    
c000ff11:	90                   	nop

c000ff12 <Pipe::~Pipe()>:
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c000ff1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1e:	89 10                	mov    DWORD PTR [eax],edx
c000ff20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff24:	83 ec 0c             	sub    esp,0xc
c000ff27:	50                   	push   eax
c000ff28:	e8 3f 13 00 00       	call   c001126c <UnixFile::~UnixFile()>
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	90                   	nop
c000ff31:	83 c4 0c             	add    esp,0xc
c000ff34:	c3                   	ret    
c000ff35:	90                   	nop

c000ff36 <Pipe::~Pipe()>:
c000ff36:	83 ec 0c             	sub    esp,0xc
c000ff39:	83 ec 0c             	sub    esp,0xc
c000ff3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff40:	e8 cd ff ff ff       	call   c000ff12 <Pipe::~Pipe()>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	83 ec 08             	sub    esp,0x8
c000ff4b:	6a 20                	push   0x20
c000ff4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff51:	e8 9d 28 00 00       	call   c00127f3 <operator delete(void*, unsigned long)>
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	83 c4 0c             	add    esp,0xc
c000ff5c:	c3                   	ret    
c000ff5d:	90                   	nop

c000ff5e <Pipe::read(unsigned long long, void*, int*)>:
c000ff5e:	55                   	push   ebp
c000ff5f:	57                   	push   edi
c000ff60:	56                   	push   esi
c000ff61:	53                   	push   ebx
c000ff62:	83 ec 1c             	sub    esp,0x1c
c000ff65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff6d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff71:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff74:	89 c8                	mov    eax,ecx
c000ff76:	99                   	cdq    
c000ff77:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff7b:	74 24                	je     c000ffa1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff7d:	39 f9                	cmp    ecx,edi
c000ff7f:	89 d1                	mov    ecx,edx
c000ff81:	19 f1                	sbb    ecx,esi
c000ff83:	73 1c                	jae    c000ffa1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff85:	fa                   	cli    
c000ff86:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000ff8c:	e8 2b e1 00 00       	call   c001e0bc <schedule()>
c000ff91:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000ff96:	48                   	dec    eax
c000ff97:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000ff9c:	75 d3                	jne    c000ff71 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff9e:	fb                   	sti    
c000ff9f:	eb d0                	jmp    c000ff71 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffa1:	39 f8                	cmp    eax,edi
c000ffa3:	89 d1                	mov    ecx,edx
c000ffa5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffa8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ffac:	19 f1                	sbb    ecx,esi
c000ffae:	73 07                	jae    c000ffb7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ffb0:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffb7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ffba:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ffbd:	29 f7                	sub    edi,esi
c000ffbf:	89 f8                	mov    eax,edi
c000ffc1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffc5:	99                   	cdq    
c000ffc6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ffc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffcd:	19 d0                	sbb    eax,edx
c000ffcf:	73 07                	jae    c000ffd8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000ffd1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffd8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000ffdb:	89 ea                	mov    edx,ebp
c000ffdd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000ffe1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ffe6:	74 0d                	je     c000fff5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000ffe8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ffeb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ffef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fff3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fff5:	85 d2                	test   edx,edx
c000fff7:	74 11                	je     c001000a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fffd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010000:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010004:	89 d1                	mov    ecx,edx
c0010006:	89 c7                	mov    edi,eax
c0010008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001000a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001000d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010010:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010013:	99                   	cdq    
c0010014:	89 f7                	mov    edi,esi
c0010016:	03 04 24             	add    eax,DWORD PTR [esp]
c0010019:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001001d:	c1 ff 1f             	sar    edi,0x1f
c0010020:	57                   	push   edi
c0010021:	56                   	push   esi
c0010022:	52                   	push   edx
c0010023:	50                   	push   eax
c0010024:	e8 db 72 01 00       	call   c0027304 <__umoddi3>
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001002f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010034:	75 10                	jne    c0010046 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	68 29 ac 02 c0       	push   0xc002ac29
c001003e:	e8 c6 a2 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0010043:	83 c4 10             	add    esp,0x10
c0010046:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001004a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001004d:	89 10                	mov    DWORD PTR [eax],edx
c001004f:	83 c4 1c             	add    esp,0x1c
c0010052:	31 c0                	xor    eax,eax
c0010054:	5b                   	pop    ebx
c0010055:	5e                   	pop    esi
c0010056:	5f                   	pop    edi
c0010057:	5d                   	pop    ebp
c0010058:	c3                   	ret    
c0010059:	90                   	nop

c001005a <Pipe::write(unsigned long long, void*, int*)>:
c001005a:	55                   	push   ebp
c001005b:	57                   	push   edi
c001005c:	56                   	push   esi
c001005d:	53                   	push   ebx
c001005e:	83 ec 1c             	sub    esp,0x1c
c0010061:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010065:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010069:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001006c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010070:	89 04 24             	mov    DWORD PTR [esp],eax
c0010073:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010077:	89 d8                	mov    eax,ebx
c0010079:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001007c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010080:	89 d6                	mov    esi,edx
c0010082:	89 d7                	mov    edi,edx
c0010084:	c1 ff 1f             	sar    edi,0x1f
c0010087:	03 34 24             	add    esi,DWORD PTR [esp]
c001008a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001008e:	c1 f8 1f             	sar    eax,0x1f
c0010091:	39 f3                	cmp    ebx,esi
c0010093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009b:	19 f8                	sbb    eax,edi
c001009d:	b8 01 00 00 00       	mov    eax,0x1
c00100a2:	72 6e                	jb     c0010112 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00100a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00100a7:	01 d0                	add    eax,edx
c00100a9:	99                   	cdq    
c00100aa:	f7 fb                	idiv   ebx
c00100ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b0:	29 d3                	sub    ebx,edx
c00100b2:	89 d7                	mov    edi,edx
c00100b4:	89 de                	mov    esi,ebx
c00100b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100b9:	c1 fb 1f             	sar    ebx,0x1f
c00100bc:	39 f2                	cmp    edx,esi
c00100be:	19 d8                	sbb    eax,ebx
c00100c0:	b8 00 00 00 00       	mov    eax,0x0
c00100c5:	72 04                	jb     c00100cb <Pipe::write(unsigned long long, void*, int*)+0x71>
c00100c7:	89 d0                	mov    eax,edx
c00100c9:	29 f0                	sub    eax,esi
c00100cb:	89 d3                	mov    ebx,edx
c00100cd:	29 c3                	sub    ebx,eax
c00100cf:	74 0b                	je     c00100dc <Pipe::write(unsigned long long, void*, int*)+0x82>
c00100d1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00100d4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00100d8:	89 d9                	mov    ecx,ebx
c00100da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100dc:	85 c0                	test   eax,eax
c00100de:	74 0d                	je     c00100ed <Pipe::write(unsigned long long, void*, int*)+0x93>
c00100e0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00100e4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00100e7:	89 de                	mov    esi,ebx
c00100e9:	89 c1                	mov    ecx,eax
c00100eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100ed:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00100f0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100f5:	75 10                	jne    c0010107 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00100f7:	83 ec 0c             	sub    esp,0xc
c00100fa:	68 45 ac 02 c0       	push   0xc002ac45
c00100ff:	e8 05 a2 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0010104:	83 c4 10             	add    esp,0x10
c0010107:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001010b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001010e:	89 08                	mov    DWORD PTR [eax],ecx
c0010110:	31 c0                	xor    eax,eax
c0010112:	83 c4 1c             	add    esp,0x1c
c0010115:	5b                   	pop    ebx
c0010116:	5e                   	pop    esi
c0010117:	5f                   	pop    edi
c0010118:	5d                   	pop    ebp
c0010119:	c3                   	ret    

c001011a <Pipe::Pipe(int)>:
c001011a:	83 ec 0c             	sub    esp,0xc
c001011d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010121:	83 ec 08             	sub    esp,0x8
c0010124:	6a 00                	push   0x0
c0010126:	50                   	push   eax
c0010127:	e8 5e 0f 00 00       	call   c001108a <UnixFile::UnixFile(int)>
c001012c:	83 c4 10             	add    esp,0x10
c001012f:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c0010134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010138:	89 10                	mov    DWORD PTR [eax],edx
c001013a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010142:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010149:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010154:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001015b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001015f:	83 ec 0c             	sub    esp,0xc
c0010162:	50                   	push   eax
c0010163:	e8 24 f7 ff ff       	call   c000f88c <malloc>
c0010168:	83 c4 10             	add    esp,0x10
c001016b:	89 c2                	mov    edx,eax
c001016d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010171:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010178:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001017c:	90                   	nop
c001017d:	83 c4 0c             	add    esp,0xc
c0010180:	c3                   	ret    
c0010181:	90                   	nop

c0010182 <VgaText::isAtty()>:
c0010182:	b0 01                	mov    al,0x1
c0010184:	c3                   	ret    
c0010185:	90                   	nop

c0010186 <VgaText::~VgaText()>:
c0010186:	83 ec 0c             	sub    esp,0xc
c0010189:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c001018e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010192:	89 10                	mov    DWORD PTR [eax],edx
c0010194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010198:	83 ec 0c             	sub    esp,0xc
c001019b:	50                   	push   eax
c001019c:	e8 cb 10 00 00       	call   c001126c <UnixFile::~UnixFile()>
c00101a1:	83 c4 10             	add    esp,0x10
c00101a4:	90                   	nop
c00101a5:	83 c4 0c             	add    esp,0xc
c00101a8:	c3                   	ret    
c00101a9:	90                   	nop

c00101aa <VgaText::~VgaText()>:
c00101aa:	83 ec 0c             	sub    esp,0xc
c00101ad:	83 ec 0c             	sub    esp,0xc
c00101b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b4:	e8 cd ff ff ff       	call   c0010186 <VgaText::~VgaText()>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	83 ec 08             	sub    esp,0x8
c00101bf:	68 c4 02 00 00       	push   0x2c4
c00101c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101c8:	e8 26 26 00 00       	call   c00127f3 <operator delete(void*, unsigned long)>
c00101cd:	83 c4 10             	add    esp,0x10
c00101d0:	83 c4 0c             	add    esp,0xc
c00101d3:	c3                   	ret    

c00101d4 <VgaText::read(unsigned long long, void*, int*)>:
c00101d4:	83 ec 10             	sub    esp,0x10
c00101d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e3:	e8 a0 5b 00 00       	call   c0015d88 <readKeyboard(VgaText*, char*, unsigned long)>
c00101e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101ec:	89 02                	mov    DWORD PTR [edx],eax
c00101ee:	31 c0                	xor    eax,eax
c00101f0:	83 c4 1c             	add    esp,0x1c
c00101f3:	c3                   	ret    

c00101f4 <setTerminalScrollLock(bool)>:
c00101f4:	c3                   	ret    

c00101f5 <addToTerminalCycle(VgaText*)>:
c00101f5:	8b 15 c0 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c0
c00101fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ff:	85 d2                	test   edx,edx
c0010201:	75 09                	jne    c001020c <addToTerminalCycle(VgaText*)+0x17>
c0010203:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010206:	a3 c0 f0 02 c0       	mov    ds:0xc002f0c0,eax
c001020b:	c3                   	ret    
c001020c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001020f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010212:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010215:	c3                   	ret    

c0010216 <installVgaTextImplementation()>:
c0010216:	83 ec 10             	sub    esp,0x10
c0010219:	6a 20                	push   0x20
c001021b:	6a 00                	push   0x0
c001021d:	68 a0 f0 02 c0       	push   0xc002f0a0
c0010222:	e8 29 05 ff ff       	call   c0000750 <memset>
c0010227:	83 c4 1c             	add    esp,0x1c
c001022a:	c3                   	ret    

c001022b <scrollTerminalScrollLock(int)>:
c001022b:	c3                   	ret    

c001022c <VgaText::updateTitle()>:
c001022c:	53                   	push   ebx
c001022d:	31 c0                	xor    eax,eax
c001022f:	83 ec 58             	sub    esp,0x58
c0010232:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010236:	89 e1                	mov    ecx,esp
c0010238:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001023c:	40                   	inc    eax
c001023d:	83 f8 50             	cmp    eax,0x50
c0010240:	75 f6                	jne    c0010238 <VgaText::updateTitle()+0xc>
c0010242:	31 c0                	xor    eax,eax
c0010244:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001024b:	84 db                	test   bl,bl
c001024d:	74 06                	je     c0010255 <VgaText::updateTitle()+0x29>
c001024f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010252:	40                   	inc    eax
c0010253:	eb ef                	jmp    c0010244 <VgaText::updateTitle()+0x18>
c0010255:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010258:	85 c0                	test   eax,eax
c001025a:	74 09                	je     c0010265 <VgaText::updateTitle()+0x39>
c001025c:	53                   	push   ebx
c001025d:	53                   	push   ebx
c001025e:	51                   	push   ecx
c001025f:	52                   	push   edx
c0010260:	ff d0                	call   eax
c0010262:	83 c4 10             	add    esp,0x10
c0010265:	83 c4 58             	add    esp,0x58
c0010268:	5b                   	pop    ebx
c0010269:	c3                   	ret    

c001026a <VgaText::load()>:
c001026a:	53                   	push   ebx
c001026b:	31 c0                	xor    eax,eax
c001026d:	83 ec 58             	sub    esp,0x58
c0010270:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010274:	89 e2                	mov    edx,esp
c0010276:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001027a:	40                   	inc    eax
c001027b:	83 f8 50             	cmp    eax,0x50
c001027e:	75 f6                	jne    c0010276 <VgaText::load()+0xc>
c0010280:	31 c0                	xor    eax,eax
c0010282:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010289:	84 c9                	test   cl,cl
c001028b:	74 06                	je     c0010293 <VgaText::load()+0x29>
c001028d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010290:	40                   	inc    eax
c0010291:	eb ef                	jmp    c0010282 <VgaText::load()+0x18>
c0010293:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010296:	85 c0                	test   eax,eax
c0010298:	74 09                	je     c00102a3 <VgaText::load()+0x39>
c001029a:	51                   	push   ecx
c001029b:	51                   	push   ecx
c001029c:	52                   	push   edx
c001029d:	53                   	push   ebx
c001029e:	ff d0                	call   eax
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00102a6:	85 c0                	test   eax,eax
c00102a8:	74 09                	je     c00102b3 <VgaText::load()+0x49>
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	53                   	push   ebx
c00102ae:	ff d0                	call   eax
c00102b0:	83 c4 10             	add    esp,0x10
c00102b3:	83 c4 58             	add    esp,0x58
c00102b6:	5b                   	pop    ebx
c00102b7:	c3                   	ret    

c00102b8 <VgaText::updateCursor()>:
c00102b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bc:	39 05 c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,eax
c00102c2:	75 09                	jne    c00102cd <VgaText::updateCursor()+0x15>
c00102c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00102c7:	85 c0                	test   eax,eax
c00102c9:	74 02                	je     c00102cd <VgaText::updateCursor()+0x15>
c00102cb:	ff e0                	jmp    eax
c00102cd:	c3                   	ret    

c00102ce <VgaText::showCursor(bool)>:
c00102ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d6:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102d9:	c3                   	ret    

c00102da <VgaText::disableBlink(bool)>:
c00102da:	56                   	push   esi
c00102db:	53                   	push   ebx
c00102dc:	51                   	push   ecx
c00102dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102e5:	39 1d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ebx
c00102eb:	75 15                	jne    c0010302 <VgaText::disableBlink(bool)+0x28>
c00102ed:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00102f0:	85 c0                	test   eax,eax
c00102f2:	74 0e                	je     c0010302 <VgaText::disableBlink(bool)+0x28>
c00102f4:	89 f1                	mov    ecx,esi
c00102f6:	52                   	push   edx
c00102f7:	52                   	push   edx
c00102f8:	0f b6 d1             	movzx  edx,cl
c00102fb:	52                   	push   edx
c00102fc:	53                   	push   ebx
c00102fd:	ff d0                	call   eax
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	89 f0                	mov    eax,esi
c0010304:	83 f0 01             	xor    eax,0x1
c0010307:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001030a:	58                   	pop    eax
c001030b:	5b                   	pop    ebx
c001030c:	5e                   	pop    esi
c001030d:	c3                   	ret    

c001030e <VgaText::doANSI_SGR(int)>:
c001030e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010316:	85 d2                	test   edx,edx
c0010318:	75 0b                	jne    c0010325 <VgaText::doANSI_SGR(int)+0x17>
c001031a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001031d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010320:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010323:	eb 59                	jmp    c001037e <VgaText::doANSI_SGR(int)+0x70>
c0010325:	83 fa 07             	cmp    edx,0x7
c0010328:	75 0b                	jne    c0010335 <VgaText::doANSI_SGR(int)+0x27>
c001032a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001032d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010330:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010333:	eb 49                	jmp    c001037e <VgaText::doANSI_SGR(int)+0x70>
c0010335:	83 fa 1b             	cmp    edx,0x1b
c0010338:	74 e0                	je     c001031a <VgaText::doANSI_SGR(int)+0xc>
c001033a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001033d:	83 f9 07             	cmp    ecx,0x7
c0010340:	77 09                	ja     c001034b <VgaText::doANSI_SGR(int)+0x3d>
c0010342:	8b 14 8d 60 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd20a0]
c0010349:	eb 20                	jmp    c001036b <VgaText::doANSI_SGR(int)+0x5d>
c001034b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001034e:	83 f9 07             	cmp    ecx,0x7
c0010351:	77 09                	ja     c001035c <VgaText::doANSI_SGR(int)+0x4e>
c0010353:	8b 14 8d 60 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd20a0]
c001035a:	eb 22                	jmp    c001037e <VgaText::doANSI_SGR(int)+0x70>
c001035c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001035f:	83 f9 07             	cmp    ecx,0x7
c0010362:	77 0b                	ja     c001036f <VgaText::doANSI_SGR(int)+0x61>
c0010364:	8b 14 95 18 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21e8]
c001036b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001036e:	c3                   	ret    
c001036f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010372:	83 f9 07             	cmp    ecx,0x7
c0010375:	77 0a                	ja     c0010381 <VgaText::doANSI_SGR(int)+0x73>
c0010377:	8b 14 95 f0 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2210]
c001037e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010381:	c3                   	ret    

c0010382 <VgaText::setDefaultBgColour(VgaColour)>:
c0010382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010386:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001038a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001038d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010390:	c3                   	ret    
c0010391:	90                   	nop

c0010392 <VgaText::setDefaultFgColour(VgaColour)>:
c0010392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001039a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001039d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103a0:	c3                   	ret    
c00103a1:	90                   	nop

c00103a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00103a2:	53                   	push   ebx
c00103a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103af:	51                   	push   ecx
c00103b0:	e8 cd ff ff ff       	call   c0010382 <VgaText::setDefaultBgColour(VgaColour)>
c00103b5:	58                   	pop    eax
c00103b6:	5a                   	pop    edx
c00103b7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00103bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00103bf:	5b                   	pop    ebx
c00103c0:	eb d0                	jmp    c0010392 <VgaText::setDefaultFgColour(VgaColour)>

c00103c2 <VgaText::setTitleTextColour(VgaColour)>:
c00103c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ca:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00103cd:	e9 5a fe ff ff       	jmp    c001022c <VgaText::updateTitle()>

c00103d2 <VgaText::setTitleColour(VgaColour)>:
c00103d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00103dd:	e9 4a fe ff ff       	jmp    c001022c <VgaText::updateTitle()>

c00103e2 <VgaText::setTitle(char*)>:
c00103e2:	53                   	push   ebx
c00103e3:	83 ec 10             	sub    esp,0x10
c00103e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ee:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00103f4:	50                   	push   eax
c00103f5:	e8 12 04 ff ff       	call   c000080c <strcpy>
c00103fa:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00103fe:	83 c4 18             	add    esp,0x18
c0010401:	5b                   	pop    ebx
c0010402:	e9 25 fe ff ff       	jmp    c001022c <VgaText::updateTitle()>
c0010407:	90                   	nop

c0010408 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010408:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001040c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010411:	83 e0 0f             	and    eax,0xf
c0010414:	c1 e2 04             	shl    edx,0x4
c0010417:	09 d0                	or     eax,edx
c0010419:	c3                   	ret    

c001041a <VgaText::scrollScreen()>:
c001041a:	55                   	push   ebp
c001041b:	b9 01 00 00 00       	mov    ecx,0x1
c0010420:	57                   	push   edi
c0010421:	56                   	push   esi
c0010422:	53                   	push   ebx
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001042a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010430:	31 ff                	xor    edi,edi
c0010432:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010435:	83 f9 17             	cmp    ecx,0x17
c0010438:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001043b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010442:	75 27                	jne    c001046b <VgaText::scrollScreen()+0x51>
c0010444:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010447:	01 f5                	add    ebp,esi
c0010449:	f7 c7 01 00 00 00    	test   edi,0x1
c001044f:	74 16                	je     c0010467 <VgaText::scrollScreen()+0x4d>
c0010451:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010455:	50                   	push   eax
c0010456:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001045a:	50                   	push   eax
c001045b:	e8 a8 ff ff ff       	call   c0010408 <VgaText::combineColours(unsigned char, unsigned char)>
c0010460:	5a                   	pop    edx
c0010461:	5a                   	pop    edx
c0010462:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010465:	eb 04                	jmp    c001046b <VgaText::scrollScreen()+0x51>
c0010467:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001046b:	47                   	inc    edi
c001046c:	46                   	inc    esi
c001046d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010473:	75 bd                	jne    c0010432 <VgaText::scrollScreen()+0x18>
c0010475:	41                   	inc    ecx
c0010476:	83 f9 18             	cmp    ecx,0x18
c0010479:	75 af                	jne    c001042a <VgaText::scrollScreen()+0x10>
c001047b:	39 1d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ebx
c0010481:	75 1b                	jne    c001049e <VgaText::scrollScreen()+0x84>
c0010483:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010487:	74 05                	je     c001048e <VgaText::scrollScreen()+0x74>
c0010489:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001048c:	eb 10                	jmp    c001049e <VgaText::scrollScreen()+0x84>
c001048e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010491:	85 c0                	test   eax,eax
c0010493:	74 09                	je     c001049e <VgaText::scrollScreen()+0x84>
c0010495:	83 ec 0c             	sub    esp,0xc
c0010498:	53                   	push   ebx
c0010499:	ff d0                	call   eax
c001049b:	83 c4 10             	add    esp,0x10
c001049e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104a2:	83 c4 0c             	add    esp,0xc
c00104a5:	5b                   	pop    ebx
c00104a6:	5e                   	pop    esi
c00104a7:	5f                   	pop    edi
c00104a8:	5d                   	pop    ebp
c00104a9:	e9 0a fe ff ff       	jmp    c00102b8 <VgaText::updateCursor()>

c00104ae <VgaText::combineCharAndColour(char, unsigned char)>:
c00104ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104b3:	c1 e0 08             	shl    eax,0x8
c00104b6:	89 c2                	mov    edx,eax
c00104b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00104bd:	09 d0                	or     eax,edx
c00104bf:	c3                   	ret    

c00104c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104c0:	56                   	push   esi
c00104c1:	53                   	push   ebx
c00104c2:	51                   	push   ecx
c00104c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104c7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104cc:	50                   	push   eax
c00104cd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104d2:	50                   	push   eax
c00104d3:	e8 30 ff ff ff       	call   c0010408 <VgaText::combineColours(unsigned char, unsigned char)>
c00104d8:	5b                   	pop    ebx
c00104d9:	0f b6 c0             	movzx  eax,al
c00104dc:	5e                   	pop    esi
c00104dd:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00104e2:	50                   	push   eax
c00104e3:	53                   	push   ebx
c00104e4:	e8 c5 ff ff ff       	call   c00104ae <VgaText::combineCharAndColour(char, unsigned char)>
c00104e9:	5a                   	pop    edx
c00104ea:	5e                   	pop    esi
c00104eb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00104ee:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00104f4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00104f8:	0f b7 d2             	movzx  edx,dx
c00104fb:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00104ff:	39 0d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ecx
c0010505:	75 10                	jne    c0010517 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010507:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001050a:	85 c0                	test   eax,eax
c001050c:	74 09                	je     c0010517 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001050e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010512:	5a                   	pop    edx
c0010513:	5b                   	pop    ebx
c0010514:	5e                   	pop    esi
c0010515:	ff e0                	jmp    eax
c0010517:	58                   	pop    eax
c0010518:	5b                   	pop    ebx
c0010519:	5e                   	pop    esi
c001051a:	c3                   	ret    
c001051b:	90                   	nop

c001051c <VgaText::getCursorX()>:
c001051c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010520:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010523:	c3                   	ret    

c0010524 <VgaText::getCursorY()>:
c0010524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010528:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001052b:	c3                   	ret    

c001052c <VgaText::setCursor(int, int)>:
c001052c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010530:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010534:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010537:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001053b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001053e:	e9 75 fd ff ff       	jmp    c00102b8 <VgaText::updateCursor()>
c0010543:	90                   	nop

c0010544 <VgaText::setCursorX(int)>:
c0010544:	83 ec 10             	sub    esp,0x10
c0010547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001054b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001054e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010552:	50                   	push   eax
c0010553:	e8 d4 ff ff ff       	call   c001052c <VgaText::setCursor(int, int)>
c0010558:	83 c4 1c             	add    esp,0x1c
c001055b:	c3                   	ret    

c001055c <VgaText::setCursorY(int)>:
c001055c:	83 ec 10             	sub    esp,0x10
c001055f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010567:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001056a:	50                   	push   eax
c001056b:	e8 bc ff ff ff       	call   c001052c <VgaText::setCursor(int, int)>
c0010570:	83 c4 1c             	add    esp,0x1c
c0010573:	c3                   	ret    

c0010574 <VgaText::incrementCursor(bool)>:
c0010574:	56                   	push   esi
c0010575:	53                   	push   ebx
c0010576:	51                   	push   ecx
c0010577:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001057b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001057f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010582:	40                   	inc    eax
c0010583:	83 f8 50             	cmp    eax,0x50
c0010586:	74 05                	je     c001058d <VgaText::incrementCursor(bool)+0x19>
c0010588:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001058b:	eb 24                	jmp    c00105b1 <VgaText::incrementCursor(bool)+0x3d>
c001058d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010590:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010597:	8d 50 01             	lea    edx,[eax+0x1]
c001059a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001059d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00105a0:	75 0f                	jne    c00105b1 <VgaText::incrementCursor(bool)+0x3d>
c00105a2:	83 ec 0c             	sub    esp,0xc
c00105a5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105a8:	53                   	push   ebx
c00105a9:	e8 6c fe ff ff       	call   c001041a <VgaText::scrollScreen()>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	89 f0                	mov    eax,esi
c00105b3:	84 c0                	test   al,al
c00105b5:	74 0c                	je     c00105c3 <VgaText::incrementCursor(bool)+0x4f>
c00105b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105bb:	5a                   	pop    edx
c00105bc:	5b                   	pop    ebx
c00105bd:	5e                   	pop    esi
c00105be:	e9 f5 fc ff ff       	jmp    c00102b8 <VgaText::updateCursor()>
c00105c3:	58                   	pop    eax
c00105c4:	5b                   	pop    ebx
c00105c5:	5e                   	pop    esi
c00105c6:	c3                   	ret    
c00105c7:	90                   	nop

c00105c8 <VgaText::decrementCursor(bool)>:
c00105c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00105cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105d0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00105d3:	85 c0                	test   eax,eax
c00105d5:	74 04                	je     c00105db <VgaText::decrementCursor(bool)+0x13>
c00105d7:	48                   	dec    eax
c00105d8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00105db:	84 c9                	test   cl,cl
c00105dd:	74 09                	je     c00105e8 <VgaText::decrementCursor(bool)+0x20>
c00105df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00105e3:	e9 d0 fc ff ff       	jmp    c00102b8 <VgaText::updateCursor()>
c00105e8:	c3                   	ret    
c00105e9:	90                   	nop

c00105ea <VgaText::putchar(char, VgaColour, VgaColour)>:
c00105ea:	53                   	push   ebx
c00105eb:	83 ec 08             	sub    esp,0x8
c00105ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00105fe:	3c 07                	cmp    al,0x7
c0010600:	75 2a                	jne    c001062c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010602:	a1 78 f1 02 c0       	mov    eax,ds:0xc002f178
c0010607:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001060f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010617:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001061f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010623:	83 c4 08             	add    esp,0x8
c0010626:	5b                   	pop    ebx
c0010627:	e9 b4 30 00 00       	jmp    c00136e0 <Buzzer::beep(int, int, bool)>
c001062c:	3c 0d                	cmp    al,0xd
c001062e:	75 09                	jne    c0010639 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010630:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010637:	eb 2c                	jmp    c0010665 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010639:	3c 0a                	cmp    al,0xa
c001063b:	75 31                	jne    c001066e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001063d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010640:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010647:	8d 50 01             	lea    edx,[eax+0x1]
c001064a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001064d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010650:	75 0f                	jne    c0010661 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010652:	83 ec 0c             	sub    esp,0xc
c0010655:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010658:	53                   	push   ebx
c0010659:	e8 bc fd ff ff       	call   c001041a <VgaText::scrollScreen()>
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010665:	83 c4 08             	add    esp,0x8
c0010668:	5b                   	pop    ebx
c0010669:	e9 4a fc ff ff       	jmp    c00102b8 <VgaText::updateCursor()>
c001066e:	3c 08                	cmp    al,0x8
c0010670:	75 25                	jne    c0010697 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010672:	50                   	push   eax
c0010673:	50                   	push   eax
c0010674:	6a 01                	push   0x1
c0010676:	53                   	push   ebx
c0010677:	e8 4c ff ff ff       	call   c00105c8 <VgaText::decrementCursor(bool)>
c001067c:	5a                   	pop    edx
c001067d:	59                   	pop    ecx
c001067e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010681:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010684:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010687:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001068a:	6a 20                	push   0x20
c001068c:	53                   	push   ebx
c001068d:	e8 2e fe ff ff       	call   c00104c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010692:	83 c4 28             	add    esp,0x28
c0010695:	5b                   	pop    ebx
c0010696:	c3                   	ret    
c0010697:	83 ec 08             	sub    esp,0x8
c001069a:	0f be c0             	movsx  eax,al
c001069d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00106a0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00106a3:	51                   	push   ecx
c00106a4:	52                   	push   edx
c00106a5:	50                   	push   eax
c00106a6:	53                   	push   ebx
c00106a7:	e8 14 fe ff ff       	call   c00104c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106ac:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00106b0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00106b8:	83 c4 28             	add    esp,0x28
c00106bb:	5b                   	pop    ebx
c00106bc:	e9 b3 fe ff ff       	jmp    c0010574 <VgaText::incrementCursor(bool)>
c00106c1:	90                   	nop

c00106c2 <VgaText::isShowingCursor()>:
c00106c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00106c9:	c3                   	ret    

c00106ca <VgaText::isBlinkDisabled()>:
c00106ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ce:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00106d1:	83 f0 01             	xor    eax,0x1
c00106d4:	c3                   	ret    
c00106d5:	90                   	nop

c00106d6 <VgaText::setCursorHeight(int)>:
c00106d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106de:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00106e1:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c00106e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106e9:	e9 e0 fb ff ff       	jmp    c00102ce <VgaText::showCursor(bool)>

c00106ee <VgaText::getCursorHeight()>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00106f5:	c3                   	ret    

c00106f6 <setActiveTerminal(VgaText*)>:
c00106f6:	53                   	push   ebx
c00106f7:	83 ec 08             	sub    esp,0x8
c00106fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fe:	85 db                	test   ebx,ebx
c0010700:	75 11                	jne    c0010713 <setActiveTerminal(VgaText*)+0x1d>
c0010702:	c7 44 24 10 80 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac80
c001070a:	83 c4 08             	add    esp,0x8
c001070d:	5b                   	pop    ebx
c001070e:	e9 f6 9b 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c0010713:	50                   	push   eax
c0010714:	50                   	push   eax
c0010715:	53                   	push   ebx
c0010716:	68 8e ac 02 c0       	push   0xc002ac8e
c001071b:	e8 b3 21 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0010720:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	85 c0                	test   eax,eax
c001072a:	74 0c                	je     c0010738 <setActiveTerminal(VgaText*)+0x42>
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	50                   	push   eax
c0010730:	e8 83 fb ff ff       	call   c00102b8 <VgaText::updateCursor()>
c0010735:	83 c4 10             	add    esp,0x10
c0010738:	89 1d c4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c4,ebx
c001073e:	51                   	push   ecx
c001073f:	51                   	push   ecx
c0010740:	53                   	push   ebx
c0010741:	68 a6 ac 02 c0       	push   0xc002aca6
c0010746:	e8 88 21 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001074b:	83 c4 0c             	add    esp,0xc
c001074e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010751:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010754:	53                   	push   ebx
c0010755:	e8 d2 fd ff ff       	call   c001052c <VgaText::setCursor(int, int)>
c001075a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001075d:	e8 68 ff ff ff       	call   c00106ca <VgaText::isBlinkDisabled()>
c0010762:	5a                   	pop    edx
c0010763:	0f b6 c0             	movzx  eax,al
c0010766:	59                   	pop    ecx
c0010767:	50                   	push   eax
c0010768:	53                   	push   ebx
c0010769:	e8 6c fb ff ff       	call   c00102da <VgaText::disableBlink(bool)>
c001076e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010771:	e8 78 ff ff ff       	call   c00106ee <VgaText::getCursorHeight()>
c0010776:	5a                   	pop    edx
c0010777:	59                   	pop    ecx
c0010778:	50                   	push   eax
c0010779:	53                   	push   ebx
c001077a:	e8 57 ff ff ff       	call   c00106d6 <VgaText::setCursorHeight(int)>
c001077f:	83 c4 10             	add    esp,0x10
c0010782:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010786:	75 07                	jne    c001078f <setActiveTerminal(VgaText*)+0x99>
c0010788:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001078f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010793:	83 c4 08             	add    esp,0x8
c0010796:	5b                   	pop    ebx
c0010797:	e9 ce fa ff ff       	jmp    c001026a <VgaText::load()>

c001079c <doTerminalCycle()>:
c001079c:	83 ec 18             	sub    esp,0x18
c001079f:	a1 c0 f0 02 c0       	mov    eax,ds:0xc002f0c0
c00107a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107a7:	50                   	push   eax
c00107a8:	a3 c0 f0 02 c0       	mov    ds:0xc002f0c0,eax
c00107ad:	e8 44 ff ff ff       	call   c00106f6 <setActiveTerminal(VgaText*)>
c00107b2:	83 c4 1c             	add    esp,0x1c
c00107b5:	c3                   	ret    

c00107b6 <VgaText::doUpdate()>:
c00107b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ba:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107bd:	85 c0                	test   eax,eax
c00107bf:	74 02                	je     c00107c3 <VgaText::doUpdate()+0xd>
c00107c1:	ff e0                	jmp    eax
c00107c3:	c3                   	ret    

c00107c4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107c4:	55                   	push   ebp
c00107c5:	31 ed                	xor    ebp,ebp
c00107c7:	57                   	push   edi
c00107c8:	56                   	push   esi
c00107c9:	53                   	push   ebx
c00107ca:	83 ec 1c             	sub    esp,0x1c
c00107cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107d1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107d6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107dd:	50                   	push   eax
c00107de:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107e3:	50                   	push   eax
c00107e4:	e8 1f fc ff ff       	call   c0010408 <VgaText::combineColours(unsigned char, unsigned char)>
c00107e9:	59                   	pop    ecx
c00107ea:	0f b6 c0             	movzx  eax,al
c00107ed:	5e                   	pop    esi
c00107ee:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00107f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107f7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00107fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107fe:	0f b7 f6             	movzx  esi,si
c0010801:	01 f6                	add    esi,esi
c0010803:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010806:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010809:	84 c0                	test   al,al
c001080b:	0f 84 fd 00 00 00    	je     c001090e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010811:	3c 0d                	cmp    al,0xd
c0010813:	75 0c                	jne    c0010821 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010815:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001081c:	e9 e7 00 00 00       	jmp    c0010908 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010821:	3c 0a                	cmp    al,0xa
c0010823:	75 47                	jne    c001086c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010828:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001082f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010832:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010835:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010838:	75 0f                	jne    c0010849 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c001083a:	83 ec 0c             	sub    esp,0xc
c001083d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010840:	53                   	push   ebx
c0010841:	e8 d4 fb ff ff       	call   c001041a <VgaText::scrollScreen()>
c0010846:	83 c4 10             	add    esp,0x10
c0010849:	83 ec 0c             	sub    esp,0xc
c001084c:	31 ed                	xor    ebp,ebp
c001084e:	53                   	push   ebx
c001084f:	e8 64 fa ff ff       	call   c00102b8 <VgaText::updateCursor()>
c0010854:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010859:	83 c4 10             	add    esp,0x10
c001085c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001085f:	0f b7 f6             	movzx  esi,si
c0010862:	01 f6                	add    esi,esi
c0010864:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010867:	e9 9c 00 00 00       	jmp    c0010908 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001086c:	3c 08                	cmp    al,0x8
c001086e:	75 35                	jne    c00108a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010870:	56                   	push   esi
c0010871:	56                   	push   esi
c0010872:	6a 01                	push   0x1
c0010874:	53                   	push   ebx
c0010875:	e8 4e fd ff ff       	call   c00105c8 <VgaText::decrementCursor(bool)>
c001087a:	58                   	pop    eax
c001087b:	5a                   	pop    edx
c001087c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001087f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010882:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010885:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010888:	6a 20                	push   0x20
c001088a:	53                   	push   ebx
c001088b:	e8 30 fc ff ff       	call   c00104c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010890:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010895:	83 c4 20             	add    esp,0x20
c0010898:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001089b:	0f b7 f6             	movzx  esi,si
c001089e:	01 f6                	add    esi,esi
c00108a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108a3:	eb 63                	jmp    c0010908 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108a5:	51                   	push   ecx
c00108a6:	51                   	push   ecx
c00108a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108ab:	50                   	push   eax
c00108ac:	e8 fd fb ff ff       	call   c00104ae <VgaText::combineCharAndColour(char, unsigned char)>
c00108b1:	83 c4 10             	add    esp,0x10
c00108b4:	66 89 06             	mov    WORD PTR [esi],ax
c00108b7:	39 1d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ebx
c00108bd:	75 21                	jne    c00108e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108bf:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108c2:	85 c0                	test   eax,eax
c00108c4:	74 1a                	je     c00108e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108c6:	52                   	push   edx
c00108c7:	52                   	push   edx
c00108c8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108cb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108d6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108d9:	51                   	push   ecx
c00108da:	53                   	push   ebx
c00108db:	ff d0                	call   eax
c00108dd:	83 c4 20             	add    esp,0x20
c00108e0:	83 c6 02             	add    esi,0x2
c00108e3:	50                   	push   eax
c00108e4:	50                   	push   eax
c00108e5:	6a 00                	push   0x0
c00108e7:	53                   	push   ebx
c00108e8:	e8 87 fc ff ff       	call   c0010574 <VgaText::incrementCursor(bool)>
c00108ed:	83 c4 10             	add    esp,0x10
c00108f0:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00108f4:	75 0d                	jne    c0010903 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c00108f6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108fb:	0f b7 f6             	movzx  esi,si
c00108fe:	01 f6                	add    esi,esi
c0010900:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010903:	bd 01 00 00 00       	mov    ebp,0x1
c0010908:	47                   	inc    edi
c0010909:	e9 f8 fe ff ff       	jmp    c0010806 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	53                   	push   ebx
c0010912:	e8 a1 f9 ff ff       	call   c00102b8 <VgaText::updateCursor()>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	89 e8                	mov    eax,ebp
c001091c:	84 c0                	test   al,al
c001091e:	74 0c                	je     c001092c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010920:	83 ec 0c             	sub    esp,0xc
c0010923:	53                   	push   ebx
c0010924:	e8 8d fe ff ff       	call   c00107b6 <VgaText::doUpdate()>
c0010929:	83 c4 10             	add    esp,0x10
c001092c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010933:	83 c4 1c             	add    esp,0x1c
c0010936:	5b                   	pop    ebx
c0010937:	5e                   	pop    esi
c0010938:	5f                   	pop    edi
c0010939:	5d                   	pop    ebp
c001093a:	c3                   	ret    
c001093b:	90                   	nop

c001093c <VgaText::clearScreen()>:
c001093c:	57                   	push   edi
c001093d:	56                   	push   esi
c001093e:	31 f6                	xor    esi,esi
c0010940:	53                   	push   ebx
c0010941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010945:	52                   	push   edx
c0010946:	6a 00                	push   0x0
c0010948:	6a 00                	push   0x0
c001094a:	53                   	push   ebx
c001094b:	e8 dc fb ff ff       	call   c001052c <VgaText::setCursor(int, int)>
c0010950:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010957:	83 c4 10             	add    esp,0x10
c001095a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001095d:	7e 20                	jle    c001097f <VgaText::clearScreen()+0x43>
c001095f:	31 ff                	xor    edi,edi
c0010961:	50                   	push   eax
c0010962:	50                   	push   eax
c0010963:	56                   	push   esi
c0010964:	57                   	push   edi
c0010965:	47                   	inc    edi
c0010966:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010969:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001096c:	6a 20                	push   0x20
c001096e:	53                   	push   ebx
c001096f:	e8 4c fb ff ff       	call   c00104c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010974:	83 c4 20             	add    esp,0x20
c0010977:	83 ff 50             	cmp    edi,0x50
c001097a:	75 e5                	jne    c0010961 <VgaText::clearScreen()+0x25>
c001097c:	46                   	inc    esi
c001097d:	eb db                	jmp    c001095a <VgaText::clearScreen()+0x1e>
c001097f:	83 ec 0c             	sub    esp,0xc
c0010982:	53                   	push   ebx
c0010983:	e8 2e fe ff ff       	call   c00107b6 <VgaText::doUpdate()>
c0010988:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	5b                   	pop    ebx
c0010993:	5e                   	pop    esi
c0010994:	5f                   	pop    edi
c0010995:	c3                   	ret    

c0010996 <VgaText::putchar(char)>:
c0010996:	56                   	push   esi
c0010997:	53                   	push   ebx
c0010998:	83 ec 14             	sub    esp,0x14
c001099b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001099f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109a3:	3c 5b                	cmp    al,0x5b
c00109a5:	75 18                	jne    c00109bf <VgaText::putchar(char)+0x29>
c00109a7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109ab:	74 1f                	je     c00109cc <VgaText::putchar(char)+0x36>
c00109ad:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109b3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109ba:	e9 bd 00 00 00       	jmp    c0010a7c <VgaText::putchar(char)+0xe6>
c00109bf:	3c 1b                	cmp    al,0x1b
c00109c1:	75 09                	jne    c00109cc <VgaText::putchar(char)+0x36>
c00109c3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109c7:	e9 b0 00 00 00       	jmp    c0010a7c <VgaText::putchar(char)+0xe6>
c00109cc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109cf:	84 c9                	test   cl,cl
c00109d1:	0f 84 92 00 00 00    	je     c0010a69 <VgaText::putchar(char)+0xd3>
c00109d7:	8d 50 c0             	lea    edx,[eax-0x40]
c00109da:	80 fa 3e             	cmp    dl,0x3e
c00109dd:	77 76                	ja     c0010a55 <VgaText::putchar(char)+0xbf>
c00109df:	3c 6d                	cmp    al,0x6d
c00109e1:	75 47                	jne    c0010a2a <VgaText::putchar(char)+0x94>
c00109e3:	31 f6                	xor    esi,esi
c00109e5:	31 d2                	xor    edx,edx
c00109e7:	31 c0                	xor    eax,eax
c00109e9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00109ec:	7e 2d                	jle    c0010a1b <VgaText::putchar(char)+0x85>
c00109ee:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00109f3:	80 fa 3b             	cmp    dl,0x3b
c00109f6:	75 17                	jne    c0010a0f <VgaText::putchar(char)+0x79>
c00109f8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109fc:	50                   	push   eax
c00109fd:	53                   	push   ebx
c00109fe:	e8 0b f9 ff ff       	call   c001030e <VgaText::doANSI_SGR(int)>
c0010a03:	59                   	pop    ecx
c0010a04:	31 d2                	xor    edx,edx
c0010a06:	58                   	pop    eax
c0010a07:	31 c0                	xor    eax,eax
c0010a09:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a0d:	eb 09                	jmp    c0010a18 <VgaText::putchar(char)+0x82>
c0010a0f:	6b c0 0a             	imul   eax,eax,0xa
c0010a12:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a16:	88 ca                	mov    dl,cl
c0010a18:	46                   	inc    esi
c0010a19:	eb ce                	jmp    c00109e9 <VgaText::putchar(char)+0x53>
c0010a1b:	84 d2                	test   dl,dl
c0010a1d:	74 2e                	je     c0010a4d <VgaText::putchar(char)+0xb7>
c0010a1f:	50                   	push   eax
c0010a20:	53                   	push   ebx
c0010a21:	e8 e8 f8 ff ff       	call   c001030e <VgaText::doANSI_SGR(int)>
c0010a26:	58                   	pop    eax
c0010a27:	5a                   	pop    edx
c0010a28:	eb 23                	jmp    c0010a4d <VgaText::putchar(char)+0xb7>
c0010a2a:	3c 4a                	cmp    al,0x4a
c0010a2c:	75 1f                	jne    c0010a4d <VgaText::putchar(char)+0xb7>
c0010a2e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a32:	75 19                	jne    c0010a4d <VgaText::putchar(char)+0xb7>
c0010a34:	83 ec 0c             	sub    esp,0xc
c0010a37:	53                   	push   ebx
c0010a38:	e8 ff fe ff ff       	call   c001093c <VgaText::clearScreen()>
c0010a3d:	83 c4 0c             	add    esp,0xc
c0010a40:	6a 00                	push   0x0
c0010a42:	6a 00                	push   0x0
c0010a44:	53                   	push   ebx
c0010a45:	e8 e2 fa ff ff       	call   c001052c <VgaText::setCursor(int, int)>
c0010a4a:	83 c4 10             	add    esp,0x10
c0010a4d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a53:	eb 27                	jmp    c0010a7c <VgaText::putchar(char)+0xe6>
c0010a55:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a58:	83 fa 0e             	cmp    edx,0xe
c0010a5b:	7f 1f                	jg     c0010a7c <VgaText::putchar(char)+0xe6>
c0010a5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a60:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a63:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a67:	eb 13                	jmp    c0010a7c <VgaText::putchar(char)+0xe6>
c0010a69:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a6c:	0f be c0             	movsx  eax,al
c0010a6f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a72:	50                   	push   eax
c0010a73:	53                   	push   ebx
c0010a74:	e8 71 fb ff ff       	call   c00105ea <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	83 c4 14             	add    esp,0x14
c0010a7f:	5b                   	pop    ebx
c0010a80:	5e                   	pop    esi
c0010a81:	c3                   	ret    

c0010a82 <VgaText::putx(unsigned int)>:
c0010a82:	57                   	push   edi
c0010a83:	b9 11 00 00 00       	mov    ecx,0x11
c0010a88:	56                   	push   esi
c0010a89:	be c2 ac 02 c0       	mov    esi,0xc002acc2
c0010a8e:	53                   	push   ebx
c0010a8f:	83 ec 20             	sub    esp,0x20
c0010a92:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a96:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a9a:	fc                   	cld    
c0010a9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a9d:	be 08 00 00 00       	mov    esi,0x8
c0010aa2:	50                   	push   eax
c0010aa3:	50                   	push   eax
c0010aa4:	89 d8                	mov    eax,ebx
c0010aa6:	c1 e3 04             	shl    ebx,0x4
c0010aa9:	c1 e8 1c             	shr    eax,0x1c
c0010aac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ab1:	50                   	push   eax
c0010ab2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ab6:	e8 db fe ff ff       	call   c0010996 <VgaText::putchar(char)>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	4e                   	dec    esi
c0010abf:	75 e1                	jne    c0010aa2 <VgaText::putx(unsigned int)+0x20>
c0010ac1:	83 c4 20             	add    esp,0x20
c0010ac4:	5b                   	pop    ebx
c0010ac5:	5e                   	pop    esi
c0010ac6:	5f                   	pop    edi
c0010ac7:	c3                   	ret    

c0010ac8 <VgaText::puts(char const*)>:
c0010ac8:	53                   	push   ebx
c0010ac9:	83 ec 08             	sub    esp,0x8
c0010acc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ad0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ad3:	84 c0                	test   al,al
c0010ad5:	74 12                	je     c0010ae9 <VgaText::puts(char const*)+0x21>
c0010ad7:	43                   	inc    ebx
c0010ad8:	51                   	push   ecx
c0010ad9:	51                   	push   ecx
c0010ada:	50                   	push   eax
c0010adb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010adf:	e8 b2 fe ff ff       	call   c0010996 <VgaText::putchar(char)>
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	eb e7                	jmp    c0010ad0 <VgaText::puts(char const*)+0x8>
c0010ae9:	83 c4 08             	add    esp,0x8
c0010aec:	5b                   	pop    ebx
c0010aed:	c3                   	ret    

c0010aee <VgaText::VgaText(char const*)>:
c0010aee:	57                   	push   edi
c0010aef:	56                   	push   esi
c0010af0:	53                   	push   ebx
c0010af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af5:	83 ec 08             	sub    esp,0x8
c0010af8:	6a 00                	push   0x0
c0010afa:	50                   	push   eax
c0010afb:	e8 8a 05 00 00       	call   c001108a <UnixFile::UnixFile(int)>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c0010b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0c:	89 10                	mov    DWORD PTR [eax],edx
c0010b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b12:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b28:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b30:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b38:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b43:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b59:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b64:	8d 50 60             	lea    edx,[eax+0x60]
c0010b67:	bb a0 f0 02 c0       	mov    ebx,0xc002f0a0
c0010b6c:	b8 08 00 00 00       	mov    eax,0x8
c0010b71:	fc                   	cld    
c0010b72:	89 d7                	mov    edi,edx
c0010b74:	89 de                	mov    esi,ebx
c0010b76:	89 c1                	mov    ecx,eax
c0010b78:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7e:	05 82 00 00 00       	add    eax,0x82
c0010b83:	83 ec 08             	sub    esp,0x8
c0010b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b8a:	50                   	push   eax
c0010b8b:	e8 7c fc fe ff       	call   c000080c <strcpy>
c0010b90:	83 c4 10             	add    esp,0x10
c0010b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b97:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	6a 01                	push   0x1
c0010ba3:	e8 25 09 00 00       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	89 c2                	mov    edx,eax
c0010bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bb4:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c0010bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bc1:	89 c6                	mov    esi,eax
c0010bc3:	e8 cc ef ff ff       	call   c000fb94 <Phys::allocatePage()>
c0010bc8:	6a 05                	push   0x5
c0010bca:	56                   	push   esi
c0010bcb:	50                   	push   eax
c0010bcc:	53                   	push   ebx
c0010bcd:	e8 32 11 00 00       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bdc:	83 ec 04             	sub    esp,0x4
c0010bdf:	68 00 0f 00 00       	push   0xf00
c0010be4:	6a 00                	push   0x0
c0010be6:	50                   	push   eax
c0010be7:	e8 64 fb fe ff       	call   c0000750 <memset>
c0010bec:	83 c4 10             	add    esp,0x10
c0010bef:	83 ec 04             	sub    esp,0x4
c0010bf2:	6a 00                	push   0x0
c0010bf4:	6a 07                	push   0x7
c0010bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bfa:	e8 a3 f7 ff ff       	call   c00103a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010bff:	83 c4 10             	add    esp,0x10
c0010c02:	83 ec 08             	sub    esp,0x8
c0010c05:	6a 02                	push   0x2
c0010c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c0b:	e8 c6 fa ff ff       	call   c00106d6 <VgaText::setCursorHeight(int)>
c0010c10:	83 c4 10             	add    esp,0x10
c0010c13:	83 ec 04             	sub    esp,0x4
c0010c16:	6a 00                	push   0x0
c0010c18:	6a 00                	push   0x0
c0010c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1e:	e8 09 f9 ff ff       	call   c001052c <VgaText::setCursor(int, int)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	83 ec 08             	sub    esp,0x8
c0010c29:	6a 01                	push   0x1
c0010c2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2f:	e8 9a f6 ff ff       	call   c00102ce <VgaText::showCursor(bool)>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	83 ec 08             	sub    esp,0x8
c0010c3a:	6a 01                	push   0x1
c0010c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c40:	e8 95 f6 ff ff       	call   c00102da <VgaText::disableBlink(bool)>
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	83 ec 0c             	sub    esp,0xc
c0010c4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c4f:	e8 e8 fc ff ff       	call   c001093c <VgaText::clearScreen()>
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c5b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c63:	05 02 01 00 00       	add    eax,0x102
c0010c68:	83 ec 04             	sub    esp,0x4
c0010c6b:	68 96 00 00 00       	push   0x96
c0010c70:	6a 00                	push   0x0
c0010c72:	50                   	push   eax
c0010c73:	e8 d8 fa fe ff       	call   c0000750 <memset>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7f:	05 98 01 00 00       	add    eax,0x198
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	68 2c 01 00 00       	push   0x12c
c0010c8c:	6a 00                	push   0x0
c0010c8e:	50                   	push   eax
c0010c8f:	e8 bc fa fe ff       	call   c0000750 <memset>
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	90                   	nop
c0010c98:	5b                   	pop    ebx
c0010c99:	5e                   	pop    esi
c0010c9a:	5f                   	pop    edi
c0010c9b:	c3                   	ret    

c0010c9c <VgaText::receiveKey(unsigned char)>:
c0010c9c:	55                   	push   ebp
c0010c9d:	57                   	push   edi
c0010c9e:	56                   	push   esi
c0010c9f:	53                   	push   ebx
c0010ca0:	83 ec 1c             	sub    esp,0x1c
c0010ca3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ca7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cab:	84 db                	test   bl,bl
c0010cad:	0f 84 c9 00 00 00    	je     c0010d7c <VgaText::receiveKey(unsigned char)+0xe0>
c0010cb3:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010cb9:	80 fb 08             	cmp    bl,0x8
c0010cbc:	75 2c                	jne    c0010cea <VgaText::receiveKey(unsigned char)+0x4e>
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	57                   	push   edi
c0010cc2:	e8 a5 fa fe ff       	call   c000076c <strlen>
c0010cc7:	83 c4 10             	add    esp,0x10
c0010cca:	85 c0                	test   eax,eax
c0010ccc:	74 41                	je     c0010d0f <VgaText::receiveKey(unsigned char)+0x73>
c0010cce:	50                   	push   eax
c0010ccf:	50                   	push   eax
c0010cd0:	6a 08                	push   0x8
c0010cd2:	56                   	push   esi
c0010cd3:	e8 be fc ff ff       	call   c0010996 <VgaText::putchar(char)>
c0010cd8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cdb:	e8 8c fa fe ff       	call   c000076c <strlen>
c0010ce0:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010ce8:	eb 22                	jmp    c0010d0c <VgaText::receiveKey(unsigned char)+0x70>
c0010cea:	0f be c3             	movsx  eax,bl
c0010ced:	52                   	push   edx
c0010cee:	52                   	push   edx
c0010cef:	50                   	push   eax
c0010cf0:	56                   	push   esi
c0010cf1:	e8 a0 fc ff ff       	call   c0010996 <VgaText::putchar(char)>
c0010cf6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010cfa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010cff:	59                   	pop    ecx
c0010d00:	5d                   	pop    ebp
c0010d01:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d05:	50                   	push   eax
c0010d06:	57                   	push   edi
c0010d07:	e8 40 fc fe ff       	call   c000094c <strcat>
c0010d0c:	83 c4 10             	add    esp,0x10
c0010d0f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d16:	75 05                	jne    c0010d1d <VgaText::receiveKey(unsigned char)+0x81>
c0010d18:	80 fb 0a             	cmp    bl,0xa
c0010d1b:	75 53                	jne    c0010d70 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d1d:	83 ec 0c             	sub    esp,0xc
c0010d20:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d26:	53                   	push   ebx
c0010d27:	e8 40 fa fe ff       	call   c000076c <strlen>
c0010d2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d2f:	89 c5                	mov    ebp,eax
c0010d31:	e8 36 fa fe ff       	call   c000076c <strlen>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d3d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d42:	76 10                	jbe    c0010d54 <VgaText::receiveKey(unsigned char)+0xb8>
c0010d44:	83 ec 0c             	sub    esp,0xc
c0010d47:	68 d3 ac 02 c0       	push   0xc002acd3
c0010d4c:	e8 b8 95 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	50                   	push   eax
c0010d55:	50                   	push   eax
c0010d56:	57                   	push   edi
c0010d57:	53                   	push   ebx
c0010d58:	e8 ef fb fe ff       	call   c000094c <strcat>
c0010d5d:	83 c4 0c             	add    esp,0xc
c0010d60:	68 96 00 00 00       	push   0x96
c0010d65:	6a 00                	push   0x0
c0010d67:	57                   	push   edi
c0010d68:	e8 e3 f9 fe ff       	call   c0000750 <memset>
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	83 ec 0c             	sub    esp,0xc
c0010d73:	56                   	push   esi
c0010d74:	e8 3d fa ff ff       	call   c00107b6 <VgaText::doUpdate()>
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	83 c4 1c             	add    esp,0x1c
c0010d7f:	5b                   	pop    ebx
c0010d80:	5e                   	pop    esi
c0010d81:	5f                   	pop    edi
c0010d82:	5d                   	pop    ebp
c0010d83:	c3                   	ret    

c0010d84 <VgaText::write(unsigned long long, void*, int*)>:
c0010d84:	55                   	push   ebp
c0010d85:	57                   	push   edi
c0010d86:	56                   	push   esi
c0010d87:	53                   	push   ebx
c0010d88:	83 ec 0c             	sub    esp,0xc
c0010d8b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d8f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d93:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d97:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d9e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010da1:	39 eb                	cmp    ebx,ebp
c0010da3:	74 13                	je     c0010db8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010da5:	43                   	inc    ebx
c0010da6:	50                   	push   eax
c0010da7:	50                   	push   eax
c0010da8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010dac:	50                   	push   eax
c0010dad:	56                   	push   esi
c0010dae:	e8 e3 fb ff ff       	call   c0010996 <VgaText::putchar(char)>
c0010db3:	83 c4 10             	add    esp,0x10
c0010db6:	eb e9                	jmp    c0010da1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010db8:	83 ec 0c             	sub    esp,0xc
c0010dbb:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dc2:	56                   	push   esi
c0010dc3:	e8 ee f9 ff ff       	call   c00107b6 <VgaText::doUpdate()>
c0010dc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010dcc:	89 38                	mov    DWORD PTR [eax],edi
c0010dce:	83 c4 1c             	add    esp,0x1c
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	5b                   	pop    ebx
c0010dd4:	5e                   	pop    esi
c0010dd5:	5f                   	pop    edi
c0010dd6:	5d                   	pop    ebp
c0010dd7:	c3                   	ret    

c0010dd8 <newTerminal(char*)>:
c0010dd8:	83 ec 28             	sub    esp,0x28
c0010ddb:	68 c4 02 00 00       	push   0x2c4
c0010de0:	e8 a7 ea ff ff       	call   c000f88c <malloc>
c0010de5:	5a                   	pop    edx
c0010de6:	59                   	pop    ecx
c0010de7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010deb:	50                   	push   eax
c0010dec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010df0:	e8 f9 fc ff ff       	call   c0010aee <VgaText::VgaText(char const*)>
c0010df5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010df9:	83 c4 2c             	add    esp,0x2c
c0010dfc:	c3                   	ret    
c0010dfd:	90                   	nop

c0010dfe <TSS::TSS()>:
c0010dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e09:	90                   	nop
c0010e0a:	c3                   	ret    
c0010e0b:	90                   	nop

c0010e0c <TSS::setESP(unsigned long)>:
c0010e0c:	55                   	push   ebp
c0010e0d:	89 e5                	mov    ebp,esp
c0010e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e18:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e1b:	90                   	nop
c0010e1c:	5d                   	pop    ebp
c0010e1d:	c3                   	ret    

c0010e1e <TSS::flush()>:
c0010e1e:	55                   	push   ebp
c0010e1f:	89 e5                	mov    ebp,esp
c0010e21:	83 ec 10             	sub    esp,0x10
c0010e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e29:	83 c8 03             	or     eax,0x3
c0010e2c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e30:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e34:	66 89 d0             	mov    ax,dx
c0010e37:	0f 00 d8             	ltr    ax
c0010e3a:	90                   	nop
c0010e3b:	c9                   	leave  
c0010e3c:	c3                   	ret    
c0010e3d:	90                   	nop

c0010e3e <TSS::setup(unsigned long, unsigned long)>:
c0010e3e:	55                   	push   ebp
c0010e3f:	89 e5                	mov    ebp,esp
c0010e41:	83 ec 18             	sub    esp,0x18
c0010e44:	83 ec 0c             	sub    esp,0xc
c0010e47:	6a 68                	push   0x68
c0010e49:	e8 3e ea ff ff       	call   c000f88c <malloc>
c0010e4e:	83 c4 10             	add    esp,0x10
c0010e51:	89 c2                	mov    edx,eax
c0010e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e56:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5f:	83 ec 04             	sub    esp,0x4
c0010e62:	6a 68                	push   0x68
c0010e64:	6a 00                	push   0x0
c0010e66:	50                   	push   eax
c0010e67:	e8 e4 f8 fe ff       	call   c0000750 <memset>
c0010e6c:	83 c4 10             	add    esp,0x10
c0010e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e75:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e81:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e99:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea5:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb1:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebd:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec9:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed5:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ee4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ef0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef9:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f06:	0f 20 da             	mov    edx,cr3
c0010f09:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f0c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f0f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f18:	83 ec 08             	sub    esp,0x8
c0010f1b:	50                   	push   eax
c0010f1c:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f1f:	50                   	push   eax
c0010f20:	e8 43 e1 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010f25:	83 c4 10             	add    esp,0x10
c0010f28:	83 ec 08             	sub    esp,0x8
c0010f2b:	6a 68                	push   0x68
c0010f2d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f30:	50                   	push   eax
c0010f31:	e8 4e e1 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010f36:	83 c4 10             	add    esp,0x10
c0010f39:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f3d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f40:	83 e0 0f             	and    eax,0xf
c0010f43:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f46:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f49:	83 c8 40             	or     eax,0x40
c0010f4c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f4f:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0010f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f5a:	05 78 01 00 00       	add    eax,0x178
c0010f5f:	83 ec 04             	sub    esp,0x4
c0010f62:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f65:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f68:	50                   	push   eax
c0010f69:	e8 4a e1 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	89 c2                	mov    edx,eax
c0010f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f76:	89 10                	mov    DWORD PTR [eax],edx
c0010f78:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0010f7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f83:	05 78 01 00 00       	add    eax,0x178
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	50                   	push   eax
c0010f8c:	e8 6b e1 ff ff       	call   c000f0fc <GDT::flush()>
c0010f91:	83 c4 10             	add    esp,0x10
c0010f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f97:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f99:	83 ec 08             	sub    esp,0x8
c0010f9c:	50                   	push   eax
c0010f9d:	68 3c ad 02 c0       	push   0xc002ad3c
c0010fa2:	e8 2c 19 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0010fa7:	83 c4 10             	add    esp,0x10
c0010faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fad:	8b 00                	mov    eax,DWORD PTR [eax]
c0010faf:	c9                   	leave  
c0010fb0:	c3                   	ret    
c0010fb1:	90                   	nop

c0010fb2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fbd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fc2:	75 08                	jne    c0010fcc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fc4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fca:	eb 38                	jmp    c0011004 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fcc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fd1:	75 17                	jne    c0010fea <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fdb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fe1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fe7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010fea:	89 c1                	mov    ecx,eax
c0010fec:	83 e1 fd             	and    ecx,0xfffffffd
c0010fef:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ff5:	74 cd                	je     c0010fc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ff7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010ffc:	83 e0 ef             	and    eax,0xffffffef
c0010fff:	83 f8 08             	cmp    eax,0x8
c0011002:	76 c0                	jbe    c0010fc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011004:	31 c0                	xor    eax,eax
c0011006:	c3                   	ret    
c0011007:	90                   	nop

c0011008 <ReservedFilename::isAtty()>:
c0011008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001100c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001100f:	31 c0                	xor    eax,eax
c0011011:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011017:	74 09                	je     c0011022 <ReservedFilename::isAtty()+0x1a>
c0011019:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001101f:	0f 94 c0             	sete   al
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011028:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001102c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001102f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011033:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011038:	75 08                	jne    c0011042 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001103a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011040:	eb 3d                	jmp    c001107f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011042:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011047:	75 17                	jne    c0011060 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001104e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011051:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011057:	8b 10                	mov    edx,DWORD PTR [eax]
c0011059:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001105d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011060:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011065:	75 04                	jne    c001106b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011067:	89 0a                	mov    DWORD PTR [edx],ecx
c0011069:	eb 14                	jmp    c001107f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001106b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011070:	74 c8                	je     c001103a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011072:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011077:	83 e0 ef             	and    eax,0xffffffef
c001107a:	83 f8 08             	cmp    eax,0x8
c001107d:	76 bb                	jbe    c001103a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001107f:	31 c0                	xor    eax,eax
c0011081:	c3                   	ret    

c0011082 <UnixFile::getFileDescriptor()>:
c0011082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011089:	c3                   	ret    

c001108a <UnixFile::UnixFile(int)>:
c001108a:	53                   	push   ebx
c001108b:	83 ec 28             	sub    esp,0x28
c001108e:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c0011093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011097:	89 10                	mov    DWORD PTR [eax],edx
c0011099:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00110a1:	0f 8f 8c 01 00 00    	jg     c0011233 <UnixFile::UnixFile(int)+0x1a9>
c00110a7:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c00110ac:	8d 50 01             	lea    edx,[eax+0x1]
c00110af:	89 15 a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,edx
c00110b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110bc:	83 ec 08             	sub    esp,0x8
c00110bf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110c3:	68 58 f1 02 c0       	push   0xc002f158
c00110c8:	e8 bf 7e 01 00       	call   c0028f8c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110cd:	83 c4 10             	add    esp,0x10
c00110d0:	a0 54 f1 02 c0       	mov    al,ds:0xc002f154
c00110d5:	83 f0 01             	xor    eax,0x1
c00110d8:	84 c0                	test   al,al
c00110da:	0f 84 54 01 00 00    	je     c0011234 <UnixFile::UnixFile(int)+0x1aa>
c00110e0:	c6 05 54 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f154,0x1
c00110e7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00110ef:	83 ec 0c             	sub    esp,0xc
c00110f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f6:	e8 91 e7 ff ff       	call   c000f88c <malloc>
c00110fb:	83 c4 10             	add    esp,0x10
c00110fe:	89 c3                	mov    ebx,eax
c0011100:	83 ec 08             	sub    esp,0x8
c0011103:	68 03 ff ff 0f       	push   0xfffff03
c0011108:	53                   	push   ebx
c0011109:	e8 2c 01 00 00       	call   c001123a <ReservedFilename::ReservedFilename(int)>
c001110e:	83 c4 10             	add    esp,0x10
c0011111:	89 1d 4c f1 02 c0    	mov    DWORD PTR ds:0xc002f14c,ebx
c0011117:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001111f:	83 ec 0c             	sub    esp,0xc
c0011122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011126:	e8 61 e7 ff ff       	call   c000f88c <malloc>
c001112b:	83 c4 10             	add    esp,0x10
c001112e:	89 c3                	mov    ebx,eax
c0011130:	83 ec 08             	sub    esp,0x8
c0011133:	68 01 ff ff 0f       	push   0xfffff01
c0011138:	53                   	push   ebx
c0011139:	e8 fc 00 00 00       	call   c001123a <ReservedFilename::ReservedFilename(int)>
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	89 1d 50 f1 02 c0    	mov    DWORD PTR ds:0xc002f150,ebx
c0011147:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001114f:	83 ec 0c             	sub    esp,0xc
c0011152:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011156:	e8 31 e7 ff ff       	call   c000f88c <malloc>
c001115b:	83 c4 10             	add    esp,0x10
c001115e:	89 c3                	mov    ebx,eax
c0011160:	83 ec 08             	sub    esp,0x8
c0011163:	68 00 ff ff 0f       	push   0xfffff00
c0011168:	53                   	push   ebx
c0011169:	e8 cc 00 00 00       	call   c001123a <ReservedFilename::ReservedFilename(int)>
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	89 1d 44 f1 02 c0    	mov    DWORD PTR ds:0xc002f144,ebx
c0011177:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001117f:	83 ec 0c             	sub    esp,0xc
c0011182:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011186:	e8 01 e7 ff ff       	call   c000f88c <malloc>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	89 c3                	mov    ebx,eax
c0011190:	83 ec 08             	sub    esp,0x8
c0011193:	68 02 ff ff 0f       	push   0xfffff02
c0011198:	53                   	push   ebx
c0011199:	e8 9c 00 00 00       	call   c001123a <ReservedFilename::ReservedFilename(int)>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	89 1d 48 f1 02 c0    	mov    DWORD PTR ds:0xc002f148,ebx
c00111a7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111af:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111b4:	7f 7e                	jg     c0011234 <UnixFile::UnixFile(int)+0x1aa>
c00111b6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111be:	83 ec 0c             	sub    esp,0xc
c00111c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111c5:	e8 c2 e6 ff ff       	call   c000f88c <malloc>
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	89 c3                	mov    ebx,eax
c00111cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111d3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111d8:	83 ec 08             	sub    esp,0x8
c00111db:	50                   	push   eax
c00111dc:	53                   	push   ebx
c00111dd:	e8 58 00 00 00       	call   c001123a <ReservedFilename::ReservedFilename(int)>
c00111e2:	83 c4 10             	add    esp,0x10
c00111e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111e9:	89 1c 85 20 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ee0],ebx
c00111f0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111f8:	83 ec 0c             	sub    esp,0xc
c00111fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111ff:	e8 88 e6 ff ff       	call   c000f88c <malloc>
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	89 c3                	mov    ebx,eax
c0011209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001120d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011212:	83 ec 08             	sub    esp,0x8
c0011215:	50                   	push   eax
c0011216:	53                   	push   ebx
c0011217:	e8 1e 00 00 00       	call   c001123a <ReservedFilename::ReservedFilename(int)>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011223:	89 1c 85 e0 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f20],ebx
c001122a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001122e:	e9 7c ff ff ff       	jmp    c00111af <UnixFile::UnixFile(int)+0x125>
c0011233:	90                   	nop
c0011234:	83 c4 28             	add    esp,0x28
c0011237:	5b                   	pop    ebx
c0011238:	c3                   	ret    
c0011239:	90                   	nop

c001123a <ReservedFilename::ReservedFilename(int)>:
c001123a:	83 ec 0c             	sub    esp,0xc
c001123d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011241:	83 ec 08             	sub    esp,0x8
c0011244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011248:	50                   	push   eax
c0011249:	e8 3c fe ff ff       	call   c001108a <UnixFile::UnixFile(int)>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0011256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125a:	89 10                	mov    DWORD PTR [eax],edx
c001125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011260:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011264:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011267:	90                   	nop
c0011268:	83 c4 0c             	add    esp,0xc
c001126b:	c3                   	ret    

c001126c <UnixFile::~UnixFile()>:
c001126c:	83 ec 1c             	sub    esp,0x1c
c001126f:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c0011274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011278:	89 10                	mov    DWORD PTR [eax],edx
c001127a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001127e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011281:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011286:	7f 73                	jg     c00112fb <UnixFile::~UnixFile()+0x8f>
c0011288:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011290:	83 ec 0c             	sub    esp,0xc
c0011293:	68 58 f1 02 c0       	push   0xc002f158
c0011298:	e8 c3 7d 01 00       	call   c0029060 <LinkedList<UnixFile>::getFirstElement()>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112a4:	83 ec 0c             	sub    esp,0xc
c00112a7:	68 58 f1 02 c0       	push   0xc002f158
c00112ac:	e8 b7 7d 01 00       	call   c0029068 <LinkedList<UnixFile>::removeFirst()>
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112b8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112bc:	74 40                	je     c00112fe <UnixFile::~UnixFile()+0x92>
c00112be:	83 ec 08             	sub    esp,0x8
c00112c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112c5:	68 58 f1 02 c0       	push   0xc002f158
c00112ca:	e8 bd 7c 01 00       	call   c0028f8c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112d6:	8d 50 01             	lea    edx,[eax+0x1]
c00112d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112dd:	3d 88 13 00 00       	cmp    eax,0x1388
c00112e2:	0f 94 c0             	sete   al
c00112e5:	84 c0                	test   al,al
c00112e7:	74 a7                	je     c0011290 <UnixFile::~UnixFile()+0x24>
c00112e9:	83 ec 0c             	sub    esp,0xc
c00112ec:	68 00 ae 02 c0       	push   0xc002ae00
c00112f1:	e8 13 90 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	eb 95                	jmp    c0011290 <UnixFile::~UnixFile()+0x24>
c00112fb:	90                   	nop
c00112fc:	eb 01                	jmp    c00112ff <UnixFile::~UnixFile()+0x93>
c00112fe:	90                   	nop
c00112ff:	90                   	nop
c0011300:	83 c4 1c             	add    esp,0x1c
c0011303:	c3                   	ret    

c0011304 <UnixFile::~UnixFile()>:
c0011304:	83 ec 0c             	sub    esp,0xc
c0011307:	83 ec 0c             	sub    esp,0xc
c001130a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130e:	e8 59 ff ff ff       	call   c001126c <UnixFile::~UnixFile()>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	83 ec 08             	sub    esp,0x8
c0011319:	6a 0c                	push   0xc
c001131b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131f:	e8 cf 14 00 00       	call   c00127f3 <operator delete(void*, unsigned long)>
c0011324:	83 c4 10             	add    esp,0x10
c0011327:	83 c4 0c             	add    esp,0xc
c001132a:	c3                   	ret    
c001132b:	90                   	nop

c001132c <ReservedFilename::~ReservedFilename()>:
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0011334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011338:	89 10                	mov    DWORD PTR [eax],edx
c001133a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133e:	83 ec 0c             	sub    esp,0xc
c0011341:	50                   	push   eax
c0011342:	e8 25 ff ff ff       	call   c001126c <UnixFile::~UnixFile()>
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	90                   	nop
c001134b:	83 c4 0c             	add    esp,0xc
c001134e:	c3                   	ret    
c001134f:	90                   	nop

c0011350 <ReservedFilename::~ReservedFilename()>:
c0011350:	83 ec 0c             	sub    esp,0xc
c0011353:	83 ec 0c             	sub    esp,0xc
c0011356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135a:	e8 cd ff ff ff       	call   c001132c <ReservedFilename::~ReservedFilename()>
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	83 ec 08             	sub    esp,0x8
c0011365:	6a 0c                	push   0xc
c0011367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001136b:	e8 83 14 00 00       	call   c00127f3 <operator delete(void*, unsigned long)>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	83 c4 0c             	add    esp,0xc
c0011376:	c3                   	ret    

c0011377 <getFromFileDescriptor(int)>:
c0011377:	53                   	push   ebx
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001137f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011385:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001138b:	7f 2c                	jg     c00113b9 <getFromFileDescriptor(int)+0x42>
c001138d:	83 ec 0c             	sub    esp,0xc
c0011390:	68 58 f1 02 c0       	push   0xc002f158
c0011395:	e8 c6 7c 01 00       	call   c0029060 <LinkedList<UnixFile>::getFirstElement()>
c001139a:	83 c4 10             	add    esp,0x10
c001139d:	85 c0                	test   eax,eax
c001139f:	75 04                	jne    c00113a5 <getFromFileDescriptor(int)+0x2e>
c00113a1:	31 c0                	xor    eax,eax
c00113a3:	eb 6e                	jmp    c0011413 <getFromFileDescriptor(int)+0x9c>
c00113a5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00113a8:	74 69                	je     c0011413 <getFromFileDescriptor(int)+0x9c>
c00113aa:	52                   	push   edx
c00113ab:	52                   	push   edx
c00113ac:	50                   	push   eax
c00113ad:	68 58 f1 02 c0       	push   0xc002f158
c00113b2:	e8 53 7d 01 00       	call   c002910a <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113b7:	eb e1                	jmp    c001139a <getFromFileDescriptor(int)+0x23>
c00113b9:	a1 4c f1 02 c0       	mov    eax,ds:0xc002f14c
c00113be:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113c4:	74 4d                	je     c0011413 <getFromFileDescriptor(int)+0x9c>
c00113c6:	a1 50 f1 02 c0       	mov    eax,ds:0xc002f150
c00113cb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113d1:	74 40                	je     c0011413 <getFromFileDescriptor(int)+0x9c>
c00113d3:	a1 48 f1 02 c0       	mov    eax,ds:0xc002f148
c00113d8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113de:	74 33                	je     c0011413 <getFromFileDescriptor(int)+0x9c>
c00113e0:	a1 44 f1 02 c0       	mov    eax,ds:0xc002f144
c00113e5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113eb:	74 26                	je     c0011413 <getFromFileDescriptor(int)+0x9c>
c00113ed:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00113f3:	83 f8 08             	cmp    eax,0x8
c00113f6:	77 09                	ja     c0011401 <getFromFileDescriptor(int)+0x8a>
c00113f8:	8b 04 85 20 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ee0]
c00113ff:	eb 12                	jmp    c0011413 <getFromFileDescriptor(int)+0x9c>
c0011401:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011407:	83 fb 08             	cmp    ebx,0x8
c001140a:	77 95                	ja     c00113a1 <getFromFileDescriptor(int)+0x2a>
c001140c:	8b 04 9d e0 f0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0f20]
c0011413:	83 c4 08             	add    esp,0x8
c0011416:	5b                   	pop    ebx
c0011417:	c3                   	ret    

c0011418 <__static_initialization_and_destruction_0(int, int)>:
c0011418:	83 ec 0c             	sub    esp,0xc
c001141b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011420:	75 34                	jne    c0011456 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011422:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001142a:	75 2a                	jne    c0011456 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001142c:	83 ec 0c             	sub    esp,0xc
c001142f:	68 58 f1 02 c0       	push   0xc002f158
c0011434:	e8 fb 7a 01 00       	call   c0028f34 <LinkedList<UnixFile>::LinkedList()>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	83 ec 04             	sub    esp,0x4
c001143f:	68 bc dd 02 c0       	push   0xc002ddbc
c0011444:	68 58 f1 02 c0       	push   0xc002f158
c0011449:	68 32 8f 02 c0       	push   0xc0028f32
c001144e:	e8 1a 13 00 00       	call   c001276d <__cxa_atexit>
c0011453:	83 c4 10             	add    esp,0x10
c0011456:	90                   	nop
c0011457:	83 c4 0c             	add    esp,0xc
c001145a:	c3                   	ret    

c001145b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001145b:	83 ec 0c             	sub    esp,0xc
c001145e:	83 ec 08             	sub    esp,0x8
c0011461:	68 ff ff 00 00       	push   0xffff
c0011466:	6a 01                	push   0x1
c0011468:	e8 ab ff ff ff       	call   c0011418 <__static_initialization_and_destruction_0(int, int)>
c001146d:	83 c4 10             	add    esp,0x10
c0011470:	83 c4 0c             	add    esp,0xc
c0011473:	c3                   	ret    

c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011474:	53                   	push   ebx
c0011475:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001147d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011483:	89 c8                	mov    eax,ecx
c0011485:	d1 e8                	shr    eax,1
c0011487:	03 05 a8 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfa8
c001148d:	83 e1 01             	and    ecx,0x1
c0011490:	8a 10                	mov    dl,BYTE PTR [eax]
c0011492:	75 09                	jne    c001149d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011494:	83 e2 f0             	and    edx,0xfffffff0
c0011497:	09 da                	or     edx,ebx
c0011499:	88 10                	mov    BYTE PTR [eax],dl
c001149b:	5b                   	pop    ebx
c001149c:	c3                   	ret    
c001149d:	c1 e3 04             	shl    ebx,0x4
c00114a0:	83 e2 0f             	and    edx,0xf
c00114a3:	09 da                	or     edx,ebx
c00114a5:	88 10                	mov    BYTE PTR [eax],dl
c00114a7:	5b                   	pop    ebx
c00114a8:	c3                   	ret    

c00114a9 <Virt::getPageState(unsigned long)>:
c00114a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114ad:	8b 0d a8 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfa8
c00114b3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114b9:	89 d0                	mov    eax,edx
c00114bb:	d1 e8                	shr    eax,1
c00114bd:	83 e2 01             	and    edx,0x1
c00114c0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114c3:	75 04                	jne    c00114c9 <Virt::getPageState(unsigned long)+0x20>
c00114c5:	83 e0 0f             	and    eax,0xf
c00114c8:	c3                   	ret    
c00114c9:	c0 e8 04             	shr    al,0x4
c00114cc:	c3                   	ret    

c00114cd <Virt::allocateKernelVirtualPages(int)>:
c00114cd:	55                   	push   ebp
c00114ce:	31 ed                	xor    ebp,ebp
c00114d0:	57                   	push   edi
c00114d1:	56                   	push   esi
c00114d2:	53                   	push   ebx
c00114d3:	31 db                	xor    ebx,ebx
c00114d5:	83 ec 1c             	sub    esp,0x1c
c00114d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114dc:	8b 3d a4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa4
c00114e2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114e7:	57                   	push   edi
c00114e8:	e8 bc ff ff ff       	call   c00114a9 <Virt::getPageState(unsigned long)>
c00114ed:	5a                   	pop    edx
c00114ee:	84 c0                	test   al,al
c00114f0:	75 3a                	jne    c001152c <Virt::allocateKernelVirtualPages(int)+0x5f>
c00114f2:	85 db                	test   ebx,ebx
c00114f4:	75 02                	jne    c00114f8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00114f6:	89 fd                	mov    ebp,edi
c00114f8:	43                   	inc    ebx
c00114f9:	39 f3                	cmp    ebx,esi
c00114fb:	74 5a                	je     c0011557 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114fd:	47                   	inc    edi
c00114fe:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011504:	76 31                	jbe    c0011537 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011506:	c7 05 a4 df 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dfa4,0xc8000
c0011510:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011515:	75 28                	jne    c001153f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011517:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001151c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011521:	57                   	push   edi
c0011522:	e8 82 ff ff ff       	call   c00114a9 <Virt::getPageState(unsigned long)>
c0011527:	5a                   	pop    edx
c0011528:	84 c0                	test   al,al
c001152a:	74 c6                	je     c00114f2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001152c:	31 db                	xor    ebx,ebx
c001152e:	47                   	inc    edi
c001152f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011535:	77 cf                	ja     c0011506 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011537:	89 3d a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,edi
c001153d:	eb a8                	jmp    c00114e7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001153f:	83 ec 0c             	sub    esp,0xc
c0011542:	68 58 ae 02 c0       	push   0xc002ae58
c0011547:	e8 bd 8d 00 00       	call   c001a309 <Krnl::panic(char const*)>
c001154c:	8b 3d a4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa4
c0011552:	83 c4 10             	add    esp,0x10
c0011555:	eb 90                	jmp    c00114e7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011557:	89 2d a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,ebp
c001155d:	4b                   	dec    ebx
c001155e:	74 5f                	je     c00115bf <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011560:	85 f6                	test   esi,esi
c0011562:	74 3d                	je     c00115a1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011564:	89 e8                	mov    eax,ebp
c0011566:	31 db                	xor    ebx,ebx
c0011568:	8d 7e ff             	lea    edi,[esi-0x1]
c001156b:	eb 14                	jmp    c0011581 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001156d:	6a 01                	push   0x1
c001156f:	43                   	inc    ebx
c0011570:	50                   	push   eax
c0011571:	e8 fe fe ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011576:	58                   	pop    eax
c0011577:	39 f3                	cmp    ebx,esi
c0011579:	5a                   	pop    edx
c001157a:	74 25                	je     c00115a1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001157c:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c0011581:	8d 50 01             	lea    edx,[eax+0x1]
c0011584:	85 db                	test   ebx,ebx
c0011586:	89 15 a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,edx
c001158c:	74 20                	je     c00115ae <Virt::allocateKernelVirtualPages(int)+0xe1>
c001158e:	39 df                	cmp    edi,ebx
c0011590:	75 db                	jne    c001156d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011592:	6a 03                	push   0x3
c0011594:	43                   	inc    ebx
c0011595:	50                   	push   eax
c0011596:	e8 d9 fe ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001159b:	59                   	pop    ecx
c001159c:	39 f3                	cmp    ebx,esi
c001159e:	58                   	pop    eax
c001159f:	75 db                	jne    c001157c <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115a1:	83 c4 1c             	add    esp,0x1c
c00115a4:	89 e8                	mov    eax,ebp
c00115a6:	5b                   	pop    ebx
c00115a7:	c1 e0 0c             	shl    eax,0xc
c00115aa:	5e                   	pop    esi
c00115ab:	5f                   	pop    edi
c00115ac:	5d                   	pop    ebp
c00115ad:	c3                   	ret    
c00115ae:	6a 02                	push   0x2
c00115b0:	bb 01 00 00 00       	mov    ebx,0x1
c00115b5:	50                   	push   eax
c00115b6:	e8 b9 fe ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115bb:	58                   	pop    eax
c00115bc:	5a                   	pop    edx
c00115bd:	eb bd                	jmp    c001157c <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115bf:	6a 04                	push   0x4
c00115c1:	8d 45 01             	lea    eax,[ebp+0x1]
c00115c4:	55                   	push   ebp
c00115c5:	a3 a4 df 02 c0       	mov    ds:0xc002dfa4,eax
c00115ca:	e8 a5 fe ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115cf:	59                   	pop    ecx
c00115d0:	89 e8                	mov    eax,ebp
c00115d2:	5b                   	pop    ebx
c00115d3:	c1 e0 0c             	shl    eax,0xc
c00115d6:	83 c4 1c             	add    esp,0x1c
c00115d9:	5b                   	pop    ebx
c00115da:	5e                   	pop    esi
c00115db:	5f                   	pop    edi
c00115dc:	5d                   	pop    ebp
c00115dd:	c3                   	ret    

c00115de <Virt::freeSwapfilePage(unsigned long)>:
c00115de:	53                   	push   ebx
c00115df:	8b 15 6c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f16c
c00115e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115e9:	b8 01 00 00 00       	mov    eax,0x1
c00115ee:	89 cb                	mov    ebx,ecx
c00115f0:	d3 e0                	shl    eax,cl
c00115f2:	c1 eb 05             	shr    ebx,0x5
c00115f5:	f7 d0                	not    eax
c00115f7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115fa:	5b                   	pop    ebx
c00115fb:	c3                   	ret    

c00115fc <Virt::swapIDToSector(unsigned long)>:
c00115fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011600:	0f af 05 ac df 02 c0 	imul   eax,DWORD PTR ds:0xc002dfac
c0011607:	03 05 b4 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfb4
c001160d:	c3                   	ret    

c001160e <Virt::allocateSwapfilePage()>:
c001160e:	55                   	push   ebp
c001160f:	31 d2                	xor    edx,edx
c0011611:	57                   	push   edi
c0011612:	56                   	push   esi
c0011613:	53                   	push   ebx
c0011614:	83 ec 0c             	sub    esp,0xc
c0011617:	8b 0d ac df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfac
c001161d:	a1 b0 df 02 c0       	mov    eax,ds:0xc002dfb0
c0011622:	f7 f1                	div    ecx
c0011624:	39 0d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ecx
c001162a:	72 2d                	jb     c0011659 <Virt::allocateSwapfilePage()+0x4b>
c001162c:	8b 35 6c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f16c
c0011632:	8b 16                	mov    edx,DWORD PTR [esi]
c0011634:	f6 c2 01             	test   dl,0x1
c0011637:	74 3c                	je     c0011675 <Virt::allocateSwapfilePage()+0x67>
c0011639:	31 c9                	xor    ecx,ecx
c001163b:	bf 01 00 00 00       	mov    edi,0x1
c0011640:	eb 12                	jmp    c0011654 <Virt::allocateSwapfilePage()+0x46>
c0011642:	89 fd                	mov    ebp,edi
c0011644:	89 ca                	mov    edx,ecx
c0011646:	d3 e5                	shl    ebp,cl
c0011648:	c1 ea 05             	shr    edx,0x5
c001164b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001164e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011650:	85 ea                	test   edx,ebp
c0011652:	74 2a                	je     c001167e <Virt::allocateSwapfilePage()+0x70>
c0011654:	41                   	inc    ecx
c0011655:	39 c8                	cmp    eax,ecx
c0011657:	77 e9                	ja     c0011642 <Virt::allocateSwapfilePage()+0x34>
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	68 df af 02 c0       	push   0xc002afdf
c0011661:	e8 a3 8c 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	31 c9                	xor    ecx,ecx
c001166b:	83 c4 0c             	add    esp,0xc
c001166e:	89 c8                	mov    eax,ecx
c0011670:	5b                   	pop    ebx
c0011671:	5e                   	pop    esi
c0011672:	5f                   	pop    edi
c0011673:	5d                   	pop    ebp
c0011674:	c3                   	ret    
c0011675:	89 f3                	mov    ebx,esi
c0011677:	bd 01 00 00 00       	mov    ebp,0x1
c001167c:	31 c9                	xor    ecx,ecx
c001167e:	09 ea                	or     edx,ebp
c0011680:	89 c8                	mov    eax,ecx
c0011682:	89 13                	mov    DWORD PTR [ebx],edx
c0011684:	83 c4 0c             	add    esp,0xc
c0011687:	5b                   	pop    ebx
c0011688:	5e                   	pop    esi
c0011689:	5f                   	pop    edi
c001168a:	5d                   	pop    ebp
c001168b:	c3                   	ret    

c001168c <Virt::virtualMemorySetup()>:
c001168c:	53                   	push   ebx
c001168d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011692:	83 ec 08             	sub    esp,0x8
c0011695:	6a 0f                	push   0xf
c0011697:	53                   	push   ebx
c0011698:	43                   	inc    ebx
c0011699:	e8 d6 fd ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001169e:	59                   	pop    ecx
c001169f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116a5:	58                   	pop    eax
c00116a6:	75 ed                	jne    c0011695 <Virt::virtualMemorySetup()+0x9>
c00116a8:	83 ec 08             	sub    esp,0x8
c00116ab:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116b0:	68 00 00 00 c8       	push   0xc8000000
c00116b5:	68 f6 af 02 c0       	push   0xc002aff6
c00116ba:	e8 14 12 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00116bf:	58                   	pop    eax
c00116c0:	5a                   	pop    edx
c00116c1:	68 00 f0 ff ef       	push   0xeffff000
c00116c6:	68 0a b0 02 c0       	push   0xc002b00a
c00116cb:	e8 03 12 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00116d0:	83 c4 10             	add    esp,0x10
c00116d3:	83 ec 08             	sub    esp,0x8
c00116d6:	6a 00                	push   0x0
c00116d8:	53                   	push   ebx
c00116d9:	43                   	inc    ebx
c00116da:	e8 95 fd ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116e8:	75 e9                	jne    c00116d3 <Virt::virtualMemorySetup()+0x47>
c00116ea:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00116ef:	83 ec 08             	sub    esp,0x8
c00116f2:	6a 0f                	push   0xf
c00116f4:	53                   	push   ebx
c00116f5:	43                   	inc    ebx
c00116f6:	e8 79 fd ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011704:	75 e9                	jne    c00116ef <Virt::virtualMemorySetup()+0x63>
c0011706:	83 c4 08             	add    esp,0x8
c0011709:	5b                   	pop    ebx
c001170a:	c3                   	ret    

c001170b <Virt::setupPageSwapping(int)>:
c001170b:	57                   	push   edi
c001170c:	56                   	push   esi
c001170d:	53                   	push   ebx
c001170e:	83 ec 1c             	sub    esp,0x1c
c0011711:	68 1e b0 02 c0       	push   0xc002b01e
c0011716:	e8 b8 11 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001171b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011722:	e8 65 e1 ff ff       	call   c000f88c <malloc>
c0011727:	83 c4 0c             	add    esp,0xc
c001172a:	89 c6                	mov    esi,eax
c001172c:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c0011732:	68 32 b0 02 c0       	push   0xc002b032
c0011737:	50                   	push   eax
c0011738:	e8 f5 16 00 00       	call   c0012e32 <File::File(char const*, Process*)>
c001173d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011740:	e8 c9 18 00 00       	call   c001300e <File::unlink()>
c0011745:	59                   	pop    ecx
c0011746:	5b                   	pop    ebx
c0011747:	6a 12                	push   0x12
c0011749:	56                   	push   esi
c001174a:	e8 47 17 00 00       	call   c0012e96 <File::open(FileOpenMode)>
c001174f:	83 c4 10             	add    esp,0x10
c0011752:	85 c0                	test   eax,eax
c0011754:	0f 85 5b 01 00 00    	jne    c00118b5 <Virt::setupPageSwapping(int)+0x1aa>
c001175a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001175e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011766:	c1 e3 08             	shl    ebx,0x8
c0011769:	83 ec 0c             	sub    esp,0xc
c001176c:	68 00 00 01 00       	push   0x10000
c0011771:	e8 16 e1 ff ff       	call   c000f88c <malloc>
c0011776:	83 c4 0c             	add    esp,0xc
c0011779:	89 c7                	mov    edi,eax
c001177b:	68 00 00 01 00       	push   0x10000
c0011780:	68 ee 00 00 00       	push   0xee
c0011785:	50                   	push   eax
c0011786:	e8 c5 ef fe ff       	call   c0000750 <memset>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	85 db                	test   ebx,ebx
c0011790:	79 03                	jns    c0011795 <Virt::setupPageSwapping(int)+0x8a>
c0011792:	83 c3 0f             	add    ebx,0xf
c0011795:	c1 fb 04             	sar    ebx,0x4
c0011798:	4b                   	dec    ebx
c0011799:	83 fb ff             	cmp    ebx,0xffffffff
c001179c:	74 4f                	je     c00117ed <Virt::setupPageSwapping(int)+0xe2>
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00117a3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117a7:	52                   	push   edx
c00117a8:	57                   	push   edi
c00117a9:	6a 00                	push   0x0
c00117ab:	68 00 00 01 00       	push   0x10000
c00117b0:	56                   	push   esi
c00117b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00117b4:	83 c4 20             	add    esp,0x20
c00117b7:	85 c0                	test   eax,eax
c00117b9:	0f 85 e0 00 00 00    	jne    c001189f <Virt::setupPageSwapping(int)+0x194>
c00117bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c3:	3d 00 00 01 00       	cmp    eax,0x10000
c00117c8:	74 ce                	je     c0011798 <Virt::setupPageSwapping(int)+0x8d>
c00117ca:	83 ec 08             	sub    esp,0x8
c00117cd:	4b                   	dec    ebx
c00117ce:	50                   	push   eax
c00117cf:	68 85 b0 02 c0       	push   0xc002b085
c00117d4:	e8 fa 10 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00117d9:	c7 04 24 8e b0 02 c0 	mov    DWORD PTR [esp],0xc002b08e
c00117e0:	e8 24 8b 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	83 fb ff             	cmp    ebx,0xffffffff
c00117eb:	75 b1                	jne    c001179e <Virt::setupPageSwapping(int)+0x93>
c00117ed:	83 ec 0c             	sub    esp,0xc
c00117f0:	56                   	push   esi
c00117f1:	e8 fe 16 00 00       	call   c0012ef4 <File::close()>
c00117f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117f9:	e8 ae e0 ff ff       	call   c000f8ac <rfree>
c00117fe:	83 c4 10             	add    esp,0x10
c0011801:	85 f6                	test   esi,esi
c0011803:	74 0c                	je     c0011811 <Virt::setupPageSwapping(int)+0x106>
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	8b 06                	mov    eax,DWORD PTR [esi]
c001180a:	56                   	push   esi
c001180b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	83 ec 08             	sub    esp,0x8
c0011814:	a1 08 f6 02 c0       	mov    eax,ds:0xc002f608
c0011819:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001181f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011821:	68 32 b0 02 c0       	push   0xc002b032
c0011826:	50                   	push   eax
c0011827:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001182a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001182e:	c6 05 b8 df 02 c0 43 	mov    BYTE PTR ds:0xc002dfb8,0x43
c0011835:	c1 e2 0b             	shl    edx,0xb
c0011838:	a3 b4 df 02 c0       	mov    ds:0xc002dfb4,eax
c001183d:	89 15 b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edx
c0011843:	c7 05 ac df 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002dfac,0x8
c001184d:	c1 ea 08             	shr    edx,0x8
c0011850:	89 14 24             	mov    DWORD PTR [esp],edx
c0011853:	e8 34 e0 ff ff       	call   c000f88c <malloc>
c0011858:	83 c4 0c             	add    esp,0xc
c001185b:	89 c1                	mov    ecx,eax
c001185d:	a3 6c f1 02 c0       	mov    ds:0xc002f16c,eax
c0011862:	31 d2                	xor    edx,edx
c0011864:	a1 b0 df 02 c0       	mov    eax,ds:0xc002dfb0
c0011869:	f7 35 ac df 02 c0    	div    DWORD PTR ds:0xc002dfac
c001186f:	c1 e8 05             	shr    eax,0x5
c0011872:	50                   	push   eax
c0011873:	6a 00                	push   0x0
c0011875:	51                   	push   ecx
c0011876:	e8 d5 ee fe ff       	call   c0000750 <memset>
c001187b:	58                   	pop    eax
c001187c:	a1 b0 df 02 c0       	mov    eax,ds:0xc002dfb0
c0011881:	5a                   	pop    edx
c0011882:	31 d2                	xor    edx,edx
c0011884:	f7 35 ac df 02 c0    	div    DWORD PTR ds:0xc002dfac
c001188a:	c1 e8 05             	shr    eax,0x5
c001188d:	50                   	push   eax
c001188e:	68 94 b0 02 c0       	push   0xc002b094
c0011893:	e8 3b 10 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0011898:	83 c4 20             	add    esp,0x20
c001189b:	5b                   	pop    ebx
c001189c:	5e                   	pop    esi
c001189d:	5f                   	pop    edi
c001189e:	c3                   	ret    
c001189f:	83 ec 08             	sub    esp,0x8
c00118a2:	50                   	push   eax
c00118a3:	68 6d b0 02 c0       	push   0xc002b06d
c00118a8:	e8 26 10 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	e9 0a ff ff ff       	jmp    c00117bf <Virt::setupPageSwapping(int)+0xb4>
c00118b5:	83 ec 08             	sub    esp,0x8
c00118b8:	50                   	push   eax
c00118b9:	68 49 b0 02 c0       	push   0xc002b049
c00118be:	e8 10 10 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00118c3:	c7 04 24 52 b0 02 c0 	mov    DWORD PTR [esp],0xc002b052
c00118ca:	e8 3a 8a 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	e9 83 fe ff ff       	jmp    c001175a <Virt::setupPageSwapping(int)+0x4f>
c00118d7:	90                   	nop

c00118d8 <VAS::VAS()>:
c00118d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f2:	a3 70 f1 02 c0       	mov    ds:0xc002f170,eax
c00118f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118fb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00118ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011903:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011911:	90                   	nop
c0011912:	c3                   	ret    
c0011913:	90                   	nop

c0011914 <VAS::VAS(VAS*)>:
c0011914:	83 ec 0c             	sub    esp,0xc
c0011917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011926:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001192d:	83 ec 0c             	sub    esp,0xc
c0011930:	68 78 ae 02 c0       	push   0xc002ae78
c0011935:	e8 cf 89 00 00       	call   c001a309 <Krnl::panic(char const*)>
c001193a:	83 c4 10             	add    esp,0x10
c001193d:	90                   	nop
c001193e:	83 c4 0c             	add    esp,0xc
c0011941:	c3                   	ret    

c0011942 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011946:	89 c2                	mov    edx,eax
c0011948:	c1 e8 0a             	shr    eax,0xa
c001194b:	c1 ea 16             	shr    edx,0x16
c001194e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011953:	19 c9                	sbb    ecx,ecx
c0011955:	c1 e2 0c             	shl    edx,0xc
c0011958:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001195e:	25 fc 0f 00 00       	and    eax,0xffc
c0011963:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001196a:	01 d0                	add    eax,edx
c001196c:	c3                   	ret    
c001196d:	90                   	nop

c001196e <VAS::getPageTableEntry(unsigned long)>:
c001196e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011972:	89 ca                	mov    edx,ecx
c0011974:	c1 e9 0a             	shr    ecx,0xa
c0011977:	c1 ea 16             	shr    edx,0x16
c001197a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011980:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011986:	c1 e0 0c             	shl    eax,0xc
c0011989:	8d 04 08             	lea    eax,[eax+ecx*1]
c001198c:	c3                   	ret    

c001198d <Virt::freeKernelVirtualPages(unsigned long)>:
c001198d:	57                   	push   edi
c001198e:	56                   	push   esi
c001198f:	be 01 00 00 00       	mov    esi,0x1
c0011994:	53                   	push   ebx
c0011995:	83 ec 10             	sub    esp,0x10
c0011998:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001199c:	c1 eb 0c             	shr    ebx,0xc
c001199f:	eb 3f                	jmp    c00119e0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119a1:	83 ec 08             	sub    esp,0x8
c00119a4:	57                   	push   edi
c00119a5:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c00119ab:	e8 be ff ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c00119b0:	83 c4 10             	add    esp,0x10
c00119b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119b9:	f6 c4 04             	test   ah,0x4
c00119bc:	75 5f                	jne    c0011a1d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119be:	80 fa 04             	cmp    dl,0x4
c00119c1:	74 78                	je     c0011a3b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119c3:	80 fa 02             	cmp    dl,0x2
c00119c6:	0f 84 88 00 00 00    	je     c0011a54 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119cc:	80 fa 03             	cmp    dl,0x3
c00119cf:	0f 84 ad 00 00 00    	je     c0011a82 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119d5:	fe ca                	dec    dl
c00119d7:	0f 84 92 00 00 00    	je     c0011a6f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119dd:	43                   	inc    ebx
c00119de:	31 f6                	xor    esi,esi
c00119e0:	53                   	push   ebx
c00119e1:	89 df                	mov    edi,ebx
c00119e3:	e8 c1 fa ff ff       	call   c00114a9 <Virt::getPageState(unsigned long)>
c00119e8:	c1 e7 0c             	shl    edi,0xc
c00119eb:	59                   	pop    ecx
c00119ec:	84 c0                	test   al,al
c00119ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119f2:	75 ad                	jne    c00119a1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00119f4:	83 ec 0c             	sub    esp,0xc
c00119f7:	68 af b0 02 c0       	push   0xc002b0af
c00119fc:	e8 08 89 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0011a01:	58                   	pop    eax
c0011a02:	5a                   	pop    edx
c0011a03:	57                   	push   edi
c0011a04:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c0011a0a:	e8 5f ff ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a14:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a18:	f6 c4 04             	test   ah,0x4
c0011a1b:	74 c0                	je     c00119dd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a1d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a26:	83 ec 0c             	sub    esp,0xc
c0011a29:	50                   	push   eax
c0011a2a:	e8 0a e1 ff ff       	call   c000fb39 <Phys::freePage(unsigned long)>
c0011a2f:	83 c4 10             	add    esp,0x10
c0011a32:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a36:	80 fa 04             	cmp    dl,0x4
c0011a39:	75 88                	jne    c00119c3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a3b:	89 f0                	mov    eax,esi
c0011a3d:	84 c0                	test   al,al
c0011a3f:	75 47                	jne    c0011a88 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a41:	c7 44 24 20 9c ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae9c
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	5b                   	pop    ebx
c0011a4d:	5e                   	pop    esi
c0011a4e:	5f                   	pop    edi
c0011a4f:	e9 b5 88 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c0011a54:	89 f0                	mov    eax,esi
c0011a56:	84 c0                	test   al,al
c0011a58:	75 15                	jne    c0011a6f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a5a:	83 ec 0c             	sub    esp,0xc
c0011a5d:	68 cb b0 02 c0       	push   0xc002b0cb
c0011a62:	e8 a2 88 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	e9 6e ff ff ff       	jmp    c00119dd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a6f:	83 ec 08             	sub    esp,0x8
c0011a72:	6a 00                	push   0x0
c0011a74:	53                   	push   ebx
c0011a75:	e8 fa f9 ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	e9 5b ff ff ff       	jmp    c00119dd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a82:	89 f0                	mov    eax,esi
c0011a84:	84 c0                	test   al,al
c0011a86:	75 15                	jne    c0011a9d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	6a 00                	push   0x0
c0011a8d:	53                   	push   ebx
c0011a8e:	e8 e1 f9 ff ff       	call   c0011474 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	5b                   	pop    ebx
c0011a9a:	5e                   	pop    esi
c0011a9b:	5f                   	pop    edi
c0011a9c:	c3                   	ret    
c0011a9d:	c7 44 24 20 e7 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0e7
c0011aa5:	83 c4 10             	add    esp,0x10
c0011aa8:	5b                   	pop    ebx
c0011aa9:	5e                   	pop    esi
c0011aaa:	5f                   	pop    edi
c0011aab:	e9 59 88 00 00       	jmp    c001a309 <Krnl::panic(char const*)>

c0011ab0 <VAS::freeAllocatedPages(unsigned long)>:
c0011ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ab8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011abc:	74 09                	je     c0011ac7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011abe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ac2:	e9 c6 fe ff ff       	jmp    c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c0011ac7:	c7 44 24 04 c0 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aec0
c0011acf:	e9 ff 0d 00 00       	jmp    c00128d3 <Dbg::kprintf(char const*, ...)>

c0011ad4 <VAS::virtualToPhysical(unsigned long)>:
c0011ad4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ad8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011adc:	e8 8d fe ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c0011ae1:	5a                   	pop    edx
c0011ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ae4:	59                   	pop    ecx
c0011ae5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011aea:	c3                   	ret    
c0011aeb:	90                   	nop

c0011aec <VAS::reflagRange(unsigned long, int, int, int)>:
c0011aec:	55                   	push   ebp
c0011aed:	57                   	push   edi
c0011aee:	56                   	push   esi
c0011aef:	53                   	push   ebx
c0011af0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011af4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011af8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011afc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b00:	85 db                	test   ebx,ebx
c0011b02:	7e 22                	jle    c0011b26 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b04:	c1 e3 0c             	shl    ebx,0xc
c0011b07:	01 f3                	add    ebx,esi
c0011b09:	56                   	push   esi
c0011b0a:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b10:	55                   	push   ebp
c0011b11:	e8 58 fe ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c0011b16:	5a                   	pop    edx
c0011b17:	59                   	pop    ecx
c0011b18:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b1a:	21 f9                	and    ecx,edi
c0011b1c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b20:	39 f3                	cmp    ebx,esi
c0011b22:	89 08                	mov    DWORD PTR [eax],ecx
c0011b24:	75 e3                	jne    c0011b09 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b26:	5b                   	pop    ebx
c0011b27:	5e                   	pop    esi
c0011b28:	5f                   	pop    edi
c0011b29:	5d                   	pop    ebp
c0011b2a:	c3                   	ret    
c0011b2b:	90                   	nop

c0011b2c <VAS::setToWriteCombining(unsigned long, int)>:
c0011b2c:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0011b31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b37:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b3e:	75 01                	jne    c0011b41 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b40:	c3                   	ret    
c0011b41:	68 80 00 00 00       	push   0x80
c0011b46:	6a ff                	push   0xffffffff
c0011b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b54:	e8 93 ff ff ff       	call   c0011aec <VAS::reflagRange(unsigned long, int, int, int)>
c0011b59:	83 c4 14             	add    esp,0x14
c0011b5c:	c3                   	ret    
c0011b5d:	90                   	nop

c0011b5e <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b5e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b67:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b71:	19 c0                	sbb    eax,eax
c0011b73:	83 ca 03             	or     edx,0x3
c0011b76:	83 e0 fc             	and    eax,0xfffffffc
c0011b79:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b80:	0f 20 d8             	mov    eax,cr3
c0011b83:	0f 22 d8             	mov    cr3,eax
c0011b86:	c3                   	ret    
c0011b87:	90                   	nop

c0011b88 <VAS::~VAS()>:
c0011b88:	83 ec 2c             	sub    esp,0x2c
c0011b8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b93:	fa                   	cli    
c0011b94:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0011b99:	40                   	inc    eax
c0011b9a:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0011b9f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ba9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011baf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011bb3:	6a 01                	push   0x1
c0011bb5:	50                   	push   eax
c0011bb6:	e8 a3 ff ff ff       	call   c0011b5e <VAS::mapOtherVASIn(bool, VAS*)>
c0011bbb:	83 c4 0c             	add    esp,0xc
c0011bbe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bc6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bce:	0f 8f d4 00 00 00    	jg     c0011ca8 <VAS::~VAS()+0x120>
c0011bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bdf:	c1 e2 02             	shl    edx,0x2
c0011be2:	01 d0                	add    eax,edx
c0011be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bee:	83 e0 01             	and    eax,0x1
c0011bf1:	0f 84 a8 00 00 00    	je     c0011c9f <VAS::~VAS()+0x117>
c0011bf7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011bff:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c07:	7f 72                	jg     c0011c7b <VAS::~VAS()+0xf3>
c0011c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c0d:	c1 e0 0a             	shl    eax,0xa
c0011c10:	89 c2                	mov    edx,eax
c0011c12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c16:	01 d0                	add    eax,edx
c0011c18:	c1 e0 0c             	shl    eax,0xc
c0011c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c1f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c29:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c33:	6a 01                	push   0x1
c0011c35:	50                   	push   eax
c0011c36:	e8 07 fd ff ff       	call   c0011942 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c3b:	83 c4 0c             	add    esp,0xc
c0011c3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c50:	25 01 04 00 00       	and    eax,0x401
c0011c55:	3d 01 04 00 00       	cmp    eax,0x401
c0011c5a:	75 19                	jne    c0011c75 <VAS::~VAS()+0xed>
c0011c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c60:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c65:	83 ec 0c             	sub    esp,0xc
c0011c68:	50                   	push   eax
c0011c69:	e8 cb de ff ff       	call   c000fb39 <Phys::freePage(unsigned long)>
c0011c6e:	83 c4 10             	add    esp,0x10
c0011c71:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c75:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c79:	eb 84                	jmp    c0011bff <VAS::~VAS()+0x77>
c0011c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c7f:	25 00 04 00 00       	and    eax,0x400
c0011c84:	74 19                	je     c0011c9f <VAS::~VAS()+0x117>
c0011c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c8f:	83 ec 0c             	sub    esp,0xc
c0011c92:	50                   	push   eax
c0011c93:	e8 a1 de ff ff       	call   c000fb39 <Phys::freePage(unsigned long)>
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c9f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ca3:	e9 1e ff ff ff       	jmp    c0011bc6 <VAS::~VAS()+0x3e>
c0011ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011caf:	83 ec 0c             	sub    esp,0xc
c0011cb2:	50                   	push   eax
c0011cb3:	e8 d5 fc ff ff       	call   c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011cc2:	83 ec 0c             	sub    esp,0xc
c0011cc5:	50                   	push   eax
c0011cc6:	e8 6e de ff ff       	call   c000fb39 <Phys::freePage(unsigned long)>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cd6:	c1 e0 02             	shl    eax,0x2
c0011cd9:	83 ec 08             	sub    esp,0x8
c0011cdc:	50                   	push   eax
c0011cdd:	68 e4 ae 02 c0       	push   0xc002aee4
c0011ce2:	e8 ec 0b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0011cef:	48                   	dec    eax
c0011cf0:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0011cf5:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0011cfa:	85 c0                	test   eax,eax
c0011cfc:	75 01                	jne    c0011cff <VAS::~VAS()+0x177>
c0011cfe:	fb                   	sti    
c0011cff:	90                   	nop
c0011d00:	83 c4 2c             	add    esp,0x2c
c0011d03:	c3                   	ret    

c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d04:	55                   	push   ebp
c0011d05:	57                   	push   edi
c0011d06:	56                   	push   esi
c0011d07:	53                   	push   ebx
c0011d08:	83 ec 1c             	sub    esp,0x1c
c0011d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d13:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d19:	77 08                	ja     c0011d23 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d1b:	0f 20 d8             	mov    eax,cr3
c0011d1e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d21:	75 47                	jne    c0011d6a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d27:	09 d8                	or     eax,ebx
c0011d29:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d2e:	75 57                	jne    c0011d87 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d30:	89 de                	mov    esi,ebx
c0011d32:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d35:	c1 ee 16             	shr    esi,0x16
c0011d38:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d3f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d43:	74 54                	je     c0011d99 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d49:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d4f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d53:	c1 e6 0c             	shl    esi,0xc
c0011d56:	c1 eb 0a             	shr    ebx,0xa
c0011d59:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d5f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d62:	83 c4 1c             	add    esp,0x1c
c0011d65:	5b                   	pop    ebx
c0011d66:	5e                   	pop    esi
c0011d67:	5f                   	pop    edi
c0011d68:	5d                   	pop    ebp
c0011d69:	c3                   	ret    
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	68 04 af 02 c0       	push   0xc002af04
c0011d72:	e8 5c 0b 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d7e:	09 d8                	or     eax,ebx
c0011d80:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d85:	74 a9                	je     c0011d30 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d87:	83 ec 0c             	sub    esp,0xc
c0011d8a:	68 6c af 02 c0       	push   0xc002af6c
c0011d8f:	e8 75 85 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0011d94:	83 c4 10             	add    esp,0x10
c0011d97:	eb 97                	jmp    c0011d30 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d9d:	e8 f2 dd ff ff       	call   c000fb94 <Phys::allocatePage()>
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	89 c5                	mov    ebp,eax
c0011da7:	8b 0d 70 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f170
c0011dad:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011db1:	6a 01                	push   0x1
c0011db3:	e8 15 f7 ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c0011db8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dbf:	6a 01                	push   0x1
c0011dc1:	50                   	push   eax
c0011dc2:	55                   	push   ebp
c0011dc3:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dc9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dcd:	51                   	push   ecx
c0011dce:	e8 27 02 00 00       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd3:	83 c4 1c             	add    esp,0x1c
c0011dd6:	68 00 10 00 00       	push   0x1000
c0011ddb:	6a 00                	push   0x0
c0011ddd:	50                   	push   eax
c0011dde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de2:	e8 69 e9 fe ff       	call   c0000750 <memset>
c0011de7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011deb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dee:	e8 9a fb ff ff       	call   c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c0011df3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011df7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e00:	e9 40 ff ff ff       	jmp    c0011d45 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e05:	90                   	nop

c0011e06 <VAS::allocatePages(int, int)>:
c0011e06:	55                   	push   ebp
c0011e07:	57                   	push   edi
c0011e08:	56                   	push   esi
c0011e09:	53                   	push   ebx
c0011e0a:	83 ec 1c             	sub    esp,0x1c
c0011e0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e11:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0011e16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e1c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e22:	83 e0 01             	and    eax,0x1
c0011e25:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e29:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e2d:	0f 85 cc 00 00 00    	jne    c0011eff <VAS::allocatePages(int, int)+0xf9>
c0011e33:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e3a:	85 c0                	test   eax,eax
c0011e3c:	0f 84 a1 00 00 00    	je     c0011ee3 <VAS::allocatePages(int, int)+0xdd>
c0011e42:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e4a:	c1 e6 0c             	shl    esi,0xc
c0011e4d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e51:	85 c0                	test   eax,eax
c0011e53:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e56:	7e 33                	jle    c0011e8b <VAS::allocatePages(int, int)+0x85>
c0011e58:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e5c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e60:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e66:	e8 29 dd ff ff       	call   c000fb94 <Phys::allocatePage()>
c0011e6b:	55                   	push   ebp
c0011e6c:	53                   	push   ebx
c0011e6d:	50                   	push   eax
c0011e6e:	57                   	push   edi
c0011e6f:	e8 90 fe ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e74:	83 c4 10             	add    esp,0x10
c0011e77:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e7c:	74 03                	je     c0011e81 <VAS::allocatePages(int, int)+0x7b>
c0011e7e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e81:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e87:	39 de                	cmp    esi,ebx
c0011e89:	75 db                	jne    c0011e66 <VAS::allocatePages(int, int)+0x60>
c0011e8b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e90:	75 12                	jne    c0011ea4 <VAS::allocatePages(int, int)+0x9e>
c0011e92:	0f 20 d8             	mov    eax,cr3
c0011e95:	0f 22 d8             	mov    cr3,eax
c0011e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e9c:	83 c4 1c             	add    esp,0x1c
c0011e9f:	5b                   	pop    ebx
c0011ea0:	5e                   	pop    esi
c0011ea1:	5f                   	pop    edi
c0011ea2:	5d                   	pop    ebp
c0011ea3:	c3                   	ret    
c0011ea4:	c1 ee 0a             	shr    esi,0xa
c0011ea7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011eab:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011eb1:	c1 eb 0a             	shr    ebx,0xa
c0011eb4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011eba:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ec0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ec6:	39 c3                	cmp    ebx,eax
c0011ec8:	77 ce                	ja     c0011e98 <VAS::allocatePages(int, int)+0x92>
c0011eca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ecd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ed3:	39 d8                	cmp    eax,ebx
c0011ed5:	73 f3                	jae    c0011eca <VAS::allocatePages(int, int)+0xc4>
c0011ed7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011edb:	83 c4 1c             	add    esp,0x1c
c0011ede:	5b                   	pop    ebx
c0011edf:	5e                   	pop    esi
c0011ee0:	5f                   	pop    edi
c0011ee1:	5d                   	pop    ebp
c0011ee2:	c3                   	ret    
c0011ee3:	83 ec 0c             	sub    esp,0xc
c0011ee6:	68 90 af 02 c0       	push   0xc002af90
c0011eeb:	e8 19 84 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0011ef0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ef3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ef7:	83 c4 10             	add    esp,0x10
c0011efa:	e9 43 ff ff ff       	jmp    c0011e42 <VAS::allocatePages(int, int)+0x3c>
c0011eff:	83 ec 0c             	sub    esp,0xc
c0011f02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f06:	e8 c2 f5 ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c0011f0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f17:	0f 87 9b 00 00 00    	ja     c0011fb8 <VAS::allocatePages(int, int)+0x1b2>
c0011f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f21:	85 d2                	test   edx,edx
c0011f23:	7e 3c                	jle    c0011f61 <VAS::allocatePages(int, int)+0x15b>
c0011f25:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f29:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f31:	c1 e5 0c             	shl    ebp,0xc
c0011f34:	81 ce 00 04 00 00    	or     esi,0x400
c0011f3a:	01 dd                	add    ebp,ebx
c0011f3c:	e8 53 dc ff ff       	call   c000fb94 <Phys::allocatePage()>
c0011f41:	56                   	push   esi
c0011f42:	53                   	push   ebx
c0011f43:	50                   	push   eax
c0011f44:	57                   	push   edi
c0011f45:	e8 ba fd ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f4a:	83 c4 10             	add    esp,0x10
c0011f4d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f52:	74 03                	je     c0011f57 <VAS::allocatePages(int, int)+0x151>
c0011f54:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f57:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f5d:	39 dd                	cmp    ebp,ebx
c0011f5f:	75 db                	jne    c0011f3c <VAS::allocatePages(int, int)+0x136>
c0011f61:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f66:	0f 84 26 ff ff ff    	je     c0011e92 <VAS::allocatePages(int, int)+0x8c>
c0011f6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f74:	89 d3                	mov    ebx,edx
c0011f76:	c1 e0 0c             	shl    eax,0xc
c0011f79:	c1 eb 0a             	shr    ebx,0xa
c0011f7c:	01 d0                	add    eax,edx
c0011f7e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f84:	c1 e8 0a             	shr    eax,0xa
c0011f87:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f92:	2d 00 00 40 00       	sub    eax,0x400000
c0011f97:	39 c3                	cmp    ebx,eax
c0011f99:	0f 87 f9 fe ff ff    	ja     c0011e98 <VAS::allocatePages(int, int)+0x92>
c0011f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fa8:	39 d8                	cmp    eax,ebx
c0011faa:	73 f3                	jae    c0011f9f <VAS::allocatePages(int, int)+0x199>
c0011fac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb0:	83 c4 1c             	add    esp,0x1c
c0011fb3:	5b                   	pop    ebx
c0011fb4:	5e                   	pop    esi
c0011fb5:	5f                   	pop    edi
c0011fb6:	5d                   	pop    ebp
c0011fb7:	c3                   	ret    
c0011fb8:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0011fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fc3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fca:	0f 84 4d ff ff ff    	je     c0011f1d <VAS::allocatePages(int, int)+0x117>
c0011fd0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fd8:	e9 40 ff ff ff       	jmp    c0011f1d <VAS::allocatePages(int, int)+0x117>
c0011fdd:	90                   	nop

c0011fde <VAS::setCPUSpecific(unsigned long)>:
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	6a 05                	push   0x5
c0011fe3:	68 00 00 40 c2       	push   0xc2400000
c0011fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff0:	e8 0f fd ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff5:	83 c4 1c             	add    esp,0x1c
c0011ff8:	c3                   	ret    
c0011ff9:	90                   	nop

c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011ffa:	55                   	push   ebp
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	53                   	push   ebx
c0011ffe:	83 ec 1c             	sub    esp,0x1c
c0012001:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012006:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001200a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012010:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012014:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001201a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001201e:	83 e0 01             	and    eax,0x1
c0012021:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012025:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012029:	85 c0                	test   eax,eax
c001202b:	7e 39                	jle    c0012066 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001202d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012031:	89 f3                	mov    ebx,esi
c0012033:	c1 e0 0c             	shl    eax,0xc
c0012036:	01 f0                	add    eax,esi
c0012038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001203c:	55                   	push   ebp
c001203d:	53                   	push   ebx
c001203e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012042:	29 f0                	sub    eax,esi
c0012044:	01 d8                	add    eax,ebx
c0012046:	50                   	push   eax
c0012047:	57                   	push   edi
c0012048:	e8 b7 fc ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012055:	74 03                	je     c001205a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012057:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001205a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012060:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012064:	75 d6                	jne    c001203c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012066:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001206b:	75 10                	jne    c001207d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001206d:	0f 20 d8             	mov    eax,cr3
c0012070:	0f 22 d8             	mov    cr3,eax
c0012073:	83 c4 1c             	add    esp,0x1c
c0012076:	89 f0                	mov    eax,esi
c0012078:	5b                   	pop    ebx
c0012079:	5e                   	pop    esi
c001207a:	5f                   	pop    edi
c001207b:	5d                   	pop    ebp
c001207c:	c3                   	ret    
c001207d:	89 f3                	mov    ebx,esi
c001207f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012083:	c1 eb 0a             	shr    ebx,0xa
c0012086:	c1 e0 0c             	shl    eax,0xc
c0012089:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001208f:	01 f0                	add    eax,esi
c0012091:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012097:	c1 e8 0a             	shr    eax,0xa
c001209a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209f:	2d 00 00 40 00       	sub    eax,0x400000
c00120a4:	39 c3                	cmp    ebx,eax
c00120a6:	77 cb                	ja     c0012073 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120b1:	39 d8                	cmp    eax,ebx
c00120b3:	73 f3                	jae    c00120a8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120b5:	83 c4 1c             	add    esp,0x1c
c00120b8:	89 f0                	mov    eax,esi
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	5d                   	pop    ebp
c00120be:	c3                   	ret    
c00120bf:	90                   	nop

c00120c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120c0:	55                   	push   ebp
c00120c1:	57                   	push   edi
c00120c2:	56                   	push   esi
c00120c3:	53                   	push   ebx
c00120c4:	83 ec 1c             	sub    esp,0x1c
c00120c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120cf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120d7:	a9 ff 0f 00 00       	test   eax,0xfff
c00120dc:	75 4a                	jne    c0012128 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120e5:	c1 eb 16             	shr    ebx,0x16
c00120e8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120ef:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120f3:	74 4d                	je     c0012142 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120f9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00120fd:	c1 e8 0a             	shr    eax,0xa
c0012100:	80 fa 01             	cmp    dl,0x1
c0012103:	19 d2                	sbb    edx,edx
c0012105:	c1 e3 0c             	shl    ebx,0xc
c0012108:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001210c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012112:	25 fc 0f 00 00       	and    eax,0xffc
c0012117:	01 d8                	add    eax,ebx
c0012119:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012120:	83 c4 1c             	add    esp,0x1c
c0012123:	5b                   	pop    ebx
c0012124:	5e                   	pop    esi
c0012125:	5f                   	pop    edi
c0012126:	5d                   	pop    ebp
c0012127:	c3                   	ret    
c0012128:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	68 bc af 02 c0       	push   0xc002afbc
c0012134:	e8 d0 81 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0012139:	83 c4 10             	add    esp,0x10
c001213c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012140:	eb 9c                	jmp    c00120de <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012142:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012146:	e8 49 da ff ff       	call   c000fb94 <Phys::allocatePage()>
c001214b:	83 ec 0c             	sub    esp,0xc
c001214e:	89 c5                	mov    ebp,eax
c0012150:	8b 0d 70 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f170
c0012156:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001215a:	6a 01                	push   0x1
c001215c:	e8 6c f3 ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c0012161:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012168:	6a 01                	push   0x1
c001216a:	50                   	push   eax
c001216b:	55                   	push   ebp
c001216c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012172:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012176:	51                   	push   ecx
c0012177:	e8 7e fe ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001217c:	83 c4 1c             	add    esp,0x1c
c001217f:	68 00 10 00 00       	push   0x1000
c0012184:	6a 00                	push   0x0
c0012186:	50                   	push   eax
c0012187:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001218b:	e8 c0 e5 fe ff       	call   c0000750 <memset>
c0012190:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012194:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012197:	e8 f1 f7 ff ff       	call   c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c001219c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121a9:	e9 47 ff ff ff       	jmp    c00120f5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121ae <VAS::VAS(bool)>:
c00121ae:	53                   	push   ebx
c00121af:	83 ec 28             	sub    esp,0x28
c00121b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121d8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121db:	e8 b4 d9 ff ff       	call   c000fb94 <Phys::allocatePage()>
c00121e0:	89 c2                	mov    edx,eax
c00121e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00121e9:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c00121ef:	83 ec 0c             	sub    esp,0xc
c00121f2:	6a 01                	push   0x1
c00121f4:	e8 d4 f2 ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	89 c2                	mov    edx,eax
c00121fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012202:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012205:	83 ec 0c             	sub    esp,0xc
c0012208:	6a 03                	push   0x3
c001220a:	6a 01                	push   0x1
c001220c:	52                   	push   edx
c001220d:	50                   	push   eax
c001220e:	53                   	push   ebx
c001220f:	e8 e6 fd ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012214:	83 c4 20             	add    esp,0x20
c0012217:	89 c2                	mov    edx,eax
c0012219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012220:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012228:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012230:	7f 1c                	jg     c001224e <VAS::VAS(bool)+0xa0>
c0012232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012236:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012239:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001223d:	c1 e2 02             	shl    edx,0x2
c0012240:	01 d0                	add    eax,edx
c0012242:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012248:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001224c:	eb da                	jmp    c0012228 <VAS::VAS(bool)+0x7a>
c001224e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012256:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001225e:	7f 7a                	jg     c00122da <VAS::VAS(bool)+0x12c>
c0012260:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012264:	2d 00 02 00 00       	sub    eax,0x200
c0012269:	c1 e0 0c             	shl    eax,0xc
c001226c:	83 c8 03             	or     eax,0x3
c001226f:	89 c2                	mov    edx,eax
c0012271:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012276:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001227c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012282:	83 e0 10             	and    eax,0x10
c0012285:	84 c0                	test   al,al
c0012287:	74 07                	je     c0012290 <VAS::VAS(bool)+0xe2>
c0012289:	b8 00 01 00 00       	mov    eax,0x100
c001228e:	eb 05                	jmp    c0012295 <VAS::VAS(bool)+0xe7>
c0012290:	b8 00 00 00 00       	mov    eax,0x0
c0012295:	09 d0                	or     eax,edx
c0012297:	89 c1                	mov    ecx,eax
c0012299:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a4:	c1 e2 02             	shl    edx,0x2
c00122a7:	01 d0                	add    eax,edx
c00122a9:	89 ca                	mov    edx,ecx
c00122ab:	89 10                	mov    DWORD PTR [eax],edx
c00122ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122b1:	2d 40 03 00 00       	sub    eax,0x340
c00122b6:	83 f8 7f             	cmp    eax,0x7f
c00122b9:	77 16                	ja     c00122d1 <VAS::VAS(bool)+0x123>
c00122bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122c6:	c1 e2 02             	shl    edx,0x2
c00122c9:	01 d0                	add    eax,edx
c00122cb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122d1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122d5:	e9 7c ff ff ff       	jmp    c0012256 <VAS::VAS(bool)+0xa8>
c00122da:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00122df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122eb:	83 e0 10             	and    eax,0x10
c00122ee:	84 c0                	test   al,al
c00122f0:	74 07                	je     c00122f9 <VAS::VAS(bool)+0x14b>
c00122f2:	b8 03 41 00 00       	mov    eax,0x4103
c00122f7:	eb 05                	jmp    c00122fe <VAS::VAS(bool)+0x150>
c00122f9:	b8 03 40 00 00       	mov    eax,0x4003
c00122fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012302:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012305:	81 c2 20 0c 00 00    	add    edx,0xc20
c001230b:	89 02                	mov    DWORD PTR [edx],eax
c001230d:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012312:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012318:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001231e:	83 ec 08             	sub    esp,0x8
c0012321:	50                   	push   eax
c0012322:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012326:	e8 b3 fc ff ff       	call   c0011fde <VAS::setCPUSpecific(unsigned long)>
c001232b:	83 c4 10             	add    esp,0x10
c001232e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012332:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012335:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001233a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012340:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012346:	83 e0 10             	and    eax,0x10
c0012349:	84 c0                	test   al,al
c001234b:	74 07                	je     c0012354 <VAS::VAS(bool)+0x1a6>
c001234d:	b8 00 01 00 00       	mov    eax,0x100
c0012352:	eb 05                	jmp    c0012359 <VAS::VAS(bool)+0x1ab>
c0012354:	b8 00 00 00 00       	mov    eax,0x0
c0012359:	09 c2                	or     edx,eax
c001235b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012362:	05 fc 0f 00 00       	add    eax,0xffc
c0012367:	83 ca 03             	or     edx,0x3
c001236a:	89 10                	mov    DWORD PTR [eax],edx
c001236c:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012371:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012377:	83 ec 0c             	sub    esp,0xc
c001237a:	50                   	push   eax
c001237b:	e8 8c 1c 00 00       	call   c001400c <Device::getName()>
c0012380:	83 c4 10             	add    esp,0x10
c0012383:	83 ec 08             	sub    esp,0x8
c0012386:	68 01 b1 02 c0       	push   0xc002b101
c001238b:	50                   	push   eax
c001238c:	e8 07 e5 fe ff       	call   c0000898 <strcmp>
c0012391:	83 c4 10             	add    esp,0x10
c0012394:	85 c0                	test   eax,eax
c0012396:	0f 94 c0             	sete   al
c0012399:	84 c0                	test   al,al
c001239b:	0f 84 87 00 00 00    	je     c0012428 <VAS::VAS(bool)+0x27a>
c00123a1:	fa                   	cli    
c00123a2:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00123a7:	40                   	inc    eax
c00123a8:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00123ad:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00123b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b8:	05 7c 09 00 00       	add    eax,0x97c
c00123bd:	83 ec 0c             	sub    esp,0xc
c00123c0:	50                   	push   eax
c00123c1:	e8 48 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123c6:	83 c4 10             	add    esp,0x10
c00123c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ce:	89 c3                	mov    ebx,eax
c00123d0:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00123d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123db:	05 7c 09 00 00       	add    eax,0x97c
c00123e0:	83 ec 0c             	sub    esp,0xc
c00123e3:	50                   	push   eax
c00123e4:	e8 25 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	83 ec 08             	sub    esp,0x8
c00123ef:	50                   	push   eax
c00123f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123f4:	e8 75 f5 ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012403:	6a 11                	push   0x11
c0012405:	53                   	push   ebx
c0012406:	50                   	push   eax
c0012407:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001240b:	e8 f4 f8 ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0012418:	48                   	dec    eax
c0012419:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001241e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0012423:	85 c0                	test   eax,eax
c0012425:	75 01                	jne    c0012428 <VAS::VAS(bool)+0x27a>
c0012427:	fb                   	sti    
c0012428:	90                   	nop
c0012429:	83 c4 28             	add    esp,0x28
c001242c:	5b                   	pop    ebx
c001242d:	c3                   	ret    

c001242e <VAS::evict(unsigned long)>:
c001242e:	55                   	push   ebp
c001242f:	57                   	push   edi
c0012430:	56                   	push   esi
c0012431:	53                   	push   ebx
c0012432:	83 ec 1c             	sub    esp,0x1c
c0012435:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012439:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001243d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012441:	e8 c8 f1 ff ff       	call   c001160e <Virt::allocateSwapfilePage()>
c0012446:	89 c7                	mov    edi,eax
c0012448:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c001244d:	85 c0                	test   eax,eax
c001244f:	7e 3d                	jle    c001248e <VAS::evict(unsigned long)+0x60>
c0012451:	89 ee                	mov    esi,ebp
c0012453:	31 db                	xor    ebx,ebx
c0012455:	83 ec 0c             	sub    esp,0xc
c0012458:	57                   	push   edi
c0012459:	e8 9e f1 ff ff       	call   c00115fc <Virt::swapIDToSector(unsigned long)>
c001245e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012461:	01 d8                	add    eax,ebx
c0012463:	6a 01                	push   0x1
c0012465:	31 d2                	xor    edx,edx
c0012467:	43                   	inc    ebx
c0012468:	52                   	push   edx
c0012469:	81 c6 00 02 00 00    	add    esi,0x200
c001246f:	50                   	push   eax
c0012470:	0f be 05 b8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfb8
c0012477:	ff 34 85 fc f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b04]
c001247e:	e8 39 3e 00 00       	call   c00162bc <LogicalDisk::write(unsigned long long, int, void*)>
c0012483:	83 c4 20             	add    esp,0x20
c0012486:	39 1d ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,ebx
c001248c:	7f c7                	jg     c0012455 <VAS::evict(unsigned long)+0x27>
c001248e:	83 ec 08             	sub    esp,0x8
c0012491:	c1 e7 0b             	shl    edi,0xb
c0012494:	55                   	push   ebp
c0012495:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012499:	e8 d0 f4 ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c001249e:	83 c4 0c             	add    esp,0xc
c00124a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00124a3:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124a9:	09 d7                	or     edi,edx
c00124ab:	89 38                	mov    DWORD PTR [eax],edi
c00124ad:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c00124b2:	40                   	inc    eax
c00124b3:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c00124b8:	0f 20 da             	mov    edx,cr3
c00124bb:	0f 22 da             	mov    cr3,edx
c00124be:	50                   	push   eax
c00124bf:	55                   	push   ebp
c00124c0:	68 0f b1 02 c0       	push   0xc002b10f
c00124c5:	e8 09 04 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00124ca:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c00124cf:	c7 44 24 40 24 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b124
c00124d7:	8d 50 01             	lea    edx,[eax+0x1]
c00124da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124de:	89 15 64 f1 02 c0    	mov    DWORD PTR ds:0xc002f164,edx
c00124e4:	83 c4 2c             	add    esp,0x2c
c00124e7:	5b                   	pop    ebx
c00124e8:	5e                   	pop    esi
c00124e9:	5f                   	pop    edi
c00124ea:	5d                   	pop    ebp
c00124eb:	e9 e3 03 00 00       	jmp    c00128d3 <Dbg::kprintf(char const*, ...)>

c00124f0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00124f0:	55                   	push   ebp
c00124f1:	57                   	push   edi
c00124f2:	56                   	push   esi
c00124f3:	53                   	push   ebx
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00124fb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012501:	0f 84 dc 00 00 00    	je     c00125e3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012507:	56                   	push   esi
c0012508:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001250c:	e8 5d f4 ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c0012511:	5b                   	pop    ebx
c0012512:	85 c0                	test   eax,eax
c0012514:	5f                   	pop    edi
c0012515:	89 c3                	mov    ebx,eax
c0012517:	0f 84 c6 00 00 00    	je     c00125e3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001251d:	8b 38                	mov    edi,DWORD PTR [eax]
c001251f:	31 c0                	xor    eax,eax
c0012521:	89 fa                	mov    edx,edi
c0012523:	81 e2 01 04 00 00    	and    edx,0x401
c0012529:	81 fa 00 04 00 00    	cmp    edx,0x400
c001252f:	0f 85 b0 00 00 00    	jne    c00125e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012535:	e8 5a d6 ff ff       	call   c000fb94 <Phys::allocatePage()>
c001253a:	c1 ef 0b             	shr    edi,0xb
c001253d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001253f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012545:	09 c2                	or     edx,eax
c0012547:	81 ca 01 08 00 00    	or     edx,0x801
c001254d:	89 13                	mov    DWORD PTR [ebx],edx
c001254f:	8b 0d ac df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfac
c0012555:	85 c9                	test   ecx,ecx
c0012557:	7e 3d                	jle    c0012596 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012559:	89 f5                	mov    ebp,esi
c001255b:	31 db                	xor    ebx,ebx
c001255d:	83 ec 0c             	sub    esp,0xc
c0012560:	57                   	push   edi
c0012561:	e8 96 f0 ff ff       	call   c00115fc <Virt::swapIDToSector(unsigned long)>
c0012566:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012569:	01 d8                	add    eax,ebx
c001256b:	6a 01                	push   0x1
c001256d:	31 d2                	xor    edx,edx
c001256f:	43                   	inc    ebx
c0012570:	52                   	push   edx
c0012571:	81 c5 00 02 00 00    	add    ebp,0x200
c0012577:	50                   	push   eax
c0012578:	0f be 05 b8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfb8
c001257f:	ff 34 85 fc f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b04]
c0012586:	e8 c5 3c 00 00       	call   c0016250 <LogicalDisk::read(unsigned long long, int, void*)>
c001258b:	83 c4 20             	add    esp,0x20
c001258e:	39 1d ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,ebx
c0012594:	7f c7                	jg     c001255d <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012596:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c001259b:	48                   	dec    eax
c001259c:	52                   	push   edx
c001259d:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c00125a2:	50                   	push   eax
c00125a3:	56                   	push   esi
c00125a4:	68 35 b1 02 c0       	push   0xc002b135
c00125a9:	e8 25 03 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00125ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125b1:	e8 28 f0 ff ff       	call   c00115de <Virt::freeSwapfilePage(unsigned long)>
c00125b6:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	48                   	dec    eax
c00125bf:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00125c4:	85 c0                	test   eax,eax
c00125c6:	75 01                	jne    c00125c9 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00125c8:	fb                   	sti    
c00125c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125cd:	25 ff 0f 00 00       	and    eax,0xfff
c00125d2:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00125d7:	77 14                	ja     c00125ed <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00125d9:	0f 20 d8             	mov    eax,cr3
c00125dc:	0f 22 d8             	mov    cr3,eax
c00125df:	b0 01                	mov    al,0x1
c00125e1:	eb 02                	jmp    c00125e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00125e3:	31 c0                	xor    eax,eax
c00125e5:	83 c4 0c             	add    esp,0xc
c00125e8:	5b                   	pop    ebx
c00125e9:	5e                   	pop    esi
c00125ea:	5f                   	pop    edi
c00125eb:	5d                   	pop    ebp
c00125ec:	c3                   	ret    
c00125ed:	83 ec 0c             	sub    esp,0xc
c00125f0:	68 4a b1 02 c0       	push   0xc002b14a
c00125f5:	e8 d9 02 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	eb da                	jmp    c00125d9 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c00125ff:	90                   	nop

c0012600 <VAS::scanForEviction()>:
c0012600:	57                   	push   edi
c0012601:	56                   	push   esi
c0012602:	53                   	push   ebx
c0012603:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012607:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001260a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012610:	75 0e                	jne    c0012620 <VAS::scanForEviction()+0x20>
c0012612:	89 da                	mov    edx,ebx
c0012614:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012617:	c1 ea 16             	shr    edx,0x16
c001261a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001261e:	74 48                	je     c0012668 <VAS::scanForEviction()+0x68>
c0012620:	53                   	push   ebx
c0012621:	56                   	push   esi
c0012622:	e8 47 f3 ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c0012627:	5a                   	pop    edx
c0012628:	8b 38                	mov    edi,DWORD PTR [eax]
c001262a:	59                   	pop    ecx
c001262b:	89 fa                	mov    edx,edi
c001262d:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012633:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012639:	74 3d                	je     c0012678 <VAS::scanForEviction()+0x78>
c001263b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012641:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012647:	76 2a                	jbe    c0012673 <VAS::scanForEviction()+0x73>
c0012649:	31 db                	xor    ebx,ebx
c001264b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012652:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012658:	75 c6                	jne    c0012620 <VAS::scanForEviction()+0x20>
c001265a:	89 da                	mov    edx,ebx
c001265c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001265f:	c1 ea 16             	shr    edx,0x16
c0012662:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012666:	75 b8                	jne    c0012620 <VAS::scanForEviction()+0x20>
c0012668:	81 c3 00 00 40 00    	add    ebx,0x400000
c001266e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012671:	eb 97                	jmp    c001260a <VAS::scanForEviction()+0xa>
c0012673:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012676:	eb 92                	jmp    c001260a <VAS::scanForEviction()+0xa>
c0012678:	f7 c7 01 00 00 00    	test   edi,0x1
c001267e:	74 bb                	je     c001263b <VAS::scanForEviction()+0x3b>
c0012680:	f7 c7 20 00 00 00    	test   edi,0x20
c0012686:	74 0a                	je     c0012692 <VAS::scanForEviction()+0x92>
c0012688:	83 e7 df             	and    edi,0xffffffdf
c001268b:	89 38                	mov    DWORD PTR [eax],edi
c001268d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012690:	eb a9                	jmp    c001263b <VAS::scanForEviction()+0x3b>
c0012692:	83 ec 08             	sub    esp,0x8
c0012695:	53                   	push   ebx
c0012696:	56                   	push   esi
c0012697:	e8 92 fd ff ff       	call   c001242e <VAS::evict(unsigned long)>
c001269c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	89 f8                	mov    eax,edi
c00126a8:	5b                   	pop    ebx
c00126a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126ae:	5e                   	pop    esi
c00126af:	5f                   	pop    edi
c00126b0:	c3                   	ret    

c00126b1 <mapVASFirstTime>:
c00126b1:	55                   	push   ebp
c00126b2:	57                   	push   edi
c00126b3:	56                   	push   esi
c00126b4:	53                   	push   ebx
c00126b5:	83 ec 0c             	sub    esp,0xc
c00126b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126bd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126c0:	4a                   	dec    edx
c00126c1:	0f 84 8e 00 00 00    	je     c0012755 <mapVASFirstTime+0xa4>
c00126c7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126ca:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126cd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126d2:	c1 e5 15             	shl    ebp,0x15
c00126d5:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126da:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126e0:	29 eb                	sub    ebx,ebp
c00126e2:	29 ee                	sub    esi,ebp
c00126e4:	e8 ab d4 ff ff       	call   c000fb94 <Phys::allocatePage()>
c00126e9:	83 ec 0c             	sub    esp,0xc
c00126ec:	68 03 04 00 00       	push   0x403
c00126f1:	6a 01                	push   0x1
c00126f3:	53                   	push   ebx
c00126f4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126fa:	50                   	push   eax
c00126fb:	57                   	push   edi
c00126fc:	e8 f9 f8 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012701:	83 c4 20             	add    esp,0x20
c0012704:	39 f3                	cmp    ebx,esi
c0012706:	75 dc                	jne    c00126e4 <mapVASFirstTime+0x33>
c0012708:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001270d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012712:	29 ee                	sub    esi,ebp
c0012714:	29 e8                	sub    eax,ebp
c0012716:	89 c5                	mov    ebp,eax
c0012718:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001271c:	19 db                	sbb    ebx,ebx
c001271e:	e8 71 d4 ff ff       	call   c000fb94 <Phys::allocatePage()>
c0012723:	83 e3 04             	and    ebx,0x4
c0012726:	83 ec 0c             	sub    esp,0xc
c0012729:	81 c3 03 04 00 00    	add    ebx,0x403
c001272f:	53                   	push   ebx
c0012730:	6a 01                	push   0x1
c0012732:	56                   	push   esi
c0012733:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012739:	50                   	push   eax
c001273a:	57                   	push   edi
c001273b:	e8 ba f8 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012740:	83 c4 20             	add    esp,0x20
c0012743:	39 f5                	cmp    ebp,esi
c0012745:	75 d1                	jne    c0012718 <mapVASFirstTime+0x67>
c0012747:	0f 20 d8             	mov    eax,cr3
c001274a:	0f 22 d8             	mov    cr3,eax
c001274d:	83 c4 0c             	add    esp,0xc
c0012750:	5b                   	pop    ebx
c0012751:	5e                   	pop    esi
c0012752:	5f                   	pop    edi
c0012753:	5d                   	pop    ebp
c0012754:	c3                   	ret    
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	68 5a b1 02 c0       	push   0xc002b15a
c001275d:	e8 71 01 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0012762:	83 c4 10             	add    esp,0x10
c0012765:	83 c4 0c             	add    esp,0xc
c0012768:	5b                   	pop    ebx
c0012769:	5e                   	pop    esi
c001276a:	5f                   	pop    edi
c001276b:	5d                   	pop    ebp
c001276c:	c3                   	ret    

c001276d <__cxa_atexit>:
c001276d:	31 c0                	xor    eax,eax
c001276f:	c3                   	ret    

c0012770 <__cxa_finalize>:
c0012770:	c3                   	ret    

c0012771 <__stack_chk_fail>:
c0012771:	55                   	push   ebp
c0012772:	89 e5                	mov    ebp,esp
c0012774:	83 ec 14             	sub    esp,0x14
c0012777:	68 73 b1 02 c0       	push   0xc002b173
c001277c:	e8 52 01 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0012781:	58                   	pop    eax
c0012782:	5a                   	pop    edx
c0012783:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012786:	68 c3 b1 02 c0       	push   0xc002b1c3
c001278b:	e8 43 01 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0012790:	59                   	pop    ecx
c0012791:	58                   	pop    eax
c0012792:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012795:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012798:	68 c3 b1 02 c0       	push   0xc002b1c3
c001279d:	e8 31 01 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00127a2:	5a                   	pop    edx
c00127a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127a6:	59                   	pop    ecx
c00127a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00127a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ac:	68 c3 b1 02 c0       	push   0xc002b1c3
c00127b1:	e8 1d 01 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00127b6:	5a                   	pop    edx
c00127b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ba:	59                   	pop    ecx
c00127bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c2:	68 c3 b1 02 c0       	push   0xc002b1c3
c00127c7:	e8 07 01 00 00       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00127cc:	c7 04 24 cb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1cb
c00127d3:	e8 31 7b 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00127d8:	83 c4 10             	add    esp,0x10
c00127db:	c9                   	leave  
c00127dc:	c3                   	ret    

c00127dd <__cxa_pure_virtual>:
c00127dd:	83 ec 18             	sub    esp,0x18
c00127e0:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127e5:	e8 1f 7b 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00127ea:	83 c4 1c             	add    esp,0x1c
c00127ed:	c3                   	ret    

c00127ee <operator new[](unsigned long)>:
c00127ee:	e9 99 d0 ff ff       	jmp    c000f88c <malloc>

c00127f3 <operator delete(void*, unsigned long)>:
c00127f3:	e9 b4 d0 ff ff       	jmp    c000f8ac <rfree>

c00127f8 <operator delete[](void*)>:
c00127f8:	e9 af d0 ff ff       	jmp    c000f8ac <rfree>

c00127fd <operator delete[](void*, unsigned long)>:
c00127fd:	e9 aa d0 ff ff       	jmp    c000f8ac <rfree>

c0012802 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012802:	57                   	push   edi
c0012803:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012808:	56                   	push   esi
c0012809:	be f8 b1 02 c0       	mov    esi,0xc002b1f8
c001280e:	53                   	push   ebx
c001280f:	83 ec 40             	sub    esp,0x40
c0012812:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012816:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001281a:	fc                   	cld    
c001281b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001281d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012821:	83 f9 3e             	cmp    ecx,0x3e
c0012824:	7e 05                	jle    c001282b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012826:	b9 3e 00 00 00       	mov    ecx,0x3e
c001282b:	89 df                	mov    edi,ebx
c001282d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012831:	eb 02                	jmp    c0012835 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012833:	89 c7                	mov    edi,eax
c0012835:	31 d2                	xor    edx,edx
c0012837:	46                   	inc    esi
c0012838:	89 f8                	mov    eax,edi
c001283a:	f7 f1                	div    ecx
c001283c:	39 cf                	cmp    edi,ecx
c001283e:	73 f3                	jae    c0012833 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012840:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012843:	eb 02                	jmp    c0012847 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012845:	89 c3                	mov    ebx,eax
c0012847:	31 d2                	xor    edx,edx
c0012849:	4e                   	dec    esi
c001284a:	89 d8                	mov    eax,ebx
c001284c:	f7 f1                	div    ecx
c001284e:	39 cb                	cmp    ebx,ecx
c0012850:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012854:	88 16                	mov    BYTE PTR [esi],dl
c0012856:	73 ed                	jae    c0012845 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012858:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001285c:	83 c4 40             	add    esp,0x40
c001285f:	5b                   	pop    ebx
c0012860:	5e                   	pop    esi
c0012861:	5f                   	pop    edi
c0012862:	c3                   	ret    

c0012863 <Dbg::logc(char)>:
c0012863:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012867:	ba fd 03 00 00       	mov    edx,0x3fd
c001286c:	ec                   	in     al,dx
c001286d:	a8 20                	test   al,0x20
c001286f:	74 fb                	je     c001286c <Dbg::logc(char)+0x9>
c0012871:	ba f8 03 00 00       	mov    edx,0x3f8
c0012876:	88 c8                	mov    al,cl
c0012878:	ee                   	out    dx,al
c0012879:	c3                   	ret    

c001287a <Dbg::logs(char*)>:
c001287a:	53                   	push   ebx
c001287b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001287f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012882:	84 c0                	test   al,al
c0012884:	74 0f                	je     c0012895 <Dbg::logs(char*)+0x1b>
c0012886:	50                   	push   eax
c0012887:	43                   	inc    ebx
c0012888:	e8 d6 ff ff ff       	call   c0012863 <Dbg::logc(char)>
c001288d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012890:	5a                   	pop    edx
c0012891:	84 c0                	test   al,al
c0012893:	75 f1                	jne    c0012886 <Dbg::logs(char*)+0xc>
c0012895:	5b                   	pop    ebx
c0012896:	c3                   	ret    

c0012897 <Dbg::logWriteInt(unsigned int)>:
c0012897:	83 ec 10             	sub    esp,0x10
c001289a:	6a 0a                	push   0xa
c001289c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128a0:	50                   	push   eax
c00128a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a5:	e8 58 ff ff ff       	call   c0012802 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128aa:	50                   	push   eax
c00128ab:	e8 ca ff ff ff       	call   c001287a <Dbg::logs(char*)>
c00128b0:	83 c4 20             	add    esp,0x20
c00128b3:	c3                   	ret    

c00128b4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128b4:	83 ec 10             	sub    esp,0x10
c00128b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128bf:	50                   	push   eax
c00128c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c4:	e8 39 ff ff ff       	call   c0012802 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128c9:	50                   	push   eax
c00128ca:	e8 ab ff ff ff       	call   c001287a <Dbg::logs(char*)>
c00128cf:	83 c4 20             	add    esp,0x20
c00128d2:	c3                   	ret    

c00128d3 <Dbg::kprintf(char const*, ...)>:
c00128d3:	55                   	push   ebp
c00128d4:	57                   	push   edi
c00128d5:	56                   	push   esi
c00128d6:	53                   	push   ebx
c00128d7:	83 ec 0c             	sub    esp,0xc
c00128da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128e9:	84 c0                	test   al,al
c00128eb:	74 4a                	je     c0012937 <Dbg::kprintf(char const*, ...)+0x64>
c00128ed:	31 db                	xor    ebx,ebx
c00128ef:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128f2:	3c 25                	cmp    al,0x25
c00128f4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128f7:	0f 85 e4 00 00 00    	jne    c00129e1 <Dbg::kprintf(char const*, ...)+0x10e>
c00128fd:	83 c3 02             	add    ebx,0x2
c0012900:	8a 07                	mov    al,BYTE PTR [edi]
c0012902:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012905:	83 e8 25             	sub    eax,0x25
c0012908:	3c 53                	cmp    al,0x53
c001290a:	0f 87 ba 00 00 00    	ja     c00129ca <Dbg::kprintf(char const*, ...)+0xf7>
c0012910:	0f b6 c0             	movzx  eax,al
c0012913:	ff 24 85 38 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4dc8]
c001291a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001291e:	89 c8                	mov    eax,ecx
c0012920:	83 c1 04             	add    ecx,0x4
c0012923:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012927:	ff 30                	push   DWORD PTR [eax]
c0012929:	e8 4c ff ff ff       	call   c001287a <Dbg::logs(char*)>
c001292e:	58                   	pop    eax
c001292f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012933:	84 c0                	test   al,al
c0012935:	75 b8                	jne    c00128ef <Dbg::kprintf(char const*, ...)+0x1c>
c0012937:	83 c4 0c             	add    esp,0xc
c001293a:	5b                   	pop    ebx
c001293b:	5e                   	pop    esi
c001293c:	5f                   	pop    edi
c001293d:	5d                   	pop    ebp
c001293e:	c3                   	ret    
c001293f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012943:	89 d0                	mov    eax,edx
c0012945:	83 c2 04             	add    edx,0x4
c0012948:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001294c:	ff 30                	push   DWORD PTR [eax]
c001294e:	e8 44 ff ff ff       	call   c0012897 <Dbg::logWriteInt(unsigned int)>
c0012953:	58                   	pop    eax
c0012954:	eb d9                	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c0012956:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001295a:	89 d0                	mov    eax,edx
c001295c:	83 c2 04             	add    edx,0x4
c001295f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012962:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012966:	50                   	push   eax
c0012967:	e8 f7 fe ff ff       	call   c0012863 <Dbg::logc(char)>
c001296c:	58                   	pop    eax
c001296d:	eb c0                	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c001296f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012973:	89 c8                	mov    eax,ecx
c0012975:	83 c1 04             	add    ecx,0x4
c0012978:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001297c:	ff 30                	push   DWORD PTR [eax]
c001297e:	e8 14 ff ff ff       	call   c0012897 <Dbg::logWriteInt(unsigned int)>
c0012983:	5f                   	pop    edi
c0012984:	eb a9                	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c0012986:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001298a:	89 c8                	mov    eax,ecx
c001298c:	83 c1 04             	add    ecx,0x4
c001298f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012993:	6a 10                	push   0x10
c0012995:	ff 30                	push   DWORD PTR [eax]
c0012997:	e8 18 ff ff ff       	call   c00128b4 <Dbg::logWriteIntBase(unsigned int, int)>
c001299c:	59                   	pop    ecx
c001299d:	5f                   	pop    edi
c001299e:	eb 8f                	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c00129a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129a4:	89 d0                	mov    eax,edx
c00129a6:	83 c2 08             	add    edx,0x8
c00129a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129ad:	6a 10                	push   0x10
c00129af:	ff 30                	push   DWORD PTR [eax]
c00129b1:	e8 fe fe ff ff       	call   c00128b4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129b6:	58                   	pop    eax
c00129b7:	5a                   	pop    edx
c00129b8:	e9 72 ff ff ff       	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c00129bd:	6a 25                	push   0x25
c00129bf:	e8 9f fe ff ff       	call   c0012863 <Dbg::logc(char)>
c00129c4:	58                   	pop    eax
c00129c5:	e9 65 ff ff ff       	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c00129ca:	6a 25                	push   0x25
c00129cc:	e8 92 fe ff ff       	call   c0012863 <Dbg::logc(char)>
c00129d1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129d4:	50                   	push   eax
c00129d5:	e8 89 fe ff ff       	call   c0012863 <Dbg::logc(char)>
c00129da:	5a                   	pop    edx
c00129db:	59                   	pop    ecx
c00129dc:	e9 4e ff ff ff       	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c00129e1:	50                   	push   eax
c00129e2:	89 eb                	mov    ebx,ebp
c00129e4:	e8 7a fe ff ff       	call   c0012863 <Dbg::logc(char)>
c00129e9:	89 fd                	mov    ebp,edi
c00129eb:	58                   	pop    eax
c00129ec:	e9 3e ff ff ff       	jmp    c001292f <Dbg::kprintf(char const*, ...)+0x5c>
c00129f1:	90                   	nop

c00129f2 <File::read(unsigned long long, void*, int*)>:
c00129f2:	53                   	push   ebx
c00129f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129fb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a02:	3c 19                	cmp    al,0x19
c0012a04:	77 35                	ja     c0012a3b <File::read(unsigned long long, void*, int*)+0x49>
c0012a06:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	74 2a                	je     c0012a3b <File::read(unsigned long long, void*, int*)+0x49>
c0012a11:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a17:	85 c0                	test   eax,eax
c0012a19:	74 20                	je     c0012a3b <File::read(unsigned long long, void*, int*)+0x49>
c0012a1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a1f:	74 21                	je     c0012a42 <File::read(unsigned long long, void*, int*)+0x50>
c0012a21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a23:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a27:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a35:	5b                   	pop    ebx
c0012a36:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a39:	ff e0                	jmp    eax
c0012a3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a40:	eb 05                	jmp    c0012a47 <File::read(unsigned long long, void*, int*)+0x55>
c0012a42:	b8 05 00 00 00       	mov    eax,0x5
c0012a47:	5b                   	pop    ebx
c0012a48:	c3                   	ret    
c0012a49:	90                   	nop

c0012a4a <File::write(unsigned long long, void*, int*)>:
c0012a4a:	53                   	push   ebx
c0012a4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a53:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a5a:	3c 19                	cmp    al,0x19
c0012a5c:	77 35                	ja     c0012a93 <File::write(unsigned long long, void*, int*)+0x49>
c0012a5e:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0012a65:	85 c0                	test   eax,eax
c0012a67:	74 2a                	je     c0012a93 <File::write(unsigned long long, void*, int*)+0x49>
c0012a69:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a6f:	85 c0                	test   eax,eax
c0012a71:	74 20                	je     c0012a93 <File::write(unsigned long long, void*, int*)+0x49>
c0012a73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a77:	74 21                	je     c0012a9a <File::write(unsigned long long, void*, int*)+0x50>
c0012a79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a7f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a8d:	5b                   	pop    ebx
c0012a8e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a91:	ff e0                	jmp    eax
c0012a93:	b8 0b 00 00 00       	mov    eax,0xb
c0012a98:	eb 05                	jmp    c0012a9f <File::write(unsigned long long, void*, int*)+0x55>
c0012a9a:	b8 05 00 00 00       	mov    eax,0x5
c0012a9f:	5b                   	pop    ebx
c0012aa0:	c3                   	ret    
c0012aa1:	90                   	nop

c0012aa2 <Directory::read(unsigned long long, void*, int*)>:
c0012aa2:	53                   	push   ebx
c0012aa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ab2:	3c 19                	cmp    al,0x19
c0012ab4:	77 35                	ja     c0012aeb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ab6:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0012abd:	85 c0                	test   eax,eax
c0012abf:	74 2a                	je     c0012aeb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ac1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ac7:	85 c0                	test   eax,eax
c0012ac9:	74 20                	je     c0012aeb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012acb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acf:	74 21                	je     c0012af2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ad1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ad3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ad7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012add:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ae1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ae5:	5b                   	pop    ebx
c0012ae6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012ae9:	ff e0                	jmp    eax
c0012aeb:	b8 0b 00 00 00       	mov    eax,0xb
c0012af0:	eb 05                	jmp    c0012af7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012af2:	b8 05 00 00 00       	mov    eax,0x5
c0012af7:	5b                   	pop    ebx
c0012af8:	c3                   	ret    
c0012af9:	90                   	nop

c0012afa <Directory::write(unsigned long long, void*, int*)>:
c0012afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012afe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b05:	b8 0b 00 00 00       	mov    eax,0xb
c0012b0a:	80 fa 19             	cmp    dl,0x19
c0012b0d:	77 18                	ja     c0012b27 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b0f:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012b16:	85 d2                	test   edx,edx
c0012b18:	74 0d                	je     c0012b27 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b1a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b21:	19 c0                	sbb    eax,eax
c0012b23:	83 e0 0a             	and    eax,0xa
c0012b26:	40                   	inc    eax
c0012b27:	c3                   	ret    

c0012b28 <File::isAtty()>:
c0012b28:	31 c0                	xor    eax,eax
c0012b2a:	c3                   	ret    
c0012b2b:	90                   	nop

c0012b2c <Directory::isAtty()>:
c0012b2c:	31 c0                	xor    eax,eax
c0012b2e:	c3                   	ret    
c0012b2f:	90                   	nop

c0012b30 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b30:	b8 0a 00 00 00       	mov    eax,0xa
c0012b35:	c3                   	ret    

c0012b36 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b36:	b8 0a 00 00 00       	mov    eax,0xa
c0012b3b:	c3                   	ret    

c0012b3c <Filesystem::getFileFirstSector(char const*)>:
c0012b3c:	31 c0                	xor    eax,eax
c0012b3e:	31 d2                	xor    edx,edx
c0012b40:	c3                   	ret    
c0012b41:	90                   	nop

c0012b42 <File::~File()>:
c0012b42:	83 ec 0c             	sub    esp,0xc
c0012b45:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0012b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4e:	89 10                	mov    DWORD PTR [eax],edx
c0012b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b54:	83 ec 0c             	sub    esp,0xc
c0012b57:	50                   	push   eax
c0012b58:	e8 0f e7 ff ff       	call   c001126c <UnixFile::~UnixFile()>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	90                   	nop
c0012b61:	83 c4 0c             	add    esp,0xc
c0012b64:	c3                   	ret    
c0012b65:	90                   	nop

c0012b66 <File::~File()>:
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	83 ec 0c             	sub    esp,0xc
c0012b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b70:	e8 cd ff ff ff       	call   c0012b42 <File::~File()>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	83 ec 08             	sub    esp,0x8
c0012b7b:	68 14 01 00 00       	push   0x114
c0012b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b84:	e8 6a fc ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	83 c4 0c             	add    esp,0xc
c0012b8f:	c3                   	ret    

c0012b90 <Directory::~Directory()>:
c0012b90:	83 ec 0c             	sub    esp,0xc
c0012b93:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c0012b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9c:	89 10                	mov    DWORD PTR [eax],edx
c0012b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba2:	83 ec 0c             	sub    esp,0xc
c0012ba5:	50                   	push   eax
c0012ba6:	e8 c1 e6 ff ff       	call   c001126c <UnixFile::~UnixFile()>
c0012bab:	83 c4 10             	add    esp,0x10
c0012bae:	90                   	nop
c0012baf:	83 c4 0c             	add    esp,0xc
c0012bb2:	c3                   	ret    
c0012bb3:	90                   	nop

c0012bb4 <Directory::~Directory()>:
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	83 ec 0c             	sub    esp,0xc
c0012bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bbe:	e8 cd ff ff ff       	call   c0012b90 <Directory::~Directory()>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	83 ec 08             	sub    esp,0x8
c0012bc9:	68 14 01 00 00       	push   0x114
c0012bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd2:	e8 1c fc ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	83 c4 0c             	add    esp,0xc
c0012bdd:	c3                   	ret    

c0012bde <Filesystem::Filesystem()>:
c0012bde:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0012be3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be7:	89 10                	mov    DWORD PTR [eax],edx
c0012be9:	8b 15 74 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f174
c0012bef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bfa:	a3 74 f1 02 c0       	mov    ds:0xc002f174,eax
c0012bff:	90                   	nop
c0012c00:	c3                   	ret    
c0012c01:	90                   	nop

c0012c02 <Filesystem::~Filesystem()>:
c0012c02:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0012c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0b:	89 10                	mov    DWORD PTR [eax],edx
c0012c0d:	90                   	nop
c0012c0e:	c3                   	ret    
c0012c0f:	90                   	nop

c0012c10 <Filesystem::~Filesystem()>:
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c17:	e8 e6 ff ff ff       	call   c0012c02 <Filesystem::~Filesystem()>
c0012c1c:	83 c4 04             	add    esp,0x4
c0012c1f:	83 ec 08             	sub    esp,0x8
c0012c22:	6a 08                	push   0x8
c0012c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c28:	e8 c6 fb ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0012c2d:	83 c4 10             	add    esp,0x10
c0012c30:	83 c4 0c             	add    esp,0xc
c0012c33:	c3                   	ret    

c0012c34 <Fs::getcwd(Process*, char*, int)>:
c0012c34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c38:	31 c0                	xor    eax,eax
c0012c3a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c3d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c41:	7d 15                	jge    c0012c58 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c43:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c47:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c4e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c51:	84 c9                	test   cl,cl
c0012c53:	74 06                	je     c0012c5b <Fs::getcwd(Process*, char*, int)+0x27>
c0012c55:	40                   	inc    eax
c0012c56:	eb e2                	jmp    c0012c3a <Fs::getcwd(Process*, char*, int)+0x6>
c0012c58:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c5b:	31 c0                	xor    eax,eax
c0012c5d:	c3                   	ret    

c0012c5e <Fs::initVFS()>:
c0012c5e:	83 ec 18             	sub    esp,0x18
c0012c61:	6a 08                	push   0x8
c0012c63:	e8 24 cc ff ff       	call   c000f88c <malloc>
c0012c68:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c6b:	e8 08 e5 00 00       	call   c0021178 <FAT::FAT()>
c0012c70:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c77:	e8 10 cc ff ff       	call   c000f88c <malloc>
c0012c7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c7f:	e8 30 f7 00 00       	call   c00223b4 <ISO9660::ISO9660()>
c0012c84:	83 c4 1c             	add    esp,0x1c
c0012c87:	c3                   	ret    

c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c88:	55                   	push   ebp
c0012c89:	57                   	push   edi
c0012c8a:	56                   	push   esi
c0012c8b:	53                   	push   ebx
c0012c8c:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c92:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c99:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ca0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ca7:	68 00 04 00 00       	push   0x400
c0012cac:	6a 00                	push   0x0
c0012cae:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cb2:	56                   	push   esi
c0012cb3:	e8 98 da fe ff       	call   c0000750 <memset>
c0012cb8:	83 c4 10             	add    esp,0x10
c0012cbb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cbf:	75 0b                	jne    c0012ccc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cc1:	50                   	push   eax
c0012cc2:	50                   	push   eax
c0012cc3:	57                   	push   edi
c0012cc4:	56                   	push   esi
c0012cc5:	e8 42 db fe ff       	call   c000080c <strcpy>
c0012cca:	eb 41                	jmp    c0012d0d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ccc:	8a 07                	mov    al,BYTE PTR [edi]
c0012cce:	3c 5c                	cmp    al,0x5c
c0012cd0:	74 04                	je     c0012cd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cd2:	3c 2f                	cmp    al,0x2f
c0012cd4:	75 18                	jne    c0012cee <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cd6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cd9:	3c 60                	cmp    al,0x60
c0012cdb:	7e 03                	jle    c0012ce0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cdd:	83 e8 20             	sub    eax,0x20
c0012ce0:	88 04 24             	mov    BYTE PTR [esp],al
c0012ce3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cea:	50                   	push   eax
c0012ceb:	50                   	push   eax
c0012cec:	eb 18                	jmp    c0012d06 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012cee:	50                   	push   eax
c0012cef:	50                   	push   eax
c0012cf0:	55                   	push   ebp
c0012cf1:	56                   	push   esi
c0012cf2:	e8 15 db fe ff       	call   c000080c <strcpy>
c0012cf7:	5a                   	pop    edx
c0012cf8:	59                   	pop    ecx
c0012cf9:	68 6d cb 02 c0       	push   0xc002cb6d
c0012cfe:	56                   	push   esi
c0012cff:	e8 48 dc fe ff       	call   c000094c <strcat>
c0012d04:	5d                   	pop    ebp
c0012d05:	58                   	pop    eax
c0012d06:	57                   	push   edi
c0012d07:	56                   	push   esi
c0012d08:	e8 3f dc fe ff       	call   c000094c <strcat>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d13:	3c 60                	cmp    al,0x60
c0012d15:	7e 03                	jle    c0012d1a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d17:	83 e8 20             	sub    eax,0x20
c0012d1a:	88 04 24             	mov    BYTE PTR [esp],al
c0012d1d:	88 03                	mov    BYTE PTR [ebx],al
c0012d1f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d26:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d2c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d30:	bf 03 00 00 00       	mov    edi,0x3
c0012d35:	b8 03 00 00 00       	mov    eax,0x3
c0012d3a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d3d:	84 d2                	test   dl,dl
c0012d3f:	0f 84 91 00 00 00    	je     c0012dd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d45:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d48:	80 fa 5c             	cmp    dl,0x5c
c0012d4b:	74 05                	je     c0012d52 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d4d:	80 fa 2f             	cmp    dl,0x2f
c0012d50:	75 12                	jne    c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d52:	89 c5                	mov    ebp,eax
c0012d54:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d59:	74 09                	je     c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d5b:	40                   	inc    eax
c0012d5c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d60:	89 cf                	mov    edi,ecx
c0012d62:	eb d6                	jmp    c0012d3a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d64:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d69:	75 5b                	jne    c0012dc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d6b:	80 fa 2e             	cmp    dl,0x2e
c0012d6e:	75 56                	jne    c0012dc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d70:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d74:	74 19                	je     c0012d8f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d76:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d7b:	74 53                	je     c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d7d:	89 f9                	mov    ecx,edi
c0012d7f:	41                   	inc    ecx
c0012d80:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d83:	80 fa 2f             	cmp    dl,0x2f
c0012d86:	74 f7                	je     c0012d7f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d88:	80 fa 5c             	cmp    dl,0x5c
c0012d8b:	74 f2                	je     c0012d7f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d8d:	eb d1                	jmp    c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d8f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d94:	74 3a                	je     c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d96:	83 f8 03             	cmp    eax,0x3
c0012d99:	74 c5                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d9b:	41                   	inc    ecx
c0012d9c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9f:	80 fa 2f             	cmp    dl,0x2f
c0012da2:	74 f7                	je     c0012d9b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da4:	80 fa 5c             	cmp    dl,0x5c
c0012da7:	74 f2                	je     c0012d9b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da9:	48                   	dec    eax
c0012daa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dae:	75 06                	jne    c0012db6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012db0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db4:	eb f3                	jmp    c0012da9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012db6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dba:	74 07                	je     c0012dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dbc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dc0:	48                   	dec    eax
c0012dc1:	eb f3                	jmp    c0012db6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dc3:	40                   	inc    eax
c0012dc4:	eb 9a                	jmp    c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc6:	80 fa 2f             	cmp    dl,0x2f
c0012dc9:	74 95                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dcb:	80 fa 5c             	cmp    dl,0x5c
c0012dce:	74 90                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dd3:	40                   	inc    eax
c0012dd4:	eb 8a                	jmp    c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	53                   	push   ebx
c0012dde:	e8 89 d9 fe ff       	call   c000076c <strlen>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012deb:	75 26                	jne    c0012e13 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012ded:	83 ec 0c             	sub    esp,0xc
c0012df0:	53                   	push   ebx
c0012df1:	e8 76 d9 fe ff       	call   c000076c <strlen>
c0012df6:	83 c4 10             	add    esp,0x10
c0012df9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012dfe:	74 26                	je     c0012e26 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	53                   	push   ebx
c0012e04:	e8 63 d9 fe ff       	call   c000076c <strlen>
c0012e09:	83 c4 10             	add    esp,0x10
c0012e0c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e11:	eb c7                	jmp    c0012dda <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e13:	83 ec 0c             	sub    esp,0xc
c0012e16:	53                   	push   ebx
c0012e17:	e8 50 d9 fe ff       	call   c000076c <strlen>
c0012e1c:	83 c4 10             	add    esp,0x10
c0012e1f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e24:	74 c7                	je     c0012ded <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e26:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e2c:	5b                   	pop    ebx
c0012e2d:	5e                   	pop    esi
c0012e2e:	5f                   	pop    edi
c0012e2f:	5d                   	pop    ebp
c0012e30:	c3                   	ret    
c0012e31:	90                   	nop

c0012e32 <File::File(char const*, Process*)>:
c0012e32:	83 ec 0c             	sub    esp,0xc
c0012e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e39:	83 ec 08             	sub    esp,0x8
c0012e3c:	6a 00                	push   0x0
c0012e3e:	50                   	push   eax
c0012e3f:	e8 46 e2 ff ff       	call   c001108a <UnixFile::UnixFile(int)>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0012e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e50:	89 10                	mov    DWORD PTR [eax],edx
c0012e52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e56:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e60:	83 c0 0d             	add    eax,0xd
c0012e63:	83 ec 04             	sub    esp,0x4
c0012e66:	52                   	push   edx
c0012e67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e6b:	50                   	push   eax
c0012e6c:	e8 17 fe ff ff       	call   c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e71:	83 c4 10             	add    esp,0x10
c0012e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e78:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e7b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e82:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e8c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e90:	90                   	nop
c0012e91:	83 c4 0c             	add    esp,0xc
c0012e94:	c3                   	ret    
c0012e95:	90                   	nop

c0012e96 <File::open(FileOpenMode)>:
c0012e96:	53                   	push   ebx
c0012e97:	b8 0b 00 00 00       	mov    eax,0xb
c0012e9c:	83 ec 08             	sub    esp,0x8
c0012e9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ea3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012eaa:	80 fa 19             	cmp    dl,0x19
c0012ead:	77 40                	ja     c0012eef <File::open(FileOpenMode)+0x59>
c0012eaf:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012eb6:	85 d2                	test   edx,edx
c0012eb8:	74 35                	je     c0012eef <File::open(FileOpenMode)+0x59>
c0012eba:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ec0:	85 d2                	test   edx,edx
c0012ec2:	74 2b                	je     c0012eef <File::open(FileOpenMode)+0x59>
c0012ec4:	b8 06 00 00 00       	mov    eax,0x6
c0012ec9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ecd:	75 20                	jne    c0012eef <File::open(FileOpenMode)+0x59>
c0012ecf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ed1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ed7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012edb:	51                   	push   ecx
c0012edc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012edf:	51                   	push   ecx
c0012ee0:	52                   	push   edx
c0012ee1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ee4:	83 c4 10             	add    esp,0x10
c0012ee7:	85 c0                	test   eax,eax
c0012ee9:	75 04                	jne    c0012eef <File::open(FileOpenMode)+0x59>
c0012eeb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012eef:	83 c4 08             	add    esp,0x8
c0012ef2:	5b                   	pop    ebx
c0012ef3:	c3                   	ret    

c0012ef4 <File::close()>:
c0012ef4:	53                   	push   ebx
c0012ef5:	b8 0b 00 00 00       	mov    eax,0xb
c0012efa:	83 ec 08             	sub    esp,0x8
c0012efd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f01:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f08:	80 fa 19             	cmp    dl,0x19
c0012f0b:	77 41                	ja     c0012f4e <File::close()+0x5a>
c0012f0d:	8b 1c 95 00 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0a00]
c0012f14:	85 db                	test   ebx,ebx
c0012f16:	74 36                	je     c0012f4e <File::close()+0x5a>
c0012f18:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f1f:	74 2d                	je     c0012f4e <File::close()+0x5a>
c0012f21:	b8 05 00 00 00       	mov    eax,0x5
c0012f26:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f2a:	74 22                	je     c0012f4e <File::close()+0x5a>
c0012f2c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f30:	8b 04 95 00 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a00]
c0012f37:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f3d:	53                   	push   ebx
c0012f3e:	53                   	push   ebx
c0012f3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f41:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f47:	50                   	push   eax
c0012f48:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	83 c4 08             	add    esp,0x8
c0012f51:	5b                   	pop    ebx
c0012f52:	c3                   	ret    
c0012f53:	90                   	nop

c0012f54 <File::seek(unsigned long long)>:
c0012f54:	56                   	push   esi
c0012f55:	53                   	push   ebx
c0012f56:	b8 0b 00 00 00       	mov    eax,0xb
c0012f5b:	51                   	push   ecx
c0012f5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f64:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f6f:	80 fa 19             	cmp    dl,0x19
c0012f72:	77 31                	ja     c0012fa5 <File::seek(unsigned long long)+0x51>
c0012f74:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012f7b:	85 d2                	test   edx,edx
c0012f7d:	74 26                	je     c0012fa5 <File::seek(unsigned long long)+0x51>
c0012f7f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f85:	85 d2                	test   edx,edx
c0012f87:	74 1c                	je     c0012fa5 <File::seek(unsigned long long)+0x51>
c0012f89:	b8 05 00 00 00       	mov    eax,0x5
c0012f8e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f92:	74 11                	je     c0012fa5 <File::seek(unsigned long long)+0x51>
c0012f94:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f96:	53                   	push   ebx
c0012f97:	51                   	push   ecx
c0012f98:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f9e:	52                   	push   edx
c0012f9f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fa2:	83 c4 10             	add    esp,0x10
c0012fa5:	5a                   	pop    edx
c0012fa6:	5b                   	pop    ebx
c0012fa7:	5e                   	pop    esi
c0012fa8:	c3                   	ret    
c0012fa9:	90                   	nop

c0012faa <File::tell(unsigned long long*)>:
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fb6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fbd:	80 fa 19             	cmp    dl,0x19
c0012fc0:	77 34                	ja     c0012ff6 <File::tell(unsigned long long*)+0x4c>
c0012fc2:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012fc9:	85 d2                	test   edx,edx
c0012fcb:	74 29                	je     c0012ff6 <File::tell(unsigned long long*)+0x4c>
c0012fcd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fd3:	85 d2                	test   edx,edx
c0012fd5:	74 1f                	je     c0012ff6 <File::tell(unsigned long long*)+0x4c>
c0012fd7:	b8 05 00 00 00       	mov    eax,0x5
c0012fdc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fe0:	74 14                	je     c0012ff6 <File::tell(unsigned long long*)+0x4c>
c0012fe2:	50                   	push   eax
c0012fe3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fe9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012fef:	52                   	push   edx
c0012ff0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ff3:	83 c4 10             	add    esp,0x10
c0012ff6:	83 c4 0c             	add    esp,0xc
c0012ff9:	c3                   	ret    

c0012ffa <File::rewind()>:
c0012ffa:	83 ec 10             	sub    esp,0x10
c0012ffd:	6a 00                	push   0x0
c0012fff:	6a 00                	push   0x0
c0013001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013005:	e8 4a ff ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001300a:	83 c4 1c             	add    esp,0x1c
c001300d:	c3                   	ret    

c001300e <File::unlink()>:
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	b8 0b 00 00 00       	mov    eax,0xb
c0013016:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001301a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013021:	80 f9 19             	cmp    cl,0x19
c0013024:	77 2f                	ja     c0013055 <File::unlink()+0x47>
c0013026:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c001302d:	85 c9                	test   ecx,ecx
c001302f:	74 24                	je     c0013055 <File::unlink()+0x47>
c0013031:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013037:	85 c9                	test   ecx,ecx
c0013039:	74 1a                	je     c0013055 <File::unlink()+0x47>
c001303b:	b8 06 00 00 00       	mov    eax,0x6
c0013040:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013044:	75 0f                	jne    c0013055 <File::unlink()+0x47>
c0013046:	83 c2 0d             	add    edx,0xd
c0013049:	50                   	push   eax
c001304a:	50                   	push   eax
c001304b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001304d:	52                   	push   edx
c001304e:	51                   	push   ecx
c001304f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	83 c4 0c             	add    esp,0xc
c0013058:	c3                   	ret    
c0013059:	90                   	nop

c001305a <File::rename(char const*)>:
c001305a:	83 ec 0c             	sub    esp,0xc
c001305d:	b8 0b 00 00 00       	mov    eax,0xb
c0013062:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013066:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001306d:	80 f9 19             	cmp    cl,0x19
c0013070:	77 32                	ja     c00130a4 <File::rename(char const*)+0x4a>
c0013072:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013079:	85 c9                	test   ecx,ecx
c001307b:	74 27                	je     c00130a4 <File::rename(char const*)+0x4a>
c001307d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013083:	85 c9                	test   ecx,ecx
c0013085:	74 1d                	je     c00130a4 <File::rename(char const*)+0x4a>
c0013087:	b8 06 00 00 00       	mov    eax,0x6
c001308c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013090:	75 12                	jne    c00130a4 <File::rename(char const*)+0x4a>
c0013092:	83 c2 0d             	add    edx,0xd
c0013095:	50                   	push   eax
c0013096:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001309c:	52                   	push   edx
c001309d:	51                   	push   ecx
c001309e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	83 c4 0c             	add    esp,0xc
c00130a7:	c3                   	ret    

c00130a8 <File::chfatattr(unsigned char, unsigned char)>:
c00130a8:	57                   	push   edi
c00130a9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ae:	56                   	push   esi
c00130af:	53                   	push   ebx
c00130b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130c3:	80 f9 19             	cmp    cl,0x19
c00130c6:	77 37                	ja     c00130ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130c8:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c00130cf:	85 c9                	test   ecx,ecx
c00130d1:	74 2c                	je     c00130ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d9:	85 c9                	test   ecx,ecx
c00130db:	74 22                	je     c00130ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130dd:	b8 06 00 00 00       	mov    eax,0x6
c00130e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e6:	75 17                	jne    c00130ff <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130ea:	89 f0                	mov    eax,esi
c00130ec:	83 c2 0d             	add    edx,0xd
c00130ef:	0f b6 f0             	movzx  esi,al
c00130f2:	0f b6 db             	movzx  ebx,bl
c00130f5:	56                   	push   esi
c00130f6:	53                   	push   ebx
c00130f7:	52                   	push   edx
c00130f8:	51                   	push   ecx
c00130f9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	5b                   	pop    ebx
c0013100:	5e                   	pop    esi
c0013101:	5f                   	pop    edi
c0013102:	c3                   	ret    
c0013103:	90                   	nop

c0013104 <File::exists()>:
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	31 c0                	xor    eax,eax
c0013109:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001310d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013114:	80 f9 19             	cmp    cl,0x19
c0013117:	77 24                	ja     c001313d <File::exists()+0x39>
c0013119:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013120:	85 c9                	test   ecx,ecx
c0013122:	74 19                	je     c001313d <File::exists()+0x39>
c0013124:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001312a:	85 c9                	test   ecx,ecx
c001312c:	74 0f                	je     c001313d <File::exists()+0x39>
c001312e:	83 c2 0d             	add    edx,0xd
c0013131:	50                   	push   eax
c0013132:	50                   	push   eax
c0013133:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013135:	52                   	push   edx
c0013136:	51                   	push   ecx
c0013137:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	83 c4 0c             	add    esp,0xc
c0013140:	c3                   	ret    
c0013141:	90                   	nop

c0013142 <File::stat(unsigned long long*, bool*)>:
c0013142:	56                   	push   esi
c0013143:	53                   	push   ebx
c0013144:	50                   	push   eax
c0013145:	b8 0b 00 00 00       	mov    eax,0xb
c001314a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001314e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013152:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013159:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001315d:	80 f9 19             	cmp    cl,0x19
c0013160:	77 3d                	ja     c001319f <File::stat(unsigned long long*, bool*)+0x5d>
c0013162:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013169:	85 c9                	test   ecx,ecx
c001316b:	74 32                	je     c001319f <File::stat(unsigned long long*, bool*)+0x5d>
c001316d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013173:	85 c9                	test   ecx,ecx
c0013175:	74 28                	je     c001319f <File::stat(unsigned long long*, bool*)+0x5d>
c0013177:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013179:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001317d:	74 13                	je     c0013192 <File::stat(unsigned long long*, bool*)+0x50>
c001317f:	83 ec 04             	sub    esp,0x4
c0013182:	56                   	push   esi
c0013183:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013189:	51                   	push   ecx
c001318a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001318d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013190:	eb 0a                	jmp    c001319c <File::stat(unsigned long long*, bool*)+0x5a>
c0013192:	53                   	push   ebx
c0013193:	83 c2 0d             	add    edx,0xd
c0013196:	56                   	push   esi
c0013197:	52                   	push   edx
c0013198:	51                   	push   ecx
c0013199:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001319c:	83 c4 10             	add    esp,0x10
c001319f:	5a                   	pop    edx
c00131a0:	5b                   	pop    ebx
c00131a1:	5e                   	pop    esi
c00131a2:	c3                   	ret    

c00131a3 <Fs::setcwd(Process*, char*)>:
c00131a3:	55                   	push   ebp
c00131a4:	57                   	push   edi
c00131a5:	56                   	push   esi
c00131a6:	53                   	push   ebx
c00131a7:	81 ec 20 02 00 00    	sub    esp,0x220
c00131ad:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131b4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131ba:	57                   	push   edi
c00131bb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131c2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131c6:	56                   	push   esi
c00131c7:	e8 bc fa ff ff       	call   c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00131cf:	e8 98 d5 fe ff       	call   c000076c <strlen>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	83 f8 02             	cmp    eax,0x2
c00131da:	77 17                	ja     c00131f3 <Fs::setcwd(Process*, char*)+0x50>
c00131dc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131e1:	83 e8 41             	sub    eax,0x41
c00131e4:	83 f8 19             	cmp    eax,0x19
c00131e7:	76 24                	jbe    c001320d <Fs::setcwd(Process*, char*)+0x6a>
c00131e9:	b8 03 00 00 00       	mov    eax,0x3
c00131ee:	e9 e0 00 00 00       	jmp    c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c00131f3:	83 ec 0c             	sub    esp,0xc
c00131f6:	56                   	push   esi
c00131f7:	e8 70 d5 fe ff       	call   c000076c <strlen>
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	83 f8 03             	cmp    eax,0x3
c0013202:	75 34                	jne    c0013238 <Fs::setcwd(Process*, char*)+0x95>
c0013204:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013209:	75 2d                	jne    c0013238 <Fs::setcwd(Process*, char*)+0x95>
c001320b:	eb cf                	jmp    c00131dc <Fs::setcwd(Process*, char*)+0x39>
c001320d:	8b 14 85 00 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0a00]
c0013214:	b8 05 00 00 00       	mov    eax,0x5
c0013219:	85 d2                	test   edx,edx
c001321b:	0f 84 b2 00 00 00    	je     c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c0013221:	b8 06 00 00 00       	mov    eax,0x6
c0013226:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001322d:	0f 85 92 00 00 00    	jne    c00132c5 <Fs::setcwd(Process*, char*)+0x122>
c0013233:	e9 9b 00 00 00       	jmp    c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c0013238:	83 ec 0c             	sub    esp,0xc
c001323b:	68 14 01 00 00       	push   0x114
c0013240:	e8 47 c6 ff ff       	call   c000f88c <malloc>
c0013245:	83 c4 0c             	add    esp,0xc
c0013248:	89 c3                	mov    ebx,eax
c001324a:	55                   	push   ebp
c001324b:	56                   	push   esi
c001324c:	50                   	push   eax
c001324d:	e8 e0 fb ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c0013252:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013257:	83 c4 0c             	add    esp,0xc
c001325a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001325e:	50                   	push   eax
c001325f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013263:	50                   	push   eax
c0013264:	53                   	push   ebx
c0013265:	e8 d8 fe ff ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	83 f8 02             	cmp    eax,0x2
c0013270:	74 04                	je     c0013276 <Fs::setcwd(Process*, char*)+0xd3>
c0013272:	85 c0                	test   eax,eax
c0013274:	74 1c                	je     c0013292 <Fs::setcwd(Process*, char*)+0xef>
c0013276:	b8 01 00 00 00       	mov    eax,0x1
c001327b:	85 db                	test   ebx,ebx
c001327d:	74 54                	je     c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c001327f:	83 ec 0c             	sub    esp,0xc
c0013282:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013284:	53                   	push   ebx
c0013285:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	b8 01 00 00 00       	mov    eax,0x1
c0013290:	eb 41                	jmp    c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c0013292:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013297:	75 1c                	jne    c00132b5 <Fs::setcwd(Process*, char*)+0x112>
c0013299:	b8 02 00 00 00       	mov    eax,0x2
c001329e:	85 db                	test   ebx,ebx
c00132a0:	74 31                	je     c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c00132a2:	83 ec 0c             	sub    esp,0xc
c00132a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a7:	53                   	push   ebx
c00132a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132ab:	83 c4 10             	add    esp,0x10
c00132ae:	b8 02 00 00 00       	mov    eax,0x2
c00132b3:	eb 1e                	jmp    c00132d3 <Fs::setcwd(Process*, char*)+0x130>
c00132b5:	85 db                	test   ebx,ebx
c00132b7:	74 0c                	je     c00132c5 <Fs::setcwd(Process*, char*)+0x122>
c00132b9:	83 ec 0c             	sub    esp,0xc
c00132bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132be:	53                   	push   ebx
c00132bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	50                   	push   eax
c00132c6:	50                   	push   eax
c00132c7:	56                   	push   esi
c00132c8:	57                   	push   edi
c00132c9:	e8 3e d5 fe ff       	call   c000080c <strcpy>
c00132ce:	83 c4 10             	add    esp,0x10
c00132d1:	31 c0                	xor    eax,eax
c00132d3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132d9:	5b                   	pop    ebx
c00132da:	5e                   	pop    esi
c00132db:	5f                   	pop    edi
c00132dc:	5d                   	pop    ebp
c00132dd:	c3                   	ret    

c00132de <Directory::Directory(char const*, Process*)>:
c00132de:	83 ec 0c             	sub    esp,0xc
c00132e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e5:	83 ec 08             	sub    esp,0x8
c00132e8:	6a 00                	push   0x0
c00132ea:	50                   	push   eax
c00132eb:	e8 9a dd ff ff       	call   c001108a <UnixFile::UnixFile(int)>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c00132f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fc:	89 10                	mov    DWORD PTR [eax],edx
c00132fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013302:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330c:	83 c0 0d             	add    eax,0xd
c001330f:	83 ec 04             	sub    esp,0x4
c0013312:	52                   	push   edx
c0013313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013317:	50                   	push   eax
c0013318:	e8 6b f9 ff ff       	call   c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)>
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013327:	8d 50 bf             	lea    edx,[eax-0x41]
c001332a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013338:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001333c:	90                   	nop
c001333d:	83 c4 0c             	add    esp,0xc
c0013340:	c3                   	ret    
c0013341:	90                   	nop

c0013342 <Directory::open()>:
c0013342:	53                   	push   ebx
c0013343:	b8 0b 00 00 00       	mov    eax,0xb
c0013348:	83 ec 08             	sub    esp,0x8
c001334b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001334f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013356:	80 fa 19             	cmp    dl,0x19
c0013359:	77 3d                	ja     c0013398 <Directory::open()+0x56>
c001335b:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0013362:	85 d2                	test   edx,edx
c0013364:	74 32                	je     c0013398 <Directory::open()+0x56>
c0013366:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001336c:	85 d2                	test   edx,edx
c001336e:	74 28                	je     c0013398 <Directory::open()+0x56>
c0013370:	b8 06 00 00 00       	mov    eax,0x6
c0013375:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013379:	75 1d                	jne    c0013398 <Directory::open()+0x56>
c001337b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013381:	50                   	push   eax
c0013382:	8b 02                	mov    eax,DWORD PTR [edx]
c0013384:	51                   	push   ecx
c0013385:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013388:	51                   	push   ecx
c0013389:	52                   	push   edx
c001338a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	85 c0                	test   eax,eax
c0013392:	75 04                	jne    c0013398 <Directory::open()+0x56>
c0013394:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013398:	83 c4 08             	add    esp,0x8
c001339b:	5b                   	pop    ebx
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Directory::close()>:
c001339e:	53                   	push   ebx
c001339f:	b8 0b 00 00 00       	mov    eax,0xb
c00133a4:	83 ec 08             	sub    esp,0x8
c00133a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133ab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133b2:	80 fa 19             	cmp    dl,0x19
c00133b5:	77 41                	ja     c00133f8 <Directory::close()+0x5a>
c00133b7:	8b 1c 95 00 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0a00]
c00133be:	85 db                	test   ebx,ebx
c00133c0:	74 36                	je     c00133f8 <Directory::close()+0x5a>
c00133c2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133c9:	74 2d                	je     c00133f8 <Directory::close()+0x5a>
c00133cb:	b8 05 00 00 00       	mov    eax,0x5
c00133d0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133d4:	74 22                	je     c00133f8 <Directory::close()+0x5a>
c00133d6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133da:	8b 04 95 00 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a00]
c00133e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133e7:	53                   	push   ebx
c00133e8:	53                   	push   ebx
c00133e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00133eb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133f1:	50                   	push   eax
c00133f2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133f5:	83 c4 10             	add    esp,0x10
c00133f8:	83 c4 08             	add    esp,0x8
c00133fb:	5b                   	pop    ebx
c00133fc:	c3                   	ret    
c00133fd:	90                   	nop

c00133fe <Directory::unlink()>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	b8 0b 00 00 00       	mov    eax,0xb
c0013406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001340a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013411:	80 f9 19             	cmp    cl,0x19
c0013414:	77 2f                	ja     c0013445 <Directory::unlink()+0x47>
c0013416:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c001341d:	85 c9                	test   ecx,ecx
c001341f:	74 24                	je     c0013445 <Directory::unlink()+0x47>
c0013421:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013427:	85 c9                	test   ecx,ecx
c0013429:	74 1a                	je     c0013445 <Directory::unlink()+0x47>
c001342b:	b8 06 00 00 00       	mov    eax,0x6
c0013430:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013434:	75 0f                	jne    c0013445 <Directory::unlink()+0x47>
c0013436:	83 c2 0d             	add    edx,0xd
c0013439:	50                   	push   eax
c001343a:	50                   	push   eax
c001343b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001343d:	52                   	push   edx
c001343e:	51                   	push   ecx
c001343f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013442:	83 c4 10             	add    esp,0x10
c0013445:	83 c4 0c             	add    esp,0xc
c0013448:	c3                   	ret    
c0013449:	90                   	nop

c001344a <Directory::rename(char const*)>:
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	b8 0b 00 00 00       	mov    eax,0xb
c0013452:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013456:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001345d:	80 f9 19             	cmp    cl,0x19
c0013460:	77 32                	ja     c0013494 <Directory::rename(char const*)+0x4a>
c0013462:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013469:	85 c9                	test   ecx,ecx
c001346b:	74 27                	je     c0013494 <Directory::rename(char const*)+0x4a>
c001346d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013473:	85 c9                	test   ecx,ecx
c0013475:	74 1d                	je     c0013494 <Directory::rename(char const*)+0x4a>
c0013477:	b8 06 00 00 00       	mov    eax,0x6
c001347c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013480:	75 12                	jne    c0013494 <Directory::rename(char const*)+0x4a>
c0013482:	83 c2 0d             	add    edx,0xd
c0013485:	50                   	push   eax
c0013486:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001348c:	52                   	push   edx
c001348d:	51                   	push   ecx
c001348e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	83 c4 0c             	add    esp,0xc
c0013497:	c3                   	ret    

c0013498 <Directory::exists()>:
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	31 c0                	xor    eax,eax
c001349d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134a8:	80 f9 19             	cmp    cl,0x19
c00134ab:	77 24                	ja     c00134d1 <Directory::exists()+0x39>
c00134ad:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c00134b4:	85 c9                	test   ecx,ecx
c00134b6:	74 19                	je     c00134d1 <Directory::exists()+0x39>
c00134b8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134be:	85 c9                	test   ecx,ecx
c00134c0:	74 0f                	je     c00134d1 <Directory::exists()+0x39>
c00134c2:	83 c2 0d             	add    edx,0xd
c00134c5:	50                   	push   eax
c00134c6:	50                   	push   eax
c00134c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134c9:	52                   	push   edx
c00134ca:	51                   	push   ecx
c00134cb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	83 c4 0c             	add    esp,0xc
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <Directory::read(dirent*)>:
c00134d6:	83 ec 1c             	sub    esp,0x1c
c00134d9:	b8 0b 00 00 00       	mov    eax,0xb
c00134de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134e2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134e9:	80 fa 19             	cmp    dl,0x19
c00134ec:	77 30                	ja     c001351e <Directory::read(dirent*)+0x48>
c00134ee:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c00134f5:	85 d2                	test   edx,edx
c00134f7:	74 25                	je     c001351e <Directory::read(dirent*)+0x48>
c00134f9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013500:	74 1c                	je     c001351e <Directory::read(dirent*)+0x48>
c0013502:	83 ec 0c             	sub    esp,0xc
c0013505:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013507:	8d 54 24 18          	lea    edx,[esp+0x18]
c001350b:	52                   	push   edx
c001350c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013510:	6a 00                	push   0x0
c0013512:	68 10 01 00 00       	push   0x110
c0013517:	51                   	push   ecx
c0013518:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001351b:	83 c4 20             	add    esp,0x20
c001351e:	83 c4 1c             	add    esp,0x1c
c0013521:	c3                   	ret    

c0013522 <Directory::create()>:
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	b8 0b 00 00 00       	mov    eax,0xb
c001352a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001352e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013535:	80 f9 19             	cmp    cl,0x19
c0013538:	77 2f                	ja     c0013569 <Directory::create()+0x47>
c001353a:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013541:	85 c9                	test   ecx,ecx
c0013543:	74 24                	je     c0013569 <Directory::create()+0x47>
c0013545:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001354b:	85 c9                	test   ecx,ecx
c001354d:	74 1a                	je     c0013569 <Directory::create()+0x47>
c001354f:	b8 06 00 00 00       	mov    eax,0x6
c0013554:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013558:	75 0f                	jne    c0013569 <Directory::create()+0x47>
c001355a:	83 c2 0d             	add    edx,0xd
c001355d:	50                   	push   eax
c001355e:	50                   	push   eax
c001355f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013561:	52                   	push   edx
c0013562:	51                   	push   ecx
c0013563:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	83 c4 0c             	add    esp,0xc
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001356e:	b8 0a 00 00 00       	mov    eax,0xa
c0013573:	c3                   	ret    

c0013574 <Bus::Bus(char const*)>:
c0013574:	83 ec 0c             	sub    esp,0xc
c0013577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357b:	83 ec 08             	sub    esp,0x8
c001357e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013582:	50                   	push   eax
c0013583:	e8 88 09 00 00       	call   c0013f10 <Device::Device(char const*)>
c0013588:	83 c4 10             	add    esp,0x10
c001358b:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c0013590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013594:	89 10                	mov    DWORD PTR [eax],edx
c0013596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135a4:	90                   	nop
c00135a5:	83 c4 0c             	add    esp,0xc
c00135a8:	c3                   	ret    
c00135a9:	90                   	nop

c00135aa <Bus::~Bus()>:
c00135aa:	83 ec 0c             	sub    esp,0xc
c00135ad:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c00135b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b6:	89 10                	mov    DWORD PTR [eax],edx
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	83 ec 0c             	sub    esp,0xc
c00135bf:	50                   	push   eax
c00135c0:	e8 15 06 00 00       	call   c0013bda <Device::~Device()>
c00135c5:	83 c4 10             	add    esp,0x10
c00135c8:	90                   	nop
c00135c9:	83 c4 0c             	add    esp,0xc
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop

c00135ce <Bus::~Bus()>:
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	83 ec 0c             	sub    esp,0xc
c00135d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d8:	e8 cd ff ff ff       	call   c00135aa <Bus::~Bus()>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	83 ec 08             	sub    esp,0x8
c00135e3:	68 58 01 00 00       	push   0x158
c00135e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ec:	e8 02 f2 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00135f1:	83 c4 10             	add    esp,0x10
c00135f4:	83 c4 0c             	add    esp,0xc
c00135f7:	c3                   	ret    

c00135f8 <Buzzer::Buzzer(char const*)>:
c00135f8:	83 ec 0c             	sub    esp,0xc
c00135fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ff:	83 ec 08             	sub    esp,0x8
c0013602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013606:	50                   	push   eax
c0013607:	e8 04 09 00 00       	call   c0013f10 <Device::Device(char const*)>
c001360c:	83 c4 10             	add    esp,0x10
c001360f:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013618:	89 10                	mov    DWORD PTR [eax],edx
c001361a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013636:	90                   	nop
c0013637:	83 c4 0c             	add    esp,0xc
c001363a:	c3                   	ret    
c001363b:	90                   	nop

c001363c <Buzzer::~Buzzer()>:
c001363c:	83 ec 0c             	sub    esp,0xc
c001363f:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013648:	89 10                	mov    DWORD PTR [eax],edx
c001364a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364e:	83 ec 0c             	sub    esp,0xc
c0013651:	50                   	push   eax
c0013652:	e8 83 05 00 00       	call   c0013bda <Device::~Device()>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	90                   	nop
c001365b:	83 c4 0c             	add    esp,0xc
c001365e:	c3                   	ret    
c001365f:	90                   	nop

c0013660 <Buzzer::~Buzzer()>:
c0013660:	83 ec 0c             	sub    esp,0xc
c0013663:	83 ec 0c             	sub    esp,0xc
c0013666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366a:	e8 cd ff ff ff       	call   c001363c <Buzzer::~Buzzer()>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	83 ec 08             	sub    esp,0x8
c0013675:	68 5c 01 00 00       	push   0x15c
c001367a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367e:	e8 70 f1 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0013683:	83 c4 10             	add    esp,0x10
c0013686:	83 c4 0c             	add    esp,0xc
c0013689:	c3                   	ret    

c001368a <Buzzer::stop()>:
c001368a:	83 ec 14             	sub    esp,0x14
c001368d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013691:	8b 10                	mov    edx,DWORD PTR [eax]
c0013693:	6a 00                	push   0x0
c0013695:	50                   	push   eax
c0013696:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013699:	83 c4 1c             	add    esp,0x1c
c001369c:	c3                   	ret    

c001369d <beepThread(void*)>:
c001369d:	53                   	push   ebx
c001369e:	83 ec 08             	sub    esp,0x8
c00136a1:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00136a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136aa:	48                   	dec    eax
c00136ab:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00136b0:	75 01                	jne    c00136b3 <beepThread(void*)+0x16>
c00136b2:	fb                   	sti    
c00136b3:	50                   	push   eax
c00136b4:	50                   	push   eax
c00136b5:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136ba:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136c0:	52                   	push   edx
c00136c1:	50                   	push   eax
c00136c2:	e8 f8 ac 00 00       	call   c001e3bf <nanoSleep(unsigned long long)>
c00136c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136ca:	e8 bb ff ff ff       	call   c001368a <Buzzer::stop()>
c00136cf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136d7:	83 c4 18             	add    esp,0x18
c00136da:	5b                   	pop    ebx
c00136db:	e9 db ab 00 00       	jmp    c001e2bb <blockTask(TaskState)>

c00136e0 <Buzzer::beep(int, int, bool)>:
c00136e0:	57                   	push   edi
c00136e1:	56                   	push   esi
c00136e2:	53                   	push   ebx
c00136e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136ef:	52                   	push   edx
c00136f0:	52                   	push   edx
c00136f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00136f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f7:	56                   	push   esi
c00136f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136fb:	83 c4 10             	add    esp,0x10
c00136fe:	89 f8                	mov    eax,edi
c0013700:	84 c0                	test   al,al
c0013702:	74 1f                	je     c0013723 <Buzzer::beep(int, int, bool)+0x43>
c0013704:	50                   	push   eax
c0013705:	50                   	push   eax
c0013706:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001370c:	99                   	cdq    
c001370d:	52                   	push   edx
c001370e:	50                   	push   eax
c001370f:	e8 ab ac 00 00       	call   c001e3bf <nanoSleep(unsigned long long)>
c0013714:	83 c4 10             	add    esp,0x10
c0013717:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001371b:	5b                   	pop    ebx
c001371c:	5e                   	pop    esi
c001371d:	5f                   	pop    edi
c001371e:	e9 67 ff ff ff       	jmp    c001368a <Buzzer::stop()>
c0013723:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013729:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001372e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013736:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001373a:	c7 44 24 14 9d 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc001369d
c0013742:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013746:	5b                   	pop    ebx
c0013747:	5e                   	pop    esi
c0013748:	5f                   	pop    edi
c0013749:	e9 2a a7 00 00       	jmp    c001de78 <Process::createThread(void (*)(void*), void*, int)>

c001374e <User::loadClockSettings(int)>:
c001374e:	53                   	push   ebx
c001374f:	83 ec 14             	sub    esp,0x14
c0013752:	68 14 01 00 00       	push   0x114
c0013757:	e8 30 c1 ff ff       	call   c000f88c <malloc>
c001375c:	83 c4 0c             	add    esp,0xc
c001375f:	89 c3                	mov    ebx,eax
c0013761:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c0013767:	68 84 b4 02 c0       	push   0xc002b484
c001376c:	50                   	push   eax
c001376d:	e8 c0 f6 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c0013772:	58                   	pop    eax
c0013773:	5a                   	pop    edx
c0013774:	6a 01                	push   0x1
c0013776:	53                   	push   ebx
c0013777:	e8 1a f7 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001377c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001377f:	e8 70 f7 ff ff       	call   c0012ef4 <File::close()>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	85 db                	test   ebx,ebx
c0013789:	74 0f                	je     c001379a <User::loadClockSettings(int)+0x4c>
c001378b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001378d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013791:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013794:	83 c4 08             	add    esp,0x8
c0013797:	5b                   	pop    ebx
c0013798:	ff e0                	jmp    eax
c001379a:	83 c4 08             	add    esp,0x8
c001379d:	5b                   	pop    ebx
c001379e:	c3                   	ret    
c001379f:	90                   	nop

c00137a0 <Clock::Clock(char const*)>:
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a7:	83 ec 08             	sub    esp,0x8
c00137aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137ae:	50                   	push   eax
c00137af:	e8 5c 07 00 00       	call   c0013f10 <Device::Device(char const*)>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c00137bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c0:	89 10                	mov    DWORD PTR [eax],edx
c00137c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137d0:	90                   	nop
c00137d1:	83 c4 0c             	add    esp,0xc
c00137d4:	c3                   	ret    
c00137d5:	90                   	nop

c00137d6 <Clock::~Clock()>:
c00137d6:	83 ec 0c             	sub    esp,0xc
c00137d9:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c00137de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e2:	89 10                	mov    DWORD PTR [eax],edx
c00137e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	50                   	push   eax
c00137ec:	e8 e9 03 00 00       	call   c0013bda <Device::~Device()>
c00137f1:	83 c4 10             	add    esp,0x10
c00137f4:	90                   	nop
c00137f5:	83 c4 0c             	add    esp,0xc
c00137f8:	c3                   	ret    
c00137f9:	90                   	nop

c00137fa <Clock::~Clock()>:
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	83 ec 0c             	sub    esp,0xc
c0013800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013804:	e8 cd ff ff ff       	call   c00137d6 <Clock::~Clock()>
c0013809:	83 c4 10             	add    esp,0x10
c001380c:	83 ec 08             	sub    esp,0x8
c001380f:	68 58 01 00 00       	push   0x158
c0013814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013818:	e8 d6 ef ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c001381d:	83 c4 10             	add    esp,0x10
c0013820:	83 c4 0c             	add    esp,0xc
c0013823:	c3                   	ret    

c0013824 <Clock::timeInSecondsLocal()>:
c0013824:	53                   	push   ebx
c0013825:	83 ec 14             	sub    esp,0x14
c0013828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001382c:	8b 10                	mov    edx,DWORD PTR [eax]
c001382e:	50                   	push   eax
c001382f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013832:	0f b6 0d 7c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f17c
c0013839:	03 0d 80 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f180
c001383f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013845:	89 cb                	mov    ebx,ecx
c0013847:	c1 fb 1f             	sar    ebx,0x1f
c001384a:	01 c8                	add    eax,ecx
c001384c:	11 da                	adc    edx,ebx
c001384e:	83 c4 10             	add    esp,0x10
c0013851:	31 c9                	xor    ecx,ecx
c0013853:	80 3d 7d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f17d,0x0
c001385a:	74 05                	je     c0013861 <Clock::timeInSecondsLocal()+0x3d>
c001385c:	b9 08 07 00 00       	mov    ecx,0x708
c0013861:	31 db                	xor    ebx,ebx
c0013863:	01 c8                	add    eax,ecx
c0013865:	11 da                	adc    edx,ebx
c0013867:	83 c4 08             	add    esp,0x8
c001386a:	5b                   	pop    ebx
c001386b:	c3                   	ret    

c001386c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001386c:	57                   	push   edi
c001386d:	56                   	push   esi
c001386e:	53                   	push   ebx
c001386f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013873:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013877:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013879:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001387d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013880:	0f b6 05 7c f1 02 c0 	movzx  eax,BYTE PTR ds:0xc002f17c
c0013887:	03 05 80 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f180
c001388d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013893:	99                   	cdq    
c0013894:	29 c6                	sub    esi,eax
c0013896:	19 d7                	sbb    edi,edx
c0013898:	89 f0                	mov    eax,esi
c001389a:	89 fa                	mov    edx,edi
c001389c:	31 f6                	xor    esi,esi
c001389e:	80 3d 7d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f17d,0x0
c00138a5:	74 05                	je     c00138ac <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138a7:	be 08 07 00 00       	mov    esi,0x708
c00138ac:	31 ff                	xor    edi,edi
c00138ae:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138b2:	29 f0                	sub    eax,esi
c00138b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138b8:	19 fa                	sbb    edx,edi
c00138ba:	89 d8                	mov    eax,ebx
c00138bc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138c0:	5b                   	pop    ebx
c00138c1:	5e                   	pop    esi
c00138c2:	5f                   	pop    edi
c00138c3:	ff e0                	jmp    eax

c00138c5 <datetimeToSeconds(datetime_t)>:
c00138c5:	55                   	push   ebp
c00138c6:	57                   	push   edi
c00138c7:	56                   	push   esi
c00138c8:	53                   	push   ebx
c00138c9:	83 ec 14             	sub    esp,0x14
c00138cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138d4:	89 d3                	mov    ebx,edx
c00138d6:	0f b6 c6             	movzx  eax,dh
c00138d9:	c1 eb 10             	shr    ebx,0x10
c00138dc:	48                   	dec    eax
c00138dd:	66 81 eb 6c 07       	sub    bx,0x76c
c00138e2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138e6:	0f b6 f5             	movzx  esi,ch
c00138e9:	89 cf                	mov    edi,ecx
c00138eb:	6b f6 3c             	imul   esi,esi,0x3c
c00138ee:	c1 ef 10             	shr    edi,0x10
c00138f1:	0f b6 c9             	movzx  ecx,cl
c00138f4:	89 f8                	mov    eax,edi
c00138f6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138fc:	0f b6 f8             	movzx  edi,al
c00138ff:	0f b6 d2             	movzx  edx,dl
c0013902:	01 fe                	add    esi,edi
c0013904:	01 f1                	add    ecx,esi
c0013906:	0f b7 f3             	movzx  esi,bx
c0013909:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001390d:	c1 f9 1f             	sar    ecx,0x1f
c0013910:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013915:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013919:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001391e:	8b 0c 8d e0 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b20]
c0013925:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013929:	76 29                	jbe    c0013954 <datetimeToSeconds(datetime_t)+0x8f>
c001392b:	f6 c3 03             	test   bl,0x3
c001392e:	75 24                	jne    c0013954 <datetimeToSeconds(datetime_t)+0x8f>
c0013930:	31 d2                	xor    edx,edx
c0013932:	bf 64 00 00 00       	mov    edi,0x64
c0013937:	89 d8                	mov    eax,ebx
c0013939:	66 f7 f7             	div    di
c001393c:	66 85 d2             	test   dx,dx
c001393f:	75 12                	jne    c0013953 <datetimeToSeconds(datetime_t)+0x8e>
c0013941:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013947:	bf 90 01 00 00       	mov    edi,0x190
c001394c:	99                   	cdq    
c001394d:	f7 ff                	idiv   edi
c001394f:	85 d2                	test   edx,edx
c0013951:	75 01                	jne    c0013954 <datetimeToSeconds(datetime_t)+0x8f>
c0013953:	41                   	inc    ecx
c0013954:	66 83 fb 46          	cmp    bx,0x46
c0013958:	76 45                	jbe    c001399f <datetimeToSeconds(datetime_t)+0xda>
c001395a:	bb 46 00 00 00       	mov    ebx,0x46
c001395f:	bf 64 00 00 00       	mov    edi,0x64
c0013964:	bd 90 01 00 00       	mov    ebp,0x190
c0013969:	b8 6d 01 00 00       	mov    eax,0x16d
c001396e:	f6 c3 03             	test   bl,0x3
c0013971:	75 23                	jne    c0013996 <datetimeToSeconds(datetime_t)+0xd1>
c0013973:	89 d8                	mov    eax,ebx
c0013975:	99                   	cdq    
c0013976:	f7 ff                	idiv   edi
c0013978:	b8 6e 01 00 00       	mov    eax,0x16e
c001397d:	85 d2                	test   edx,edx
c001397f:	75 15                	jne    c0013996 <datetimeToSeconds(datetime_t)+0xd1>
c0013981:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013987:	99                   	cdq    
c0013988:	f7 fd                	idiv   ebp
c001398a:	83 fa 01             	cmp    edx,0x1
c001398d:	19 c0                	sbb    eax,eax
c001398f:	f7 d0                	not    eax
c0013991:	05 6e 01 00 00       	add    eax,0x16e
c0013996:	01 c1                	add    ecx,eax
c0013998:	43                   	inc    ebx
c0013999:	39 f3                	cmp    ebx,esi
c001399b:	7c cc                	jl     c0013969 <datetimeToSeconds(datetime_t)+0xa4>
c001399d:	eb 35                	jmp    c00139d4 <datetimeToSeconds(datetime_t)+0x10f>
c001399f:	74 33                	je     c00139d4 <datetimeToSeconds(datetime_t)+0x10f>
c00139a1:	b8 45 00 00 00       	mov    eax,0x45
c00139a6:	89 c2                	mov    edx,eax
c00139a8:	83 e2 03             	and    edx,0x3
c00139ab:	39 f0                	cmp    eax,esi
c00139ad:	7e 0f                	jle    c00139be <datetimeToSeconds(datetime_t)+0xf9>
c00139af:	83 fa 01             	cmp    edx,0x1
c00139b2:	19 d2                	sbb    edx,edx
c00139b4:	48                   	dec    eax
c00139b5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139bc:	eb e8                	jmp    c00139a6 <datetimeToSeconds(datetime_t)+0xe1>
c00139be:	b8 6d 01 00 00       	mov    eax,0x16d
c00139c3:	85 d2                	test   edx,edx
c00139c5:	75 0b                	jne    c00139d2 <datetimeToSeconds(datetime_t)+0x10d>
c00139c7:	66 83 fb 01          	cmp    bx,0x1
c00139cb:	19 c0                	sbb    eax,eax
c00139cd:	05 6e 01 00 00       	add    eax,0x16e
c00139d2:	29 c1                	sub    ecx,eax
c00139d4:	b8 80 51 01 00       	mov    eax,0x15180
c00139d9:	f7 e9                	imul   ecx
c00139db:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139df:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139e3:	83 c4 14             	add    esp,0x14
c00139e6:	5b                   	pop    ebx
c00139e7:	5e                   	pop    esi
c00139e8:	5f                   	pop    edi
c00139e9:	5d                   	pop    ebp
c00139ea:	c3                   	ret    
c00139eb:	90                   	nop

c00139ec <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139ec:	57                   	push   edi
c00139ed:	56                   	push   esi
c00139ee:	53                   	push   ebx
c00139ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00139f5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a00:	e8 c0 fe ff ff       	call   c00138c5 <datetimeToSeconds(datetime_t)>
c0013a05:	59                   	pop    ecx
c0013a06:	0f b6 0d 7c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f17c
c0013a0d:	5b                   	pop    ebx
c0013a0e:	03 0d 80 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f180
c0013a14:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a1a:	89 cb                	mov    ebx,ecx
c0013a1c:	c1 fb 1f             	sar    ebx,0x1f
c0013a1f:	29 c8                	sub    eax,ecx
c0013a21:	19 da                	sbb    edx,ebx
c0013a23:	31 c9                	xor    ecx,ecx
c0013a25:	80 3d 7d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f17d,0x0
c0013a2c:	74 05                	je     c0013a33 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a2e:	b9 08 07 00 00       	mov    ecx,0x708
c0013a33:	31 db                	xor    ebx,ebx
c0013a35:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a39:	29 c8                	sub    eax,ecx
c0013a3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a3f:	19 da                	sbb    edx,ebx
c0013a41:	89 f8                	mov    eax,edi
c0013a43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a47:	5b                   	pop    ebx
c0013a48:	5e                   	pop    esi
c0013a49:	5f                   	pop    edi
c0013a4a:	ff e0                	jmp    eax

c0013a4c <secondsToDatetime(unsigned long long)>:
c0013a4c:	55                   	push   ebp
c0013a4d:	57                   	push   edi
c0013a4e:	56                   	push   esi
c0013a4f:	53                   	push   ebx
c0013a50:	83 ec 1c             	sub    esp,0x1c
c0013a53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a5b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a5f:	6a 00                	push   0x0
c0013a61:	68 80 51 01 00       	push   0x15180
c0013a66:	55                   	push   ebp
c0013a67:	57                   	push   edi
c0013a68:	e8 97 37 01 00       	call   c0027204 <__udivdi3>
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a7a:	6a 00                	push   0x0
c0013a7c:	68 80 51 01 00       	push   0x15180
c0013a81:	55                   	push   ebp
c0013a82:	57                   	push   edi
c0013a83:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a88:	e8 77 38 01 00       	call   c0027304 <__umoddi3>
c0013a8d:	83 c4 10             	add    esp,0x10
c0013a90:	99                   	cdq    
c0013a91:	f7 ff                	idiv   edi
c0013a93:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a98:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a9b:	89 d0                	mov    eax,edx
c0013a9d:	99                   	cdq    
c0013a9e:	f7 ff                	idiv   edi
c0013aa0:	85 db                	test   ebx,ebx
c0013aa2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013aa5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aa8:	79 11                	jns    c0013abb <secondsToDatetime(unsigned long long)+0x6f>
c0013aaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013aae:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ab4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ab9:	eb 07                	jmp    c0013ac2 <secondsToDatetime(unsigned long long)+0x76>
c0013abb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ac0:	89 d8                	mov    eax,ebx
c0013ac2:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ac7:	99                   	cdq    
c0013ac8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013acd:	f7 f9                	idiv   ecx
c0013acf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ad8:	31 d2                	xor    edx,edx
c0013ada:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ae2:	01 c3                	add    ebx,eax
c0013ae4:	89 d8                	mov    eax,ebx
c0013ae6:	f7 f1                	div    ecx
c0013ae8:	31 d2                	xor    edx,edx
c0013aea:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013aed:	89 d8                	mov    eax,ebx
c0013aef:	f7 f7                	div    edi
c0013af1:	31 d2                	xor    edx,edx
c0013af3:	29 c1                	sub    ecx,eax
c0013af5:	89 d8                	mov    eax,ebx
c0013af7:	f7 f5                	div    ebp
c0013af9:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013afe:	29 c1                	sub    ecx,eax
c0013b00:	31 d2                	xor    edx,edx
c0013b02:	89 c8                	mov    eax,ecx
c0013b04:	f7 f5                	div    ebp
c0013b06:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b0f:	31 d2                	xor    edx,edx
c0013b11:	89 c8                	mov    eax,ecx
c0013b13:	f7 f5                	div    ebp
c0013b15:	31 d2                	xor    edx,edx
c0013b17:	01 c3                	add    ebx,eax
c0013b19:	89 c8                	mov    eax,ecx
c0013b1b:	f7 f7                	div    edi
c0013b1d:	bf 99 00 00 00       	mov    edi,0x99
c0013b22:	29 c3                	sub    ebx,eax
c0013b24:	31 d2                	xor    edx,edx
c0013b26:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b2e:	29 c3                	sub    ebx,eax
c0013b30:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b33:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b36:	bb 05 00 00 00       	mov    ebx,0x5
c0013b3b:	83 c1 02             	add    ecx,0x2
c0013b3e:	89 c8                	mov    eax,ecx
c0013b40:	f7 f7                	div    edi
c0013b42:	31 d2                	xor    edx,edx
c0013b44:	89 c7                	mov    edi,eax
c0013b46:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b4c:	83 c0 02             	add    eax,0x2
c0013b4f:	f7 f3                	div    ebx
c0013b51:	89 eb                	mov    ebx,ebp
c0013b53:	29 c3                	sub    ebx,eax
c0013b55:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b5b:	88 1e                	mov    BYTE PTR [esi],bl
c0013b5d:	19 c0                	sbb    eax,eax
c0013b5f:	31 d2                	xor    edx,edx
c0013b61:	83 e0 0c             	and    eax,0xc
c0013b64:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b68:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b70:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b74:	83 f9 01             	cmp    ecx,0x1
c0013b77:	0f 96 c2             	setbe  dl
c0013b7a:	41                   	inc    ecx
c0013b7b:	01 d0                	add    eax,edx
c0013b7d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b80:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b84:	83 c4 1c             	add    esp,0x1c
c0013b87:	89 f0                	mov    eax,esi
c0013b89:	5b                   	pop    ebx
c0013b8a:	5e                   	pop    esi
c0013b8b:	5f                   	pop    edi
c0013b8c:	5d                   	pop    ebp
c0013b8d:	c2 04 00             	ret    0x4

c0013b90 <Clock::timeInDatetimeLocal()>:
c0013b90:	53                   	push   ebx
c0013b91:	83 ec 14             	sub    esp,0x14
c0013b94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b9c:	e8 83 fc ff ff       	call   c0013824 <Clock::timeInSecondsLocal()>
c0013ba1:	83 c4 0c             	add    esp,0xc
c0013ba4:	52                   	push   edx
c0013ba5:	50                   	push   eax
c0013ba6:	53                   	push   ebx
c0013ba7:	e8 a0 fe ff ff       	call   c0013a4c <secondsToDatetime(unsigned long long)>
c0013bac:	89 d8                	mov    eax,ebx
c0013bae:	83 c4 14             	add    esp,0x14
c0013bb1:	5b                   	pop    ebx
c0013bb2:	c2 04 00             	ret    0x4
c0013bb5:	90                   	nop

c0013bb6 <Device::hibernate()>:
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <Device::wake()>:
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <Device::detect()>:
c0013bba:	c3                   	ret    
c0013bbb:	90                   	nop

c0013bbc <Device::disableLegacy()>:
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <Device::powerSaving(PowerSavingLevel)>:
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <DriverlessDevice::close(int, int, void*)>:
c0013bc0:	31 c0                	xor    eax,eax
c0013bc2:	c3                   	ret    
c0013bc3:	90                   	nop

c0013bc4 <DriverlessDevice::detect()>:
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <DriverlessDevice::open(int, int, void*)>:
c0013bc6:	83 ec 18             	sub    esp,0x18
c0013bc9:	68 10 b5 02 c0       	push   0xc002b510
c0013bce:	e8 36 67 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0013bd3:	83 c8 ff             	or     eax,0xffffffff
c0013bd6:	83 c4 1c             	add    esp,0x1c
c0013bd9:	c3                   	ret    

c0013bda <Device::~Device()>:
c0013bda:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0013bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013be3:	89 10                	mov    DWORD PTR [eax],edx
c0013be5:	90                   	nop
c0013be6:	c3                   	ret    
c0013be7:	90                   	nop

c0013be8 <Device::~Device()>:
c0013be8:	83 ec 0c             	sub    esp,0xc
c0013beb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bef:	e8 e6 ff ff ff       	call   c0013bda <Device::~Device()>
c0013bf4:	83 c4 04             	add    esp,0x4
c0013bf7:	83 ec 08             	sub    esp,0x8
c0013bfa:	68 58 01 00 00       	push   0x158
c0013bff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c03:	e8 eb eb ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	83 c4 0c             	add    esp,0xc
c0013c0e:	c3                   	ret    
c0013c0f:	90                   	nop

c0013c10 <Device::findAndLoadDriver()>:
c0013c10:	c7 44 24 04 2e b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b52e
c0013c18:	e9 b6 ec ff ff       	jmp    c00128d3 <Dbg::kprintf(char const*, ...)>
c0013c1d:	90                   	nop

c0013c1e <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c1e:	57                   	push   edi
c0013c1f:	b9 09 00 00 00       	mov    ecx,0x9
c0013c24:	56                   	push   esi
c0013c25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c29:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c2d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c37:	81 c7 18 01 00 00    	add    edi,0x118
c0013c3d:	fc                   	cld    
c0013c3e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c40:	5e                   	pop    esi
c0013c41:	5f                   	pop    edi
c0013c42:	c3                   	ret    
c0013c43:	90                   	nop

c0013c44 <Device::preOpenACPI(void*, char*, char*)>:
c0013c44:	57                   	push   edi
c0013c45:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c4a:	56                   	push   esi
c0013c4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c53:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c5d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c63:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c6f:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c74:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c7a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c80:	5e                   	pop    esi
c0013c81:	5f                   	pop    edi
c0013c82:	c3                   	ret    
c0013c83:	90                   	nop

c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c88:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c8d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c94:	75 0b                	jne    c0013ca1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c98:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c9c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c9f:	eb 1e                	jmp    c0013cbf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ca1:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0013ca6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cac:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cb2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cb4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cbc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cbf:	ff e0                	jmp    eax
c0013cc1:	90                   	nop

c0013cc2 <Device::getParent()>:
c0013cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013ccc:	c3                   	ret    
c0013ccd:	90                   	nop

c0013cce <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cd2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cd7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cde:	75 0b                	jne    c0013ceb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ce2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ce6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ce9:	eb 1e                	jmp    c0013d09 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ceb:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0013cf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cf6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cfc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cfe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d06:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d09:	ff e0                	jmp    eax
c0013d0b:	90                   	nop

c0013d0c <Device::addChild(Device*)>:
c0013d0c:	53                   	push   ebx
c0013d0d:	83 ec 08             	sub    esp,0x8
c0013d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d18:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d1e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d24:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d26:	85 d2                	test   edx,edx
c0013d28:	74 04                	je     c0013d2e <Device::addChild(Device*)+0x22>
c0013d2a:	89 d3                	mov    ebx,edx
c0013d2c:	eb f6                	jmp    c0013d24 <Device::addChild(Device*)+0x18>
c0013d2e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d31:	83 ec 0c             	sub    esp,0xc
c0013d34:	6a 08                	push   0x8
c0013d36:	e8 51 bb ff ff       	call   c000f88c <malloc>
c0013d3b:	89 03                	mov    DWORD PTR [ebx],eax
c0013d3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d4a:	83 c4 18             	add    esp,0x18
c0013d4d:	5b                   	pop    ebx
c0013d4e:	c3                   	ret    
c0013d4f:	90                   	nop

c0013d50 <Device::removeAllChildren()>:
c0013d50:	56                   	push   esi
c0013d51:	53                   	push   ebx
c0013d52:	52                   	push   edx
c0013d53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d57:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d60:	74 17                	je     c0013d79 <Device::removeAllChildren()+0x29>
c0013d62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d65:	85 c0                	test   eax,eax
c0013d67:	74 0c                	je     c0013d75 <Device::removeAllChildren()+0x25>
c0013d69:	83 ec 0c             	sub    esp,0xc
c0013d6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d6e:	50                   	push   eax
c0013d6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d77:	eb e4                	jmp    c0013d5d <Device::removeAllChildren()+0xd>
c0013d79:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d85:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d92:	58                   	pop    eax
c0013d93:	5b                   	pop    ebx
c0013d94:	5e                   	pop    esi
c0013d95:	c3                   	ret    

c0013d96 <Device::hibernateAll()>:
c0013d96:	53                   	push   ebx
c0013d97:	83 ec 14             	sub    esp,0x14
c0013d9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da0:	53                   	push   ebx
c0013da1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013da4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db0:	74 0f                	je     c0013dc1 <Device::hibernateAll()+0x2b>
c0013db2:	83 ec 0c             	sub    esp,0xc
c0013db5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013db8:	e8 d9 ff ff ff       	call   c0013d96 <Device::hibernateAll()>
c0013dbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dbf:	eb e9                	jmp    c0013daa <Device::hibernateAll()+0x14>
c0013dc1:	83 c4 08             	add    esp,0x8
c0013dc4:	5b                   	pop    ebx
c0013dc5:	c3                   	ret    

c0013dc6 <Device::wakeAll()>:
c0013dc6:	53                   	push   ebx
c0013dc7:	83 ec 14             	sub    esp,0x14
c0013dca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd0:	53                   	push   ebx
c0013dd1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dda:	83 c4 10             	add    esp,0x10
c0013ddd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013de0:	74 0f                	je     c0013df1 <Device::wakeAll()+0x2b>
c0013de2:	83 ec 0c             	sub    esp,0xc
c0013de5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013de8:	e8 d9 ff ff ff       	call   c0013dc6 <Device::wakeAll()>
c0013ded:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013def:	eb e9                	jmp    c0013dda <Device::wakeAll()+0x14>
c0013df1:	83 c4 08             	add    esp,0x8
c0013df4:	5b                   	pop    ebx
c0013df5:	c3                   	ret    

c0013df6 <Device::detectAll()>:
c0013df6:	53                   	push   ebx
c0013df7:	83 ec 14             	sub    esp,0x14
c0013dfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e00:	53                   	push   ebx
c0013e01:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e10:	74 0f                	je     c0013e21 <Device::detectAll()+0x2b>
c0013e12:	83 ec 0c             	sub    esp,0xc
c0013e15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e18:	e8 d9 ff ff ff       	call   c0013df6 <Device::detectAll()>
c0013e1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e1f:	eb e9                	jmp    c0013e0a <Device::detectAll()+0x14>
c0013e21:	83 c4 08             	add    esp,0x8
c0013e24:	5b                   	pop    ebx
c0013e25:	c3                   	ret    

c0013e26 <Device::disableLegacyAll()>:
c0013e26:	53                   	push   ebx
c0013e27:	83 ec 14             	sub    esp,0x14
c0013e2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e30:	53                   	push   ebx
c0013e31:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e40:	74 0f                	je     c0013e51 <Device::disableLegacyAll()+0x2b>
c0013e42:	83 ec 0c             	sub    esp,0xc
c0013e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e48:	e8 d9 ff ff ff       	call   c0013e26 <Device::disableLegacyAll()>
c0013e4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e4f:	eb e9                	jmp    c0013e3a <Device::disableLegacyAll()+0x14>
c0013e51:	83 c4 08             	add    esp,0x8
c0013e54:	5b                   	pop    ebx
c0013e55:	c3                   	ret    

c0013e56 <Device::loadDriversForAll()>:
c0013e56:	53                   	push   ebx
c0013e57:	83 ec 08             	sub    esp,0x8
c0013e5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e5e:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e65:	75 0c                	jne    c0013e73 <Device::loadDriversForAll()+0x1d>
c0013e67:	83 ec 0c             	sub    esp,0xc
c0013e6a:	53                   	push   ebx
c0013e6b:	e8 a0 fd ff ff       	call   c0013c10 <Device::findAndLoadDriver()>
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e79:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e7c:	74 12                	je     c0013e90 <Device::loadDriversForAll()+0x3a>
c0013e7e:	83 ec 0c             	sub    esp,0xc
c0013e81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e84:	e8 cd ff ff ff       	call   c0013e56 <Device::loadDriversForAll()>
c0013e89:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	eb e9                	jmp    c0013e79 <Device::loadDriversForAll()+0x23>
c0013e90:	83 c4 08             	add    esp,0x8
c0013e93:	5b                   	pop    ebx
c0013e94:	c3                   	ret    
c0013e95:	90                   	nop

c0013e96 <Device::closeAll()>:
c0013e96:	53                   	push   ebx
c0013e97:	83 ec 08             	sub    esp,0x8
c0013e9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ea0:	6a 00                	push   0x0
c0013ea2:	6a 00                	push   0x0
c0013ea4:	6a 00                	push   0x0
c0013ea6:	53                   	push   ebx
c0013ea7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013eaa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eb0:	83 c4 10             	add    esp,0x10
c0013eb3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eb6:	74 0f                	je     c0013ec7 <Device::closeAll()+0x31>
c0013eb8:	83 ec 0c             	sub    esp,0xc
c0013ebb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ebe:	e8 d3 ff ff ff       	call   c0013e96 <Device::closeAll()>
c0013ec3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ec5:	eb e9                	jmp    c0013eb0 <Device::closeAll()+0x1a>
c0013ec7:	83 c4 08             	add    esp,0x8
c0013eca:	5b                   	pop    ebx
c0013ecb:	c3                   	ret    

c0013ecc <Device::powerSavingAll(PowerSavingLevel)>:
c0013ecc:	56                   	push   esi
c0013ecd:	53                   	push   ebx
c0013ece:	83 ec 0c             	sub    esp,0xc
c0013ed1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ed5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ed9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013edb:	56                   	push   esi
c0013edc:	53                   	push   ebx
c0013edd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ee0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eec:	74 0f                	je     c0013efd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013eee:	52                   	push   edx
c0013eef:	52                   	push   edx
c0013ef0:	56                   	push   esi
c0013ef1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ef4:	e8 d3 ff ff ff       	call   c0013ecc <Device::powerSavingAll(PowerSavingLevel)>
c0013ef9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013efb:	eb e9                	jmp    c0013ee6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013efd:	58                   	pop    eax
c0013efe:	5b                   	pop    ebx
c0013eff:	5e                   	pop    esi
c0013f00:	c3                   	ret    
c0013f01:	90                   	nop

c0013f02 <Device::setName(char const*)>:
c0013f02:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f0a:	e9 fd c8 fe ff       	jmp    c000080c <strcpy>
c0013f0f:	90                   	nop

c0013f10 <Device::Device(char const*)>:
c0013f10:	83 ec 1c             	sub    esp,0x1c
c0013f13:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0013f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1c:	89 10                	mov    DWORD PTR [eax],edx
c0013f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f22:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f30:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f4c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f56:	83 ec 08             	sub    esp,0x8
c0013f59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f61:	e8 9c ff ff ff       	call   c0013f02 <Device::setName(char const*)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f71:	83 ec 0c             	sub    esp,0xc
c0013f74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f78:	e8 0f b9 ff ff       	call   c000f88c <malloc>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f91:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f9b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fa1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fee:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014006:	90                   	nop
c0014007:	83 c4 1c             	add    esp,0x1c
c001400a:	c3                   	ret    
c001400b:	90                   	nop

c001400c <Device::getName()>:
c001400c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014010:	05 d0 00 00 00       	add    eax,0xd0
c0014015:	c3                   	ret    

c0014016 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401d:	83 ec 08             	sub    esp,0x8
c0014020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014024:	50                   	push   eax
c0014025:	e8 e6 fe ff ff       	call   c0013f10 <Device::Device(char const*)>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	ba 9c b5 02 c0       	mov    edx,0xc002b59c
c0014032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014036:	89 10                	mov    DWORD PTR [eax],edx
c0014038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014046:	90                   	nop
c0014047:	83 c4 0c             	add    esp,0xc
c001404a:	c3                   	ret    
c001404b:	90                   	nop

c001404c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001404c:	57                   	push   edi
c001404d:	56                   	push   esi
c001404e:	53                   	push   ebx
c001404f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014053:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014057:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001405b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014061:	75 0c                	jne    c001406f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014063:	52                   	push   edx
c0014064:	52                   	push   edx
c0014065:	53                   	push   ebx
c0014066:	56                   	push   esi
c0014067:	e8 ea 50 01 00       	call   c0029156 <LinkedList<Device>::addElement(Device*)>
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014075:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014078:	74 12                	je     c001408c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001407a:	50                   	push   eax
c001407b:	57                   	push   edi
c001407c:	56                   	push   esi
c001407d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014080:	e8 c7 ff ff ff       	call   c001404c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014085:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	eb e9                	jmp    c0014075 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001408c:	5b                   	pop    ebx
c001408d:	5e                   	pop    esi
c001408e:	5f                   	pop    edi
c001408f:	c3                   	ret    

c0014090 <getDevicesOfType(DeviceType)>:
c0014090:	53                   	push   ebx
c0014091:	83 ec 14             	sub    esp,0x14
c0014094:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014098:	53                   	push   ebx
c0014099:	e8 94 51 01 00       	call   c0029232 <LinkedList<Device>::LinkedList()>
c001409e:	83 c4 0c             	add    esp,0xc
c00140a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140a5:	53                   	push   ebx
c00140a6:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c00140ac:	e8 9b ff ff ff       	call   c001404c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140b1:	89 d8                	mov    eax,ebx
c00140b3:	83 c4 18             	add    esp,0x18
c00140b6:	5b                   	pop    ebx
c00140b7:	c2 04 00             	ret    0x4

c00140ba <HardDiskController::HardDiskController(char const*)>:
c00140ba:	83 ec 0c             	sub    esp,0xc
c00140bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c1:	83 ec 08             	sub    esp,0x8
c00140c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c8:	50                   	push   eax
c00140c9:	e8 42 fe ff ff       	call   c0013f10 <Device::Device(char const*)>
c00140ce:	83 c4 10             	add    esp,0x10
c00140d1:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00140d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140da:	89 10                	mov    DWORD PTR [eax],edx
c00140dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140ea:	90                   	nop
c00140eb:	83 c4 0c             	add    esp,0xc
c00140ee:	c3                   	ret    
c00140ef:	90                   	nop

c00140f0 <HardDiskController::~HardDiskController()>:
c00140f0:	83 ec 0c             	sub    esp,0xc
c00140f3:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00140f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140fc:	89 10                	mov    DWORD PTR [eax],edx
c00140fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014102:	83 ec 0c             	sub    esp,0xc
c0014105:	50                   	push   eax
c0014106:	e8 cf fa ff ff       	call   c0013bda <Device::~Device()>
c001410b:	83 c4 10             	add    esp,0x10
c001410e:	90                   	nop
c001410f:	83 c4 0c             	add    esp,0xc
c0014112:	c3                   	ret    
c0014113:	90                   	nop

c0014114 <HardDiskController::~HardDiskController()>:
c0014114:	83 ec 0c             	sub    esp,0xc
c0014117:	83 ec 0c             	sub    esp,0xc
c001411a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411e:	e8 cd ff ff ff       	call   c00140f0 <HardDiskController::~HardDiskController()>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	83 ec 08             	sub    esp,0x8
c0014129:	68 58 01 00 00       	push   0x158
c001412e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014132:	e8 bc e6 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0014137:	83 c4 10             	add    esp,0x10
c001413a:	83 c4 0c             	add    esp,0xc
c001413d:	c3                   	ret    

c001413e <PhysicalDisk::eject()>:
c001413e:	83 ec 18             	sub    esp,0x18
c0014141:	68 ec b5 02 c0       	push   0xc002b5ec
c0014146:	e8 88 e7 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001414b:	83 c8 ff             	or     eax,0xffffffff
c001414e:	83 c4 1c             	add    esp,0x1c
c0014151:	c3                   	ret    

c0014152 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014152:	83 ec 0c             	sub    esp,0xc
c0014155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014159:	83 ec 08             	sub    esp,0x8
c001415c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014160:	50                   	push   eax
c0014161:	e8 aa fd ff ff       	call   c0013f10 <Device::Device(char const*)>
c0014166:	83 c4 10             	add    esp,0x10
c0014169:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c001416e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014172:	89 10                	mov    DWORD PTR [eax],edx
c0014174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014178:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001417f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014183:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001418a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00141a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141b4:	90                   	nop
c00141b5:	83 c4 0c             	add    esp,0xc
c00141b8:	c3                   	ret    
c00141b9:	90                   	nop

c00141ba <PhysicalDisk::startCache()>:
c00141ba:	56                   	push   esi
c00141bb:	53                   	push   ebx
c00141bc:	83 ec 10             	sub    esp,0x10
c00141bf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141c3:	6a 44                	push   0x44
c00141c5:	e8 c2 b6 ff ff       	call   c000f88c <malloc>
c00141ca:	89 c6                	mov    esi,eax
c00141cc:	58                   	pop    eax
c00141cd:	5a                   	pop    edx
c00141ce:	53                   	push   ebx
c00141cf:	56                   	push   esi
c00141d0:	e8 a9 28 00 00       	call   c0016a7e <VCache::VCache(PhysicalDisk*)>
c00141d5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141db:	83 c4 14             	add    esp,0x14
c00141de:	5b                   	pop    ebx
c00141df:	5e                   	pop    esi
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <PhysicalDisk::~PhysicalDisk()>:
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c00141ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ee:	89 10                	mov    DWORD PTR [eax],edx
c00141f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	50                   	push   eax
c00141f8:	e8 dd f9 ff ff       	call   c0013bda <Device::~Device()>
c00141fd:	83 c4 10             	add    esp,0x10
c0014200:	90                   	nop
c0014201:	83 c4 0c             	add    esp,0xc
c0014204:	c3                   	ret    
c0014205:	90                   	nop

c0014206 <PhysicalDisk::~PhysicalDisk()>:
c0014206:	83 ec 0c             	sub    esp,0xc
c0014209:	83 ec 0c             	sub    esp,0xc
c001420c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014210:	e8 cd ff ff ff       	call   c00141e2 <PhysicalDisk::~PhysicalDisk()>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	83 ec 08             	sub    esp,0x8
c001421b:	68 6c 01 00 00       	push   0x16c
c0014220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014224:	e8 ca e5 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0014229:	83 c4 10             	add    esp,0x10
c001422c:	83 c4 0c             	add    esp,0xc
c001422f:	c3                   	ret    

c0014230 <FPU::FPU(char const*)>:
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014237:	83 ec 08             	sub    esp,0x8
c001423a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423e:	50                   	push   eax
c001423f:	e8 cc fc ff ff       	call   c0013f10 <Device::Device(char const*)>
c0014244:	83 c4 10             	add    esp,0x10
c0014247:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c001424c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014250:	89 10                	mov    DWORD PTR [eax],edx
c0014252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014256:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014260:	90                   	nop
c0014261:	83 c4 0c             	add    esp,0xc
c0014264:	c3                   	ret    
c0014265:	90                   	nop

c0014266 <FPU::~FPU()>:
c0014266:	83 ec 0c             	sub    esp,0xc
c0014269:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c001426e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014272:	89 10                	mov    DWORD PTR [eax],edx
c0014274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	50                   	push   eax
c001427c:	e8 59 f9 ff ff       	call   c0013bda <Device::~Device()>
c0014281:	83 c4 10             	add    esp,0x10
c0014284:	90                   	nop
c0014285:	83 c4 0c             	add    esp,0xc
c0014288:	c3                   	ret    
c0014289:	90                   	nop

c001428a <FPU::~FPU()>:
c001428a:	83 ec 0c             	sub    esp,0xc
c001428d:	83 ec 0c             	sub    esp,0xc
c0014290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014294:	e8 cd ff ff ff       	call   c0014266 <FPU::~FPU()>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	83 ec 08             	sub    esp,0x8
c001429f:	68 58 01 00 00       	push   0x158
c00142a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142a8:	e8 46 e5 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00142ad:	83 c4 10             	add    esp,0x10
c00142b0:	83 c4 0c             	add    esp,0xc
c00142b3:	c3                   	ret    

c00142b4 <setupFPU()>:
c00142b4:	53                   	push   ebx
c00142b5:	83 ec 08             	sub    esp,0x8
c00142b8:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c00142be:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142c5:	74 19                	je     c00142e0 <setupFPU()+0x2c>
c00142c7:	83 ec 0c             	sub    esp,0xc
c00142ca:	68 58 01 00 00       	push   0x158
c00142cf:	e8 b8 b5 ff ff       	call   c000f88c <malloc>
c00142d4:	89 c3                	mov    ebx,eax
c00142d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d9:	e8 a2 1a 01 00       	call   c0025d80 <AVX::AVX()>
c00142de:	eb 5b                	jmp    c001433b <setupFPU()+0x87>
c00142e0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142e6:	84 c0                	test   al,al
c00142e8:	79 19                	jns    c0014303 <setupFPU()+0x4f>
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	68 58 01 00 00       	push   0x158
c00142f2:	e8 95 b5 ff ff       	call   c000f88c <malloc>
c00142f7:	89 c3                	mov    ebx,eax
c00142f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00142fc:	e8 a5 1b 01 00       	call   c0025ea6 <SSE::SSE()>
c0014301:	eb 38                	jmp    c001433b <setupFPU()+0x87>
c0014303:	a8 20                	test   al,0x20
c0014305:	74 19                	je     c0014320 <setupFPU()+0x6c>
c0014307:	83 ec 0c             	sub    esp,0xc
c001430a:	68 58 01 00 00       	push   0x158
c001430f:	e8 78 b5 ff ff       	call   c000f88c <malloc>
c0014314:	89 c3                	mov    ebx,eax
c0014316:	89 04 24             	mov    DWORD PTR [esp],eax
c0014319:	e8 f2 1a 01 00       	call   c0025e10 <MMX::MMX()>
c001431e:	eb 1b                	jmp    c001433b <setupFPU()+0x87>
c0014320:	a8 10                	test   al,0x10
c0014322:	74 1c                	je     c0014340 <setupFPU()+0x8c>
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	68 58 01 00 00       	push   0x158
c001432c:	e8 5b b5 ff ff       	call   c000f88c <malloc>
c0014331:	89 c3                	mov    ebx,eax
c0014333:	89 04 24             	mov    DWORD PTR [esp],eax
c0014336:	e8 f9 1b 01 00       	call   c0025f34 <x87::x87()>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	eb 24                	jmp    c0014364 <setupFPU()+0xb0>
c0014340:	83 e0 ef             	and    eax,0xffffffef
c0014343:	83 ec 0c             	sub    esp,0xc
c0014346:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001434c:	68 4c b6 02 c0       	push   0xc002b64c
c0014351:	e8 7d e5 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014356:	0f 20 c0             	mov    eax,cr0
c0014359:	83 c8 04             	or     eax,0x4
c001435c:	0f 22 c0             	mov    cr0,eax
c001435f:	31 db                	xor    ebx,ebx
c0014361:	83 c4 10             	add    esp,0x10
c0014364:	89 d8                	mov    eax,ebx
c0014366:	83 c4 08             	add    esp,0x8
c0014369:	5b                   	pop    ebx
c001436a:	c3                   	ret    
c001436b:	90                   	nop

c001436c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001436c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014370:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014374:	c1 e0 04             	shl    eax,0x4
c0014377:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001437b:	8d 50 10             	lea    edx,[eax+0x10]
c001437e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014384:	74 08                	je     c001438e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014386:	83 c0 04             	add    eax,0x4
c0014389:	39 d0                	cmp    eax,edx
c001438b:	75 f1                	jne    c001437e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001438d:	c3                   	ret    
c001438e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014398:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143a2:	eb e2                	jmp    c0014386 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00143a4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00143a4:	57                   	push   edi
c00143a5:	31 c0                	xor    eax,eax
c00143a7:	56                   	push   esi
c00143a8:	53                   	push   ebx
c00143a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143b5:	89 da                	mov    edx,ebx
c00143b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143bb:	c1 e2 04             	shl    edx,0x4
c00143be:	01 ca                	add    edx,ecx
c00143c0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143c8:	74 16                	je     c00143e0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143ca:	40                   	inc    eax
c00143cb:	83 f8 04             	cmp    eax,0x4
c00143ce:	75 f0                	jne    c00143c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143d0:	c7 44 24 10 90 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b690
c00143d8:	5b                   	pop    ebx
c00143d9:	5e                   	pop    esi
c00143da:	5f                   	pop    edi
c00143db:	e9 29 5f 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c00143e0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143e3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143e6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143ec:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143f2:	5b                   	pop    ebx
c00143f3:	5e                   	pop    esi
c00143f4:	5f                   	pop    edi
c00143f5:	c3                   	ret    

c00143f6 <doubleFault(regs*, void*)>:
c00143f6:	55                   	push   ebp
c00143f7:	89 e5                	mov    ebp,esp
c00143f9:	83 ec 08             	sub    esp,0x8
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	68 cb b6 02 c0       	push   0xc002b6cb
c0014404:	e8 00 5f 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	90                   	nop
c001440d:	c9                   	leave  
c001440e:	c3                   	ret    
c001440f:	90                   	nop

c0014410 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014410:	56                   	push   esi
c0014411:	53                   	push   ebx
c0014412:	50                   	push   eax
c0014413:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014417:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001441b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014420:	75 35                	jne    c0014457 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014422:	8d 43 20             	lea    eax,[ebx+0x20]
c0014425:	31 d2                	xor    edx,edx
c0014427:	89 c1                	mov    ecx,eax
c0014429:	c1 e1 04             	shl    ecx,0x4
c001442c:	01 f1                	add    ecx,esi
c001442e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014436:	74 3e                	je     c0014476 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014438:	42                   	inc    edx
c0014439:	83 fa 04             	cmp    edx,0x4
c001443c:	75 f0                	jne    c001442e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	68 10 b7 02 c0       	push   0xc002b710
c0014446:	e8 be 5e 00 00       	call   c001a309 <Krnl::panic(char const*)>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014453:	5a                   	pop    edx
c0014454:	5b                   	pop    ebx
c0014455:	5e                   	pop    esi
c0014456:	c3                   	ret    
c0014457:	83 ec 0c             	sub    esp,0xc
c001445a:	56                   	push   esi
c001445b:	e8 ac fb ff ff       	call   c001400c <Device::getName()>
c0014460:	83 c4 10             	add    esp,0x10
c0014463:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014466:	75 ba                	jne    c0014422 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014468:	83 fb 0f             	cmp    ebx,0xf
c001446b:	7f 29                	jg     c0014496 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001446d:	0f b6 9b 60 e2 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1da0]
c0014474:	eb ac                	jmp    c0014422 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014476:	8d 04 82             	lea    eax,[edx+eax*4]
c0014479:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001447d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014480:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014486:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001448a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014490:	89 d8                	mov    eax,ebx
c0014492:	5a                   	pop    edx
c0014493:	5b                   	pop    ebx
c0014494:	5e                   	pop    esi
c0014495:	c3                   	ret    
c0014496:	83 ec 0c             	sub    esp,0xc
c0014499:	68 d8 b6 02 c0       	push   0xc002b6d8
c001449e:	e8 66 5e 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00144a3:	83 c4 10             	add    esp,0x10
c00144a6:	e9 77 ff ff ff       	jmp    c0014422 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144ab:	90                   	nop

c00144ac <InterruptController::clearAllHandlers(int, bool)>:
c00144ac:	56                   	push   esi
c00144ad:	53                   	push   ebx
c00144ae:	52                   	push   edx
c00144af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144b7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144bc:	75 61                	jne    c001451f <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144be:	8d 46 20             	lea    eax,[esi+0x20]
c00144c1:	c1 e6 04             	shl    esi,0x4
c00144c4:	c1 e0 04             	shl    eax,0x4
c00144c7:	01 de                	add    esi,ebx
c00144c9:	01 d8                	add    eax,ebx
c00144cb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144d5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144df:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144e9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144f3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144fd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014507:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014511:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001451b:	58                   	pop    eax
c001451c:	5b                   	pop    ebx
c001451d:	5e                   	pop    esi
c001451e:	c3                   	ret    
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	53                   	push   ebx
c0014523:	e8 e4 fa ff ff       	call   c001400c <Device::getName()>
c0014528:	83 c4 10             	add    esp,0x10
c001452b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001452e:	75 8e                	jne    c00144be <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014530:	83 fe 0f             	cmp    esi,0xf
c0014533:	7f 09                	jg     c001453e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014535:	0f b6 b6 60 e2 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1da0]
c001453c:	eb 80                	jmp    c00144be <InterruptController::clearAllHandlers(int, bool)+0x12>
c001453e:	83 ec 0c             	sub    esp,0xc
c0014541:	68 4c b7 02 c0       	push   0xc002b74c
c0014546:	e8 be 5d 00 00       	call   c001a309 <Krnl::panic(char const*)>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	e9 6b ff ff ff       	jmp    c00144be <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014553:	90                   	nop

c0014554 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014554:	56                   	push   esi
c0014555:	53                   	push   ebx
c0014556:	52                   	push   edx
c0014557:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001455b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001455f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014564:	75 3a                	jne    c00145a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001456a:	8d 50 20             	lea    edx,[eax+0x20]
c001456d:	c1 e2 04             	shl    edx,0x4
c0014570:	8d 04 16             	lea    eax,[esi+edx*1]
c0014573:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014577:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001457d:	74 0b                	je     c001458a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001457f:	83 c0 04             	add    eax,0x4
c0014582:	39 d0                	cmp    eax,edx
c0014584:	75 f1                	jne    c0014577 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014586:	58                   	pop    eax
c0014587:	5b                   	pop    ebx
c0014588:	5e                   	pop    esi
c0014589:	c3                   	ret    
c001458a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014594:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001459e:	eb df                	jmp    c001457f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00145a0:	83 ec 0c             	sub    esp,0xc
c00145a3:	56                   	push   esi
c00145a4:	e8 63 fa ff ff       	call   c001400c <Device::getName()>
c00145a9:	83 c4 10             	add    esp,0x10
c00145ac:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145af:	75 b5                	jne    c0014566 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145b1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145b6:	7f 11                	jg     c00145c9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145bc:	0f b6 80 60 e2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1da0]
c00145c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145c7:	eb 9d                	jmp    c0014566 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145c9:	83 ec 0c             	sub    esp,0xc
c00145cc:	68 4c b7 02 c0       	push   0xc002b74c
c00145d1:	e8 33 5d 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	eb 8b                	jmp    c0014566 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145db <nmiHandler(regs*, void*)>:
c00145db:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00145e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145e4:	e9 ed a9 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c00145e9 <int_handler>:
c00145e9:	55                   	push   ebp
c00145ea:	57                   	push   edi
c00145eb:	56                   	push   esi
c00145ec:	53                   	push   ebx
c00145ed:	83 ec 0c             	sub    esp,0xc
c00145f0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145f4:	80 3d 44 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b44,0x0
c00145fb:	74 0b                	je     c0014608 <int_handler+0x1f>
c00145fd:	fa                   	cli    
c00145fe:	f4                   	hlt    
c00145ff:	80 3d 44 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b44,0x0
c0014606:	75 f5                	jne    c00145fd <int_handler+0x14>
c0014608:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001460d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014610:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014616:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001461c:	8d 43 e0             	lea    eax,[ebx-0x20]
c001461f:	83 f8 17             	cmp    eax,0x17
c0014622:	77 13                	ja     c0014637 <int_handler+0x4e>
c0014624:	83 ec 08             	sub    esp,0x8
c0014627:	8b 17                	mov    edx,DWORD PTR [edi]
c0014629:	8d 43 e0             	lea    eax,[ebx-0x20]
c001462c:	0f b6 c0             	movzx  eax,al
c001462f:	50                   	push   eax
c0014630:	57                   	push   edi
c0014631:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014634:	83 c4 10             	add    esp,0x10
c0014637:	83 c3 15             	add    ebx,0x15
c001463a:	c1 e3 04             	shl    ebx,0x4
c001463d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014641:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014648:	31 db                	xor    ebx,ebx
c001464a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001464e:	85 c0                	test   eax,eax
c0014650:	74 13                	je     c0014665 <int_handler+0x7c>
c0014652:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014655:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014659:	74 1c                	je     c0014677 <int_handler+0x8e>
c001465b:	83 ec 08             	sub    esp,0x8
c001465e:	52                   	push   edx
c001465f:	56                   	push   esi
c0014660:	ff d0                	call   eax
c0014662:	83 c4 10             	add    esp,0x10
c0014665:	43                   	inc    ebx
c0014666:	83 fb 04             	cmp    ebx,0x4
c0014669:	75 df                	jne    c001464a <int_handler+0x61>
c001466b:	83 c4 0c             	add    esp,0xc
c001466e:	31 c0                	xor    eax,eax
c0014670:	5b                   	pop    ebx
c0014671:	31 d2                	xor    edx,edx
c0014673:	5e                   	pop    esi
c0014674:	5f                   	pop    edi
c0014675:	5d                   	pop    ebp
c0014676:	c3                   	ret    
c0014677:	83 ec 08             	sub    esp,0x8
c001467a:	52                   	push   edx
c001467b:	56                   	push   esi
c001467c:	ff d0                	call   eax
c001467e:	83 c4 10             	add    esp,0x10
c0014681:	83 c4 0c             	add    esp,0xc
c0014684:	5b                   	pop    ebx
c0014685:	5e                   	pop    esi
c0014686:	5f                   	pop    edi
c0014687:	5d                   	pop    ebp
c0014688:	c3                   	ret    
c0014689:	90                   	nop

c001468a <InterruptController::InterruptController(char const*)>:
c001468a:	83 ec 1c             	sub    esp,0x1c
c001468d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014691:	83 ec 08             	sub    esp,0x8
c0014694:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014698:	50                   	push   eax
c0014699:	e8 72 f8 ff ff       	call   c0013f10 <Device::Device(char const*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c00146a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146aa:	89 10                	mov    DWORD PTR [eax],edx
c00146ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146c2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146ca:	7f 5e                	jg     c001472a <InterruptController::InterruptController(char const*)+0xa0>
c00146cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146d9:	7f 49                	jg     c0014724 <InterruptController::InterruptController(char const*)+0x9a>
c00146db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ee:	01 ca                	add    edx,ecx
c00146f0:	83 c2 54             	add    edx,0x54
c00146f3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014703:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001470a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001470e:	01 ca                	add    edx,ecx
c0014710:	81 c2 54 04 00 00    	add    edx,0x454
c0014716:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001471e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014722:	eb b0                	jmp    c00146d4 <InterruptController::InterruptController(char const*)+0x4a>
c0014724:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014728:	eb 98                	jmp    c00146c2 <InterruptController::InterruptController(char const*)+0x38>
c001472a:	90                   	nop
c001472b:	83 c4 1c             	add    esp,0x1c
c001472e:	c3                   	ret    
c001472f:	90                   	nop

c0014730 <InterruptController::~InterruptController()>:
c0014730:	83 ec 0c             	sub    esp,0xc
c0014733:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c0014738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473c:	89 10                	mov    DWORD PTR [eax],edx
c001473e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014742:	83 ec 0c             	sub    esp,0xc
c0014745:	50                   	push   eax
c0014746:	e8 8f f4 ff ff       	call   c0013bda <Device::~Device()>
c001474b:	83 c4 10             	add    esp,0x10
c001474e:	90                   	nop
c001474f:	83 c4 0c             	add    esp,0xc
c0014752:	c3                   	ret    
c0014753:	90                   	nop

c0014754 <InterruptController::~InterruptController()>:
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	83 ec 0c             	sub    esp,0xc
c001475a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475e:	e8 cd ff ff ff       	call   c0014730 <InterruptController::~InterruptController()>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	83 ec 08             	sub    esp,0x8
c0014769:	68 58 21 00 00       	push   0x2158
c001476e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014772:	e8 7c e0 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0014777:	83 c4 10             	add    esp,0x10
c001477a:	83 c4 0c             	add    esp,0xc
c001477d:	c3                   	ret    

c001477e <displayDebugInfo(regs*)>:
c001477e:	55                   	push   ebp
c001477f:	57                   	push   edi
c0014780:	56                   	push   esi
c0014781:	53                   	push   ebx
c0014782:	83 ec 24             	sub    esp,0x24
c0014785:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014789:	0f 20 c2             	mov    edx,cr0
c001478c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014790:	0f 20 d7             	mov    edi,cr2
c0014793:	0f 20 de             	mov    esi,cr3
c0014796:	0f 20 e5             	mov    ebp,cr4
c0014799:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001479c:	68 86 b7 02 c0       	push   0xc002b786
c00147a1:	e8 2d e1 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00147a6:	59                   	pop    ecx
c00147a7:	58                   	pop    eax
c00147a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147ab:	68 91 b7 02 c0       	push   0xc002b791
c00147b0:	e8 1e e1 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00147b5:	58                   	pop    eax
c00147b6:	5a                   	pop    edx
c00147b7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147ba:	68 9c b7 02 c0       	push   0xc002b79c
c00147bf:	e8 0f e1 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00147c4:	59                   	pop    ecx
c00147c5:	58                   	pop    eax
c00147c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147c9:	68 a7 b7 02 c0       	push   0xc002b7a7
c00147ce:	e8 00 e1 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00147d3:	58                   	pop    eax
c00147d4:	5a                   	pop    edx
c00147d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147d8:	68 b2 b7 02 c0       	push   0xc002b7b2
c00147dd:	e8 f1 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00147e2:	59                   	pop    ecx
c00147e3:	58                   	pop    eax
c00147e4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147e7:	68 bd b7 02 c0       	push   0xc002b7bd
c00147ec:	e8 e2 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00147f1:	58                   	pop    eax
c00147f2:	5a                   	pop    edx
c00147f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147f6:	68 c8 b7 02 c0       	push   0xc002b7c8
c00147fb:	e8 d3 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014800:	59                   	pop    ecx
c0014801:	58                   	pop    eax
c0014802:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014805:	68 d3 b7 02 c0       	push   0xc002b7d3
c001480a:	e8 c4 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001480f:	58                   	pop    eax
c0014810:	5a                   	pop    edx
c0014811:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014814:	68 de b7 02 c0       	push   0xc002b7de
c0014819:	e8 b5 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001481e:	59                   	pop    ecx
c001481f:	58                   	pop    eax
c0014820:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014823:	68 ed b7 02 c0       	push   0xc002b7ed
c0014828:	e8 a6 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001482d:	58                   	pop    eax
c001482e:	5a                   	pop    edx
c001482f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014832:	68 f8 b7 02 c0       	push   0xc002b7f8
c0014837:	e8 97 e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001483c:	59                   	pop    ecx
c001483d:	58                   	pop    eax
c001483e:	57                   	push   edi
c001483f:	68 03 b8 02 c0       	push   0xc002b803
c0014844:	e8 8a e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014849:	58                   	pop    eax
c001484a:	5a                   	pop    edx
c001484b:	56                   	push   esi
c001484c:	68 0e b8 02 c0       	push   0xc002b80e
c0014851:	e8 7d e0 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014856:	59                   	pop    ecx
c0014857:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001485c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014862:	e8 8f be ff ff       	call   c00106f6 <setActiveTerminal(VgaText*)>
c0014867:	58                   	pop    eax
c0014868:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001486b:	5a                   	pop    edx
c001486c:	c1 e0 05             	shl    eax,0x5
c001486f:	05 c0 df 02 c0       	add    eax,0xc002dfc0
c0014874:	50                   	push   eax
c0014875:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001487a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014880:	e8 43 c2 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014885:	59                   	pop    ecx
c0014886:	58                   	pop    eax
c0014887:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001488c:	68 19 b8 02 c0       	push   0xc002b819
c0014891:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014897:	e8 2c c2 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001489c:	58                   	pop    eax
c001489d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a2:	5a                   	pop    edx
c00148a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148a6:	83 c0 0c             	add    eax,0xc
c00148a9:	50                   	push   eax
c00148aa:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b5:	e8 0e c2 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c00148ba:	59                   	pop    ecx
c00148bb:	58                   	pop    eax
c00148bc:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148c1:	68 22 b8 02 c0       	push   0xc002b822
c00148c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cc:	e8 f7 c1 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c00148d1:	58                   	pop    eax
c00148d2:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148d7:	5a                   	pop    edx
c00148d8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e1:	e8 9c c1 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c00148e6:	59                   	pop    ecx
c00148e7:	58                   	pop    eax
c00148e8:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148ed:	68 2a b8 02 c0       	push   0xc002b82a
c00148f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f8:	e8 cb c1 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c00148fd:	58                   	pop    eax
c00148fe:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014903:	5a                   	pop    edx
c0014904:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014907:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490d:	e8 70 c1 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014912:	59                   	pop    ecx
c0014913:	58                   	pop    eax
c0014914:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014919:	68 32 b8 02 c0       	push   0xc002b832
c001491e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014924:	e8 9f c1 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014929:	58                   	pop    eax
c001492a:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001492f:	5a                   	pop    edx
c0014930:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014933:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014939:	e8 44 c1 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001493e:	59                   	pop    ecx
c001493f:	58                   	pop    eax
c0014940:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014945:	68 3a b8 02 c0       	push   0xc002b83a
c001494a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014950:	e8 73 c1 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014955:	58                   	pop    eax
c0014956:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001495b:	5a                   	pop    edx
c001495c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001495f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014965:	e8 18 c1 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001496a:	59                   	pop    ecx
c001496b:	58                   	pop    eax
c001496c:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014971:	68 42 b8 02 c0       	push   0xc002b842
c0014976:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497c:	e8 47 c1 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014981:	58                   	pop    eax
c0014982:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014987:	5a                   	pop    edx
c0014988:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001498b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014991:	e8 ec c0 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014996:	59                   	pop    ecx
c0014997:	58                   	pop    eax
c0014998:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001499d:	68 4a b8 02 c0       	push   0xc002b84a
c00149a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a8:	e8 1b c1 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c00149ad:	58                   	pop    eax
c00149ae:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149b3:	5a                   	pop    edx
c00149b4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bd:	e8 c0 c0 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c00149c2:	59                   	pop    ecx
c00149c3:	58                   	pop    eax
c00149c4:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149c9:	68 52 b8 02 c0       	push   0xc002b852
c00149ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d4:	e8 ef c0 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c00149d9:	58                   	pop    eax
c00149da:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149df:	5a                   	pop    edx
c00149e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149e4:	52                   	push   edx
c00149e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149eb:	e8 92 c0 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c00149f0:	59                   	pop    ecx
c00149f1:	58                   	pop    eax
c00149f2:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149f7:	68 5b b8 02 c0       	push   0xc002b85b
c00149fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a02:	e8 c1 c0 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014a07:	58                   	pop    eax
c0014a08:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a0d:	5a                   	pop    edx
c0014a0e:	57                   	push   edi
c0014a0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a15:	e8 68 c0 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014a1a:	59                   	pop    ecx
c0014a1b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a20:	5f                   	pop    edi
c0014a21:	68 63 b8 02 c0       	push   0xc002b863
c0014a26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2c:	e8 97 c0 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014a31:	58                   	pop    eax
c0014a32:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a37:	5a                   	pop    edx
c0014a38:	56                   	push   esi
c0014a39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3f:	e8 3e c0 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014a44:	59                   	pop    ecx
c0014a45:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a4a:	5e                   	pop    esi
c0014a4b:	68 6b b8 02 c0       	push   0xc002b86b
c0014a50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a56:	e8 6d c0 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014a5b:	5f                   	pop    edi
c0014a5c:	58                   	pop    eax
c0014a5d:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a62:	55                   	push   ebp
c0014a63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a69:	e8 14 c0 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014a6e:	58                   	pop    eax
c0014a6f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a74:	5a                   	pop    edx
c0014a75:	68 73 b8 02 c0       	push   0xc002b873
c0014a7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a80:	e8 43 c0 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014a85:	0f 21 c0             	mov    eax,db0
c0014a88:	59                   	pop    ecx
c0014a89:	5e                   	pop    esi
c0014a8a:	50                   	push   eax
c0014a8b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a96:	e8 e7 bf ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014a9b:	5f                   	pop    edi
c0014a9c:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014aa1:	5d                   	pop    ebp
c0014aa2:	68 7c b8 02 c0       	push   0xc002b87c
c0014aa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aad:	e8 16 c0 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014ab2:	0f 21 c8             	mov    eax,db1
c0014ab5:	5a                   	pop    edx
c0014ab6:	59                   	pop    ecx
c0014ab7:	50                   	push   eax
c0014ab8:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014abd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac3:	e8 ba bf ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014ac8:	5e                   	pop    esi
c0014ac9:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014ace:	5f                   	pop    edi
c0014acf:	68 84 b8 02 c0       	push   0xc002b884
c0014ad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ada:	e8 e9 bf ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014adf:	0f 21 d0             	mov    eax,db2
c0014ae2:	5d                   	pop    ebp
c0014ae3:	5a                   	pop    edx
c0014ae4:	50                   	push   eax
c0014ae5:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014aea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af0:	e8 8d bf ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014af5:	59                   	pop    ecx
c0014af6:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014afb:	5e                   	pop    esi
c0014afc:	68 8c b8 02 c0       	push   0xc002b88c
c0014b01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b07:	e8 bc bf ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014b0c:	0f 21 d8             	mov    eax,db3
c0014b0f:	5f                   	pop    edi
c0014b10:	5d                   	pop    ebp
c0014b11:	50                   	push   eax
c0014b12:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1d:	e8 60 bf ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014b22:	58                   	pop    eax
c0014b23:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b28:	5a                   	pop    edx
c0014b29:	68 94 b8 02 c0       	push   0xc002b894
c0014b2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b34:	e8 8f bf ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014b39:	0f 21 f0             	mov    eax,db6
c0014b3c:	59                   	pop    ecx
c0014b3d:	5e                   	pop    esi
c0014b3e:	50                   	push   eax
c0014b3f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4a:	e8 33 bf ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014b4f:	5f                   	pop    edi
c0014b50:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b55:	5d                   	pop    ebp
c0014b56:	68 9c b8 02 c0       	push   0xc002b89c
c0014b5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b61:	e8 62 bf ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014b66:	0f 21 f8             	mov    eax,db7
c0014b69:	5a                   	pop    edx
c0014b6a:	59                   	pop    ecx
c0014b6b:	50                   	push   eax
c0014b6c:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b77:	e8 06 bf ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014b7c:	5e                   	pop    esi
c0014b7d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b80:	e8 07 8b 00 00       	call   c001d68c <Thr::getDriverNameFromAddress(unsigned long)>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	85 c0                	test   eax,eax
c0014b8a:	74 7d                	je     c0014c09 <displayDebugInfo(regs*)+0x48b>
c0014b8c:	89 c6                	mov    esi,eax
c0014b8e:	50                   	push   eax
c0014b8f:	50                   	push   eax
c0014b90:	56                   	push   esi
c0014b91:	68 a4 b8 02 c0       	push   0xc002b8a4
c0014b96:	e8 38 dd ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014b9b:	5a                   	pop    edx
c0014b9c:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014ba1:	59                   	pop    ecx
c0014ba2:	68 b2 b8 02 c0       	push   0xc002b8b2
c0014ba7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bad:	e8 16 bf ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014bb2:	5f                   	pop    edi
c0014bb3:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014bb8:	5d                   	pop    ebp
c0014bb9:	56                   	push   esi
c0014bba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc0:	e8 03 bf ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014bc5:	58                   	pop    eax
c0014bc6:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014bcb:	5a                   	pop    edx
c0014bcc:	68 be b8 02 c0       	push   0xc002b8be
c0014bd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd7:	e8 ec be ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c0014bdc:	59                   	pop    ecx
c0014bdd:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014be2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014be8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014beb:	e8 d3 8a 00 00       	call   c001d6c3 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bf0:	5b                   	pop    ebx
c0014bf1:	5d                   	pop    ebp
c0014bf2:	50                   	push   eax
c0014bf3:	57                   	push   edi
c0014bf4:	e8 89 be ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c0014bf9:	58                   	pop    eax
c0014bfa:	5a                   	pop    edx
c0014bfb:	56                   	push   esi
c0014bfc:	68 ca b8 02 c0       	push   0xc002b8ca
c0014c01:	e8 cd dc ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014c06:	83 c4 10             	add    esp,0x10
c0014c09:	fa                   	cli    
c0014c0a:	f4                   	hlt    
c0014c0b:	eb fe                	jmp    c0014c0b <displayDebugInfo(regs*)+0x48d>

c0014c0d <x87EmulHandler(regs*, void*)>:
c0014c0d:	83 ec 0c             	sub    esp,0xc
c0014c10:	0f 20 c2             	mov    edx,cr0
c0014c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c18:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014c1c:	75 4b                	jne    c0014c69 <x87EmulHandler(regs*, void*)+0x5c>
c0014c1e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0014c23:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014c29:	85 c0                	test   eax,eax
c0014c2b:	74 05                	je     c0014c32 <x87EmulHandler(regs*, void*)+0x25>
c0014c2d:	83 e2 08             	and    edx,0x8
c0014c30:	75 17                	jne    c0014c49 <x87EmulHandler(regs*, void*)+0x3c>
c0014c32:	83 ec 0c             	sub    esp,0xc
c0014c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c39:	e8 45 af 00 00       	call   c001fb83 <Vm::x87Handler(regs*)>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	84 c0                	test   al,al
c0014c43:	74 24                	je     c0014c69 <x87EmulHandler(regs*, void*)+0x5c>
c0014c45:	83 c4 0c             	add    esp,0xc
c0014c48:	c3                   	ret    
c0014c49:	83 ec 0c             	sub    esp,0xc
c0014c4c:	68 f0 b8 02 c0       	push   0xc002b8f0
c0014c51:	e8 7d dc ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014c56:	0f 06                	clts   
c0014c58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	a3 88 f1 02 c0       	mov    ds:0xc002f188,eax
c0014c65:	83 c4 0c             	add    esp,0xc
c0014c68:	c3                   	ret    
c0014c69:	83 ec 0c             	sub    esp,0xc
c0014c6c:	68 da b8 02 c0       	push   0xc002b8da
c0014c71:	e8 5d dc ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014c76:	5a                   	pop    edx
c0014c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c7b:	e8 fe fa ff ff       	call   c001477e <displayDebugInfo(regs*)>

c0014c80 <gpFault(regs*, void*)>:
c0014c80:	53                   	push   ebx
c0014c81:	83 ec 14             	sub    esp,0x14
c0014c84:	c7 05 84 f1 02 c0 5c f0 01 c0 	mov    DWORD PTR ds:0xc002f184,0xc001f05c
c0014c8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c92:	53                   	push   ebx
c0014c93:	e8 c4 a3 00 00       	call   c001f05c <Vm::faultHandler(regs*)>
c0014c98:	83 c4 10             	add    esp,0x10
c0014c9b:	84 c0                	test   al,al
c0014c9d:	74 05                	je     c0014ca4 <gpFault(regs*, void*)+0x24>
c0014c9f:	83 c4 08             	add    esp,0x8
c0014ca2:	5b                   	pop    ebx
c0014ca3:	c3                   	ret    
c0014ca4:	83 ec 0c             	sub    esp,0xc
c0014ca7:	68 fd b8 02 c0       	push   0xc002b8fd
c0014cac:	e8 22 dc ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014cb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cb4:	e8 c5 fa ff ff       	call   c001477e <displayDebugInfo(regs*)>

c0014cb9 <pgFault(regs*, void*)>:
c0014cb9:	83 ec 18             	sub    esp,0x18
c0014cbc:	68 18 b9 02 c0       	push   0xc002b918
c0014cc1:	e8 0d dc ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014cc6:	58                   	pop    eax
c0014cc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ccb:	e8 ae fa ff ff       	call   c001477e <displayDebugInfo(regs*)>

c0014cd0 <otherISRHandler(regs*, void*)>:
c0014cd0:	53                   	push   ebx
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cd8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cdb:	50                   	push   eax
c0014cdc:	50                   	push   eax
c0014cdd:	68 25 b9 02 c0       	push   0xc002b925
c0014ce2:	e8 ec db ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014ce7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cea:	e8 8f fa ff ff       	call   c001477e <displayDebugInfo(regs*)>

c0014cef <opcodeFault(regs*, void*)>:
c0014cef:	55                   	push   ebp
c0014cf0:	89 e5                	mov    ebp,esp
c0014cf2:	56                   	push   esi
c0014cf3:	53                   	push   ebx
c0014cf4:	83 ec 40             	sub    esp,0x40
c0014cf7:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0014cfc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d02:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014d08:	84 c0                	test   al,al
c0014d0a:	74 24                	je     c0014d30 <opcodeFault(regs*, void*)+0x41>
c0014d0c:	83 ec 0c             	sub    esp,0xc
c0014d0f:	68 44 b9 02 c0       	push   0xc002b944
c0014d14:	e8 ba db ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014d19:	83 c4 10             	add    esp,0x10
c0014d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d22:	8d 50 19             	lea    edx,[eax+0x19]
c0014d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d28:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2b:	e9 d5 05 00 00       	jmp    c0015305 <opcodeFault(regs*, void*)+0x616>
c0014d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d36:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d39:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d3d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d47:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4f:	3c f0                	cmp    al,0xf0
c0014d51:	75 17                	jne    c0014d6a <opcodeFault(regs*, void*)+0x7b>
c0014d53:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5c:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d65:	e9 da 00 00 00       	jmp    c0014e44 <opcodeFault(regs*, void*)+0x155>
c0014d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6f:	3c f2                	cmp    al,0xf2
c0014d71:	74 09                	je     c0014d7c <opcodeFault(regs*, void*)+0x8d>
c0014d73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d76:	8a 00                	mov    al,BYTE PTR [eax]
c0014d78:	3c f3                	cmp    al,0xf3
c0014d7a:	75 1b                	jne    c0014d97 <opcodeFault(regs*, void*)+0xa8>
c0014d7c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d80:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d89:	8d 50 01             	lea    edx,[eax+0x1]
c0014d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d92:	e9 ad 00 00 00       	jmp    c0014e44 <opcodeFault(regs*, void*)+0x155>
c0014d97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9c:	3c 66                	cmp    al,0x66
c0014d9e:	75 1f                	jne    c0014dbf <opcodeFault(regs*, void*)+0xd0>
c0014da0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014da4:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014da8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db1:	8d 50 01             	lea    edx,[eax+0x1]
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dba:	e9 85 00 00 00       	jmp    c0014e44 <opcodeFault(regs*, void*)+0x155>
c0014dbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc2:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc4:	3c 67                	cmp    al,0x67
c0014dc6:	75 18                	jne    c0014de0 <opcodeFault(regs*, void*)+0xf1>
c0014dc8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dcc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dde:	eb 64                	jmp    c0014e44 <opcodeFault(regs*, void*)+0x155>
c0014de0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de3:	8a 00                	mov    al,BYTE PTR [eax]
c0014de5:	3c 2e                	cmp    al,0x2e
c0014de7:	74 09                	je     c0014df2 <opcodeFault(regs*, void*)+0x103>
c0014de9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dec:	8a 00                	mov    al,BYTE PTR [eax]
c0014dee:	3c 3e                	cmp    al,0x3e
c0014df0:	75 18                	jne    c0014e0a <opcodeFault(regs*, void*)+0x11b>
c0014df2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014df6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dff:	8d 50 01             	lea    edx,[eax+0x1]
c0014e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e08:	eb 3a                	jmp    c0014e44 <opcodeFault(regs*, void*)+0x155>
c0014e0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0f:	3c 36                	cmp    al,0x36
c0014e11:	74 1b                	je     c0014e2e <opcodeFault(regs*, void*)+0x13f>
c0014e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e16:	8a 00                	mov    al,BYTE PTR [eax]
c0014e18:	3c 26                	cmp    al,0x26
c0014e1a:	74 12                	je     c0014e2e <opcodeFault(regs*, void*)+0x13f>
c0014e1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e21:	3c 64                	cmp    al,0x64
c0014e23:	74 09                	je     c0014e2e <opcodeFault(regs*, void*)+0x13f>
c0014e25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e28:	8a 00                	mov    al,BYTE PTR [eax]
c0014e2a:	3c 65                	cmp    al,0x65
c0014e2c:	75 16                	jne    c0014e44 <opcodeFault(regs*, void*)+0x155>
c0014e2e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e32:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e38:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e3b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e47:	8a 00                	mov    al,BYTE PTR [eax]
c0014e49:	3c 0f                	cmp    al,0xf
c0014e4b:	0f 85 ad 00 00 00    	jne    c0014efe <opcodeFault(regs*, void*)+0x20f>
c0014e51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e54:	40                   	inc    eax
c0014e55:	8a 00                	mov    al,BYTE PTR [eax]
c0014e57:	3c c2                	cmp    al,0xc2
c0014e59:	74 0e                	je     c0014e69 <opcodeFault(regs*, void*)+0x17a>
c0014e5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5e:	40                   	inc    eax
c0014e5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e61:	3c c3                	cmp    al,0xc3
c0014e63:	0f 85 95 00 00 00    	jne    c0014efe <opcodeFault(regs*, void*)+0x20f>
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	68 67 b9 02 c0       	push   0xc002b967
c0014e71:	e8 5d da ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0014e76:	83 c4 10             	add    esp,0x10
c0014e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e7f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e85:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e88:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e90:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e96:	88 10                	mov    BYTE PTR [eax],dl
c0014e98:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e9b:	50                   	push   eax
c0014e9c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e9f:	50                   	push   eax
c0014ea0:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ea3:	50                   	push   eax
c0014ea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ea7:	e8 2a 4b 00 00       	call   c00199d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eb5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014eb8:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014ebb:	01 d0                	add    eax,edx
c0014ebd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec6:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ec9:	48                   	dec    eax
c0014eca:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ed3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed9:	83 ec 04             	sub    esp,0x4
c0014edc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014edf:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ee2:	50                   	push   eax
c0014ee3:	e8 cc b2 fe ff       	call   c00001b4 <voodooXADD>
c0014ee8:	83 c4 10             	add    esp,0x10
c0014eeb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014eee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ef1:	01 c2                	add    edx,eax
c0014ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef9:	e9 07 04 00 00       	jmp    c0015305 <opcodeFault(regs*, void*)+0x616>
c0014efe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f01:	8a 00                	mov    al,BYTE PTR [eax]
c0014f03:	3c 0f                	cmp    al,0xf
c0014f05:	0f 85 8b 01 00 00    	jne    c0015096 <opcodeFault(regs*, void*)+0x3a7>
c0014f0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f0e:	40                   	inc    eax
c0014f0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f11:	3c c7                	cmp    al,0xc7
c0014f13:	0f 86 7d 01 00 00    	jbe    c0015096 <opcodeFault(regs*, void*)+0x3a7>
c0014f19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f1c:	40                   	inc    eax
c0014f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1f:	3c cf                	cmp    al,0xcf
c0014f21:	0f 87 6f 01 00 00    	ja     c0015096 <opcodeFault(regs*, void*)+0x3a7>
c0014f27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f2a:	40                   	inc    eax
c0014f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2d:	83 c0 38             	add    eax,0x38
c0014f30:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f33:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f37:	75 0b                	jne    c0014f44 <opcodeFault(regs*, void*)+0x255>
c0014f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f42:	eb 75                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014f44:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f48:	75 0b                	jne    c0014f55 <opcodeFault(regs*, void*)+0x266>
c0014f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f53:	eb 64                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014f55:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f59:	75 0b                	jne    c0014f66 <opcodeFault(regs*, void*)+0x277>
c0014f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f64:	eb 53                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014f66:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f6a:	75 0b                	jne    c0014f77 <opcodeFault(regs*, void*)+0x288>
c0014f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f72:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f75:	eb 42                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014f77:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f7b:	75 0b                	jne    c0014f88 <opcodeFault(regs*, void*)+0x299>
c0014f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f80:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f86:	eb 31                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014f88:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f8c:	75 0b                	jne    c0014f99 <opcodeFault(regs*, void*)+0x2aa>
c0014f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f91:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f94:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f97:	eb 20                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014f99:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f9d:	75 0b                	jne    c0014faa <opcodeFault(regs*, void*)+0x2bb>
c0014f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014fa5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fa8:	eb 0f                	jmp    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014faa:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fae:	75 09                	jne    c0014fb9 <opcodeFault(regs*, void*)+0x2ca>
c0014fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fb6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fb9:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fbd:	74 10                	je     c0014fcf <opcodeFault(regs*, void*)+0x2e0>
c0014fbf:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fc6:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fcd:	eb 2d                	jmp    c0014ffc <opcodeFault(regs*, void*)+0x30d>
c0014fcf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fd2:	c1 e0 18             	shl    eax,0x18
c0014fd5:	89 c2                	mov    edx,eax
c0014fd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fda:	c1 e0 08             	shl    eax,0x8
c0014fdd:	25 00 00 ff 00       	and    eax,0xff0000
c0014fe2:	09 c2                	or     edx,eax
c0014fe4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fe7:	c1 e8 08             	shr    eax,0x8
c0014fea:	25 00 ff 00 00       	and    eax,0xff00
c0014fef:	09 c2                	or     edx,eax
c0014ff1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ff4:	c1 e8 18             	shr    eax,0x18
c0014ff7:	09 d0                	or     eax,edx
c0014ff9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ffc:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015000:	75 0b                	jne    c001500d <opcodeFault(regs*, void*)+0x31e>
c0015002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015005:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015008:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001500b:	eb 75                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c001500d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015011:	75 0b                	jne    c001501e <opcodeFault(regs*, void*)+0x32f>
c0015013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015016:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015019:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001501c:	eb 64                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c001501e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015022:	75 0b                	jne    c001502f <opcodeFault(regs*, void*)+0x340>
c0015024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015027:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001502a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001502d:	eb 53                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c001502f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015033:	75 0b                	jne    c0015040 <opcodeFault(regs*, void*)+0x351>
c0015035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015038:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001503b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001503e:	eb 42                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c0015040:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015044:	75 0b                	jne    c0015051 <opcodeFault(regs*, void*)+0x362>
c0015046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015049:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001504c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001504f:	eb 31                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c0015051:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015055:	75 0b                	jne    c0015062 <opcodeFault(regs*, void*)+0x373>
c0015057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001505d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015060:	eb 20                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c0015062:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015066:	75 0b                	jne    c0015073 <opcodeFault(regs*, void*)+0x384>
c0015068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001506e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015071:	eb 0f                	jmp    c0015082 <opcodeFault(regs*, void*)+0x393>
c0015073:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015077:	75 09                	jne    c0015082 <opcodeFault(regs*, void*)+0x393>
c0015079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001507f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015085:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015088:	8d 50 02             	lea    edx,[eax+0x2]
c001508b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015091:	e9 6f 02 00 00       	jmp    c0015305 <opcodeFault(regs*, void*)+0x616>
c0015096:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015099:	8a 00                	mov    al,BYTE PTR [eax]
c001509b:	3c 0f                	cmp    al,0xf
c001509d:	0f 85 8d 01 00 00    	jne    c0015230 <opcodeFault(regs*, void*)+0x541>
c00150a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a6:	40                   	inc    eax
c00150a7:	8a 00                	mov    al,BYTE PTR [eax]
c00150a9:	3c c7                	cmp    al,0xc7
c00150ab:	0f 85 7f 01 00 00    	jne    c0015230 <opcodeFault(regs*, void*)+0x541>
c00150b1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ba:	8d 50 01             	lea    edx,[eax+0x1]
c00150bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150c3:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150c6:	50                   	push   eax
c00150c7:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150ca:	50                   	push   eax
c00150cb:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150ce:	50                   	push   eax
c00150cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150d2:	e8 ff 48 00 00       	call   c00199d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150dd:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150e0:	83 f0 01             	xor    eax,0x1
c00150e3:	84 c0                	test   al,al
c00150e5:	0f 84 45 01 00 00    	je     c0015230 <opcodeFault(regs*, void*)+0x541>
c00150eb:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150ee:	3c 01                	cmp    al,0x1
c00150f0:	0f 85 3a 01 00 00    	jne    c0015230 <opcodeFault(regs*, void*)+0x541>
c00150f6:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150f9:	83 f0 01             	xor    eax,0x1
c00150fc:	84 c0                	test   al,al
c00150fe:	0f 84 2c 01 00 00    	je     c0015230 <opcodeFault(regs*, void*)+0x541>
c0015104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015107:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001510a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001510d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015114:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015117:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001511a:	89 c2                	mov    edx,eax
c001511c:	b8 00 00 00 00       	mov    eax,0x0
c0015121:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015124:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001512d:	ba 00 00 00 00       	mov    edx,0x0
c0015132:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015135:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001513e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015141:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015148:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001514b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001514e:	89 c2                	mov    edx,eax
c0015150:	b8 00 00 00 00       	mov    eax,0x0
c0015155:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015158:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001515b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015161:	ba 00 00 00 00       	mov    edx,0x0
c0015166:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015169:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001516c:	fa                   	cli    
c001516d:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015172:	40                   	inc    eax
c0015173:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015178:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001517b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001517e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015180:	89 c1                	mov    ecx,eax
c0015182:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015185:	89 cb                	mov    ebx,ecx
c0015187:	89 d0                	mov    eax,edx
c0015189:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001518c:	89 c6                	mov    esi,eax
c001518e:	89 f0                	mov    eax,esi
c0015190:	09 d8                	or     eax,ebx
c0015192:	85 c0                	test   eax,eax
c0015194:	75 21                	jne    c00151b7 <opcodeFault(regs*, void*)+0x4c8>
c0015196:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015199:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001519c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001519f:	89 01                	mov    DWORD PTR [ecx],eax
c00151a1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151aa:	83 c8 40             	or     eax,0x40
c00151ad:	89 c2                	mov    edx,eax
c00151af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151b5:	eb 3e                	jmp    c00151f5 <opcodeFault(regs*, void*)+0x506>
c00151b7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151c2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151c5:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151ce:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151d1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151d4:	89 d0                	mov    eax,edx
c00151d6:	31 d2                	xor    edx,edx
c00151d8:	89 c3                	mov    ebx,eax
c00151da:	89 d6                	mov    esi,edx
c00151dc:	89 da                	mov    edx,ebx
c00151de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151ea:	83 e0 bf             	and    eax,0xffffffbf
c00151ed:	89 c2                	mov    edx,eax
c00151ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151f5:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00151fa:	48                   	dec    eax
c00151fb:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015200:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015205:	85 c0                	test   eax,eax
c0015207:	75 01                	jne    c001520a <opcodeFault(regs*, void*)+0x51b>
c0015209:	fb                   	sti    
c001520a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015210:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015213:	01 c2                	add    edx,eax
c0015215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015218:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001521b:	83 ec 0c             	sub    esp,0xc
c001521e:	68 76 b9 02 c0       	push   0xc002b976
c0015223:	e8 ab d6 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	e9 d5 00 00 00       	jmp    c0015305 <opcodeFault(regs*, void*)+0x616>
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	68 89 b9 02 c0       	push   0xc002b989
c0015238:	e8 96 d6 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015243:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001524c:	c1 e0 04             	shl    eax,0x4
c001524f:	01 d0                	add    eax,edx
c0015251:	83 c0 03             	add    eax,0x3
c0015254:	8a 00                	mov    al,BYTE PTR [eax]
c0015256:	0f b6 d8             	movzx  ebx,al
c0015259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001525f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015262:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015265:	c1 e0 04             	shl    eax,0x4
c0015268:	01 d0                	add    eax,edx
c001526a:	83 c0 02             	add    eax,0x2
c001526d:	8a 00                	mov    al,BYTE PTR [eax]
c001526f:	0f b6 c8             	movzx  ecx,al
c0015272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015275:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001527e:	c1 e0 04             	shl    eax,0x4
c0015281:	01 d0                	add    eax,edx
c0015283:	40                   	inc    eax
c0015284:	8a 00                	mov    al,BYTE PTR [eax]
c0015286:	0f b6 d0             	movzx  edx,al
c0015289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528c:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001528f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015292:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015295:	c1 e0 04             	shl    eax,0x4
c0015298:	01 f0                	add    eax,esi
c001529a:	8a 00                	mov    al,BYTE PTR [eax]
c001529c:	0f b6 c0             	movzx  eax,al
c001529f:	83 ec 0c             	sub    esp,0xc
c00152a2:	53                   	push   ebx
c00152a3:	51                   	push   ecx
c00152a4:	52                   	push   edx
c00152a5:	50                   	push   eax
c00152a6:	68 9c b9 02 c0       	push   0xc002b99c
c00152ab:	e8 23 d6 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00152b0:	83 c4 20             	add    esp,0x20
c00152b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b9:	83 c0 03             	add    eax,0x3
c00152bc:	8a 00                	mov    al,BYTE PTR [eax]
c00152be:	0f b6 d8             	movzx  ebx,al
c00152c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c7:	83 c0 02             	add    eax,0x2
c00152ca:	8a 00                	mov    al,BYTE PTR [eax]
c00152cc:	0f b6 c8             	movzx  ecx,al
c00152cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d5:	40                   	inc    eax
c00152d6:	8a 00                	mov    al,BYTE PTR [eax]
c00152d8:	0f b6 d0             	movzx  edx,al
c00152db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e1:	8a 00                	mov    al,BYTE PTR [eax]
c00152e3:	0f b6 c0             	movzx  eax,al
c00152e6:	83 ec 0c             	sub    esp,0xc
c00152e9:	53                   	push   ebx
c00152ea:	51                   	push   ecx
c00152eb:	52                   	push   edx
c00152ec:	50                   	push   eax
c00152ed:	68 c4 b9 02 c0       	push   0xc002b9c4
c00152f2:	e8 dc d5 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00152f7:	83 c4 20             	add    esp,0x20
c00152fa:	83 ec 0c             	sub    esp,0xc
c00152fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015300:	e8 79 f4 ff ff       	call   c001477e <displayDebugInfo(regs*)>
c0015305:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015308:	5b                   	pop    ebx
c0015309:	5e                   	pop    esi
c001530a:	5d                   	pop    ebp
c001530b:	c3                   	ret    

c001530c <displayProgramFault(char const*)>:
c001530c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015311:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015314:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001531a:	85 c0                	test   eax,eax
c001531c:	74 15                	je     c0015333 <displayProgramFault(char const*)+0x27>
c001531e:	83 ec 0c             	sub    esp,0xc
c0015321:	6a 04                	push   0x4
c0015323:	6a 0f                	push   0xf
c0015325:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015329:	50                   	push   eax
c001532a:	e8 95 b4 ff ff       	call   c00107c4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001532f:	83 c4 1c             	add    esp,0x1c
c0015332:	c3                   	ret    
c0015333:	c3                   	ret    

c0015334 <setupInterruptController()>:
c0015334:	55                   	push   ebp
c0015335:	89 e5                	mov    ebp,esp
c0015337:	53                   	push   ebx
c0015338:	83 ec 24             	sub    esp,0x24
c001533b:	b8 00 00 00 00       	mov    eax,0x0
c0015340:	85 c0                	test   eax,eax
c0015342:	0f 95 c0             	setne  al
c0015345:	84 c0                	test   al,al
c0015347:	74 5b                	je     c00153a4 <setupInterruptController()+0x70>
c0015349:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015350:	83 ec 0c             	sub    esp,0xc
c0015353:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015356:	e8 31 a5 ff ff       	call   c000f88c <malloc>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	89 c3                	mov    ebx,eax
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	53                   	push   ebx
c0015364:	e8 09 0e 01 00       	call   c0026172 <APIC::APIC()>
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001536f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015372:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015375:	8b 00                	mov    eax,DWORD PTR [eax]
c0015377:	83 c0 08             	add    eax,0x8
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	6a 00                	push   0x0
c001537e:	6a 00                	push   0x0
c0015380:	6a 00                	push   0x0
c0015382:	52                   	push   edx
c0015383:	ff d0                	call   eax
c0015385:	83 c4 10             	add    esp,0x10
c0015388:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001538d:	83 ec 08             	sub    esp,0x8
c0015390:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015393:	50                   	push   eax
c0015394:	e8 73 e9 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c0015399:	83 c4 10             	add    esp,0x10
c001539c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001539f:	e9 89 03 00 00       	jmp    c001572d <setupInterruptController()+0x3f9>
c00153a4:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c00153a9:	84 c0                	test   al,al
c00153ab:	75 24                	jne    c00153d1 <setupInterruptController()+0x9d>
c00153ad:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00153b2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153b8:	83 e2 fe             	and    edx,0xfffffffe
c00153bb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153c1:	83 ec 0c             	sub    esp,0xc
c00153c4:	68 e9 b9 02 c0       	push   0xc002b9e9
c00153c9:	e8 05 d5 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00153d6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153dc:	83 e0 01             	and    eax,0x1
c00153df:	84 c0                	test   al,al
c00153e1:	0f 95 c0             	setne  al
c00153e4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153e7:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153ee:	83 ec 0c             	sub    esp,0xc
c00153f1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153f4:	e8 93 a4 ff ff       	call   c000f88c <malloc>
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	89 c3                	mov    ebx,eax
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	53                   	push   ebx
c0015402:	e8 c3 12 01 00       	call   c00266ca <PIC::PIC()>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001540d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	83 c0 08             	add    eax,0x8
c0015418:	8b 00                	mov    eax,DWORD PTR [eax]
c001541a:	6a 00                	push   0x0
c001541c:	6a 00                	push   0x0
c001541e:	6a 00                	push   0x0
c0015420:	52                   	push   edx
c0015421:	ff d0                	call   eax
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001542a:	74 73                	je     c001549f <setupInterruptController()+0x16b>
c001542c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001542f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015432:	8b 00                	mov    eax,DWORD PTR [eax]
c0015434:	83 c0 0c             	add    eax,0xc
c0015437:	8b 00                	mov    eax,DWORD PTR [eax]
c0015439:	6a 00                	push   0x0
c001543b:	6a 00                	push   0x0
c001543d:	6a 00                	push   0x0
c001543f:	52                   	push   edx
c0015440:	ff d0                	call   eax
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015449:	74 15                	je     c0015460 <setupInterruptController()+0x12c>
c001544b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015450:	83 c0 04             	add    eax,0x4
c0015453:	8b 00                	mov    eax,DWORD PTR [eax]
c0015455:	83 ec 0c             	sub    esp,0xc
c0015458:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545b:	ff d0                	call   eax
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015467:	83 ec 0c             	sub    esp,0xc
c001546a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001546d:	e8 1a a4 ff ff       	call   c000f88c <malloc>
c0015472:	83 c4 10             	add    esp,0x10
c0015475:	89 c3                	mov    ebx,eax
c0015477:	83 ec 0c             	sub    esp,0xc
c001547a:	53                   	push   ebx
c001547b:	e8 f2 0c 01 00       	call   c0026172 <APIC::APIC()>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015486:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015489:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548c:	8b 00                	mov    eax,DWORD PTR [eax]
c001548e:	83 c0 08             	add    eax,0x8
c0015491:	8b 00                	mov    eax,DWORD PTR [eax]
c0015493:	6a 00                	push   0x0
c0015495:	6a 00                	push   0x0
c0015497:	6a 00                	push   0x0
c0015499:	52                   	push   edx
c001549a:	ff d0                	call   eax
c001549c:	83 c4 10             	add    esp,0x10
c001549f:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00154a4:	83 ec 08             	sub    esp,0x8
c00154a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154aa:	50                   	push   eax
c00154ab:	e8 5c e8 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	c7 05 88 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f188,0x0
c00154bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c2:	83 c0 24             	add    eax,0x24
c00154c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c7:	6a 00                	push   0x0
c00154c9:	68 d0 4c 01 c0       	push   0xc0014cd0
c00154ce:	6a 00                	push   0x0
c00154d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d3:	ff d0                	call   eax
c00154d5:	83 c4 10             	add    esp,0x10
c00154d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154db:	8b 00                	mov    eax,DWORD PTR [eax]
c00154dd:	83 c0 24             	add    eax,0x24
c00154e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e2:	6a 00                	push   0x0
c00154e4:	68 d0 4c 01 c0       	push   0xc0014cd0
c00154e9:	6a 01                	push   0x1
c00154eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ee:	ff d0                	call   eax
c00154f0:	83 c4 10             	add    esp,0x10
c00154f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f8:	83 c0 24             	add    eax,0x24
c00154fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fd:	6a 00                	push   0x0
c00154ff:	68 db 45 01 c0       	push   0xc00145db
c0015504:	6a 02                	push   0x2
c0015506:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015509:	ff d0                	call   eax
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015511:	8b 00                	mov    eax,DWORD PTR [eax]
c0015513:	83 c0 24             	add    eax,0x24
c0015516:	8b 00                	mov    eax,DWORD PTR [eax]
c0015518:	6a 00                	push   0x0
c001551a:	68 d0 4c 01 c0       	push   0xc0014cd0
c001551f:	6a 03                	push   0x3
c0015521:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015524:	ff d0                	call   eax
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552c:	8b 00                	mov    eax,DWORD PTR [eax]
c001552e:	83 c0 24             	add    eax,0x24
c0015531:	8b 00                	mov    eax,DWORD PTR [eax]
c0015533:	6a 00                	push   0x0
c0015535:	68 d0 4c 01 c0       	push   0xc0014cd0
c001553a:	6a 04                	push   0x4
c001553c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553f:	ff d0                	call   eax
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015547:	8b 00                	mov    eax,DWORD PTR [eax]
c0015549:	83 c0 24             	add    eax,0x24
c001554c:	8b 00                	mov    eax,DWORD PTR [eax]
c001554e:	6a 00                	push   0x0
c0015550:	68 d0 4c 01 c0       	push   0xc0014cd0
c0015555:	6a 05                	push   0x5
c0015557:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001555a:	ff d0                	call   eax
c001555c:	83 c4 10             	add    esp,0x10
c001555f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015562:	8b 00                	mov    eax,DWORD PTR [eax]
c0015564:	83 c0 24             	add    eax,0x24
c0015567:	8b 00                	mov    eax,DWORD PTR [eax]
c0015569:	6a 00                	push   0x0
c001556b:	68 ef 4c 01 c0       	push   0xc0014cef
c0015570:	6a 06                	push   0x6
c0015572:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015575:	ff d0                	call   eax
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557d:	8b 00                	mov    eax,DWORD PTR [eax]
c001557f:	83 c0 24             	add    eax,0x24
c0015582:	8b 00                	mov    eax,DWORD PTR [eax]
c0015584:	6a 00                	push   0x0
c0015586:	68 0d 4c 01 c0       	push   0xc0014c0d
c001558b:	6a 07                	push   0x7
c001558d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015590:	ff d0                	call   eax
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015598:	8b 00                	mov    eax,DWORD PTR [eax]
c001559a:	83 c0 24             	add    eax,0x24
c001559d:	8b 00                	mov    eax,DWORD PTR [eax]
c001559f:	6a 00                	push   0x0
c00155a1:	68 f6 43 01 c0       	push   0xc00143f6
c00155a6:	6a 08                	push   0x8
c00155a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ab:	ff d0                	call   eax
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b5:	83 c0 24             	add    eax,0x24
c00155b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ba:	6a 00                	push   0x0
c00155bc:	68 d0 4c 01 c0       	push   0xc0014cd0
c00155c1:	6a 09                	push   0x9
c00155c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c6:	ff d0                	call   eax
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d0:	83 c0 24             	add    eax,0x24
c00155d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d5:	6a 00                	push   0x0
c00155d7:	68 d0 4c 01 c0       	push   0xc0014cd0
c00155dc:	6a 0a                	push   0xa
c00155de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e1:	ff d0                	call   eax
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155eb:	83 c0 24             	add    eax,0x24
c00155ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f0:	6a 00                	push   0x0
c00155f2:	68 d0 4c 01 c0       	push   0xc0014cd0
c00155f7:	6a 0b                	push   0xb
c00155f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155fc:	ff d0                	call   eax
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015604:	8b 00                	mov    eax,DWORD PTR [eax]
c0015606:	83 c0 24             	add    eax,0x24
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	6a 00                	push   0x0
c001560d:	68 d0 4c 01 c0       	push   0xc0014cd0
c0015612:	6a 0c                	push   0xc
c0015614:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015617:	ff d0                	call   eax
c0015619:	83 c4 10             	add    esp,0x10
c001561c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015621:	83 c0 24             	add    eax,0x24
c0015624:	8b 00                	mov    eax,DWORD PTR [eax]
c0015626:	6a 00                	push   0x0
c0015628:	68 80 4c 01 c0       	push   0xc0014c80
c001562d:	6a 0d                	push   0xd
c001562f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015632:	ff d0                	call   eax
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563a:	8b 00                	mov    eax,DWORD PTR [eax]
c001563c:	83 c0 24             	add    eax,0x24
c001563f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015641:	6a 00                	push   0x0
c0015643:	68 b9 4c 01 c0       	push   0xc0014cb9
c0015648:	6a 0e                	push   0xe
c001564a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564d:	ff d0                	call   eax
c001564f:	83 c4 10             	add    esp,0x10
c0015652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015655:	8b 00                	mov    eax,DWORD PTR [eax]
c0015657:	83 c0 24             	add    eax,0x24
c001565a:	8b 00                	mov    eax,DWORD PTR [eax]
c001565c:	6a 00                	push   0x0
c001565e:	68 d0 4c 01 c0       	push   0xc0014cd0
c0015663:	6a 0f                	push   0xf
c0015665:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015668:	ff d0                	call   eax
c001566a:	83 c4 10             	add    esp,0x10
c001566d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015670:	8b 00                	mov    eax,DWORD PTR [eax]
c0015672:	83 c0 24             	add    eax,0x24
c0015675:	8b 00                	mov    eax,DWORD PTR [eax]
c0015677:	6a 00                	push   0x0
c0015679:	68 d0 4c 01 c0       	push   0xc0014cd0
c001567e:	6a 10                	push   0x10
c0015680:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015683:	ff d0                	call   eax
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568b:	8b 00                	mov    eax,DWORD PTR [eax]
c001568d:	83 c0 24             	add    eax,0x24
c0015690:	8b 00                	mov    eax,DWORD PTR [eax]
c0015692:	6a 00                	push   0x0
c0015694:	68 d0 4c 01 c0       	push   0xc0014cd0
c0015699:	6a 11                	push   0x11
c001569b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569e:	ff d0                	call   eax
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a8:	83 c0 24             	add    eax,0x24
c00156ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ad:	6a 00                	push   0x0
c00156af:	68 d0 4c 01 c0       	push   0xc0014cd0
c00156b4:	6a 12                	push   0x12
c00156b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b9:	ff d0                	call   eax
c00156bb:	83 c4 10             	add    esp,0x10
c00156be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c3:	83 c0 24             	add    eax,0x24
c00156c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c8:	6a 00                	push   0x0
c00156ca:	68 d0 4c 01 c0       	push   0xc0014cd0
c00156cf:	6a 13                	push   0x13
c00156d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d4:	ff d0                	call   eax
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156de:	83 c0 24             	add    eax,0x24
c00156e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e3:	6a 00                	push   0x0
c00156e5:	68 d0 4c 01 c0       	push   0xc0014cd0
c00156ea:	6a 14                	push   0x14
c00156ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ef:	ff d0                	call   eax
c00156f1:	83 c4 10             	add    esp,0x10
c00156f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f9:	83 c0 24             	add    eax,0x24
c00156fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fe:	6a 00                	push   0x0
c0015700:	68 d0 4c 01 c0       	push   0xc0014cd0
c0015705:	6a 1e                	push   0x1e
c0015707:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001570a:	ff d0                	call   eax
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015712:	8b 00                	mov    eax,DWORD PTR [eax]
c0015714:	83 c0 24             	add    eax,0x24
c0015717:	8b 00                	mov    eax,DWORD PTR [eax]
c0015719:	6a 00                	push   0x0
c001571b:	68 02 c7 01 c0       	push   0xc001c702
c0015720:	6a 60                	push   0x60
c0015722:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015725:	ff d0                	call   eax
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015730:	c9                   	leave  
c0015731:	c3                   	ret    

c0015732 <InterruptController::convertLegacyIRQNumber(int)>:
c0015732:	55                   	push   ebp
c0015733:	89 e5                	mov    ebp,esp
c0015735:	83 ec 08             	sub    esp,0x8
c0015738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573b:	83 ec 0c             	sub    esp,0xc
c001573e:	50                   	push   eax
c001573f:	e8 c8 e8 ff ff       	call   c001400c <Device::getName()>
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	8a 00                	mov    al,BYTE PTR [eax]
c0015749:	3c 41                	cmp    al,0x41
c001574b:	0f 94 c0             	sete   al
c001574e:	84 c0                	test   al,al
c0015750:	74 28                	je     c001577a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015752:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015756:	7f 12                	jg     c001576a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015758:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001575b:	05 60 e2 02 c0       	add    eax,0xc002e260
c0015760:	8a 00                	mov    al,BYTE PTR [eax]
c0015762:	0f b6 c0             	movzx  eax,al
c0015765:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015768:	eb 10                	jmp    c001577a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001576a:	83 ec 0c             	sub    esp,0xc
c001576d:	68 d8 b6 02 c0       	push   0xc002b6d8
c0015772:	e8 92 4b 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0015777:	83 c4 10             	add    esp,0x10
c001577a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001577d:	c9                   	leave  
c001577e:	c3                   	ret    
c001577f:	90                   	nop

c0015780 <startGUI(void*)>:
c0015780:	55                   	push   ebp
c0015781:	89 e5                	mov    ebp,esp
c0015783:	53                   	push   ebx
c0015784:	83 ec 04             	sub    esp,0x4
c0015787:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001578c:	48                   	dec    eax
c001578d:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015792:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015797:	85 c0                	test   eax,eax
c0015799:	75 01                	jne    c001579c <startGUI(void*)+0x1c>
c001579b:	fb                   	sti    
c001579c:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c00157a2:	83 ec 08             	sub    esp,0x8
c00157a5:	6a 01                	push   0x1
c00157a7:	68 4c ba 02 c0       	push   0xc002ba4c
c00157ac:	e8 2c 7f 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	83 ec 08             	sub    esp,0x8
c00157b7:	53                   	push   ebx
c00157b8:	50                   	push   eax
c00157b9:	e8 4a 81 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c00157c7:	83 ec 08             	sub    esp,0x8
c00157ca:	6a 01                	push   0x1
c00157cc:	68 66 ba 02 c0       	push   0xc002ba66
c00157d1:	e8 07 7f 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	83 ec 08             	sub    esp,0x8
c00157dc:	53                   	push   ebx
c00157dd:	50                   	push   eax
c00157de:	e8 25 81 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	90                   	nop
c00157e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157ea:	c9                   	leave  
c00157eb:	c3                   	ret    

c00157ec <startGUIVESA(void*)>:
c00157ec:	55                   	push   ebp
c00157ed:	89 e5                	mov    ebp,esp
c00157ef:	53                   	push   ebx
c00157f0:	83 ec 04             	sub    esp,0x4
c00157f3:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00157f8:	48                   	dec    eax
c00157f9:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00157fe:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015803:	85 c0                	test   eax,eax
c0015805:	75 01                	jne    c0015808 <startGUIVESA(void*)+0x1c>
c0015807:	fb                   	sti    
c0015808:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c001580e:	83 ec 08             	sub    esp,0x8
c0015811:	6a 01                	push   0x1
c0015813:	68 80 ba 02 c0       	push   0xc002ba80
c0015818:	e8 c0 7e 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c001581d:	83 c4 10             	add    esp,0x10
c0015820:	83 ec 08             	sub    esp,0x8
c0015823:	53                   	push   ebx
c0015824:	50                   	push   eax
c0015825:	e8 de 80 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c0015833:	83 ec 08             	sub    esp,0x8
c0015836:	6a 01                	push   0x1
c0015838:	68 66 ba 02 c0       	push   0xc002ba66
c001583d:	e8 9b 7e 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c0015842:	83 c4 10             	add    esp,0x10
c0015845:	83 ec 08             	sub    esp,0x8
c0015848:	53                   	push   ebx
c0015849:	50                   	push   eax
c001584a:	e8 b9 80 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	90                   	nop
c0015853:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015856:	c9                   	leave  
c0015857:	c3                   	ret    

c0015858 <sendKeyToTerminal(unsigned char)>:
c0015858:	55                   	push   ebp
c0015859:	89 e5                	mov    ebp,esp
c001585b:	83 ec 28             	sub    esp,0x28
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015864:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c0015869:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001586d:	83 ec 08             	sub    esp,0x8
c0015870:	52                   	push   edx
c0015871:	50                   	push   eax
c0015872:	e8 25 b4 ff ff       	call   c0010c9c <VgaText::receiveKey(unsigned char)>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001587e:	0f 85 8f 00 00 00    	jne    c0015913 <sendKeyToTerminal(unsigned char)+0xbb>
c0015884:	fa                   	cli    
c0015885:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001588a:	40                   	inc    eax
c001588b:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015890:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c0015895:	40                   	inc    eax
c0015896:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001589b:	a1 a0 f1 02 c0       	mov    eax,ds:0xc002f1a0
c00158a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158a3:	c7 05 a0 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x0
c00158ad:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158b1:	74 1f                	je     c00158d2 <sendKeyToTerminal(unsigned char)+0x7a>
c00158b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158c2:	83 ec 0c             	sub    esp,0xc
c00158c5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158c8:	e8 b3 8c 00 00       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c00158cd:	83 c4 10             	add    esp,0x10
c00158d0:	eb db                	jmp    c00158ad <sendKeyToTerminal(unsigned char)+0x55>
c00158d2:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c00158d7:	48                   	dec    eax
c00158d8:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c00158dd:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c00158e2:	85 c0                	test   eax,eax
c00158e4:	75 18                	jne    c00158fe <sendKeyToTerminal(unsigned char)+0xa6>
c00158e6:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c00158eb:	85 c0                	test   eax,eax
c00158ed:	74 0f                	je     c00158fe <sendKeyToTerminal(unsigned char)+0xa6>
c00158ef:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c00158f9:	e8 be 87 00 00       	call   c001e0bc <schedule()>
c00158fe:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015903:	48                   	dec    eax
c0015904:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015909:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001590e:	85 c0                	test   eax,eax
c0015910:	75 01                	jne    c0015913 <sendKeyToTerminal(unsigned char)+0xbb>
c0015912:	fb                   	sti    
c0015913:	90                   	nop
c0015914:	c9                   	leave  
c0015915:	c3                   	ret    

c0015916 <sendKeyboardToken(KeyboardToken)>:
c0015916:	55                   	push   ebp
c0015917:	89 e5                	mov    ebp,esp
c0015919:	83 ec 18             	sub    esp,0x18
c001591c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015922:	0f b7 c0             	movzx  eax,ax
c0015925:	83 f2 01             	xor    edx,0x1
c0015928:	88 90 c0 f1 02 c0    	mov    BYTE PTR [eax-0x3ffd0e40],dl
c001592e:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0015933:	85 c0                	test   eax,eax
c0015935:	74 24                	je     c001595b <sendKeyboardToken(KeyboardToken)+0x45>
c0015937:	8b 0d a8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1a8
c001593d:	83 ec 04             	sub    esp,0x4
c0015940:	68 c0 f1 02 c0       	push   0xc002f1c0
c0015945:	83 ec 08             	sub    esp,0x8
c0015948:	89 e2                	mov    edx,esp
c001594a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594d:	89 02                	mov    DWORD PTR [edx],eax
c001594f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015952:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015956:	ff d1                	call   ecx
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595e:	66 3d 03 02          	cmp    ax,0x203
c0015962:	75 07                	jne    c001596b <sendKeyboardToken(KeyboardToken)+0x55>
c0015964:	a0 c0 f2 02 c0       	mov    al,ds:0xc002f2c0
c0015969:	84 c0                	test   al,al
c001596b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001596f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015972:	a0 c8 f5 02 c0       	mov    al,ds:0xc002f5c8
c0015977:	38 c2                	cmp    dl,al
c0015979:	74 1c                	je     c0015997 <sendKeyboardToken(KeyboardToken)+0x81>
c001597b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001597e:	a2 c8 f5 02 c0       	mov    ds:0xc002f5c8,al
c0015983:	a0 c8 f5 02 c0       	mov    al,ds:0xc002f5c8
c0015988:	0f b6 c0             	movzx  eax,al
c001598b:	83 ec 0c             	sub    esp,0xc
c001598e:	50                   	push   eax
c001598f:	e8 60 a8 ff ff       	call   c00101f4 <setTerminalScrollLock(bool)>
c0015994:	83 c4 10             	add    esp,0x10
c0015997:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001599a:	84 c0                	test   al,al
c001599c:	0f 84 ae 00 00 00    	je     c0015a50 <sendKeyboardToken(KeyboardToken)+0x13a>
c00159a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a5:	66 3d 10 03          	cmp    ax,0x310
c00159a9:	75 06                	jne    c00159b1 <sendKeyboardToken(KeyboardToken)+0x9b>
c00159ab:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b4:	66 3d 11 03          	cmp    ax,0x311
c00159b8:	75 06                	jne    c00159c0 <sendKeyboardToken(KeyboardToken)+0xaa>
c00159ba:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c3:	66 3d 12 03          	cmp    ax,0x312
c00159c7:	75 06                	jne    c00159cf <sendKeyboardToken(KeyboardToken)+0xb9>
c00159c9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d2:	66 3d 13 03          	cmp    ax,0x313
c00159d6:	75 06                	jne    c00159de <sendKeyboardToken(KeyboardToken)+0xc8>
c00159d8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e1:	66 3d 14 03          	cmp    ax,0x314
c00159e5:	75 06                	jne    c00159ed <sendKeyboardToken(KeyboardToken)+0xd7>
c00159e7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f0:	66 3d 15 03          	cmp    ax,0x315
c00159f4:	75 06                	jne    c00159fc <sendKeyboardToken(KeyboardToken)+0xe6>
c00159f6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ff:	66 3d 16 03          	cmp    ax,0x316
c0015a03:	75 06                	jne    c0015a0b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015a05:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0e:	66 3d 17 03          	cmp    ax,0x317
c0015a12:	75 06                	jne    c0015a1a <sendKeyboardToken(KeyboardToken)+0x104>
c0015a14:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1d:	66 3d 18 03          	cmp    ax,0x318
c0015a21:	75 06                	jne    c0015a29 <sendKeyboardToken(KeyboardToken)+0x113>
c0015a23:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2c:	66 3d 19 03          	cmp    ax,0x319
c0015a30:	75 06                	jne    c0015a38 <sendKeyboardToken(KeyboardToken)+0x122>
c0015a32:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3b:	66 3d 1a 03          	cmp    ax,0x31a
c0015a3f:	0f 85 c9 00 00 00    	jne    c0015b0e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a45:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a4b:	e9 be 00 00 00       	jmp    c0015b0e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a53:	66 3d 10 03          	cmp    ax,0x310
c0015a57:	75 0a                	jne    c0015a63 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a59:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a5f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a66:	66 3d 11 03          	cmp    ax,0x311
c0015a6a:	75 0a                	jne    c0015a76 <sendKeyboardToken(KeyboardToken)+0x160>
c0015a6c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a72:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a79:	66 3d 12 03          	cmp    ax,0x312
c0015a7d:	75 0a                	jne    c0015a89 <sendKeyboardToken(KeyboardToken)+0x173>
c0015a7f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a85:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8c:	66 3d 13 03          	cmp    ax,0x313
c0015a90:	75 0a                	jne    c0015a9c <sendKeyboardToken(KeyboardToken)+0x186>
c0015a92:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a98:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9f:	66 3d 14 03          	cmp    ax,0x314
c0015aa3:	75 0a                	jne    c0015aaf <sendKeyboardToken(KeyboardToken)+0x199>
c0015aa5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015aab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab2:	66 3d 15 03          	cmp    ax,0x315
c0015ab6:	75 0a                	jne    c0015ac2 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ab8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015abe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac5:	66 3d 16 03          	cmp    ax,0x316
c0015ac9:	75 0a                	jne    c0015ad5 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015acb:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ad1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad8:	66 3d 17 03          	cmp    ax,0x317
c0015adc:	75 0a                	jne    c0015ae8 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ade:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ae4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aeb:	66 3d 18 03          	cmp    ax,0x318
c0015aef:	75 0a                	jne    c0015afb <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015af1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015af7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afe:	66 3d 19 03          	cmp    ax,0x319
c0015b02:	75 0a                	jne    c0015b0e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b04:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b11:	66 3d 00 02          	cmp    ax,0x200
c0015b15:	75 2c                	jne    c0015b43 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b17:	a0 c0 f5 02 c0       	mov    al,ds:0xc002f5c0
c0015b1c:	83 f0 01             	xor    eax,0x1
c0015b1f:	84 c0                	test   al,al
c0015b21:	74 20                	je     c0015b43 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b23:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0015b28:	6a 01                	push   0x1
c0015b2a:	6a 00                	push   0x0
c0015b2c:	68 80 57 01 c0       	push   0xc0015780
c0015b31:	50                   	push   eax
c0015b32:	e8 41 83 00 00       	call   c001de78 <Process::createThread(void (*)(void*), void*, int)>
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	c6 05 c0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5c0,0x1
c0015b41:	eb 33                	jmp    c0015b76 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b46:	66 3d 01 02          	cmp    ax,0x201
c0015b4a:	75 2a                	jne    c0015b76 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b4c:	a0 c0 f5 02 c0       	mov    al,ds:0xc002f5c0
c0015b51:	83 f0 01             	xor    eax,0x1
c0015b54:	84 c0                	test   al,al
c0015b56:	74 1e                	je     c0015b76 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b58:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0015b5d:	6a 01                	push   0x1
c0015b5f:	6a 00                	push   0x0
c0015b61:	68 ec 57 01 c0       	push   0xc00157ec
c0015b66:	50                   	push   eax
c0015b67:	e8 0c 83 00 00       	call   c001de78 <Process::createThread(void (*)(void*), void*, int)>
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	c6 05 c0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5c0,0x1
c0015b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b79:	66 3d 1d 03          	cmp    ax,0x31d
c0015b7d:	75 06                	jne    c0015b85 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b7f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b88:	66 3d 1c 03          	cmp    ax,0x31c
c0015b8c:	75 06                	jne    c0015b94 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b8e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b97:	66 3d 1b 03          	cmp    ax,0x31b
c0015b9b:	75 06                	jne    c0015ba3 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b9d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba6:	66 3d 1e 03          	cmp    ax,0x31e
c0015baa:	75 06                	jne    c0015bb2 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015bac:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb5:	66 3d 1f 03          	cmp    ax,0x31f
c0015bb9:	75 06                	jne    c0015bc1 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015bbb:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc4:	66 3d 1a 03          	cmp    ax,0x31a
c0015bc8:	75 06                	jne    c0015bd0 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015bca:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015bd0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bd4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bd7:	83 f0 01             	xor    eax,0x1
c0015bda:	84 c0                	test   al,al
c0015bdc:	74 77                	je     c0015c55 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015bde:	a0 c1 f2 02 c0       	mov    al,ds:0xc002f2c1
c0015be3:	84 c0                	test   al,al
c0015be5:	74 41                	je     c0015c28 <sendKeyboardToken(KeyboardToken)+0x312>
c0015be7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015beb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015bef:	74 2b                	je     c0015c1c <sendKeyboardToken(KeyboardToken)+0x306>
c0015bf1:	8b 15 c4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5c4
c0015bf7:	89 d0                	mov    eax,edx
c0015bf9:	c1 e0 02             	shl    eax,0x2
c0015bfc:	01 d0                	add    eax,edx
c0015bfe:	01 c0                	add    eax,eax
c0015c00:	a3 c4 f5 02 c0       	mov    ds:0xc002f5c4,eax
c0015c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c08:	0f b7 c0             	movzx  eax,ax
c0015c0b:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c0e:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c13:	01 d0                	add    eax,edx
c0015c15:	a3 c4 f5 02 c0       	mov    ds:0xc002f5c4,eax
c0015c1a:	eb 6d                	jmp    c0015c89 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c1c:	c7 05 c4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c4,0x0
c0015c26:	eb 61                	jmp    c0015c89 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c28:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c2d:	85 c0                	test   eax,eax
c0015c2f:	74 18                	je     c0015c49 <sendKeyboardToken(KeyboardToken)+0x333>
c0015c31:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c36:	0f b6 c0             	movzx  eax,al
c0015c39:	83 ec 0c             	sub    esp,0xc
c0015c3c:	50                   	push   eax
c0015c3d:	e8 16 fc ff ff       	call   c0015858 <sendKeyToTerminal(unsigned char)>
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c49:	c7 05 c4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c4,0x0
c0015c53:	eb 34                	jmp    c0015c89 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c58:	66 3d 01 01          	cmp    ax,0x101
c0015c5c:	75 2b                	jne    c0015c89 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c5e:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c63:	85 c0                	test   eax,eax
c0015c65:	74 18                	je     c0015c7f <sendKeyboardToken(KeyboardToken)+0x369>
c0015c67:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c6c:	0f b6 c0             	movzx  eax,al
c0015c6f:	83 ec 0c             	sub    esp,0xc
c0015c72:	50                   	push   eax
c0015c73:	e8 e0 fb ff ff       	call   c0015858 <sendKeyToTerminal(unsigned char)>
c0015c78:	83 c4 10             	add    esp,0x10
c0015c7b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c7f:	c7 05 c4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c4,0x0
c0015c89:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c8c:	83 f0 01             	xor    eax,0x1
c0015c8f:	84 c0                	test   al,al
c0015c91:	74 4c                	je     c0015cdf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c93:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c96:	83 f0 01             	xor    eax,0x1
c0015c99:	84 c0                	test   al,al
c0015c9b:	74 42                	je     c0015cdf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c9d:	a0 c0 f2 02 c0       	mov    al,ds:0xc002f2c0
c0015ca2:	83 f0 01             	xor    eax,0x1
c0015ca5:	84 c0                	test   al,al
c0015ca7:	74 36                	je     c0015cdf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cac:	66 83 f8 1f          	cmp    ax,0x1f
c0015cb0:	76 09                	jbe    c0015cbb <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb5:	66 83 f8 7e          	cmp    ax,0x7e
c0015cb9:	76 12                	jbe    c0015ccd <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbe:	66 83 f8 0a          	cmp    ax,0xa
c0015cc2:	74 09                	je     c0015ccd <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc7:	66 83 f8 08          	cmp    ax,0x8
c0015ccb:	75 12                	jne    c0015cdf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd0:	0f b6 c0             	movzx  eax,al
c0015cd3:	83 ec 0c             	sub    esp,0xc
c0015cd6:	50                   	push   eax
c0015cd7:	e8 7c fb ff ff       	call   c0015858 <sendKeyToTerminal(unsigned char)>
c0015cdc:	83 c4 10             	add    esp,0x10
c0015cdf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ce2:	83 f0 01             	xor    eax,0x1
c0015ce5:	84 c0                	test   al,al
c0015ce7:	74 4f                	je     c0015d38 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ce9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cec:	83 f0 01             	xor    eax,0x1
c0015cef:	84 c0                	test   al,al
c0015cf1:	74 45                	je     c0015d38 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cf3:	a0 c0 f2 02 c0       	mov    al,ds:0xc002f2c0
c0015cf8:	84 c0                	test   al,al
c0015cfa:	74 3c                	je     c0015d38 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cff:	66 83 f8 3f          	cmp    ax,0x3f
c0015d03:	76 33                	jbe    c0015d38 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d08:	66 83 f8 7f          	cmp    ax,0x7f
c0015d0c:	77 2a                	ja     c0015d38 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d11:	88 c2                	mov    dl,al
c0015d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d16:	66 83 f8 5f          	cmp    ax,0x5f
c0015d1a:	76 04                	jbe    c0015d20 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d1c:	b0 20                	mov    al,0x20
c0015d1e:	eb 02                	jmp    c0015d22 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d20:	b0 00                	mov    al,0x0
c0015d22:	29 c2                	sub    edx,eax
c0015d24:	88 d0                	mov    al,dl
c0015d26:	83 e8 40             	sub    eax,0x40
c0015d29:	0f b6 c0             	movzx  eax,al
c0015d2c:	83 ec 0c             	sub    esp,0xc
c0015d2f:	50                   	push   eax
c0015d30:	e8 23 fb ff ff       	call   c0015858 <sendKeyToTerminal(unsigned char)>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d3b:	66 3d 00 03          	cmp    ax,0x300
c0015d3f:	75 0f                	jne    c0015d50 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d41:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d44:	83 f0 01             	xor    eax,0x1
c0015d47:	84 c0                	test   al,al
c0015d49:	74 05                	je     c0015d50 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d4b:	e8 4c aa ff ff       	call   c001079c <doTerminalCycle()>
c0015d50:	90                   	nop
c0015d51:	c9                   	leave  
c0015d52:	c3                   	ret    

c0015d53 <clearInternalKeybuffer(VgaText*)>:
c0015d53:	55                   	push   ebp
c0015d54:	89 e5                	mov    ebp,esp
c0015d56:	83 ec 08             	sub    esp,0x8
c0015d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d5c:	05 98 01 00 00       	add    eax,0x198
c0015d61:	83 ec 0c             	sub    esp,0xc
c0015d64:	50                   	push   eax
c0015d65:	e8 02 aa fe ff       	call   c000076c <strlen>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d70:	81 c2 98 01 00 00    	add    edx,0x198
c0015d76:	83 ec 04             	sub    esp,0x4
c0015d79:	50                   	push   eax
c0015d7a:	6a 00                	push   0x0
c0015d7c:	52                   	push   edx
c0015d7d:	e8 ce a9 fe ff       	call   c0000750 <memset>
c0015d82:	83 c4 10             	add    esp,0x10
c0015d85:	90                   	nop
c0015d86:	c9                   	leave  
c0015d87:	c3                   	ret    

c0015d88 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d88:	55                   	push   ebp
c0015d89:	89 e5                	mov    ebp,esp
c0015d8b:	83 ec 18             	sub    esp,0x18
c0015d8e:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0015d93:	85 c0                	test   eax,eax
c0015d95:	74 2a                	je     c0015dc1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d97:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d9d:	8b 0d a8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1a8
c0015da3:	83 ec 04             	sub    esp,0x4
c0015da6:	68 c0 f1 02 c0       	push   0xc002f1c0
c0015dab:	83 ec 08             	sub    esp,0x8
c0015dae:	89 e2                	mov    edx,esp
c0015db0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015db3:	89 02                	mov    DWORD PTR [edx],eax
c0015db5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015db8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015dbc:	ff d1                	call   ecx
c0015dbe:	83 c4 10             	add    esp,0x10
c0015dc1:	83 ec 0c             	sub    esp,0xc
c0015dc4:	68 9b ba 02 c0       	push   0xc002ba9b
c0015dc9:	e8 05 cb ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0015dce:	83 c4 10             	add    esp,0x10
c0015dd1:	fb                   	sti    
c0015dd2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015dd9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ddd:	0f 84 a1 00 00 00    	je     c0015e84 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de6:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015dec:	84 c0                	test   al,al
c0015dee:	75 28                	jne    c0015e18 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015df0:	fa                   	cli    
c0015df1:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015df6:	40                   	inc    eax
c0015df7:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015dfc:	e8 bb 82 00 00       	call   c001e0bc <schedule()>
c0015e01:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015e06:	48                   	dec    eax
c0015e07:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015e0c:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015e11:	85 c0                	test   eax,eax
c0015e13:	75 ce                	jne    c0015de3 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e15:	fb                   	sti    
c0015e16:	eb cb                	jmp    c0015de3 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e1b:	8d 50 01             	lea    edx,[eax+0x1]
c0015e1e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e24:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e2a:	88 10                	mov    BYTE PTR [eax],dl
c0015e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2f:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e35:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3b:	05 98 01 00 00       	add    eax,0x198
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	50                   	push   eax
c0015e44:	e8 23 a9 fe ff       	call   c000076c <strlen>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e4f:	81 c2 98 01 00 00    	add    edx,0x198
c0015e55:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e5b:	81 c2 98 01 00 00    	add    edx,0x198
c0015e61:	83 ec 04             	sub    esp,0x4
c0015e64:	50                   	push   eax
c0015e65:	51                   	push   ecx
c0015e66:	52                   	push   edx
c0015e67:	e8 1c a8 fe ff       	call   c0000688 <memmove>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e75:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e79:	0f 85 5a ff ff ff    	jne    c0015dd9 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015e7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e82:	eb 03                	jmp    c0015e87 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015e84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e87:	c9                   	leave  
c0015e88:	c3                   	ret    
c0015e89:	90                   	nop

c0015e8a <Keyboard::Keyboard(char const*)>:
c0015e8a:	83 ec 0c             	sub    esp,0xc
c0015e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e91:	83 ec 08             	sub    esp,0x8
c0015e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e98:	50                   	push   eax
c0015e99:	e8 72 e0 ff ff       	call   c0013f10 <Device::Device(char const*)>
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0015ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eaa:	89 10                	mov    DWORD PTR [eax],edx
c0015eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eb0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015eba:	c6 05 a4 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1a4,0x1
c0015ec1:	90                   	nop
c0015ec2:	83 c4 0c             	add    esp,0xc
c0015ec5:	c3                   	ret    

c0015ec6 <Keyboard::~Keyboard()>:
c0015ec6:	83 ec 0c             	sub    esp,0xc
c0015ec9:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0015ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed2:	89 10                	mov    DWORD PTR [eax],edx
c0015ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	50                   	push   eax
c0015edc:	e8 f9 dc ff ff       	call   c0013bda <Device::~Device()>
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	90                   	nop
c0015ee5:	83 c4 0c             	add    esp,0xc
c0015ee8:	c3                   	ret    
c0015ee9:	90                   	nop

c0015eea <Keyboard::~Keyboard()>:
c0015eea:	83 ec 0c             	sub    esp,0xc
c0015eed:	83 ec 0c             	sub    esp,0xc
c0015ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ef4:	e8 cd ff ff ff       	call   c0015ec6 <Keyboard::~Keyboard()>
c0015ef9:	83 c4 10             	add    esp,0x10
c0015efc:	83 ec 08             	sub    esp,0x8
c0015eff:	68 5c 01 00 00       	push   0x15c
c0015f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f08:	e8 e6 c8 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0015f0d:	83 c4 10             	add    esp,0x10
c0015f10:	83 c4 0c             	add    esp,0xc
c0015f13:	c3                   	ret    

c0015f14 <LogicalDisk::close(int, int, void*)>:
c0015f14:	83 c8 ff             	or     eax,0xffffffff
c0015f17:	c3                   	ret    

c0015f18 <LogicalDisk::~LogicalDisk()>:
c0015f18:	83 ec 0c             	sub    esp,0xc
c0015f1b:	ba 6c bb 02 c0       	mov    edx,0xc002bb6c
c0015f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f24:	89 10                	mov    DWORD PTR [eax],edx
c0015f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2a:	83 ec 0c             	sub    esp,0xc
c0015f2d:	50                   	push   eax
c0015f2e:	e8 a7 dc ff ff       	call   c0013bda <Device::~Device()>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	90                   	nop
c0015f37:	83 c4 0c             	add    esp,0xc
c0015f3a:	c3                   	ret    
c0015f3b:	90                   	nop

c0015f3c <LogicalDisk::~LogicalDisk()>:
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	83 ec 0c             	sub    esp,0xc
c0015f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f46:	e8 cd ff ff ff       	call   c0015f18 <LogicalDisk::~LogicalDisk()>
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	83 ec 08             	sub    esp,0x8
c0015f51:	68 74 01 00 00       	push   0x174
c0015f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f5a:	e8 94 c8 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0015f5f:	83 c4 10             	add    esp,0x10
c0015f62:	83 c4 0c             	add    esp,0xc
c0015f65:	c3                   	ret    

c0015f66 <LogicalDisk::open(int, int, void*)>:
c0015f66:	83 ec 18             	sub    esp,0x18
c0015f69:	68 e8 ba 02 c0       	push   0xc002bae8
c0015f6e:	e8 96 43 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0015f73:	83 c8 ff             	or     eax,0xffffffff
c0015f76:	83 c4 1c             	add    esp,0x1c
c0015f79:	c3                   	ret    

c0015f7a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f7a:	53                   	push   ebx
c0015f7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f87:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f8d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f93:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f99:	77 10                	ja     c0015fab <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f9b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015fa1:	89 d3                	mov    ebx,edx
c0015fa3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015fa9:	72 05                	jb     c0015fb0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015fab:	83 c8 ff             	or     eax,0xffffffff
c0015fae:	89 c2                	mov    edx,eax
c0015fb0:	5b                   	pop    ebx
c0015fb1:	c3                   	ret    

c0015fb2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015fb2:	56                   	push   esi
c0015fb3:	83 c8 ff             	or     eax,0xffffffff
c0015fb6:	53                   	push   ebx
c0015fb7:	89 c2                	mov    edx,eax
c0015fb9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fbd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fc5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fcb:	77 27                	ja     c0015ff4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fcd:	89 d8                	mov    eax,ebx
c0015fcf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015fd5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015fdb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fe0:	89 c2                	mov    edx,eax
c0015fe2:	73 10                	jae    c0015ff4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fe4:	89 c8                	mov    eax,ecx
c0015fe6:	89 da                	mov    edx,ebx
c0015fe8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015fee:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ff4:	5b                   	pop    ebx
c0015ff5:	5e                   	pop    esi
c0015ff6:	c3                   	ret    
c0015ff7:	90                   	nop

c0015ff8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015ff8:	83 ec 1c             	sub    esp,0x1c
c0015ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016003:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001600b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001600f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016012:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016016:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001601a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001601e:	83 ec 08             	sub    esp,0x8
c0016021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016025:	50                   	push   eax
c0016026:	e8 e5 de ff ff       	call   c0013f10 <Device::Device(char const*)>
c001602b:	83 c4 10             	add    esp,0x10
c001602e:	ba 6c bb 02 c0       	mov    edx,0xc002bb6c
c0016033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016037:	89 10                	mov    DWORD PTR [eax],edx
c0016039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001603d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016048:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001604f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016053:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001605d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016069:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001606f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016075:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001607c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016080:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016086:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001608c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016090:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016094:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001609a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001609e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00160a8:	90                   	nop
c00160a9:	83 c4 1c             	add    esp,0x1c
c00160ac:	c3                   	ret    
c00160ad:	90                   	nop

c00160ae <LogicalDisk::assignDriveLetter()>:
c00160ae:	55                   	push   ebp
c00160af:	57                   	push   edi
c00160b0:	56                   	push   esi
c00160b1:	53                   	push   ebx
c00160b2:	83 ec 14             	sub    esp,0x14
c00160b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160b9:	8b 3d e0 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f5e0
c00160bf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160c9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160cf:	8b 3d e4 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f5e4
c00160d5:	3c 01                	cmp    al,0x1
c00160d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00160db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00160df:	19 c0                	sbb    eax,eax
c00160e1:	83 e0 02             	and    eax,0x2
c00160e4:	83 c0 41             	add    eax,0x41
c00160e7:	0f be e8             	movsx  ebp,al
c00160ea:	3c 43                	cmp    al,0x43
c00160ec:	75 10                	jne    c00160fe <LogicalDisk::assignDriveLetter()+0x50>
c00160ee:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00160f5:	75 5d                	jne    c0016154 <LogicalDisk::assignDriveLetter()+0xa6>
c00160f7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160fc:	75 56                	jne    c0016154 <LogicalDisk::assignDriveLetter()+0xa6>
c00160fe:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016101:	ba 01 00 00 00       	mov    edx,0x1
c0016106:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001610a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001610e:	d3 e2                	shl    edx,cl
c0016110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016114:	89 d7                	mov    edi,edx
c0016116:	89 d6                	mov    esi,edx
c0016118:	c1 ff 1f             	sar    edi,0x1f
c001611b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001611f:	21 f9                	and    ecx,edi
c0016121:	09 d1                	or     ecx,edx
c0016123:	75 2f                	jne    c0016154 <LogicalDisk::assignDriveLetter()+0xa6>
c0016125:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016129:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001612d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016133:	09 f2                	or     edx,esi
c0016135:	89 15 e0 f5 02 c0    	mov    DWORD PTR ds:0xc002f5e0,edx
c001613b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001613f:	09 fa                	or     edx,edi
c0016141:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016145:	89 15 e4 f5 02 c0    	mov    DWORD PTR ds:0xc002f5e4,edx
c001614b:	89 1c bd 00 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0a00],ebx
c0016152:	eb 08                	jmp    c001615c <LogicalDisk::assignDriveLetter()+0xae>
c0016154:	45                   	inc    ebp
c0016155:	40                   	inc    eax
c0016156:	3c 5b                	cmp    al,0x5b
c0016158:	75 90                	jne    c00160ea <LogicalDisk::assignDriveLetter()+0x3c>
c001615a:	31 c0                	xor    eax,eax
c001615c:	83 c4 14             	add    esp,0x14
c001615f:	5b                   	pop    ebx
c0016160:	5e                   	pop    esi
c0016161:	5f                   	pop    edi
c0016162:	5d                   	pop    ebp
c0016163:	c3                   	ret    

c0016164 <LogicalDisk::mount()>:
c0016164:	56                   	push   esi
c0016165:	53                   	push   ebx
c0016166:	50                   	push   eax
c0016167:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001616b:	8b 1d 74 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f174
c0016171:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001617b:	85 db                	test   ebx,ebx
c001617d:	74 50                	je     c00161cf <LogicalDisk::mount()+0x6b>
c001617f:	50                   	push   eax
c0016180:	50                   	push   eax
c0016181:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c0016187:	68 0c bb 02 c0       	push   0xc002bb0c
c001618c:	e8 42 c7 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0016191:	83 c4 0c             	add    esp,0xc
c0016194:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001619b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001619d:	83 e8 41             	sub    eax,0x41
c00161a0:	50                   	push   eax
c00161a1:	56                   	push   esi
c00161a2:	53                   	push   ebx
c00161a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	84 c0                	test   al,al
c00161ab:	74 08                	je     c00161b5 <LogicalDisk::mount()+0x51>
c00161ad:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00161b3:	eb 1c                	jmp    c00161d1 <LogicalDisk::mount()+0x6d>
c00161b5:	51                   	push   ecx
c00161b6:	51                   	push   ecx
c00161b7:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c00161bd:	68 27 bb 02 c0       	push   0xc002bb27
c00161c2:	e8 0c c7 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00161c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	eb ac                	jmp    c001617b <LogicalDisk::mount()+0x17>
c00161cf:	31 c0                	xor    eax,eax
c00161d1:	5a                   	pop    edx
c00161d2:	5b                   	pop    ebx
c00161d3:	5e                   	pop    esi
c00161d4:	c3                   	ret    
c00161d5:	90                   	nop

c00161d6 <LogicalDisk::unmount()>:
c00161d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161da:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161e4:	c3                   	ret    
c00161e5:	90                   	nop

c00161e6 <LogicalDisk::eject()>:
c00161e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00161f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00161f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161f6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00161f9:	90                   	nop

c00161fa <LogicalDisk::unassignDriveLetter()>:
c00161fa:	57                   	push   edi
c00161fb:	56                   	push   esi
c00161fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016200:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016207:	84 c9                	test   cl,cl
c0016209:	75 0f                	jne    c001621a <LogicalDisk::unassignDriveLetter()+0x20>
c001620b:	c7 44 24 0c 42 bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb42
c0016213:	5e                   	pop    esi
c0016214:	5f                   	pop    edi
c0016215:	e9 ef 40 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c001621a:	83 e9 41             	sub    ecx,0x41
c001621d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016224:	b8 01 00 00 00       	mov    eax,0x1
c0016229:	c7 04 8d 00 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0a00],0x0
c0016234:	d3 e0                	shl    eax,cl
c0016236:	89 c7                	mov    edi,eax
c0016238:	f7 d0                	not    eax
c001623a:	c1 ff 1f             	sar    edi,0x1f
c001623d:	21 05 e0 f5 02 c0    	and    DWORD PTR ds:0xc002f5e0,eax
c0016243:	89 fe                	mov    esi,edi
c0016245:	f7 d6                	not    esi
c0016247:	21 35 e4 f5 02 c0    	and    DWORD PTR ds:0xc002f5e4,esi
c001624d:	5e                   	pop    esi
c001624e:	5f                   	pop    edi
c001624f:	c3                   	ret    

c0016250 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016250:	57                   	push   edi
c0016251:	56                   	push   esi
c0016252:	53                   	push   ebx
c0016253:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016257:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001625b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001625f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016263:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016269:	77 41                	ja     c00162ac <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001626b:	99                   	cdq    
c001626c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016272:	01 c8                	add    eax,ecx
c0016274:	11 da                	adc    edx,ebx
c0016276:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001627c:	19 d7                	sbb    edi,edx
c001627e:	72 33                	jb     c00162b3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016280:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016286:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001628c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016290:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016294:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001629a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162a4:	5b                   	pop    ebx
c00162a5:	5e                   	pop    esi
c00162a6:	5f                   	pop    edi
c00162a7:	e9 ec 0a 00 00       	jmp    c0016d98 <VCache::read(unsigned long long, int, void*)>
c00162ac:	b8 05 00 00 00       	mov    eax,0x5
c00162b1:	eb 05                	jmp    c00162b8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00162b3:	b8 07 00 00 00       	mov    eax,0x7
c00162b8:	5b                   	pop    ebx
c00162b9:	5e                   	pop    esi
c00162ba:	5f                   	pop    edi
c00162bb:	c3                   	ret    

c00162bc <LogicalDisk::write(unsigned long long, int, void*)>:
c00162bc:	57                   	push   edi
c00162bd:	56                   	push   esi
c00162be:	53                   	push   ebx
c00162bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162c7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162d5:	77 41                	ja     c0016318 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00162d7:	99                   	cdq    
c00162d8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162de:	01 c8                	add    eax,ecx
c00162e0:	11 da                	adc    edx,ebx
c00162e2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162e8:	19 d7                	sbb    edi,edx
c00162ea:	72 33                	jb     c001631f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00162ec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162f2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162fc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016300:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016306:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001630c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016310:	5b                   	pop    ebx
c0016311:	5e                   	pop    esi
c0016312:	5f                   	pop    edi
c0016313:	e9 96 09 00 00       	jmp    c0016cae <VCache::write(unsigned long long, int, void*)>
c0016318:	b8 05 00 00 00       	mov    eax,0x5
c001631d:	eb 05                	jmp    c0016324 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001631f:	b8 07 00 00 00       	mov    eax,0x7
c0016324:	5b                   	pop    ebx
c0016325:	5e                   	pop    esi
c0016326:	5f                   	pop    edi
c0016327:	c3                   	ret    

c0016328 <Mouse::Mouse(char const*)>:
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632f:	83 ec 08             	sub    esp,0x8
c0016332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016336:	50                   	push   eax
c0016337:	e8 d4 db ff ff       	call   c0013f10 <Device::Device(char const*)>
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	ba 98 bb 02 c0       	mov    edx,0xc002bb98
c0016344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016348:	89 10                	mov    DWORD PTR [eax],edx
c001634a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001634e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016358:	90                   	nop
c0016359:	83 c4 0c             	add    esp,0xc
c001635c:	c3                   	ret    
c001635d:	90                   	nop

c001635e <Mouse::~Mouse()>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ba 98 bb 02 c0       	mov    edx,0xc002bb98
c0016366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636a:	89 10                	mov    DWORD PTR [eax],edx
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	50                   	push   eax
c0016374:	e8 61 d8 ff ff       	call   c0013bda <Device::~Device()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <Mouse::~Mouse()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cd ff ff ff       	call   c001635e <Mouse::~Mouse()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 08             	sub    esp,0x8
c0016397:	68 58 01 00 00       	push   0x158
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 4e c4 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163ac:	55                   	push   ebp
c00163ad:	57                   	push   edi
c00163ae:	56                   	push   esi
c00163af:	53                   	push   ebx
c00163b0:	81 ec 20 01 00 00    	sub    esp,0x120
c00163b6:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00163bd:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00163c4:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00163cb:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00163d2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00163d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00163de:	56                   	push   esi
c00163df:	68 bc bb 02 c0       	push   0xc002bbbc
c00163e4:	e8 ea c4 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00163e9:	58                   	pop    eax
c00163ea:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163f1:	e8 16 dc ff ff       	call   c001400c <Device::getName()>
c00163f6:	5a                   	pop    edx
c00163f7:	59                   	pop    ecx
c00163f8:	50                   	push   eax
c00163f9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00163fd:	53                   	push   ebx
c00163fe:	e8 09 a4 fe ff       	call   c000080c <strcpy>
c0016403:	5d                   	pop    ebp
c0016404:	58                   	pop    eax
c0016405:	68 ed bb 02 c0       	push   0xc002bbed
c001640a:	53                   	push   ebx
c001640b:	e8 3c a5 fe ff       	call   c000094c <strcat>
c0016410:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016417:	e8 70 94 ff ff       	call   c000f88c <malloc>
c001641c:	83 c4 0c             	add    esp,0xc
c001641f:	89 c5                	mov    ebp,eax
c0016421:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016429:	57                   	push   edi
c001642a:	56                   	push   esi
c001642b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016432:	53                   	push   ebx
c0016433:	50                   	push   eax
c0016434:	e8 bf fb ff ff       	call   c0015ff8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016439:	83 c4 14             	add    esp,0x14
c001643c:	55                   	push   ebp
c001643d:	e8 6c fc ff ff       	call   c00160ae <LogicalDisk::assignDriveLetter()>
c0016442:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016445:	0f be d8             	movsx  ebx,al
c0016448:	e8 17 fd ff ff       	call   c0016164 <LogicalDisk::mount()>
c001644d:	58                   	pop    eax
c001644e:	5a                   	pop    edx
c001644f:	55                   	push   ebp
c0016450:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016457:	e8 b0 d8 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c001645c:	59                   	pop    ecx
c001645d:	5e                   	pop    esi
c001645e:	53                   	push   ebx
c001645f:	68 f8 bb 02 c0       	push   0xc002bbf8
c0016464:	e8 6a c4 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0016469:	81 c4 2c 01 00 00    	add    esp,0x12c
c001646f:	5b                   	pop    ebx
c0016470:	5e                   	pop    esi
c0016471:	5f                   	pop    edi
c0016472:	5d                   	pop    ebp
c0016473:	c3                   	ret    

c0016474 <createPartitionsForDisk(PhysicalDisk*)>:
c0016474:	55                   	push   ebp
c0016475:	57                   	push   edi
c0016476:	56                   	push   esi
c0016477:	53                   	push   ebx
c0016478:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001647e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016485:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001648b:	3d 00 02 00 00       	cmp    eax,0x200
c0016490:	74 27                	je     c00164b9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016492:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016498:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001649e:	83 ec 10             	sub    esp,0x10
c00164a1:	0f a4 f7 0a          	shld   edi,esi,0xa
c00164a5:	99                   	cdq    
c00164a6:	c1 e6 0a             	shl    esi,0xa
c00164a9:	52                   	push   edx
c00164aa:	89 fd                	mov    ebp,edi
c00164ac:	50                   	push   eax
c00164ad:	55                   	push   ebp
c00164ae:	56                   	push   esi
c00164af:	e8 50 0d 01 00       	call   c0027204 <__udivdi3>
c00164b4:	e9 b1 00 00 00       	jmp    c001656a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164b9:	83 ec 0c             	sub    esp,0xc
c00164bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164be:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00164c2:	56                   	push   esi
c00164c3:	6a 01                	push   0x1
c00164c5:	6a 00                	push   0x0
c00164c7:	6a 00                	push   0x0
c00164c9:	53                   	push   ebx
c00164ca:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00164cd:	83 c4 20             	add    esp,0x20
c00164d0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00164d8:	75 0a                	jne    c00164e4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00164da:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00164e2:	74 2c                	je     c0016510 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00164e4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164ea:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164f0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164f6:	83 ec 10             	sub    esp,0x10
c00164f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164fd:	89 f7                	mov    edi,esi
c00164ff:	c1 e0 0a             	shl    eax,0xa
c0016502:	c1 ff 1f             	sar    edi,0x1f
c0016505:	57                   	push   edi
c0016506:	56                   	push   esi
c0016507:	52                   	push   edx
c0016508:	50                   	push   eax
c0016509:	e8 f6 0c 01 00       	call   c0027204 <__udivdi3>
c001650e:	eb 5a                	jmp    c001656a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016510:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016517:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001651e:	83 e1 7f             	and    ecx,0x7f
c0016521:	83 e0 7f             	and    eax,0x7f
c0016524:	01 c1                	add    ecx,eax
c0016526:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001652d:	83 e0 7f             	and    eax,0x7f
c0016530:	01 c1                	add    ecx,eax
c0016532:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016539:	83 e0 7f             	and    eax,0x7f
c001653c:	00 c1                	add    cl,al
c001653e:	74 41                	je     c0016581 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016540:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016546:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001654c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016552:	83 ec 10             	sub    esp,0x10
c0016555:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016559:	89 f7                	mov    edi,esi
c001655b:	c1 e0 0a             	shl    eax,0xa
c001655e:	c1 ff 1f             	sar    edi,0x1f
c0016561:	57                   	push   edi
c0016562:	56                   	push   esi
c0016563:	52                   	push   edx
c0016564:	50                   	push   eax
c0016565:	e8 9a 0c 01 00       	call   c0027204 <__udivdi3>
c001656a:	83 c4 14             	add    esp,0x14
c001656d:	52                   	push   edx
c001656e:	50                   	push   eax
c001656f:	6a 00                	push   0x0
c0016571:	6a 00                	push   0x0
c0016573:	53                   	push   ebx
c0016574:	e8 33 fe ff ff       	call   c00163ac <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016579:	83 c4 20             	add    esp,0x20
c001657c:	e9 79 01 00 00       	jmp    c00166fa <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016581:	89 f0                	mov    eax,esi
c0016583:	31 f6                	xor    esi,esi
c0016585:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001658c:	75 02                	jne    c0016590 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001658e:	89 f1                	mov    ecx,esi
c0016590:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016597:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001659e:	c1 e2 08             	shl    edx,0x8
c00165a1:	c1 e7 10             	shl    edi,0x10
c00165a4:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00165ac:	09 fa                	or     edx,edi
c00165ae:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00165b6:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00165bd:	83 c0 10             	add    eax,0x10
c00165c0:	09 fa                	or     edx,edi
c00165c2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00165c9:	c1 e7 18             	shl    edi,0x18
c00165cc:	09 fa                	or     edx,edi
c00165ce:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00165d5:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00165d9:	c1 e7 10             	shl    edi,0x10
c00165dc:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00165e3:	c1 e2 08             	shl    edx,0x8
c00165e6:	09 fa                	or     edx,edi
c00165e8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00165ef:	09 fa                	or     edx,edi
c00165f1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00165f8:	c1 e7 18             	shl    edi,0x18
c00165fb:	09 fa                	or     edx,edi
c00165fd:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016601:	46                   	inc    esi
c0016602:	83 fe 04             	cmp    esi,0x4
c0016605:	0f 85 7a ff ff ff    	jne    c0016585 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001660b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001660f:	83 f0 01             	xor    eax,0x1
c0016612:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016616:	75 57                	jne    c001666f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001661c:	83 f0 01             	xor    eax,0x1
c001661f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016623:	75 4a                	jne    c001666f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016625:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016629:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016631:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016639:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001663f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016645:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001664b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001664f:	89 f7                	mov    edi,esi
c0016651:	c1 e0 0a             	shl    eax,0xa
c0016654:	c1 ff 1f             	sar    edi,0x1f
c0016657:	57                   	push   edi
c0016658:	56                   	push   esi
c0016659:	52                   	push   edx
c001665a:	50                   	push   eax
c001665b:	e8 a4 0b 01 00       	call   c0027204 <__udivdi3>
c0016660:	83 c4 10             	add    esp,0x10
c0016663:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016667:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001666b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001666f:	84 c9                	test   cl,cl
c0016671:	74 53                	je     c00166c6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016673:	0f b6 c9             	movzx  ecx,cl
c0016676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001667a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001667e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016682:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016686:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001668a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001668e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016692:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016696:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001669a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166a6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00166aa:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00166ae:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00166b2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00166b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166be:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00166c2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00166c6:	31 ed                	xor    ebp,ebp
c00166c8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00166cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00166d0:	89 f8                	mov    eax,edi
c00166d2:	09 f0                	or     eax,esi
c00166d4:	74 1e                	je     c00166f4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00166da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00166de:	89 d1                	mov    ecx,edx
c00166e0:	09 c1                	or     ecx,eax
c00166e2:	74 10                	je     c00166f4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	57                   	push   edi
c00166e8:	56                   	push   esi
c00166e9:	52                   	push   edx
c00166ea:	50                   	push   eax
c00166eb:	53                   	push   ebx
c00166ec:	e8 bb fc ff ff       	call   c00163ac <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00166f1:	83 c4 20             	add    esp,0x20
c00166f4:	45                   	inc    ebp
c00166f5:	83 fd 04             	cmp    ebp,0x4
c00166f8:	75 ce                	jne    c00166c8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00166fa:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016700:	5b                   	pop    ebx
c0016701:	5e                   	pop    esi
c0016702:	5f                   	pop    edi
c0016703:	5d                   	pop    ebp
c0016704:	c3                   	ret    
c0016705:	90                   	nop

c0016706 <Serial::Serial(char const*)>:
c0016706:	83 ec 0c             	sub    esp,0xc
c0016709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001670d:	83 ec 08             	sub    esp,0x8
c0016710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016714:	50                   	push   eax
c0016715:	e8 f6 d7 ff ff       	call   c0013f10 <Device::Device(char const*)>
c001671a:	83 c4 10             	add    esp,0x10
c001671d:	ba 24 bc 02 c0       	mov    edx,0xc002bc24
c0016722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016726:	89 10                	mov    DWORD PTR [eax],edx
c0016728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016736:	90                   	nop
c0016737:	83 c4 0c             	add    esp,0xc
c001673a:	c3                   	ret    
c001673b:	90                   	nop

c001673c <Serial::~Serial()>:
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	ba 24 bc 02 c0       	mov    edx,0xc002bc24
c0016744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016748:	89 10                	mov    DWORD PTR [eax],edx
c001674a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674e:	83 ec 0c             	sub    esp,0xc
c0016751:	50                   	push   eax
c0016752:	e8 83 d4 ff ff       	call   c0013bda <Device::~Device()>
c0016757:	83 c4 10             	add    esp,0x10
c001675a:	90                   	nop
c001675b:	83 c4 0c             	add    esp,0xc
c001675e:	c3                   	ret    
c001675f:	90                   	nop

c0016760 <Serial::~Serial()>:
c0016760:	83 ec 0c             	sub    esp,0xc
c0016763:	83 ec 0c             	sub    esp,0xc
c0016766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001676a:	e8 cd ff ff ff       	call   c001673c <Serial::~Serial()>
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	83 ec 08             	sub    esp,0x8
c0016775:	68 58 01 00 00       	push   0x158
c001677a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001677e:	e8 70 c0 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	83 c4 0c             	add    esp,0xc
c0016789:	c3                   	ret    

c001678a <Timer::Timer(char const*)>:
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016791:	83 ec 08             	sub    esp,0x8
c0016794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016798:	50                   	push   eax
c0016799:	e8 72 d7 ff ff       	call   c0013f10 <Device::Device(char const*)>
c001679e:	83 c4 10             	add    esp,0x10
c00167a1:	ba 68 bc 02 c0       	mov    edx,0xc002bc68
c00167a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167aa:	89 10                	mov    DWORD PTR [eax],edx
c00167ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b0:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00167ba:	90                   	nop
c00167bb:	83 c4 0c             	add    esp,0xc
c00167be:	c3                   	ret    
c00167bf:	90                   	nop

c00167c0 <Timer::~Timer()>:
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	ba 68 bc 02 c0       	mov    edx,0xc002bc68
c00167c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167cc:	89 10                	mov    DWORD PTR [eax],edx
c00167ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d2:	83 ec 0c             	sub    esp,0xc
c00167d5:	50                   	push   eax
c00167d6:	e8 ff d3 ff ff       	call   c0013bda <Device::~Device()>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	90                   	nop
c00167df:	83 c4 0c             	add    esp,0xc
c00167e2:	c3                   	ret    
c00167e3:	90                   	nop

c00167e4 <Timer::~Timer()>:
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	83 ec 0c             	sub    esp,0xc
c00167ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ee:	e8 cd ff ff ff       	call   c00167c0 <Timer::~Timer()>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	83 ec 08             	sub    esp,0x8
c00167f9:	68 5c 01 00 00       	push   0x15c
c00167fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016802:	e8 ec bf ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0016807:	83 c4 10             	add    esp,0x10
c001680a:	83 c4 0c             	add    esp,0xc
c001680d:	c3                   	ret    

c001680e <Timer::read()>:
c001680e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016812:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016818:	c3                   	ret    

c0016819 <timerHandler(unsigned long long)>:
c0016819:	55                   	push   ebp
c001681a:	57                   	push   edi
c001681b:	56                   	push   esi
c001681c:	53                   	push   ebx
c001681d:	83 ec 0c             	sub    esp,0xc
c0016820:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016824:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016828:	01 35 70 f6 02 c0    	add    DWORD PTR ds:0xc002f670,esi
c001682e:	11 3d 74 f6 02 c0    	adc    DWORD PTR ds:0xc002f674,edi
c0016834:	80 3d 0d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f00d,0x0
c001683b:	0f 84 42 01 00 00    	je     c0016983 <timerHandler(unsigned long long)+0x16a>
c0016841:	fa                   	cli    
c0016842:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c0016851:	68 38 25 03 c0       	push   0xc0032538
c0016856:	e8 2f 2a 01 00       	call   c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	84 c0                	test   al,al
c0016860:	0f 85 a2 00 00 00    	jne    c0016908 <timerHandler(unsigned long long)+0xef>
c0016866:	83 ec 0c             	sub    esp,0xc
c0016869:	68 38 25 03 c0       	push   0xc0032538
c001686e:	e8 33 2a 01 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	89 c3                	mov    ebx,eax
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	68 38 25 03 c0       	push   0xc0032538
c0016880:	e8 21 2a 01 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016885:	c7 04 24 38 25 03 c0 	mov    DWORD PTR [esp],0xc0032538
c001688c:	89 c5                	mov    ebp,eax
c001688e:	e8 1b 2a 01 00       	call   c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016893:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016896:	83 c4 10             	add    esp,0x10
c0016899:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001689c:	39 15 70 f6 02 c0    	cmp    DWORD PTR ds:0xc002f670,edx
c00168a2:	a1 74 f6 02 c0       	mov    eax,ds:0xc002f674
c00168a7:	19 c8                	sbb    eax,ecx
c00168a9:	72 21                	jb     c00168cc <timerHandler(unsigned long long)+0xb3>
c00168ab:	83 ec 0c             	sub    esp,0xc
c00168ae:	55                   	push   ebp
c00168af:	e8 cc 7c 00 00       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c00168b4:	83 c4 10             	add    esp,0x10
c00168b7:	39 eb                	cmp    ebx,ebp
c00168b9:	75 21                	jne    c00168dc <timerHandler(unsigned long long)+0xc3>
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	68 38 25 03 c0       	push   0xc0032538
c00168c3:	e8 de 29 01 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c8:	89 c3                	mov    ebx,eax
c00168ca:	eb 0d                	jmp    c00168d9 <timerHandler(unsigned long long)+0xc0>
c00168cc:	50                   	push   eax
c00168cd:	50                   	push   eax
c00168ce:	55                   	push   ebp
c00168cf:	68 38 25 03 c0       	push   0xc0032538
c00168d4:	e8 83 2a 01 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	83 ec 0c             	sub    esp,0xc
c00168df:	68 38 25 03 c0       	push   0xc0032538
c00168e4:	e8 a1 29 01 00       	call   c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	84 c0                	test   al,al
c00168ee:	75 18                	jne    c0016908 <timerHandler(unsigned long long)+0xef>
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 38 25 03 c0       	push   0xc0032538
c00168f8:	e8 a9 29 01 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	39 d8                	cmp    eax,ebx
c0016902:	0f 85 70 ff ff ff    	jne    c0016878 <timerHandler(unsigned long long)+0x5f>
c0016908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001690d:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016911:	74 3d                	je     c0016950 <timerHandler(unsigned long long)+0x137>
c0016913:	80 3d 0c f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f00c,0x0
c001691a:	74 34                	je     c0016950 <timerHandler(unsigned long long)+0x137>
c001691c:	fa                   	cli    
c001691d:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0016923:	31 d2                	xor    edx,edx
c0016925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001692a:	89 f9                	mov    ecx,edi
c001692c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001692f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016934:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016937:	39 c6                	cmp    esi,eax
c0016939:	19 d1                	sbb    ecx,edx
c001693b:	72 05                	jb     c0016942 <timerHandler(unsigned long long)+0x129>
c001693d:	e8 7a 77 00 00       	call   c001e0bc <schedule()>
c0016942:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0016947:	48                   	dec    eax
c0016948:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001694d:	75 01                	jne    c0016950 <timerHandler(unsigned long long)+0x137>
c001694f:	fb                   	sti    
c0016950:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c0016955:	48                   	dec    eax
c0016956:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001695b:	75 18                	jne    c0016975 <timerHandler(unsigned long long)+0x15c>
c001695d:	83 3d 20 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032520,0x0
c0016964:	74 0f                	je     c0016975 <timerHandler(unsigned long long)+0x15c>
c0016966:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c0016970:	e8 47 77 00 00       	call   c001e0bc <schedule()>
c0016975:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001697a:	48                   	dec    eax
c001697b:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0016980:	75 01                	jne    c0016983 <timerHandler(unsigned long long)+0x16a>
c0016982:	fb                   	sti    
c0016983:	83 c4 0c             	add    esp,0xc
c0016986:	5b                   	pop    ebx
c0016987:	5e                   	pop    esi
c0016988:	5f                   	pop    edi
c0016989:	5d                   	pop    ebp
c001698a:	c3                   	ret    

c001698b <setupTimer(int)>:
c001698b:	57                   	push   edi
c001698c:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0016991:	56                   	push   esi
c0016992:	53                   	push   ebx
c0016993:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016997:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001699d:	83 ec 0c             	sub    esp,0xc
c00169a0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169a6:	e8 61 d6 ff ff       	call   c001400c <Device::getName()>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169b1:	0f 85 8d 00 00 00    	jne    c0016a44 <setupTimer(int)+0xb9>
c00169b7:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00169bc:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169c3:	74 7f                	je     c0016a44 <setupTimer(int)+0xb9>
c00169c5:	83 ec 0c             	sub    esp,0xc
c00169c8:	68 5c 01 00 00       	push   0x15c
c00169cd:	e8 ba 8e ff ff       	call   c000f88c <malloc>
c00169d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00169d5:	89 c3                	mov    ebx,eax
c00169d7:	e8 f8 03 01 00       	call   c0026dd4 <PIT::PIT()>
c00169dc:	59                   	pop    ecx
c00169dd:	5f                   	pop    edi
c00169de:	53                   	push   ebx
c00169df:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c00169e5:	e8 22 d3 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c00169ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169ec:	6a 00                	push   0x0
c00169ee:	6a 00                	push   0x0
c00169f0:	56                   	push   esi
c00169f1:	53                   	push   ebx
c00169f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169f5:	83 c4 14             	add    esp,0x14
c00169f8:	68 60 01 00 00       	push   0x160
c00169fd:	e8 8a 8e ff ff       	call   c000f88c <malloc>
c0016a02:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a05:	89 c7                	mov    edi,eax
c0016a07:	e8 78 02 01 00       	call   c0026c84 <APICTimer::APICTimer()>
c0016a0c:	6a 00                	push   0x0
c0016a0e:	6a 00                	push   0x0
c0016a10:	56                   	push   esi
c0016a11:	57                   	push   edi
c0016a12:	e8 6f 01 01 00       	call   c0026b86 <APICTimer::open(int, int, void*)>
c0016a17:	83 c4 20             	add    esp,0x20
c0016a1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a1c:	6a 00                	push   0x0
c0016a1e:	6a 00                	push   0x0
c0016a20:	6a 00                	push   0x0
c0016a22:	53                   	push   ebx
c0016a23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a26:	58                   	pop    eax
c0016a27:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0016a2c:	5a                   	pop    edx
c0016a2d:	57                   	push   edi
c0016a2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a34:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a3a:	e8 cd d2 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c0016a3f:	83 c4 10             	add    esp,0x10
c0016a42:	eb 33                	jmp    c0016a77 <setupTimer(int)+0xec>
c0016a44:	83 ec 0c             	sub    esp,0xc
c0016a47:	68 5c 01 00 00       	push   0x15c
c0016a4c:	e8 3b 8e ff ff       	call   c000f88c <malloc>
c0016a51:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a54:	89 c3                	mov    ebx,eax
c0016a56:	e8 79 03 01 00       	call   c0026dd4 <PIT::PIT()>
c0016a5b:	58                   	pop    eax
c0016a5c:	5a                   	pop    edx
c0016a5d:	53                   	push   ebx
c0016a5e:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c0016a64:	e8 a3 d2 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c0016a69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a6b:	6a 00                	push   0x0
c0016a6d:	6a 00                	push   0x0
c0016a6f:	56                   	push   esi
c0016a70:	53                   	push   ebx
c0016a71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a74:	83 c4 20             	add    esp,0x20
c0016a77:	89 d8                	mov    eax,ebx
c0016a79:	5b                   	pop    ebx
c0016a7a:	5e                   	pop    esi
c0016a7b:	5f                   	pop    edi
c0016a7c:	c3                   	ret    
c0016a7d:	90                   	nop

c0016a7e <VCache::VCache(PhysicalDisk*)>:
c0016a7e:	53                   	push   ebx
c0016a7f:	83 ec 18             	sub    esp,0x18
c0016a82:	ba 98 bc 02 c0       	mov    edx,0xc002bc98
c0016a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8b:	89 10                	mov    DWORD PTR [eax],edx
c0016a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a91:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016aae:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ac0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ade:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016ae5:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af8:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016afc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b00:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b08:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b0f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b17:	83 ec 0c             	sub    esp,0xc
c0016b1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b1e:	e8 69 8d ff ff       	call   c000f88c <malloc>
c0016b23:	83 c4 10             	add    esp,0x10
c0016b26:	89 c3                	mov    ebx,eax
c0016b28:	83 ec 0c             	sub    esp,0xc
c0016b2b:	53                   	push   ebx
c0016b2c:	e8 35 73 00 00       	call   c001de66 <Mutex::Mutex()>
c0016b31:	83 c4 10             	add    esp,0x10
c0016b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b38:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b4a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b55:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b5f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b66:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b76:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b79:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b80:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b88:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b8e:	05 00 01 00 00       	add    eax,0x100
c0016b93:	c1 e0 04             	shl    eax,0x4
c0016b96:	83 ec 0c             	sub    esp,0xc
c0016b99:	50                   	push   eax
c0016b9a:	e8 ed 8c ff ff       	call   c000f88c <malloc>
c0016b9f:	83 c4 10             	add    esp,0x10
c0016ba2:	89 c2                	mov    edx,eax
c0016ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016baf:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bba:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bc2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bc8:	c1 e0 07             	shl    eax,0x7
c0016bcb:	83 ec 0c             	sub    esp,0xc
c0016bce:	50                   	push   eax
c0016bcf:	e8 b8 8c ff ff       	call   c000f88c <malloc>
c0016bd4:	83 c4 10             	add    esp,0x10
c0016bd7:	89 c2                	mov    edx,eax
c0016bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdd:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016be0:	90                   	nop
c0016be1:	83 c4 18             	add    esp,0x18
c0016be4:	5b                   	pop    ebx
c0016be5:	c3                   	ret    

c0016be6 <VCache::invalidateReadBuffer()>:
c0016be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bea:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016bf0:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bf4:	c3                   	ret    
c0016bf5:	90                   	nop

c0016bf6 <VCache::writeWriteBuffer()>:
c0016bf6:	53                   	push   ebx
c0016bf7:	83 ec 14             	sub    esp,0x14
c0016bfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016bfe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c01:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c03:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c09:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c0f:	50                   	push   eax
c0016c10:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c13:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c1a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c21:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c25:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c2c:	83 c4 28             	add    esp,0x28
c0016c2f:	5b                   	pop    ebx
c0016c30:	c3                   	ret    
c0016c31:	90                   	nop

c0016c32 <VCache::~VCache()>:
c0016c32:	83 ec 0c             	sub    esp,0xc
c0016c35:	ba 98 bc 02 c0       	mov    edx,0xc002bc98
c0016c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3e:	89 10                	mov    DWORD PTR [eax],edx
c0016c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c44:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c47:	84 c0                	test   al,al
c0016c49:	74 0f                	je     c0016c5a <VCache::~VCache()+0x28>
c0016c4b:	83 ec 0c             	sub    esp,0xc
c0016c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c52:	e8 9f ff ff ff       	call   c0016bf6 <VCache::writeWriteBuffer()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c61:	83 ec 0c             	sub    esp,0xc
c0016c64:	50                   	push   eax
c0016c65:	e8 32 8c ff ff       	call   c000f89c <free>
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	50                   	push   eax
c0016c78:	e8 1f 8c ff ff       	call   c000f89c <free>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	90                   	nop
c0016c81:	83 c4 0c             	add    esp,0xc
c0016c84:	c3                   	ret    
c0016c85:	90                   	nop

c0016c86 <VCache::~VCache()>:
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	83 ec 0c             	sub    esp,0xc
c0016c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c90:	e8 9d ff ff ff       	call   c0016c32 <VCache::~VCache()>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	83 ec 08             	sub    esp,0x8
c0016c9b:	6a 44                	push   0x44
c0016c9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca1:	e8 4d bb ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	83 c4 0c             	add    esp,0xc
c0016cac:	c3                   	ret    
c0016cad:	90                   	nop

c0016cae <VCache::write(unsigned long long, int, void*)>:
c0016cae:	55                   	push   ebp
c0016caf:	57                   	push   edi
c0016cb0:	56                   	push   esi
c0016cb1:	53                   	push   ebx
c0016cb2:	83 ec 18             	sub    esp,0x18
c0016cb5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016cb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cbd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016cc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cc4:	e8 2b 77 00 00       	call   c001e3f4 <Semaphore::acquire()>
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016cd0:	74 0c                	je     c0016cde <VCache::write(unsigned long long, int, void*)+0x30>
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	53                   	push   ebx
c0016cd6:	e8 0b ff ff ff       	call   c0016be6 <VCache::invalidateReadBuffer()>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ce2:	74 5c                	je     c0016d40 <VCache::write(unsigned long long, int, void*)+0x92>
c0016ce4:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016ce7:	89 e8                	mov    eax,ebp
c0016ce9:	99                   	cdq    
c0016cea:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ced:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016cf0:	89 c1                	mov    ecx,eax
c0016cf2:	89 d0                	mov    eax,edx
c0016cf4:	31 f1                	xor    ecx,esi
c0016cf6:	31 f8                	xor    eax,edi
c0016cf8:	09 c1                	or     ecx,eax
c0016cfa:	75 38                	jne    c0016d34 <VCache::write(unsigned long long, int, void*)+0x86>
c0016cfc:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016d01:	75 31                	jne    c0016d34 <VCache::write(unsigned long long, int, void*)+0x86>
c0016d03:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d06:	89 ef                	mov    edi,ebp
c0016d08:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d0e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d12:	0f af f9             	imul   edi,ecx
c0016d15:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016d18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d1d:	40                   	inc    eax
c0016d1e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d21:	83 c0 80             	add    eax,0xffffff80
c0016d24:	75 5c                	jne    c0016d82 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d26:	83 ec 0c             	sub    esp,0xc
c0016d29:	53                   	push   ebx
c0016d2a:	e8 c7 fe ff ff       	call   c0016bf6 <VCache::writeWriteBuffer()>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	eb 4e                	jmp    c0016d82 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	53                   	push   ebx
c0016d38:	e8 b9 fe ff ff       	call   c0016bf6 <VCache::writeWriteBuffer()>
c0016d3d:	83 c4 10             	add    esp,0x10
c0016d40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d43:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016d48:	7f 22                	jg     c0016d6c <VCache::write(unsigned long long, int, void*)+0xbe>
c0016d4a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d4d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d54:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d58:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d5b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d5e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d64:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d6a:	eb 16                	jmp    c0016d82 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d6c:	83 ec 0c             	sub    esp,0xc
c0016d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d79:	57                   	push   edi
c0016d7a:	56                   	push   esi
c0016d7b:	50                   	push   eax
c0016d7c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d7f:	83 c4 20             	add    esp,0x20
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d88:	e8 a1 7d 00 00       	call   c001eb2e <Semaphore::release()>
c0016d8d:	83 c4 1c             	add    esp,0x1c
c0016d90:	31 c0                	xor    eax,eax
c0016d92:	5b                   	pop    ebx
c0016d93:	5e                   	pop    esi
c0016d94:	5f                   	pop    edi
c0016d95:	5d                   	pop    ebp
c0016d96:	c3                   	ret    
c0016d97:	90                   	nop

c0016d98 <VCache::read(unsigned long long, int, void*)>:
c0016d98:	55                   	push   ebp
c0016d99:	57                   	push   edi
c0016d9a:	56                   	push   esi
c0016d9b:	53                   	push   ebx
c0016d9c:	83 ec 28             	sub    esp,0x28
c0016d9f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016da3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016da7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dab:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016daf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016db2:	e8 3d 76 00 00       	call   c001e3f4 <Semaphore::acquire()>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016dbe:	74 0c                	je     c0016dcc <VCache::read(unsigned long long, int, void*)+0x34>
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	53                   	push   ebx
c0016dc4:	e8 2d fe ff ff       	call   c0016bf6 <VCache::writeWriteBuffer()>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	83 fd 01             	cmp    ebp,0x1
c0016dcf:	0f 85 80 00 00 00    	jne    c0016e55 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016dd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ddc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016de3:	75 70                	jne    c0016e55 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016de5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016de8:	89 e9                	mov    ecx,ebp
c0016dea:	f7 d9                	neg    ecx
c0016dec:	89 c8                	mov    eax,ecx
c0016dee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016df2:	c1 f8 1f             	sar    eax,0x1f
c0016df5:	21 f1                	and    ecx,esi
c0016df7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dfb:	89 c8                	mov    eax,ecx
c0016dfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e01:	21 f9                	and    ecx,edi
c0016e03:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e07:	89 ca                	mov    edx,ecx
c0016e09:	74 0a                	je     c0016e15 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e0b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e0e:	75 05                	jne    c0016e15 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e10:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016e13:	74 23                	je     c0016e38 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e20:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016e23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016e26:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016e28:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e2b:	55                   	push   ebp
c0016e2c:	52                   	push   edx
c0016e2d:	50                   	push   eax
c0016e2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e32:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e35:	83 c4 20             	add    esp,0x20
c0016e38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e3b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e3f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e45:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e48:	48                   	dec    eax
c0016e49:	21 c6                	and    esi,eax
c0016e4b:	0f af f1             	imul   esi,ecx
c0016e4e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e53:	eb 1d                	jmp    c0016e72 <VCache::read(unsigned long long, int, void*)+0xda>
c0016e55:	83 ec 0c             	sub    esp,0xc
c0016e58:	53                   	push   ebx
c0016e59:	e8 88 fd ff ff       	call   c0016be6 <VCache::invalidateReadBuffer()>
c0016e5e:	5a                   	pop    edx
c0016e5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e62:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e68:	55                   	push   ebp
c0016e69:	57                   	push   edi
c0016e6a:	56                   	push   esi
c0016e6b:	50                   	push   eax
c0016e6c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e6f:	83 c4 20             	add    esp,0x20
c0016e72:	83 ec 0c             	sub    esp,0xc
c0016e75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e78:	e8 b1 7c 00 00       	call   c001eb2e <Semaphore::release()>
c0016e7d:	83 c4 2c             	add    esp,0x2c
c0016e80:	31 c0                	xor    eax,eax
c0016e82:	5b                   	pop    ebx
c0016e83:	5e                   	pop    esi
c0016e84:	5f                   	pop    edi
c0016e85:	5d                   	pop    ebp
c0016e86:	c3                   	ret    
c0016e87:	90                   	nop

c0016e88 <Video::putrect(int, int, int, int, unsigned int)>:
c0016e88:	55                   	push   ebp
c0016e89:	57                   	push   edi
c0016e8a:	56                   	push   esi
c0016e8b:	53                   	push   ebx
c0016e8c:	83 ec 1c             	sub    esp,0x1c
c0016e8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e97:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e9b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea7:	01 df                	add    edi,ebx
c0016ea9:	39 fb                	cmp    ebx,edi
c0016eab:	7d 1f                	jge    c0016ecc <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ead:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016eb1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016eb5:	7d 12                	jge    c0016ec9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016eb7:	8b 16                	mov    edx,DWORD PTR [esi]
c0016eb9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ebd:	53                   	push   ebx
c0016ebe:	55                   	push   ebp
c0016ebf:	45                   	inc    ebp
c0016ec0:	56                   	push   esi
c0016ec1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ec4:	83 c4 10             	add    esp,0x10
c0016ec7:	eb e8                	jmp    c0016eb1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ec9:	43                   	inc    ebx
c0016eca:	eb dd                	jmp    c0016ea9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ecc:	83 c4 1c             	add    esp,0x1c
c0016ecf:	5b                   	pop    ebx
c0016ed0:	5e                   	pop    esi
c0016ed1:	5f                   	pop    edi
c0016ed2:	5d                   	pop    ebp
c0016ed3:	c3                   	ret    

c0016ed4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ed4:	55                   	push   ebp
c0016ed5:	57                   	push   edi
c0016ed6:	31 ff                	xor    edi,edi
c0016ed8:	56                   	push   esi
c0016ed9:	53                   	push   ebx
c0016eda:	83 ec 1c             	sub    esp,0x1c
c0016edd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ee1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ee5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016eec:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ef5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ef9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016efd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f04:	01 f9                	add    ecx,edi
c0016f06:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f0a:	7d 2f                	jge    c0016f3b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f0c:	31 f6                	xor    esi,esi
c0016f0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f12:	01 f2                	add    edx,esi
c0016f14:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f18:	7d 1a                	jge    c0016f34 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f1d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f20:	46                   	inc    esi
c0016f21:	51                   	push   ecx
c0016f22:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f26:	52                   	push   edx
c0016f27:	55                   	push   ebp
c0016f28:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f32:	eb da                	jmp    c0016f0e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f34:	47                   	inc    edi
c0016f35:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f39:	eb c5                	jmp    c0016f00 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f3b:	83 c4 1c             	add    esp,0x1c
c0016f3e:	5b                   	pop    ebx
c0016f3f:	5e                   	pop    esi
c0016f40:	5f                   	pop    edi
c0016f41:	5d                   	pop    ebp
c0016f42:	c3                   	ret    
c0016f43:	90                   	nop

c0016f44 <Video::blit(unsigned int*, int, int, int, int)>:
c0016f44:	55                   	push   ebp
c0016f45:	57                   	push   edi
c0016f46:	56                   	push   esi
c0016f47:	53                   	push   ebx
c0016f48:	83 ec 1c             	sub    esp,0x1c
c0016f4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f53:	85 c0                	test   eax,eax
c0016f55:	79 02                	jns    c0016f59 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f57:	31 c0                	xor    eax,eax
c0016f59:	c1 e0 02             	shl    eax,0x2
c0016f5c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f6c:	39 d8                	cmp    eax,ebx
c0016f6e:	7e 49                	jle    c0016fb9 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f70:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f76:	7c 41                	jl     c0016fb9 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f78:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f7c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f80:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f84:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f88:	39 f9                	cmp    ecx,edi
c0016f8a:	7e 22                	jle    c0016fae <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f8c:	83 c5 04             	add    ebp,0x4
c0016f8f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f95:	7c 14                	jl     c0016fab <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f97:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f99:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fa0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fa4:	56                   	push   esi
c0016fa5:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	47                   	inc    edi
c0016fac:	eb d2                	jmp    c0016f80 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fb2:	43                   	inc    ebx
c0016fb3:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fb7:	eb ab                	jmp    c0016f64 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fb9:	83 c4 1c             	add    esp,0x1c
c0016fbc:	5b                   	pop    ebx
c0016fbd:	5e                   	pop    esi
c0016fbe:	5f                   	pop    edi
c0016fbf:	5d                   	pop    ebp
c0016fc0:	c3                   	ret    
c0016fc1:	90                   	nop

c0016fc2 <Video::clearScreen(unsigned int)>:
c0016fc2:	57                   	push   edi
c0016fc3:	56                   	push   esi
c0016fc4:	53                   	push   ebx
c0016fc5:	31 db                	xor    ebx,ebx
c0016fc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fcb:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fd1:	7e 1f                	jle    c0016ff2 <Video::clearScreen(unsigned int)+0x30>
c0016fd3:	31 ff                	xor    edi,edi
c0016fd5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fdb:	7e 12                	jle    c0016fef <Video::clearScreen(unsigned int)+0x2d>
c0016fdd:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fe3:	53                   	push   ebx
c0016fe4:	57                   	push   edi
c0016fe5:	47                   	inc    edi
c0016fe6:	56                   	push   esi
c0016fe7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fea:	83 c4 10             	add    esp,0x10
c0016fed:	eb e6                	jmp    c0016fd5 <Video::clearScreen(unsigned int)+0x13>
c0016fef:	43                   	inc    ebx
c0016ff0:	eb d9                	jmp    c0016fcb <Video::clearScreen(unsigned int)+0x9>
c0016ff2:	5b                   	pop    ebx
c0016ff3:	5e                   	pop    esi
c0016ff4:	5f                   	pop    edi
c0016ff5:	c3                   	ret    

c0016ff6 <Video::putpixel(int, int, unsigned int)>:
c0016ff6:	c7 44 24 04 a0 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bca0
c0016ffe:	e9 06 33 00 00       	jmp    c001a309 <Krnl::panic(char const*)>
c0017003:	90                   	nop

c0017004 <Video::Video(char const*)>:
c0017004:	83 ec 0c             	sub    esp,0xc
c0017007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700b:	83 ec 08             	sub    esp,0x8
c001700e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017012:	50                   	push   eax
c0017013:	e8 f8 ce ff ff       	call   c0013f10 <Device::Device(char const*)>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0017020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017024:	89 10                	mov    DWORD PTR [eax],edx
c0017026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017034:	90                   	nop
c0017035:	83 c4 0c             	add    esp,0xc
c0017038:	c3                   	ret    
c0017039:	90                   	nop

c001703a <Video::~Video()>:
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0017042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017046:	89 10                	mov    DWORD PTR [eax],edx
c0017048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	50                   	push   eax
c0017050:	e8 85 cb ff ff       	call   c0013bda <Device::~Device()>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	90                   	nop
c0017059:	83 c4 0c             	add    esp,0xc
c001705c:	c3                   	ret    
c001705d:	90                   	nop

c001705e <Video::~Video()>:
c001705e:	83 ec 0c             	sub    esp,0xc
c0017061:	83 ec 0c             	sub    esp,0xc
c0017064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017068:	e8 cd ff ff ff       	call   c001703a <Video::~Video()>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	83 ec 08             	sub    esp,0x8
c0017073:	68 64 01 00 00       	push   0x164
c0017078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001707c:	e8 72 b7 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	83 c4 0c             	add    esp,0xc
c0017087:	c3                   	ret    

c0017088 <Video::isMonochrome()>:
c0017088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001708c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017092:	c3                   	ret    
c0017093:	90                   	nop

c0017094 <Video::getWidth()>:
c0017094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017098:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001709e:	c3                   	ret    
c001709f:	90                   	nop

c00170a0 <Video::getHeight()>:
c00170a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170aa:	c3                   	ret    
c00170ab:	90                   	nop

c00170ac <Video::drawCursor(int, int, unsigned char*, int)>:
c00170ac:	55                   	push   ebp
c00170ad:	57                   	push   edi
c00170ae:	56                   	push   esi
c00170af:	53                   	push   ebx
c00170b0:	83 ec 2c             	sub    esp,0x2c
c00170b3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170bb:	83 f8 01             	cmp    eax,0x1
c00170be:	19 c9                	sbb    ecx,ecx
c00170c0:	31 db                	xor    ebx,ebx
c00170c2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170c6:	89 cd                	mov    ebp,ecx
c00170c8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170d0:	f7 d5                	not    ebp
c00170d2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170d8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170dc:	01 d8                	add    eax,ebx
c00170de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170e2:	56                   	push   esi
c00170e3:	e8 b8 ff ff ff       	call   c00170a0 <Video::getHeight()>
c00170e8:	59                   	pop    ecx
c00170e9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00170ed:	7e 70                	jle    c001715f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00170ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170f3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170f7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170fe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017102:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001710d:	89 f8                	mov    eax,edi
c001710f:	83 c0 20             	add    eax,0x20
c0017112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017116:	56                   	push   esi
c0017117:	e8 78 ff ff ff       	call   c0017094 <Video::getWidth()>
c001711c:	5a                   	pop    edx
c001711d:	39 c7                	cmp    edi,eax
c001711f:	7d 34                	jge    c0017155 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017121:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017126:	74 05                	je     c001712d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017128:	8b 06                	mov    eax,DWORD PTR [esi]
c001712a:	55                   	push   ebp
c001712b:	eb 0d                	jmp    c001713a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001712d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017132:	74 12                	je     c0017146 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017134:	8b 06                	mov    eax,DWORD PTR [esi]
c0017136:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001713a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001713e:	57                   	push   edi
c001713f:	56                   	push   esi
c0017140:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017143:	83 c4 10             	add    esp,0x10
c0017146:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001714a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001714e:	47                   	inc    edi
c001714f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017153:	75 c1                	jne    c0017116 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017155:	43                   	inc    ebx
c0017156:	83 fb 20             	cmp    ebx,0x20
c0017159:	0f 85 79 ff ff ff    	jne    c00170d8 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001715f:	83 c4 2c             	add    esp,0x2c
c0017162:	5b                   	pop    ebx
c0017163:	5e                   	pop    esi
c0017164:	5f                   	pop    edi
c0017165:	5d                   	pop    ebp
c0017166:	c3                   	ret    
c0017167:	90                   	nop

c0017168 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017168:	55                   	push   ebp
c0017169:	57                   	push   edi
c001716a:	56                   	push   esi
c001716b:	53                   	push   ebx
c001716c:	83 ec 28             	sub    esp,0x28
c001716f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017173:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017177:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001717b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001717f:	c1 e7 08             	shl    edi,0x8
c0017182:	01 c7                	add    edi,eax
c0017184:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017188:	c1 e0 08             	shl    eax,0x8
c001718b:	01 d0                	add    eax,edx
c001718d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017195:	0f af c7             	imul   eax,edi
c0017198:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001719f:	50                   	push   eax
c00171a0:	e8 e7 86 ff ff       	call   c000f88c <malloc>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	89 c5                	mov    ebp,eax
c00171aa:	85 c0                	test   eax,eax
c00171ac:	75 15                	jne    c00171c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171ae:	83 ec 0c             	sub    esp,0xc
c00171b1:	68 c1 bc 02 c0       	push   0xc002bcc1
c00171b6:	e8 18 b7 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	e9 1c 01 00 00       	jmp    c00172df <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171c3:	be 12 00 00 00       	mov    esi,0x12
c00171c8:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171cc:	74 11                	je     c00171df <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00171ce:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00171d2:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00171d6:	c1 fe 03             	sar    esi,0x3
c00171d9:	0f af f0             	imul   esi,eax
c00171dc:	83 c6 12             	add    esi,0x12
c00171df:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171e3:	74 04                	je     c00171e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00171e5:	85 ff                	test   edi,edi
c00171e7:	75 12                	jne    c00171fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00171e9:	83 ec 0c             	sub    esp,0xc
c00171ec:	68 d8 bc 02 c0       	push   0xc002bcd8
c00171f1:	e8 dd b6 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00171f6:	e9 ce 00 00 00       	jmp    c00172c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00171fb:	52                   	push   edx
c00171fc:	52                   	push   edx
c00171fd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017201:	50                   	push   eax
c0017202:	68 ed bc 02 c0       	push   0xc002bced
c0017207:	e8 c7 b6 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001720c:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	80 fa 02             	cmp    dl,0x2
c0017216:	0f 85 98 00 00 00    	jne    c00172b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001721c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017221:	75 10                	jne    c0017233 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017223:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017227:	75 0a                	jne    c0017233 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017229:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001722c:	83 e8 18             	sub    eax,0x18
c001722f:	a8 f7                	test   al,0xf7
c0017231:	74 0a                	je     c001723d <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017233:	83 ec 0c             	sub    esp,0xc
c0017236:	68 fa bc 02 c0       	push   0xc002bcfa
c001723b:	eb 7f                	jmp    c00172bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001723d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017245:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001724d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017251:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017259:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001725d:	75 0c                	jne    c001726b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001725f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017264:	c1 e0 18             	shl    eax,0x18
c0017267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001726b:	41                   	inc    ecx
c001726c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017271:	c1 e2 10             	shl    edx,0x10
c0017274:	89 d0                	mov    eax,edx
c0017276:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001727b:	c1 e2 08             	shl    edx,0x8
c001727e:	09 c2                	or     edx,eax
c0017280:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017284:	09 c2                	or     edx,eax
c0017286:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001728a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001728e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017292:	c1 f8 03             	sar    eax,0x3
c0017295:	01 c6                	add    esi,eax
c0017297:	89 c8                	mov    eax,ecx
c0017299:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001729d:	39 c7                	cmp    edi,eax
c001729f:	7f b0                	jg     c0017251 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172a1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172a9:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172ac:	7e 22                	jle    c00172d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172ae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172b2:	eb 99                	jmp    c001724d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172b4:	50                   	push   eax
c00172b5:	50                   	push   eax
c00172b6:	52                   	push   edx
c00172b7:	68 08 bd 02 c0       	push   0xc002bd08
c00172bc:	e8 12 b6 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00172c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172c4:	e8 d3 85 ff ff       	call   c000f89c <free>
c00172c9:	83 c4 10             	add    esp,0x10
c00172cc:	31 ed                	xor    ebp,ebp
c00172ce:	eb 0f                	jmp    c00172df <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172d4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00172d7:	89 38                	mov    DWORD PTR [eax],edi
c00172d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172dd:	89 08                	mov    DWORD PTR [eax],ecx
c00172df:	83 c4 1c             	add    esp,0x1c
c00172e2:	89 e8                	mov    eax,ebp
c00172e4:	5b                   	pop    ebx
c00172e5:	5e                   	pop    esi
c00172e6:	5f                   	pop    edi
c00172e7:	5d                   	pop    ebp
c00172e8:	c3                   	ret    
c00172e9:	90                   	nop

c00172ea <Video::putTGA(int, int, unsigned char*, int)>:
c00172ea:	55                   	push   ebp
c00172eb:	57                   	push   edi
c00172ec:	56                   	push   esi
c00172ed:	53                   	push   ebx
c00172ee:	83 ec 28             	sub    esp,0x28
c00172f1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172f9:	50                   	push   eax
c00172fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172fe:	50                   	push   eax
c00172ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017303:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017307:	56                   	push   esi
c0017308:	e8 5b fe ff ff       	call   c0017168 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001730d:	83 c4 20             	add    esp,0x20
c0017310:	85 c0                	test   eax,eax
c0017312:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017316:	74 35                	je     c001734d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017318:	89 c7                	mov    edi,eax
c001731a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001731e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017322:	39 d8                	cmp    eax,ebx
c0017324:	7e 27                	jle    c001734d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017326:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001732a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001732e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017332:	39 e8                	cmp    eax,ebp
c0017334:	7e 14                	jle    c001734a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017336:	8b 06                	mov    eax,DWORD PTR [esi]
c0017338:	83 c7 04             	add    edi,0x4
c001733b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001733e:	53                   	push   ebx
c001733f:	55                   	push   ebp
c0017340:	45                   	inc    ebp
c0017341:	56                   	push   esi
c0017342:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017345:	83 c4 10             	add    esp,0x10
c0017348:	eb e0                	jmp    c001732a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001734a:	43                   	inc    ebx
c001734b:	eb cd                	jmp    c001731a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001734d:	83 c4 1c             	add    esp,0x1c
c0017350:	5b                   	pop    ebx
c0017351:	5e                   	pop    esi
c0017352:	5f                   	pop    edi
c0017353:	5d                   	pop    ebp
c0017354:	c3                   	ret    
c0017355:	90                   	nop

c0017356 <ACPI::close(int, int, void*)>:
c0017356:	83 ec 1c             	sub    esp,0x1c
c0017359:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017361:	74 0a                	je     c001736d <ACPI::close(int, int, void*)+0x17>
c0017363:	b8 00 00 00 00       	mov    eax,0x0
c0017368:	e9 9a 00 00 00       	jmp    c0017407 <ACPI::close(int, int, void*)+0xb1>
c001736d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017372:	75 37                	jne    c00173ab <ACPI::close(int, int, void*)+0x55>
c0017374:	83 ec 0c             	sub    esp,0xc
c0017377:	68 64 bd 02 c0       	push   0xc002bd64
c001737c:	e8 52 b5 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0017389:	85 c0                	test   eax,eax
c001738b:	74 07                	je     c0017394 <ACPI::close(int, int, void*)+0x3e>
c001738d:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0017392:	ff d0                	call   eax
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	68 7c be 02 c0       	push   0xc002be7c
c001739c:	e8 68 2f 00 00       	call   c001a309 <Krnl::panic(char const*)>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173a9:	eb 5c                	jmp    c0017407 <ACPI::close(int, int, void*)+0xb1>
c00173ab:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173b0:	75 50                	jne    c0017402 <ACPI::close(int, int, void*)+0xac>
c00173b2:	a1 a4 16 03 c0       	mov    eax,ds:0xc00316a4
c00173b7:	85 c0                	test   eax,eax
c00173b9:	74 07                	je     c00173c2 <ACPI::close(int, int, void*)+0x6c>
c00173bb:	a1 a4 16 03 c0       	mov    eax,ds:0xc00316a4
c00173c0:	ff d0                	call   eax
c00173c2:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173c7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173cc:	83 e0 02             	and    eax,0x2
c00173cf:	74 1c                	je     c00173ed <ACPI::close(int, int, void*)+0x97>
c00173d1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00173d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173dc:	89 c2                	mov    edx,eax
c00173de:	ec                   	in     al,dx
c00173df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00173e3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00173eb:	eb da                	jmp    c00173c7 <ACPI::close(int, int, void*)+0x71>
c00173ed:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173f4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173f9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017401:	ee                   	out    dx,al
c0017402:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017407:	83 c4 1c             	add    esp,0x1c
c001740a:	c3                   	ret    

c001740b <findRSDP()>:
c001740b:	83 ec 1c             	sub    esp,0x1c
c001740e:	83 ec 0c             	sub    esp,0xc
c0017411:	68 71 bd 02 c0       	push   0xc002bd71
c0017416:	e8 b8 b4 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001741b:	83 c4 10             	add    esp,0x10
c001741e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017423:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017429:	83 e0 04             	and    eax,0x4
c001742c:	84 c0                	test   al,al
c001742e:	75 07                	jne    c0017437 <findRSDP()+0x2c>
c0017430:	b8 00 00 00 00       	mov    eax,0x0
c0017435:	eb 6a                	jmp    c00174a1 <findRSDP()+0x96>
c0017437:	a1 54 f0 02 c0       	mov    eax,ds:0xc002f054
c001743c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017441:	7f 1b                	jg     c001745e <findRSDP()+0x53>
c0017443:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017448:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001744e:	83 e2 fb             	and    edx,0xfffffffb
c0017451:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017457:	b8 00 00 00 00       	mov    eax,0x0
c001745c:	eb 43                	jmp    c00174a1 <findRSDP()+0x96>
c001745e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017466:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001746e:	77 2c                	ja     c001749c <findRSDP()+0x91>
c0017470:	83 ec 04             	sub    esp,0x4
c0017473:	6a 08                	push   0x8
c0017475:	68 7f bd 02 c0       	push   0xc002bd7f
c001747a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001747e:	e8 c9 91 fe ff       	call   c000064c <memcmp>
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	85 c0                	test   eax,eax
c0017488:	0f 94 c0             	sete   al
c001748b:	84 c0                	test   al,al
c001748d:	74 06                	je     c0017495 <findRSDP()+0x8a>
c001748f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017493:	eb 0c                	jmp    c00174a1 <findRSDP()+0x96>
c0017495:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001749a:	eb ca                	jmp    c0017466 <findRSDP()+0x5b>
c001749c:	b8 00 00 00 00       	mov    eax,0x0
c00174a1:	83 c4 1c             	add    esp,0x1c
c00174a4:	c3                   	ret    

c00174a5 <loadACPITables(unsigned char*)>:
c00174a5:	57                   	push   edi
c00174a6:	56                   	push   esi
c00174a7:	53                   	push   ebx
c00174a8:	83 ec 60             	sub    esp,0x60
c00174ab:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00174b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174b6:	83 e0 04             	and    eax,0x4
c00174b9:	84 c0                	test   al,al
c00174bb:	0f 84 33 02 00 00    	je     c00176f4 <loadACPITables(unsigned char*)+0x24f>
c00174c1:	a0 c0 18 03 c0       	mov    al,ds:0xc00318c0
c00174c6:	84 c0                	test   al,al
c00174c8:	74 75                	je     c001753f <loadACPITables(unsigned char*)+0x9a>
c00174ca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174d9:	83 e8 24             	sub    eax,0x24
c00174dc:	c1 e8 03             	shr    eax,0x3
c00174df:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174e3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00174eb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174ef:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00174f3:	0f 8d b2 00 00 00    	jge    c00175ab <loadACPITables(unsigned char*)+0x106>
c00174f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174fd:	83 c0 24             	add    eax,0x24
c0017500:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017504:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017508:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001750c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017510:	c1 e0 03             	shl    eax,0x3
c0017513:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017517:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001751b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001751e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017520:	89 c1                	mov    ecx,eax
c0017522:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c0017527:	8d 50 01             	lea    edx,[eax+0x1]
c001752a:	89 15 ac 16 03 c0    	mov    DWORD PTR ds:0xc00316ac,edx
c0017530:	89 ca                	mov    edx,ecx
c0017532:	89 14 c5 c4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce93c],edx
c0017539:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001753d:	eb ac                	jmp    c00174eb <loadACPITables(unsigned char*)+0x46>
c001753f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017543:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017547:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001754b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001754e:	83 e8 24             	sub    eax,0x24
c0017551:	c1 e8 02             	shr    eax,0x2
c0017554:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017558:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017560:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017564:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017568:	7d 41                	jge    c00175ab <loadACPITables(unsigned char*)+0x106>
c001756a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001756e:	83 c0 24             	add    eax,0x24
c0017571:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017575:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017579:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001757d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017581:	c1 e0 02             	shl    eax,0x2
c0017584:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001758c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001758e:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c0017593:	8d 50 01             	lea    edx,[eax+0x1]
c0017596:	89 15 ac 16 03 c0    	mov    DWORD PTR ds:0xc00316ac,edx
c001759c:	89 ca                	mov    edx,ecx
c001759e:	89 14 c5 c4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce93c],edx
c00175a5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00175a9:	eb b5                	jmp    c0017560 <loadACPITables(unsigned char*)+0xbb>
c00175ab:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175b3:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c00175b8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175bc:	0f 8d 33 01 00 00    	jge    c00176f5 <loadACPITables(unsigned char*)+0x250>
c00175c2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175c6:	8b 04 c5 c4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce93c]
c00175cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175dd:	25 ff 0f 00 00       	and    eax,0xfff
c00175e2:	89 c6                	mov    esi,eax
c00175e4:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c00175ea:	83 ec 0c             	sub    esp,0xc
c00175ed:	6a 01                	push   0x1
c00175ef:	e8 d9 9e ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c00175f4:	83 c4 10             	add    esp,0x10
c00175f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175fb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017601:	83 ec 0c             	sub    esp,0xc
c0017604:	6a 01                	push   0x1
c0017606:	6a 01                	push   0x1
c0017608:	50                   	push   eax
c0017609:	52                   	push   edx
c001760a:	53                   	push   ebx
c001760b:	e8 ea a9 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017610:	83 c4 20             	add    esp,0x20
c0017613:	09 f0                	or     eax,esi
c0017615:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017619:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001761d:	c1 e0 03             	shl    eax,0x3
c0017620:	05 c0 16 03 c0       	add    eax,0xc00316c0
c0017625:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001762d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017631:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001763d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017641:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017645:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017649:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001764d:	89 c6                	mov    esi,eax
c001764f:	89 d7                	mov    edi,edx
c0017651:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017653:	89 c8                	mov    eax,ecx
c0017655:	89 fa                	mov    edx,edi
c0017657:	89 f3                	mov    ebx,esi
c0017659:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001765d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017661:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001766c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017670:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017674:	05 00 10 00 00       	add    eax,0x1000
c0017679:	c1 e8 0c             	shr    eax,0xc
c001767c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017680:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017684:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001768c:	25 ff 0f 00 00       	and    eax,0xfff
c0017691:	89 c6                	mov    esi,eax
c0017693:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00176a0:	e8 28 9e ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176b2:	83 ec 0c             	sub    esp,0xc
c00176b5:	6a 01                	push   0x1
c00176b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176bb:	50                   	push   eax
c00176bc:	52                   	push   edx
c00176bd:	53                   	push   ebx
c00176be:	e8 37 a9 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176c3:	83 c4 20             	add    esp,0x20
c00176c6:	09 f0                	or     eax,esi
c00176c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176d0:	83 ec 0c             	sub    esp,0xc
c00176d3:	50                   	push   eax
c00176d4:	e8 b4 a2 ff ff       	call   c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00176e4:	89 14 c5 c4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce93c],edx
c00176eb:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00176ef:	e9 bf fe ff ff       	jmp    c00175b3 <loadACPITables(unsigned char*)+0x10e>
c00176f4:	90                   	nop
c00176f5:	83 c4 60             	add    esp,0x60
c00176f8:	5b                   	pop    ebx
c00176f9:	5e                   	pop    esi
c00176fa:	5f                   	pop    edi
c00176fb:	c3                   	ret    

c00176fc <findRSDT(unsigned char*)>:
c00176fc:	57                   	push   edi
c00176fd:	56                   	push   esi
c00176fe:	53                   	push   ebx
c00176ff:	83 ec 50             	sub    esp,0x50
c0017702:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017707:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001770d:	83 e0 04             	and    eax,0x4
c0017710:	84 c0                	test   al,al
c0017712:	75 0a                	jne    c001771e <findRSDT(unsigned char*)+0x22>
c0017714:	b8 00 00 00 00       	mov    eax,0x0
c0017719:	e9 21 01 00 00       	jmp    c001783f <findRSDT(unsigned char*)+0x143>
c001771e:	89 e0                	mov    eax,esp
c0017720:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017724:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017728:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001772c:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017734:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017738:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001773c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017740:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017744:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017748:	89 c6                	mov    esi,eax
c001774a:	89 d7                	mov    edi,edx
c001774c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001774e:	89 c8                	mov    eax,ecx
c0017750:	89 fa                	mov    edx,edi
c0017752:	89 f3                	mov    ebx,esi
c0017754:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017758:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001775c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017760:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017764:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017768:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017774:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017778:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001777c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017780:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017784:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017788:	25 ff 0f 00 00       	and    eax,0xfff
c001778d:	89 c6                	mov    esi,eax
c001778f:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	6a 02                	push   0x2
c001779a:	e8 2e 9d ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177a6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177ac:	83 ec 0c             	sub    esp,0xc
c00177af:	6a 01                	push   0x1
c00177b1:	6a 02                	push   0x2
c00177b3:	50                   	push   eax
c00177b4:	52                   	push   edx
c00177b5:	53                   	push   ebx
c00177b6:	e8 3f a8 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177bb:	83 c4 20             	add    esp,0x20
c00177be:	09 f0                	or     eax,esi
c00177c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177c8:	25 ff 0f 00 00       	and    eax,0xfff
c00177cd:	89 c6                	mov    esi,eax
c00177cf:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c00177d5:	83 ec 0c             	sub    esp,0xc
c00177d8:	6a 02                	push   0x2
c00177da:	e8 ee 9c ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177e6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177ec:	83 ec 0c             	sub    esp,0xc
c00177ef:	6a 01                	push   0x1
c00177f1:	6a 02                	push   0x2
c00177f3:	50                   	push   eax
c00177f4:	52                   	push   edx
c00177f5:	53                   	push   ebx
c00177f6:	e8 ff a7 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177fb:	83 c4 20             	add    esp,0x20
c00177fe:	09 f0                	or     eax,esi
c0017800:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017804:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017809:	75 11                	jne    c001781c <findRSDT(unsigned char*)+0x120>
c001780b:	c6 05 c0 18 03 c0 00 	mov    BYTE PTR ds:0xc00318c0,0x0
c0017812:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017816:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001781a:	eb 1f                	jmp    c001783b <findRSDT(unsigned char*)+0x13f>
c001781c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017821:	75 11                	jne    c0017834 <findRSDT(unsigned char*)+0x138>
c0017823:	c6 05 c0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318c0,0x1
c001782a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001782e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017832:	eb 07                	jmp    c001783b <findRSDT(unsigned char*)+0x13f>
c0017834:	b8 00 00 00 00       	mov    eax,0x0
c0017839:	eb 04                	jmp    c001783f <findRSDT(unsigned char*)+0x143>
c001783b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001783f:	83 c4 50             	add    esp,0x50
c0017842:	5b                   	pop    ebx
c0017843:	5e                   	pop    esi
c0017844:	5f                   	pop    edi
c0017845:	c3                   	ret    

c0017846 <findDataTable(unsigned char*, char*)>:
c0017846:	83 ec 1c             	sub    esp,0x1c
c0017849:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001784e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017854:	83 e0 04             	and    eax,0x4
c0017857:	84 c0                	test   al,al
c0017859:	75 07                	jne    c0017862 <findDataTable(unsigned char*, char*)+0x1c>
c001785b:	b8 00 00 00 00       	mov    eax,0x0
c0017860:	eb 7c                	jmp    c00178de <findDataTable(unsigned char*, char*)+0x98>
c0017862:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001786a:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c001786f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017873:	7d 3a                	jge    c00178af <findDataTable(unsigned char*, char*)+0x69>
c0017875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017879:	c1 e0 03             	shl    eax,0x3
c001787c:	05 c0 16 03 c0       	add    eax,0xc00316c0
c0017881:	83 ec 04             	sub    esp,0x4
c0017884:	6a 04                	push   0x4
c0017886:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001788a:	50                   	push   eax
c001788b:	e8 bc 8d fe ff       	call   c000064c <memcmp>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	85 c0                	test   eax,eax
c0017895:	0f 94 c0             	sete   al
c0017898:	84 c0                	test   al,al
c001789a:	74 0d                	je     c00178a9 <findDataTable(unsigned char*, char*)+0x63>
c001789c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178a0:	8b 04 c5 c4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce93c]
c00178a7:	eb 35                	jmp    c00178de <findDataTable(unsigned char*, char*)+0x98>
c00178a9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178ad:	eb bb                	jmp    c001786a <findDataTable(unsigned char*, char*)+0x24>
c00178af:	a0 c0 18 03 c0       	mov    al,ds:0xc00318c0
c00178b4:	84 c0                	test   al,al
c00178b6:	74 07                	je     c00178bf <findDataTable(unsigned char*, char*)+0x79>
c00178b8:	b8 58 00 00 00       	mov    eax,0x58
c00178bd:	eb 05                	jmp    c00178c4 <findDataTable(unsigned char*, char*)+0x7e>
c00178bf:	b8 52 00 00 00       	mov    eax,0x52
c00178c4:	83 ec 04             	sub    esp,0x4
c00178c7:	50                   	push   eax
c00178c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178cc:	68 a0 be 02 c0       	push   0xc002bea0
c00178d1:	e8 fd af ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00178d6:	83 c4 10             	add    esp,0x10
c00178d9:	b8 00 00 00 00       	mov    eax,0x0
c00178de:	83 c4 1c             	add    esp,0x1c
c00178e1:	c3                   	ret    

c00178e2 <scanMADT()>:
c00178e2:	53                   	push   ebx
c00178e3:	83 ec 38             	sub    esp,0x38
c00178e6:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00178eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178f1:	83 e0 04             	and    eax,0x4
c00178f4:	84 c0                	test   al,al
c00178f6:	0f 84 63 04 00 00    	je     c0017d5f <scanMADT()+0x47d>
c00178fc:	e8 0a fb ff ff       	call   c001740b <findRSDP()>
c0017901:	a3 cc 18 03 c0       	mov    ds:0xc00318cc,eax
c0017906:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001790b:	85 c0                	test   eax,eax
c001790d:	75 19                	jne    c0017928 <scanMADT()+0x46>
c001790f:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017914:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001791a:	83 e2 fb             	and    edx,0xfffffffb
c001791d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017923:	e9 3b 04 00 00       	jmp    c0017d63 <scanMADT()+0x481>
c0017928:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001792d:	83 ec 0c             	sub    esp,0xc
c0017930:	50                   	push   eax
c0017931:	e8 c6 fd ff ff       	call   c00176fc <findRSDT(unsigned char*)>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c001793e:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017943:	85 c0                	test   eax,eax
c0017945:	75 19                	jne    c0017960 <scanMADT()+0x7e>
c0017947:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001794c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017952:	83 e2 fb             	and    edx,0xfffffffb
c0017955:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001795b:	e9 03 04 00 00       	jmp    c0017d63 <scanMADT()+0x481>
c0017960:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017965:	83 ec 0c             	sub    esp,0xc
c0017968:	50                   	push   eax
c0017969:	e8 37 fb ff ff       	call   c00174a5 <loadACPITables(unsigned char*)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017976:	83 ec 08             	sub    esp,0x8
c0017979:	68 88 bd 02 c0       	push   0xc002bd88
c001797e:	50                   	push   eax
c001797f:	e8 c2 fe ff ff       	call   c0017846 <findDataTable(unsigned char*, char*)>
c0017984:	83 c4 10             	add    esp,0x10
c0017987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001798b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017990:	75 19                	jne    c00179ab <scanMADT()+0xc9>
c0017992:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017997:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001799d:	83 e2 fe             	and    edx,0xfffffffe
c00179a0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179a6:	e9 b8 03 00 00       	jmp    c0017d63 <scanMADT()+0x481>
c00179ab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ba:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179be:	0f 87 9f 03 00 00    	ja     c0017d63 <scanMADT()+0x481>
c00179c4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179cc:	0f 87 91 03 00 00    	ja     c0017d63 <scanMADT()+0x481>
c00179d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179de:	8d 50 01             	lea    edx,[eax+0x1]
c00179e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ed:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f5:	8d 50 01             	lea    edx,[eax+0x1]
c00179f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a04:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a08:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a0d:	0f 86 4f 03 00 00    	jbe    c0017d62 <scanMADT()+0x480>
c0017a13:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a18:	75 57                	jne    c0017a71 <scanMADT()+0x18f>
c0017a1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a25:	8a 15 c0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ac0
c0017a2b:	0f b6 d2             	movzx  edx,dl
c0017a2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a32:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a36:	88 82 00 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce500],al
c0017a3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a40:	8d 50 01             	lea    edx,[eax+0x1]
c0017a43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a47:	8a 15 c0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ac0
c0017a4d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a50:	88 0d c0 1a 03 c0    	mov    BYTE PTR ds:0xc0031ac0,cl
c0017a56:	0f b6 d2             	movzx  edx,dl
c0017a59:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a5d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a61:	88 82 e0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce520],al
c0017a67:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a6c:	e9 da 02 00 00       	jmp    c0017d4b <scanMADT()+0x469>
c0017a71:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a76:	0f 85 14 01 00 00    	jne    c0017b90 <scanMADT()+0x2ae>
c0017a7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a80:	8d 50 01             	lea    edx,[eax+0x1]
c0017a83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a87:	8a 15 80 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031980
c0017a8d:	0f b6 d2             	movzx  edx,dl
c0017a90:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a94:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a98:	88 82 a0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce660],al
c0017a9e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017aa2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aaa:	01 d0                	add    eax,edx
c0017aac:	83 c0 2c             	add    eax,0x2c
c0017aaf:	8a 00                	mov    al,BYTE PTR [eax]
c0017ab1:	0f b6 d0             	movzx  edx,al
c0017ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017abb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017abf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ac3:	0f b6 c0             	movzx  eax,al
c0017ac6:	c1 e0 08             	shl    eax,0x8
c0017ac9:	89 d1                	mov    ecx,edx
c0017acb:	09 c1                	or     ecx,eax
c0017acd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad1:	8d 50 02             	lea    edx,[eax+0x2]
c0017ad4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017adc:	0f b6 c0             	movzx  eax,al
c0017adf:	c1 e0 10             	shl    eax,0x10
c0017ae2:	09 c1                	or     ecx,eax
c0017ae4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae8:	8d 50 03             	lea    edx,[eax+0x3]
c0017aeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017af3:	0f b6 c0             	movzx  eax,al
c0017af6:	c1 e0 18             	shl    eax,0x18
c0017af9:	09 c1                	or     ecx,eax
c0017afb:	89 ca                	mov    edx,ecx
c0017afd:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017b02:	0f b6 c0             	movzx  eax,al
c0017b05:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c0017b0c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b19:	01 d0                	add    eax,edx
c0017b1b:	83 c0 2c             	add    eax,0x2c
c0017b1e:	8a 00                	mov    al,BYTE PTR [eax]
c0017b20:	0f b6 d0             	movzx  edx,al
c0017b23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b27:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b2e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b32:	0f b6 c0             	movzx  eax,al
c0017b35:	c1 e0 08             	shl    eax,0x8
c0017b38:	89 d1                	mov    ecx,edx
c0017b3a:	09 c1                	or     ecx,eax
c0017b3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b40:	8d 50 02             	lea    edx,[eax+0x2]
c0017b43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b47:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b4b:	0f b6 c0             	movzx  eax,al
c0017b4e:	c1 e0 10             	shl    eax,0x10
c0017b51:	09 c1                	or     ecx,eax
c0017b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b57:	8d 50 03             	lea    edx,[eax+0x3]
c0017b5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b62:	0f b6 c0             	movzx  eax,al
c0017b65:	c1 e0 18             	shl    eax,0x18
c0017b68:	09 c1                	or     ecx,eax
c0017b6a:	89 ca                	mov    edx,ecx
c0017b6c:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017b71:	0f b6 c0             	movzx  eax,al
c0017b74:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0017b7b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b80:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017b85:	40                   	inc    eax
c0017b86:	a2 80 19 03 c0       	mov    ds:0xc0031980,al
c0017b8b:	e9 bb 01 00 00       	jmp    c0017d4b <scanMADT()+0x469>
c0017b90:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b95:	0f 85 e9 00 00 00    	jne    c0017c84 <scanMADT()+0x3a2>
c0017b9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ba6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017baa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017bb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb6:	8d 50 01             	lea    edx,[eax+0x1]
c0017bb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bc5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd1:	01 d0                	add    eax,edx
c0017bd3:	83 c0 2c             	add    eax,0x2c
c0017bd6:	8a 00                	mov    al,BYTE PTR [eax]
c0017bd8:	0f b6 d0             	movzx  edx,al
c0017bdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bdf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017be2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bea:	0f b6 c0             	movzx  eax,al
c0017bed:	c1 e0 08             	shl    eax,0x8
c0017bf0:	89 d1                	mov    ecx,edx
c0017bf2:	09 c1                	or     ecx,eax
c0017bf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf8:	8d 50 02             	lea    edx,[eax+0x2]
c0017bfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c03:	0f b6 c0             	movzx  eax,al
c0017c06:	c1 e0 10             	shl    eax,0x10
c0017c09:	09 c1                	or     ecx,eax
c0017c0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c0f:	8d 50 03             	lea    edx,[eax+0x3]
c0017c12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c1a:	0f b6 c0             	movzx  eax,al
c0017c1d:	c1 e0 18             	shl    eax,0x18
c0017c20:	09 c8                	or     eax,ecx
c0017c22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c26:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c33:	01 d0                	add    eax,edx
c0017c35:	83 c0 2c             	add    eax,0x2c
c0017c38:	8a 00                	mov    al,BYTE PTR [eax]
c0017c3a:	0f b6 c0             	movzx  eax,al
c0017c3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c41:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c48:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c4c:	0f b6 d2             	movzx  edx,dl
c0017c4f:	c1 e2 08             	shl    edx,0x8
c0017c52:	09 d0                	or     eax,edx
c0017c54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c59:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c5e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c67:	88 90 60 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1da0],dl
c0017c6d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c72:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c77:	66 89 84 12 60 19 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce6a0],ax
c0017c7f:	e9 c7 00 00 00       	jmp    c0017d4b <scanMADT()+0x469>
c0017c84:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c89:	0f 85 b0 00 00 00    	jne    c0017d3f <scanMADT()+0x45d>
c0017c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c93:	8d 50 01             	lea    edx,[eax+0x1]
c0017c96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ca2:	0f b6 c0             	movzx  eax,al
c0017ca5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ca9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb1:	01 d0                	add    eax,edx
c0017cb3:	83 c0 2c             	add    eax,0x2c
c0017cb6:	8a 00                	mov    al,BYTE PTR [eax]
c0017cb8:	0f b6 d0             	movzx  edx,al
c0017cbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cc6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cca:	0f b6 c0             	movzx  eax,al
c0017ccd:	c1 e0 08             	shl    eax,0x8
c0017cd0:	09 d0                	or     eax,edx
c0017cd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cd6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cdf:	8d 50 01             	lea    edx,[eax+0x1]
c0017ce2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ce6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cee:	0f b6 c0             	movzx  eax,al
c0017cf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf9:	c1 e0 08             	shl    eax,0x8
c0017cfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d00:	89 c1                	mov    ecx,eax
c0017d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d06:	c1 e0 18             	shl    eax,0x18
c0017d09:	89 c3                	mov    ebx,eax
c0017d0b:	a1 d0 18 03 c0       	mov    eax,ds:0xc00318d0
c0017d10:	8d 50 01             	lea    edx,[eax+0x1]
c0017d13:	89 15 d0 18 03 c0    	mov    DWORD PTR ds:0xc00318d0,edx
c0017d19:	09 d9                	or     ecx,ebx
c0017d1b:	89 ca                	mov    edx,ecx
c0017d1d:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c0017d24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d30:	68 d0 be 02 c0       	push   0xc002bed0
c0017d35:	e8 99 ab ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0017d3a:	83 c4 10             	add    esp,0x10
c0017d3d:	eb 0c                	jmp    c0017d4b <scanMADT()+0x469>
c0017d3f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d44:	75 05                	jne    c0017d4b <scanMADT()+0x469>
c0017d46:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d4b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d54:	01 d0                	add    eax,edx
c0017d56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d5a:	e9 54 fc ff ff       	jmp    c00179b3 <scanMADT()+0xd1>
c0017d5f:	90                   	nop
c0017d60:	eb 01                	jmp    c0017d63 <scanMADT()+0x481>
c0017d62:	90                   	nop
c0017d63:	83 c4 38             	add    esp,0x38
c0017d66:	5b                   	pop    ebx
c0017d67:	c3                   	ret    

c0017d68 <ACPI::ACPI()>:
c0017d68:	83 ec 0c             	sub    esp,0xc
c0017d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6f:	83 ec 08             	sub    esp,0x8
c0017d72:	68 8d bd 02 c0       	push   0xc002bd8d
c0017d77:	50                   	push   eax
c0017d78:	e8 93 c1 ff ff       	call   c0013f10 <Device::Device(char const*)>
c0017d7d:	83 c4 10             	add    esp,0x10
c0017d80:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0017d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d89:	89 10                	mov    DWORD PTR [eax],edx
c0017d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d8f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017db2:	e8 2b fb ff ff       	call   c00178e2 <scanMADT()>
c0017db7:	90                   	nop
c0017db8:	83 c4 0c             	add    esp,0xc
c0017dbb:	c3                   	ret    

c0017dbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017dbc:	83 ec 2c             	sub    esp,0x2c
c0017dbf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dcb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dcf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dd4:	88 d0                	mov    al,dl
c0017dd6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ddf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017de7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017deb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017df1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017df5:	0f 8d 97 00 00 00    	jge    c0017e92 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017dfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e03:	83 c2 2a             	add    edx,0x2a
c0017e06:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e0a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e0f:	75 78                	jne    c0017e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e19:	83 c2 2a             	add    edx,0x2a
c0017e1c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e20:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e24:	75 63                	jne    c0017e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e26:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e2b:	74 3a                	je     c0017e67 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e35:	83 c2 2a             	add    edx,0x2a
c0017e38:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e43:	39 c2                	cmp    edx,eax
c0017e45:	74 10                	je     c0017e57 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	68 0c bf 02 c0       	push   0xc002bf0c
c0017e4f:	e8 b5 24 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	83 ec 0c             	sub    esp,0xc
c0017e5a:	68 92 bd 02 c0       	push   0xc002bd92
c0017e5f:	e8 a5 24 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e73:	83 c2 2a             	add    edx,0x2a
c0017e76:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e7a:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e7c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e7f:	89 01                	mov    DWORD PTR [ecx],eax
c0017e81:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e84:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e89:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e8d:	e9 55 ff ff ff       	jmp    c0017de7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e92:	90                   	nop
c0017e93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e97:	83 c4 2c             	add    esp,0x2c
c0017e9a:	c2 04 00             	ret    0x4
c0017e9d:	90                   	nop

c0017e9e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e9e:	83 ec 1c             	sub    esp,0x1c
c0017ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ea9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ead:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eb2:	88 c8                	mov    al,cl
c0017eb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eb8:	88 d0                	mov    al,dl
c0017eba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ecc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ecf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ed3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017edb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ee5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eec:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017efb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017eff:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f06:	83 c2 2a             	add    edx,0x2a
c0017f09:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f11:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f22:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f30:	8d 50 01             	lea    edx,[eax+0x1]
c0017f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f37:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f47:	3d 00 02 00 00       	cmp    eax,0x200
c0017f4c:	75 10                	jne    c0017f5e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	68 a1 bd 02 c0       	push   0xc002bda1
c0017f56:	e8 ae 23 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	90                   	nop
c0017f5f:	83 c4 1c             	add    esp,0x1c
c0017f62:	c3                   	ret    
c0017f63:	90                   	nop

c0017f64 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f64:	b8 00 00 00 00       	mov    eax,0x0
c0017f69:	c3                   	ret    

c0017f6a <ACPI::detectPCI()>:
c0017f6a:	53                   	push   ebx
c0017f6b:	83 ec 28             	sub    esp,0x28
c0017f6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f73:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f78:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017f7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f83:	83 e0 04             	and    eax,0x4
c0017f86:	84 c0                	test   al,al
c0017f88:	74 2b                	je     c0017fb5 <ACPI::detectPCI()+0x4b>
c0017f8a:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017f8f:	83 ec 08             	sub    esp,0x8
c0017f92:	68 be bd 02 c0       	push   0xc002bdbe
c0017f97:	50                   	push   eax
c0017f98:	e8 a9 f8 ff ff       	call   c0017846 <findDataTable(unsigned char*, char*)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fa4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017fa9:	74 0a                	je     c0017fb5 <ACPI::detectPCI()+0x4b>
c0017fab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fb0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fb5:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017fbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fc1:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc3:	3c 01                	cmp    al,0x1
c0017fc5:	75 0c                	jne    c0017fd3 <ACPI::detectPCI()+0x69>
c0017fc7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fcc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fd1:	eb 26                	jmp    c0017ff9 <ACPI::detectPCI()+0x8f>
c0017fd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd9:	3c 02                	cmp    al,0x2
c0017fdb:	75 1c                	jne    c0017ff9 <ACPI::detectPCI()+0x8f>
c0017fdd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fe2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fe7:	74 10                	je     c0017ff9 <ACPI::detectPCI()+0x8f>
c0017fe9:	83 ec 0c             	sub    esp,0xc
c0017fec:	68 3c bf 02 c0       	push   0xc002bf3c
c0017ff1:	e8 13 23 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0017ff6:	83 c4 10             	add    esp,0x10
c0017ff9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ffd:	83 f0 01             	xor    eax,0x1
c0018000:	84 c0                	test   al,al
c0018002:	74 3f                	je     c0018043 <ACPI::detectPCI()+0xd9>
c0018004:	e8 47 81 fe ff       	call   c0000150 <manualPCIProbe>
c0018009:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001800d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018012:	75 0c                	jne    c0018020 <ACPI::detectPCI()+0xb6>
c0018014:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018019:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001801e:	eb 23                	jmp    c0018043 <ACPI::detectPCI()+0xd9>
c0018020:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0018025:	75 1c                	jne    c0018043 <ACPI::detectPCI()+0xd9>
c0018027:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001802c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018031:	74 10                	je     c0018043 <ACPI::detectPCI()+0xd9>
c0018033:	83 ec 0c             	sub    esp,0xc
c0018036:	68 3c bf 02 c0       	push   0xc002bf3c
c001803b:	e8 c9 22 00 00       	call   c001a309 <Krnl::panic(char const*)>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018048:	74 0d                	je     c0018057 <ACPI::detectPCI()+0xed>
c001804a:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c001804e:	83 f0 01             	xor    eax,0x1
c0018051:	0f b6 c0             	movzx  eax,al
c0018054:	40                   	inc    eax
c0018055:	eb 05                	jmp    c001805c <ACPI::detectPCI()+0xf2>
c0018057:	b8 00 00 00 00       	mov    eax,0x0
c001805c:	83 ec 08             	sub    esp,0x8
c001805f:	50                   	push   eax
c0018060:	68 c3 bd 02 c0       	push   0xc002bdc3
c0018065:	e8 69 a8 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001806a:	83 c4 10             	add    esp,0x10
c001806d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018072:	74 69                	je     c00180dd <ACPI::detectPCI()+0x173>
c0018074:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c001807c:	83 ec 0c             	sub    esp,0xc
c001807f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018083:	e8 04 78 ff ff       	call   c000f88c <malloc>
c0018088:	83 c4 10             	add    esp,0x10
c001808b:	89 c3                	mov    ebx,eax
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	53                   	push   ebx
c0018091:	e8 0e ac 00 00       	call   c0022ca4 <PCI::PCI()>
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001809d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a1:	83 ec 08             	sub    esp,0x8
c00180a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180a8:	50                   	push   eax
c00180a9:	e8 5e bc ff ff       	call   c0013d0c <Device::addChild(Device*)>
c00180ae:	83 c4 10             	add    esp,0x10
c00180b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b7:	83 c0 08             	add    eax,0x8
c00180ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00180bc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180c1:	74 07                	je     c00180ca <ACPI::detectPCI()+0x160>
c00180c3:	ba 01 00 00 00       	mov    edx,0x1
c00180c8:	eb 05                	jmp    c00180cf <ACPI::detectPCI()+0x165>
c00180ca:	ba 02 00 00 00       	mov    edx,0x2
c00180cf:	6a 00                	push   0x0
c00180d1:	6a 00                	push   0x0
c00180d3:	52                   	push   edx
c00180d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180d8:	ff d0                	call   eax
c00180da:	83 c4 10             	add    esp,0x10
c00180dd:	90                   	nop
c00180de:	83 c4 28             	add    esp,0x28
c00180e1:	5b                   	pop    ebx
c00180e2:	c3                   	ret    
c00180e3:	90                   	nop

c00180e4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00180e4:	83 ec 1c             	sub    esp,0x1c
c00180e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180eb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00180ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180f2:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00180f7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00180fc:	83 ec 08             	sub    esp,0x8
c00180ff:	52                   	push   edx
c0018100:	50                   	push   eax
c0018101:	e8 9c 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001810d:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0018112:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018117:	83 ec 04             	sub    esp,0x4
c001811a:	6a 01                	push   0x1
c001811c:	52                   	push   edx
c001811d:	50                   	push   eax
c001811e:	e8 95 6e ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	90                   	nop
c0018127:	83 c4 1c             	add    esp,0x1c
c001812a:	c3                   	ret    
c001812b:	90                   	nop

c001812c <ACPI::sleep()>:
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	a1 a0 16 03 c0       	mov    eax,ds:0xc00316a0
c0018134:	85 c0                	test   eax,eax
c0018136:	74 07                	je     c001813f <ACPI::sleep()+0x13>
c0018138:	a1 a0 16 03 c0       	mov    eax,ds:0xc00316a0
c001813d:	ff d0                	call   eax
c001813f:	90                   	nop
c0018140:	83 c4 0c             	add    esp,0xc
c0018143:	c3                   	ret    

c0018144 <ACPI::open(int, int, void*)>:
c0018144:	57                   	push   edi
c0018145:	56                   	push   esi
c0018146:	53                   	push   ebx
c0018147:	81 ec 60 01 00 00    	sub    esp,0x160
c001814d:	83 ec 0c             	sub    esp,0xc
c0018150:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018157:	e8 0e fe ff ff       	call   c0017f6a <ACPI::detectPCI()>
c001815c:	83 c4 10             	add    esp,0x10
c001815f:	83 ec 0c             	sub    esp,0xc
c0018162:	68 cc bd 02 c0       	push   0xc002bdcc
c0018167:	e8 fa 4a 00 00       	call   c001cc66 <Thr::loadKernelSymbolTable(char const*)>
c001816c:	83 c4 10             	add    esp,0x10
c001816f:	83 ec 04             	sub    esp,0x4
c0018172:	6a 0c                	push   0xc
c0018174:	68 ea bd 02 c0       	push   0xc002bdea
c0018179:	68 fb bd 02 c0       	push   0xc002bdfb
c001817e:	e8 3c 2f 00 00       	call   c001b0bf <Reg::readIntWithDefault(char*, char*, int)>
c0018183:	83 c4 10             	add    esp,0x10
c0018186:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001818d:	83 ec 0c             	sub    esp,0xc
c0018190:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018197:	e8 6f 95 ff ff       	call   c001170b <Virt::setupPageSwapping(int)>
c001819c:	83 c4 10             	add    esp,0x10
c001819f:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c00181a5:	83 ec 08             	sub    esp,0x8
c00181a8:	6a 01                	push   0x1
c00181aa:	68 02 be 02 c0       	push   0xc002be02
c00181af:	e8 29 55 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c00181b4:	83 c4 10             	add    esp,0x10
c00181b7:	83 ec 08             	sub    esp,0x8
c00181ba:	53                   	push   ebx
c00181bb:	50                   	push   eax
c00181bc:	e8 47 57 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00181cb:	83 ec 08             	sub    esp,0x8
c00181ce:	6a 12                	push   0x12
c00181d0:	50                   	push   eax
c00181d1:	e8 ba be ff ff       	call   c0014090 <getDevicesOfType(DeviceType)>
c00181d6:	83 c4 0c             	add    esp,0xc
c00181d9:	83 ec 0c             	sub    esp,0xc
c00181dc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181e3:	50                   	push   eax
c00181e4:	e8 97 12 01 00       	call   c0029480 <LinkedList<Device>::isEmpty()>
c00181e9:	83 c4 10             	add    esp,0x10
c00181ec:	83 f0 01             	xor    eax,0x1
c00181ef:	84 c0                	test   al,al
c00181f1:	0f 84 43 01 00 00    	je     c001833a <ACPI::open(int, int, void*)+0x1f6>
c00181f7:	83 ec 0c             	sub    esp,0xc
c00181fa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018201:	50                   	push   eax
c0018202:	e8 95 12 01 00       	call   c002949c <LinkedList<Device>::getFirstElement()>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018211:	83 ec 0c             	sub    esp,0xc
c0018214:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001821b:	50                   	push   eax
c001821c:	e8 83 12 01 00       	call   c00294a4 <LinkedList<Device>::removeFirst()>
c0018221:	83 c4 10             	add    esp,0x10
c0018224:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001822b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018232:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018239:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001823d:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018243:	ba 09 00 00 00       	mov    edx,0x9
c0018248:	fc                   	cld    
c0018249:	89 c7                	mov    edi,eax
c001824b:	89 de                	mov    esi,ebx
c001824d:	89 d1                	mov    ecx,edx
c001824f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018251:	83 ec 08             	sub    esp,0x8
c0018254:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018258:	50                   	push   eax
c0018259:	83 ec 24             	sub    esp,0x24
c001825c:	89 e0                	mov    eax,esp
c001825e:	89 c3                	mov    ebx,eax
c0018260:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018264:	ba 09 00 00 00       	mov    edx,0x9
c0018269:	89 df                	mov    edi,ebx
c001826b:	89 c6                	mov    esi,eax
c001826d:	89 d1                	mov    ecx,edx
c001826f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018271:	e8 2e af 00 00       	call   c00231a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018276:	83 c4 30             	add    esp,0x30
c0018279:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018280:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018288:	0f 84 4b ff ff ff    	je     c00181d9 <ACPI::open(int, int, void*)+0x95>
c001828e:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018299:	83 ec 0c             	sub    esp,0xc
c001829c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182a3:	e8 e4 75 ff ff       	call   c000f88c <malloc>
c00182a8:	83 c4 10             	add    esp,0x10
c00182ab:	89 c3                	mov    ebx,eax
c00182ad:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00182b2:	83 ec 04             	sub    esp,0x4
c00182b5:	50                   	push   eax
c00182b6:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182bd:	53                   	push   ebx
c00182be:	e8 6f ab ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00182cd:	83 ec 0c             	sub    esp,0xc
c00182d0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182d7:	e8 28 ae ff ff       	call   c0013104 <File::exists()>
c00182dc:	83 c4 10             	add    esp,0x10
c00182df:	84 c0                	test   al,al
c00182e1:	74 27                	je     c001830a <ACPI::open(int, int, void*)+0x1c6>
c00182e3:	83 ec 08             	sub    esp,0x8
c00182e6:	6a 01                	push   0x1
c00182e8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182ef:	e8 e9 53 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	83 ec 08             	sub    esp,0x8
c00182fa:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018301:	50                   	push   eax
c0018302:	e8 01 56 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018312:	0f 84 c1 fe ff ff    	je     c00181d9 <ACPI::open(int, int, void*)+0x95>
c0018318:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001831f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018321:	83 c0 08             	add    eax,0x8
c0018324:	8b 00                	mov    eax,DWORD PTR [eax]
c0018326:	83 ec 0c             	sub    esp,0xc
c0018329:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018330:	ff d0                	call   eax
c0018332:	83 c4 10             	add    esp,0x10
c0018335:	e9 9f fe ff ff       	jmp    c00181d9 <ACPI::open(int, int, void*)+0x95>
c001833a:	83 ec 0c             	sub    esp,0xc
c001833d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018344:	50                   	push   eax
c0018345:	e8 34 11 01 00       	call   c002947e <LinkedList<Device>::~LinkedList()>
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c0018353:	83 ec 08             	sub    esp,0x8
c0018356:	6a 01                	push   0x1
c0018358:	68 1d be 02 c0       	push   0xc002be1d
c001835d:	e8 7b 53 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c0018362:	83 c4 10             	add    esp,0x10
c0018365:	83 ec 08             	sub    esp,0x8
c0018368:	53                   	push   ebx
c0018369:	50                   	push   eax
c001836a:	e8 99 55 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c001836f:	83 c4 10             	add    esp,0x10
c0018372:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c0018378:	83 ec 08             	sub    esp,0x8
c001837b:	6a 01                	push   0x1
c001837d:	68 3a be 02 c0       	push   0xc002be3a
c0018382:	e8 56 53 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c0018387:	83 c4 10             	add    esp,0x10
c001838a:	83 ec 08             	sub    esp,0x8
c001838d:	53                   	push   ebx
c001838e:	50                   	push   eax
c001838f:	e8 74 55 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001839c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183a2:	83 e0 04             	and    eax,0x4
c00183a5:	84 c0                	test   al,al
c00183a7:	0f 84 fd 00 00 00    	je     c00184aa <ACPI::open(int, int, void*)+0x366>
c00183ad:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00183b8:	83 ec 0c             	sub    esp,0xc
c00183bb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00183c2:	e8 c5 74 ff ff       	call   c000f88c <malloc>
c00183c7:	83 c4 10             	add    esp,0x10
c00183ca:	89 c3                	mov    ebx,eax
c00183cc:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00183d1:	83 ec 04             	sub    esp,0x4
c00183d4:	50                   	push   eax
c00183d5:	68 57 be 02 c0       	push   0xc002be57
c00183da:	53                   	push   ebx
c00183db:	e8 52 aa ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c00183e0:	83 c4 10             	add    esp,0x10
c00183e3:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00183ea:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183f2:	74 1a                	je     c001840e <ACPI::open(int, int, void*)+0x2ca>
c00183f4:	83 ec 0c             	sub    esp,0xc
c00183f7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183fe:	e8 01 ad ff ff       	call   c0013104 <File::exists()>
c0018403:	83 c4 10             	add    esp,0x10
c0018406:	84 c0                	test   al,al
c0018408:	74 04                	je     c001840e <ACPI::open(int, int, void*)+0x2ca>
c001840a:	b0 01                	mov    al,0x1
c001840c:	eb 02                	jmp    c0018410 <ACPI::open(int, int, void*)+0x2cc>
c001840e:	b0 00                	mov    al,0x0
c0018410:	84 c0                	test   al,al
c0018412:	74 25                	je     c0018439 <ACPI::open(int, int, void*)+0x2f5>
c0018414:	83 ec 08             	sub    esp,0x8
c0018417:	6a 01                	push   0x1
c0018419:	68 57 be 02 c0       	push   0xc002be57
c001841e:	e8 ba 52 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c0018423:	83 c4 10             	add    esp,0x10
c0018426:	83 ec 08             	sub    esp,0x8
c0018429:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018430:	50                   	push   eax
c0018431:	e8 d2 54 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018441:	74 27                	je     c001846a <ACPI::open(int, int, void*)+0x326>
c0018443:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001844b:	74 1d                	je     c001846a <ACPI::open(int, int, void*)+0x326>
c001844d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018454:	8b 00                	mov    eax,DWORD PTR [eax]
c0018456:	83 c0 08             	add    eax,0x8
c0018459:	8b 00                	mov    eax,DWORD PTR [eax]
c001845b:	83 ec 0c             	sub    esp,0xc
c001845e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018465:	ff d0                	call   eax
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001846f:	83 ec 08             	sub    esp,0x8
c0018472:	68 74 be 02 c0       	push   0xc002be74
c0018477:	50                   	push   eax
c0018478:	e8 c9 f3 ff ff       	call   c0017846 <findDataTable(unsigned char*, char*)>
c001847d:	83 c4 10             	add    esp,0x10
c0018480:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018487:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001848f:	74 19                	je     c00184aa <ACPI::open(int, int, void*)+0x366>
c0018491:	83 ec 08             	sub    esp,0x8
c0018494:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001849b:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00184a2:	e8 3d fc ff ff       	call   c00180e4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	b8 00 00 00 00       	mov    eax,0x0
c00184af:	81 c4 60 01 00 00    	add    esp,0x160
c00184b5:	5b                   	pop    ebx
c00184b6:	5e                   	pop    esi
c00184b7:	5f                   	pop    edi
c00184b8:	c3                   	ret    
c00184b9:	90                   	nop

c00184ba <CPU::close(int, int, void*)>:
c00184ba:	31 c0                	xor    eax,eax
c00184bc:	c3                   	ret    
c00184bd:	90                   	nop

c00184be <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00184be:	55                   	push   ebp
c00184bf:	57                   	push   edi
c00184c0:	56                   	push   esi
c00184c1:	53                   	push   ebx
c00184c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00184c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184ca:	89 ce                	mov    esi,ecx
c00184cc:	89 d5                	mov    ebp,edx
c00184ce:	80 f9 04             	cmp    cl,0x4
c00184d1:	75 28                	jne    c00184fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00184d3:	8d 42 f9             	lea    eax,[edx-0x7]
c00184d6:	3c 03                	cmp    al,0x3
c00184d8:	0f 86 63 01 00 00    	jbe    c0018641 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184de:	80 fa 03             	cmp    dl,0x3
c00184e1:	0f 84 5a 01 00 00    	je     c0018641 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184e7:	8d 7a f2             	lea    edi,[edx-0xe]
c00184ea:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c00184ef:	89 fb                	mov    ebx,edi
c00184f1:	80 fb 01             	cmp    bl,0x1
c00184f4:	77 4e                	ja     c0018544 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00184f6:	e9 52 01 00 00       	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184fb:	80 f9 05             	cmp    cl,0x5
c00184fe:	75 4d                	jne    c001854d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018500:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018505:	80 fa 03             	cmp    dl,0x3
c0018508:	0f 86 3f 01 00 00    	jbe    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001850e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018511:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018516:	89 fb                	mov    ebx,edi
c0018518:	80 fb 01             	cmp    bl,0x1
c001851b:	0f 86 2c 01 00 00    	jbe    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018521:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018526:	80 fa 08             	cmp    dl,0x8
c0018529:	0f 84 1e 01 00 00    	je     c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001852f:	89 d7                	mov    edi,edx
c0018531:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018536:	83 e7 fb             	and    edi,0xfffffffb
c0018539:	89 fb                	mov    ebx,edi
c001853b:	80 fb 09             	cmp    bl,0x9
c001853e:	0f 84 09 01 00 00    	je     c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018544:	31 c0                	xor    eax,eax
c0018546:	89 eb                	mov    ebx,ebp
c0018548:	0f b6 fb             	movzx  edi,bl
c001854b:	eb 30                	jmp    c001857d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001854d:	31 c0                	xor    eax,eax
c001854f:	80 f9 06             	cmp    cl,0x6
c0018552:	75 f2                	jne    c0018546 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018554:	80 fa 0a             	cmp    dl,0xa
c0018557:	77 ed                	ja     c0018546 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018559:	bf de 05 00 00       	mov    edi,0x5de
c001855e:	0f a3 d7             	bt     edi,edx
c0018561:	73 e3                	jae    c0018546 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018563:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018568:	e9 e0 00 00 00       	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001856d:	39 c7                	cmp    edi,eax
c001856f:	0f 84 d3 00 00 00    	je     c0018648 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018575:	40                   	inc    eax
c0018576:	3d d0 00 00 00       	cmp    eax,0xd0
c001857b:	74 09                	je     c0018586 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001857d:	89 f3                	mov    ebx,esi
c001857f:	80 fb 0f             	cmp    bl,0xf
c0018582:	75 f1                	jne    c0018575 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018584:	eb e7                	jmp    c001856d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018586:	80 f9 10             	cmp    cl,0x10
c0018589:	75 14                	jne    c001859f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001858b:	8d 42 fc             	lea    eax,[edx-0x4]
c001858e:	83 e0 fb             	and    eax,0xfffffffb
c0018591:	3c 02                	cmp    al,0x2
c0018593:	76 34                	jbe    c00185c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018595:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c001859a:	80 fa 02             	cmp    dl,0x2
c001859d:	eb 24                	jmp    c00185c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001859f:	80 f9 11             	cmp    cl,0x11
c00185a2:	75 13                	jne    c00185b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00185a4:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185a9:	80 fa 03             	cmp    dl,0x3
c00185ac:	0f 85 9b 00 00 00    	jne    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b2:	e9 91 00 00 00       	jmp    c0018648 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00185b7:	80 f9 12             	cmp    cl,0x12
c00185ba:	75 14                	jne    c00185d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00185bc:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185c1:	fe ca                	dec    dl
c00185c3:	0f 85 84 00 00 00    	jne    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c9:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c00185ce:	eb 7d                	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185d0:	80 f9 14             	cmp    cl,0x14
c00185d3:	75 12                	jne    c00185e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00185d5:	4a                   	dec    edx
c00185d6:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185db:	80 fa 01             	cmp    dl,0x1
c00185de:	77 6d                	ja     c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e0:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c00185e5:	eb 66                	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e7:	80 f9 15             	cmp    cl,0x15
c00185ea:	75 31                	jne    c001861d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00185ec:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c00185f1:	80 fa 01             	cmp    dl,0x1
c00185f4:	74 57                	je     c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f6:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185fb:	80 fa 13             	cmp    dl,0x13
c00185fe:	76 0c                	jbe    c001860c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018600:	80 fa 30             	cmp    dl,0x30
c0018603:	75 48                	jne    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018605:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c001860a:	eb 41                	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001860c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018611:	0f a3 d1             	bt     ecx,edx
c0018614:	73 37                	jae    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018616:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c001861b:	eb 30                	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001861d:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018622:	80 f9 16             	cmp    cl,0x16
c0018625:	75 26                	jne    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018627:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c001862c:	84 d2                	test   dl,dl
c001862e:	74 1d                	je     c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018630:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018635:	80 fa 30             	cmp    dl,0x30
c0018638:	75 13                	jne    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863a:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c001863f:	eb 0c                	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018641:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018646:	eb 05                	jmp    c001864d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018648:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c001864d:	5b                   	pop    ebx
c001864e:	5e                   	pop    esi
c001864f:	5f                   	pop    edi
c0018650:	5d                   	pop    ebp
c0018651:	c3                   	ret    

c0018652 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018652:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018656:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001865a:	80 f9 04             	cmp    cl,0x4
c001865d:	75 6b                	jne    c00186ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001865f:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018664:	80 fa 01             	cmp    dl,0x1
c0018667:	0f 86 92 02 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866d:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018672:	80 fa 02             	cmp    dl,0x2
c0018675:	0f 84 84 02 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867b:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018680:	80 fa 03             	cmp    dl,0x3
c0018683:	0f 84 76 02 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018689:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c001868e:	80 fa 04             	cmp    dl,0x4
c0018691:	0f 84 68 02 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018697:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c001869c:	80 fa 05             	cmp    dl,0x5
c001869f:	0f 84 5a 02 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a5:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c00186aa:	80 fa 07             	cmp    dl,0x7
c00186ad:	0f 84 4c 02 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b3:	83 ea 08             	sub    edx,0x8
c00186b6:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00186bb:	80 fa 01             	cmp    dl,0x1
c00186be:	0f 87 3b 02 00 00    	ja     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c4:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c00186c9:	c3                   	ret    
c00186ca:	80 f9 05             	cmp    cl,0x5
c00186cd:	75 45                	jne    c0018714 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00186cf:	8d 4a ff             	lea    ecx,[edx-0x1]
c00186d2:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00186d7:	80 f9 02             	cmp    cl,0x2
c00186da:	0f 86 1f 02 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e0:	80 fa 04             	cmp    dl,0x4
c00186e3:	0f 84 f3 01 00 00    	je     c00188dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00186e9:	80 fa 07             	cmp    dl,0x7
c00186ec:	0f 84 0d 02 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f2:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c00186f7:	80 fa 08             	cmp    dl,0x8
c00186fa:	0f 84 ff 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018700:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018705:	80 fa 09             	cmp    dl,0x9
c0018708:	0f 85 f1 01 00 00    	jne    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870e:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018713:	c3                   	ret    
c0018714:	80 f9 06             	cmp    cl,0x6
c0018717:	0f 85 85 01 00 00    	jne    c00188a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001871d:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018722:	80 fa 01             	cmp    dl,0x1
c0018725:	0f 84 d4 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872b:	8d 42 fb             	lea    eax,[edx-0x5]
c001872e:	3c 01                	cmp    al,0x1
c0018730:	0f 86 ac 01 00 00    	jbe    c00188e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018736:	80 fa 03             	cmp    dl,0x3
c0018739:	0f 84 a3 01 00 00    	je     c00188e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001873f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018742:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018747:	80 f9 01             	cmp    cl,0x1
c001874a:	0f 86 af 01 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018750:	80 fa 09             	cmp    dl,0x9
c0018753:	0f 84 8f 01 00 00    	je     c00188e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018759:	8d 4a f6             	lea    ecx,[edx-0xa]
c001875c:	80 f9 01             	cmp    cl,0x1
c001875f:	0f 86 9a 01 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018765:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c001876a:	80 fa 0d             	cmp    dl,0xd
c001876d:	0f 84 8c 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018773:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018778:	80 fa 0e             	cmp    dl,0xe
c001877b:	0f 84 7e 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018781:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018786:	80 fa 0f             	cmp    dl,0xf
c0018789:	0f 84 70 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001878f:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018794:	80 fa 15             	cmp    dl,0x15
c0018797:	0f 84 62 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879d:	8d 4a ea             	lea    ecx,[edx-0x16]
c00187a0:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c00187a5:	80 f9 01             	cmp    cl,0x1
c00187a8:	0f 86 51 01 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ae:	80 fa 1a             	cmp    dl,0x1a
c00187b1:	0f 84 37 01 00 00    	je     c00188ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00187b7:	80 fa 1c             	cmp    dl,0x1c
c00187ba:	0f 84 34 01 00 00    	je     c00188f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00187c0:	80 fa 1d             	cmp    dl,0x1d
c00187c3:	0f 84 36 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c9:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c00187ce:	80 fa 25             	cmp    dl,0x25
c00187d1:	0f 84 28 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d7:	8d 4a da             	lea    ecx,[edx-0x26]
c00187da:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00187df:	80 f9 01             	cmp    cl,0x1
c00187e2:	0f 86 17 01 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e8:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c00187ed:	80 fa 2a             	cmp    dl,0x2a
c00187f0:	0f 84 09 01 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f6:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c00187fb:	80 fa 2c             	cmp    dl,0x2c
c00187fe:	0f 84 fb 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018804:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018809:	80 fa 2d             	cmp    dl,0x2d
c001880c:	0f 84 ed 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018812:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018817:	80 fa 2e             	cmp    dl,0x2e
c001881a:	0f 84 df 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018820:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018825:	80 fa 2f             	cmp    dl,0x2f
c0018828:	0f 84 d1 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018831:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018836:	80 f9 01             	cmp    cl,0x1
c0018839:	0f 86 c0 00 00 00    	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001883f:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018844:	80 fa 37             	cmp    dl,0x37
c0018847:	0f 84 b2 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884d:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018852:	80 fa 3a             	cmp    dl,0x3a
c0018855:	0f 84 a4 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885b:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018860:	80 fa 3c             	cmp    dl,0x3c
c0018863:	0f 84 96 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018869:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c001886e:	80 fa 3d             	cmp    dl,0x3d
c0018871:	0f 84 88 00 00 00    	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018877:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c001887c:	80 fa 3e             	cmp    dl,0x3e
c001887f:	74 7e                	je     c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018881:	8d 42 bb             	lea    eax,[edx-0x45]
c0018884:	3c 01                	cmp    al,0x1
c0018886:	76 72                	jbe    c00188fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018888:	80 fa 3f             	cmp    dl,0x3f
c001888b:	74 6d                	je     c00188fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001888d:	80 fa 4a             	cmp    dl,0x4a
c0018890:	74 0a                	je     c001889c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018892:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018897:	80 fa 4d             	cmp    dl,0x4d
c001889a:	75 63                	jne    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001889c:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c00188a1:	c3                   	ret    
c00188a2:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00188a7:	80 f9 0b             	cmp    cl,0xb
c00188aa:	75 0a                	jne    c00188b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00188ac:	fe ca                	dec    dl
c00188ae:	75 4f                	jne    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b0:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c00188b5:	c3                   	ret    
c00188b6:	80 f9 0f             	cmp    cl,0xf
c00188b9:	75 44                	jne    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188bb:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c00188c0:	80 fa 02             	cmp    dl,0x2
c00188c3:	76 3a                	jbe    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c5:	8d 42 fd             	lea    eax,[edx-0x3]
c00188c8:	3c 01                	cmp    al,0x1
c00188ca:	76 0a                	jbe    c00188d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00188cc:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00188d1:	80 fa 06             	cmp    dl,0x6
c00188d4:	75 29                	jne    c00188ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d6:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c00188db:	c3                   	ret    
c00188dc:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c00188e1:	c3                   	ret    
c00188e2:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c00188e7:	c3                   	ret    
c00188e8:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c00188ed:	c3                   	ret    
c00188ee:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c00188f3:	c3                   	ret    
c00188f4:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00188f9:	c3                   	ret    
c00188fa:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c00188ff:	c3                   	ret    

c0018900 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018900:	60                   	pusha  
c0018901:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018905:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018909:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001890d:	9c                   	pushf  
c001890e:	fa                   	cli    
c001890f:	0f 09                	wbinvd 
c0018911:	0f 30                	wrmsr  
c0018913:	9d                   	popf   
c0018914:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018918:	89 02                	mov    DWORD PTR [edx],eax
c001891a:	61                   	popa   
c001891b:	c3                   	ret    

c001891c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001891c:	60                   	pusha  
c001891d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018921:	9c                   	pushf  
c0018922:	fa                   	cli    
c0018923:	0f 09                	wbinvd 
c0018925:	31 c0                	xor    eax,eax
c0018927:	31 d2                	xor    edx,edx
c0018929:	0f 32                	rdmsr  
c001892b:	9d                   	popf   
c001892c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018930:	89 02                	mov    DWORD PTR [edx],eax
c0018932:	61                   	popa   
c0018933:	c3                   	ret    

c0018934 <CPU::AMD_K6_writeback(int, int, int)>:
c0018934:	56                   	push   esi
c0018935:	53                   	push   ebx
c0018936:	83 ec 10             	sub    esp,0x10
c0018939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018942:	75 5d                	jne    c00189a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018944:	83 f8 08             	cmp    eax,0x8
c0018947:	75 09                	jne    c0018952 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018949:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001894e:	7e 13                	jle    c0018963 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018950:	eb 30                	jmp    c0018982 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018952:	83 f8 06             	cmp    eax,0x6
c0018955:	7c 4a                	jl     c00189a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018957:	83 f8 07             	cmp    eax,0x7
c001895a:	7e 07                	jle    c0018963 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001895c:	83 f8 09             	cmp    eax,0x9
c001895f:	74 21                	je     c0018982 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018961:	eb 3e                	jmp    c00189a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018963:	89 e6                	mov    esi,esp
c0018965:	8b 1d 48 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f048
c001896b:	56                   	push   esi
c001896c:	c1 eb 15             	shr    ebx,0x15
c001896f:	68 82 00 00 c0       	push   0xc0000082
c0018974:	83 e3 7e             	and    ebx,0x7e
c0018977:	e8 a0 ff ff ff       	call   c001891c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001897c:	56                   	push   esi
c001897d:	6a 00                	push   0x0
c001897f:	53                   	push   ebx
c0018980:	eb 12                	jmp    c0018994 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018982:	89 e3                	mov    ebx,esp
c0018984:	53                   	push   ebx
c0018985:	68 82 00 00 c0       	push   0xc0000082
c001898a:	e8 8d ff ff ff       	call   c001891c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001898f:	53                   	push   ebx
c0018990:	6a 00                	push   0x0
c0018992:	6a 00                	push   0x0
c0018994:	68 82 00 00 c0       	push   0xc0000082
c0018999:	e8 62 ff ff ff       	call   c0018900 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001899e:	83 c4 18             	add    esp,0x18
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	5b                   	pop    ebx
c00189a5:	5e                   	pop    esi
c00189a6:	c3                   	ret    
c00189a7:	90                   	nop

c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00189a8:	55                   	push   ebp
c00189a9:	57                   	push   edi
c00189aa:	56                   	push   esi
c00189ab:	53                   	push   ebx
c00189ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00189b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00189b8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189bc:	39 05 20 e5 02 c0    	cmp    DWORD PTR ds:0xc002e520,eax
c00189c2:	75 23                	jne    c00189e7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00189c4:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c00189c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00189cd:	89 06                	mov    DWORD PTR [esi],eax
c00189cf:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c00189d4:	89 07                	mov    DWORD PTR [edi],eax
c00189d6:	a1 24 1b 03 c0       	mov    eax,ds:0xc0031b24
c00189db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00189de:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c00189e3:	89 02                	mov    DWORD PTR [edx],eax
c00189e5:	eb 3f                	jmp    c0018a26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00189e7:	31 c9                	xor    ecx,ecx
c00189e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189ed:	0f a2                	cpuid  
c00189ef:	89 06                	mov    DWORD PTR [esi],eax
c00189f1:	89 1f                	mov    DWORD PTR [edi],ebx
c00189f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189f7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00189fa:	89 10                	mov    DWORD PTR [eax],edx
c00189fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a00:	a3 20 e5 02 c0       	mov    ds:0xc002e520,eax
c0018a05:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a07:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c0018a0c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018a0e:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c0018a13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a16:	a3 24 1b 03 c0       	mov    ds:0xc0031b24,eax
c0018a1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a21:	a3 20 1b 03 c0       	mov    ds:0xc0031b20,eax
c0018a26:	5b                   	pop    ebx
c0018a27:	5e                   	pop    esi
c0018a28:	5f                   	pop    edi
c0018a29:	5d                   	pop    ebp
c0018a2a:	c3                   	ret    
c0018a2b:	90                   	nop

c0018a2c <CPU::cpuidCheckEDX(unsigned int)>:
c0018a2c:	83 ec 10             	sub    esp,0x10
c0018a2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a33:	50                   	push   eax
c0018a34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a38:	50                   	push   eax
c0018a39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a3d:	50                   	push   eax
c0018a3e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a42:	50                   	push   eax
c0018a43:	6a 01                	push   0x1
c0018a45:	e8 5e ff ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a4e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018a52:	0f 95 c0             	setne  al
c0018a55:	83 c4 24             	add    esp,0x24
c0018a58:	c3                   	ret    
c0018a59:	90                   	nop

c0018a5a <CPU::cpuidCheckECX(unsigned int)>:
c0018a5a:	83 ec 10             	sub    esp,0x10
c0018a5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a61:	50                   	push   eax
c0018a62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a66:	50                   	push   eax
c0018a67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6b:	50                   	push   eax
c0018a6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a70:	50                   	push   eax
c0018a71:	6a 01                	push   0x1
c0018a73:	e8 30 ff ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a7c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a80:	0f 95 c0             	setne  al
c0018a83:	83 c4 24             	add    esp,0x24
c0018a86:	c3                   	ret    
c0018a87:	90                   	nop

c0018a88 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018a88:	83 ec 10             	sub    esp,0x10
c0018a8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a8f:	50                   	push   eax
c0018a90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a94:	50                   	push   eax
c0018a95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a99:	50                   	push   eax
c0018a9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a9e:	50                   	push   eax
c0018a9f:	6a 07                	push   0x7
c0018aa1:	e8 02 ff ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aaa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018aae:	0f 95 c0             	setne  al
c0018ab1:	83 c4 24             	add    esp,0x24
c0018ab4:	c3                   	ret    
c0018ab5:	90                   	nop

c0018ab6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018ab6:	83 ec 10             	sub    esp,0x10
c0018ab9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018abd:	50                   	push   eax
c0018abe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ac2:	50                   	push   eax
c0018ac3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ac7:	50                   	push   eax
c0018ac8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018acc:	50                   	push   eax
c0018acd:	6a 07                	push   0x7
c0018acf:	e8 d4 fe ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ad4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ad8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018adc:	0f 95 c0             	setne  al
c0018adf:	83 c4 24             	add    esp,0x24
c0018ae2:	c3                   	ret    
c0018ae3:	90                   	nop

c0018ae4 <CPU::CPU()>:
c0018ae4:	83 ec 0c             	sub    esp,0xc
c0018ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aeb:	83 ec 08             	sub    esp,0x8
c0018aee:	68 82 c2 02 c0       	push   0xc002c282
c0018af3:	50                   	push   eax
c0018af4:	e8 17 b4 ff ff       	call   c0013f10 <Device::Device(char const*)>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	ba 5c c3 02 c0       	mov    edx,0xc002c35c
c0018b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b05:	89 10                	mov    DWORD PTR [eax],edx
c0018b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b0b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b19:	05 78 01 00 00       	add    eax,0x178
c0018b1e:	83 ec 0c             	sub    esp,0xc
c0018b21:	50                   	push   eax
c0018b22:	e8 7b 65 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b2e:	05 7c 09 00 00       	add    eax,0x97c
c0018b33:	83 ec 0c             	sub    esp,0xc
c0018b36:	50                   	push   eax
c0018b37:	e8 d0 67 ff ff       	call   c000f30c <IDT::IDT()>
c0018b3c:	83 c4 10             	add    esp,0x10
c0018b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b43:	05 7c 11 00 00       	add    eax,0x117c
c0018b48:	83 ec 0c             	sub    esp,0xc
c0018b4b:	50                   	push   eax
c0018b4c:	e8 ad 82 ff ff       	call   c0010dfe <TSS::TSS()>
c0018b51:	83 c4 10             	add    esp,0x10
c0018b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b58:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b63:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b6d:	90                   	nop
c0018b6e:	83 c4 0c             	add    esp,0xc
c0018b71:	c3                   	ret    

c0018b72 <CPU::displayFeatures()>:
c0018b72:	53                   	push   ebx
c0018b73:	83 ec 10             	sub    esp,0x10
c0018b76:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b7a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018b80:	68 90 bf 02 c0       	push   0xc002bf90
c0018b85:	e8 49 9d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018b8a:	59                   	pop    ecx
c0018b8b:	58                   	pop    eax
c0018b8c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018b92:	50                   	push   eax
c0018b93:	68 a1 bf 02 c0       	push   0xc002bfa1
c0018b98:	e8 36 9d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018b9d:	58                   	pop    eax
c0018b9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ba4:	5a                   	pop    edx
c0018ba5:	c1 e8 0e             	shr    eax,0xe
c0018ba8:	0f b6 c0             	movzx  eax,al
c0018bab:	50                   	push   eax
c0018bac:	68 b2 bf 02 c0       	push   0xc002bfb2
c0018bb1:	e8 1d 9d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018bb6:	59                   	pop    ecx
c0018bb7:	58                   	pop    eax
c0018bb8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bbe:	66 c1 e8 06          	shr    ax,0x6
c0018bc2:	0f b6 c0             	movzx  eax,al
c0018bc5:	50                   	push   eax
c0018bc6:	68 c3 bf 02 c0       	push   0xc002bfc3
c0018bcb:	e8 03 9d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018bd0:	c7 04 24 70 c4 02 c0 	mov    DWORD PTR [esp],0xc002c470
c0018bd7:	e8 f7 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018bdc:	83 c4 10             	add    esp,0x10
c0018bdf:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018be4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018beb:	74 05                	je     c0018bf2 <CPU::displayFeatures()+0x80>
c0018bed:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018bf2:	52                   	push   edx
c0018bf3:	52                   	push   edx
c0018bf4:	50                   	push   eax
c0018bf5:	68 d4 bf 02 c0       	push   0xc002bfd4
c0018bfa:	e8 d4 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018bff:	83 c4 10             	add    esp,0x10
c0018c02:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c07:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018c0e:	78 05                	js     c0018c15 <CPU::displayFeatures()+0xa3>
c0018c10:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c15:	51                   	push   ecx
c0018c16:	51                   	push   ecx
c0018c17:	50                   	push   eax
c0018c18:	68 eb bf 02 c0       	push   0xc002bfeb
c0018c1d:	e8 b1 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c2a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018c31:	75 05                	jne    c0018c38 <CPU::displayFeatures()+0xc6>
c0018c33:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c38:	52                   	push   edx
c0018c39:	52                   	push   edx
c0018c3a:	50                   	push   eax
c0018c3b:	68 02 c0 02 c0       	push   0xc002c002
c0018c40:	e8 8e 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c4d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018c54:	75 05                	jne    c0018c5b <CPU::displayFeatures()+0xe9>
c0018c56:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c5b:	51                   	push   ecx
c0018c5c:	51                   	push   ecx
c0018c5d:	50                   	push   eax
c0018c5e:	68 19 c0 02 c0       	push   0xc002c019
c0018c63:	e8 6b 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018c68:	83 c4 10             	add    esp,0x10
c0018c6b:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c70:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018c77:	75 05                	jne    c0018c7e <CPU::displayFeatures()+0x10c>
c0018c79:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c7e:	52                   	push   edx
c0018c7f:	52                   	push   edx
c0018c80:	50                   	push   eax
c0018c81:	68 30 c0 02 c0       	push   0xc002c030
c0018c86:	e8 48 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018c8b:	83 c4 10             	add    esp,0x10
c0018c8e:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c93:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018c9a:	75 05                	jne    c0018ca1 <CPU::displayFeatures()+0x12f>
c0018c9c:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018ca1:	51                   	push   ecx
c0018ca2:	51                   	push   ecx
c0018ca3:	50                   	push   eax
c0018ca4:	68 47 c0 02 c0       	push   0xc002c047
c0018ca9:	e8 25 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018cae:	83 c4 10             	add    esp,0x10
c0018cb1:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cb6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018cbd:	75 05                	jne    c0018cc4 <CPU::displayFeatures()+0x152>
c0018cbf:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018cc4:	52                   	push   edx
c0018cc5:	52                   	push   edx
c0018cc6:	50                   	push   eax
c0018cc7:	68 5e c0 02 c0       	push   0xc002c05e
c0018ccc:	e8 02 9c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018cd1:	83 c4 10             	add    esp,0x10
c0018cd4:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cd9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018ce0:	75 05                	jne    c0018ce7 <CPU::displayFeatures()+0x175>
c0018ce2:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018ce7:	51                   	push   ecx
c0018ce8:	51                   	push   ecx
c0018ce9:	50                   	push   eax
c0018cea:	68 75 c0 02 c0       	push   0xc002c075
c0018cef:	e8 df 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018cf4:	83 c4 10             	add    esp,0x10
c0018cf7:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cfc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018d03:	75 05                	jne    c0018d0a <CPU::displayFeatures()+0x198>
c0018d05:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d0a:	52                   	push   edx
c0018d0b:	52                   	push   edx
c0018d0c:	50                   	push   eax
c0018d0d:	68 8c c0 02 c0       	push   0xc002c08c
c0018d12:	e8 bc 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018d17:	83 c4 10             	add    esp,0x10
c0018d1a:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d1f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018d26:	75 05                	jne    c0018d2d <CPU::displayFeatures()+0x1bb>
c0018d28:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d2d:	51                   	push   ecx
c0018d2e:	51                   	push   ecx
c0018d2f:	50                   	push   eax
c0018d30:	68 a3 c0 02 c0       	push   0xc002c0a3
c0018d35:	e8 99 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018d3a:	83 c4 10             	add    esp,0x10
c0018d3d:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d42:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018d49:	75 05                	jne    c0018d50 <CPU::displayFeatures()+0x1de>
c0018d4b:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d50:	52                   	push   edx
c0018d51:	52                   	push   edx
c0018d52:	50                   	push   eax
c0018d53:	68 ba c0 02 c0       	push   0xc002c0ba
c0018d58:	e8 76 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018d5d:	83 c4 10             	add    esp,0x10
c0018d60:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d65:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018d6c:	75 05                	jne    c0018d73 <CPU::displayFeatures()+0x201>
c0018d6e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d73:	51                   	push   ecx
c0018d74:	51                   	push   ecx
c0018d75:	50                   	push   eax
c0018d76:	68 d1 c0 02 c0       	push   0xc002c0d1
c0018d7b:	e8 53 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018d80:	83 c4 10             	add    esp,0x10
c0018d83:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d88:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018d8f:	75 05                	jne    c0018d96 <CPU::displayFeatures()+0x224>
c0018d91:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d96:	52                   	push   edx
c0018d97:	52                   	push   edx
c0018d98:	50                   	push   eax
c0018d99:	68 e8 c0 02 c0       	push   0xc002c0e8
c0018d9e:	e8 30 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018da3:	83 c4 10             	add    esp,0x10
c0018da6:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018dab:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018db2:	78 05                	js     c0018db9 <CPU::displayFeatures()+0x247>
c0018db4:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018db9:	51                   	push   ecx
c0018dba:	51                   	push   ecx
c0018dbb:	50                   	push   eax
c0018dbc:	68 ff c0 02 c0       	push   0xc002c0ff
c0018dc1:	e8 0d 9b ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018dce:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018dd5:	75 05                	jne    c0018ddc <CPU::displayFeatures()+0x26a>
c0018dd7:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018ddc:	52                   	push   edx
c0018ddd:	52                   	push   edx
c0018dde:	50                   	push   eax
c0018ddf:	68 16 c1 02 c0       	push   0xc002c116
c0018de4:	e8 ea 9a ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0018de9:	83 c4 18             	add    esp,0x18
c0018dec:	5b                   	pop    ebx
c0018ded:	c3                   	ret    

c0018dee <CPU::detectFeatures()>:
c0018dee:	55                   	push   ebp
c0018def:	57                   	push   edi
c0018df0:	56                   	push   esi
c0018df1:	53                   	push   ebx
c0018df2:	83 ec 50             	sub    esp,0x50
c0018df5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018df9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e03:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e0a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e10:	6a 0d                	push   0xd
c0018e12:	6a 00                	push   0x0
c0018e14:	55                   	push   ebp
c0018e15:	e8 36 79 fe ff       	call   c0000750 <memset>
c0018e1a:	83 c4 10             	add    esp,0x10
c0018e1d:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0018e22:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e29:	0f 84 22 09 00 00    	je     c0019751 <CPU::detectFeatures()+0x963>
c0018e2f:	83 ec 0c             	sub    esp,0xc
c0018e32:	89 ef                	mov    edi,ebp
c0018e34:	6a 10                	push   0x10
c0018e36:	e8 f1 fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018e3b:	83 e0 01             	and    eax,0x1
c0018e3e:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e47:	83 e0 fd             	and    eax,0xfffffffd
c0018e4a:	09 d0                	or     eax,edx
c0018e4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e52:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e59:	e8 ce fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018e5e:	83 e0 01             	and    eax,0x1
c0018e61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e68:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e6e:	83 e0 fb             	and    eax,0xfffffffb
c0018e71:	09 d0                	or     eax,edx
c0018e73:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e79:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e80:	e8 a7 fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018e85:	83 e0 01             	and    eax,0x1
c0018e88:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e95:	83 e0 f7             	and    eax,0xfffffff7
c0018e98:	09 d0                	or     eax,edx
c0018e9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ea0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018ea7:	e8 80 fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018eac:	83 e0 01             	and    eax,0x1
c0018eaf:	c1 e0 04             	shl    eax,0x4
c0018eb2:	88 c2                	mov    dl,al
c0018eb4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eba:	83 e0 ef             	and    eax,0xffffffef
c0018ebd:	09 d0                	or     eax,edx
c0018ebf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ec5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ecc:	e8 5b fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018ed1:	83 e0 01             	and    eax,0x1
c0018ed4:	c1 e0 05             	shl    eax,0x5
c0018ed7:	88 c2                	mov    dl,al
c0018ed9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018edf:	83 e0 df             	and    eax,0xffffffdf
c0018ee2:	09 d0                	or     eax,edx
c0018ee4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018ef1:	e8 36 fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018ef6:	83 e0 01             	and    eax,0x1
c0018ef9:	8d 14 00             	lea    edx,[eax+eax*1]
c0018efc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f02:	83 e0 fd             	and    eax,0xfffffffd
c0018f05:	09 d0                	or     eax,edx
c0018f07:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f0d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f14:	e8 13 fb ff ff       	call   c0018a2c <CPU::cpuidCheckEDX(unsigned int)>
c0018f19:	83 e0 01             	and    eax,0x1
c0018f1c:	c1 e0 06             	shl    eax,0x6
c0018f1f:	88 c2                	mov    dl,al
c0018f21:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f27:	83 e0 bf             	and    eax,0xffffffbf
c0018f2a:	09 d0                	or     eax,edx
c0018f2c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f32:	58                   	pop    eax
c0018f33:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f37:	50                   	push   eax
c0018f38:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f3c:	50                   	push   eax
c0018f3d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f41:	56                   	push   esi
c0018f42:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f46:	50                   	push   eax
c0018f47:	6a 00                	push   0x0
c0018f49:	e8 5a fa ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f4e:	b8 04 00 00 00       	mov    eax,0x4
c0018f53:	89 c1                	mov    ecx,eax
c0018f55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f57:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f5d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f61:	89 c1                	mov    ecx,eax
c0018f63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f65:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f6b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f6f:	89 c1                	mov    ecx,eax
c0018f71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f73:	83 c4 18             	add    esp,0x18
c0018f76:	68 2d c1 02 c0       	push   0xc002c12d
c0018f7b:	55                   	push   ebp
c0018f7c:	e8 17 79 fe ff       	call   c0000898 <strcmp>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	85 c0                	test   eax,eax
c0018f86:	75 0f                	jne    c0018f97 <CPU::detectFeatures()+0x1a9>
c0018f88:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018f92:	e9 22 02 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0018f97:	50                   	push   eax
c0018f98:	50                   	push   eax
c0018f99:	68 3a c1 02 c0       	push   0xc002c13a
c0018f9e:	55                   	push   ebp
c0018f9f:	e8 f4 78 fe ff       	call   c0000898 <strcmp>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	85 c0                	test   eax,eax
c0018fa9:	74 dd                	je     c0018f88 <CPU::detectFeatures()+0x19a>
c0018fab:	50                   	push   eax
c0018fac:	50                   	push   eax
c0018fad:	68 47 c1 02 c0       	push   0xc002c147
c0018fb2:	55                   	push   ebp
c0018fb3:	e8 e0 78 fe ff       	call   c0000898 <strcmp>
c0018fb8:	83 c4 10             	add    esp,0x10
c0018fbb:	85 c0                	test   eax,eax
c0018fbd:	74 2a                	je     c0018fe9 <CPU::detectFeatures()+0x1fb>
c0018fbf:	50                   	push   eax
c0018fc0:	50                   	push   eax
c0018fc1:	68 54 c1 02 c0       	push   0xc002c154
c0018fc6:	55                   	push   ebp
c0018fc7:	e8 cc 78 fe ff       	call   c0000898 <strcmp>
c0018fcc:	83 c4 10             	add    esp,0x10
c0018fcf:	85 c0                	test   eax,eax
c0018fd1:	74 16                	je     c0018fe9 <CPU::detectFeatures()+0x1fb>
c0018fd3:	50                   	push   eax
c0018fd4:	50                   	push   eax
c0018fd5:	68 61 c1 02 c0       	push   0xc002c161
c0018fda:	55                   	push   ebp
c0018fdb:	e8 b8 78 fe ff       	call   c0000898 <strcmp>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	85 c0                	test   eax,eax
c0018fe5:	74 48                	je     c001902f <CPU::detectFeatures()+0x241>
c0018fe7:	eb 0f                	jmp    c0018ff8 <CPU::detectFeatures()+0x20a>
c0018fe9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018ff3:	e9 c1 01 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0018ff8:	50                   	push   eax
c0018ff9:	50                   	push   eax
c0018ffa:	68 6e c1 02 c0       	push   0xc002c16e
c0018fff:	55                   	push   ebp
c0019000:	e8 93 78 fe ff       	call   c0000898 <strcmp>
c0019005:	83 c4 10             	add    esp,0x10
c0019008:	85 c0                	test   eax,eax
c001900a:	74 23                	je     c001902f <CPU::detectFeatures()+0x241>
c001900c:	57                   	push   edi
c001900d:	57                   	push   edi
c001900e:	68 7b c1 02 c0       	push   0xc002c17b
c0019013:	55                   	push   ebp
c0019014:	e8 7f 78 fe ff       	call   c0000898 <strcmp>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	85 c0                	test   eax,eax
c001901e:	75 1e                	jne    c001903e <CPU::detectFeatures()+0x250>
c0019020:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001902a:	e9 8a 01 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c001902f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019039:	e9 7b 01 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c001903e:	56                   	push   esi
c001903f:	56                   	push   esi
c0019040:	68 88 c1 02 c0       	push   0xc002c188
c0019045:	55                   	push   ebp
c0019046:	e8 4d 78 fe ff       	call   c0000898 <strcmp>
c001904b:	83 c4 10             	add    esp,0x10
c001904e:	85 c0                	test   eax,eax
c0019050:	75 0f                	jne    c0019061 <CPU::detectFeatures()+0x273>
c0019052:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001905c:	e9 58 01 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0019061:	51                   	push   ecx
c0019062:	51                   	push   ecx
c0019063:	68 47 c1 02 c0       	push   0xc002c147
c0019068:	55                   	push   ebp
c0019069:	e8 2a 78 fe ff       	call   c0000898 <strcmp>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	85 c0                	test   eax,eax
c0019073:	75 0f                	jne    c0019084 <CPU::detectFeatures()+0x296>
c0019075:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001907f:	e9 35 01 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0019084:	52                   	push   edx
c0019085:	52                   	push   edx
c0019086:	68 95 c1 02 c0       	push   0xc002c195
c001908b:	55                   	push   ebp
c001908c:	e8 07 78 fe ff       	call   c0000898 <strcmp>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	85 c0                	test   eax,eax
c0019096:	75 0f                	jne    c00190a7 <CPU::detectFeatures()+0x2b9>
c0019098:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00190a2:	e9 12 01 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c00190a7:	50                   	push   eax
c00190a8:	50                   	push   eax
c00190a9:	68 a2 c1 02 c0       	push   0xc002c1a2
c00190ae:	55                   	push   ebp
c00190af:	e8 e4 77 fe ff       	call   c0000898 <strcmp>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	85 c0                	test   eax,eax
c00190b9:	75 0f                	jne    c00190ca <CPU::detectFeatures()+0x2dc>
c00190bb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190c5:	e9 ef 00 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c00190ca:	50                   	push   eax
c00190cb:	50                   	push   eax
c00190cc:	68 af c1 02 c0       	push   0xc002c1af
c00190d1:	55                   	push   ebp
c00190d2:	e8 c1 77 fe ff       	call   c0000898 <strcmp>
c00190d7:	83 c4 10             	add    esp,0x10
c00190da:	85 c0                	test   eax,eax
c00190dc:	75 0f                	jne    c00190ed <CPU::detectFeatures()+0x2ff>
c00190de:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00190e8:	e9 cc 00 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c00190ed:	50                   	push   eax
c00190ee:	50                   	push   eax
c00190ef:	68 bc c1 02 c0       	push   0xc002c1bc
c00190f4:	55                   	push   ebp
c00190f5:	e8 9e 77 fe ff       	call   c0000898 <strcmp>
c00190fa:	83 c4 10             	add    esp,0x10
c00190fd:	85 c0                	test   eax,eax
c00190ff:	75 0f                	jne    c0019110 <CPU::detectFeatures()+0x322>
c0019101:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001910b:	e9 a9 00 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0019110:	50                   	push   eax
c0019111:	50                   	push   eax
c0019112:	68 c9 c1 02 c0       	push   0xc002c1c9
c0019117:	55                   	push   ebp
c0019118:	e8 7b 77 fe ff       	call   c0000898 <strcmp>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	85 c0                	test   eax,eax
c0019122:	75 0f                	jne    c0019133 <CPU::detectFeatures()+0x345>
c0019124:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001912e:	e9 86 00 00 00       	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0019133:	50                   	push   eax
c0019134:	50                   	push   eax
c0019135:	68 d6 c1 02 c0       	push   0xc002c1d6
c001913a:	55                   	push   ebp
c001913b:	e8 58 77 fe ff       	call   c0000898 <strcmp>
c0019140:	83 c4 10             	add    esp,0x10
c0019143:	85 c0                	test   eax,eax
c0019145:	75 0c                	jne    c0019153 <CPU::detectFeatures()+0x365>
c0019147:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019151:	eb 66                	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0019153:	50                   	push   eax
c0019154:	50                   	push   eax
c0019155:	68 e3 c1 02 c0       	push   0xc002c1e3
c001915a:	55                   	push   ebp
c001915b:	e8 38 77 fe ff       	call   c0000898 <strcmp>
c0019160:	83 c4 10             	add    esp,0x10
c0019163:	85 c0                	test   eax,eax
c0019165:	75 0c                	jne    c0019173 <CPU::detectFeatures()+0x385>
c0019167:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019171:	eb 46                	jmp    c00191b9 <CPU::detectFeatures()+0x3cb>
c0019173:	57                   	push   edi
c0019174:	57                   	push   edi
c0019175:	68 f0 c1 02 c0       	push   0xc002c1f0
c001917a:	55                   	push   ebp
c001917b:	e8 18 77 fe ff       	call   c0000898 <strcmp>
c0019180:	83 c4 10             	add    esp,0x10
c0019183:	85 c0                	test   eax,eax
c0019185:	74 e0                	je     c0019167 <CPU::detectFeatures()+0x379>
c0019187:	56                   	push   esi
c0019188:	56                   	push   esi
c0019189:	68 fd c1 02 c0       	push   0xc002c1fd
c001918e:	55                   	push   ebp
c001918f:	e8 04 77 fe ff       	call   c0000898 <strcmp>
c0019194:	83 c4 10             	add    esp,0x10
c0019197:	85 c0                	test   eax,eax
c0019199:	74 cc                	je     c0019167 <CPU::detectFeatures()+0x379>
c001919b:	51                   	push   ecx
c001919c:	51                   	push   ecx
c001919d:	68 0a c2 02 c0       	push   0xc002c20a
c00191a2:	55                   	push   ebp
c00191a3:	e8 f0 76 fe ff       	call   c0000898 <strcmp>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	85 c0                	test   eax,eax
c00191ad:	74 b8                	je     c0019167 <CPU::detectFeatures()+0x379>
c00191af:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191b9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191be:	0f 86 be 00 00 00    	jbe    c0019282 <CPU::detectFeatures()+0x494>
c00191c4:	83 ec 0c             	sub    esp,0xc
c00191c7:	68 80 00 00 00       	push   0x80
c00191cc:	e8 b7 f8 ff ff       	call   c0018a88 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191d1:	83 e0 01             	and    eax,0x1
c00191d4:	c1 e0 06             	shl    eax,0x6
c00191d7:	88 c2                	mov    dl,al
c00191d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191df:	83 e0 bf             	and    eax,0xffffffbf
c00191e2:	09 d0                	or     eax,edx
c00191e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191ea:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00191f1:	e8 92 f8 ff ff       	call   c0018a88 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191f6:	83 e0 01             	and    eax,0x1
c00191f9:	c1 e0 04             	shl    eax,0x4
c00191fc:	88 c2                	mov    dl,al
c00191fe:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019204:	83 e0 ef             	and    eax,0xffffffef
c0019207:	09 d0                	or     eax,edx
c0019209:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001920f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019216:	e8 6d f8 ff ff       	call   c0018a88 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001921b:	c1 e0 07             	shl    eax,0x7
c001921e:	88 c2                	mov    dl,al
c0019220:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019226:	83 e0 7f             	and    eax,0x7f
c0019229:	09 d0                	or     eax,edx
c001922b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019231:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019238:	e8 79 f8 ff ff       	call   c0018ab6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001923d:	83 e0 01             	and    eax,0x1
c0019240:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019247:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001924d:	83 e0 f7             	and    eax,0xfffffff7
c0019250:	09 d0                	or     eax,edx
c0019252:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019258:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001925f:	e8 52 f8 ff ff       	call   c0018ab6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019264:	83 c4 10             	add    esp,0x10
c0019267:	83 e0 01             	and    eax,0x1
c001926a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019271:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019277:	83 e0 fb             	and    eax,0xfffffffb
c001927a:	09 d0                	or     eax,edx
c001927c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019282:	83 ec 0c             	sub    esp,0xc
c0019285:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019289:	50                   	push   eax
c001928a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001928e:	50                   	push   eax
c001928f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019293:	56                   	push   esi
c0019294:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019298:	50                   	push   eax
c0019299:	6a 01                	push   0x1
c001929b:	e8 08 f7 ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192aa:	88 ca                	mov    dl,cl
c00192ac:	83 e0 f0             	and    eax,0xfffffff0
c00192af:	83 e2 0f             	and    edx,0xf
c00192b2:	09 d0                	or     eax,edx
c00192b4:	88 ca                	mov    dl,cl
c00192b6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192bc:	c0 ea 04             	shr    dl,0x4
c00192bf:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192c3:	0f b6 c2             	movzx  eax,dl
c00192c6:	83 c4 20             	add    esp,0x20
c00192c9:	c1 e0 06             	shl    eax,0x6
c00192cc:	89 c7                	mov    edi,eax
c00192ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192d4:	66 25 3f c0          	and    ax,0xc03f
c00192d8:	09 f8                	or     eax,edi
c00192da:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192e1:	89 c8                	mov    eax,ecx
c00192e3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00192ea:	c1 e8 08             	shr    eax,0x8
c00192ed:	83 e5 3f             	and    ebp,0x3f
c00192f0:	83 e0 0f             	and    eax,0xf
c00192f3:	89 c7                	mov    edi,eax
c00192f5:	c1 e7 06             	shl    edi,0x6
c00192f8:	09 ef                	or     edi,ebp
c00192fa:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019301:	89 fa                	mov    edx,edi
c0019303:	83 e5 c0             	and    ebp,0xffffffc0
c0019306:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001930c:	88 c2                	mov    dl,al
c001930e:	c0 ea 02             	shr    dl,0x2
c0019311:	89 d7                	mov    edi,edx
c0019313:	09 ef                	or     edi,ebp
c0019315:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001931b:	89 fa                	mov    edx,edi
c001931d:	83 e5 cf             	and    ebp,0xffffffcf
c0019320:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019326:	89 cf                	mov    edi,ecx
c0019328:	c1 ef 0c             	shr    edi,0xc
c001932b:	83 e7 03             	and    edi,0x3
c001932e:	c1 e7 04             	shl    edi,0x4
c0019331:	09 ef                	or     edi,ebp
c0019333:	3c 06                	cmp    al,0x6
c0019335:	89 fa                	mov    edx,edi
c0019337:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001933d:	74 04                	je     c0019343 <CPU::detectFeatures()+0x555>
c001933f:	3c 0f                	cmp    al,0xf
c0019341:	75 5c                	jne    c001939f <CPU::detectFeatures()+0x5b1>
c0019343:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019347:	89 cf                	mov    edi,ecx
c0019349:	c1 ef 10             	shr    edi,0x10
c001934c:	c1 e7 04             	shl    edi,0x4
c001934f:	09 fa                	or     edx,edi
c0019351:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019357:	0f b6 d2             	movzx  edx,dl
c001935a:	66 81 e7 3f c0       	and    di,0xc03f
c001935f:	c1 e2 06             	shl    edx,0x6
c0019362:	09 fa                	or     edx,edi
c0019364:	3c 0f                	cmp    al,0xf
c0019366:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001936d:	75 30                	jne    c001939f <CPU::detectFeatures()+0x5b1>
c001936f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019375:	c1 e9 14             	shr    ecx,0x14
c0019378:	83 e0 3f             	and    eax,0x3f
c001937b:	83 c1 0f             	add    ecx,0xf
c001937e:	88 ca                	mov    dl,cl
c0019380:	c0 e9 02             	shr    cl,0x2
c0019383:	c1 e2 06             	shl    edx,0x6
c0019386:	09 d0                	or     eax,edx
c0019388:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001938e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019394:	83 e0 c0             	and    eax,0xffffffc0
c0019397:	09 c1                	or     ecx,eax
c0019399:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001939f:	83 ec 0c             	sub    esp,0xc
c00193a2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193ad:	50                   	push   eax
c00193ae:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193b2:	55                   	push   ebp
c00193b3:	56                   	push   esi
c00193b4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193b8:	57                   	push   edi
c00193b9:	68 00 00 00 80       	push   0x80000000
c00193be:	e8 e5 f5 ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193c3:	83 c4 20             	add    esp,0x20
c00193c6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193ce:	76 22                	jbe    c00193f2 <CPU::detectFeatures()+0x604>
c00193d0:	83 ec 0c             	sub    esp,0xc
c00193d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193d7:	50                   	push   eax
c00193d8:	55                   	push   ebp
c00193d9:	56                   	push   esi
c00193da:	57                   	push   edi
c00193db:	68 01 00 00 80       	push   0x80000001
c00193e0:	e8 c3 f5 ff ff       	call   c00189a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193e5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00193ef:	83 c4 20             	add    esp,0x20
c00193f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00193f8:	83 f8 01             	cmp    eax,0x1
c00193fb:	75 6f                	jne    c001946c <CPU::detectFeatures()+0x67e>
c00193fd:	51                   	push   ecx
c00193fe:	51                   	push   ecx
c00193ff:	68 16 c2 02 c0       	push   0xc002c216
c0019404:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019408:	56                   	push   esi
c0019409:	e8 fe 73 fe ff       	call   c000080c <strcpy>
c001940e:	5f                   	pop    edi
c001940f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019415:	5d                   	pop    ebp
c0019416:	66 c1 e8 06          	shr    ax,0x6
c001941a:	0f b6 c0             	movzx  eax,al
c001941d:	50                   	push   eax
c001941e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019424:	c1 e8 0e             	shr    eax,0xe
c0019427:	0f b6 c0             	movzx  eax,al
c001942a:	50                   	push   eax
c001942b:	e8 22 f2 ff ff       	call   c0018652 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019430:	5a                   	pop    edx
c0019431:	59                   	pop    ecx
c0019432:	50                   	push   eax
c0019433:	56                   	push   esi
c0019434:	e8 13 75 fe ff       	call   c000094c <strcat>
c0019439:	5f                   	pop    edi
c001943a:	5d                   	pop    ebp
c001943b:	56                   	push   esi
c001943c:	53                   	push   ebx
c001943d:	e8 c0 aa ff ff       	call   c0013f02 <Device::setName(char const*)>
c0019442:	58                   	pop    eax
c0019443:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019449:	5a                   	pop    edx
c001944a:	68 1d c2 02 c0       	push   0xc002c21d
c001944f:	50                   	push   eax
c0019450:	e8 43 74 fe ff       	call   c0000898 <strcmp>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	85 c0                	test   eax,eax
c001945a:	0f 85 71 03 00 00    	jne    c00197d1 <CPU::detectFeatures()+0x9e3>
c0019460:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019467:	e9 65 03 00 00       	jmp    c00197d1 <CPU::detectFeatures()+0x9e3>
c001946c:	83 f8 02             	cmp    eax,0x2
c001946f:	0f 85 b5 00 00 00    	jne    c001952a <CPU::detectFeatures()+0x73c>
c0019475:	57                   	push   edi
c0019476:	57                   	push   edi
c0019477:	68 2f c2 02 c0       	push   0xc002c22f
c001947c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019480:	56                   	push   esi
c0019481:	e8 86 73 fe ff       	call   c000080c <strcpy>
c0019486:	5d                   	pop    ebp
c0019487:	58                   	pop    eax
c0019488:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001948e:	66 c1 e8 06          	shr    ax,0x6
c0019492:	0f b6 c0             	movzx  eax,al
c0019495:	50                   	push   eax
c0019496:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001949c:	c1 e8 0e             	shr    eax,0xe
c001949f:	0f b6 c0             	movzx  eax,al
c00194a2:	50                   	push   eax
c00194a3:	e8 16 f0 ff ff       	call   c00184be <CPU::lookupAMDName(unsigned char, unsigned char)>
c00194a8:	5a                   	pop    edx
c00194a9:	59                   	pop    ecx
c00194aa:	50                   	push   eax
c00194ab:	56                   	push   esi
c00194ac:	e8 9b 74 fe ff       	call   c000094c <strcat>
c00194b1:	5f                   	pop    edi
c00194b2:	5d                   	pop    ebp
c00194b3:	56                   	push   esi
c00194b4:	53                   	push   ebx
c00194b5:	e8 48 aa ff ff       	call   c0013f02 <Device::setName(char const*)>
c00194ba:	58                   	pop    eax
c00194bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194c1:	5a                   	pop    edx
c00194c2:	68 34 c2 02 c0       	push   0xc002c234
c00194c7:	50                   	push   eax
c00194c8:	e8 cb 73 fe ff       	call   c0000898 <strcmp>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	85 c0                	test   eax,eax
c00194d2:	75 20                	jne    c00194f4 <CPU::detectFeatures()+0x706>
c00194d4:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c00194da:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00194e0:	a8 01                	test   al,0x1
c00194e2:	74 10                	je     c00194f4 <CPU::detectFeatures()+0x706>
c00194e4:	83 e0 fe             	and    eax,0xfffffffe
c00194e7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00194ed:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00194f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194fa:	c1 e8 0e             	shr    eax,0xe
c00194fd:	3c 05                	cmp    al,0x5
c00194ff:	0f 85 cc 02 00 00    	jne    c00197d1 <CPU::detectFeatures()+0x9e3>
c0019505:	56                   	push   esi
c0019506:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001950c:	83 e0 0f             	and    eax,0xf
c001950f:	50                   	push   eax
c0019510:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019516:	66 c1 e8 06          	shr    ax,0x6
c001951a:	0f b6 c0             	movzx  eax,al
c001951d:	50                   	push   eax
c001951e:	6a 05                	push   0x5
c0019520:	e8 0f f4 ff ff       	call   c0018934 <CPU::AMD_K6_writeback(int, int, int)>
c0019525:	e9 1f 02 00 00       	jmp    c0019749 <CPU::detectFeatures()+0x95b>
c001952a:	8d 50 fd             	lea    edx,[eax-0x3]
c001952d:	83 fa 01             	cmp    edx,0x1
c0019530:	76 09                	jbe    c001953b <CPU::detectFeatures()+0x74d>
c0019532:	83 f8 06             	cmp    eax,0x6
c0019535:	0f 85 91 01 00 00    	jne    c00196cc <CPU::detectFeatures()+0x8de>
c001953b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019541:	c1 ea 0e             	shr    edx,0xe
c0019544:	80 fa 05             	cmp    dl,0x5
c0019547:	75 7b                	jne    c00195c4 <CPU::detectFeatures()+0x7d6>
c0019549:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001954f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019554:	66 81 fa 00 01       	cmp    dx,0x100
c0019559:	75 0c                	jne    c0019567 <CPU::detectFeatures()+0x779>
c001955b:	51                   	push   ecx
c001955c:	51                   	push   ecx
c001955d:	68 3b c2 02 c0       	push   0xc002c23b
c0019562:	e9 dc 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019567:	66 81 fa 00 02       	cmp    dx,0x200
c001956c:	75 0c                	jne    c001957a <CPU::detectFeatures()+0x78c>
c001956e:	52                   	push   edx
c001956f:	52                   	push   edx
c0019570:	68 4e c2 02 c0       	push   0xc002c24e
c0019575:	e9 c9 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c001957a:	66 81 fa 40 02       	cmp    dx,0x240
c001957f:	75 0c                	jne    c001958d <CPU::detectFeatures()+0x79f>
c0019581:	50                   	push   eax
c0019582:	50                   	push   eax
c0019583:	68 60 c2 02 c0       	push   0xc002c260
c0019588:	e9 b6 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c001958d:	83 f8 06             	cmp    eax,0x6
c0019590:	75 0c                	jne    c001959e <CPU::detectFeatures()+0x7b0>
c0019592:	50                   	push   eax
c0019593:	50                   	push   eax
c0019594:	68 72 c2 02 c0       	push   0xc002c272
c0019599:	e9 a5 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c001959e:	83 f8 04             	cmp    eax,0x4
c00195a1:	75 0c                	jne    c00195af <CPU::detectFeatures()+0x7c1>
c00195a3:	50                   	push   eax
c00195a4:	50                   	push   eax
c00195a5:	68 7e c2 02 c0       	push   0xc002c27e
c00195aa:	e9 94 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00195af:	83 f8 03             	cmp    eax,0x3
c00195b2:	0f 85 19 02 00 00    	jne    c00197d1 <CPU::detectFeatures()+0x9e3>
c00195b8:	50                   	push   eax
c00195b9:	50                   	push   eax
c00195ba:	68 86 c2 02 c0       	push   0xc002c286
c00195bf:	e9 7f 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00195c4:	80 fa 06             	cmp    dl,0x6
c00195c7:	0f 85 db 00 00 00    	jne    c00196a8 <CPU::detectFeatures()+0x8ba>
c00195cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195d8:	66 81 fa 80 01       	cmp    dx,0x180
c00195dd:	75 0c                	jne    c00195eb <CPU::detectFeatures()+0x7fd>
c00195df:	50                   	push   eax
c00195e0:	50                   	push   eax
c00195e1:	68 91 c2 02 c0       	push   0xc002c291
c00195e6:	e9 58 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00195eb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00195f1:	66 f7 c1 80 ff       	test   cx,0xff80
c00195f6:	75 0c                	jne    c0019604 <CPU::detectFeatures()+0x816>
c00195f8:	50                   	push   eax
c00195f9:	50                   	push   eax
c00195fa:	68 a1 c2 02 c0       	push   0xc002c2a1
c00195ff:	e9 3f 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019604:	66 81 fa 40 02       	cmp    dx,0x240
c0019609:	75 0c                	jne    c0019617 <CPU::detectFeatures()+0x829>
c001960b:	55                   	push   ebp
c001960c:	55                   	push   ebp
c001960d:	68 a8 c2 02 c0       	push   0xc002c2a8
c0019612:	e9 2c 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019617:	66 81 fa 80 02       	cmp    dx,0x280
c001961c:	75 0c                	jne    c001962a <CPU::detectFeatures()+0x83c>
c001961e:	57                   	push   edi
c001961f:	57                   	push   edi
c0019620:	68 b1 c2 02 c0       	push   0xc002c2b1
c0019625:	e9 19 01 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c001962a:	66 81 fa 40 03       	cmp    dx,0x340
c001962f:	74 ed                	je     c001961e <CPU::detectFeatures()+0x830>
c0019631:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019636:	75 0c                	jne    c0019644 <CPU::detectFeatures()+0x856>
c0019638:	56                   	push   esi
c0019639:	56                   	push   esi
c001963a:	68 b8 c2 02 c0       	push   0xc002c2b8
c001963f:	e9 ff 00 00 00       	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019644:	83 f8 06             	cmp    eax,0x6
c0019647:	0f 84 45 ff ff ff    	je     c0019592 <CPU::detectFeatures()+0x7a4>
c001964d:	83 f8 04             	cmp    eax,0x4
c0019650:	0f 84 4d ff ff ff    	je     c00195a3 <CPU::detectFeatures()+0x7b5>
c0019656:	83 f8 03             	cmp    eax,0x3
c0019659:	0f 85 72 01 00 00    	jne    c00197d1 <CPU::detectFeatures()+0x9e3>
c001965f:	51                   	push   ecx
c0019660:	51                   	push   ecx
c0019661:	68 c1 c2 02 c0       	push   0xc002c2c1
c0019666:	53                   	push   ebx
c0019667:	e8 96 a8 ff ff       	call   c0013f02 <Device::setName(char const*)>
c001966c:	b1 c1                	mov    cl,0xc1
c001966e:	88 c8                	mov    al,cl
c0019670:	e6 22                	out    0x22,al
c0019672:	e4 23                	in     al,0x23
c0019674:	88 c2                	mov    dl,al
c0019676:	88 c8                	mov    al,cl
c0019678:	e6 22                	out    0x22,al
c001967a:	88 d0                	mov    al,dl
c001967c:	83 c8 10             	or     eax,0x10
c001967f:	e6 23                	out    0x23,al
c0019681:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019688:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001968b:	89 d0                	mov    eax,edx
c001968d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019693:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019697:	40                   	inc    eax
c0019698:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001969e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00196a3:	e9 a1 00 00 00       	jmp    c0019749 <CPU::detectFeatures()+0x95b>
c00196a8:	83 f8 06             	cmp    eax,0x6
c00196ab:	0f 84 e1 fe ff ff    	je     c0019592 <CPU::detectFeatures()+0x7a4>
c00196b1:	83 f8 04             	cmp    eax,0x4
c00196b4:	0f 84 e9 fe ff ff    	je     c00195a3 <CPU::detectFeatures()+0x7b5>
c00196ba:	83 f8 03             	cmp    eax,0x3
c00196bd:	0f 85 0e 01 00 00    	jne    c00197d1 <CPU::detectFeatures()+0x9e3>
c00196c3:	52                   	push   edx
c00196c4:	52                   	push   edx
c00196c5:	68 cc c2 02 c0       	push   0xc002c2cc
c00196ca:	eb 77                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00196cc:	83 f8 07             	cmp    eax,0x7
c00196cf:	75 09                	jne    c00196da <CPU::detectFeatures()+0x8ec>
c00196d1:	50                   	push   eax
c00196d2:	50                   	push   eax
c00196d3:	68 d6 c2 02 c0       	push   0xc002c2d6
c00196d8:	eb 69                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00196da:	83 f8 0a             	cmp    eax,0xa
c00196dd:	75 09                	jne    c00196e8 <CPU::detectFeatures()+0x8fa>
c00196df:	50                   	push   eax
c00196e0:	50                   	push   eax
c00196e1:	68 e1 c2 02 c0       	push   0xc002c2e1
c00196e6:	eb 5b                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00196e8:	83 f8 0b             	cmp    eax,0xb
c00196eb:	75 09                	jne    c00196f6 <CPU::detectFeatures()+0x908>
c00196ed:	50                   	push   eax
c00196ee:	50                   	push   eax
c00196ef:	68 e9 c2 02 c0       	push   0xc002c2e9
c00196f4:	eb 4d                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c00196f6:	83 f8 08             	cmp    eax,0x8
c00196f9:	75 09                	jne    c0019704 <CPU::detectFeatures()+0x916>
c00196fb:	50                   	push   eax
c00196fc:	50                   	push   eax
c00196fd:	68 f2 c2 02 c0       	push   0xc002c2f2
c0019702:	eb 3f                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019704:	83 f8 09             	cmp    eax,0x9
c0019707:	75 09                	jne    c0019712 <CPU::detectFeatures()+0x924>
c0019709:	50                   	push   eax
c001970a:	50                   	push   eax
c001970b:	68 fa c2 02 c0       	push   0xc002c2fa
c0019710:	eb 31                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019712:	83 f8 05             	cmp    eax,0x5
c0019715:	75 09                	jne    c0019720 <CPU::detectFeatures()+0x932>
c0019717:	50                   	push   eax
c0019718:	50                   	push   eax
c0019719:	68 02 c3 02 c0       	push   0xc002c302
c001971e:	eb 23                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c0019720:	83 f8 0c             	cmp    eax,0xc
c0019723:	75 09                	jne    c001972e <CPU::detectFeatures()+0x940>
c0019725:	55                   	push   ebp
c0019726:	55                   	push   ebp
c0019727:	68 10 c3 02 c0       	push   0xc002c310
c001972c:	eb 15                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c001972e:	83 f8 0d             	cmp    eax,0xd
c0019731:	75 09                	jne    c001973c <CPU::detectFeatures()+0x94e>
c0019733:	57                   	push   edi
c0019734:	57                   	push   edi
c0019735:	68 1b c3 02 c0       	push   0xc002c31b
c001973a:	eb 07                	jmp    c0019743 <CPU::detectFeatures()+0x955>
c001973c:	56                   	push   esi
c001973d:	56                   	push   esi
c001973e:	68 2f c3 02 c0       	push   0xc002c32f
c0019743:	53                   	push   ebx
c0019744:	e8 b9 a7 ff ff       	call   c0013f02 <Device::setName(char const*)>
c0019749:	83 c4 10             	add    esp,0x10
c001974c:	e9 80 00 00 00       	jmp    c00197d1 <CPU::detectFeatures()+0x9e3>
c0019751:	51                   	push   ecx
c0019752:	51                   	push   ecx
c0019753:	68 7b c1 02 c0       	push   0xc002c17b
c0019758:	55                   	push   ebp
c0019759:	e8 ae 70 fe ff       	call   c000080c <strcpy>
c001975e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019768:	e8 41 6b fe ff       	call   c00002ae <is486>
c001976d:	83 c4 10             	add    esp,0x10
c0019770:	85 c0                	test   eax,eax
c0019772:	74 2b                	je     c001979f <CPU::detectFeatures()+0x9b1>
c0019774:	52                   	push   edx
c0019775:	52                   	push   edx
c0019776:	68 3b c3 02 c0       	push   0xc002c33b
c001977b:	53                   	push   ebx
c001977c:	e8 81 a7 ff ff       	call   c0013f02 <Device::setName(char const*)>
c0019781:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019788:	0f 20 c0             	mov    eax,cr0
c001978b:	83 e0 14             	and    eax,0x14
c001978e:	83 c4 10             	add    esp,0x10
c0019791:	83 f8 04             	cmp    eax,0x4
c0019794:	75 1f                	jne    c00197b5 <CPU::detectFeatures()+0x9c7>
c0019796:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001979d:	eb 32                	jmp    c00197d1 <CPU::detectFeatures()+0x9e3>
c001979f:	50                   	push   eax
c00197a0:	50                   	push   eax
c00197a1:	68 46 c3 02 c0       	push   0xc002c346
c00197a6:	53                   	push   ebx
c00197a7:	e8 56 a7 ff ff       	call   c0013f02 <Device::setName(char const*)>
c00197ac:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197b3:	eb d3                	jmp    c0019788 <CPU::detectFeatures()+0x99a>
c00197b5:	e8 cf 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197ba:	83 e0 01             	and    eax,0x1
c00197bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00197c0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197c6:	83 e0 fd             	and    eax,0xfffffffd
c00197c9:	09 d0                	or     eax,edx
c00197cb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197d1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197d8:	83 c4 4c             	add    esp,0x4c
c00197db:	5b                   	pop    ebx
c00197dc:	5e                   	pop    esi
c00197dd:	5f                   	pop    edi
c00197de:	5d                   	pop    ebp
c00197df:	c3                   	ret    

c00197e0 <CPU::setupSMEP()>:
c00197e0:	0f 20 e0             	mov    eax,cr4
c00197e3:	0d 00 00 10 00       	or     eax,0x100000
c00197e8:	0f 22 e0             	mov    cr4,eax
c00197eb:	c3                   	ret    

c00197ec <CPU::setupUMIP()>:
c00197ec:	0f 20 e0             	mov    eax,cr4
c00197ef:	80 cc 08             	or     ah,0x8
c00197f2:	0f 22 e0             	mov    cr4,eax
c00197f5:	c3                   	ret    

c00197f6 <CPU::setupTSC()>:
c00197f6:	0f 20 e0             	mov    eax,cr4
c00197f9:	83 c8 04             	or     eax,0x4
c00197fc:	0f 22 e0             	mov    cr4,eax
c00197ff:	c3                   	ret    

c0019800 <CPU::setupLargePages()>:
c0019800:	0f 20 e0             	mov    eax,cr4
c0019803:	83 c8 10             	or     eax,0x10
c0019806:	0f 22 e0             	mov    cr4,eax
c0019809:	c3                   	ret    

c001980a <CPU::setupPAT()>:
c001980a:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001980f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019816:	74 2c                	je     c0019844 <CPU::setupPAT()+0x3a>
c0019818:	53                   	push   ebx
c0019819:	83 ec 10             	sub    esp,0x10
c001981c:	68 77 02 00 00       	push   0x277
c0019821:	50                   	push   eax
c0019822:	e8 0b 56 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019827:	83 e2 f8             	and    edx,0xfffffff8
c001982a:	83 ca 01             	or     edx,0x1
c001982d:	52                   	push   edx
c001982e:	50                   	push   eax
c001982f:	68 77 02 00 00       	push   0x277
c0019834:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c001983a:	e8 1f 56 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c001983f:	83 c4 28             	add    esp,0x28
c0019842:	5b                   	pop    ebx
c0019843:	c3                   	ret    
c0019844:	c3                   	ret    
c0019845:	90                   	nop

c0019846 <CPU::setupMTRR()>:
c0019846:	c3                   	ret    
c0019847:	90                   	nop

c0019848 <CPU::setupGlobalPages()>:
c0019848:	0f 20 e0             	mov    eax,cr4
c001984b:	0c 80                	or     al,0x80
c001984d:	0f 22 e0             	mov    cr4,eax
c0019850:	c3                   	ret    
c0019851:	90                   	nop

c0019852 <CPU::allowUsermodeDataAccess()>:
c0019852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019856:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001985d:	74 03                	je     c0019862 <CPU::allowUsermodeDataAccess()+0x10>
c001985f:	0f 01 cb             	stac   
c0019862:	c3                   	ret    
c0019863:	90                   	nop

c0019864 <CPU::prohibitUsermodeDataAccess()>:
c0019864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019868:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001986f:	74 03                	je     c0019874 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019871:	0f 01 ca             	clac   
c0019874:	c3                   	ret    
c0019875:	90                   	nop

c0019876 <CPU::setupSMAP()>:
c0019876:	0f 20 e0             	mov    eax,cr4
c0019879:	0d 00 00 20 00       	or     eax,0x200000
c001987e:	0f 22 e0             	mov    cr4,eax
c0019881:	eb e1                	jmp    c0019864 <CPU::prohibitUsermodeDataAccess()>
c0019883:	90                   	nop

c0019884 <CPU::setupFeatures()>:
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001988b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019892:	74 07                	je     c001989b <CPU::setupFeatures()+0x17>
c0019894:	52                   	push   edx
c0019895:	e8 46 ff ff ff       	call   c00197e0 <CPU::setupSMEP()>
c001989a:	58                   	pop    eax
c001989b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00198a2:	74 07                	je     c00198ab <CPU::setupFeatures()+0x27>
c00198a4:	52                   	push   edx
c00198a5:	e8 cc ff ff ff       	call   c0019876 <CPU::setupSMAP()>
c00198aa:	58                   	pop    eax
c00198ab:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198b2:	74 07                	je     c00198bb <CPU::setupFeatures()+0x37>
c00198b4:	52                   	push   edx
c00198b5:	e8 32 ff ff ff       	call   c00197ec <CPU::setupUMIP()>
c00198ba:	58                   	pop    eax
c00198bb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198c2:	74 07                	je     c00198cb <CPU::setupFeatures()+0x47>
c00198c4:	52                   	push   edx
c00198c5:	e8 2c ff ff ff       	call   c00197f6 <CPU::setupTSC()>
c00198ca:	58                   	pop    eax
c00198cb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198d2:	74 07                	je     c00198db <CPU::setupFeatures()+0x57>
c00198d4:	52                   	push   edx
c00198d5:	e8 26 ff ff ff       	call   c0019800 <CPU::setupLargePages()>
c00198da:	59                   	pop    ecx
c00198db:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00198e2:	74 07                	je     c00198eb <CPU::setupFeatures()+0x67>
c00198e4:	52                   	push   edx
c00198e5:	e8 5e ff ff ff       	call   c0019848 <CPU::setupGlobalPages()>
c00198ea:	58                   	pop    eax
c00198eb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00198f2:	74 0c                	je     c0019900 <CPU::setupFeatures()+0x7c>
c00198f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00198f8:	83 c4 0c             	add    esp,0xc
c00198fb:	e9 0a ff ff ff       	jmp    c001980a <CPU::setupPAT()>
c0019900:	83 c4 0c             	add    esp,0xc
c0019903:	c3                   	ret    

c0019904 <CPU::open(int, int, void*)>:
c0019904:	57                   	push   edi
c0019905:	56                   	push   esi
c0019906:	53                   	push   ebx
c0019907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001990b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001990f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019915:	83 ec 0c             	sub    esp,0xc
c0019918:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001991e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019924:	50                   	push   eax
c0019925:	e8 f4 57 ff ff       	call   c000f11e <GDT::setup()>
c001992a:	83 c4 0c             	add    esp,0xc
c001992d:	6a 00                	push   0x0
c001992f:	68 ef be ad de       	push   0xdeadbeef
c0019934:	57                   	push   edi
c0019935:	e8 04 75 ff ff       	call   c0010e3e <TSS::setup(unsigned long, unsigned long)>
c001993a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001993d:	e8 dc 74 ff ff       	call   c0010e1e <TSS::flush()>
c0019942:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019948:	89 04 24             	mov    DWORD PTR [esp],eax
c001994b:	e8 32 5a ff ff       	call   c000f382 <IDT::setup()>
c0019950:	b8 00 04 00 00       	mov    eax,0x400
c0019955:	0f 23 f8             	mov    db7,eax
c0019958:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019962:	e8 2d 62 ff ff       	call   c000fb94 <Phys::allocatePage()>
c0019967:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001996d:	89 30                	mov    DWORD PTR [eax],esi
c001996f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019975:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019978:	58                   	pop    eax
c0019979:	5a                   	pop    edx
c001997a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019980:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019984:	e8 55 86 ff ff       	call   c0011fde <VAS::setCPUSpecific(unsigned long)>
c0019989:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001998c:	e8 5d f4 ff ff       	call   c0018dee <CPU::detectFeatures()>
c0019991:	e8 9e b9 ff ff       	call   c0015334 <setupInterruptController()>
c0019996:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001999c:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c00199a1:	83 e0 10             	and    eax,0x10
c00199a4:	83 f8 01             	cmp    eax,0x1
c00199a7:	19 c0                	sbb    eax,eax
c00199a9:	83 e0 46             	and    eax,0x46
c00199ac:	83 c0 1e             	add    eax,0x1e
c00199af:	89 04 24             	mov    DWORD PTR [esp],eax
c00199b2:	e8 d4 cf ff ff       	call   c001698b <setupTimer(int)>
c00199b7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00199bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199c0:	e8 bf fe ff ff       	call   c0019884 <CPU::setupFeatures()>
c00199c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199c8:	e8 a5 f1 ff ff       	call   c0018b72 <CPU::displayFeatures()>
c00199cd:	83 c4 10             	add    esp,0x10
c00199d0:	31 c0                	xor    eax,eax
c00199d2:	5b                   	pop    ebx
c00199d3:	5e                   	pop    esi
c00199d4:	5f                   	pop    edi
c00199d5:	c3                   	ret    

c00199d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00199d6:	57                   	push   edi
c00199d7:	56                   	push   esi
c00199d8:	53                   	push   ebx
c00199d9:	51                   	push   ecx
c00199da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199de:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00199e1:	0f 02 c0             	lar    eax,ax
c00199e4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00199e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00199eb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00199ee:	88 ca                	mov    dl,cl
c00199f0:	c0 ea 06             	shr    dl,0x6
c00199f3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00199f7:	89 ca                	mov    edx,ecx
c00199f9:	66 c1 ea 03          	shr    dx,0x3
c00199fd:	83 e2 07             	and    edx,0x7
c0019a00:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019a05:	88 17                	mov    BYTE PTR [edi],dl
c0019a07:	0f 84 a6 01 00 00    	je     c0019bb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019a0d:	83 e1 07             	and    ecx,0x7
c0019a10:	80 f9 04             	cmp    cl,0x4
c0019a13:	0f 84 98 00 00 00    	je     c0019ab1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019a19:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a1e:	0f 95 c0             	setne  al
c0019a21:	80 f9 05             	cmp    cl,0x5
c0019a24:	0f 95 c2             	setne  dl
c0019a27:	08 c2                	or     dl,al
c0019a29:	74 79                	je     c0019aa4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019a2b:	84 c9                	test   cl,cl
c0019a2d:	75 05                	jne    c0019a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019a2f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a32:	eb 3c                	jmp    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a34:	80 f9 01             	cmp    cl,0x1
c0019a37:	75 05                	jne    c0019a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019a39:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a3c:	eb 32                	jmp    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a3e:	80 f9 02             	cmp    cl,0x2
c0019a41:	75 05                	jne    c0019a48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019a43:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a46:	eb 28                	jmp    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a48:	31 c0                	xor    eax,eax
c0019a4a:	80 f9 03             	cmp    cl,0x3
c0019a4d:	75 05                	jne    c0019a54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019a4f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a52:	eb 1c                	jmp    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a54:	80 f9 05             	cmp    cl,0x5
c0019a57:	75 05                	jne    c0019a5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019a59:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a5c:	eb 12                	jmp    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a5e:	80 f9 06             	cmp    cl,0x6
c0019a61:	75 05                	jne    c0019a68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019a63:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a66:	eb 08                	jmp    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a68:	80 f9 07             	cmp    cl,0x7
c0019a6b:	75 03                	jne    c0019a70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a6d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a70:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a75:	75 10                	jne    c0019a87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019a77:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019a7b:	b9 03 00 00 00       	mov    ecx,0x3
c0019a80:	01 d0                	add    eax,edx
c0019a82:	e9 37 01 00 00       	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a87:	b9 02 00 00 00       	mov    ecx,0x2
c0019a8c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019a91:	0f 85 27 01 00 00    	jne    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a97:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019a9a:	b9 06 00 00 00       	mov    ecx,0x6
c0019a9f:	e9 1a 01 00 00       	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aa4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019aa7:	b9 06 00 00 00       	mov    ecx,0x6
c0019aac:	e9 0f 01 00 00       	jmp    c0019bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ab1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019ab4:	88 ca                	mov    dl,cl
c0019ab6:	c0 ea 06             	shr    dl,0x6
c0019ab9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019abd:	89 ca                	mov    edx,ecx
c0019abf:	66 c1 ea 03          	shr    dx,0x3
c0019ac3:	83 e2 07             	and    edx,0x7
c0019ac6:	80 e1 07             	and    cl,0x7
c0019ac9:	75 05                	jne    c0019ad0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019acb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019ace:	eb 4c                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ad0:	80 f9 01             	cmp    cl,0x1
c0019ad3:	75 05                	jne    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019ad5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019ad8:	eb 42                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ada:	80 f9 02             	cmp    cl,0x2
c0019add:	75 05                	jne    c0019ae4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019adf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019ae2:	eb 38                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ae4:	80 f9 03             	cmp    cl,0x3
c0019ae7:	75 05                	jne    c0019aee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019ae9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019aec:	eb 2e                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019aee:	80 f9 04             	cmp    cl,0x4
c0019af1:	75 12                	jne    c0019b05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019af3:	f6 c4 60             	test   ah,0x60
c0019af6:	75 08                	jne    c0019b00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019af8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019afb:	8d 78 14             	lea    edi,[eax+0x14]
c0019afe:	eb 1c                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b00:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019b03:	eb 17                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b05:	80 f9 05             	cmp    cl,0x5
c0019b08:	75 05                	jne    c0019b0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019b0a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019b0d:	eb 0d                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b0f:	80 f9 06             	cmp    cl,0x6
c0019b12:	75 05                	jne    c0019b19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019b14:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019b17:	eb 03                	jmp    c0019b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b19:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019b1c:	84 d2                	test   dl,dl
c0019b1e:	75 05                	jne    c0019b25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019b20:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b23:	eb 3c                	jmp    c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b25:	80 fa 01             	cmp    dl,0x1
c0019b28:	75 05                	jne    c0019b2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019b2a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b2d:	eb 32                	jmp    c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b2f:	80 fa 02             	cmp    dl,0x2
c0019b32:	75 05                	jne    c0019b39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019b34:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b37:	eb 28                	jmp    c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b39:	80 fa 03             	cmp    dl,0x3
c0019b3c:	75 05                	jne    c0019b43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019b3e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b41:	eb 1e                	jmp    c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b43:	31 c0                	xor    eax,eax
c0019b45:	80 fa 04             	cmp    dl,0x4
c0019b48:	74 17                	je     c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b4a:	80 fa 05             	cmp    dl,0x5
c0019b4d:	75 05                	jne    c0019b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019b4f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b52:	eb 0d                	jmp    c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b54:	80 fa 06             	cmp    dl,0x6
c0019b57:	75 05                	jne    c0019b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019b59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b5c:	eb 03                	jmp    c0019b61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b5e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b61:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b66:	0f 94 c2             	sete   dl
c0019b69:	80 f9 05             	cmp    cl,0x5
c0019b6c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019b70:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019b75:	d3 e0                	shl    eax,cl
c0019b77:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019b7b:	74 0a                	je     c0019b87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019b7d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b80:	b9 07 00 00 00       	mov    ecx,0x7
c0019b85:	eb 37                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b87:	01 f8                	add    eax,edi
c0019b89:	b9 03 00 00 00       	mov    ecx,0x3
c0019b8e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b93:	74 2b                	je     c0019bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b95:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b9a:	75 0d                	jne    c0019ba9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019b9c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ba0:	01 c8                	add    eax,ecx
c0019ba2:	b9 04 00 00 00       	mov    ecx,0x4
c0019ba7:	eb 17                	jmp    c0019bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ba9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019bac:	b9 07 00 00 00       	mov    ecx,0x7
c0019bb1:	eb 0d                	jmp    c0019bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bb3:	b9 02 00 00 00       	mov    ecx,0x2
c0019bb8:	b2 01                	mov    dl,0x1
c0019bba:	31 c0                	xor    eax,eax
c0019bbc:	eb 02                	jmp    c0019bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bbe:	31 d2                	xor    edx,edx
c0019bc0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019bc4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019bc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bca:	88 11                	mov    BYTE PTR [ecx],dl
c0019bcc:	5a                   	pop    edx
c0019bcd:	5b                   	pop    ebx
c0019bce:	5e                   	pop    esi
c0019bcf:	5f                   	pop    edi
c0019bd0:	c3                   	ret    

c0019bd1 <Krnl::smpEntry()>:
c0019bd1:	eb fe                	jmp    c0019bd1 <Krnl::smpEntry()>

c0019bd3 <Krnl::startCPU(int)>:
c0019bd3:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0019bd8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bdf:	0f 84 36 01 00 00    	je     c0019d1b <Krnl::startCPU(int)+0x148>
c0019be5:	53                   	push   ebx
c0019be6:	83 ec 10             	sub    esp,0x10
c0019be9:	fa                   	cli    
c0019bea:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0019bf0:	6a 1b                	push   0x1b
c0019bf2:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c0019bf8:	e8 35 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019bfd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019c02:	89 c3                	mov    ebx,eax
c0019c04:	58                   	pop    eax
c0019c05:	5a                   	pop    edx
c0019c06:	53                   	push   ebx
c0019c07:	68 80 c3 02 c0       	push   0xc002c380
c0019c0c:	e8 c2 8c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0019c11:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c1f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c29:	c1 e0 18             	shl    eax,0x18
c0019c2c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019c32:	83 c4 10             	add    esp,0x10
c0019c35:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019c3b:	09 c2                	or     edx,eax
c0019c3d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019c43:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019c49:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c4f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c55:	80 cd c5             	or     ch,0xc5
c0019c58:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c5e:	f3 90                	pause  
c0019c60:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c62:	0f ba e1 0c          	bt     ecx,0xc
c0019c66:	72 f6                	jb     c0019c5e <Krnl::startCPU(int)+0x8b>
c0019c68:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c6e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c74:	09 c1                	or     ecx,eax
c0019c76:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c7c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c82:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c88:	80 cd 85             	or     ch,0x85
c0019c8b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c91:	f3 90                	pause  
c0019c93:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c95:	0f ba e1 0c          	bt     ecx,0xc
c0019c99:	72 f6                	jb     c0019c91 <Krnl::startCPU(int)+0xbe>
c0019c9b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ca5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019cab:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019cb1:	09 c1                	or     ecx,eax
c0019cb3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019cb9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019cbf:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019cc5:	81 c9 02 06 00 00    	or     ecx,0x602
c0019ccb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019cd1:	f3 90                	pause  
c0019cd3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cd5:	0f ba e1 0c          	bt     ecx,0xc
c0019cd9:	72 f6                	jb     c0019cd1 <Krnl::startCPU(int)+0xfe>
c0019cdb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ce5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ceb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019cf1:	09 c8                	or     eax,ecx
c0019cf3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019cf9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019cff:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019d04:	0d 02 06 00 00       	or     eax,0x602
c0019d09:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019d0f:	f3 90                	pause  
c0019d11:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d13:	0f ba e0 0c          	bt     eax,0xc
c0019d17:	72 f6                	jb     c0019d0f <Krnl::startCPU(int)+0x13c>
c0019d19:	eb fe                	jmp    c0019d19 <Krnl::startCPU(int)+0x146>
c0019d1b:	c3                   	ret    

c0019d1c <Krnl::startCPUs()>:
c0019d1c:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0019d21:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019d27:	88 c2                	mov    dl,al
c0019d29:	83 e2 0a             	and    edx,0xa
c0019d2c:	80 fa 0a             	cmp    dl,0xa
c0019d2f:	75 09                	jne    c0019d3a <Krnl::startCPUs()+0x1e>
c0019d31:	a8 01                	test   al,0x1
c0019d33:	74 05                	je     c0019d3a <Krnl::startCPUs()+0x1e>
c0019d35:	e9 61 64 fe ff       	jmp    c000019b <prepareTramp>
c0019d3a:	c3                   	ret    
c0019d3b:	90                   	nop

c0019d3c <EnvVarContainer::getEnv(char const*)>:
c0019d3c:	57                   	push   edi
c0019d3d:	56                   	push   esi
c0019d3e:	53                   	push   ebx
c0019d3f:	31 db                	xor    ebx,ebx
c0019d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d45:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019d47:	7e 2b                	jle    c0019d74 <EnvVarContainer::getEnv(char const*)+0x38>
c0019d49:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019d50:	50                   	push   eax
c0019d51:	50                   	push   eax
c0019d52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d55:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019d58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019d5c:	e8 37 6b fe ff       	call   c0000898 <strcmp>
c0019d61:	83 c4 10             	add    esp,0x10
c0019d64:	85 c0                	test   eax,eax
c0019d66:	75 09                	jne    c0019d71 <EnvVarContainer::getEnv(char const*)+0x35>
c0019d68:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d6b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019d6f:	eb 05                	jmp    c0019d76 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019d71:	43                   	inc    ebx
c0019d72:	eb d1                	jmp    c0019d45 <EnvVarContainer::getEnv(char const*)+0x9>
c0019d74:	31 c0                	xor    eax,eax
c0019d76:	5b                   	pop    ebx
c0019d77:	5e                   	pop    esi
c0019d78:	5f                   	pop    edi
c0019d79:	c3                   	ret    

c0019d7a <EnvVarContainer::setEnv(char const*, char const*)>:
c0019d7a:	55                   	push   ebp
c0019d7b:	57                   	push   edi
c0019d7c:	56                   	push   esi
c0019d7d:	53                   	push   ebx
c0019d7e:	83 ec 28             	sub    esp,0x28
c0019d81:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019d85:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019d89:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d8d:	56                   	push   esi
c0019d8e:	e8 d9 69 fe ff       	call   c000076c <strlen>
c0019d93:	40                   	inc    eax
c0019d94:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d97:	e8 f0 5a ff ff       	call   c000f88c <malloc>
c0019d9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019da3:	e8 c4 69 fe ff       	call   c000076c <strlen>
c0019da8:	40                   	inc    eax
c0019da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dac:	e8 db 5a ff ff       	call   c000f88c <malloc>
c0019db1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019db4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019db8:	e8 af 69 fe ff       	call   c000076c <strlen>
c0019dbd:	83 c4 0c             	add    esp,0xc
c0019dc0:	40                   	inc    eax
c0019dc1:	50                   	push   eax
c0019dc2:	6a 00                	push   0x0
c0019dc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019dc8:	e8 83 69 fe ff       	call   c0000750 <memset>
c0019dcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dd0:	e8 97 69 fe ff       	call   c000076c <strlen>
c0019dd5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019dd9:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ddc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019de1:	89 de                	mov    esi,ebx
c0019de3:	e8 84 69 fe ff       	call   c000076c <strlen>
c0019de8:	83 c4 0c             	add    esp,0xc
c0019deb:	40                   	inc    eax
c0019dec:	50                   	push   eax
c0019ded:	6a 00                	push   0x0
c0019def:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019df3:	e8 58 69 fe ff       	call   c0000750 <memset>
c0019df8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dfb:	e8 6c 69 fe ff       	call   c000076c <strlen>
c0019e00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e04:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e0c:	40                   	inc    eax
c0019e0d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019e10:	c1 e0 03             	shl    eax,0x3
c0019e13:	5a                   	pop    edx
c0019e14:	59                   	pop    ecx
c0019e15:	50                   	push   eax
c0019e16:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e19:	e8 5a 5a ff ff       	call   c000f878 <realloc>
c0019e1e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e22:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e25:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019e28:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019e2c:	b9 08 00 00 00       	mov    ecx,0x8
c0019e31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e33:	83 c4 2c             	add    esp,0x2c
c0019e36:	5b                   	pop    ebx
c0019e37:	5e                   	pop    esi
c0019e38:	5f                   	pop    edi
c0019e39:	5d                   	pop    ebp
c0019e3a:	c3                   	ret    
c0019e3b:	90                   	nop

c0019e3c <EnvVarContainer::deleteEnv(char const*)>:
c0019e3c:	c3                   	ret    
c0019e3d:	90                   	nop

c0019e3e <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019e3e:	55                   	push   ebp
c0019e3f:	57                   	push   edi
c0019e40:	56                   	push   esi
c0019e41:	53                   	push   ebx
c0019e42:	81 ec 38 01 00 00    	sub    esp,0x138
c0019e48:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019e4f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019e56:	68 14 01 00 00       	push   0x114
c0019e5b:	e8 2c 5a ff ff       	call   c000f88c <malloc>
c0019e60:	83 c4 0c             	add    esp,0xc
c0019e63:	89 c5                	mov    ebp,eax
c0019e65:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019e68:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019e6f:	50                   	push   eax
c0019e70:	e8 bd 8f ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c0019e75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e78:	e8 87 92 ff ff       	call   c0013104 <File::exists()>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	84 c0                	test   al,al
c0019e82:	75 32                	jne    c0019eb6 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019e84:	51                   	push   ecx
c0019e85:	51                   	push   ecx
c0019e86:	6a 12                	push   0x12
c0019e88:	55                   	push   ebp
c0019e89:	e8 08 90 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c0019e8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e91:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e94:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e97:	e8 d0 68 fe ff       	call   c000076c <strlen>
c0019e9c:	5a                   	pop    edx
c0019e9d:	31 d2                	xor    edx,edx
c0019e9f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ea3:	51                   	push   ecx
c0019ea4:	56                   	push   esi
c0019ea5:	52                   	push   edx
c0019ea6:	50                   	push   eax
c0019ea7:	55                   	push   ebp
c0019ea8:	ff d7                	call   edi
c0019eaa:	83 c4 14             	add    esp,0x14
c0019ead:	55                   	push   ebp
c0019eae:	e8 41 90 ff ff       	call   c0012ef4 <File::close()>
c0019eb3:	83 c4 10             	add    esp,0x10
c0019eb6:	31 f6                	xor    esi,esi
c0019eb8:	50                   	push   eax
c0019eb9:	68 00 01 00 00       	push   0x100
c0019ebe:	6a 00                	push   0x0
c0019ec0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ec4:	50                   	push   eax
c0019ec5:	e8 86 68 fe ff       	call   c0000750 <memset>
c0019eca:	58                   	pop    eax
c0019ecb:	5a                   	pop    edx
c0019ecc:	6a 01                	push   0x1
c0019ece:	55                   	push   ebp
c0019ecf:	e8 c2 8f ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019edf:	83 ec 0c             	sub    esp,0xc
c0019ee2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ee5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ee9:	51                   	push   ecx
c0019eea:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019eee:	52                   	push   edx
c0019eef:	6a 00                	push   0x0
c0019ef1:	6a 01                	push   0x1
c0019ef3:	55                   	push   ebp
c0019ef4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ef7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019efb:	83 c4 20             	add    esp,0x20
c0019efe:	3c 0d                	cmp    al,0xd
c0019f00:	0f 84 16 01 00 00    	je     c001a01c <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019f06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f0b:	0f 84 fc 00 00 00    	je     c001a00d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f11:	3c 0a                	cmp    al,0xa
c0019f13:	74 13                	je     c0019f28 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f1a:	74 0c                	je     c0019f28 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f1c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019f22:	0f 8e e5 00 00 00    	jle    c001a00d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f2c:	83 ec 0c             	sub    esp,0xc
c0019f2f:	8d 78 01             	lea    edi,[eax+0x1]
c0019f32:	57                   	push   edi
c0019f33:	e8 54 59 ff ff       	call   c000f88c <malloc>
c0019f38:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019f3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f40:	8d 56 04             	lea    edx,[esi+0x4]
c0019f43:	89 14 24             	mov    DWORD PTR [esp],edx
c0019f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f4a:	e8 3d 59 ff ff       	call   c000f88c <malloc>
c0019f4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f53:	83 c4 0c             	add    esp,0xc
c0019f56:	57                   	push   edi
c0019f57:	6a 00                	push   0x0
c0019f59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f5d:	e8 ee 67 fe ff       	call   c0000750 <memset>
c0019f62:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f66:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019f6a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019f6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f70:	83 c4 0c             	add    esp,0xc
c0019f73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f77:	52                   	push   edx
c0019f78:	6a 00                	push   0x0
c0019f7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f7e:	e8 cd 67 fe ff       	call   c0000750 <memset>
c0019f83:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f87:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019f8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f8e:	e8 d9 67 fe ff       	call   c000076c <strlen>
c0019f93:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019f97:	89 c1                	mov    ecx,eax
c0019f99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f9b:	5e                   	pop    esi
c0019f9c:	5f                   	pop    edi
c0019f9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019fa1:	68 91 c3 02 c0       	push   0xc002c391
c0019fa6:	e8 28 89 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0019fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fad:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019fb0:	40                   	inc    eax
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	89 03                	mov    DWORD PTR [ebx],eax
c0019fb6:	85 d2                	test   edx,edx
c0019fb8:	75 0c                	jne    c0019fc6 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019fba:	83 ec 0c             	sub    esp,0xc
c0019fbd:	6a 08                	push   0x8
c0019fbf:	e8 c8 58 ff ff       	call   c000f88c <malloc>
c0019fc4:	eb 0c                	jmp    c0019fd2 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019fc6:	c1 e0 03             	shl    eax,0x3
c0019fc9:	51                   	push   ecx
c0019fca:	51                   	push   ecx
c0019fcb:	50                   	push   eax
c0019fcc:	52                   	push   edx
c0019fcd:	e8 a6 58 ff ff       	call   c000f878 <realloc>
c0019fd2:	83 c4 10             	add    esp,0x10
c0019fd5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019fd8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fda:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0019fdd:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019fe1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019fe5:	b9 08 00 00 00       	mov    ecx,0x8
c0019fea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fec:	31 f6                	xor    esi,esi
c0019fee:	52                   	push   edx
c0019fef:	68 00 01 00 00       	push   0x100
c0019ff4:	6a 00                	push   0x0
c0019ff6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ffa:	50                   	push   eax
c0019ffb:	e8 50 67 fe ff       	call   c0000750 <memset>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a00b:	eb 0f                	jmp    c001a01c <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a00d:	3c 3d                	cmp    al,0x3d
c001a00f:	74 07                	je     c001a018 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a011:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a015:	46                   	inc    esi
c001a016:	eb 04                	jmp    c001a01c <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a018:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a01c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a021:	0f 85 b8 fe ff ff    	jne    c0019edf <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a027:	50                   	push   eax
c001a028:	50                   	push   eax
c001a029:	ff 33                	push   DWORD PTR [ebx]
c001a02b:	68 9f c3 02 c0       	push   0xc002c39f
c001a030:	e8 9e 88 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001a035:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a03b:	5b                   	pop    ebx
c001a03c:	5e                   	pop    esi
c001a03d:	5f                   	pop    edi
c001a03e:	5d                   	pop    ebp
c001a03f:	c3                   	ret    

c001a040 <EnvVarContainer::__loadSystem()>:
c001a040:	83 ec 10             	sub    esp,0x10
c001a043:	68 40 e5 02 c0       	push   0xc002e540
c001a048:	68 ca c3 02 c0       	push   0xc002c3ca
c001a04d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a051:	e8 e8 fd ff ff       	call   c0019e3e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a056:	83 c4 1c             	add    esp,0x1c
c001a059:	c3                   	ret    

c001a05a <EnvVarContainer::__loadUser()>:
c001a05a:	c3                   	ret    
c001a05b:	90                   	nop

c001a05c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a06a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a06e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a075:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a07c:	90                   	nop
c001a07d:	c3                   	ret    

c001a07e <EnvVarContainer::~EnvVarContainer()>:
c001a07e:	83 ec 0c             	sub    esp,0xc
c001a081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a088:	85 c0                	test   eax,eax
c001a08a:	74 1d                	je     c001a0a9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a090:	8b 00                	mov    eax,DWORD PTR [eax]
c001a092:	85 c0                	test   eax,eax
c001a094:	74 13                	je     c001a0a9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a09d:	83 ec 0c             	sub    esp,0xc
c001a0a0:	50                   	push   eax
c001a0a1:	e8 f6 57 ff ff       	call   c000f89c <free>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	90                   	nop
c001a0aa:	83 c4 0c             	add    esp,0xc
c001a0ad:	c3                   	ret    

c001a0ae <Krnl::getEnv(Process*, char const*)>:
c001a0ae:	53                   	push   ebx
c001a0af:	83 ec 08             	sub    esp,0x8
c001a0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0ba:	39 05 50 25 03 c0    	cmp    DWORD PTR ds:0xc0032550,eax
c001a0c0:	74 04                	je     c001a0c6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a0c2:	85 c0                	test   eax,eax
c001a0c4:	75 0b                	jne    c001a0d1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a0c6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a0cb:	85 c0                	test   eax,eax
c001a0cd:	75 19                	jne    c001a0e8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a0cf:	eb 27                	jmp    c001a0f8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a0d1:	52                   	push   edx
c001a0d2:	52                   	push   edx
c001a0d3:	53                   	push   ebx
c001a0d4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a0da:	e8 5d fc ff ff       	call   c0019d3c <EnvVarContainer::getEnv(char const*)>
c001a0df:	83 c4 10             	add    esp,0x10
c001a0e2:	85 c0                	test   eax,eax
c001a0e4:	75 28                	jne    c001a10e <Krnl::getEnv(Process*, char const*)+0x60>
c001a0e6:	eb de                	jmp    c001a0c6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a0e8:	52                   	push   edx
c001a0e9:	52                   	push   edx
c001a0ea:	53                   	push   ebx
c001a0eb:	50                   	push   eax
c001a0ec:	e8 4b fc ff ff       	call   c0019d3c <EnvVarContainer::getEnv(char const*)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	85 c0                	test   eax,eax
c001a0f6:	75 16                	jne    c001a10e <Krnl::getEnv(Process*, char const*)+0x60>
c001a0f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a0fc:	a1 38 1b 03 c0       	mov    eax,ds:0xc0031b38
c001a101:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a105:	83 c4 08             	add    esp,0x8
c001a108:	5b                   	pop    ebx
c001a109:	e9 2e fc ff ff       	jmp    c0019d3c <EnvVarContainer::getEnv(char const*)>
c001a10e:	83 c4 08             	add    esp,0x8
c001a111:	5b                   	pop    ebx
c001a112:	c3                   	ret    

c001a113 <Krnl::setEnvSystem(char const*, char const*)>:
c001a113:	83 ec 10             	sub    esp,0x10
c001a116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a11a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a11e:	ff 35 38 1b 03 c0    	push   DWORD PTR ds:0xc0031b38
c001a124:	e8 51 fc ff ff       	call   c0019d7a <EnvVarContainer::setEnv(char const*, char const*)>
c001a129:	83 c4 1c             	add    esp,0x1c
c001a12c:	c3                   	ret    

c001a12d <Krnl::setEnvUser(char const*, char const*)>:
c001a12d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a132:	85 c0                	test   eax,eax
c001a134:	74 15                	je     c001a14b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a136:	83 ec 10             	sub    esp,0x10
c001a139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a13d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a141:	50                   	push   eax
c001a142:	e8 33 fc ff ff       	call   c0019d7a <EnvVarContainer::setEnv(char const*, char const*)>
c001a147:	83 c4 1c             	add    esp,0x1c
c001a14a:	c3                   	ret    
c001a14b:	c3                   	ret    

c001a14c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a14c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a150:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a15a:	e9 1b fc ff ff       	jmp    c0019d7a <EnvVarContainer::setEnv(char const*, char const*)>

c001a15f <Krnl::deleteEnvSystem(char const*)>:
c001a15f:	c3                   	ret    

c001a160 <Krnl::deleteEnvUser(char const*)>:
c001a160:	c3                   	ret    

c001a161 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a161:	c3                   	ret    

c001a162 <Krnl::newProcessEnv(Process*)>:
c001a162:	83 ec 28             	sub    esp,0x28
c001a165:	6a 0c                	push   0xc
c001a167:	e8 20 57 ff ff       	call   c000f88c <malloc>
c001a16c:	5a                   	pop    edx
c001a16d:	59                   	pop    ecx
c001a16e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a172:	50                   	push   eax
c001a173:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a177:	e8 e0 fe ff ff       	call   c001a05c <EnvVarContainer::EnvVarContainer(Process*)>
c001a17c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a180:	83 c4 2c             	add    esp,0x2c
c001a183:	c3                   	ret    

c001a184 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a184:	57                   	push   edi
c001a185:	56                   	push   esi
c001a186:	53                   	push   ebx
c001a187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a18b:	83 ec 0c             	sub    esp,0xc
c001a18e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a194:	6a 0c                	push   0xc
c001a196:	e8 f1 56 ff ff       	call   c000f88c <malloc>
c001a19b:	89 c3                	mov    ebx,eax
c001a19d:	58                   	pop    eax
c001a19e:	5a                   	pop    edx
c001a19f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1a3:	53                   	push   ebx
c001a1a4:	e8 b3 fe ff ff       	call   c001a05c <EnvVarContainer::EnvVarContainer(Process*)>
c001a1a9:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1ab:	89 03                	mov    DWORD PTR [ebx],eax
c001a1ad:	c1 e0 03             	shl    eax,0x3
c001a1b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1b3:	e8 d4 56 ff ff       	call   c000f88c <malloc>
c001a1b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1bb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a1bd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a1c0:	c1 e1 03             	shl    ecx,0x3
c001a1c3:	89 c7                	mov    edi,eax
c001a1c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	89 d8                	mov    eax,ebx
c001a1cc:	5b                   	pop    ebx
c001a1cd:	5e                   	pop    esi
c001a1ce:	5f                   	pop    edi
c001a1cf:	c3                   	ret    

c001a1d0 <Krnl::loadSystemEnv()>:
c001a1d0:	53                   	push   ebx
c001a1d1:	83 ec 14             	sub    esp,0x14
c001a1d4:	6a 0c                	push   0xc
c001a1d6:	e8 b1 56 ff ff       	call   c000f88c <malloc>
c001a1db:	89 c3                	mov    ebx,eax
c001a1dd:	58                   	pop    eax
c001a1de:	5a                   	pop    edx
c001a1df:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001a1e5:	53                   	push   ebx
c001a1e6:	e8 71 fe ff ff       	call   c001a05c <EnvVarContainer::EnvVarContainer(Process*)>
c001a1eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1ee:	89 1d 38 1b 03 c0    	mov    DWORD PTR ds:0xc0031b38,ebx
c001a1f4:	e8 47 fe ff ff       	call   c001a040 <EnvVarContainer::__loadSystem()>
c001a1f9:	83 c4 18             	add    esp,0x18
c001a1fc:	5b                   	pop    ebx
c001a1fd:	c3                   	ret    

c001a1fe <Krnl::loadUserEnv()>:
c001a1fe:	53                   	push   ebx
c001a1ff:	83 ec 14             	sub    esp,0x14
c001a202:	6a 0c                	push   0xc
c001a204:	e8 83 56 ff ff       	call   c000f88c <malloc>
c001a209:	89 c3                	mov    ebx,eax
c001a20b:	58                   	pop    eax
c001a20c:	5a                   	pop    edx
c001a20d:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001a213:	53                   	push   ebx
c001a214:	e8 43 fe ff ff       	call   c001a05c <EnvVarContainer::EnvVarContainer(Process*)>
c001a219:	89 1d 34 1b 03 c0    	mov    DWORD PTR ds:0xc0031b34,ebx
c001a21f:	83 c4 18             	add    esp,0x18
c001a222:	5b                   	pop    ebx
c001a223:	c3                   	ret    

c001a224 <Krnl::flushEnv()>:
c001a224:	c3                   	ret    

c001a225 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a229:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a22f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a235:	a1 38 1b 03 c0       	mov    eax,ds:0xc0031b38
c001a23a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a23c:	03 01                	add    eax,DWORD PTR [ecx]
c001a23e:	85 d2                	test   edx,edx
c001a240:	74 02                	je     c001a244 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a242:	03 02                	add    eax,DWORD PTR [edx]
c001a244:	c3                   	ret    

c001a245 <Krnl::getProcessEnvPair(Process*, int)>:
c001a245:	57                   	push   edi
c001a246:	8b 0d 34 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b34
c001a24c:	56                   	push   esi
c001a24d:	85 c9                	test   ecx,ecx
c001a24f:	53                   	push   ebx
c001a250:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a254:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a258:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a25e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a262:	8b 02                	mov    eax,DWORD PTR [edx]
c001a264:	75 47                	jne    c001a2ad <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a266:	39 c3                	cmp    ebx,eax
c001a268:	7c 47                	jl     c001a2b1 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a26a:	8b 15 38 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b38
c001a270:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a272:	01 c1                	add    ecx,eax
c001a274:	39 d9                	cmp    ecx,ebx
c001a276:	7e 6c                	jle    c001a2e4 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a278:	51                   	push   ecx
c001a279:	89 d9                	mov    ecx,ebx
c001a27b:	29 c1                	sub    ecx,eax
c001a27d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a280:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a284:	53                   	push   ebx
c001a285:	68 ec c3 02 c0       	push   0xc002c3ec
c001a28a:	e8 44 86 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001a28f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a295:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a297:	a1 38 1b 03 c0       	mov    eax,ds:0xc0031b38
c001a29c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a29f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2a3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2a6:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2a9:	89 06                	mov    DWORD PTR [esi],eax
c001a2ab:	eb 51                	jmp    c001a2fe <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a2ad:	39 c3                	cmp    ebx,eax
c001a2af:	7d 05                	jge    c001a2b6 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a2b1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a2b4:	eb 20                	jmp    c001a2d6 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a2b6:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a2b8:	8d 14 07             	lea    edx,[edi+eax*1]
c001a2bb:	39 da                	cmp    edx,ebx
c001a2bd:	7e 04                	jle    c001a2c3 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a2bf:	29 c3                	sub    ebx,eax
c001a2c1:	eb 10                	jmp    c001a2d3 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a2c3:	8b 0d 38 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b38
c001a2c9:	03 11                	add    edx,DWORD PTR [ecx]
c001a2cb:	39 da                	cmp    edx,ebx
c001a2cd:	7e 15                	jle    c001a2e4 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a2cf:	29 c3                	sub    ebx,eax
c001a2d1:	29 fb                	sub    ebx,edi
c001a2d3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a2d6:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2da:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2dd:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2e0:	89 06                	mov    DWORD PTR [esi],eax
c001a2e2:	eb 1d                	jmp    c001a301 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a2e4:	83 ec 0c             	sub    esp,0xc
c001a2e7:	68 00 c4 02 c0       	push   0xc002c400
c001a2ec:	e8 18 00 00 00       	call   c001a309 <Krnl::panic(char const*)>
c001a2f1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a2f7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a2fe:	83 c4 10             	add    esp,0x10
c001a301:	89 f0                	mov    eax,esi
c001a303:	5b                   	pop    ebx
c001a304:	5e                   	pop    esi
c001a305:	5f                   	pop    edi
c001a306:	c2 04 00             	ret    0x4

c001a309 <Krnl::panic(char const*)>:
c001a309:	55                   	push   ebp
c001a30a:	89 e5                	mov    ebp,esp
c001a30c:	53                   	push   ebx
c001a30d:	83 ec 0c             	sub    esp,0xc
c001a310:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a313:	fa                   	cli    
c001a314:	c6 05 44 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b44,0x1
c001a31b:	53                   	push   ebx
c001a31c:	c6 05 40 df 02 c0 00 	mov    BYTE PTR ds:0xc002df40,0x0
c001a323:	68 1a c4 02 c0       	push   0xc002c41a
c001a328:	e8 a6 85 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001a32d:	58                   	pop    eax
c001a32e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a333:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a339:	e8 b8 63 ff ff       	call   c00106f6 <setActiveTerminal(VgaText*)>
c001a33e:	83 c4 0c             	add    esp,0xc
c001a341:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a346:	6a 01                	push   0x1
c001a348:	6a 0f                	push   0xf
c001a34a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a350:	e8 4d 60 ff ff       	call   c00103a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a355:	58                   	pop    eax
c001a356:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a35b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a361:	e8 d6 65 ff ff       	call   c001093c <VgaText::clearScreen()>
c001a366:	58                   	pop    eax
c001a367:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a36c:	5a                   	pop    edx
c001a36d:	68 33 c4 02 c0       	push   0xc002c433
c001a372:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a378:	e8 4b 67 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a37d:	59                   	pop    ecx
c001a37e:	58                   	pop    eax
c001a37f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a384:	68 d8 c4 02 c0       	push   0xc002c4d8
c001a389:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a38f:	e8 34 67 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a394:	58                   	pop    eax
c001a395:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a39a:	5a                   	pop    edx
c001a39b:	68 4f c4 02 c0       	push   0xc002c44f
c001a3a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a6:	e8 1d 67 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a3ab:	59                   	pop    ecx
c001a3ac:	58                   	pop    eax
c001a3ad:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a3b2:	53                   	push   ebx
c001a3b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b9:	e8 0a 67 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a3be:	58                   	pop    eax
c001a3bf:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a3c4:	5a                   	pop    edx
c001a3c5:	68 6f c4 02 c0       	push   0xc002c46f
c001a3ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d0:	e8 f3 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a3d5:	a1 40 1b 03 c0       	mov    eax,ds:0xc0031b40
c001a3da:	83 c4 10             	add    esp,0x10
c001a3dd:	85 c0                	test   eax,eax
c001a3df:	74 02                	je     c001a3e3 <Krnl::panic(char const*)+0xda>
c001a3e1:	ff d0                	call   eax
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3e9:	e8 9e 32 00 00       	call   c001d68c <Thr::getDriverNameFromAddress(unsigned long)>
c001a3ee:	83 c4 10             	add    esp,0x10
c001a3f1:	89 c3                	mov    ebx,eax
c001a3f3:	85 c0                	test   eax,eax
c001a3f5:	0f 84 50 02 00 00    	je     c001a64b <Krnl::panic(char const*)+0x342>
c001a3fb:	83 ec 08             	sub    esp,0x8
c001a3fe:	8b 15 50 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032550
c001a404:	68 14 c5 02 c0       	push   0xc002c514
c001a409:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a40f:	e8 b4 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a414:	58                   	pop    eax
c001a415:	5a                   	pop    edx
c001a416:	8b 15 50 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032550
c001a41c:	68 4f c4 02 c0       	push   0xc002c44f
c001a421:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a427:	e8 9c 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a42c:	59                   	pop    ecx
c001a42d:	58                   	pop    eax
c001a42e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a433:	53                   	push   ebx
c001a434:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a43a:	e8 89 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a43f:	83 c4 10             	add    esp,0x10
c001a442:	83 ec 08             	sub    esp,0x8
c001a445:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a44a:	68 6e c4 02 c0       	push   0xc002c46e
c001a44f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a455:	e8 6e 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a45a:	58                   	pop    eax
c001a45b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a460:	5a                   	pop    edx
c001a461:	68 6c c5 02 c0       	push   0xc002c56c
c001a466:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a46c:	e8 57 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a471:	59                   	pop    ecx
c001a472:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a477:	5b                   	pop    ebx
c001a478:	68 ac c5 02 c0       	push   0xc002c5ac
c001a47d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a483:	e8 40 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a488:	58                   	pop    eax
c001a489:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a48e:	5a                   	pop    edx
c001a48f:	68 5a c4 02 c0       	push   0xc002c45a
c001a494:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a49a:	e8 29 66 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a49f:	59                   	pop    ecx
c001a4a0:	5b                   	pop    ebx
c001a4a1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4a4:	68 72 c4 02 c0       	push   0xc002c472
c001a4a9:	e8 25 84 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001a4ae:	58                   	pop    eax
c001a4af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4b2:	5a                   	pop    edx
c001a4b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4b6:	68 7b c4 02 c0       	push   0xc002c47b
c001a4bb:	e8 13 84 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001a4c0:	59                   	pop    ecx
c001a4c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4c4:	5b                   	pop    ebx
c001a4c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4c7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4ca:	68 84 c4 02 c0       	push   0xc002c484
c001a4cf:	e8 ff 83 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001a4d4:	58                   	pop    eax
c001a4d5:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a4da:	5a                   	pop    edx
c001a4db:	68 f0 c5 02 c0       	push   0xc002c5f0
c001a4e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4e6:	e8 dd 65 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a4eb:	59                   	pop    ecx
c001a4ec:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a4f1:	5b                   	pop    ebx
c001a4f2:	68 8d c4 02 c0       	push   0xc002c48d
c001a4f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fd:	e8 c6 65 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a502:	0f 20 c0             	mov    eax,cr0
c001a505:	5a                   	pop    edx
c001a506:	59                   	pop    ecx
c001a507:	50                   	push   eax
c001a508:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a50d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a513:	e8 6a 65 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a518:	5b                   	pop    ebx
c001a519:	58                   	pop    eax
c001a51a:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a51f:	68 97 c4 02 c0       	push   0xc002c497
c001a524:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52a:	e8 99 65 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a52f:	0f 20 d0             	mov    eax,cr2
c001a532:	5a                   	pop    edx
c001a533:	59                   	pop    ecx
c001a534:	50                   	push   eax
c001a535:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a53a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a540:	e8 3d 65 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a545:	5b                   	pop    ebx
c001a546:	58                   	pop    eax
c001a547:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a54c:	68 a1 c4 02 c0       	push   0xc002c4a1
c001a551:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a557:	e8 6c 65 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a55c:	0f 20 d8             	mov    eax,cr3
c001a55f:	5a                   	pop    edx
c001a560:	59                   	pop    ecx
c001a561:	50                   	push   eax
c001a562:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a567:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a56d:	e8 10 65 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a572:	5b                   	pop    ebx
c001a573:	58                   	pop    eax
c001a574:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a579:	68 b4 c4 02 c0       	push   0xc002c4b4
c001a57e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a584:	e8 3f 65 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a589:	0f 20 e0             	mov    eax,cr4
c001a58c:	5a                   	pop    edx
c001a58d:	59                   	pop    ecx
c001a58e:	50                   	push   eax
c001a58f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a594:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a59a:	e8 e3 64 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a59f:	5b                   	pop    ebx
c001a5a0:	58                   	pop    eax
c001a5a1:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5a6:	68 be c4 02 c0       	push   0xc002c4be
c001a5ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b1:	e8 12 65 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a5b6:	5a                   	pop    edx
c001a5b7:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5bc:	59                   	pop    ecx
c001a5bd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5c6:	50                   	push   eax
c001a5c7:	e8 b6 64 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a5cc:	5b                   	pop    ebx
c001a5cd:	58                   	pop    eax
c001a5ce:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5d3:	68 8b d3 02 c0       	push   0xc002d38b
c001a5d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5de:	e8 e5 64 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a5e3:	5a                   	pop    edx
c001a5e4:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5e9:	59                   	pop    ecx
c001a5ea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5f0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a5f3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a5f6:	50                   	push   eax
c001a5f7:	e8 86 64 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a5fc:	5b                   	pop    ebx
c001a5fd:	58                   	pop    eax
c001a5fe:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a603:	68 8b d3 02 c0       	push   0xc002d38b
c001a608:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a60e:	e8 b5 64 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a613:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a618:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a61b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a621:	8b 12                	mov    edx,DWORD PTR [edx]
c001a623:	59                   	pop    ecx
c001a624:	5b                   	pop    ebx
c001a625:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a628:	50                   	push   eax
c001a629:	e8 54 64 ff ff       	call   c0010a82 <VgaText::putx(unsigned int)>
c001a62e:	83 c4 10             	add    esp,0x10
c001a631:	b2 fe                	mov    dl,0xfe
c001a633:	e4 60                	in     al,0x60
c001a635:	3c 1c                	cmp    al,0x1c
c001a637:	74 04                	je     c001a63d <Krnl::panic(char const*)+0x334>
c001a639:	3c 5a                	cmp    al,0x5a
c001a63b:	75 f6                	jne    c001a633 <Krnl::panic(char const*)+0x32a>
c001a63d:	e4 64                	in     al,0x64
c001a63f:	a8 02                	test   al,0x2
c001a641:	75 fa                	jne    c001a63d <Krnl::panic(char const*)+0x334>
c001a643:	88 d0                	mov    al,dl
c001a645:	e6 64                	out    0x64,al
c001a647:	fa                   	cli    
c001a648:	f4                   	hlt    
c001a649:	eb e8                	jmp    c001a633 <Krnl::panic(char const*)+0x32a>
c001a64b:	50                   	push   eax
c001a64c:	50                   	push   eax
c001a64d:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a652:	68 40 c5 02 c0       	push   0xc002c540
c001a657:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65d:	e8 66 64 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a662:	58                   	pop    eax
c001a663:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a668:	5a                   	pop    edx
c001a669:	68 4f c4 02 c0       	push   0xc002c44f
c001a66e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a674:	e8 4f 64 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a679:	59                   	pop    ecx
c001a67a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a67f:	5b                   	pop    ebx
c001a680:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a683:	83 c0 0c             	add    eax,0xc
c001a686:	50                   	push   eax
c001a687:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a68c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a692:	e8 31 64 ff ff       	call   c0010ac8 <VgaText::puts(char const*)>
c001a697:	83 c4 10             	add    esp,0x10
c001a69a:	e9 a3 fd ff ff       	jmp    c001a442 <Krnl::panic(char const*)+0x139>

c001a69f <Net::switchEndian16(unsigned short)>:
c001a69f:	83 ec 04             	sub    esp,0x4
c001a6a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6a6:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a6aa:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6ae:	c1 f8 08             	sar    eax,0x8
c001a6b1:	89 c2                	mov    edx,eax
c001a6b3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6b7:	c1 e0 08             	shl    eax,0x8
c001a6ba:	09 d0                	or     eax,edx
c001a6bc:	83 c4 04             	add    esp,0x4
c001a6bf:	c3                   	ret    

c001a6c0 <Net::switchEndian32(unsigned int)>:
c001a6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c4:	c1 e8 18             	shr    eax,0x18
c001a6c7:	89 c2                	mov    edx,eax
c001a6c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6cd:	c1 e0 08             	shl    eax,0x8
c001a6d0:	25 00 00 ff 00       	and    eax,0xff0000
c001a6d5:	09 c2                	or     edx,eax
c001a6d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6db:	c1 e8 08             	shr    eax,0x8
c001a6de:	25 00 ff 00 00       	and    eax,0xff00
c001a6e3:	09 c2                	or     edx,eax
c001a6e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e9:	c1 e0 18             	shl    eax,0x18
c001a6ec:	09 d0                	or     eax,edx
c001a6ee:	c3                   	ret    

c001a6ef <Net::crc32Calc(unsigned char*, int)>:
c001a6ef:	83 ec 10             	sub    esp,0x10
c001a6f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6f7:	75 07                	jne    c001a700 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a6f9:	b8 00 00 00 00       	mov    eax,0x0
c001a6fe:	eb 7c                	jmp    c001a77c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a700:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a705:	7f 07                	jg     c001a70e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a707:	b8 00 00 00 00       	mov    eax,0x0
c001a70c:	eb 6e                	jmp    c001a77c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a70e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a716:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a722:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a726:	7d 4e                	jge    c001a776 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a728:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a72c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a730:	01 d0                	add    eax,edx
c001a732:	8a 00                	mov    al,BYTE PTR [eax]
c001a734:	0f b6 c0             	movzx  eax,al
c001a737:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a73b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a743:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a748:	7f 26                	jg     c001a770 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a74e:	83 e0 01             	and    eax,0x1
c001a751:	74 0d                	je     c001a760 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a757:	d1 e8                	shr    eax,1
c001a759:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a75e:	eb 06                	jmp    c001a766 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a764:	d1 e8                	shr    eax,1
c001a766:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a76a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a76e:	eb d3                	jmp    c001a743 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a770:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a774:	eb a8                	jmp    c001a71e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a77a:	f7 d0                	not    eax
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	c3                   	ret    

c001a780 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a780:	57                   	push   edi
c001a781:	56                   	push   esi
c001a782:	53                   	push   ebx
c001a783:	83 ec 60             	sub    esp,0x60
c001a786:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a78d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a791:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a799:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a79e:	7f 1a                	jg     c001a7ba <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a7a0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7a7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7aa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7b1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a7b4:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a7b8:	eb df                	jmp    c001a799 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a7ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7c1:	8d 50 01             	lea    edx,[eax+0x1]
c001a7c4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7cb:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a7ce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7d9:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a7dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7e1:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a7e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7fd:	89 c6                	mov    esi,eax
c001a7ff:	89 d7                	mov    edi,edx
c001a801:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a803:	89 c8                	mov    eax,ecx
c001a805:	89 fa                	mov    edx,edi
c001a807:	89 f3                	mov    ebx,esi
c001a809:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a80d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a811:	89 04 24             	mov    DWORD PTR [esp],eax
c001a814:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a81c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a823:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a827:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a82b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a82f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a83b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a83f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a843:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a847:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a84b:	89 c6                	mov    esi,eax
c001a84d:	89 d7                	mov    edi,edx
c001a84f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a851:	89 c8                	mov    eax,ecx
c001a853:	89 fa                	mov    edx,edi
c001a855:	89 f3                	mov    ebx,esi
c001a857:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a85b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a85f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a863:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a86b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a872:	0f b7 c0             	movzx  eax,ax
c001a875:	c1 f8 08             	sar    eax,0x8
c001a878:	89 c1                	mov    ecx,eax
c001a87a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a881:	8d 50 01             	lea    edx,[eax+0x1]
c001a884:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a88b:	88 ca                	mov    dl,cl
c001a88d:	88 10                	mov    BYTE PTR [eax],dl
c001a88f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a896:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a89d:	8d 48 01             	lea    ecx,[eax+0x1]
c001a8a0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a8a7:	88 10                	mov    BYTE PTR [eax],dl
c001a8a9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8ad:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a8b1:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a8b8:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a8bc:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a8c0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a8c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a8c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8d0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a8d4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a8d8:	89 c6                	mov    esi,eax
c001a8da:	89 d7                	mov    edi,edx
c001a8dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8de:	89 c8                	mov    eax,ecx
c001a8e0:	89 fa                	mov    edx,edi
c001a8e2:	89 f3                	mov    ebx,esi
c001a8e4:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a8ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a8f0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8f4:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a8fb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a902:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a906:	50                   	push   eax
c001a907:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a90b:	e8 df fd ff ff       	call   c001a6ef <Net::crc32Calc(unsigned char*, int)>
c001a910:	83 c4 08             	add    esp,0x8
c001a913:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a917:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a91b:	c1 e8 18             	shr    eax,0x18
c001a91e:	89 c1                	mov    ecx,eax
c001a920:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a927:	8d 50 01             	lea    edx,[eax+0x1]
c001a92a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a931:	88 ca                	mov    dl,cl
c001a933:	88 10                	mov    BYTE PTR [eax],dl
c001a935:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a939:	c1 e8 10             	shr    eax,0x10
c001a93c:	89 c1                	mov    ecx,eax
c001a93e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a945:	8d 50 01             	lea    edx,[eax+0x1]
c001a948:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a94f:	88 ca                	mov    dl,cl
c001a951:	88 10                	mov    BYTE PTR [eax],dl
c001a953:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a957:	c1 e8 08             	shr    eax,0x8
c001a95a:	89 c1                	mov    ecx,eax
c001a95c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a963:	8d 50 01             	lea    edx,[eax+0x1]
c001a966:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a96d:	88 ca                	mov    dl,cl
c001a96f:	88 10                	mov    BYTE PTR [eax],dl
c001a971:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a978:	8d 50 01             	lea    edx,[eax+0x1]
c001a97b:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a982:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a986:	88 10                	mov    BYTE PTR [eax],dl
c001a988:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a98c:	83 c4 60             	add    esp,0x60
c001a98f:	5b                   	pop    ebx
c001a990:	5e                   	pop    esi
c001a991:	5f                   	pop    edi
c001a992:	c3                   	ret    

c001a993 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a993:	57                   	push   edi
c001a994:	56                   	push   esi
c001a995:	53                   	push   ebx
c001a996:	83 ec 70             	sub    esp,0x70
c001a999:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9a0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a9a4:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a9ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9b3:	83 c0 0e             	add    eax,0xe
c001a9b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9ba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9c5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a9cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a9d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9dd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a9e1:	89 c6                	mov    esi,eax
c001a9e3:	89 d7                	mov    edi,edx
c001a9e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9e7:	89 c8                	mov    eax,ecx
c001a9e9:	89 fa                	mov    edx,edi
c001a9eb:	89 f3                	mov    ebx,esi
c001a9ed:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a9f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a9f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9f9:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa01:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa08:	83 c0 08             	add    eax,0x8
c001aa0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa0f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa16:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa1a:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa22:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa26:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa2a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa2e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa32:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa36:	89 c6                	mov    esi,eax
c001aa38:	89 d7                	mov    edi,edx
c001aa3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa3c:	89 c8                	mov    eax,ecx
c001aa3e:	89 fa                	mov    edx,edi
c001aa40:	89 f3                	mov    ebx,esi
c001aa42:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aa46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aa4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aa4e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa56:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa5d:	8d 50 01             	lea    edx,[eax+0x1]
c001aa60:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa67:	8a 00                	mov    al,BYTE PTR [eax]
c001aa69:	0f b6 c0             	movzx  eax,al
c001aa6c:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aa71:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa78:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa82:	8a 00                	mov    al,BYTE PTR [eax]
c001aa84:	0f b6 c0             	movzx  eax,al
c001aa87:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aa8c:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aa91:	c1 e0 08             	shl    eax,0x8
c001aa94:	89 c2                	mov    edx,eax
c001aa96:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aa9a:	09 d0                	or     eax,edx
c001aa9c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aaa3:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aaa7:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aaaf:	75 46                	jne    c001aaf7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aab1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aab8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aabb:	66 3d dc 05          	cmp    ax,0x5dc
c001aabf:	77 16                	ja     c001aad7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001aac1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aac8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aacb:	0f b7 c0             	movzx  eax,ax
c001aace:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aad5:	eb 20                	jmp    c001aaf7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aad7:	83 ec 0c             	sub    esp,0xc
c001aada:	68 18 c6 02 c0       	push   0xc002c618
c001aadf:	e8 ef 7d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001aae4:	83 c4 10             	add    esp,0x10
c001aae7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaee:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aaf2:	e9 17 01 00 00       	jmp    c001ac0e <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aaf7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aafe:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab05:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab07:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab0b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab2e:	89 c6                	mov    esi,eax
c001ab30:	89 d7                	mov    edi,edx
c001ab32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab34:	89 c8                	mov    eax,ecx
c001ab36:	89 fa                	mov    edx,edi
c001ab38:	89 f3                	mov    ebx,esi
c001ab3a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab42:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab45:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab4c:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ab53:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab64:	8a 00                	mov    al,BYTE PTR [eax]
c001ab66:	0f b6 c0             	movzx  eax,al
c001ab69:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ab6d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab74:	8d 50 01             	lea    edx,[eax+0x1]
c001ab77:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab7e:	8a 00                	mov    al,BYTE PTR [eax]
c001ab80:	0f b6 c0             	movzx  eax,al
c001ab83:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ab87:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab91:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab98:	8a 00                	mov    al,BYTE PTR [eax]
c001ab9a:	0f b6 c0             	movzx  eax,al
c001ab9d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001aba1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aba8:	8d 50 01             	lea    edx,[eax+0x1]
c001abab:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abb2:	8a 00                	mov    al,BYTE PTR [eax]
c001abb4:	0f b6 c0             	movzx  eax,al
c001abb7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001abbb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001abbf:	c1 e0 18             	shl    eax,0x18
c001abc2:	89 c2                	mov    edx,eax
c001abc4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001abc8:	c1 e0 10             	shl    eax,0x10
c001abcb:	09 c2                	or     edx,eax
c001abcd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001abd1:	c1 e0 08             	shl    eax,0x8
c001abd4:	09 d0                	or     eax,edx
c001abd6:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001abda:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001abde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abe5:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001abe9:	83 e8 04             	sub    eax,0x4
c001abec:	83 ec 08             	sub    esp,0x8
c001abef:	50                   	push   eax
c001abf0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001abf4:	e8 f6 fa ff ff       	call   c001a6ef <Net::crc32Calc(unsigned char*, int)>
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac00:	0f 94 c2             	sete   dl
c001ac03:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac0a:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac0d:	90                   	nop
c001ac0e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac15:	83 c4 70             	add    esp,0x70
c001ac18:	5b                   	pop    ebx
c001ac19:	5e                   	pop    esi
c001ac1a:	5f                   	pop    edi
c001ac1b:	c2 04 00             	ret    0x4

c001ac1e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac1e:	55                   	push   ebp
c001ac1f:	57                   	push   edi
c001ac20:	56                   	push   esi
c001ac21:	53                   	push   ebx
c001ac22:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac28:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac2f:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac31:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac34:	80 fb 40             	cmp    bl,0x40
c001ac37:	75 1b                	jne    c001ac54 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac39:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac3b:	84 d2                	test   dl,dl
c001ac3d:	0f 84 f1 00 00 00    	je     c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac43:	8d 46 01             	lea    eax,[esi+0x1]
c001ac46:	80 fa 3a             	cmp    dl,0x3a
c001ac49:	74 04                	je     c001ac4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac4b:	89 c6                	mov    esi,eax
c001ac4d:	eb ea                	jmp    c001ac39 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac4f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac52:	89 c6                	mov    esi,eax
c001ac54:	50                   	push   eax
c001ac55:	6a 40                	push   0x40
c001ac57:	6a 00                	push   0x0
c001ac59:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac5d:	50                   	push   eax
c001ac5e:	e8 ed 5a fe ff       	call   c0000750 <memset>
c001ac63:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac6a:	31 c0                	xor    eax,eax
c001ac6c:	83 c4 10             	add    esp,0x10
c001ac6f:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac71:	84 c9                	test   cl,cl
c001ac73:	0f 84 bb 00 00 00    	je     c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac79:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac7e:	0f 8f b0 00 00 00    	jg     c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac84:	80 f9 0a             	cmp    cl,0xa
c001ac87:	0f 85 98 00 00 00    	jne    c001ad25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac8d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac92:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac96:	a8 df                	test   al,0xdf
c001ac98:	0f 94 c1             	sete   cl
c001ac9b:	3c 23                	cmp    al,0x23
c001ac9d:	0f 94 c2             	sete   dl
c001aca0:	08 d1                	or     cl,dl
c001aca2:	75 4a                	jne    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aca4:	8d 50 f7             	lea    edx,[eax-0x9]
c001aca7:	80 fa 01             	cmp    dl,0x1
c001acaa:	76 42                	jbe    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acac:	3c 5b                	cmp    al,0x5b
c001acae:	75 42                	jne    c001acf2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001acb0:	80 fb 40             	cmp    bl,0x40
c001acb3:	75 39                	jne    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acb5:	83 ec 0c             	sub    esp,0xc
c001acb8:	8d 54 24 65          	lea    edx,[esp+0x65]
c001acbc:	52                   	push   edx
c001acbd:	e8 aa 5a fe ff       	call   c000076c <strlen>
c001acc2:	83 c4 10             	add    esp,0x10
c001acc5:	83 f8 3f             	cmp    eax,0x3f
c001acc8:	77 6a                	ja     c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acca:	50                   	push   eax
c001accb:	50                   	push   eax
c001accc:	8d 54 24 61          	lea    edx,[esp+0x61]
c001acd0:	52                   	push   edx
c001acd1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acd5:	52                   	push   edx
c001acd6:	e8 31 5b fe ff       	call   c000080c <strcpy>
c001acdb:	58                   	pop    eax
c001acdc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ace0:	52                   	push   edx
c001ace1:	e8 86 5a fe ff       	call   c000076c <strlen>
c001ace6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	31 d2                	xor    edx,edx
c001acf0:	eb 3a                	jmp    c001ad2c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001acf2:	80 fb 40             	cmp    bl,0x40
c001acf5:	74 06                	je     c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001acf7:	8d 44 24 58          	lea    eax,[esp+0x58]
c001acfb:	eb 20                	jmp    c001ad1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001acfd:	50                   	push   eax
c001acfe:	50                   	push   eax
c001acff:	55                   	push   ebp
c001ad00:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad04:	50                   	push   eax
c001ad05:	e8 8e 5b fe ff       	call   c0000898 <strcmp>
c001ad0a:	83 c4 10             	add    esp,0x10
c001ad0d:	85 c0                	test   eax,eax
c001ad0f:	75 dd                	jne    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad11:	eb e4                	jmp    c001acf7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad13:	8d 50 01             	lea    edx,[eax+0x1]
c001ad16:	80 f9 3d             	cmp    cl,0x3d
c001ad19:	74 1d                	je     c001ad38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad1b:	89 d0                	mov    eax,edx
c001ad1d:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad1f:	84 c9                	test   cl,cl
c001ad21:	75 f0                	jne    c001ad13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad23:	eb 0f                	jmp    c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad25:	8d 50 01             	lea    edx,[eax+0x1]
c001ad28:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad2c:	47                   	inc    edi
c001ad2d:	89 d0                	mov    eax,edx
c001ad2f:	e9 3b ff ff ff       	jmp    c001ac6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad34:	31 c0                	xor    eax,eax
c001ad36:	eb 33                	jmp    c001ad6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad3c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad3f:	50                   	push   eax
c001ad40:	50                   	push   eax
c001ad41:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad45:	50                   	push   eax
c001ad46:	56                   	push   esi
c001ad47:	e8 4c 5b fe ff       	call   c0000898 <strcmp>
c001ad4c:	83 c4 10             	add    esp,0x10
c001ad4f:	85 c0                	test   eax,eax
c001ad51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad55:	75 97                	jne    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad57:	51                   	push   ecx
c001ad58:	51                   	push   ecx
c001ad59:	52                   	push   edx
c001ad5a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad61:	e8 a6 5a fe ff       	call   c000080c <strcpy>
c001ad66:	83 c4 10             	add    esp,0x10
c001ad69:	b0 01                	mov    al,0x1
c001ad6b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad71:	5b                   	pop    ebx
c001ad72:	5e                   	pop    esi
c001ad73:	5f                   	pop    edi
c001ad74:	5d                   	pop    ebp
c001ad75:	c3                   	ret    

c001ad76 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad76:	57                   	push   edi
c001ad77:	56                   	push   esi
c001ad78:	53                   	push   ebx
c001ad79:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad7f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad86:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad8d:	53                   	push   ebx
c001ad8e:	e8 d9 59 fe ff       	call   c000076c <strlen>
c001ad93:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad96:	89 c7                	mov    edi,eax
c001ad98:	e8 cf 59 fe ff       	call   c000076c <strlen>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ada4:	3d ff 00 00 00       	cmp    eax,0xff
c001ada9:	0f 87 d3 00 00 00    	ja     c001ae82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adaf:	57                   	push   edi
c001adb0:	57                   	push   edi
c001adb1:	56                   	push   esi
c001adb2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001adb6:	56                   	push   esi
c001adb7:	e8 50 5a fe ff       	call   c000080c <strcpy>
c001adbc:	58                   	pop    eax
c001adbd:	5a                   	pop    edx
c001adbe:	68 6d cb 02 c0       	push   0xc002cb6d
c001adc3:	56                   	push   esi
c001adc4:	e8 83 5b fe ff       	call   c000094c <strcat>
c001adc9:	59                   	pop    ecx
c001adca:	5f                   	pop    edi
c001adcb:	53                   	push   ebx
c001adcc:	56                   	push   esi
c001adcd:	e8 7a 5b fe ff       	call   c000094c <strcat>
c001add2:	58                   	pop    eax
c001add3:	5a                   	pop    edx
c001add4:	68 64 c6 02 c0       	push   0xc002c664
c001add9:	56                   	push   esi
c001adda:	e8 6d 5b fe ff       	call   c000094c <strcat>
c001addf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ade6:	e8 a1 4a ff ff       	call   c000f88c <malloc>
c001adeb:	83 c4 0c             	add    esp,0xc
c001adee:	89 c3                	mov    ebx,eax
c001adf0:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001adf6:	56                   	push   esi
c001adf7:	50                   	push   eax
c001adf8:	e8 35 80 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	85 db                	test   ebx,ebx
c001ae02:	74 7e                	je     c001ae82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae04:	51                   	push   ecx
c001ae05:	51                   	push   ecx
c001ae06:	6a 01                	push   0x1
c001ae08:	53                   	push   ebx
c001ae09:	e8 88 80 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001ae0e:	83 c4 10             	add    esp,0x10
c001ae11:	85 c0                	test   eax,eax
c001ae13:	74 08                	je     c001ae1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae15:	83 ec 0c             	sub    esp,0xc
c001ae18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae1a:	53                   	push   ebx
c001ae1b:	eb 5f                	jmp    c001ae7c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae1d:	52                   	push   edx
c001ae1e:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae22:	50                   	push   eax
c001ae23:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae27:	50                   	push   eax
c001ae28:	53                   	push   ebx
c001ae29:	e8 14 83 ff ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c001ae2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae32:	83 c4 10             	add    esp,0x10
c001ae35:	89 c1                	mov    ecx,eax
c001ae37:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae3b:	74 31                	je     c001ae6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae3d:	83 ec 0c             	sub    esp,0xc
c001ae40:	50                   	push   eax
c001ae41:	e8 46 4a ff ff       	call   c000f88c <malloc>
c001ae46:	89 c6                	mov    esi,eax
c001ae48:	58                   	pop    eax
c001ae49:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae4f:	52                   	push   edx
c001ae50:	56                   	push   esi
c001ae51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae59:	53                   	push   ebx
c001ae5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae5d:	83 c4 20             	add    esp,0x20
c001ae60:	85 c0                	test   eax,eax
c001ae62:	75 0a                	jne    c001ae6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae68:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae6c:	74 18                	je     c001ae86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae6e:	83 ec 0c             	sub    esp,0xc
c001ae71:	53                   	push   ebx
c001ae72:	e8 7d 80 ff ff       	call   c0012ef4 <File::close()>
c001ae77:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	31 c0                	xor    eax,eax
c001ae84:	eb 3b                	jmp    c001aec1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	53                   	push   ebx
c001ae8a:	e8 65 80 ff ff       	call   c0012ef4 <File::close()>
c001ae8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae97:	83 c4 0c             	add    esp,0xc
c001ae9a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aea1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aea8:	56                   	push   esi
c001aea9:	e8 70 fd ff ff       	call   c001ac1e <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aeae:	89 34 24             	mov    DWORD PTR [esp],esi
c001aeb1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aeb5:	e8 e2 49 ff ff       	call   c000f89c <free>
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aec1:	81 c4 20 01 00 00    	add    esp,0x120
c001aec7:	5b                   	pop    ebx
c001aec8:	5e                   	pop    esi
c001aec9:	5f                   	pop    edi
c001aeca:	c3                   	ret    

c001aecb <Reg::getLine(char*, char*, char*)>:
c001aecb:	57                   	push   edi
c001aecc:	56                   	push   esi
c001aecd:	53                   	push   ebx
c001aece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aed2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aed6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aeda:	57                   	push   edi
c001aedb:	56                   	push   esi
c001aedc:	53                   	push   ebx
c001aedd:	68 69 c6 02 c0       	push   0xc002c669
c001aee2:	e8 8f fe ff ff       	call   c001ad76 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	84 c0                	test   al,al
c001aeec:	75 10                	jne    c001aefe <Reg::getLine(char*, char*, char*)+0x33>
c001aeee:	57                   	push   edi
c001aeef:	56                   	push   esi
c001aef0:	53                   	push   ebx
c001aef1:	68 8e c6 02 c0       	push   0xc002c68e
c001aef6:	e8 7b fe ff ff       	call   c001ad76 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aefb:	83 c4 10             	add    esp,0x10
c001aefe:	5b                   	pop    ebx
c001aeff:	5e                   	pop    esi
c001af00:	5f                   	pop    edi
c001af01:	c3                   	ret    

c001af02 <Reg::readInt(char*, char*, int*)>:
c001af02:	55                   	push   ebp
c001af03:	57                   	push   edi
c001af04:	56                   	push   esi
c001af05:	53                   	push   ebx
c001af06:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af0c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af10:	57                   	push   edi
c001af11:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af18:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af1f:	e8 a7 ff ff ff       	call   c001aecb <Reg::getLine(char*, char*, char*)>
c001af24:	83 c4 10             	add    esp,0x10
c001af27:	84 c0                	test   al,al
c001af29:	0f 84 b3 00 00 00    	je     c001afe2 <Reg::readInt(char*, char*, int*)+0xe0>
c001af2f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af33:	80 fa 2b             	cmp    dl,0x2b
c001af36:	74 0c                	je     c001af44 <Reg::readInt(char*, char*, int*)+0x42>
c001af38:	80 fa 2d             	cmp    dl,0x2d
c001af3b:	75 0e                	jne    c001af4b <Reg::readInt(char*, char*, int*)+0x49>
c001af3d:	ba 01 00 00 00       	mov    edx,0x1
c001af42:	eb 0b                	jmp    c001af4f <Reg::readInt(char*, char*, int*)+0x4d>
c001af44:	ba 01 00 00 00       	mov    edx,0x1
c001af49:	eb 02                	jmp    c001af4d <Reg::readInt(char*, char*, int*)+0x4b>
c001af4b:	31 d2                	xor    edx,edx
c001af4d:	31 c0                	xor    eax,eax
c001af4f:	be 0a 00 00 00       	mov    esi,0xa
c001af54:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af59:	75 20                	jne    c001af7b <Reg::readInt(char*, char*, int*)+0x79>
c001af5b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af5f:	80 f9 78             	cmp    cl,0x78
c001af62:	75 0a                	jne    c001af6e <Reg::readInt(char*, char*, int*)+0x6c>
c001af64:	83 c2 02             	add    edx,0x2
c001af67:	be 10 00 00 00       	mov    esi,0x10
c001af6c:	eb 0d                	jmp    c001af7b <Reg::readInt(char*, char*, int*)+0x79>
c001af6e:	80 f9 62             	cmp    cl,0x62
c001af71:	75 08                	jne    c001af7b <Reg::readInt(char*, char*, int*)+0x79>
c001af73:	83 c2 02             	add    edx,0x2
c001af76:	be 02 00 00 00       	mov    esi,0x2
c001af7b:	01 d7                	add    edi,edx
c001af7d:	31 d2                	xor    edx,edx
c001af7f:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af81:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af85:	80 fb 0d             	cmp    bl,0xd
c001af88:	0f 94 c3             	sete   bl
c001af8b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af90:	0f 94 c1             	sete   cl
c001af93:	08 cb                	or     bl,cl
c001af95:	75 3a                	jne    c001afd1 <Reg::readInt(char*, char*, int*)+0xcf>
c001af97:	0f af d6             	imul   edx,esi
c001af9a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af9f:	83 fe 10             	cmp    esi,0x10
c001afa2:	75 26                	jne    c001afca <Reg::readInt(char*, char*, int*)+0xc8>
c001afa4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afa8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afab:	89 e9                	mov    ecx,ebp
c001afad:	80 f9 05             	cmp    cl,0x5
c001afb0:	77 06                	ja     c001afb8 <Reg::readInt(char*, char*, int*)+0xb6>
c001afb2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afb6:	eb 16                	jmp    c001afce <Reg::readInt(char*, char*, int*)+0xcc>
c001afb8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afbc:	83 e9 61             	sub    ecx,0x61
c001afbf:	80 f9 05             	cmp    cl,0x5
c001afc2:	77 06                	ja     c001afca <Reg::readInt(char*, char*, int*)+0xc8>
c001afc4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afc8:	eb 04                	jmp    c001afce <Reg::readInt(char*, char*, int*)+0xcc>
c001afca:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001afce:	47                   	inc    edi
c001afcf:	eb ae                	jmp    c001af7f <Reg::readInt(char*, char*, int*)+0x7d>
c001afd1:	84 c0                	test   al,al
c001afd3:	74 02                	je     c001afd7 <Reg::readInt(char*, char*, int*)+0xd5>
c001afd5:	f7 da                	neg    edx
c001afd7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001afde:	89 10                	mov    DWORD PTR [eax],edx
c001afe0:	88 d8                	mov    al,bl
c001afe2:	81 c4 ec 00 00 00    	add    esp,0xec
c001afe8:	5b                   	pop    ebx
c001afe9:	5e                   	pop    esi
c001afea:	5f                   	pop    edi
c001afeb:	5d                   	pop    ebp
c001afec:	c3                   	ret    

c001afed <Reg::readString(char*, char*, char*, int)>:
c001afed:	57                   	push   edi
c001afee:	56                   	push   esi
c001afef:	53                   	push   ebx
c001aff0:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aff6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001affd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b001:	57                   	push   edi
c001b002:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b009:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b010:	e8 b6 fe ff ff       	call   c001aecb <Reg::getLine(char*, char*, char*)>
c001b015:	83 c4 10             	add    esp,0x10
c001b018:	89 c6                	mov    esi,eax
c001b01a:	84 c0                	test   al,al
c001b01c:	74 44                	je     c001b062 <Reg::readString(char*, char*, char*, int)+0x75>
c001b01e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b025:	31 c0                	xor    eax,eax
c001b027:	4a                   	dec    edx
c001b028:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b02b:	84 c9                	test   cl,cl
c001b02d:	74 0f                	je     c001b03e <Reg::readString(char*, char*, char*, int)+0x51>
c001b02f:	39 c2                	cmp    edx,eax
c001b031:	7e 0b                	jle    c001b03e <Reg::readString(char*, char*, char*, int)+0x51>
c001b033:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b036:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b03b:	40                   	inc    eax
c001b03c:	eb ea                	jmp    c001b028 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b03e:	83 ec 0c             	sub    esp,0xc
c001b041:	53                   	push   ebx
c001b042:	e8 25 57 fe ff       	call   c000076c <strlen>
c001b047:	83 c4 10             	add    esp,0x10
c001b04a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b04f:	75 11                	jne    c001b062 <Reg::readString(char*, char*, char*, int)+0x75>
c001b051:	83 ec 0c             	sub    esp,0xc
c001b054:	53                   	push   ebx
c001b055:	e8 12 57 fe ff       	call   c000076c <strlen>
c001b05a:	83 c4 10             	add    esp,0x10
c001b05d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b062:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b068:	89 f0                	mov    eax,esi
c001b06a:	5b                   	pop    ebx
c001b06b:	5e                   	pop    esi
c001b06c:	5f                   	pop    edi
c001b06d:	c3                   	ret    

c001b06e <Reg::readBool(char*, char*, bool*)>:
c001b06e:	83 ec 20             	sub    esp,0x20
c001b071:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b075:	50                   	push   eax
c001b076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b07e:	e8 7f fe ff ff       	call   c001af02 <Reg::readInt(char*, char*, int*)>
c001b083:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b088:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b08c:	0f 95 02             	setne  BYTE PTR [edx]
c001b08f:	83 c4 2c             	add    esp,0x2c
c001b092:	c3                   	ret    

c001b093 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b093:	53                   	push   ebx
c001b094:	83 ec 1c             	sub    esp,0x1c
c001b097:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b09b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b09f:	50                   	push   eax
c001b0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a8:	e8 c1 ff ff ff       	call   c001b06e <Reg::readBool(char*, char*, bool*)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	84 c0                	test   al,al
c001b0b2:	74 04                	je     c001b0b8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0b4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0b8:	88 d8                	mov    al,bl
c001b0ba:	83 c4 18             	add    esp,0x18
c001b0bd:	5b                   	pop    ebx
c001b0be:	c3                   	ret    

c001b0bf <Reg::readIntWithDefault(char*, char*, int)>:
c001b0bf:	53                   	push   ebx
c001b0c0:	83 ec 1c             	sub    esp,0x1c
c001b0c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0cb:	50                   	push   eax
c001b0cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d4:	e8 29 fe ff ff       	call   c001af02 <Reg::readInt(char*, char*, int*)>
c001b0d9:	83 c4 10             	add    esp,0x10
c001b0dc:	84 c0                	test   al,al
c001b0de:	74 04                	je     c001b0e4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0e4:	89 d8                	mov    eax,ebx
c001b0e6:	83 c4 18             	add    esp,0x18
c001b0e9:	5b                   	pop    ebx
c001b0ea:	c3                   	ret    

c001b0eb <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b0eb:	57                   	push   edi
c001b0ec:	56                   	push   esi
c001b0ed:	56                   	push   esi
c001b0ee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0f2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0f6:	56                   	push   esi
c001b0f7:	57                   	push   edi
c001b0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b100:	e8 e8 fe ff ff       	call   c001afed <Reg::readString(char*, char*, char*, int)>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	84 c0                	test   al,al
c001b10a:	75 1a                	jne    c001b126 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b10c:	51                   	push   ecx
c001b10d:	56                   	push   esi
c001b10e:	6a 00                	push   0x0
c001b110:	57                   	push   edi
c001b111:	e8 3a 56 fe ff       	call   c0000750 <memset>
c001b116:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b119:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b11d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b11f:	83 c4 10             	add    esp,0x10
c001b122:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b126:	89 f8                	mov    eax,edi
c001b128:	5a                   	pop    edx
c001b129:	5e                   	pop    esi
c001b12a:	5f                   	pop    edi
c001b12b:	c3                   	ret    

c001b12c <Sys::eject(regs*)>:
c001b12c:	83 ec 0c             	sub    esp,0xc
c001b12f:	83 ca ff             	or     edx,0xffffffff
c001b132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b136:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b139:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b13e:	83 e9 41             	sub    ecx,0x41
c001b141:	83 f9 19             	cmp    ecx,0x19
c001b144:	77 18                	ja     c001b15e <Sys::eject(regs*)+0x32>
c001b146:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c001b14d:	85 c9                	test   ecx,ecx
c001b14f:	74 0d                	je     c001b15e <Sys::eject(regs*)+0x32>
c001b151:	83 ec 0c             	sub    esp,0xc
c001b154:	51                   	push   ecx
c001b155:	e8 8c b0 ff ff       	call   c00161e6 <LogicalDisk::eject()>
c001b15a:	83 c4 10             	add    esp,0x10
c001b15d:	99                   	cdq    
c001b15e:	83 c4 0c             	add    esp,0xc
c001b161:	c3                   	ret    

c001b162 <Sys::exit(regs*)>:
c001b162:	83 ec 18             	sub    esp,0x18
c001b165:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b169:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b16c:	e8 7e 38 00 00       	call   c001e9ef <terminateTask(int)>
c001b171:	83 c8 ff             	or     eax,0xffffffff
c001b174:	83 c4 1c             	add    esp,0x1c
c001b177:	89 c2                	mov    edx,eax
c001b179:	c3                   	ret    

c001b17a <Sys::getCwd(regs*)>:
c001b17a:	83 ec 10             	sub    esp,0x10
c001b17d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b181:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b184:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b187:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b18f:	e8 a0 7a ff ff       	call   c0012c34 <Fs::getcwd(Process*, char*, int)>
c001b194:	83 c4 1c             	add    esp,0x1c
c001b197:	99                   	cdq    
c001b198:	c3                   	ret    

c001b199 <Sys::getPID(regs*)>:
c001b199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b19e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1a3:	99                   	cdq    
c001b1a4:	c3                   	ret    

c001b1a5 <Sys::getRAMData(regs*)>:
c001b1a5:	8b 0d 54 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f054
c001b1ab:	6b 05 50 f0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f050,0x64
c001b1b2:	99                   	cdq    
c001b1b3:	f7 f9                	idiv   ecx
c001b1b5:	c1 e0 18             	shl    eax,0x18
c001b1b8:	09 c8                	or     eax,ecx
c001b1ba:	99                   	cdq    
c001b1bb:	c3                   	ret    

c001b1bc <Sys::getVGAPtr(regs*)>:
c001b1bc:	55                   	push   ebp
c001b1bd:	57                   	push   edi
c001b1be:	56                   	push   esi
c001b1bf:	53                   	push   ebx
c001b1c0:	83 ec 18             	sub    esp,0x18
c001b1c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b1c7:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b1ca:	e8 02 33 00 00       	call   c001e4d1 <Thr::processFromPID(int)>
c001b1cf:	83 c4 10             	add    esp,0x10
c001b1d2:	89 c1                	mov    ecx,eax
c001b1d4:	b8 01 00 00 00       	mov    eax,0x1
c001b1d9:	85 c9                	test   ecx,ecx
c001b1db:	74 59                	je     c001b236 <Sys::getVGAPtr(regs*)+0x7a>
c001b1dd:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b1e3:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b1e7:	74 0c                	je     c001b1f5 <Sys::getVGAPtr(regs*)+0x39>
c001b1e9:	83 ec 0c             	sub    esp,0xc
c001b1ec:	53                   	push   ebx
c001b1ed:	e8 04 55 ff ff       	call   c00106f6 <setActiveTerminal(VgaText*)>
c001b1f2:	83 c4 10             	add    esp,0x10
c001b1f5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b1f8:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b1fb:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b200:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b202:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b205:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b208:	81 c3 82 00 00 00    	add    ebx,0x82
c001b20e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b214:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b217:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b21a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b220:	50                   	push   eax
c001b221:	50                   	push   eax
c001b222:	53                   	push   ebx
c001b223:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b226:	05 a8 0f 00 00       	add    eax,0xfa8
c001b22b:	50                   	push   eax
c001b22c:	e8 db 55 fe ff       	call   c000080c <strcpy>
c001b231:	83 c4 10             	add    esp,0x10
c001b234:	31 c0                	xor    eax,eax
c001b236:	83 c4 0c             	add    esp,0xc
c001b239:	31 d2                	xor    edx,edx
c001b23b:	5b                   	pop    ebx
c001b23c:	5e                   	pop    esi
c001b23d:	5f                   	pop    edi
c001b23e:	5d                   	pop    ebp
c001b23f:	c3                   	ret    

c001b240 <Sys::loadDLL(regs*)>:
c001b240:	56                   	push   esi
c001b241:	53                   	push   ebx
c001b242:	31 d2                	xor    edx,edx
c001b244:	51                   	push   ecx
c001b245:	b8 01 00 00 00       	mov    eax,0x1
c001b24a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b24e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b252:	0f 84 8c 00 00 00    	je     c001b2e4 <Sys::loadDLL(regs*)+0xa4>
c001b258:	83 ec 0c             	sub    esp,0xc
c001b25b:	68 14 01 00 00       	push   0x114
c001b260:	e8 27 46 ff ff       	call   c000f88c <malloc>
c001b265:	83 c4 0c             	add    esp,0xc
c001b268:	89 c3                	mov    ebx,eax
c001b26a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b26f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b272:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b275:	53                   	push   ebx
c001b276:	e8 b7 7b ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001b27b:	83 c4 10             	add    esp,0x10
c001b27e:	31 d2                	xor    edx,edx
c001b280:	b8 02 00 00 00       	mov    eax,0x2
c001b285:	85 db                	test   ebx,ebx
c001b287:	74 5b                	je     c001b2e4 <Sys::loadDLL(regs*)+0xa4>
c001b289:	83 ec 0c             	sub    esp,0xc
c001b28c:	53                   	push   ebx
c001b28d:	e8 72 7e ff ff       	call   c0013104 <File::exists()>
c001b292:	83 c4 10             	add    esp,0x10
c001b295:	84 c0                	test   al,al
c001b297:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b299:	75 11                	jne    c001b2ac <Sys::loadDLL(regs*)+0x6c>
c001b29b:	83 ec 0c             	sub    esp,0xc
c001b29e:	53                   	push   ebx
c001b29f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2a2:	83 c4 10             	add    esp,0x10
c001b2a5:	b8 03 00 00 00       	mov    eax,0x3
c001b2aa:	eb 36                	jmp    c001b2e2 <Sys::loadDLL(regs*)+0xa2>
c001b2ac:	83 ec 0c             	sub    esp,0xc
c001b2af:	53                   	push   ebx
c001b2b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2b3:	58                   	pop    eax
c001b2b4:	5a                   	pop    edx
c001b2b5:	6a 00                	push   0x0
c001b2b7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2ba:	e8 1e 24 00 00       	call   c001d6dd <Thr::loadDLL(char const*, bool)>
c001b2bf:	83 c4 10             	add    esp,0x10
c001b2c2:	89 c1                	mov    ecx,eax
c001b2c4:	31 d2                	xor    edx,edx
c001b2c6:	b8 04 00 00 00       	mov    eax,0x4
c001b2cb:	85 c9                	test   ecx,ecx
c001b2cd:	74 15                	je     c001b2e4 <Sys::loadDLL(regs*)+0xa4>
c001b2cf:	53                   	push   ebx
c001b2d0:	53                   	push   ebx
c001b2d1:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c001b2d7:	51                   	push   ecx
c001b2d8:	e8 2b 26 00 00       	call   c001d908 <Thr::executeDLL(unsigned long, void*)>
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	31 c0                	xor    eax,eax
c001b2e2:	31 d2                	xor    edx,edx
c001b2e4:	59                   	pop    ecx
c001b2e5:	5b                   	pop    ebx
c001b2e6:	5e                   	pop    esi
c001b2e7:	c3                   	ret    

c001b2e8 <Sys::read(regs*)>:
c001b2e8:	57                   	push   edi
c001b2e9:	56                   	push   esi
c001b2ea:	53                   	push   ebx
c001b2eb:	83 ec 10             	sub    esp,0x10
c001b2ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2f5:	83 f8 02             	cmp    eax,0x2
c001b2f8:	77 10                	ja     c001b30a <Sys::read(regs*)+0x22>
c001b2fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b302:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b308:	eb 0e                	jmp    c001b318 <Sys::read(regs*)+0x30>
c001b30a:	83 ec 0c             	sub    esp,0xc
c001b30d:	50                   	push   eax
c001b30e:	e8 64 60 ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001b313:	83 c4 10             	add    esp,0x10
c001b316:	89 c1                	mov    ecx,eax
c001b318:	83 c8 ff             	or     eax,0xffffffff
c001b31b:	85 c9                	test   ecx,ecx
c001b31d:	89 c2                	mov    edx,eax
c001b31f:	74 28                	je     c001b349 <Sys::read(regs*)+0x61>
c001b321:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b329:	31 ff                	xor    edi,edi
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b330:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b334:	52                   	push   edx
c001b335:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b338:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b33b:	57                   	push   edi
c001b33c:	56                   	push   esi
c001b33d:	51                   	push   ecx
c001b33e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b341:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b345:	83 c4 20             	add    esp,0x20
c001b348:	99                   	cdq    
c001b349:	83 c4 10             	add    esp,0x10
c001b34c:	5b                   	pop    ebx
c001b34d:	5e                   	pop    esi
c001b34e:	5f                   	pop    edi
c001b34f:	c3                   	ret    

c001b350 <Sys::sbrk(regs*)>:
c001b350:	56                   	push   esi
c001b351:	53                   	push   ebx
c001b352:	50                   	push   eax
c001b353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b358:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b35c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b35f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b362:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b368:	85 db                	test   ebx,ebx
c001b36a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b36d:	74 02                	je     c001b371 <Sys::sbrk(regs*)+0x21>
c001b36f:	79 06                	jns    c001b377 <Sys::sbrk(regs*)+0x27>
c001b371:	89 f0                	mov    eax,esi
c001b373:	31 d2                	xor    edx,edx
c001b375:	eb 2a                	jmp    c001b3a1 <Sys::sbrk(regs*)+0x51>
c001b377:	83 c8 ff             	or     eax,0xffffffff
c001b37a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b380:	89 c2                	mov    edx,eax
c001b382:	77 1d                	ja     c001b3a1 <Sys::sbrk(regs*)+0x51>
c001b384:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b38a:	50                   	push   eax
c001b38b:	c1 ea 0c             	shr    edx,0xc
c001b38e:	68 07 0c 00 00       	push   0xc07
c001b393:	52                   	push   edx
c001b394:	51                   	push   ecx
c001b395:	e8 6c 6a ff ff       	call   c0011e06 <VAS::allocatePages(int, int)>
c001b39a:	89 f0                	mov    eax,esi
c001b39c:	31 d2                	xor    edx,edx
c001b39e:	83 c4 10             	add    esp,0x10
c001b3a1:	59                   	pop    ecx
c001b3a2:	5b                   	pop    ebx
c001b3a3:	5e                   	pop    esi
c001b3a4:	c3                   	ret    

c001b3a5 <Sys::setCwd(regs*)>:
c001b3a5:	83 ec 14             	sub    esp,0x14
c001b3a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3b7:	e8 e7 7d ff ff       	call   c00131a3 <Fs::setcwd(Process*, char*)>
c001b3bc:	83 c4 1c             	add    esp,0x1c
c001b3bf:	99                   	cdq    
c001b3c0:	c3                   	ret    

c001b3c1 <Sys::setTime(regs*)>:
c001b3c1:	55                   	push   ebp
c001b3c2:	31 d2                	xor    edx,edx
c001b3c4:	57                   	push   edi
c001b3c5:	bf 18 00 00 00       	mov    edi,0x18
c001b3ca:	56                   	push   esi
c001b3cb:	53                   	push   ebx
c001b3cc:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3d1:	83 ec 30             	sub    esp,0x30
c001b3d4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3d8:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3db:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3de:	f7 f3                	div    ebx
c001b3e0:	89 d6                	mov    esi,edx
c001b3e2:	31 d2                	xor    edx,edx
c001b3e4:	f7 f3                	div    ebx
c001b3e6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b3ed:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	f7 f3                	div    ebx
c001b3f6:	31 d2                	xor    edx,edx
c001b3f8:	bb 0c 00 00 00       	mov    ebx,0xc
c001b3fd:	f7 f7                	div    edi
c001b3ff:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b402:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b406:	0f b7 cd             	movzx  ecx,bp
c001b409:	56                   	push   esi
c001b40a:	89 c7                	mov    edi,eax
c001b40c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b410:	c1 e6 10             	shl    esi,0x10
c001b413:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b417:	83 e7 1f             	and    edi,0x1f
c001b41a:	51                   	push   ecx
c001b41b:	47                   	inc    edi
c001b41c:	c1 e8 05             	shr    eax,0x5
c001b41f:	31 d2                	xor    edx,edx
c001b421:	f7 f3                	div    ebx
c001b423:	31 db                	xor    ebx,ebx
c001b425:	52                   	push   edx
c001b426:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b42a:	57                   	push   edi
c001b42b:	68 a9 c6 02 c0       	push   0xc002c6a9
c001b430:	e8 9e 74 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b435:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b439:	89 f8                	mov    eax,edi
c001b43b:	31 c9                	xor    ecx,ecx
c001b43d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b441:	88 c1                	mov    cl,al
c001b443:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b449:	88 d5                	mov    ch,dl
c001b44b:	c1 e0 10             	shl    eax,0x10
c001b44e:	0f b7 d1             	movzx  edx,cx
c001b451:	09 c2                	or     edx,eax
c001b453:	89 d8                	mov    eax,ebx
c001b455:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b45a:	09 f0                	or     eax,esi
c001b45c:	89 c3                	mov    ebx,eax
c001b45e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b462:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b466:	83 c4 18             	add    esp,0x18
c001b469:	53                   	push   ebx
c001b46a:	52                   	push   edx
c001b46b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b46f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b473:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b477:	e8 49 84 ff ff       	call   c00138c5 <datetimeToSeconds(datetime_t)>
c001b47c:	83 c4 0c             	add    esp,0xc
c001b47f:	52                   	push   edx
c001b480:	50                   	push   eax
c001b481:	56                   	push   esi
c001b482:	e8 c5 85 ff ff       	call   c0013a4c <secondsToDatetime(unsigned long long)>
c001b487:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b48b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b48f:	51                   	push   ecx
c001b490:	89 d6                	mov    esi,edx
c001b492:	51                   	push   ecx
c001b493:	c1 ee 10             	shr    esi,0x10
c001b496:	89 f3                	mov    ebx,esi
c001b498:	0f b6 f3             	movzx  esi,bl
c001b49b:	56                   	push   esi
c001b49c:	0f b6 f6             	movzx  esi,dh
c001b49f:	0f b6 d2             	movzx  edx,dl
c001b4a2:	56                   	push   esi
c001b4a3:	52                   	push   edx
c001b4a4:	89 c2                	mov    edx,eax
c001b4a6:	c1 ea 10             	shr    edx,0x10
c001b4a9:	52                   	push   edx
c001b4aa:	0f b6 d4             	movzx  edx,ah
c001b4ad:	0f b6 c0             	movzx  eax,al
c001b4b0:	52                   	push   edx
c001b4b1:	50                   	push   eax
c001b4b2:	68 c5 c6 02 c0       	push   0xc002c6c5
c001b4b7:	e8 17 74 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b4bc:	83 c4 2c             	add    esp,0x2c
c001b4bf:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001b4c4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4cc:	53                   	push   ebx
c001b4cd:	51                   	push   ecx
c001b4ce:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4d4:	e8 13 85 ff ff       	call   c00139ec <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4d9:	83 f0 01             	xor    eax,0x1
c001b4dc:	31 d2                	xor    edx,edx
c001b4de:	0f b6 c0             	movzx  eax,al
c001b4e1:	83 c4 3c             	add    esp,0x3c
c001b4e4:	5b                   	pop    ebx
c001b4e5:	5e                   	pop    esi
c001b4e6:	5f                   	pop    edi
c001b4e7:	5d                   	pop    ebp
c001b4e8:	c3                   	ret    

c001b4e9 <Sys::timezone(regs*)>:
c001b4e9:	53                   	push   ebx
c001b4ea:	83 ec 08             	sub    esp,0x8
c001b4ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4f1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4f5:	75 17                	jne    c001b50e <Sys::timezone(regs*)+0x25>
c001b4f7:	83 ec 0c             	sub    esp,0xc
c001b4fa:	68 e1 c6 02 c0       	push   0xc002c6e1
c001b4ff:	e8 cf 73 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b504:	83 c8 ff             	or     eax,0xffffffff
c001b507:	83 c4 10             	add    esp,0x10
c001b50a:	89 c2                	mov    edx,eax
c001b50c:	eb 20                	jmp    c001b52e <Sys::timezone(regs*)+0x45>
c001b50e:	83 ec 0c             	sub    esp,0xc
c001b511:	68 19 c7 02 c0       	push   0xc002c719
c001b516:	e8 b8 73 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b51b:	58                   	pop    eax
c001b51c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b51f:	e8 2a 82 ff ff       	call   c001374e <User::loadClockSettings(int)>
c001b524:	83 c4 10             	add    esp,0x10
c001b527:	b8 01 00 00 00       	mov    eax,0x1
c001b52c:	31 d2                	xor    edx,edx
c001b52e:	83 c4 08             	add    esp,0x8
c001b531:	5b                   	pop    ebx
c001b532:	c3                   	ret    

c001b533 <Sys::write(regs*)>:
c001b533:	57                   	push   edi
c001b534:	56                   	push   esi
c001b535:	53                   	push   ebx
c001b536:	83 ec 10             	sub    esp,0x10
c001b539:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b53d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b540:	83 f8 02             	cmp    eax,0x2
c001b543:	77 10                	ja     c001b555 <Sys::write(regs*)+0x22>
c001b545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b54d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b553:	eb 0e                	jmp    c001b563 <Sys::write(regs*)+0x30>
c001b555:	83 ec 0c             	sub    esp,0xc
c001b558:	50                   	push   eax
c001b559:	e8 19 5e ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001b55e:	83 c4 10             	add    esp,0x10
c001b561:	89 c1                	mov    ecx,eax
c001b563:	83 c8 ff             	or     eax,0xffffffff
c001b566:	85 c9                	test   ecx,ecx
c001b568:	89 c2                	mov    edx,eax
c001b56a:	74 28                	je     c001b594 <Sys::write(regs*)+0x61>
c001b56c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b574:	31 ff                	xor    edi,edi
c001b576:	83 ec 0c             	sub    esp,0xc
c001b579:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b57b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b57f:	52                   	push   edx
c001b580:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b583:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b586:	57                   	push   edi
c001b587:	56                   	push   esi
c001b588:	51                   	push   ecx
c001b589:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b58c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b590:	83 c4 20             	add    esp,0x20
c001b593:	99                   	cdq    
c001b594:	83 c4 10             	add    esp,0x10
c001b597:	5b                   	pop    ebx
c001b598:	5e                   	pop    esi
c001b599:	5f                   	pop    edi
c001b59a:	c3                   	ret    

c001b59b <Sys::wsbe(regs*)>:
c001b59b:	57                   	push   edi
c001b59c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5a1:	56                   	push   esi
c001b5a2:	be 58 c7 02 c0       	mov    esi,0xc002c758
c001b5a7:	53                   	push   ebx
c001b5a8:	83 ec 30             	sub    esp,0x30
c001b5ab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5af:	fc                   	cld    
c001b5b0:	83 ec 0c             	sub    esp,0xc
c001b5b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5b5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5c1:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5c7:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5c9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5cc:	57                   	push   edi
c001b5cd:	e8 9a 51 fe ff       	call   c000076c <strlen>
c001b5d2:	5a                   	pop    edx
c001b5d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5d7:	52                   	push   edx
c001b5d8:	31 d2                	xor    edx,edx
c001b5da:	57                   	push   edi
c001b5db:	52                   	push   edx
c001b5dc:	50                   	push   eax
c001b5dd:	56                   	push   esi
c001b5de:	ff d3                	call   ebx
c001b5e0:	83 c4 14             	add    esp,0x14
c001b5e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5e7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5ea:	e8 00 34 00 00       	call   c001e9ef <terminateTask(int)>
c001b5ef:	83 c4 40             	add    esp,0x40
c001b5f2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5f7:	5b                   	pop    ebx
c001b5f8:	31 d2                	xor    edx,edx
c001b5fa:	5e                   	pop    esi
c001b5fb:	5f                   	pop    edi
c001b5fc:	c3                   	ret    

c001b5fd <Sys::yield(regs*)>:
c001b5fd:	57                   	push   edi
c001b5fe:	56                   	push   esi
c001b5ff:	53                   	push   ebx
c001b600:	fa                   	cli    
c001b601:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001b607:	e8 b0 2a 00 00       	call   c001e0bc <schedule()>
c001b60c:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001b611:	48                   	dec    eax
c001b612:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001b617:	75 01                	jne    c001b61a <Sys::yield(regs*)+0x1d>
c001b619:	fb                   	sti    
c001b61a:	8b 35 70 f6 02 c0    	mov    esi,DWORD PTR ds:0xc002f670
c001b620:	8b 3d 74 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f674
c001b626:	89 f0                	mov    eax,esi
c001b628:	89 fb                	mov    ebx,edi
c001b62a:	89 f1                	mov    ecx,esi
c001b62c:	c1 e0 07             	shl    eax,0x7
c001b62f:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b633:	25 80 30 0f 00       	and    eax,0xf3080
c001b638:	c1 eb 17             	shr    ebx,0x17
c001b63b:	31 c8                	xor    eax,ecx
c001b63d:	89 da                	mov    edx,ebx
c001b63f:	5b                   	pop    ebx
c001b640:	5e                   	pop    esi
c001b641:	5f                   	pop    edi
c001b642:	c3                   	ret    

c001b643 <sysCallSeekDir(regs*)>:
c001b643:	31 c0                	xor    eax,eax
c001b645:	31 d2                	xor    edx,edx
c001b647:	c3                   	ret    

c001b648 <sysCallTellDir(regs*)>:
c001b648:	31 c0                	xor    eax,eax
c001b64a:	31 d2                	xor    edx,edx
c001b64c:	c3                   	ret    

c001b64d <sysCallVerify(regs*)>:
c001b64d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b651:	31 d2                	xor    edx,edx
c001b653:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b656:	c3                   	ret    

c001b657 <sysFormatDisk(regs*)>:
c001b657:	56                   	push   esi
c001b658:	53                   	push   ebx
c001b659:	53                   	push   ebx
c001b65a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b65e:	8b 1d 74 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f174
c001b664:	eb 25                	jmp    c001b68b <sysFormatDisk(regs*)+0x34>
c001b666:	83 ec 0c             	sub    esp,0xc
c001b669:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b66c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b66e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b671:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b674:	50                   	push   eax
c001b675:	ff 34 85 00 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a00]
c001b67c:	53                   	push   ebx
c001b67d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b680:	83 c4 20             	add    esp,0x20
c001b683:	83 f8 08             	cmp    eax,0x8
c001b686:	75 12                	jne    c001b69a <sysFormatDisk(regs*)+0x43>
c001b688:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b68b:	85 db                	test   ebx,ebx
c001b68d:	75 d7                	jne    c001b666 <sysFormatDisk(regs*)+0xf>
c001b68f:	59                   	pop    ecx
c001b690:	b8 03 00 00 00       	mov    eax,0x3
c001b695:	31 d2                	xor    edx,edx
c001b697:	5b                   	pop    ebx
c001b698:	5e                   	pop    esi
c001b699:	c3                   	ret    
c001b69a:	85 c0                	test   eax,eax
c001b69c:	74 1b                	je     c001b6b9 <sysFormatDisk(regs*)+0x62>
c001b69e:	83 f8 09             	cmp    eax,0x9
c001b6a1:	74 0b                	je     c001b6ae <sysFormatDisk(regs*)+0x57>
c001b6a3:	59                   	pop    ecx
c001b6a4:	b8 02 00 00 00       	mov    eax,0x2
c001b6a9:	31 d2                	xor    edx,edx
c001b6ab:	5b                   	pop    ebx
c001b6ac:	5e                   	pop    esi
c001b6ad:	c3                   	ret    
c001b6ae:	59                   	pop    ecx
c001b6af:	b8 01 00 00 00       	mov    eax,0x1
c001b6b4:	31 d2                	xor    edx,edx
c001b6b6:	5b                   	pop    ebx
c001b6b7:	5e                   	pop    esi
c001b6b8:	c3                   	ret    
c001b6b9:	59                   	pop    ecx
c001b6ba:	31 c0                	xor    eax,eax
c001b6bc:	31 d2                	xor    edx,edx
c001b6be:	5b                   	pop    ebx
c001b6bf:	5e                   	pop    esi
c001b6c0:	c3                   	ret    

c001b6c1 <sysSetDiskVolumeLabel(regs*)>:
c001b6c1:	56                   	push   esi
c001b6c2:	53                   	push   ebx
c001b6c3:	53                   	push   ebx
c001b6c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6c8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6cb:	83 f8 19             	cmp    eax,0x19
c001b6ce:	77 29                	ja     c001b6f9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6d0:	8b 0c 85 00 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0a00]
c001b6d7:	85 c9                	test   ecx,ecx
c001b6d9:	74 1e                	je     c001b6f9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6de:	85 d2                	test   edx,edx
c001b6e0:	74 17                	je     c001b6f9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6e2:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6e8:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6ea:	52                   	push   edx
c001b6eb:	50                   	push   eax
c001b6ec:	51                   	push   ecx
c001b6ed:	53                   	push   ebx
c001b6ee:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	99                   	cdq    
c001b6f5:	59                   	pop    ecx
c001b6f6:	5b                   	pop    ebx
c001b6f7:	5e                   	pop    esi
c001b6f8:	c3                   	ret    
c001b6f9:	59                   	pop    ecx
c001b6fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b704:	5b                   	pop    ebx
c001b705:	5e                   	pop    esi
c001b706:	c3                   	ret    

c001b707 <sysGetDiskVolumeLabel(regs*)>:
c001b707:	57                   	push   edi
c001b708:	56                   	push   esi
c001b709:	53                   	push   ebx
c001b70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b711:	83 fa 19             	cmp    edx,0x19
c001b714:	77 34                	ja     c001b74a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b716:	8b 0c 95 00 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0a00]
c001b71d:	85 c9                	test   ecx,ecx
c001b71f:	74 29                	je     c001b74a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b721:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b724:	85 db                	test   ebx,ebx
c001b726:	74 22                	je     c001b74a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b728:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b72b:	85 c0                	test   eax,eax
c001b72d:	74 1b                	je     c001b74a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b72f:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b735:	83 ec 0c             	sub    esp,0xc
c001b738:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b73a:	50                   	push   eax
c001b73b:	53                   	push   ebx
c001b73c:	52                   	push   edx
c001b73d:	51                   	push   ecx
c001b73e:	56                   	push   esi
c001b73f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b742:	83 c4 20             	add    esp,0x20
c001b745:	99                   	cdq    
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	5f                   	pop    edi
c001b749:	c3                   	ret    
c001b74a:	5b                   	pop    ebx
c001b74b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b750:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b755:	5e                   	pop    esi
c001b756:	5f                   	pop    edi
c001b757:	c3                   	ret    

c001b758 <sysShutdown(regs*)>:
c001b758:	83 ec 0c             	sub    esp,0xc
c001b75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b762:	85 c0                	test   eax,eax
c001b764:	74 18                	je     c001b77e <sysShutdown(regs*)+0x26>
c001b766:	83 f8 01             	cmp    eax,0x1
c001b769:	74 38                	je     c001b7a3 <sysShutdown(regs*)+0x4b>
c001b76b:	83 f8 02             	cmp    eax,0x2
c001b76e:	74 24                	je     c001b794 <sysShutdown(regs*)+0x3c>
c001b770:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b775:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	c3                   	ret    
c001b77e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001b783:	8b 10                	mov    edx,DWORD PTR [eax]
c001b785:	6a 00                	push   0x0
c001b787:	6a 00                	push   0x0
c001b789:	6a 00                	push   0x0
c001b78b:	50                   	push   eax
c001b78c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	eb dc                	jmp    c001b770 <sysShutdown(regs*)+0x18>
c001b794:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001b799:	8b 10                	mov    edx,DWORD PTR [eax]
c001b79b:	6a 00                	push   0x0
c001b79d:	6a 00                	push   0x0
c001b79f:	6a 01                	push   0x1
c001b7a1:	eb e8                	jmp    c001b78b <sysShutdown(regs*)+0x33>
c001b7a3:	a1 a0 16 03 c0       	mov    eax,ds:0xc00316a0
c001b7a8:	85 c0                	test   eax,eax
c001b7aa:	74 02                	je     c001b7ae <sysShutdown(regs*)+0x56>
c001b7ac:	ff d0                	call   eax
c001b7ae:	31 c0                	xor    eax,eax
c001b7b0:	31 d2                	xor    edx,edx
c001b7b2:	83 c4 0c             	add    esp,0xc
c001b7b5:	c3                   	ret    

c001b7b6 <sysCallRealpath(regs*)>:
c001b7b6:	83 ec 0c             	sub    esp,0xc
c001b7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7c0:	85 d2                	test   edx,edx
c001b7c2:	74 07                	je     c001b7cb <sysCallRealpath(regs*)+0x15>
c001b7c4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7c7:	85 c0                	test   eax,eax
c001b7c9:	75 0b                	jne    c001b7d6 <sysCallRealpath(regs*)+0x20>
c001b7cb:	b8 01 00 00 00       	mov    eax,0x1
c001b7d0:	31 d2                	xor    edx,edx
c001b7d2:	83 c4 0c             	add    esp,0xc
c001b7d5:	c3                   	ret    
c001b7d6:	51                   	push   ecx
c001b7d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7dd:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7e0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7e6:	51                   	push   ecx
c001b7e7:	52                   	push   edx
c001b7e8:	50                   	push   eax
c001b7e9:	e8 9a 74 ff ff       	call   c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7ee:	83 c4 10             	add    esp,0x10
c001b7f1:	31 c0                	xor    eax,eax
c001b7f3:	31 d2                	xor    edx,edx
c001b7f5:	83 c4 0c             	add    esp,0xc
c001b7f8:	c3                   	ret    

c001b7f9 <sysCallGetArgc(regs*)>:
c001b7f9:	83 ec 14             	sub    esp,0x14
c001b7fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b801:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b804:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b80a:	68 84 c7 02 c0       	push   0xc002c784
c001b80f:	e8 bf 70 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b819:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b81c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b822:	83 c4 1c             	add    esp,0x1c
c001b825:	99                   	cdq    
c001b826:	c3                   	ret    

c001b827 <sysCallReadDir(regs*)>:
c001b827:	53                   	push   ebx
c001b828:	83 ec 18             	sub    esp,0x18
c001b82b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b82f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b832:	83 f8 02             	cmp    eax,0x2
c001b835:	76 53                	jbe    c001b88a <sysCallReadDir(regs*)+0x63>
c001b837:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b83a:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b840:	77 4f                	ja     c001b891 <sysCallReadDir(regs*)+0x6a>
c001b842:	83 ec 0c             	sub    esp,0xc
c001b845:	50                   	push   eax
c001b846:	e8 2c 5b ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001b84b:	83 c4 10             	add    esp,0x10
c001b84e:	85 c0                	test   eax,eax
c001b850:	74 50                	je     c001b8a2 <sysCallReadDir(regs*)+0x7b>
c001b852:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b85a:	83 ec 0c             	sub    esp,0xc
c001b85d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b85f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b863:	51                   	push   ecx
c001b864:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b867:	6a 00                	push   0x0
c001b869:	68 10 01 00 00       	push   0x110
c001b86e:	50                   	push   eax
c001b86f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b872:	83 c4 20             	add    esp,0x20
c001b875:	85 c0                	test   eax,eax
c001b877:	74 38                	je     c001b8b1 <sysCallReadDir(regs*)+0x8a>
c001b879:	83 f8 07             	cmp    eax,0x7
c001b87c:	74 0c                	je     c001b88a <sysCallReadDir(regs*)+0x63>
c001b87e:	b8 02 00 00 00       	mov    eax,0x2
c001b883:	31 d2                	xor    edx,edx
c001b885:	83 c4 18             	add    esp,0x18
c001b888:	5b                   	pop    ebx
c001b889:	c3                   	ret    
c001b88a:	b8 01 00 00 00       	mov    eax,0x1
c001b88f:	eb f2                	jmp    c001b883 <sysCallReadDir(regs*)+0x5c>
c001b891:	83 ec 08             	sub    esp,0x8
c001b894:	52                   	push   edx
c001b895:	68 a8 c8 02 c0       	push   0xc002c8a8
c001b89a:	e8 34 70 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8ac:	83 c4 18             	add    esp,0x18
c001b8af:	5b                   	pop    ebx
c001b8b0:	c3                   	ret    
c001b8b1:	31 c0                	xor    eax,eax
c001b8b3:	eb ce                	jmp    c001b883 <sysCallReadDir(regs*)+0x5c>

c001b8b5 <sysCallIsATTY(regs*)>:
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8bf:	83 f8 02             	cmp    eax,0x2
c001b8c2:	76 07                	jbe    c001b8cb <sysCallIsATTY(regs*)+0x16>
c001b8c4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8c9:	75 26                	jne    c001b8f1 <sysCallIsATTY(regs*)+0x3c>
c001b8cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8d9:	85 c0                	test   eax,eax
c001b8db:	74 24                	je     c001b901 <sysCallIsATTY(regs*)+0x4c>
c001b8dd:	83 ec 0c             	sub    esp,0xc
c001b8e0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8e2:	50                   	push   eax
c001b8e3:	ff 12                	call   DWORD PTR [edx]
c001b8e5:	31 d2                	xor    edx,edx
c001b8e7:	0f b6 c0             	movzx  eax,al
c001b8ea:	83 c4 10             	add    esp,0x10
c001b8ed:	83 c4 0c             	add    esp,0xc
c001b8f0:	c3                   	ret    
c001b8f1:	83 ec 0c             	sub    esp,0xc
c001b8f4:	50                   	push   eax
c001b8f5:	e8 7d 5a ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001b8fa:	83 c4 10             	add    esp,0x10
c001b8fd:	85 c0                	test   eax,eax
c001b8ff:	75 dc                	jne    c001b8dd <sysCallIsATTY(regs*)+0x28>
c001b901:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b906:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b90b:	83 c4 0c             	add    esp,0xc
c001b90e:	c3                   	ret    

c001b90f <sysCallSeek(regs*)>:
c001b90f:	53                   	push   ebx
c001b910:	83 ec 08             	sub    esp,0x8
c001b913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b917:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b91a:	83 f8 02             	cmp    eax,0x2
c001b91d:	76 4a                	jbe    c001b969 <sysCallSeek(regs*)+0x5a>
c001b91f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b924:	77 32                	ja     c001b958 <sysCallSeek(regs*)+0x49>
c001b926:	83 ec 0c             	sub    esp,0xc
c001b929:	50                   	push   eax
c001b92a:	e8 48 5a ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001b92f:	83 c4 0c             	add    esp,0xc
c001b932:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b935:	31 db                	xor    ebx,ebx
c001b937:	53                   	push   ebx
c001b938:	51                   	push   ecx
c001b939:	50                   	push   eax
c001b93a:	e8 15 76 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001b93f:	83 c4 10             	add    esp,0x10
c001b942:	85 c0                	test   eax,eax
c001b944:	0f 95 c0             	setne  al
c001b947:	31 d2                	xor    edx,edx
c001b949:	0f b6 c0             	movzx  eax,al
c001b94c:	f7 d8                	neg    eax
c001b94e:	83 d2 00             	adc    edx,0x0
c001b951:	83 c4 08             	add    esp,0x8
c001b954:	f7 da                	neg    edx
c001b956:	5b                   	pop    ebx
c001b957:	c3                   	ret    
c001b958:	83 ec 08             	sub    esp,0x8
c001b95b:	50                   	push   eax
c001b95c:	68 8f c7 02 c0       	push   0xc002c78f
c001b961:	e8 6d 6f ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b966:	83 c4 10             	add    esp,0x10
c001b969:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b96e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b973:	83 c4 08             	add    esp,0x8
c001b976:	5b                   	pop    ebx
c001b977:	c3                   	ret    

c001b978 <sysCallTell(regs*)>:
c001b978:	53                   	push   ebx
c001b979:	83 ec 08             	sub    esp,0x8
c001b97c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b980:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b983:	83 f8 02             	cmp    eax,0x2
c001b986:	76 5e                	jbe    c001b9e6 <sysCallTell(regs*)+0x6e>
c001b988:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b98d:	77 2d                	ja     c001b9bc <sysCallTell(regs*)+0x44>
c001b98f:	83 ec 0c             	sub    esp,0xc
c001b992:	50                   	push   eax
c001b993:	e8 df 59 ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001b998:	5a                   	pop    edx
c001b999:	59                   	pop    ecx
c001b99a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b99d:	50                   	push   eax
c001b99e:	e8 07 76 ff ff       	call   c0012faa <File::tell(unsigned long long*)>
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	85 c0                	test   eax,eax
c001b9a8:	0f 95 c0             	setne  al
c001b9ab:	31 d2                	xor    edx,edx
c001b9ad:	0f b6 c0             	movzx  eax,al
c001b9b0:	f7 d8                	neg    eax
c001b9b2:	83 d2 00             	adc    edx,0x0
c001b9b5:	83 c4 08             	add    esp,0x8
c001b9b8:	f7 da                	neg    edx
c001b9ba:	5b                   	pop    ebx
c001b9bb:	c3                   	ret    
c001b9bc:	83 ec 08             	sub    esp,0x8
c001b9bf:	50                   	push   eax
c001b9c0:	68 a9 c7 02 c0       	push   0xc002c7a9
c001b9c5:	e8 09 6f ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001b9ca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9cd:	83 c4 10             	add    esp,0x10
c001b9d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9dd:	31 d2                	xor    edx,edx
c001b9df:	31 c0                	xor    eax,eax
c001b9e1:	83 c4 08             	add    esp,0x8
c001b9e4:	5b                   	pop    ebx
c001b9e5:	c3                   	ret    
c001b9e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f0:	83 c4 08             	add    esp,0x8
c001b9f3:	5b                   	pop    ebx
c001b9f4:	c3                   	ret    

c001b9f5 <sysCallSize(regs*)>:
c001b9f5:	53                   	push   ebx
c001b9f6:	83 ec 18             	sub    esp,0x18
c001b9f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba00:	83 f8 02             	cmp    eax,0x2
c001ba03:	76 64                	jbe    c001ba69 <sysCallSize(regs*)+0x74>
c001ba05:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba0a:	77 33                	ja     c001ba3f <sysCallSize(regs*)+0x4a>
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	50                   	push   eax
c001ba10:	e8 62 59 ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001ba15:	83 c4 0c             	add    esp,0xc
c001ba18:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba1c:	52                   	push   edx
c001ba1d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba20:	50                   	push   eax
c001ba21:	e8 1c 77 ff ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c001ba26:	83 c4 10             	add    esp,0x10
c001ba29:	85 c0                	test   eax,eax
c001ba2b:	0f 95 c0             	setne  al
c001ba2e:	31 d2                	xor    edx,edx
c001ba30:	0f b6 c0             	movzx  eax,al
c001ba33:	f7 d8                	neg    eax
c001ba35:	83 d2 00             	adc    edx,0x0
c001ba38:	83 c4 18             	add    esp,0x18
c001ba3b:	f7 da                	neg    edx
c001ba3d:	5b                   	pop    ebx
c001ba3e:	c3                   	ret    
c001ba3f:	83 ec 08             	sub    esp,0x8
c001ba42:	50                   	push   eax
c001ba43:	68 c3 c7 02 c0       	push   0xc002c7c3
c001ba48:	e8 86 6e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001ba4d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba60:	31 d2                	xor    edx,edx
c001ba62:	31 c0                	xor    eax,eax
c001ba64:	83 c4 18             	add    esp,0x18
c001ba67:	5b                   	pop    ebx
c001ba68:	c3                   	ret    
c001ba69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba73:	83 c4 18             	add    esp,0x18
c001ba76:	5b                   	pop    ebx
c001ba77:	c3                   	ret    

c001ba78 <sysCallSizeFromFilename(regs*)>:
c001ba78:	57                   	push   edi
c001ba79:	56                   	push   esi
c001ba7a:	53                   	push   ebx
c001ba7b:	83 ec 20             	sub    esp,0x20
c001ba7e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba82:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba85:	83 fb 02             	cmp    ebx,0x2
c001ba88:	0f 86 99 00 00 00    	jbe    c001bb27 <sysCallSizeFromFilename(regs*)+0xaf>
c001ba8e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba94:	77 65                	ja     c001bafb <sysCallSizeFromFilename(regs*)+0x83>
c001ba96:	83 ec 0c             	sub    esp,0xc
c001ba99:	68 14 01 00 00       	push   0x114
c001ba9e:	e8 e9 3d ff ff       	call   c000f88c <malloc>
c001baa3:	83 c4 0c             	add    esp,0xc
c001baa6:	89 c6                	mov    esi,eax
c001baa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bab0:	53                   	push   ebx
c001bab1:	56                   	push   esi
c001bab2:	e8 7b 73 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001bab7:	83 c4 0c             	add    esp,0xc
c001baba:	8d 44 24 23          	lea    eax,[esp+0x23]
c001babe:	50                   	push   eax
c001babf:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bac2:	56                   	push   esi
c001bac3:	e8 7a 76 ff ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c001bac8:	83 c4 10             	add    esp,0x10
c001bacb:	85 f6                	test   esi,esi
c001bacd:	74 14                	je     c001bae3 <sysCallSizeFromFilename(regs*)+0x6b>
c001bacf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bad3:	8b 16                	mov    edx,DWORD PTR [esi]
c001bad5:	83 ec 0c             	sub    esp,0xc
c001bad8:	56                   	push   esi
c001bad9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001badc:	83 c4 10             	add    esp,0x10
c001badf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bae3:	85 c0                	test   eax,eax
c001bae5:	0f 95 c0             	setne  al
c001bae8:	31 d2                	xor    edx,edx
c001baea:	0f b6 c0             	movzx  eax,al
c001baed:	f7 d8                	neg    eax
c001baef:	83 d2 00             	adc    edx,0x0
c001baf2:	83 c4 20             	add    esp,0x20
c001baf5:	f7 da                	neg    edx
c001baf7:	5b                   	pop    ebx
c001baf8:	5e                   	pop    esi
c001baf9:	5f                   	pop    edi
c001bafa:	c3                   	ret    
c001bafb:	83 ec 08             	sub    esp,0x8
c001bafe:	53                   	push   ebx
c001baff:	68 c3 c7 02 c0       	push   0xc002c7c3
c001bb04:	e8 ca 6d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bb09:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb1c:	31 d2                	xor    edx,edx
c001bb1e:	83 c4 20             	add    esp,0x20
c001bb21:	31 c0                	xor    eax,eax
c001bb23:	5b                   	pop    ebx
c001bb24:	5e                   	pop    esi
c001bb25:	5f                   	pop    edi
c001bb26:	c3                   	ret    
c001bb27:	83 c4 20             	add    esp,0x20
c001bb2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb2f:	5b                   	pop    ebx
c001bb30:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb35:	5e                   	pop    esi
c001bb36:	5f                   	pop    edi
c001bb37:	c3                   	ret    

c001bb38 <sysCallClose(regs*)>:
c001bb38:	53                   	push   ebx
c001bb39:	83 ec 08             	sub    esp,0x8
c001bb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb43:	83 f8 02             	cmp    eax,0x2
c001bb46:	76 50                	jbe    c001bb98 <sysCallClose(regs*)+0x60>
c001bb48:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb4d:	74 58                	je     c001bba7 <sysCallClose(regs*)+0x6f>
c001bb4f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb54:	74 60                	je     c001bbb6 <sysCallClose(regs*)+0x7e>
c001bb56:	77 2f                	ja     c001bb87 <sysCallClose(regs*)+0x4f>
c001bb58:	83 ec 0c             	sub    esp,0xc
c001bb5b:	50                   	push   eax
c001bb5c:	e8 16 58 ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001bb61:	89 c3                	mov    ebx,eax
c001bb63:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb66:	e8 89 73 ff ff       	call   c0012ef4 <File::close()>
c001bb6b:	83 c4 10             	add    esp,0x10
c001bb6e:	85 db                	test   ebx,ebx
c001bb70:	74 0c                	je     c001bb7e <sysCallClose(regs*)+0x46>
c001bb72:	83 ec 0c             	sub    esp,0xc
c001bb75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb77:	53                   	push   ebx
c001bb78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	31 c0                	xor    eax,eax
c001bb80:	31 d2                	xor    edx,edx
c001bb82:	83 c4 08             	add    esp,0x8
c001bb85:	5b                   	pop    ebx
c001bb86:	c3                   	ret    
c001bb87:	83 ec 08             	sub    esp,0x8
c001bb8a:	50                   	push   eax
c001bb8b:	68 cc c8 02 c0       	push   0xc002c8cc
c001bb90:	e8 3e 6d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bb95:	83 c4 10             	add    esp,0x10
c001bb98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bba2:	83 c4 08             	add    esp,0x8
c001bba5:	5b                   	pop    ebx
c001bba6:	c3                   	ret    
c001bba7:	83 ec 0c             	sub    esp,0xc
c001bbaa:	68 de c7 02 c0       	push   0xc002c7de
c001bbaf:	e8 1f 6d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bbb4:	eb c5                	jmp    c001bb7b <sysCallClose(regs*)+0x43>
c001bbb6:	83 ec 0c             	sub    esp,0xc
c001bbb9:	68 ec c7 02 c0       	push   0xc002c7ec
c001bbbe:	eb ef                	jmp    c001bbaf <sysCallClose(regs*)+0x77>

c001bbc0 <sysCallOpenDir(regs*)>:
c001bbc0:	56                   	push   esi
c001bbc1:	53                   	push   ebx
c001bbc2:	53                   	push   ebx
c001bbc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbc7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbca:	85 f6                	test   esi,esi
c001bbcc:	74 59                	je     c001bc27 <sysCallOpenDir(regs*)+0x67>
c001bbce:	83 ec 0c             	sub    esp,0xc
c001bbd1:	68 14 01 00 00       	push   0x114
c001bbd6:	e8 b1 3c ff ff       	call   c000f88c <malloc>
c001bbdb:	83 c4 0c             	add    esp,0xc
c001bbde:	89 c6                	mov    esi,eax
c001bbe0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbe8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbeb:	56                   	push   esi
c001bbec:	e8 ed 76 ff ff       	call   c00132de <Directory::Directory(char const*, Process*)>
c001bbf1:	83 c4 10             	add    esp,0x10
c001bbf4:	85 f6                	test   esi,esi
c001bbf6:	74 2f                	je     c001bc27 <sysCallOpenDir(regs*)+0x67>
c001bbf8:	83 ec 0c             	sub    esp,0xc
c001bbfb:	56                   	push   esi
c001bbfc:	e8 41 77 ff ff       	call   c0013342 <Directory::open()>
c001bc01:	83 c4 10             	add    esp,0x10
c001bc04:	85 c0                	test   eax,eax
c001bc06:	75 1f                	jne    c001bc27 <sysCallOpenDir(regs*)+0x67>
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	56                   	push   esi
c001bc0c:	e8 71 54 ff ff       	call   c0011082 <UnixFile::getFileDescriptor()>
c001bc11:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc14:	83 c4 10             	add    esp,0x10
c001bc17:	89 02                	mov    DWORD PTR [edx],eax
c001bc19:	c1 f8 1f             	sar    eax,0x1f
c001bc1c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc1f:	31 c0                	xor    eax,eax
c001bc21:	59                   	pop    ecx
c001bc22:	31 d2                	xor    edx,edx
c001bc24:	5b                   	pop    ebx
c001bc25:	5e                   	pop    esi
c001bc26:	c3                   	ret    
c001bc27:	59                   	pop    ecx
c001bc28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc32:	5b                   	pop    ebx
c001bc33:	5e                   	pop    esi
c001bc34:	c3                   	ret    

c001bc35 <sysCallCloseDir(regs*)>:
c001bc35:	53                   	push   ebx
c001bc36:	83 ec 08             	sub    esp,0x8
c001bc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc40:	83 f8 02             	cmp    eax,0x2
c001bc43:	76 47                	jbe    c001bc8c <sysCallCloseDir(regs*)+0x57>
c001bc45:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc4a:	77 2f                	ja     c001bc7b <sysCallCloseDir(regs*)+0x46>
c001bc4c:	83 ec 0c             	sub    esp,0xc
c001bc4f:	50                   	push   eax
c001bc50:	e8 22 57 ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001bc55:	89 c3                	mov    ebx,eax
c001bc57:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc5a:	e8 3f 77 ff ff       	call   c001339e <Directory::close()>
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	85 db                	test   ebx,ebx
c001bc64:	74 0c                	je     c001bc72 <sysCallCloseDir(regs*)+0x3d>
c001bc66:	83 ec 0c             	sub    esp,0xc
c001bc69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc6b:	53                   	push   ebx
c001bc6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc6f:	83 c4 10             	add    esp,0x10
c001bc72:	31 c0                	xor    eax,eax
c001bc74:	31 d2                	xor    edx,edx
c001bc76:	83 c4 08             	add    esp,0x8
c001bc79:	5b                   	pop    ebx
c001bc7a:	c3                   	ret    
c001bc7b:	83 ec 08             	sub    esp,0x8
c001bc7e:	50                   	push   eax
c001bc7f:	68 f4 c8 02 c0       	push   0xc002c8f4
c001bc84:	e8 4a 6c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc91:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc96:	83 c4 08             	add    esp,0x8
c001bc99:	5b                   	pop    ebx
c001bc9a:	c3                   	ret    

c001bc9b <sysCallMakeDir(regs*)>:
c001bc9b:	56                   	push   esi
c001bc9c:	53                   	push   ebx
c001bc9d:	83 ec 10             	sub    esp,0x10
c001bca0:	68 14 01 00 00       	push   0x114
c001bca5:	e8 e2 3b ff ff       	call   c000f88c <malloc>
c001bcaa:	83 c4 0c             	add    esp,0xc
c001bcad:	89 c3                	mov    ebx,eax
c001bcaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcbb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcbe:	53                   	push   ebx
c001bcbf:	e8 1a 76 ff ff       	call   c00132de <Directory::Directory(char const*, Process*)>
c001bcc4:	83 c4 10             	add    esp,0x10
c001bcc7:	85 db                	test   ebx,ebx
c001bcc9:	74 32                	je     c001bcfd <sysCallMakeDir(regs*)+0x62>
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	53                   	push   ebx
c001bccf:	e8 4e 78 ff ff       	call   c0013522 <Directory::create()>
c001bcd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcd7:	89 c6                	mov    esi,eax
c001bcd9:	e8 c0 76 ff ff       	call   c001339e <Directory::close()>
c001bcde:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bce3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bce6:	83 c4 10             	add    esp,0x10
c001bce9:	31 c0                	xor    eax,eax
c001bceb:	59                   	pop    ecx
c001bcec:	85 f6                	test   esi,esi
c001bcee:	5b                   	pop    ebx
c001bcef:	0f 95 c0             	setne  al
c001bcf2:	5e                   	pop    esi
c001bcf3:	31 d2                	xor    edx,edx
c001bcf5:	f7 d8                	neg    eax
c001bcf7:	83 d2 00             	adc    edx,0x0
c001bcfa:	f7 da                	neg    edx
c001bcfc:	c3                   	ret    
c001bcfd:	59                   	pop    ecx
c001bcfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd08:	5b                   	pop    ebx
c001bd09:	5e                   	pop    esi
c001bd0a:	c3                   	ret    

c001bd0b <sysCallWait(regs*)>:
c001bd0b:	83 ec 10             	sub    esp,0x10
c001bd0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd12:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd15:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd18:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd1b:	e8 c8 25 00 00       	call   c001e2e8 <waitTask(int, int*, int)>
c001bd20:	83 c4 1c             	add    esp,0x1c
c001bd23:	99                   	cdq    
c001bd24:	c3                   	ret    

c001bd25 <sysCallNotImpl(regs*)>:
c001bd25:	83 ec 18             	sub    esp,0x18
c001bd28:	68 fa c7 02 c0       	push   0xc002c7fa
c001bd2d:	e8 d7 e5 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001bd32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd37:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd3c:	83 c4 1c             	add    esp,0x1c
c001bd3f:	c3                   	ret    

c001bd40 <sysPanic(regs*)>:
c001bd40:	83 ec 18             	sub    esp,0x18
c001bd43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd47:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd4a:	e8 ba e5 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001bd4f:	c7 04 24 14 c8 02 c0 	mov    DWORD PTR [esp],0xc002c814
c001bd56:	e8 ae e5 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001bd5b:	b8 01 00 00 00       	mov    eax,0x1
c001bd60:	31 d2                	xor    edx,edx
c001bd62:	83 c4 1c             	add    esp,0x1c
c001bd65:	c3                   	ret    

c001bd66 <sysCallRmdir(regs*)>:
c001bd66:	56                   	push   esi
c001bd67:	53                   	push   ebx
c001bd68:	83 ec 20             	sub    esp,0x20
c001bd6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd6f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd72:	68 14 01 00 00       	push   0x114
c001bd77:	e8 10 3b ff ff       	call   c000f88c <malloc>
c001bd7c:	83 c4 0c             	add    esp,0xc
c001bd7f:	89 c3                	mov    ebx,eax
c001bd81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd86:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd89:	56                   	push   esi
c001bd8a:	53                   	push   ebx
c001bd8b:	e8 a2 70 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001bd90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd93:	e8 76 72 ff ff       	call   c001300e <File::unlink()>
c001bd98:	83 c4 10             	add    esp,0x10
c001bd9b:	85 db                	test   ebx,ebx
c001bd9d:	74 14                	je     c001bdb3 <sysCallRmdir(regs*)+0x4d>
c001bd9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bda3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bda5:	83 ec 0c             	sub    esp,0xc
c001bda8:	53                   	push   ebx
c001bda9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdb3:	85 c0                	test   eax,eax
c001bdb5:	0f 95 c0             	setne  al
c001bdb8:	31 d2                	xor    edx,edx
c001bdba:	0f b6 c0             	movzx  eax,al
c001bdbd:	f7 d8                	neg    eax
c001bdbf:	83 d2 00             	adc    edx,0x0
c001bdc2:	83 c4 14             	add    esp,0x14
c001bdc5:	f7 da                	neg    edx
c001bdc7:	5b                   	pop    ebx
c001bdc8:	5e                   	pop    esi
c001bdc9:	c3                   	ret    

c001bdca <sysCallUnlink(regs*)>:
c001bdca:	56                   	push   esi
c001bdcb:	53                   	push   ebx
c001bdcc:	83 ec 20             	sub    esp,0x20
c001bdcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdd3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdd6:	68 14 01 00 00       	push   0x114
c001bddb:	e8 ac 3a ff ff       	call   c000f88c <malloc>
c001bde0:	83 c4 0c             	add    esp,0xc
c001bde3:	89 c3                	mov    ebx,eax
c001bde5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bded:	56                   	push   esi
c001bdee:	53                   	push   ebx
c001bdef:	e8 3e 70 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001bdf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdf7:	e8 12 72 ff ff       	call   c001300e <File::unlink()>
c001bdfc:	83 c4 10             	add    esp,0x10
c001bdff:	85 db                	test   ebx,ebx
c001be01:	74 14                	je     c001be17 <sysCallUnlink(regs*)+0x4d>
c001be03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be07:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be09:	83 ec 0c             	sub    esp,0xc
c001be0c:	53                   	push   ebx
c001be0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be17:	85 c0                	test   eax,eax
c001be19:	0f 95 c0             	setne  al
c001be1c:	31 d2                	xor    edx,edx
c001be1e:	0f b6 c0             	movzx  eax,al
c001be21:	f7 d8                	neg    eax
c001be23:	83 d2 00             	adc    edx,0x0
c001be26:	83 c4 14             	add    esp,0x14
c001be29:	f7 da                	neg    edx
c001be2b:	5b                   	pop    ebx
c001be2c:	5e                   	pop    esi
c001be2d:	c3                   	ret    

c001be2e <sysCallGetArgv(regs*)>:
c001be2e:	83 ec 0c             	sub    esp,0xc
c001be31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be35:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be38:	85 c0                	test   eax,eax
c001be3a:	78 2b                	js     c001be67 <sysCallGetArgv(regs*)+0x39>
c001be3c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be42:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be45:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be4b:	7d 1a                	jge    c001be67 <sysCallGetArgv(regs*)+0x39>
c001be4d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be54:	85 c0                	test   eax,eax
c001be56:	74 17                	je     c001be6f <sysCallGetArgv(regs*)+0x41>
c001be58:	83 ec 08             	sub    esp,0x8
c001be5b:	50                   	push   eax
c001be5c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be5f:	e8 a8 49 fe ff       	call   c000080c <strcpy>
c001be64:	83 c4 10             	add    esp,0x10
c001be67:	31 c0                	xor    eax,eax
c001be69:	31 d2                	xor    edx,edx
c001be6b:	83 c4 0c             	add    esp,0xc
c001be6e:	c3                   	ret    
c001be6f:	b8 01 00 00 00       	mov    eax,0x1
c001be74:	31 d2                	xor    edx,edx
c001be76:	83 c4 0c             	add    esp,0xc
c001be79:	c3                   	ret    

c001be7a <sysCallTTYName(regs*)>:
c001be7a:	56                   	push   esi
c001be7b:	53                   	push   ebx
c001be7c:	53                   	push   ebx
c001be7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be81:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be84:	85 c0                	test   eax,eax
c001be86:	74 5f                	je     c001bee7 <sysCallTTYName(regs*)+0x6d>
c001be88:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be8b:	83 f8 02             	cmp    eax,0x2
c001be8e:	77 3e                	ja     c001bece <sysCallTTYName(regs*)+0x54>
c001be90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be98:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be9e:	85 db                	test   ebx,ebx
c001bea0:	74 45                	je     c001bee7 <sysCallTTYName(regs*)+0x6d>
c001bea2:	83 ec 0c             	sub    esp,0xc
c001bea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bea7:	53                   	push   ebx
c001bea8:	ff 10                	call   DWORD PTR [eax]
c001beaa:	83 c4 10             	add    esp,0x10
c001bead:	84 c0                	test   al,al
c001beaf:	74 41                	je     c001bef2 <sysCallTTYName(regs*)+0x78>
c001beb1:	83 ec 08             	sub    esp,0x8
c001beb4:	81 c3 82 00 00 00    	add    ebx,0x82
c001beba:	53                   	push   ebx
c001bebb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bebe:	e8 49 49 fe ff       	call   c000080c <strcpy>
c001bec3:	83 c4 10             	add    esp,0x10
c001bec6:	31 c0                	xor    eax,eax
c001bec8:	59                   	pop    ecx
c001bec9:	31 d2                	xor    edx,edx
c001becb:	5b                   	pop    ebx
c001becc:	5e                   	pop    esi
c001becd:	c3                   	ret    
c001bece:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bed3:	74 bb                	je     c001be90 <sysCallTTYName(regs*)+0x16>
c001bed5:	83 ec 0c             	sub    esp,0xc
c001bed8:	50                   	push   eax
c001bed9:	e8 99 54 ff ff       	call   c0011377 <getFromFileDescriptor(int)>
c001bede:	83 c4 10             	add    esp,0x10
c001bee1:	89 c3                	mov    ebx,eax
c001bee3:	85 db                	test   ebx,ebx
c001bee5:	75 bb                	jne    c001bea2 <sysCallTTYName(regs*)+0x28>
c001bee7:	59                   	pop    ecx
c001bee8:	b8 01 00 00 00       	mov    eax,0x1
c001beed:	31 d2                	xor    edx,edx
c001beef:	5b                   	pop    ebx
c001bef0:	5e                   	pop    esi
c001bef1:	c3                   	ret    
c001bef2:	59                   	pop    ecx
c001bef3:	b8 02 00 00 00       	mov    eax,0x2
c001bef8:	31 d2                	xor    edx,edx
c001befa:	5b                   	pop    ebx
c001befb:	5e                   	pop    esi
c001befc:	c3                   	ret    

c001befd <sysCallUSleep(regs*)>:
c001befd:	83 ec 14             	sub    esp,0x14
c001bf00:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf09:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf10:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf13:	01 ca                	add    edx,ecx
c001bf15:	52                   	push   edx
c001bf16:	50                   	push   eax
c001bf17:	e8 a3 24 00 00       	call   c001e3bf <nanoSleep(unsigned long long)>
c001bf1c:	31 c0                	xor    eax,eax
c001bf1e:	31 d2                	xor    edx,edx
c001bf20:	83 c4 1c             	add    esp,0x1c
c001bf23:	c3                   	ret    

c001bf24 <sysCallSpawn(regs*)>:
c001bf24:	56                   	push   esi
c001bf25:	53                   	push   ebx
c001bf26:	50                   	push   eax
c001bf27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf2b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bf2e:	85 c0                	test   eax,eax
c001bf30:	75 08                	jne    c001bf3a <sysCallSpawn(regs*)+0x16>
c001bf32:	59                   	pop    ecx
c001bf33:	31 c0                	xor    eax,eax
c001bf35:	31 d2                	xor    edx,edx
c001bf37:	5b                   	pop    ebx
c001bf38:	5e                   	pop    esi
c001bf39:	c3                   	ret    
c001bf3a:	83 ec 08             	sub    esp,0x8
c001bf3d:	50                   	push   eax
c001bf3e:	68 23 c8 02 c0       	push   0xc002c823
c001bf43:	e8 8b 69 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bf48:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bf4f:	e8 38 39 ff ff       	call   c000f88c <malloc>
c001bf54:	83 c4 10             	add    esp,0x10
c001bf57:	89 c6                	mov    esi,eax
c001bf59:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf5f:	85 c0                	test   eax,eax
c001bf61:	75 32                	jne    c001bf95 <sysCallSpawn(regs*)+0x71>
c001bf63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf6b:	52                   	push   edx
c001bf6c:	50                   	push   eax
c001bf6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf70:	56                   	push   esi
c001bf71:	e8 26 1b 00 00       	call   c001da9c <Process::Process(char const*, Process*, char**)>
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf80:	75 b0                	jne    c001bf32 <sysCallSpawn(regs*)+0xe>
c001bf82:	83 ec 0c             	sub    esp,0xc
c001bf85:	56                   	push   esi
c001bf86:	e8 f3 1f 00 00       	call   c001df7e <Process::createUserThread()>
c001bf8b:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf8d:	83 c4 10             	add    esp,0x10
c001bf90:	99                   	cdq    
c001bf91:	59                   	pop    ecx
c001bf92:	5b                   	pop    ebx
c001bf93:	5e                   	pop    esi
c001bf94:	c3                   	ret    
c001bf95:	31 c0                	xor    eax,eax
c001bf97:	eb d2                	jmp    c001bf6b <sysCallSpawn(regs*)+0x47>

c001bf99 <sysCallGetEnv(regs*)>:
c001bf99:	55                   	push   ebp
c001bf9a:	57                   	push   edi
c001bf9b:	56                   	push   esi
c001bf9c:	53                   	push   ebx
c001bf9d:	83 ec 28             	sub    esp,0x28
c001bfa0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfa4:	68 31 c8 02 c0       	push   0xc002c831
c001bfa9:	e8 25 69 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bfae:	5f                   	pop    edi
c001bfaf:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfb2:	5d                   	pop    ebp
c001bfb3:	53                   	push   ebx
c001bfb4:	68 5e cb 02 c0       	push   0xc002cb5e
c001bfb9:	e8 15 69 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bfbe:	58                   	pop    eax
c001bfbf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfc2:	5a                   	pop    edx
c001bfc3:	57                   	push   edi
c001bfc4:	68 3a c8 02 c0       	push   0xc002c83a
c001bfc9:	e8 05 69 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bfce:	59                   	pop    ecx
c001bfcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfd4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfd7:	e8 49 e2 ff ff       	call   c001a225 <Krnl::getProcessTotalEnvCount(Process*)>
c001bfdc:	5a                   	pop    edx
c001bfdd:	89 c5                	mov    ebp,eax
c001bfdf:	59                   	pop    ecx
c001bfe0:	50                   	push   eax
c001bfe1:	68 44 c8 02 c0       	push   0xc002c844
c001bfe6:	e8 e8 68 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001bfeb:	83 c4 10             	add    esp,0x10
c001bfee:	39 ef                	cmp    edi,ebp
c001bff0:	7c 15                	jl     c001c007 <sysCallGetEnv(regs*)+0x6e>
c001bff2:	85 db                	test   ebx,ebx
c001bff4:	75 0c                	jne    c001c002 <sysCallGetEnv(regs*)+0x69>
c001bff6:	83 c4 1c             	add    esp,0x1c
c001bff9:	31 c0                	xor    eax,eax
c001bffb:	5b                   	pop    ebx
c001bffc:	31 d2                	xor    edx,edx
c001bffe:	5e                   	pop    esi
c001bfff:	5f                   	pop    edi
c001c000:	5d                   	pop    ebp
c001c001:	c3                   	ret    
c001c002:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c005:	eb ef                	jmp    c001bff6 <sysCallGetEnv(regs*)+0x5d>
c001c007:	83 ec 0c             	sub    esp,0xc
c001c00a:	68 50 c8 02 c0       	push   0xc002c850
c001c00f:	e8 bf 68 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c014:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c018:	83 c4 0c             	add    esp,0xc
c001c01b:	57                   	push   edi
c001c01c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c022:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c025:	50                   	push   eax
c001c026:	e8 1a e2 ff ff       	call   c001a245 <Krnl::getProcessEnvPair(Process*, int)>
c001c02b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c02f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c033:	68 0f cc 02 c0       	push   0xc002cc0f
c001c038:	e8 96 68 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c03d:	83 c4 10             	add    esp,0x10
c001c040:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c043:	85 f6                	test   esi,esi
c001c045:	75 47                	jne    c001c08e <sysCallGetEnv(regs*)+0xf5>
c001c047:	83 ec 0c             	sub    esp,0xc
c001c04a:	55                   	push   ebp
c001c04b:	e8 1c 47 fe ff       	call   c000076c <strlen>
c001c050:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c053:	89 c3                	mov    ebx,eax
c001c055:	e8 12 47 fe ff       	call   c000076c <strlen>
c001c05a:	5a                   	pop    edx
c001c05b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c05f:	59                   	pop    ecx
c001c060:	50                   	push   eax
c001c061:	68 53 c8 02 c0       	push   0xc002c853
c001c066:	e8 68 68 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c06b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c06e:	e8 f9 46 fe ff       	call   c000076c <strlen>
c001c073:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c076:	89 c3                	mov    ebx,eax
c001c078:	e8 ef 46 fe ff       	call   c000076c <strlen>
c001c07d:	83 c4 10             	add    esp,0x10
c001c080:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c084:	83 c4 1c             	add    esp,0x1c
c001c087:	31 d2                	xor    edx,edx
c001c089:	5b                   	pop    ebx
c001c08a:	5e                   	pop    esi
c001c08b:	5f                   	pop    edi
c001c08c:	5d                   	pop    ebp
c001c08d:	c3                   	ret    
c001c08e:	83 ec 0c             	sub    esp,0xc
c001c091:	68 29 cc 02 c0       	push   0xc002cc29
c001c096:	e8 38 68 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c09b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c09e:	58                   	pop    eax
c001c09f:	5a                   	pop    edx
c001c0a0:	55                   	push   ebp
c001c0a1:	53                   	push   ebx
c001c0a2:	e8 65 47 fe ff       	call   c000080c <strcpy>
c001c0a7:	59                   	pop    ecx
c001c0a8:	5e                   	pop    esi
c001c0a9:	68 5d c8 02 c0       	push   0xc002c85d
c001c0ae:	53                   	push   ebx
c001c0af:	e8 98 48 fe ff       	call   c000094c <strcat>
c001c0b4:	5d                   	pop    ebp
c001c0b5:	58                   	pop    eax
c001c0b6:	57                   	push   edi
c001c0b7:	53                   	push   ebx
c001c0b8:	e8 8f 48 fe ff       	call   c000094c <strcat>
c001c0bd:	c7 04 24 43 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc43
c001c0c4:	e8 0a 68 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c0c9:	83 c4 10             	add    esp,0x10
c001c0cc:	e9 25 ff ff ff       	jmp    c001bff6 <sysCallGetEnv(regs*)+0x5d>

c001c0d1 <sysAppSettings(regs*)>:
c001c0d1:	57                   	push   edi
c001c0d2:	56                   	push   esi
c001c0d3:	56                   	push   esi
c001c0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c0db:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c0e1:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0e6:	66 3d c0 09          	cmp    ax,0x9c0
c001c0ea:	75 2e                	jne    c001c11a <sysAppSettings(regs*)+0x49>
c001c0ec:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c0f2:	83 e0 1f             	and    eax,0x1f
c001c0f5:	3c 01                	cmp    al,0x1
c001c0f7:	74 2c                	je     c001c125 <sysAppSettings(regs*)+0x54>
c001c0f9:	3c 07                	cmp    al,0x7
c001c0fb:	0f 84 b3 00 00 00    	je     c001c1b4 <sysAppSettings(regs*)+0xe3>
c001c101:	84 c0                	test   al,al
c001c103:	0f 84 d2 00 00 00    	je     c001c1db <sysAppSettings(regs*)+0x10a>
c001c109:	3c 08                	cmp    al,0x8
c001c10b:	74 63                	je     c001c170 <sysAppSettings(regs*)+0x9f>
c001c10d:	59                   	pop    ecx
c001c10e:	0f b6 c0             	movzx  eax,al
c001c111:	5e                   	pop    esi
c001c112:	05 e8 03 00 00       	add    eax,0x3e8
c001c117:	5f                   	pop    edi
c001c118:	99                   	cdq    
c001c119:	c3                   	ret    
c001c11a:	b8 01 00 00 00       	mov    eax,0x1
c001c11f:	59                   	pop    ecx
c001c120:	31 d2                	xor    edx,edx
c001c122:	5e                   	pop    esi
c001c123:	5f                   	pop    edi
c001c124:	c3                   	ret    
c001c125:	50                   	push   eax
c001c126:	68 00 01 00 00       	push   0x100
c001c12b:	6a 00                	push   0x0
c001c12d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c132:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c135:	83 c0 0c             	add    eax,0xc
c001c138:	50                   	push   eax
c001c139:	e8 12 46 fe ff       	call   c0000750 <memset>
c001c13e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c143:	b9 ff 00 00 00       	mov    ecx,0xff
c001c148:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c14b:	83 c7 0c             	add    edi,0xc
c001c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c150:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c155:	5a                   	pop    edx
c001c156:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c159:	59                   	pop    ecx
c001c15a:	8d 50 0c             	lea    edx,[eax+0xc]
c001c15d:	52                   	push   edx
c001c15e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c164:	e8 79 42 ff ff       	call   c00103e2 <VgaText::setTitle(char*)>
c001c169:	83 c4 10             	add    esp,0x10
c001c16c:	31 c0                	xor    eax,eax
c001c16e:	eb af                	jmp    c001c11f <sysAppSettings(regs*)+0x4e>
c001c170:	83 ec 08             	sub    esp,0x8
c001c173:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c179:	83 e0 0f             	and    eax,0xf
c001c17c:	50                   	push   eax
c001c17d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c182:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c185:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c18b:	e8 42 42 ff ff       	call   c00103d2 <VgaText::setTitleColour(VgaColour)>
c001c190:	5f                   	pop    edi
c001c191:	58                   	pop    eax
c001c192:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c198:	c1 e8 04             	shr    eax,0x4
c001c19b:	83 e0 0f             	and    eax,0xf
c001c19e:	50                   	push   eax
c001c19f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1ad:	e8 10 42 ff ff       	call   c00103c2 <VgaText::setTitleTextColour(VgaColour)>
c001c1b2:	eb b5                	jmp    c001c169 <sysAppSettings(regs*)+0x98>
c001c1b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1bc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1c2:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c1c8:	c0 e8 06             	shr    al,0x6
c001c1cb:	83 e0 01             	and    eax,0x1
c001c1ce:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c1d4:	31 c0                	xor    eax,eax
c001c1d6:	e9 44 ff ff ff       	jmp    c001c11f <sysAppSettings(regs*)+0x4e>
c001c1db:	b8 02 00 00 00       	mov    eax,0x2
c001c1e0:	e9 3a ff ff ff       	jmp    c001c11f <sysAppSettings(regs*)+0x4e>

c001c1e5 <sysSetFatAttrib(regs*)>:
c001c1e5:	57                   	push   edi
c001c1e6:	56                   	push   esi
c001c1e7:	53                   	push   ebx
c001c1e8:	83 ec 1c             	sub    esp,0x1c
c001c1eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1ef:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c1f2:	68 14 01 00 00       	push   0x114
c001c1f7:	e8 90 36 ff ff       	call   c000f88c <malloc>
c001c1fc:	83 c4 0c             	add    esp,0xc
c001c1ff:	89 c3                	mov    ebx,eax
c001c201:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c206:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c209:	57                   	push   edi
c001c20a:	53                   	push   ebx
c001c20b:	e8 22 6c ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001c210:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c213:	83 c4 0c             	add    esp,0xc
c001c216:	0f b6 d4             	movzx  edx,ah
c001c219:	0f b6 c0             	movzx  eax,al
c001c21c:	52                   	push   edx
c001c21d:	50                   	push   eax
c001c21e:	53                   	push   ebx
c001c21f:	e8 84 6e ff ff       	call   c00130a8 <File::chfatattr(unsigned char, unsigned char)>
c001c224:	83 c4 10             	add    esp,0x10
c001c227:	85 db                	test   ebx,ebx
c001c229:	74 14                	je     c001c23f <sysSetFatAttrib(regs*)+0x5a>
c001c22b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c231:	83 ec 0c             	sub    esp,0xc
c001c234:	53                   	push   ebx
c001c235:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c23f:	85 c0                	test   eax,eax
c001c241:	0f 95 c0             	setne  al
c001c244:	31 d2                	xor    edx,edx
c001c246:	0f b6 c0             	movzx  eax,al
c001c249:	f7 d8                	neg    eax
c001c24b:	83 d2 00             	adc    edx,0x0
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	f7 da                	neg    edx
c001c253:	5b                   	pop    ebx
c001c254:	5e                   	pop    esi
c001c255:	5f                   	pop    edi
c001c256:	c3                   	ret    

c001c257 <sysPipe(regs*)>:
c001c257:	57                   	push   edi
c001c258:	56                   	push   esi
c001c259:	53                   	push   ebx
c001c25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25e:	83 ec 0c             	sub    esp,0xc
c001c261:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c264:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c267:	6a 20                	push   0x20
c001c269:	e8 1e 36 ff ff       	call   c000f88c <malloc>
c001c26e:	89 c3                	mov    ebx,eax
c001c270:	58                   	pop    eax
c001c271:	5a                   	pop    edx
c001c272:	68 00 50 00 00       	push   0x5000
c001c277:	53                   	push   ebx
c001c278:	e8 9d 3e ff ff       	call   c001011a <Pipe::Pipe(int)>
c001c27d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c280:	e8 fd 4d ff ff       	call   c0011082 <UnixFile::getFileDescriptor()>
c001c285:	89 07                	mov    DWORD PTR [edi],eax
c001c287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c28a:	e8 f3 4d ff ff       	call   c0011082 <UnixFile::getFileDescriptor()>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	89 06                	mov    DWORD PTR [esi],eax
c001c294:	31 d2                	xor    edx,edx
c001c296:	5b                   	pop    ebx
c001c297:	31 c0                	xor    eax,eax
c001c299:	5e                   	pop    esi
c001c29a:	5f                   	pop    edi
c001c29b:	c3                   	ret    

c001c29c <sysGetUnixTime(regs*)>:
c001c29c:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001c2a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2ab:	e9 74 75 ff ff       	jmp    c0013824 <Clock::timeInSecondsLocal()>

c001c2b0 <string_ends_with(char const*, char const*)>:
c001c2b0:	57                   	push   edi
c001c2b1:	56                   	push   esi
c001c2b2:	53                   	push   ebx
c001c2b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	53                   	push   ebx
c001c2bf:	e8 a8 44 fe ff       	call   c000076c <strlen>
c001c2c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2c7:	89 c6                	mov    esi,eax
c001c2c9:	e8 9e 44 fe ff       	call   c000076c <strlen>
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	39 c6                	cmp    esi,eax
c001c2d3:	7d 06                	jge    c001c2db <string_ends_with(char const*, char const*)+0x2b>
c001c2d5:	5b                   	pop    ebx
c001c2d6:	31 c0                	xor    eax,eax
c001c2d8:	5e                   	pop    esi
c001c2d9:	5f                   	pop    edi
c001c2da:	c3                   	ret    
c001c2db:	83 ec 08             	sub    esp,0x8
c001c2de:	29 c6                	sub    esi,eax
c001c2e0:	57                   	push   edi
c001c2e1:	01 f3                	add    ebx,esi
c001c2e3:	53                   	push   ebx
c001c2e4:	e8 af 45 fe ff       	call   c0000898 <strcmp>
c001c2e9:	83 c4 10             	add    esp,0x10
c001c2ec:	85 c0                	test   eax,eax
c001c2ee:	5b                   	pop    ebx
c001c2ef:	0f 94 c0             	sete   al
c001c2f2:	5e                   	pop    esi
c001c2f3:	0f b6 c0             	movzx  eax,al
c001c2f6:	5f                   	pop    edi
c001c2f7:	c3                   	ret    

c001c2f8 <sysCallOpen(regs*)>:
c001c2f8:	56                   	push   esi
c001c2f9:	53                   	push   ebx
c001c2fa:	81 ec 04 01 00 00    	sub    esp,0x104
c001c300:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c307:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c30a:	85 c9                	test   ecx,ecx
c001c30c:	0f 84 b3 00 00 00    	je     c001c3c5 <sysCallOpen(regs*)+0xcd>
c001c312:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c315:	85 c0                	test   eax,eax
c001c317:	0f 84 a8 00 00 00    	je     c001c3c5 <sysCallOpen(regs*)+0xcd>
c001c31d:	52                   	push   edx
c001c31e:	68 5f c8 02 c0       	push   0xc002c85f
c001c323:	50                   	push   eax
c001c324:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c328:	56                   	push   esi
c001c329:	e8 5a 69 ff ff       	call   c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c32e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c331:	e8 36 44 fe ff       	call   c000076c <strlen>
c001c336:	83 c4 10             	add    esp,0x10
c001c339:	48                   	dec    eax
c001c33a:	74 1d                	je     c001c359 <sysCallOpen(regs*)+0x61>
c001c33c:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c33f:	eb 0f                	jmp    c001c350 <sysCallOpen(regs*)+0x58>
c001c341:	80 fa 3a             	cmp    dl,0x3a
c001c344:	74 0f                	je     c001c355 <sysCallOpen(regs*)+0x5d>
c001c346:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c34a:	48                   	dec    eax
c001c34b:	74 0c                	je     c001c359 <sysCallOpen(regs*)+0x61>
c001c34d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c350:	80 fa 2e             	cmp    dl,0x2e
c001c353:	75 ec                	jne    c001c341 <sysCallOpen(regs*)+0x49>
c001c355:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c359:	83 ec 08             	sub    esp,0x8
c001c35c:	68 63 c8 02 c0       	push   0xc002c863
c001c361:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c364:	e8 47 ff ff ff       	call   c001c2b0 <string_ends_with(char const*, char const*)>
c001c369:	83 c4 10             	add    esp,0x10
c001c36c:	85 c0                	test   eax,eax
c001c36e:	75 17                	jne    c001c387 <sysCallOpen(regs*)+0x8f>
c001c370:	83 ec 08             	sub    esp,0x8
c001c373:	68 84 c8 02 c0       	push   0xc002c884
c001c378:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c37b:	e8 30 ff ff ff       	call   c001c2b0 <string_ends_with(char const*, char const*)>
c001c380:	83 c4 10             	add    esp,0x10
c001c383:	85 c0                	test   eax,eax
c001c385:	74 51                	je     c001c3d8 <sysCallOpen(regs*)+0xe0>
c001c387:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c38a:	83 ec 08             	sub    esp,0x8
c001c38d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c393:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c39a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c39d:	ff 30                	push   DWORD PTR [eax]
c001c39f:	68 68 c8 02 c0       	push   0xc002c868
c001c3a4:	e8 2a 65 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c3a9:	c7 04 24 77 c8 02 c0 	mov    DWORD PTR [esp],0xc002c877
c001c3b0:	e8 1e 65 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	81 c4 04 01 00 00    	add    esp,0x104
c001c3be:	31 c0                	xor    eax,eax
c001c3c0:	31 d2                	xor    edx,edx
c001c3c2:	5b                   	pop    ebx
c001c3c3:	5e                   	pop    esi
c001c3c4:	c3                   	ret    
c001c3c5:	81 c4 04 01 00 00    	add    esp,0x104
c001c3cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3d5:	5b                   	pop    ebx
c001c3d6:	5e                   	pop    esi
c001c3d7:	c3                   	ret    
c001c3d8:	83 ec 08             	sub    esp,0x8
c001c3db:	68 64 c8 02 c0       	push   0xc002c864
c001c3e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3e3:	e8 b0 44 fe ff       	call   c0000898 <strcmp>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	85 c0                	test   eax,eax
c001c3ed:	74 98                	je     c001c387 <sysCallOpen(regs*)+0x8f>
c001c3ef:	83 ec 08             	sub    esp,0x8
c001c3f2:	68 63 c8 02 c0       	push   0xc002c863
c001c3f7:	56                   	push   esi
c001c3f8:	e8 b3 fe ff ff       	call   c001c2b0 <string_ends_with(char const*, char const*)>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	85 c0                	test   eax,eax
c001c402:	75 83                	jne    c001c387 <sysCallOpen(regs*)+0x8f>
c001c404:	83 ec 08             	sub    esp,0x8
c001c407:	68 89 c8 02 c0       	push   0xc002c889
c001c40c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40f:	e8 9c fe ff ff       	call   c001c2b0 <string_ends_with(char const*, char const*)>
c001c414:	83 c4 10             	add    esp,0x10
c001c417:	85 c0                	test   eax,eax
c001c419:	0f 85 d9 00 00 00    	jne    c001c4f8 <sysCallOpen(regs*)+0x200>
c001c41f:	83 ec 08             	sub    esp,0x8
c001c422:	68 8e c8 02 c0       	push   0xc002c88e
c001c427:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c42a:	e8 81 fe ff ff       	call   c001c2b0 <string_ends_with(char const*, char const*)>
c001c42f:	83 c4 10             	add    esp,0x10
c001c432:	85 c0                	test   eax,eax
c001c434:	0f 85 be 00 00 00    	jne    c001c4f8 <sysCallOpen(regs*)+0x200>
c001c43a:	83 ec 08             	sub    esp,0x8
c001c43d:	68 8a c8 02 c0       	push   0xc002c88a
c001c442:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c445:	e8 4e 44 fe ff       	call   c0000898 <strcmp>
c001c44a:	83 c4 10             	add    esp,0x10
c001c44d:	85 c0                	test   eax,eax
c001c44f:	0f 84 a3 00 00 00    	je     c001c4f8 <sysCallOpen(regs*)+0x200>
c001c455:	83 ec 08             	sub    esp,0x8
c001c458:	68 89 c8 02 c0       	push   0xc002c889
c001c45d:	56                   	push   esi
c001c45e:	e8 4d fe ff ff       	call   c001c2b0 <string_ends_with(char const*, char const*)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	85 c0                	test   eax,eax
c001c468:	0f 85 8a 00 00 00    	jne    c001c4f8 <sysCallOpen(regs*)+0x200>
c001c46e:	83 ec 0c             	sub    esp,0xc
c001c471:	68 14 01 00 00       	push   0x114
c001c476:	e8 11 34 ff ff       	call   c000f88c <malloc>
c001c47b:	83 c4 0c             	add    esp,0xc
c001c47e:	89 c6                	mov    esi,eax
c001c480:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c485:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c488:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c48b:	56                   	push   esi
c001c48c:	e8 a1 69 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001c491:	83 c4 10             	add    esp,0x10
c001c494:	85 f6                	test   esi,esi
c001c496:	0f 84 29 ff ff ff    	je     c001c3c5 <sysCallOpen(regs*)+0xcd>
c001c49c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c49f:	0f b6 c2             	movzx  eax,dl
c001c4a2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4a5:	89 d0                	mov    eax,edx
c001c4a7:	83 e0 01             	and    eax,0x1
c001c4aa:	f6 c2 02             	test   dl,0x2
c001c4ad:	74 03                	je     c001c4b2 <sysCallOpen(regs*)+0x1ba>
c001c4af:	83 c8 02             	or     eax,0x2
c001c4b2:	f6 c2 04             	test   dl,0x4
c001c4b5:	74 03                	je     c001c4ba <sysCallOpen(regs*)+0x1c2>
c001c4b7:	83 c8 04             	or     eax,0x4
c001c4ba:	f6 c2 08             	test   dl,0x8
c001c4bd:	74 03                	je     c001c4c2 <sysCallOpen(regs*)+0x1ca>
c001c4bf:	83 c8 0a             	or     eax,0xa
c001c4c2:	83 e2 10             	and    edx,0x10
c001c4c5:	74 03                	je     c001c4ca <sysCallOpen(regs*)+0x1d2>
c001c4c7:	83 c8 12             	or     eax,0x12
c001c4ca:	83 ec 08             	sub    esp,0x8
c001c4cd:	50                   	push   eax
c001c4ce:	56                   	push   esi
c001c4cf:	e8 c2 69 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	85 c0                	test   eax,eax
c001c4d9:	0f 85 e6 fe ff ff    	jne    c001c3c5 <sysCallOpen(regs*)+0xcd>
c001c4df:	83 ec 0c             	sub    esp,0xc
c001c4e2:	56                   	push   esi
c001c4e3:	e8 9a 4b ff ff       	call   c0011082 <UnixFile::getFileDescriptor()>
c001c4e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4eb:	89 02                	mov    DWORD PTR [edx],eax
c001c4ed:	c1 f8 1f             	sar    eax,0x1f
c001c4f0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4f3:	e9 bd fe ff ff       	jmp    c001c3b5 <sysCallOpen(regs*)+0xbd>
c001c4f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4fb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c501:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c508:	e9 ab fe ff ff       	jmp    c001c3b8 <sysCallOpen(regs*)+0xc0>

c001c50d <Sys::loadSyscalls()>:
c001c50d:	c7 05 60 1b 03 c0 fd b5 01 c0 	mov    DWORD PTR ds:0xc0031b60,0xc001b5fd
c001c517:	c7 05 64 1b 03 c0 62 b1 01 c0 	mov    DWORD PTR ds:0xc0031b64,0xc001b162
c001c521:	c7 05 68 1b 03 c0 50 b3 01 c0 	mov    DWORD PTR ds:0xc0031b68,0xc001b350
c001c52b:	c7 05 6c 1b 03 c0 33 b5 01 c0 	mov    DWORD PTR ds:0xc0031b6c,0xc001b533
c001c535:	c7 05 70 1b 03 c0 e8 b2 01 c0 	mov    DWORD PTR ds:0xc0031b70,0xc001b2e8
c001c53f:	c7 05 74 1b 03 c0 99 b1 01 c0 	mov    DWORD PTR ds:0xc0031b74,0xc001b199
c001c549:	c7 05 78 1b 03 c0 7a b1 01 c0 	mov    DWORD PTR ds:0xc0031b78,0xc001b17a
c001c553:	c7 05 7c 1b 03 c0 a5 b3 01 c0 	mov    DWORD PTR ds:0xc0031b7c,0xc001b3a5
c001c55d:	c7 05 84 1b 03 c0 38 bb 01 c0 	mov    DWORD PTR ds:0xc0031b84,0xc001bb38
c001c567:	c7 05 80 1b 03 c0 f8 c2 01 c0 	mov    DWORD PTR ds:0xc0031b80,0xc001c2f8
c001c571:	c7 05 88 1b 03 c0 c0 bb 01 c0 	mov    DWORD PTR ds:0xc0031b88,0xc001bbc0
c001c57b:	c7 05 8c 1b 03 c0 27 b8 01 c0 	mov    DWORD PTR ds:0xc0031b8c,0xc001b827
c001c585:	c7 05 90 1b 03 c0 43 b6 01 c0 	mov    DWORD PTR ds:0xc0031b90,0xc001b643
c001c58f:	c7 05 94 1b 03 c0 48 b6 01 c0 	mov    DWORD PTR ds:0xc0031b94,0xc001b648
c001c599:	c7 05 98 1b 03 c0 9b bc 01 c0 	mov    DWORD PTR ds:0xc0031b98,0xc001bc9b
c001c5a3:	c7 05 9c 1b 03 c0 35 bc 01 c0 	mov    DWORD PTR ds:0xc0031b9c,0xc001bc35
c001c5ad:	c7 05 a0 1b 03 c0 0f b9 01 c0 	mov    DWORD PTR ds:0xc0031ba0,0xc001b90f
c001c5b7:	c7 05 a4 1b 03 c0 78 b9 01 c0 	mov    DWORD PTR ds:0xc0031ba4,0xc001b978
c001c5c1:	c7 05 a8 1b 03 c0 f5 b9 01 c0 	mov    DWORD PTR ds:0xc0031ba8,0xc001b9f5
c001c5cb:	c7 05 ac 1b 03 c0 4d b6 01 c0 	mov    DWORD PTR ds:0xc0031bac,0xc001b64d
c001c5d5:	c7 05 b0 1b 03 c0 0b bd 01 c0 	mov    DWORD PTR ds:0xc0031bb0,0xc001bd0b
c001c5df:	c7 05 b4 1b 03 c0 25 bd 01 c0 	mov    DWORD PTR ds:0xc0031bb4,0xc001bd25
c001c5e9:	c7 05 b8 1b 03 c0 25 bd 01 c0 	mov    DWORD PTR ds:0xc0031bb8,0xc001bd25
c001c5f3:	c7 05 bc 1b 03 c0 66 bd 01 c0 	mov    DWORD PTR ds:0xc0031bbc,0xc001bd66
c001c5fd:	c7 05 c0 1b 03 c0 ca bd 01 c0 	mov    DWORD PTR ds:0xc0031bc0,0xc001bdca
c001c607:	c7 05 c4 1b 03 c0 f9 b7 01 c0 	mov    DWORD PTR ds:0xc0031bc4,0xc001b7f9
c001c611:	c7 05 c8 1b 03 c0 2e be 01 c0 	mov    DWORD PTR ds:0xc0031bc8,0xc001be2e
c001c61b:	c7 05 cc 1b 03 c0 b6 b7 01 c0 	mov    DWORD PTR ds:0xc0031bcc,0xc001b7b6
c001c625:	c7 05 d0 1b 03 c0 7a be 01 c0 	mov    DWORD PTR ds:0xc0031bd0,0xc001be7a
c001c62f:	c7 05 d4 1b 03 c0 b5 b8 01 c0 	mov    DWORD PTR ds:0xc0031bd4,0xc001b8b5
c001c639:	c7 05 d8 1b 03 c0 fd be 01 c0 	mov    DWORD PTR ds:0xc0031bd8,0xc001befd
c001c643:	c7 05 dc 1b 03 c0 78 ba 01 c0 	mov    DWORD PTR ds:0xc0031bdc,0xc001ba78
c001c64d:	c7 05 e0 1b 03 c0 24 bf 01 c0 	mov    DWORD PTR ds:0xc0031be0,0xc001bf24
c001c657:	c7 05 e4 1b 03 c0 99 bf 01 c0 	mov    DWORD PTR ds:0xc0031be4,0xc001bf99
c001c661:	c7 05 e8 1b 03 c0 d1 c0 01 c0 	mov    DWORD PTR ds:0xc0031be8,0xc001c0d1
c001c66b:	c7 05 ec 1b 03 c0 57 b6 01 c0 	mov    DWORD PTR ds:0xc0031bec,0xc001b657
c001c675:	c7 05 f0 1b 03 c0 c1 b6 01 c0 	mov    DWORD PTR ds:0xc0031bf0,0xc001b6c1
c001c67f:	c7 05 f4 1b 03 c0 07 b7 01 c0 	mov    DWORD PTR ds:0xc0031bf4,0xc001b707
c001c689:	c7 05 f8 1b 03 c0 e5 c1 01 c0 	mov    DWORD PTR ds:0xc0031bf8,0xc001c1e5
c001c693:	c7 05 fc 1b 03 c0 40 bd 01 c0 	mov    DWORD PTR ds:0xc0031bfc,0xc001bd40
c001c69d:	c7 05 00 1c 03 c0 58 b7 01 c0 	mov    DWORD PTR ds:0xc0031c00,0xc001b758
c001c6a7:	c7 05 04 1c 03 c0 57 c2 01 c0 	mov    DWORD PTR ds:0xc0031c04,0xc001c257
c001c6b1:	c7 05 08 1c 03 c0 9c c2 01 c0 	mov    DWORD PTR ds:0xc0031c08,0xc001c29c
c001c6bb:	c7 05 0c 1c 03 c0 40 b2 01 c0 	mov    DWORD PTR ds:0xc0031c0c,0xc001b240
c001c6c5:	c7 05 10 1c 03 c0 c1 b3 01 c0 	mov    DWORD PTR ds:0xc0031c10,0xc001b3c1
c001c6cf:	c7 05 14 1c 03 c0 e9 b4 01 c0 	mov    DWORD PTR ds:0xc0031c14,0xc001b4e9
c001c6d9:	c7 05 18 1c 03 c0 2c b1 01 c0 	mov    DWORD PTR ds:0xc0031c18,0xc001b12c
c001c6e3:	c7 05 1c 1c 03 c0 9b b5 01 c0 	mov    DWORD PTR ds:0xc0031c1c,0xc001b59b
c001c6ed:	c7 05 20 1c 03 c0 a5 b1 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001b1a5
c001c6f7:	c7 05 24 1c 03 c0 bc b1 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001b1bc
c001c701:	c3                   	ret    

c001c702 <Sys::systemCall(regs*, void*)>:
c001c702:	53                   	push   ebx
c001c703:	83 ec 08             	sub    esp,0x8
c001c706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c70a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c70d:	83 f8 7f             	cmp    eax,0x7f
c001c710:	77 16                	ja     c001c728 <Sys::systemCall(regs*, void*)+0x26>
c001c712:	8b 14 85 60 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce4a0]
c001c719:	85 d2                	test   edx,edx
c001c71b:	74 0b                	je     c001c728 <Sys::systemCall(regs*, void*)+0x26>
c001c71d:	83 ec 0c             	sub    esp,0xc
c001c720:	53                   	push   ebx
c001c721:	ff d2                	call   edx
c001c723:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c726:	eb 0d                	jmp    c001c735 <Sys::systemCall(regs*, void*)+0x33>
c001c728:	52                   	push   edx
c001c729:	52                   	push   edx
c001c72a:	50                   	push   eax
c001c72b:	68 93 c8 02 c0       	push   0xc002c893
c001c730:	e8 9e 61 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c735:	83 c4 10             	add    esp,0x10
c001c738:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c73d:	31 d2                	xor    edx,edx
c001c73f:	83 c4 08             	add    esp,0x8
c001c742:	5b                   	pop    ebx
c001c743:	c3                   	ret    

c001c744 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c744:	55                   	push   ebp
c001c745:	57                   	push   edi
c001c746:	56                   	push   esi
c001c747:	53                   	push   ebx
c001c748:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c74e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c755:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c75c:	85 c0                	test   eax,eax
c001c75e:	0f 95 c1             	setne  cl
c001c761:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c769:	0f 94 c2             	sete   dl
c001c76c:	84 d1                	test   cl,dl
c001c76e:	74 23                	je     c001c793 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c770:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c776:	74 1b                	je     c001c793 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c778:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c77e:	89 da                	mov    edx,ebx
c001c780:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c786:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c78c:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c793:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c79a:	05 ff 0f 00 00       	add    eax,0xfff
c001c79f:	83 ec 0c             	sub    esp,0xc
c001c7a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7a6:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c7ac:	c1 e8 0c             	shr    eax,0xc
c001c7af:	89 fe                	mov    esi,edi
c001c7b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7b5:	c1 ee 0c             	shr    esi,0xc
c001c7b8:	6a 01                	push   0x1
c001c7ba:	e8 0e 4d ff ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c001c7bf:	89 c5                	mov    ebp,eax
c001c7c1:	58                   	pop    eax
c001c7c2:	5a                   	pop    edx
c001c7c3:	56                   	push   esi
c001c7c4:	68 17 c9 02 c0       	push   0xc002c917
c001c7c9:	e8 05 61 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c7ce:	59                   	pop    ecx
c001c7cf:	58                   	pop    eax
c001c7d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7d4:	68 29 c9 02 c0       	push   0xc002c929
c001c7d9:	e8 f5 60 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c7e7:	0f 86 31 01 00 00    	jbe    c001c91e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c7ed:	c1 e6 0c             	shl    esi,0xc
c001c7f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7f3:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c7f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7fa:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c801:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c804:	01 df                	add    edi,ebx
c001c806:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c809:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c80d:	0f 84 08 01 00 00    	je     c001c91b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c813:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c819:	76 05                	jbe    c001c820 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c81b:	bf 00 10 00 00       	mov    edi,0x1000
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	31 d2                	xor    edx,edx
c001c825:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c82c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c82e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c832:	50                   	push   eax
c001c833:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c837:	56                   	push   esi
c001c838:	52                   	push   edx
c001c839:	57                   	push   edi
c001c83a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c844:	83 c4 20             	add    esp,0x20
c001c847:	85 c0                	test   eax,eax
c001c849:	74 0a                	je     c001c855 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c84b:	53                   	push   ebx
c001c84c:	53                   	push   ebx
c001c84d:	50                   	push   eax
c001c84e:	68 3b c9 02 c0       	push   0xc002c93b
c001c853:	eb 0f                	jmp    c001c864 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c855:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c859:	74 20                	je     c001c87b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c85b:	51                   	push   ecx
c001c85c:	51                   	push   ecx
c001c85d:	6a 00                	push   0x0
c001c85f:	68 66 c9 02 c0       	push   0xc002c966
c001c864:	e8 6a 60 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001c869:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c86c:	e8 1c 51 ff ff       	call   c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c001c871:	83 c4 10             	add    esp,0x10
c001c874:	31 c0                	xor    eax,eax
c001c876:	e9 68 01 00 00       	jmp    c001c9e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c87b:	fa                   	cli    
c001c87c:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001c882:	e8 0d 33 ff ff       	call   c000fb94 <Phys::allocatePage()>
c001c887:	6a 07                	push   0x7
c001c889:	89 c7                	mov    edi,eax
c001c88b:	55                   	push   ebp
c001c88c:	50                   	push   eax
c001c88d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c892:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c895:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c89b:	e8 64 54 ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8a0:	83 c4 0c             	add    esp,0xc
c001c8a3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8aa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8b0:	6a 00                	push   0x0
c001c8b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8c0:	e8 99 52 ff ff       	call   c0011b5e <VAS::mapOtherVASIn(bool, VAS*)>
c001c8c5:	58                   	pop    eax
c001c8c6:	5a                   	pop    edx
c001c8c7:	68 07 0c 00 00       	push   0xc07
c001c8cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8d0:	57                   	push   edi
c001c8d1:	89 ef                	mov    edi,ebp
c001c8d3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8da:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8e0:	6a 00                	push   0x0
c001c8e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8ea:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8f0:	e8 cb 57 ff ff       	call   c00120c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8f5:	b9 00 10 00 00       	mov    ecx,0x1000
c001c8fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8fc:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001c901:	83 c4 20             	add    esp,0x20
c001c904:	48                   	dec    eax
c001c905:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001c90a:	85 c0                	test   eax,eax
c001c90c:	75 01                	jne    c001c90f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c90e:	fb                   	sti    
c001c90f:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c916:	e9 df fe ff ff       	jmp    c001c7fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c91b:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c91e:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c926:	0f 86 a9 00 00 00    	jbe    c001c9d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c92c:	fa                   	cli    
c001c92d:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001c933:	51                   	push   ecx
c001c934:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c93b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c941:	6a 00                	push   0x0
c001c943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c948:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c94b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c951:	e8 08 52 ff ff       	call   c0011b5e <VAS::mapOtherVASIn(bool, VAS*)>
c001c956:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c95a:	c1 e6 0c             	shl    esi,0xc
c001c95d:	01 de                	add    esi,ebx
c001c95f:	83 c4 10             	add    esp,0x10
c001c962:	39 de                	cmp    esi,ebx
c001c964:	74 61                	je     c001c9c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c966:	e8 29 32 ff ff       	call   c000fb94 <Phys::allocatePage()>
c001c96b:	6a 07                	push   0x7
c001c96d:	89 c7                	mov    edi,eax
c001c96f:	55                   	push   ebp
c001c970:	50                   	push   eax
c001c971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c976:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c979:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c97f:	e8 80 53 ff ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c984:	58                   	pop    eax
c001c985:	5a                   	pop    edx
c001c986:	68 07 0c 00 00       	push   0xc07
c001c98b:	53                   	push   ebx
c001c98c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c992:	57                   	push   edi
c001c993:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c99a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a0:	6a 00                	push   0x0
c001c9a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9aa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b0:	e8 0b 57 ff ff       	call   c00120c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9b5:	83 c4 1c             	add    esp,0x1c
c001c9b8:	68 00 10 00 00       	push   0x1000
c001c9bd:	6a 00                	push   0x0
c001c9bf:	55                   	push   ebp
c001c9c0:	e8 8b 3d fe ff       	call   c0000750 <memset>
c001c9c5:	eb 98                	jmp    c001c95f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c9c7:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001c9cc:	48                   	dec    eax
c001c9cd:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001c9d2:	75 01                	jne    c001c9d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9d4:	fb                   	sti    
c001c9d5:	83 ec 0c             	sub    esp,0xc
c001c9d8:	55                   	push   ebp
c001c9d9:	e8 af 4f ff ff       	call   c001198d <Virt::freeKernelVirtualPages(unsigned long)>
c001c9de:	83 c4 10             	add    esp,0x10
c001c9e1:	b0 01                	mov    al,0x1
c001c9e3:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9e9:	5b                   	pop    ebx
c001c9ea:	5e                   	pop    esi
c001c9eb:	5f                   	pop    edi
c001c9ec:	5d                   	pop    ebp
c001c9ed:	c3                   	ret    

c001c9ee <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9ee:	55                   	push   ebp
c001c9ef:	57                   	push   edi
c001c9f0:	56                   	push   esi
c001c9f1:	53                   	push   ebx
c001c9f2:	83 ec 48             	sub    esp,0x48
c001c9f5:	68 14 01 00 00       	push   0x114
c001c9fa:	e8 8d 2e ff ff       	call   c000f88c <malloc>
c001c9ff:	83 c4 0c             	add    esp,0xc
c001ca02:	89 c6                	mov    esi,eax
c001ca04:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca08:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca0c:	50                   	push   eax
c001ca0d:	e8 20 64 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001ca12:	58                   	pop    eax
c001ca13:	5a                   	pop    edx
c001ca14:	6a 01                	push   0x1
c001ca16:	56                   	push   esi
c001ca17:	e8 7a 64 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001ca1c:	83 c4 10             	add    esp,0x10
c001ca1f:	85 c0                	test   eax,eax
c001ca21:	0f 85 47 01 00 00    	jne    c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca27:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	6a 34                	push   0x34
c001ca34:	e8 53 2e ff ff       	call   c000f88c <malloc>
c001ca39:	89 c3                	mov    ebx,eax
c001ca3b:	58                   	pop    eax
c001ca3c:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca3e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca42:	57                   	push   edi
c001ca43:	53                   	push   ebx
c001ca44:	6a 00                	push   0x0
c001ca46:	6a 34                	push   0x34
c001ca48:	56                   	push   esi
c001ca49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca4c:	83 c4 20             	add    esp,0x20
c001ca4f:	85 c0                	test   eax,eax
c001ca51:	0f 85 17 01 00 00    	jne    c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca57:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca5d:	0f 85 0b 01 00 00    	jne    c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca66:	85 c0                	test   eax,eax
c001ca68:	0f 84 00 01 00 00    	je     c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca6e:	31 d2                	xor    edx,edx
c001ca70:	55                   	push   ebp
c001ca71:	52                   	push   edx
c001ca72:	50                   	push   eax
c001ca73:	56                   	push   esi
c001ca74:	e8 db 64 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	85 c0                	test   eax,eax
c001ca7e:	0f 85 ea 00 00 00    	jne    c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca84:	83 ec 0c             	sub    esp,0xc
c001ca87:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca8a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca92:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca96:	0f af c2             	imul   eax,edx
c001ca99:	50                   	push   eax
c001ca9a:	e8 ed 2d ff ff       	call   c000f88c <malloc>
c001ca9f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001caa1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001caa5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caa8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caac:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cab0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cab4:	0f af c2             	imul   eax,edx
c001cab7:	99                   	cdq    
c001cab8:	52                   	push   edx
c001cab9:	50                   	push   eax
c001caba:	56                   	push   esi
c001cabb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cabe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cac1:	83 c4 20             	add    esp,0x20
c001cac4:	85 c0                	test   eax,eax
c001cac6:	0f 84 a2 00 00 00    	je     c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cacc:	31 d2                	xor    edx,edx
c001cace:	51                   	push   ecx
c001cacf:	52                   	push   edx
c001cad0:	50                   	push   eax
c001cad1:	56                   	push   esi
c001cad2:	e8 7d 64 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	85 c0                	test   eax,eax
c001cadc:	0f 85 8c 00 00 00    	jne    c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae2:	83 ec 0c             	sub    esp,0xc
c001cae5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cae9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001caed:	31 ed                	xor    ebp,ebp
c001caef:	0f af c2             	imul   eax,edx
c001caf2:	50                   	push   eax
c001caf3:	e8 94 2d ff ff       	call   c000f88c <malloc>
c001caf8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cafa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cafe:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb05:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb09:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb0d:	0f af c2             	imul   eax,edx
c001cb10:	99                   	cdq    
c001cb11:	52                   	push   edx
c001cb12:	50                   	push   eax
c001cb13:	56                   	push   esi
c001cb14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb17:	83 c4 20             	add    esp,0x20
c001cb1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb22:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb26:	0f 86 80 00 00 00    	jbe    c001cbac <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb2c:	0f b7 fd             	movzx  edi,bp
c001cb2f:	c1 e7 05             	shl    edi,0x5
c001cb32:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb36:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb39:	75 6b                	jne    c001cba6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb3b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb42:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb49:	52                   	push   edx
c001cb4a:	31 d2                	xor    edx,edx
c001cb4c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb4f:	52                   	push   edx
c001cb50:	50                   	push   eax
c001cb51:	56                   	push   esi
c001cb52:	e8 fd 63 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	85 c0                	test   eax,eax
c001cb5c:	74 17                	je     c001cb75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb5e:	83 ec 0c             	sub    esp,0xc
c001cb61:	68 92 c9 02 c0       	push   0xc002c992
c001cb66:	e8 68 5d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	31 c0                	xor    eax,eax
c001cb70:	e9 87 00 00 00       	jmp    c001cbfc <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb75:	83 ec 0c             	sub    esp,0xc
c001cb78:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb7b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb7e:	50                   	push   eax
c001cb7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb87:	56                   	push   esi
c001cb88:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb8c:	e8 b3 fb ff ff       	call   c001c744 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb95:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb99:	83 c4 20             	add    esp,0x20
c001cb9c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cba0:	73 04                	jae    c001cba6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cba2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cba6:	45                   	inc    ebp
c001cba7:	e9 76 ff ff ff       	jmp    c001cb22 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cbac:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cbb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbbe:	83 ec 0c             	sub    esp,0xc
c001cbc1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbc7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbcc:	05 00 10 00 00       	add    eax,0x1000
c001cbd1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd8:	e8 bf 2c ff ff       	call   c000f89c <free>
c001cbdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbe0:	e8 b7 2c ff ff       	call   c000f89c <free>
c001cbe5:	58                   	pop    eax
c001cbe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbea:	e8 ad 2c ff ff       	call   c000f89c <free>
c001cbef:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbf2:	e8 fd 62 ff ff       	call   c0012ef4 <File::close()>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	b0 01                	mov    al,0x1
c001cbfc:	83 c4 3c             	add    esp,0x3c
c001cbff:	5b                   	pop    ebx
c001cc00:	5e                   	pop    esi
c001cc01:	5f                   	pop    edi
c001cc02:	5d                   	pop    ebp
c001cc03:	c3                   	ret    

c001cc04 <Thr::runtimeReferenceHelper()>:
c001cc04:	83 ec 18             	sub    esp,0x18
c001cc07:	68 9a c9 02 c0       	push   0xc002c99a
c001cc0c:	e8 c2 5c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001cc11:	fa                   	cli    
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	eb fe                	jmp    c001cc15 <Thr::runtimeReferenceHelper()+0x11>

c001cc17 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc17:	57                   	push   edi
c001cc18:	56                   	push   esi
c001cc19:	53                   	push   ebx
c001cc1a:	31 db                	xor    ebx,ebx
c001cc1c:	39 1d 00 25 03 c0    	cmp    DWORD PTR ds:0xc0032500,ebx
c001cc22:	7e 3c                	jle    c001cc60 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc24:	8b 34 9d 80 24 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdb80]
c001cc2b:	31 ff                	xor    edi,edi
c001cc2d:	39 3c 9d 80 23 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdc80],edi
c001cc34:	7e 27                	jle    c001cc5d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc36:	50                   	push   eax
c001cc37:	50                   	push   eax
c001cc38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc3c:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc3e:	03 04 9d 00 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdc00]
c001cc45:	50                   	push   eax
c001cc46:	e8 4d 3c fe ff       	call   c0000898 <strcmp>
c001cc4b:	83 c4 10             	add    esp,0x10
c001cc4e:	85 c0                	test   eax,eax
c001cc50:	75 05                	jne    c001cc57 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc55:	eb 0b                	jmp    c001cc62 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc57:	83 c6 10             	add    esi,0x10
c001cc5a:	47                   	inc    edi
c001cc5b:	eb d0                	jmp    c001cc2d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc5d:	43                   	inc    ebx
c001cc5e:	eb bc                	jmp    c001cc1c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc60:	31 c0                	xor    eax,eax
c001cc62:	5b                   	pop    ebx
c001cc63:	5e                   	pop    esi
c001cc64:	5f                   	pop    edi
c001cc65:	c3                   	ret    

c001cc66 <Thr::loadKernelSymbolTable(char const*)>:
c001cc66:	55                   	push   ebp
c001cc67:	57                   	push   edi
c001cc68:	56                   	push   esi
c001cc69:	53                   	push   ebx
c001cc6a:	83 ec 68             	sub    esp,0x68
c001cc6d:	8b 35 50 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032550
c001cc73:	68 14 01 00 00       	push   0x114
c001cc78:	e8 0f 2c ff ff       	call   c000f88c <malloc>
c001cc7d:	83 c4 0c             	add    esp,0xc
c001cc80:	89 c3                	mov    ebx,eax
c001cc82:	56                   	push   esi
c001cc83:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc87:	50                   	push   eax
c001cc88:	e8 a5 61 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001cc8d:	5e                   	pop    esi
c001cc8e:	5f                   	pop    edi
c001cc8f:	6a 01                	push   0x1
c001cc91:	53                   	push   ebx
c001cc92:	e8 ff 61 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	85 c0                	test   eax,eax
c001cc9c:	74 0a                	je     c001cca8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	68 bc c9 02 c0       	push   0xc002c9bc
c001cca6:	eb 34                	jmp    c001ccdc <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cca8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	6a 34                	push   0x34
c001ccb5:	e8 d2 2b ff ff       	call   c000f88c <malloc>
c001ccba:	59                   	pop    ecx
c001ccbb:	89 c7                	mov    edi,eax
c001ccbd:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccc3:	56                   	push   esi
c001ccc4:	57                   	push   edi
c001ccc5:	6a 00                	push   0x0
c001ccc7:	6a 34                	push   0x34
c001ccc9:	53                   	push   ebx
c001ccca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cccd:	83 c4 20             	add    esp,0x20
c001ccd0:	85 c0                	test   eax,eax
c001ccd2:	74 17                	je     c001cceb <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	68 d3 c9 02 c0       	push   0xc002c9d3
c001ccdc:	e8 28 d6 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	31 c0                	xor    eax,eax
c001cce6:	e9 31 02 00 00       	jmp    c001cf1c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cceb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ccf1:	75 e1                	jne    c001ccd4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccf3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccf6:	85 c0                	test   eax,eax
c001ccf8:	74 da                	je     c001ccd4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccfa:	52                   	push   edx
c001ccfb:	31 d2                	xor    edx,edx
c001ccfd:	52                   	push   edx
c001ccfe:	50                   	push   eax
c001ccff:	53                   	push   ebx
c001cd00:	e8 4f 62 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001cd05:	83 c4 10             	add    esp,0x10
c001cd08:	85 c0                	test   eax,eax
c001cd0a:	75 c8                	jne    c001ccd4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd13:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd17:	31 ed                	xor    ebp,ebp
c001cd19:	0f af c2             	imul   eax,edx
c001cd1c:	50                   	push   eax
c001cd1d:	e8 6a 2b ff ff       	call   c000f88c <malloc>
c001cd22:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd28:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd2f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd33:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd37:	0f af c2             	imul   eax,edx
c001cd3a:	99                   	cdq    
c001cd3b:	52                   	push   edx
c001cd3c:	50                   	push   eax
c001cd3d:	53                   	push   ebx
c001cd3e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd41:	83 c4 20             	add    esp,0x20
c001cd44:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd4c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd54:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd64:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd68:	0f 86 aa 00 00 00    	jbe    c001ce18 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd6e:	0f b7 f5             	movzx  esi,bp
c001cd71:	6b f6 28             	imul   esi,esi,0x28
c001cd74:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd78:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd7f:	50                   	push   eax
c001cd80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd84:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd88:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd8a:	6b c0 28             	imul   eax,eax,0x28
c001cd8d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd91:	89 d0                	mov    eax,edx
c001cd93:	31 d2                	xor    edx,edx
c001cd95:	52                   	push   edx
c001cd96:	50                   	push   eax
c001cd97:	53                   	push   ebx
c001cd98:	e8 b7 61 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001cd9d:	83 c4 0c             	add    esp,0xc
c001cda0:	6a 20                	push   0x20
c001cda2:	6a 00                	push   0x0
c001cda4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cda8:	52                   	push   edx
c001cda9:	e8 a2 39 fe ff       	call   c0000750 <memset>
c001cdae:	58                   	pop    eax
c001cdaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdb1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdb5:	51                   	push   ecx
c001cdb6:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdba:	52                   	push   edx
c001cdbb:	6a 00                	push   0x0
c001cdbd:	6a 1f                	push   0x1f
c001cdbf:	53                   	push   ebx
c001cdc0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdc3:	83 c4 18             	add    esp,0x18
c001cdc6:	68 ea c9 02 c0       	push   0xc002c9ea
c001cdcb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdcf:	52                   	push   edx
c001cdd0:	e8 c3 3a fe ff       	call   c0000898 <strcmp>
c001cdd5:	83 c4 10             	add    esp,0x10
c001cdd8:	85 c0                	test   eax,eax
c001cdda:	75 0f                	jne    c001cdeb <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cddc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cddf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cde3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cde7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdeb:	50                   	push   eax
c001cdec:	50                   	push   eax
c001cded:	68 f2 c9 02 c0       	push   0xc002c9f2
c001cdf2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cdf6:	50                   	push   eax
c001cdf7:	e8 9c 3a fe ff       	call   c0000898 <strcmp>
c001cdfc:	83 c4 10             	add    esp,0x10
c001cdff:	85 c0                	test   eax,eax
c001ce01:	75 0f                	jne    c001ce12 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce03:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce12:	45                   	inc    ebp
c001ce13:	e9 4c ff ff ff       	jmp    c001cd64 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce1d:	75 10                	jne    c001ce2f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce1f:	83 ec 0c             	sub    esp,0xc
c001ce22:	68 fa c9 02 c0       	push   0xc002c9fa
c001ce27:	e8 dd d4 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001ce2c:	83 c4 10             	add    esp,0x10
c001ce2f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce34:	75 10                	jne    c001ce46 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce36:	83 ec 0c             	sub    esp,0xc
c001ce39:	68 fa c9 02 c0       	push   0xc002c9fa
c001ce3e:	e8 c6 d4 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001ce43:	83 c4 10             	add    esp,0x10
c001ce46:	31 d2                	xor    edx,edx
c001ce48:	50                   	push   eax
c001ce49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4d:	52                   	push   edx
c001ce4e:	50                   	push   eax
c001ce4f:	53                   	push   ebx
c001ce50:	e8 ff 60 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001ce55:	5a                   	pop    edx
c001ce56:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce5a:	e8 2d 2a ff ff       	call   c000f88c <malloc>
c001ce5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce67:	31 c9                	xor    ecx,ecx
c001ce69:	5e                   	pop    esi
c001ce6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce6c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce70:	55                   	push   ebp
c001ce71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce75:	51                   	push   ecx
c001ce76:	52                   	push   edx
c001ce77:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce7b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce7f:	53                   	push   ebx
c001ce80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce83:	83 c4 14             	add    esp,0x14
c001ce86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce8a:	e8 fd 29 ff ff       	call   c000f88c <malloc>
c001ce8f:	89 c6                	mov    esi,eax
c001ce91:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce96:	56                   	push   esi
c001ce97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce9b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce9f:	51                   	push   ecx
c001cea0:	52                   	push   edx
c001cea1:	53                   	push   ebx
c001cea2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea9:	8b 15 00 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032500
c001ceaf:	83 c4 1c             	add    esp,0x1c
c001ceb2:	c1 e8 04             	shr    eax,0x4
c001ceb5:	89 04 95 80 23 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdc80],eax
c001cebc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cec0:	31 d2                	xor    edx,edx
c001cec2:	52                   	push   edx
c001cec3:	50                   	push   eax
c001cec4:	53                   	push   ebx
c001cec5:	e8 8a 60 ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001ceca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cecc:	31 d2                	xor    edx,edx
c001cece:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ced1:	56                   	push   esi
c001ced2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ced6:	52                   	push   edx
c001ced7:	50                   	push   eax
c001ced8:	53                   	push   ebx
c001ced9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cedc:	83 c4 14             	add    esp,0x14
c001cedf:	53                   	push   ebx
c001cee0:	e8 0f 60 ff ff       	call   c0012ef4 <File::close()>
c001cee5:	5d                   	pop    ebp
c001cee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ceea:	e8 ad 29 ff ff       	call   c000f89c <free>
c001ceef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cef2:	e8 a5 29 ff ff       	call   c000f89c <free>
c001cef7:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c001cefc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf00:	8d 50 01             	lea    edx,[eax+0x1]
c001cf03:	89 0c 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],ecx
c001cf0a:	89 34 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],esi
c001cf11:	89 15 00 25 03 c0    	mov    DWORD PTR ds:0xc0032500,edx
c001cf17:	83 c4 10             	add    esp,0x10
c001cf1a:	b0 01                	mov    al,0x1
c001cf1c:	83 c4 5c             	add    esp,0x5c
c001cf1f:	5b                   	pop    ebx
c001cf20:	5e                   	pop    esi
c001cf21:	5f                   	pop    edi
c001cf22:	5d                   	pop    ebp
c001cf23:	c3                   	ret    

c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf24:	55                   	push   ebp
c001cf25:	57                   	push   edi
c001cf26:	56                   	push   esi
c001cf27:	53                   	push   ebx
c001cf28:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf2e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf35:	8b 1d 50 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032550
c001cf3b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf3f:	68 14 01 00 00       	push   0x114
c001cf44:	e8 43 29 ff ff       	call   c000f88c <malloc>
c001cf49:	83 c4 0c             	add    esp,0xc
c001cf4c:	89 c5                	mov    ebp,eax
c001cf4e:	53                   	push   ebx
c001cf4f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf56:	50                   	push   eax
c001cf57:	e8 d6 5e ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001cf5c:	5e                   	pop    esi
c001cf5d:	5f                   	pop    edi
c001cf5e:	6a 01                	push   0x1
c001cf60:	55                   	push   ebp
c001cf61:	e8 30 5f ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001cf66:	83 c4 10             	add    esp,0x10
c001cf69:	85 c0                	test   eax,eax
c001cf6b:	0f 85 a7 06 00 00    	jne    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf71:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf79:	83 ec 0c             	sub    esp,0xc
c001cf7c:	6a 34                	push   0x34
c001cf7e:	e8 09 29 ff ff       	call   c000f88c <malloc>
c001cf83:	5b                   	pop    ebx
c001cf84:	89 c7                	mov    edi,eax
c001cf86:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf8d:	53                   	push   ebx
c001cf8e:	57                   	push   edi
c001cf8f:	6a 00                	push   0x0
c001cf91:	6a 34                	push   0x34
c001cf93:	55                   	push   ebp
c001cf94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf97:	83 c4 20             	add    esp,0x20
c001cf9a:	85 c0                	test   eax,eax
c001cf9c:	0f 85 76 06 00 00    	jne    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfa2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfa8:	0f 85 6a 06 00 00    	jne    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfae:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfb1:	85 c0                	test   eax,eax
c001cfb3:	0f 84 5f 06 00 00    	je     c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfb9:	31 d2                	xor    edx,edx
c001cfbb:	51                   	push   ecx
c001cfbc:	52                   	push   edx
c001cfbd:	50                   	push   eax
c001cfbe:	55                   	push   ebp
c001cfbf:	e8 90 5f ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001cfc4:	83 c4 10             	add    esp,0x10
c001cfc7:	85 c0                	test   eax,eax
c001cfc9:	0f 85 49 06 00 00    	jne    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfcf:	83 ec 0c             	sub    esp,0xc
c001cfd2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfd5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfd9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfdd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfe1:	0f af c2             	imul   eax,edx
c001cfe4:	50                   	push   eax
c001cfe5:	e8 a2 28 ff ff       	call   c000f88c <malloc>
c001cfea:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cff1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cff8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cffc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d000:	0f af c2             	imul   eax,edx
c001d003:	99                   	cdq    
c001d004:	52                   	push   edx
c001d005:	50                   	push   eax
c001d006:	55                   	push   ebp
c001d007:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d00a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d00d:	83 c4 20             	add    esp,0x20
c001d010:	85 c0                	test   eax,eax
c001d012:	0f 84 00 06 00 00    	je     c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d018:	52                   	push   edx
c001d019:	31 d2                	xor    edx,edx
c001d01b:	52                   	push   edx
c001d01c:	50                   	push   eax
c001d01d:	55                   	push   ebp
c001d01e:	e8 31 5f ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	85 c0                	test   eax,eax
c001d028:	0f 85 ea 05 00 00    	jne    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d02e:	83 ec 0c             	sub    esp,0xc
c001d031:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d035:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d039:	31 f6                	xor    esi,esi
c001d03b:	0f af c2             	imul   eax,edx
c001d03e:	50                   	push   eax
c001d03f:	e8 48 28 ff ff       	call   c000f88c <malloc>
c001d044:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d047:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d04b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d04e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d052:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d056:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d05a:	0f af c2             	imul   eax,edx
c001d05d:	99                   	cdq    
c001d05e:	52                   	push   edx
c001d05f:	50                   	push   eax
c001d060:	55                   	push   ebp
c001d061:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d064:	83 c4 20             	add    esp,0x20
c001d067:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d06b:	0f 86 8a 00 00 00    	jbe    c001d0fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d071:	0f b7 de             	movzx  ebx,si
c001d074:	c1 e3 05             	shl    ebx,0x5
c001d077:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d07b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d07e:	75 75                	jne    c001d0f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d080:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d083:	31 d2                	xor    edx,edx
c001d085:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d089:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d08c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d090:	50                   	push   eax
c001d091:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d094:	52                   	push   edx
c001d095:	50                   	push   eax
c001d096:	55                   	push   ebp
c001d097:	e8 b8 5e ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001d09c:	83 c4 10             	add    esp,0x10
c001d09f:	85 c0                	test   eax,eax
c001d0a1:	0f 85 71 05 00 00    	jne    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0a7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0ae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0b1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0b5:	31 d2                	xor    edx,edx
c001d0b7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0bb:	83 ec 0c             	sub    esp,0xc
c001d0be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0c2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0c9:	50                   	push   eax
c001d0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0d2:	52                   	push   edx
c001d0d3:	50                   	push   eax
c001d0d4:	55                   	push   ebp
c001d0d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d8:	83 c4 1c             	add    esp,0x1c
c001d0db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0de:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0e1:	50                   	push   eax
c001d0e2:	6a 00                	push   0x0
c001d0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0e8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0ec:	50                   	push   eax
c001d0ed:	e8 5e 36 fe ff       	call   c0000750 <memset>
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	46                   	inc    esi
c001d0f6:	e9 6c ff ff ff       	jmp    c001d067 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0fb:	53                   	push   ebx
c001d0fc:	31 db                	xor    ebx,ebx
c001d0fe:	68 00 01 00 00       	push   0x100
c001d103:	6a 00                	push   0x0
c001d105:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d109:	50                   	push   eax
c001d10a:	e8 41 36 fe ff       	call   c0000750 <memset>
c001d10f:	83 c4 0c             	add    esp,0xc
c001d112:	68 00 01 00 00       	push   0x100
c001d117:	6a 00                	push   0x0
c001d119:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d120:	50                   	push   eax
c001d121:	e8 2a 36 fe ff       	call   c0000750 <memset>
c001d126:	83 c4 10             	add    esp,0x10
c001d129:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d131:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d139:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d141:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d149:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d151:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d155:	0f 86 30 01 00 00    	jbe    c001d28b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d15b:	0f b7 f3             	movzx  esi,bx
c001d15e:	6b f6 28             	imul   esi,esi,0x28
c001d161:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d165:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d16c:	52                   	push   edx
c001d16d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d171:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d175:	8b 06                	mov    eax,DWORD PTR [esi]
c001d177:	6b d2 28             	imul   edx,edx,0x28
c001d17a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d17e:	31 d2                	xor    edx,edx
c001d180:	52                   	push   edx
c001d181:	50                   	push   eax
c001d182:	55                   	push   ebp
c001d183:	e8 cc 5d ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001d188:	83 c4 0c             	add    esp,0xc
c001d18b:	6a 20                	push   0x20
c001d18d:	6a 00                	push   0x0
c001d18f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d196:	51                   	push   ecx
c001d197:	e8 b4 35 fe ff       	call   c0000750 <memset>
c001d19c:	59                   	pop    ecx
c001d19d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1a0:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1a4:	52                   	push   edx
c001d1a5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1ac:	51                   	push   ecx
c001d1ad:	6a 00                	push   0x0
c001d1af:	6a 1f                	push   0x1f
c001d1b1:	55                   	push   ebp
c001d1b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1b5:	83 c4 1c             	add    esp,0x1c
c001d1b8:	6a 09                	push   0x9
c001d1ba:	68 14 ca 02 c0       	push   0xc002ca14
c001d1bf:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1c6:	51                   	push   ecx
c001d1c7:	e8 80 34 fe ff       	call   c000064c <memcmp>
c001d1cc:	83 c4 10             	add    esp,0x10
c001d1cf:	85 c0                	test   eax,eax
c001d1d1:	75 21                	jne    c001d1f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1db:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1e6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1ed:	89 d0                	mov    eax,edx
c001d1ef:	40                   	inc    eax
c001d1f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1f4:	50                   	push   eax
c001d1f5:	6a 09                	push   0x9
c001d1f7:	68 1e ca 02 c0       	push   0xc002ca1e
c001d1fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d203:	50                   	push   eax
c001d204:	e8 43 34 fe ff       	call   c000064c <memcmp>
c001d209:	83 c4 10             	add    esp,0x10
c001d20c:	85 c0                	test   eax,eax
c001d20e:	75 21                	jne    c001d231 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d218:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d21c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d220:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d223:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d22a:	89 d0                	mov    eax,edx
c001d22c:	40                   	inc    eax
c001d22d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d231:	50                   	push   eax
c001d232:	50                   	push   eax
c001d233:	68 ea c9 02 c0       	push   0xc002c9ea
c001d238:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d23f:	50                   	push   eax
c001d240:	e8 53 36 fe ff       	call   c0000898 <strcmp>
c001d245:	83 c4 10             	add    esp,0x10
c001d248:	85 c0                	test   eax,eax
c001d24a:	75 0f                	jne    c001d25b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d24c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d24f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d257:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d25b:	50                   	push   eax
c001d25c:	50                   	push   eax
c001d25d:	68 f2 c9 02 c0       	push   0xc002c9f2
c001d262:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d269:	50                   	push   eax
c001d26a:	e8 29 36 fe ff       	call   c0000898 <strcmp>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	85 c0                	test   eax,eax
c001d274:	75 0f                	jne    c001d285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d276:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d279:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d27d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d281:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d285:	43                   	inc    ebx
c001d286:	e9 c6 fe ff ff       	jmp    c001d151 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d28b:	31 d2                	xor    edx,edx
c001d28d:	50                   	push   eax
c001d28e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d292:	52                   	push   edx
c001d293:	50                   	push   eax
c001d294:	55                   	push   ebp
c001d295:	e8 ba 5c ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001d29a:	58                   	pop    eax
c001d29b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d29f:	e8 e8 25 ff ff       	call   c000f88c <malloc>
c001d2a4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2a7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2ab:	31 d2                	xor    edx,edx
c001d2ad:	58                   	pop    eax
c001d2ae:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2b2:	53                   	push   ebx
c001d2b3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2bb:	52                   	push   edx
c001d2bc:	50                   	push   eax
c001d2bd:	55                   	push   ebp
c001d2be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2c1:	83 c4 14             	add    esp,0x14
c001d2c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2c8:	e8 bf 25 ff ff       	call   c000f88c <malloc>
c001d2cd:	31 d2                	xor    edx,edx
c001d2cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2d3:	83 c4 0c             	add    esp,0xc
c001d2d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2da:	52                   	push   edx
c001d2db:	50                   	push   eax
c001d2dc:	55                   	push   ebp
c001d2dd:	e8 72 5c ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001d2e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2e5:	31 d2                	xor    edx,edx
c001d2e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2f2:	52                   	push   edx
c001d2f3:	50                   	push   eax
c001d2f4:	55                   	push   ebp
c001d2f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2f8:	83 c4 20             	add    esp,0x20
c001d2fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d303:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d307:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d30b:	0f 84 0b 03 00 00    	je     c001d61c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d311:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d318:	31 d2                	xor    edx,edx
c001d31a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d31e:	c1 e8 03             	shr    eax,0x3
c001d321:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d325:	51                   	push   ecx
c001d326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d32a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d32e:	52                   	push   edx
c001d32f:	50                   	push   eax
c001d330:	55                   	push   ebp
c001d331:	e8 1e 5c ff ff       	call   c0012f54 <File::seek(unsigned long long)>
c001d336:	5b                   	pop    ebx
c001d337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d342:	e8 45 25 ff ff       	call   c000f88c <malloc>
c001d347:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d34a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d34e:	31 d2                	xor    edx,edx
c001d350:	5e                   	pop    esi
c001d351:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d355:	50                   	push   eax
c001d356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d35a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d35e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d365:	52                   	push   edx
c001d366:	50                   	push   eax
c001d367:	55                   	push   ebp
c001d368:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d36b:	83 c4 20             	add    esp,0x20
c001d36e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d376:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d37a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d37e:	0f 8d 7c 02 00 00    	jge    c001d600 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d384:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d38c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d391:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d394:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d398:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d39c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d3a0:	89 d8                	mov    eax,ebx
c001d3a2:	c1 e8 08             	shr    eax,0x8
c001d3a5:	89 c6                	mov    esi,eax
c001d3a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3ab:	c1 e6 04             	shl    esi,0x4
c001d3ae:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3b2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3b5:	85 d2                	test   edx,edx
c001d3b7:	0f 85 bf 00 00 00    	jne    c001d47c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3bd:	83 ec 0c             	sub    esp,0xc
c001d3c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3c4:	03 06                	add    eax,DWORD PTR [esi]
c001d3c6:	50                   	push   eax
c001d3c7:	e8 4b f8 ff ff       	call   c001cc17 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3cc:	83 c4 10             	add    esp,0x10
c001d3cf:	89 c2                	mov    edx,eax
c001d3d1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3d6:	85 c0                	test   eax,eax
c001d3d8:	0f 85 9e 00 00 00    	jne    c001d47c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3de:	83 ec 0c             	sub    esp,0xc
c001d3e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3e5:	03 06                	add    eax,DWORD PTR [esi]
c001d3e7:	50                   	push   eax
c001d3e8:	e8 52 11 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d3ed:	83 c4 10             	add    esp,0x10
c001d3f0:	89 c2                	mov    edx,eax
c001d3f2:	85 c0                	test   eax,eax
c001d3f4:	0f 85 82 00 00 00    	jne    c001d47c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3fe:	50                   	push   eax
c001d3ff:	50                   	push   eax
c001d400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d404:	03 06                	add    eax,DWORD PTR [esi]
c001d406:	50                   	push   eax
c001d407:	68 28 ca 02 c0       	push   0xc002ca28
c001d40c:	e8 c2 54 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001d411:	58                   	pop    eax
c001d412:	5a                   	pop    edx
c001d413:	68 42 ca 02 c0       	push   0xc002ca42
c001d418:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d41f:	50                   	push   eax
c001d420:	e8 e7 33 fe ff       	call   c000080c <strcpy>
c001d425:	59                   	pop    ecx
c001d426:	58                   	pop    eax
c001d427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42b:	03 06                	add    eax,DWORD PTR [esi]
c001d42d:	50                   	push   eax
c001d42e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d435:	50                   	push   eax
c001d436:	e8 11 35 fe ff       	call   c000094c <strcat>
c001d43b:	58                   	pop    eax
c001d43c:	5a                   	pop    edx
c001d43d:	68 d8 ca 02 c0       	push   0xc002cad8
c001d442:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d449:	50                   	push   eax
c001d44a:	e8 fd 34 fe ff       	call   c000094c <strcat>
c001d44f:	83 c4 10             	add    esp,0x10
c001d452:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d457:	0f 84 5d 01 00 00    	je     c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d45d:	83 ec 0c             	sub    esp,0xc
c001d460:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d467:	50                   	push   eax
c001d468:	e8 9c ce ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d46d:	83 c4 10             	add    esp,0x10
c001d470:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d474:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d478:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d47c:	80 fb 01             	cmp    bl,0x1
c001d47f:	0f 85 88 00 00 00    	jne    c001d50d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d485:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d48c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d490:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d494:	01 ce                	add    esi,ecx
c001d496:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d49c:	0f 94 c0             	sete   al
c001d49f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4a5:	0f 94 c3             	sete   bl
c001d4a8:	09 c3                	or     ebx,eax
c001d4aa:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4ac:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4b1:	74 41                	je     c001d4f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d4b3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4b6:	84 db                	test   bl,bl
c001d4b8:	75 15                	jne    c001d4cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d4ba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4be:	66 83 f8 0c          	cmp    ax,0xc
c001d4c2:	76 05                	jbe    c001d4c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d4c4:	b8 0c 00 00 00       	mov    eax,0xc
c001d4c9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4cd:	76 37                	jbe    c001d506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4cf:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4d3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4d8:	0f 84 dc 00 00 00    	je     c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d4de:	83 ec 0c             	sub    esp,0xc
c001d4e1:	68 59 ca 02 c0       	push   0xc002ca59
c001d4e6:	e8 1e ce ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d4eb:	83 c4 10             	add    esp,0x10
c001d4ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4f2:	eb 12                	jmp    c001d506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4f4:	01 c1                	add    ecx,eax
c001d4f6:	84 db                	test   bl,bl
c001d4f8:	75 0c                	jne    c001d506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4fa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d502:	77 02                	ja     c001d506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d504:	01 d1                	add    ecx,edx
c001d506:	89 0e                	mov    DWORD PTR [esi],ecx
c001d508:	e9 ea 00 00 00       	jmp    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d50d:	80 fb 02             	cmp    bl,0x2
c001d510:	75 7c                	jne    c001d58e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d512:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d519:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d51d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d521:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d527:	74 20                	je     c001d549 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d529:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d52f:	74 18                	je     c001d549 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d531:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d535:	b9 0a 00 00 00       	mov    ecx,0xa
c001d53a:	66 83 f8 0e          	cmp    ax,0xe
c001d53e:	77 03                	ja     c001d543 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d540:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d543:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d547:	76 1f                	jbe    c001d568 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d549:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d54d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d552:	74 66                	je     c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d554:	83 ec 0c             	sub    esp,0xc
c001d557:	68 75 ca 02 c0       	push   0xc002ca75
c001d55c:	e8 a8 cd ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d561:	83 c4 10             	add    esp,0x10
c001d564:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d568:	8b 06                	mov    eax,DWORD PTR [esi]
c001d56a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d56f:	74 13                	je     c001d584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d571:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d575:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d57c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d580:	01 c8                	add    eax,ecx
c001d582:	eb 04                	jmp    c001d588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d584:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d588:	01 c2                	add    edx,eax
c001d58a:	89 16                	mov    DWORD PTR [esi],edx
c001d58c:	eb 69                	jmp    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d58e:	0f b6 db             	movzx  ebx,bl
c001d591:	50                   	push   eax
c001d592:	50                   	push   eax
c001d593:	53                   	push   ebx
c001d594:	68 91 ca 02 c0       	push   0xc002ca91
c001d599:	e8 35 53 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a6:	74 12                	je     c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	68 9c ca 02 c0       	push   0xc002ca9c
c001d5b0:	e8 54 cd ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d5b5:	83 c4 10             	add    esp,0x10
c001d5b8:	eb 3d                	jmp    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5ba:	83 ec 0c             	sub    esp,0xc
c001d5bd:	55                   	push   ebp
c001d5be:	e8 31 59 ff ff       	call   c0012ef4 <File::close()>
c001d5c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5c6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5cc:	59                   	pop    ecx
c001d5cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5d1:	e8 c6 22 ff ff       	call   c000f89c <free>
c001d5d6:	5b                   	pop    ebx
c001d5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5db:	e8 bc 22 ff ff       	call   c000f89c <free>
c001d5e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5e3:	e8 b4 22 ff ff       	call   c000f89c <free>
c001d5e8:	5e                   	pop    esi
c001d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5ed:	e8 aa 22 ff ff       	call   c000f89c <free>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	eb 21                	jmp    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5f7:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5fb:	e9 76 fd ff ff       	jmp    c001d376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d600:	83 ec 0c             	sub    esp,0xc
c001d603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d607:	e8 90 22 ff ff       	call   c000f89c <free>
c001d60c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	e9 eb fc ff ff       	jmp    c001d303 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d618:	31 c0                	xor    eax,eax
c001d61a:	eb 33                	jmp    c001d64f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d61c:	83 ec 0c             	sub    esp,0xc
c001d61f:	55                   	push   ebp
c001d620:	e8 cf 58 ff ff       	call   c0012ef4 <File::close()>
c001d625:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d628:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d62b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d62e:	58                   	pop    eax
c001d62f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d633:	e8 64 22 ff ff       	call   c000f89c <free>
c001d638:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d63b:	e8 5c 22 ff ff       	call   c000f89c <free>
c001d640:	5a                   	pop    edx
c001d641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d645:	e8 52 22 ff ff       	call   c000f89c <free>
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	b0 01                	mov    al,0x1
c001d64f:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d655:	5b                   	pop    ebx
c001d656:	5e                   	pop    esi
c001d657:	5f                   	pop    edi
c001d658:	5d                   	pop    ebp
c001d659:	c3                   	ret    

c001d65a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d65a:	56                   	push   esi
c001d65b:	31 d2                	xor    edx,edx
c001d65d:	53                   	push   ebx
c001d65e:	8b 1d 60 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d60
c001d664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d668:	39 d3                	cmp    ebx,edx
c001d66a:	7e 1b                	jle    c001d687 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d66c:	8b 04 95 80 1f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce080]
c001d673:	39 c8                	cmp    eax,ecx
c001d675:	77 0d                	ja     c001d684 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d677:	8b 34 95 80 1d 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce280]
c001d67e:	01 c6                	add    esi,eax
c001d680:	39 ce                	cmp    esi,ecx
c001d682:	77 05                	ja     c001d689 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d684:	42                   	inc    edx
c001d685:	eb e1                	jmp    c001d668 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d687:	31 c0                	xor    eax,eax
c001d689:	5b                   	pop    ebx
c001d68a:	5e                   	pop    esi
c001d68b:	c3                   	ret    

c001d68c <Thr::getDriverNameFromAddress(unsigned long)>:
c001d68c:	53                   	push   ebx
c001d68d:	31 c0                	xor    eax,eax
c001d68f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d693:	8b 1d 60 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d60
c001d699:	39 c3                	cmp    ebx,eax
c001d69b:	7e 22                	jle    c001d6bf <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d69d:	8b 14 85 80 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce080]
c001d6a4:	39 ca                	cmp    edx,ecx
c001d6a6:	77 14                	ja     c001d6bc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6a8:	03 14 85 80 1d 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce280]
c001d6af:	39 ca                	cmp    edx,ecx
c001d6b1:	76 09                	jbe    c001d6bc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6b3:	8b 04 85 80 21 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcde80]
c001d6ba:	eb 05                	jmp    c001d6c1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6bc:	40                   	inc    eax
c001d6bd:	eb da                	jmp    c001d699 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6bf:	31 c0                	xor    eax,eax
c001d6c1:	5b                   	pop    ebx
c001d6c2:	c3                   	ret    

c001d6c3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6c3:	53                   	push   ebx
c001d6c4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6c8:	53                   	push   ebx
c001d6c9:	e8 8c ff ff ff       	call   c001d65a <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6ce:	5a                   	pop    edx
c001d6cf:	31 d2                	xor    edx,edx
c001d6d1:	85 c0                	test   eax,eax
c001d6d3:	74 04                	je     c001d6d9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6d5:	89 da                	mov    edx,ebx
c001d6d7:	29 c2                	sub    edx,eax
c001d6d9:	89 d0                	mov    eax,edx
c001d6db:	5b                   	pop    ebx
c001d6dc:	c3                   	ret    

c001d6dd <Thr::loadDLL(char const*, bool)>:
c001d6dd:	55                   	push   ebp
c001d6de:	57                   	push   edi
c001d6df:	56                   	push   esi
c001d6e0:	53                   	push   ebx
c001d6e1:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6e7:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6ee:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d6f5:	56                   	push   esi
c001d6f6:	68 b4 ca 02 c0       	push   0xc002cab4
c001d6fb:	e8 d3 51 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001d700:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d707:	e8 80 21 ff ff       	call   c000f88c <malloc>
c001d70c:	83 c4 0c             	add    esp,0xc
c001d70f:	89 c3                	mov    ebx,eax
c001d711:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001d717:	56                   	push   esi
c001d718:	50                   	push   eax
c001d719:	e8 14 57 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001d71e:	83 c4 10             	add    esp,0x10
c001d721:	85 db                	test   ebx,ebx
c001d723:	75 3c                	jne    c001d761 <Thr::loadDLL(char const*, bool)+0x84>
c001d725:	89 f8                	mov    eax,edi
c001d727:	84 c0                	test   al,al
c001d729:	0f 84 cc 01 00 00    	je     c001d8fb <Thr::loadDLL(char const*, bool)+0x21e>
c001d72f:	55                   	push   ebp
c001d730:	55                   	push   ebp
c001d731:	68 c5 ca 02 c0       	push   0xc002cac5
c001d736:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d73a:	55                   	push   ebp
c001d73b:	e8 cc 30 fe ff       	call   c000080c <strcpy>
c001d740:	58                   	pop    eax
c001d741:	5a                   	pop    edx
c001d742:	56                   	push   esi
c001d743:	55                   	push   ebp
c001d744:	e8 03 32 fe ff       	call   c000094c <strcat>
c001d749:	59                   	pop    ecx
c001d74a:	58                   	pop    eax
c001d74b:	68 d8 ca 02 c0       	push   0xc002cad8
c001d750:	55                   	push   ebp
c001d751:	e8 f6 31 fe ff       	call   c000094c <strcat>
c001d756:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d759:	e8 ab cb ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d75e:	83 c4 10             	add    esp,0x10
c001d761:	51                   	push   ecx
c001d762:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d766:	50                   	push   eax
c001d767:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d76b:	50                   	push   eax
c001d76c:	53                   	push   ebx
c001d76d:	e8 d0 59 ff ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c001d772:	83 c4 10             	add    esp,0x10
c001d775:	85 db                	test   ebx,ebx
c001d777:	74 0c                	je     c001d785 <Thr::loadDLL(char const*, bool)+0xa8>
c001d779:	83 ec 0c             	sub    esp,0xc
c001d77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d77e:	53                   	push   ebx
c001d77f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d78a:	75 0a                	jne    c001d796 <Thr::loadDLL(char const*, bool)+0xb9>
c001d78c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d790:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d794:	75 3c                	jne    c001d7d2 <Thr::loadDLL(char const*, bool)+0xf5>
c001d796:	89 f8                	mov    eax,edi
c001d798:	84 c0                	test   al,al
c001d79a:	0f 84 43 01 00 00    	je     c001d8e3 <Thr::loadDLL(char const*, bool)+0x206>
c001d7a0:	51                   	push   ecx
c001d7a1:	51                   	push   ecx
c001d7a2:	68 c5 ca 02 c0       	push   0xc002cac5
c001d7a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7ab:	53                   	push   ebx
c001d7ac:	e8 5b 30 fe ff       	call   c000080c <strcpy>
c001d7b1:	5d                   	pop    ebp
c001d7b2:	58                   	pop    eax
c001d7b3:	56                   	push   esi
c001d7b4:	53                   	push   ebx
c001d7b5:	e8 92 31 fe ff       	call   c000094c <strcat>
c001d7ba:	58                   	pop    eax
c001d7bb:	5a                   	pop    edx
c001d7bc:	68 d8 ca 02 c0       	push   0xc002cad8
c001d7c1:	53                   	push   ebx
c001d7c2:	e8 85 31 fe ff       	call   c000094c <strcat>
c001d7c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7ca:	e8 3a cb ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	52                   	push   edx
c001d7d3:	6a 03                	push   0x3
c001d7d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d7dd:	05 ff 0f 00 00       	add    eax,0xfff
c001d7e2:	83 d2 00             	adc    edx,0x0
c001d7e5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7e9:	50                   	push   eax
c001d7ea:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c001d7f0:	e8 11 46 ff ff       	call   c0011e06 <VAS::allocatePages(int, int)>
c001d7f5:	59                   	pop    ecx
c001d7f6:	89 c3                	mov    ebx,eax
c001d7f8:	5d                   	pop    ebp
c001d7f9:	50                   	push   eax
c001d7fa:	68 da ca 02 c0       	push   0xc002cada
c001d7ff:	e8 cf 50 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001d804:	89 34 24             	mov    DWORD PTR [esp],esi
c001d807:	e8 60 2f fe ff       	call   c000076c <strlen>
c001d80c:	8b 2d 60 1d 03 c0    	mov    ebp,DWORD PTR ds:0xc0031d60
c001d812:	40                   	inc    eax
c001d813:	89 04 24             	mov    DWORD PTR [esp],eax
c001d816:	e8 71 20 ff ff       	call   c000f88c <malloc>
c001d81b:	89 04 ad 80 21 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcde80],eax
c001d822:	58                   	pop    eax
c001d823:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c001d828:	5a                   	pop    edx
c001d829:	56                   	push   esi
c001d82a:	ff 34 85 80 21 03 c0 	push   DWORD PTR [eax*4-0x3ffcde80]
c001d831:	e8 d6 2f fe ff       	call   c000080c <strcpy>
c001d836:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c001d83b:	8d 50 01             	lea    edx,[eax+0x1]
c001d83e:	89 1c 85 80 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce080],ebx
c001d845:	89 15 60 1d 03 c0    	mov    DWORD PTR ds:0xc0031d60,edx
c001d84b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d84f:	83 c4 0c             	add    esp,0xc
c001d852:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c001d859:	6a 01                	push   0x1
c001d85b:	53                   	push   ebx
c001d85c:	56                   	push   esi
c001d85d:	e8 c2 f6 ff ff       	call   c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d862:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d86e:	0f 85 83 00 00 00    	jne    c001d8f7 <Thr::loadDLL(char const*, bool)+0x21a>
c001d874:	89 f8                	mov    eax,edi
c001d876:	84 c0                	test   al,al
c001d878:	74 6d                	je     c001d8e7 <Thr::loadDLL(char const*, bool)+0x20a>
c001d87a:	83 ec 0c             	sub    esp,0xc
c001d87d:	68 e7 ca 02 c0       	push   0xc002cae7
c001d882:	e8 82 ca ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	eb 5b                	jmp    c001d8e7 <Thr::loadDLL(char const*, bool)+0x20a>
c001d88c:	89 ee                	mov    esi,ebp
c001d88e:	50                   	push   eax
c001d88f:	c1 e6 0c             	shl    esi,0xc
c001d892:	50                   	push   eax
c001d893:	01 de                	add    esi,ebx
c001d895:	56                   	push   esi
c001d896:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c001d89c:	e8 cd 40 ff ff       	call   c001196e <VAS::getPageTableEntry(unsigned long)>
c001d8a1:	83 c4 10             	add    esp,0x10
c001d8a4:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8a7:	75 0c                	jne    c001d8b5 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8a9:	83 ec 0c             	sub    esp,0xc
c001d8ac:	56                   	push   esi
c001d8ad:	e8 87 22 ff ff       	call   c000fb39 <Phys::freePage(unsigned long)>
c001d8b2:	83 c4 10             	add    esp,0x10
c001d8b5:	45                   	inc    ebp
c001d8b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8be:	05 ff 0f 00 00       	add    eax,0xfff
c001d8c3:	bf 00 00 00 00       	mov    edi,0x0
c001d8c8:	83 d2 00             	adc    edx,0x0
c001d8cb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8cf:	c1 ea 0c             	shr    edx,0xc
c001d8d2:	39 c5                	cmp    ebp,eax
c001d8d4:	89 d1                	mov    ecx,edx
c001d8d6:	89 f8                	mov    eax,edi
c001d8d8:	19 c8                	sbb    eax,ecx
c001d8da:	72 b0                	jb     c001d88c <Thr::loadDLL(char const*, bool)+0x1af>
c001d8dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d8e1:	75 18                	jne    c001d8fb <Thr::loadDLL(char const*, bool)+0x21e>
c001d8e3:	31 db                	xor    ebx,ebx
c001d8e5:	eb 14                	jmp    c001d8fb <Thr::loadDLL(char const*, bool)+0x21e>
c001d8e7:	83 ec 0c             	sub    esp,0xc
c001d8ea:	68 06 cb 02 c0       	push   0xc002cb06
c001d8ef:	e8 15 ca ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	31 ed                	xor    ebp,ebp
c001d8f9:	eb bb                	jmp    c001d8b6 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d8fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d901:	89 d8                	mov    eax,ebx
c001d903:	5b                   	pop    ebx
c001d904:	5e                   	pop    esi
c001d905:	5f                   	pop    edi
c001d906:	5d                   	pop    ebp
c001d907:	c3                   	ret    

c001d908 <Thr::executeDLL(unsigned long, void*)>:
c001d908:	56                   	push   esi
c001d909:	53                   	push   ebx
c001d90a:	52                   	push   edx
c001d90b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d90f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d913:	85 db                	test   ebx,ebx
c001d915:	75 10                	jne    c001d927 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d917:	83 ec 0c             	sub    esp,0xc
c001d91a:	68 22 cb 02 c0       	push   0xc002cb22
c001d91f:	e8 e5 c9 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	50                   	push   eax
c001d928:	50                   	push   eax
c001d929:	53                   	push   ebx
c001d92a:	68 4c cb 02 c0       	push   0xc002cb4c
c001d92f:	e8 9f 4f ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001d934:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d938:	89 d8                	mov    eax,ebx
c001d93a:	83 c4 14             	add    esp,0x14
c001d93d:	5b                   	pop    ebx
c001d93e:	5e                   	pop    esi
c001d93f:	ff e0                	jmp    eax
c001d941:	90                   	nop

c001d942 <userModeEntryPoint(void*)>:
c001d942:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001d947:	48                   	dec    eax
c001d948:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001d94d:	75 01                	jne    c001d950 <userModeEntryPoint(void*)+0xe>
c001d94f:	fb                   	sti    
c001d950:	fb                   	sti    
c001d951:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d956:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d959:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d95f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d963:	e9 c2 29 fe ff       	jmp    c000032a <goToUsermode>

c001d968 <changeTSS>:
c001d968:	83 ec 14             	sub    esp,0x14
c001d96b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d970:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d973:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d978:	c1 e2 15             	shl    edx,0x15
c001d97b:	29 d0                	sub    eax,edx
c001d97d:	50                   	push   eax
c001d97e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001d983:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d989:	05 7c 11 00 00       	add    eax,0x117c
c001d98e:	50                   	push   eax
c001d98f:	e8 78 34 ff ff       	call   c0010e0c <TSS::setESP(unsigned long)>
c001d994:	83 c4 1c             	add    esp,0x1c
c001d997:	c3                   	ret    

c001d998 <switchToThread(ThreadControlBlock*)>:
c001d998:	57                   	push   edi
c001d999:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001d99e:	56                   	push   esi
c001d99f:	85 c0                	test   eax,eax
c001d9a1:	53                   	push   ebx
c001d9a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9a6:	0f 85 88 00 00 00    	jne    c001da34 <switchToThread(ThreadControlBlock*)+0x9c>
c001d9ac:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d9af:	3c ff                	cmp    al,0xff
c001d9b1:	74 7d                	je     c001da30 <switchToThread(ThreadControlBlock*)+0x98>
c001d9b3:	0f b6 d0             	movzx  edx,al
c001d9b6:	b8 84 03 00 00       	mov    eax,0x384
c001d9bb:	29 d0                	sub    eax,edx
c001d9bd:	c1 e0 10             	shl    eax,0x10
c001d9c0:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d9c3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d9c6:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001d9cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9d1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d9d8:	74 4a                	je     c001da24 <switchToThread(ThreadControlBlock*)+0x8c>
c001d9da:	0f 31                	rdtsc  
c001d9dc:	a3 68 25 03 c0       	mov    ds:0xc0032568,eax
c001d9e1:	89 c6                	mov    esi,eax
c001d9e3:	89 d7                	mov    edi,edx
c001d9e5:	2b 35 58 25 03 c0    	sub    esi,DWORD PTR ds:0xc0032558
c001d9eb:	89 15 6c 25 03 c0    	mov    DWORD PTR ds:0xc003256c,edx
c001d9f1:	1b 3d 5c 25 03 c0    	sbb    edi,DWORD PTR ds:0xc003255c
c001d9f7:	89 35 60 25 03 c0    	mov    DWORD PTR ds:0xc0032560,esi
c001d9fd:	a3 58 25 03 c0       	mov    ds:0xc0032558,eax
c001da02:	89 3d 64 25 03 c0    	mov    DWORD PTR ds:0xc0032564,edi
c001da08:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001da0e:	89 15 5c 25 03 c0    	mov    DWORD PTR ds:0xc003255c,edx
c001da14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da17:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001da1a:	01 c6                	add    esi,eax
c001da1c:	11 d7                	adc    edi,edx
c001da1e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001da21:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001da24:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001da28:	5b                   	pop    ebx
c001da29:	5e                   	pop    esi
c001da2a:	5f                   	pop    edi
c001da2b:	e9 32 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001da30:	31 c0                	xor    eax,eax
c001da32:	eb 8f                	jmp    c001d9c3 <switchToThread(ThreadControlBlock*)+0x2b>
c001da34:	5b                   	pop    ebx
c001da35:	c7 05 20 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x1
c001da3f:	5e                   	pop    esi
c001da40:	5f                   	pop    edi
c001da41:	c3                   	ret    

c001da42 <Process::addArgs(char**)>:
c001da42:	57                   	push   edi
c001da43:	56                   	push   esi
c001da44:	53                   	push   ebx
c001da45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da4d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da57:	85 ff                	test   edi,edi
c001da59:	74 3d                	je     c001da98 <Process::addArgs(char**)+0x56>
c001da5b:	8b 07                	mov    eax,DWORD PTR [edi]
c001da5d:	85 c0                	test   eax,eax
c001da5f:	74 37                	je     c001da98 <Process::addArgs(char**)+0x56>
c001da61:	31 db                	xor    ebx,ebx
c001da63:	83 ec 0c             	sub    esp,0xc
c001da66:	50                   	push   eax
c001da67:	e8 00 2d fe ff       	call   c000076c <strlen>
c001da6c:	40                   	inc    eax
c001da6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001da70:	e8 17 1e ff ff       	call   c000f88c <malloc>
c001da75:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da7c:	5a                   	pop    edx
c001da7d:	59                   	pop    ecx
c001da7e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da81:	43                   	inc    ebx
c001da82:	50                   	push   eax
c001da83:	e8 84 2d fe ff       	call   c000080c <strcpy>
c001da88:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da8e:	83 c4 10             	add    esp,0x10
c001da91:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da94:	85 c0                	test   eax,eax
c001da96:	75 cb                	jne    c001da63 <Process::addArgs(char**)+0x21>
c001da98:	5b                   	pop    ebx
c001da99:	5e                   	pop    esi
c001da9a:	5f                   	pop    edi
c001da9b:	c3                   	ret    

c001da9c <Process::Process(char const*, Process*, char**)>:
c001da9c:	56                   	push   esi
c001da9d:	53                   	push   ebx
c001da9e:	83 ec 14             	sub    esp,0x14
c001daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa5:	05 0c 02 00 00       	add    eax,0x20c
c001daaa:	bb 07 00 00 00       	mov    ebx,0x7
c001daaf:	89 c6                	mov    esi,eax
c001dab1:	85 db                	test   ebx,ebx
c001dab3:	78 12                	js     c001dac7 <Process::Process(char const*, Process*, char**)+0x2b>
c001dab5:	83 ec 0c             	sub    esp,0xc
c001dab8:	56                   	push   esi
c001dab9:	e8 e4 ba 00 00       	call   c00295a2 <ThreadControlBlock::ThreadControlBlock()>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	83 c6 63             	add    esi,0x63
c001dac4:	4b                   	dec    ebx
c001dac5:	eb ea                	jmp    c001dab1 <Process::Process(char const*, Process*, char**)+0x15>
c001dac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dad2:	83 ec 0c             	sub    esp,0xc
c001dad5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad9:	e8 84 c6 ff ff       	call   c001a162 <Krnl::newProcessEnv(Process*)>
c001dade:	83 c4 10             	add    esp,0x10
c001dae1:	89 c2                	mov    edx,eax
c001dae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001daed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dafa:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c001daff:	8d 50 01             	lea    edx,[eax+0x1]
c001db02:	89 15 90 e5 02 c0    	mov    DWORD PTR ds:0xc002e590,edx
c001db08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db0c:	89 02                	mov    DWORD PTR [edx],eax
c001db0e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db16:	83 ec 0c             	sub    esp,0xc
c001db19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db1d:	e8 6a 1d ff ff       	call   c000f88c <malloc>
c001db22:	83 c4 10             	add    esp,0x10
c001db25:	89 c3                	mov    ebx,eax
c001db27:	83 ec 08             	sub    esp,0x8
c001db2a:	6a 00                	push   0x0
c001db2c:	53                   	push   ebx
c001db2d:	e8 7c 46 ff ff       	call   c00121ae <VAS::VAS(bool)>
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db39:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db43:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db55:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db65:	85 c0                	test   eax,eax
c001db67:	74 42                	je     c001dbab <Process::Process(char const*, Process*, char**)+0x10f>
c001db69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db73:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db87:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db8d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db97:	05 0c 01 00 00       	add    eax,0x10c
c001db9c:	83 ec 08             	sub    esp,0x8
c001db9f:	52                   	push   edx
c001dba0:	50                   	push   eax
c001dba1:	e8 66 2c fe ff       	call   c000080c <strcpy>
c001dba6:	83 c4 10             	add    esp,0x10
c001dba9:	eb 63                	jmp    c001dc0e <Process::Process(char const*, Process*, char**)+0x172>
c001dbab:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbba:	e8 cd 1c ff ff       	call   c000f88c <malloc>
c001dbbf:	83 c4 10             	add    esp,0x10
c001dbc2:	89 c3                	mov    ebx,eax
c001dbc4:	83 ec 08             	sub    esp,0x8
c001dbc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbcb:	53                   	push   ebx
c001dbcc:	e8 1d 2f ff ff       	call   c0010aee <VgaText::VgaText(char const*)>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbe8:	83 ec 0c             	sub    esp,0xc
c001dbeb:	50                   	push   eax
c001dbec:	e8 04 26 ff ff       	call   c00101f5 <addToTerminalCycle(VgaText*)>
c001dbf1:	83 c4 10             	add    esp,0x10
c001dbf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf8:	05 0c 01 00 00       	add    eax,0x10c
c001dbfd:	83 ec 08             	sub    esp,0x8
c001dc00:	68 6b cb 02 c0       	push   0xc002cb6b
c001dc05:	50                   	push   eax
c001dc06:	e8 01 2c fe ff       	call   c000080c <strcpy>
c001dc0b:	83 c4 10             	add    esp,0x10
c001dc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc12:	83 c0 0c             	add    eax,0xc
c001dc15:	83 ec 08             	sub    esp,0x8
c001dc18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc1c:	50                   	push   eax
c001dc1d:	e8 ea 2b fe ff       	call   c000080c <strcpy>
c001dc22:	83 c4 10             	add    esp,0x10
c001dc25:	83 ec 08             	sub    esp,0x8
c001dc28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc30:	e8 0d fe ff ff       	call   c001da42 <Process::addArgs(char**)>
c001dc35:	83 c4 10             	add    esp,0x10
c001dc38:	83 ec 08             	sub    esp,0x8
c001dc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc43:	e8 a6 ed ff ff       	call   c001c9ee <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc48:	83 c4 10             	add    esp,0x10
c001dc4b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc4f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc53:	83 f0 01             	xor    eax,0x1
c001dc56:	88 c2                	mov    dl,al
c001dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc5c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc62:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc67:	83 ec 08             	sub    esp,0x8
c001dc6a:	50                   	push   eax
c001dc6b:	68 98 cc 02 c0       	push   0xc002cc98
c001dc70:	e8 5e 4c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	90                   	nop
c001dc79:	83 c4 14             	add    esp,0x14
c001dc7c:	5b                   	pop    ebx
c001dc7d:	5e                   	pop    esi
c001dc7e:	c3                   	ret    
c001dc7f:	90                   	nop

c001dc80 <Process::Process(bool, char const*, Process*, char**)>:
c001dc80:	56                   	push   esi
c001dc81:	53                   	push   ebx
c001dc82:	83 ec 24             	sub    esp,0x24
c001dc85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc89:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc91:	05 0c 02 00 00       	add    eax,0x20c
c001dc96:	bb 07 00 00 00       	mov    ebx,0x7
c001dc9b:	89 c6                	mov    esi,eax
c001dc9d:	85 db                	test   ebx,ebx
c001dc9f:	78 12                	js     c001dcb3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dca1:	83 ec 0c             	sub    esp,0xc
c001dca4:	56                   	push   esi
c001dca5:	e8 f8 b8 00 00       	call   c00295a2 <ThreadControlBlock::ThreadControlBlock()>
c001dcaa:	83 c4 10             	add    esp,0x10
c001dcad:	83 c6 63             	add    esi,0x63
c001dcb0:	4b                   	dec    ebx
c001dcb1:	eb ea                	jmp    c001dc9d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcc5:	e8 98 c4 ff ff       	call   c001a162 <Krnl::newProcessEnv(Process*)>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	89 c2                	mov    edx,eax
c001dccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dce6:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c001dceb:	8d 50 01             	lea    edx,[eax+0x1]
c001dcee:	89 15 90 e5 02 c0    	mov    DWORD PTR ds:0xc002e590,edx
c001dcf4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcf8:	89 02                	mov    DWORD PTR [edx],eax
c001dcfa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd02:	83 ec 0c             	sub    esp,0xc
c001dd05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd09:	e8 7e 1b ff ff       	call   c000f88c <malloc>
c001dd0e:	83 c4 10             	add    esp,0x10
c001dd11:	89 c3                	mov    ebx,eax
c001dd13:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd18:	83 ec 08             	sub    esp,0x8
c001dd1b:	50                   	push   eax
c001dd1c:	53                   	push   ebx
c001dd1d:	e8 8c 44 ff ff       	call   c00121ae <VAS::VAS(bool)>
c001dd22:	83 c4 10             	add    esp,0x10
c001dd25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd29:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd33:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd45:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd55:	85 c0                	test   eax,eax
c001dd57:	74 42                	je     c001dd9b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd63:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd77:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd7d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd87:	05 0c 01 00 00       	add    eax,0x10c
c001dd8c:	83 ec 08             	sub    esp,0x8
c001dd8f:	52                   	push   edx
c001dd90:	50                   	push   eax
c001dd91:	e8 76 2a fe ff       	call   c000080c <strcpy>
c001dd96:	83 c4 10             	add    esp,0x10
c001dd99:	eb 63                	jmp    c001ddfe <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd9b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dda3:	83 ec 0c             	sub    esp,0xc
c001dda6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddaa:	e8 dd 1a ff ff       	call   c000f88c <malloc>
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	89 c3                	mov    ebx,eax
c001ddb4:	83 ec 08             	sub    esp,0x8
c001ddb7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddbb:	53                   	push   ebx
c001ddbc:	e8 2d 2d ff ff       	call   c0010aee <VgaText::VgaText(char const*)>
c001ddc1:	83 c4 10             	add    esp,0x10
c001ddc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddd8:	83 ec 0c             	sub    esp,0xc
c001dddb:	50                   	push   eax
c001dddc:	e8 14 24 ff ff       	call   c00101f5 <addToTerminalCycle(VgaText*)>
c001dde1:	83 c4 10             	add    esp,0x10
c001dde4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde8:	05 0c 01 00 00       	add    eax,0x10c
c001dded:	83 ec 08             	sub    esp,0x8
c001ddf0:	68 6b cb 02 c0       	push   0xc002cb6b
c001ddf5:	50                   	push   eax
c001ddf6:	e8 11 2a fe ff       	call   c000080c <strcpy>
c001ddfb:	83 c4 10             	add    esp,0x10
c001ddfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de02:	83 c0 0c             	add    eax,0xc
c001de05:	83 ec 08             	sub    esp,0x8
c001de08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de0c:	50                   	push   eax
c001de0d:	e8 fa 29 fe ff       	call   c000080c <strcpy>
c001de12:	83 c4 10             	add    esp,0x10
c001de15:	83 ec 08             	sub    esp,0x8
c001de18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de20:	e8 1d fc ff ff       	call   c001da42 <Process::addArgs(char**)>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	90                   	nop
c001de29:	83 c4 24             	add    esp,0x24
c001de2c:	5b                   	pop    ebx
c001de2d:	5e                   	pop    esi
c001de2e:	c3                   	ret    

c001de2f <taskStartupFunction>:
c001de2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de34:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de37:	c3                   	ret    

c001de38 <Semaphore::Semaphore(int)>:
c001de38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de40:	89 10                	mov    DWORD PTR [eax],edx
c001de42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de46:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de63:	90                   	nop
c001de64:	c3                   	ret    
c001de65:	90                   	nop

c001de66 <Mutex::Mutex()>:
c001de66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de6a:	6a 01                	push   0x1
c001de6c:	50                   	push   eax
c001de6d:	e8 c6 ff ff ff       	call   c001de38 <Semaphore::Semaphore(int)>
c001de72:	83 c4 08             	add    esp,0x8
c001de75:	90                   	nop
c001de76:	c3                   	ret    
c001de77:	90                   	nop

c001de78 <Process::createThread(void (*)(void*), void*, int)>:
c001de78:	55                   	push   ebp
c001de79:	31 c9                	xor    ecx,ecx
c001de7b:	57                   	push   edi
c001de7c:	56                   	push   esi
c001de7d:	53                   	push   ebx
c001de7e:	83 ec 1c             	sub    esp,0x1c
c001de81:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de85:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de8c:	89 f2                	mov    edx,esi
c001de8e:	0f b7 c2             	movzx  eax,dx
c001de91:	83 e2 01             	and    edx,0x1
c001de94:	74 16                	je     c001deac <Process::createThread(void (*)(void*), void*, int)+0x34>
c001de96:	d1 f8                	sar    eax,1
c001de98:	41                   	inc    ecx
c001de99:	89 c2                	mov    edx,eax
c001de9b:	83 f9 10             	cmp    ecx,0x10
c001de9e:	75 ee                	jne    c001de8e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dea0:	83 c4 1c             	add    esp,0x1c
c001dea3:	31 db                	xor    ebx,ebx
c001dea5:	89 d8                	mov    eax,ebx
c001dea7:	5b                   	pop    ebx
c001dea8:	5e                   	pop    esi
c001dea9:	5f                   	pop    edi
c001deaa:	5d                   	pop    ebp
c001deab:	c3                   	ret    
c001deac:	b8 01 00 00 00       	mov    eax,0x1
c001deb1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001deb4:	d3 e0                	shl    eax,cl
c001deb6:	09 c6                	or     esi,eax
c001deb8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001debb:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dec2:	89 c6                	mov    esi,eax
c001dec4:	c1 e6 05             	shl    esi,0x5
c001dec7:	01 f0                	add    eax,esi
c001dec9:	01 d8                	add    eax,ebx
c001decb:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001ded2:	75 0a                	jne    c001dede <Process::createThread(void (*)(void*), void*, int)+0x66>
c001ded4:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dede:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dee4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dee8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001deeb:	01 ca                	add    edx,ecx
c001deed:	83 ec 08             	sub    esp,0x8
c001def0:	89 d0                	mov    eax,edx
c001def2:	c1 e0 05             	shl    eax,0x5
c001def5:	01 d0                	add    eax,edx
c001def7:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001defb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001deff:	01 d8                	add    eax,ebx
c001df01:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001df07:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001df0d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df13:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df19:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df1f:	89 cd                	mov    ebp,ecx
c001df21:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001df25:	f7 dd                	neg    ebp
c001df27:	c1 e5 15             	shl    ebp,0x15
c001df2a:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001df30:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001df36:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df40:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001df46:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df50:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df5e:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001df65:	53                   	push   ebx
c001df66:	68 44 25 03 c0       	push   0xc0032544
c001df6b:	e8 ec b3 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df70:	89 d8                	mov    eax,ebx
c001df72:	83 c4 10             	add    esp,0x10
c001df75:	83 c4 1c             	add    esp,0x1c
c001df78:	5b                   	pop    ebx
c001df79:	5e                   	pop    esi
c001df7a:	5f                   	pop    edi
c001df7b:	5d                   	pop    ebp
c001df7c:	c3                   	ret    
c001df7d:	90                   	nop

c001df7e <Process::createUserThread()>:
c001df7e:	83 ec 0c             	sub    esp,0xc
c001df81:	68 80 00 00 00       	push   0x80
c001df86:	6a 00                	push   0x0
c001df88:	68 42 d9 01 c0       	push   0xc001d942
c001df8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df91:	e8 e2 fe ff ff       	call   c001de78 <Process::createThread(void (*)(void*), void*, int)>
c001df96:	83 c4 1c             	add    esp,0x1c
c001df99:	c3                   	ret    

c001df9a <setupMultitasking(void (*)())>:
c001df9a:	56                   	push   esi
c001df9b:	53                   	push   ebx
c001df9c:	51                   	push   ecx
c001df9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfa1:	eb 10                	jmp    c001dfb3 <setupMultitasking(void (*)())+0x19>
c001dfa3:	83 ec 0c             	sub    esp,0xc
c001dfa6:	68 44 25 03 c0       	push   0xc0032544
c001dfab:	e8 fe b2 00 00       	call   c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfb0:	83 c4 10             	add    esp,0x10
c001dfb3:	83 ec 0c             	sub    esp,0xc
c001dfb6:	68 44 25 03 c0       	push   0xc0032544
c001dfbb:	e8 ca b2 00 00       	call   c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfc0:	83 c4 10             	add    esp,0x10
c001dfc3:	84 c0                	test   al,al
c001dfc5:	74 dc                	je     c001dfa3 <setupMultitasking(void (*)())+0x9>
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	68 3f 07 00 00       	push   0x73f
c001dfcf:	e8 b8 18 ff ff       	call   c000f88c <malloc>
c001dfd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfdb:	89 c3                	mov    ebx,eax
c001dfdd:	6a 00                	push   0x0
c001dfdf:	68 6f cb 02 c0       	push   0xc002cb6f
c001dfe4:	6a 01                	push   0x1
c001dfe6:	50                   	push   eax
c001dfe7:	e8 94 fc ff ff       	call   c001dc80 <Process::Process(bool, char const*, Process*, char**)>
c001dfec:	83 c4 18             	add    esp,0x18
c001dfef:	89 1d 50 25 03 c0    	mov    DWORD PTR ds:0xc0032550,ebx
c001dff5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dffb:	68 c0 cc 02 c0       	push   0xc002ccc0
c001e000:	e8 ce 48 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e005:	58                   	pop    eax
c001e006:	5a                   	pop    edx
c001e007:	6a 63                	push   0x63
c001e009:	68 f4 cc 02 c0       	push   0xc002ccf4
c001e00e:	e8 c0 48 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e013:	59                   	pop    ecx
c001e014:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e01a:	e8 d7 26 ff ff       	call   c00106f6 <setActiveTerminal(VgaText*)>
c001e01f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e027:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e031:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e037:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e03a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e044:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e04a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e050:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e05a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e064:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e06e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e074:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e07e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e084:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e08e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e094:	58                   	pop    eax
c001e095:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e09b:	5a                   	pop    edx
c001e09c:	68 6b cb 02 c0       	push   0xc002cb6b
c001e0a1:	50                   	push   eax
c001e0a2:	e8 65 27 fe ff       	call   c000080c <strcpy>
c001e0a7:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0ae:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0b2:	83 c4 14             	add    esp,0x14
c001e0b5:	5b                   	pop    ebx
c001e0b6:	5e                   	pop    esi
c001e0b7:	e9 98 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0bc <schedule()>:
c001e0bc:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e0c1:	85 c0                	test   eax,eax
c001e0c3:	74 0b                	je     c001e0d0 <schedule()+0x14>
c001e0c5:	c7 05 20 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x1
c001e0cf:	c3                   	ret    
c001e0d0:	53                   	push   ebx
c001e0d1:	83 ec 14             	sub    esp,0x14
c001e0d4:	68 44 25 03 c0       	push   0xc0032544
c001e0d9:	e8 ac b1 00 00       	call   c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0de:	83 c4 10             	add    esp,0x10
c001e0e1:	84 c0                	test   al,al
c001e0e3:	75 38                	jne    c001e11d <schedule()+0x61>
c001e0e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0ed:	4a                   	dec    edx
c001e0ee:	74 32                	je     c001e122 <schedule()+0x66>
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	68 44 25 03 c0       	push   0xc0032544
c001e0f8:	e8 a9 b1 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0fd:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e104:	89 c3                	mov    ebx,eax
c001e106:	e8 a3 b1 00 00       	call   c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e10b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e112:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e115:	e8 7e f8 ff ff       	call   c001d998 <switchToThread(ThreadControlBlock*)>
c001e11a:	83 c4 10             	add    esp,0x10
c001e11d:	83 c4 08             	add    esp,0x8
c001e120:	5b                   	pop    ebx
c001e121:	c3                   	ret    
c001e122:	83 ec 08             	sub    esp,0x8
c001e125:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e12c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e132:	68 44 25 03 c0       	push   0xc0032544
c001e137:	e8 20 b2 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e13c:	83 c4 10             	add    esp,0x10
c001e13f:	eb af                	jmp    c001e0f0 <schedule()+0x34>
c001e141:	90                   	nop

c001e142 <Semaphore::tryAcquire()>:
c001e142:	53                   	push   ebx
c001e143:	83 ec 08             	sub    esp,0x8
c001e146:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e14a:	fa                   	cli    
c001e14b:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e150:	8d 50 01             	lea    edx,[eax+0x1]
c001e153:	89 15 28 25 03 c0    	mov    DWORD PTR ds:0xc0032528,edx
c001e159:	8b 15 24 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032524
c001e15f:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e162:	89 1d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ebx
c001e168:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e16b:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e16d:	7c 2a                	jl     c001e199 <Semaphore::tryAcquire()+0x57>
c001e16f:	89 15 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,edx
c001e175:	85 d2                	test   edx,edx
c001e177:	75 0a                	jne    c001e183 <Semaphore::tryAcquire()+0x41>
c001e179:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c001e17f:	85 d2                	test   edx,edx
c001e181:	75 5b                	jne    c001e1de <Semaphore::tryAcquire()+0x9c>
c001e183:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e188:	85 c0                	test   eax,eax
c001e18a:	74 07                	je     c001e193 <Semaphore::tryAcquire()+0x51>
c001e18c:	31 c0                	xor    eax,eax
c001e18e:	83 c4 08             	add    esp,0x8
c001e191:	5b                   	pop    ebx
c001e192:	c3                   	ret    
c001e193:	fb                   	sti    
c001e194:	83 c4 08             	add    esp,0x8
c001e197:	5b                   	pop    ebx
c001e198:	c3                   	ret    
c001e199:	43                   	inc    ebx
c001e19a:	89 15 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,edx
c001e1a0:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e1a3:	85 d2                	test   edx,edx
c001e1a5:	75 1f                	jne    c001e1c6 <Semaphore::tryAcquire()+0x84>
c001e1a7:	8b 0d 20 25 03 c0    	mov    ecx,DWORD PTR ds:0xc0032520
c001e1ad:	85 c9                	test   ecx,ecx
c001e1af:	74 15                	je     c001e1c6 <Semaphore::tryAcquire()+0x84>
c001e1b1:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e1bb:	e8 fc fe ff ff       	call   c001e0bc <schedule()>
c001e1c0:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e1c5:	48                   	dec    eax
c001e1c6:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e1cb:	85 c0                	test   eax,eax
c001e1cd:	75 08                	jne    c001e1d7 <Semaphore::tryAcquire()+0x95>
c001e1cf:	fb                   	sti    
c001e1d0:	b0 01                	mov    al,0x1
c001e1d2:	83 c4 08             	add    esp,0x8
c001e1d5:	5b                   	pop    ebx
c001e1d6:	c3                   	ret    
c001e1d7:	b0 01                	mov    al,0x1
c001e1d9:	83 c4 08             	add    esp,0x8
c001e1dc:	5b                   	pop    ebx
c001e1dd:	c3                   	ret    
c001e1de:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e1e8:	e8 cf fe ff ff       	call   c001e0bc <schedule()>
c001e1ed:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e1f2:	48                   	dec    eax
c001e1f3:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e1f8:	85 c0                	test   eax,eax
c001e1fa:	75 90                	jne    c001e18c <Semaphore::tryAcquire()+0x4a>
c001e1fc:	eb 95                	jmp    c001e193 <Semaphore::tryAcquire()+0x51>

c001e1fe <Semaphore::assertLocked(char const*)>:
c001e1fe:	83 ec 0c             	sub    esp,0xc
c001e201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e205:	fa                   	cli    
c001e206:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e20c:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e211:	8d 48 01             	lea    ecx,[eax+0x1]
c001e214:	89 0d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ecx
c001e21a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e21c:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e21f:	7c 24                	jl     c001e245 <Semaphore::assertLocked(char const*)+0x47>
c001e221:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e226:	85 c0                	test   eax,eax
c001e228:	75 09                	jne    c001e233 <Semaphore::assertLocked(char const*)+0x35>
c001e22a:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e22f:	85 c0                	test   eax,eax
c001e231:	75 29                	jne    c001e25c <Semaphore::assertLocked(char const*)+0x5e>
c001e233:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e238:	48                   	dec    eax
c001e239:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e23e:	75 01                	jne    c001e241 <Semaphore::assertLocked(char const*)+0x43>
c001e240:	fb                   	sti    
c001e241:	83 c4 0c             	add    esp,0xc
c001e244:	c3                   	ret    
c001e245:	83 ec 0c             	sub    esp,0xc
c001e248:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e24c:	e8 b8 c0 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001e251:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e256:	83 c4 10             	add    esp,0x10
c001e259:	48                   	dec    eax
c001e25a:	eb c5                	jmp    c001e221 <Semaphore::assertLocked(char const*)+0x23>
c001e25c:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e266:	e8 51 fe ff ff       	call   c001e0bc <schedule()>
c001e26b:	eb c6                	jmp    c001e233 <Semaphore::assertLocked(char const*)+0x35>

c001e26d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e26d:	83 ec 14             	sub    esp,0x14
c001e270:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c001e276:	68 18 cd 02 c0       	push   0xc002cd18
c001e27b:	e8 53 46 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e285:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e289:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e28c:	e8 2b fe ff ff       	call   c001e0bc <schedule()>
c001e291:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e296:	83 c4 10             	add    esp,0x10
c001e299:	48                   	dec    eax
c001e29a:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e29f:	85 c0                	test   eax,eax
c001e2a1:	75 06                	jne    c001e2a9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e2a3:	fb                   	sti    
c001e2a4:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e2a9:	83 ec 08             	sub    esp,0x8
c001e2ac:	50                   	push   eax
c001e2ad:	68 4c cd 02 c0       	push   0xc002cd4c
c001e2b2:	e8 1c 46 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e2b7:	83 c4 1c             	add    esp,0x1c
c001e2ba:	c3                   	ret    

c001e2bb <blockTask(TaskState)>:
c001e2bb:	83 ec 0c             	sub    esp,0xc
c001e2be:	fa                   	cli    
c001e2bf:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e2c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2d1:	e8 e6 fd ff ff       	call   c001e0bc <schedule()>
c001e2d6:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e2db:	48                   	dec    eax
c001e2dc:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e2e1:	75 01                	jne    c001e2e4 <blockTask(TaskState)+0x29>
c001e2e3:	fb                   	sti    
c001e2e4:	83 c4 0c             	add    esp,0xc
c001e2e7:	c3                   	ret    

c001e2e8 <waitTask(int, int*, int)>:
c001e2e8:	83 ec 18             	sub    esp,0x18
c001e2eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2f4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e300:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e303:	6a 07                	push   0x7
c001e305:	e8 b1 ff ff ff       	call   c001e2bb <blockTask(TaskState)>
c001e30a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e30f:	83 c4 10             	add    esp,0x10
c001e312:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e315:	85 d2                	test   edx,edx
c001e317:	74 0a                	je     c001e323 <waitTask(int, int*, int)+0x3b>
c001e319:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e31c:	89 02                	mov    DWORD PTR [edx],eax
c001e31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e323:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e326:	83 c4 0c             	add    esp,0xc
c001e329:	c3                   	ret    

c001e32a <nanoSleepUntil(unsigned long long)>:
c001e32a:	83 ec 0c             	sub    esp,0xc
c001e32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e331:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e335:	3b 05 70 f6 02 c0    	cmp    eax,DWORD PTR ds:0xc002f670
c001e33b:	89 d1                	mov    ecx,edx
c001e33d:	1b 0d 74 f6 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f674
c001e343:	73 04                	jae    c001e349 <nanoSleepUntil(unsigned long long)+0x1f>
c001e345:	83 c4 0c             	add    esp,0xc
c001e348:	c3                   	ret    
c001e349:	fa                   	cli    
c001e34a:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e350:	83 ec 08             	sub    esp,0x8
c001e353:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001e359:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e35f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e362:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e365:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e36b:	68 38 25 03 c0       	push   0xc0032538
c001e370:	e8 e7 af 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e375:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e37c:	e8 3a ff ff ff       	call   c001e2bb <blockTask(TaskState)>
c001e381:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e386:	83 c4 10             	add    esp,0x10
c001e389:	48                   	dec    eax
c001e38a:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e38f:	85 c0                	test   eax,eax
c001e391:	75 09                	jne    c001e39c <nanoSleepUntil(unsigned long long)+0x72>
c001e393:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e398:	85 c0                	test   eax,eax
c001e39a:	75 12                	jne    c001e3ae <nanoSleepUntil(unsigned long long)+0x84>
c001e39c:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e3a1:	48                   	dec    eax
c001e3a2:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e3a7:	75 9c                	jne    c001e345 <nanoSleepUntil(unsigned long long)+0x1b>
c001e3a9:	fb                   	sti    
c001e3aa:	83 c4 0c             	add    esp,0xc
c001e3ad:	c3                   	ret    
c001e3ae:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e3b8:	e8 ff fc ff ff       	call   c001e0bc <schedule()>
c001e3bd:	eb dd                	jmp    c001e39c <nanoSleepUntil(unsigned long long)+0x72>

c001e3bf <nanoSleep(unsigned long long)>:
c001e3bf:	a1 70 f6 02 c0       	mov    eax,ds:0xc002f670
c001e3c4:	8b 15 74 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f674
c001e3ca:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3ce:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3d2:	e9 53 ff ff ff       	jmp    c001e32a <nanoSleepUntil(unsigned long long)>

c001e3d7 <sleep(unsigned long long)>:
c001e3d7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3df:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3e4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3e8:	01 ca                	add    edx,ecx
c001e3ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3f2:	eb cb                	jmp    c001e3bf <nanoSleep(unsigned long long)>

c001e3f4 <Semaphore::acquire()>:
c001e3f4:	83 ec 0c             	sub    esp,0xc
c001e3f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3fb:	fa                   	cli    
c001e3fc:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e401:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e407:	8d 48 01             	lea    ecx,[eax+0x1]
c001e40a:	89 0d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ecx
c001e410:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e413:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e415:	7d 28                	jge    c001e43f <Semaphore::acquire()+0x4b>
c001e417:	41                   	inc    ecx
c001e418:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e41b:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e420:	85 c0                	test   eax,eax
c001e422:	75 09                	jne    c001e42d <Semaphore::acquire()+0x39>
c001e424:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e429:	85 c0                	test   eax,eax
c001e42b:	75 4e                	jne    c001e47b <Semaphore::acquire()+0x87>
c001e42d:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e432:	48                   	dec    eax
c001e433:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e438:	75 01                	jne    c001e43b <Semaphore::acquire()+0x47>
c001e43a:	fb                   	sti    
c001e43b:	83 c4 0c             	add    esp,0xc
c001e43e:	c3                   	ret    
c001e43f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e444:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e44b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e44e:	85 c9                	test   ecx,ecx
c001e450:	74 3a                	je     c001e48c <Semaphore::acquire()+0x98>
c001e452:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e455:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e45b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e45e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e463:	83 ec 0c             	sub    esp,0xc
c001e466:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e469:	6a 05                	push   0x5
c001e46b:	e8 4b fe ff ff       	call   c001e2bb <blockTask(TaskState)>
c001e470:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e475:	83 c4 10             	add    esp,0x10
c001e478:	48                   	dec    eax
c001e479:	eb a0                	jmp    c001e41b <Semaphore::acquire()+0x27>
c001e47b:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e485:	e8 32 fc ff ff       	call   c001e0bc <schedule()>
c001e48a:	eb a1                	jmp    c001e42d <Semaphore::acquire()+0x39>
c001e48c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e491:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e494:	eb c8                	jmp    c001e45e <Semaphore::acquire()+0x6a>

c001e496 <taskReturned>:
c001e496:	83 ec 18             	sub    esp,0x18
c001e499:	68 80 cd 02 c0       	push   0xc002cd80
c001e49e:	e8 66 be ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001e4a3:	83 c4 10             	add    esp,0x10
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	6a 02                	push   0x2
c001e4ab:	e8 0b fe ff ff       	call   c001e2bb <blockTask(TaskState)>
c001e4b0:	fa                   	cli    
c001e4b1:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e4b7:	e8 00 fc ff ff       	call   c001e0bc <schedule()>
c001e4bc:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	48                   	dec    eax
c001e4c5:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e4ca:	85 c0                	test   eax,eax
c001e4cc:	75 d8                	jne    c001e4a6 <taskReturned+0x10>
c001e4ce:	fb                   	sti    
c001e4cf:	eb d5                	jmp    c001e4a6 <taskReturned+0x10>

c001e4d1 <Thr::processFromPID(int)>:
c001e4d1:	57                   	push   edi
c001e4d2:	56                   	push   esi
c001e4d3:	53                   	push   ebx
c001e4d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	68 76 cb 02 c0       	push   0xc002cb76
c001e4e0:	e8 ee 43 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e4e5:	fa                   	cli    
c001e4e6:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e4ec:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e4f3:	e8 ae ad 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4f8:	83 c4 10             	add    esp,0x10
c001e4fb:	89 c7                	mov    edi,eax
c001e4fd:	eb 14                	jmp    c001e513 <Thr::processFromPID(int)+0x42>
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	68 44 25 03 c0       	push   0xc0032544
c001e507:	e8 9a ad 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e50c:	83 c4 10             	add    esp,0x10
c001e50f:	39 f8                	cmp    eax,edi
c001e511:	74 49                	je     c001e55c <Thr::processFromPID(int)+0x8b>
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	68 44 25 03 c0       	push   0xc0032544
c001e51b:	e8 86 ad 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e520:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e527:	89 c3                	mov    ebx,eax
c001e529:	e8 80 ad 00 00       	call   c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e52e:	58                   	pop    eax
c001e52f:	5a                   	pop    edx
c001e530:	53                   	push   ebx
c001e531:	68 44 25 03 c0       	push   0xc0032544
c001e536:	e8 21 ae 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e53b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e53e:	83 c4 10             	add    esp,0x10
c001e541:	39 30                	cmp    DWORD PTR [eax],esi
c001e543:	75 ba                	jne    c001e4ff <Thr::processFromPID(int)+0x2e>
c001e545:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e54a:	48                   	dec    eax
c001e54b:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e550:	74 07                	je     c001e559 <Thr::processFromPID(int)+0x88>
c001e552:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e555:	5b                   	pop    ebx
c001e556:	5e                   	pop    esi
c001e557:	5f                   	pop    edi
c001e558:	c3                   	ret    
c001e559:	fb                   	sti    
c001e55a:	eb f6                	jmp    c001e552 <Thr::processFromPID(int)+0x81>
c001e55c:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e561:	48                   	dec    eax
c001e562:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e567:	75 01                	jne    c001e56a <Thr::processFromPID(int)+0x99>
c001e569:	fb                   	sti    
c001e56a:	83 ec 0c             	sub    esp,0xc
c001e56d:	68 91 cb 02 c0       	push   0xc002cb91
c001e572:	e8 5c 43 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e577:	83 c4 10             	add    esp,0x10
c001e57a:	31 c0                	xor    eax,eax
c001e57c:	5b                   	pop    ebx
c001e57d:	5e                   	pop    esi
c001e57e:	5f                   	pop    edi
c001e57f:	c3                   	ret    

c001e580 <unblockTask(ThreadControlBlock*)>:
c001e580:	53                   	push   ebx
c001e581:	83 ec 08             	sub    esp,0x8
c001e584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e588:	fa                   	cli    
c001e589:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e58f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e592:	85 c0                	test   eax,eax
c001e594:	74 66                	je     c001e5fc <unblockTask(ThreadControlBlock*)+0x7c>
c001e596:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e599:	48                   	dec    eax
c001e59a:	74 31                	je     c001e5cd <unblockTask(ThreadControlBlock*)+0x4d>
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	68 44 25 03 c0       	push   0xc0032544
c001e5a4:	e8 fd ac 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5a9:	83 c4 10             	add    esp,0x10
c001e5ac:	85 c0                	test   eax,eax
c001e5ae:	75 17                	jne    c001e5c7 <unblockTask(ThreadControlBlock*)+0x47>
c001e5b0:	eb 68                	jmp    c001e61a <unblockTask(ThreadControlBlock*)+0x9a>
c001e5b2:	83 ec 08             	sub    esp,0x8
c001e5b5:	50                   	push   eax
c001e5b6:	68 44 25 03 c0       	push   0xc0032544
c001e5bb:	e8 84 b0 00 00       	call   c0029644 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e5c0:	83 c4 10             	add    esp,0x10
c001e5c3:	85 c0                	test   eax,eax
c001e5c5:	74 53                	je     c001e61a <unblockTask(ThreadControlBlock*)+0x9a>
c001e5c7:	39 c3                	cmp    ebx,eax
c001e5c9:	75 e7                	jne    c001e5b2 <unblockTask(ThreadControlBlock*)+0x32>
c001e5cb:	eb 1c                	jmp    c001e5e9 <unblockTask(ThreadControlBlock*)+0x69>
c001e5cd:	83 ec 0c             	sub    esp,0xc
c001e5d0:	68 70 ce 02 c0       	push   0xc002ce70
c001e5d5:	e8 f9 42 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e5da:	c7 04 24 fc cd 02 c0 	mov    DWORD PTR [esp],0xc002cdfc
c001e5e1:	e8 ed 42 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e5e6:	83 c4 10             	add    esp,0x10
c001e5e9:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e5ee:	48                   	dec    eax
c001e5ef:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e5f4:	75 01                	jne    c001e5f7 <unblockTask(ThreadControlBlock*)+0x77>
c001e5f6:	fb                   	sti    
c001e5f7:	83 c4 08             	add    esp,0x8
c001e5fa:	5b                   	pop    ebx
c001e5fb:	c3                   	ret    
c001e5fc:	83 ec 0c             	sub    esp,0xc
c001e5ff:	68 b4 cd 02 c0       	push   0xc002cdb4
c001e604:	e8 ca 42 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e609:	c7 04 24 fc cd 02 c0 	mov    DWORD PTR [esp],0xc002cdfc
c001e610:	e8 be 42 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e615:	83 c4 10             	add    esp,0x10
c001e618:	eb cf                	jmp    c001e5e9 <unblockTask(ThreadControlBlock*)+0x69>
c001e61a:	83 ec 08             	sub    esp,0x8
c001e61d:	53                   	push   ebx
c001e61e:	68 44 25 03 c0       	push   0xc0032544
c001e623:	e8 34 ad 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e628:	83 c4 10             	add    esp,0x10
c001e62b:	eb bc                	jmp    c001e5e9 <unblockTask(ThreadControlBlock*)+0x69>

c001e62d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e62d:	55                   	push   ebp
c001e62e:	57                   	push   edi
c001e62f:	56                   	push   esi
c001e630:	53                   	push   ebx
c001e631:	83 ec 1c             	sub    esp,0x1c
c001e634:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e638:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e641:	85 ff                	test   edi,edi
c001e643:	7e 20                	jle    c001e665 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e645:	31 f6                	xor    esi,esi
c001e647:	83 ec 0c             	sub    esp,0xc
c001e64a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e651:	46                   	inc    esi
c001e652:	e8 45 12 ff ff       	call   c000f89c <free>
c001e657:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e65a:	83 c4 10             	add    esp,0x10
c001e65d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e663:	7f e2                	jg     c001e647 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e665:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e66f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e674:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e677:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e67a:	d3 c0                	rol    eax,cl
c001e67c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e683:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e686:	89 f7                	mov    edi,esi
c001e688:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e690:	0f 85 74 01 00 00    	jne    c001e80a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e696:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e69c:	85 ed                	test   ebp,ebp
c001e69e:	74 1b                	je     c001e6bb <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e6a0:	83 ec 0c             	sub    esp,0xc
c001e6a3:	55                   	push   ebp
c001e6a4:	e8 d5 b9 ff ff       	call   c001a07e <EnvVarContainer::~EnvVarContainer()>
c001e6a9:	59                   	pop    ecx
c001e6aa:	5e                   	pop    esi
c001e6ab:	6a 0c                	push   0xc
c001e6ad:	55                   	push   ebp
c001e6ae:	e8 40 41 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c001e6b3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6b6:	83 c4 10             	add    esp,0x10
c001e6b9:	89 f7                	mov    edi,esi
c001e6bb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6c1:	85 c0                	test   eax,eax
c001e6c3:	0f 84 aa 00 00 00    	je     c001e773 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6c9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e6cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6d0:	31 c9                	xor    ecx,ecx
c001e6d2:	eb 10                	jmp    c001e6e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e6d4:	41                   	inc    ecx
c001e6d5:	83 f9 10             	cmp    ecx,0x10
c001e6d8:	0f 84 95 00 00 00    	je     c001e773 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6de:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6e4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e6eb:	d3 fa                	sar    edx,cl
c001e6ed:	83 e2 01             	and    edx,0x1
c001e6f0:	74 e2                	je     c001e6d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6f2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e6f5:	01 ca                	add    edx,ecx
c001e6f7:	89 d5                	mov    ebp,edx
c001e6f9:	c1 e5 05             	shl    ebp,0x5
c001e6fc:	01 ea                	add    edx,ebp
c001e6fe:	01 d0                	add    eax,edx
c001e700:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e706:	83 fd 07             	cmp    ebp,0x7
c001e709:	75 c9                	jne    c001e6d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e70b:	05 40 02 00 00       	add    eax,0x240
c001e710:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e713:	83 fd ff             	cmp    ebp,0xffffffff
c001e716:	0f 8c 08 01 00 00    	jl     c001e824 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e71c:	0f 84 b9 01 00 00    	je     c001e8db <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e722:	85 ed                	test   ebp,ebp
c001e724:	0f 84 a0 01 00 00    	je     c001e8ca <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e72a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e72c:	75 a6                	jne    c001e6d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e72e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e734:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e738:	01 d0                	add    eax,edx
c001e73a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e747:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e74a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e750:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e757:	50                   	push   eax
c001e758:	e8 23 fe ff ff       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c001e75d:	83 c4 10             	add    esp,0x10
c001e760:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e763:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e767:	89 f7                	mov    edi,esi
c001e769:	41                   	inc    ecx
c001e76a:	83 f9 10             	cmp    ecx,0x10
c001e76d:	0f 85 6b ff ff ff    	jne    c001e6de <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e773:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e779:	85 c0                	test   eax,eax
c001e77b:	74 5d                	je     c001e7da <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e77d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e783:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e789:	74 4f                	je     c001e7da <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	68 44 25 03 c0       	push   0xc0032544
c001e793:	e8 0e ab 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e798:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e79f:	89 c7                	mov    edi,eax
c001e7a1:	e8 e4 aa 00 00       	call   c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7a6:	83 c4 10             	add    esp,0x10
c001e7a9:	84 c0                	test   al,al
c001e7ab:	0f 84 e4 00 00 00    	je     c001e895 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e7b1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7b4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e7ba:	85 d2                	test   edx,edx
c001e7bc:	74 0f                	je     c001e7cd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e7be:	83 ec 0c             	sub    esp,0xc
c001e7c1:	8b 02                	mov    eax,DWORD PTR [edx]
c001e7c3:	52                   	push   edx
c001e7c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e7c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7ca:	83 c4 10             	add    esp,0x10
c001e7cd:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e7d7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e7da:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e7e0:	85 db                	test   ebx,ebx
c001e7e2:	74 16                	je     c001e7fa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e7e4:	83 ec 0c             	sub    esp,0xc
c001e7e7:	53                   	push   ebx
c001e7e8:	e8 9b 33 ff ff       	call   c0011b88 <VAS::~VAS()>
c001e7ed:	58                   	pop    eax
c001e7ee:	5a                   	pop    edx
c001e7ef:	6a 14                	push   0x14
c001e7f1:	53                   	push   ebx
c001e7f2:	e8 fc 3f ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c001e7f7:	83 c4 10             	add    esp,0x10
c001e7fa:	83 ec 0c             	sub    esp,0xc
c001e7fd:	68 a8 cb 02 c0       	push   0xc002cba8
c001e802:	e8 cc 40 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e807:	83 c4 10             	add    esp,0x10
c001e80a:	83 ec 08             	sub    esp,0x8
c001e80d:	68 3f 07 00 00       	push   0x73f
c001e812:	68 b6 cb 02 c0       	push   0xc002cbb6
c001e817:	e8 b7 40 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e81c:	83 c4 2c             	add    esp,0x2c
c001e81f:	5b                   	pop    ebx
c001e820:	5e                   	pop    esi
c001e821:	5f                   	pop    edi
c001e822:	5d                   	pop    ebp
c001e823:	c3                   	ret    
c001e824:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	68 b4 ce 02 c0       	push   0xc002ceb4
c001e830:	e8 d4 ba ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001e835:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e838:	83 c4 10             	add    esp,0x10
c001e83b:	89 f7                	mov    edi,esi
c001e83d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e841:	e9 8e fe ff ff       	jmp    c001e6d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e846:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e84c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e852:	75 1c                	jne    c001e870 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e854:	83 ec 0c             	sub    esp,0xc
c001e857:	68 1c cf 02 c0       	push   0xc002cf1c
c001e85c:	e8 72 40 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e861:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e868:	e8 4e fa ff ff       	call   c001e2bb <blockTask(TaskState)>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	83 ec 08             	sub    esp,0x8
c001e873:	56                   	push   esi
c001e874:	68 44 25 03 c0       	push   0xc0032544
c001e879:	e8 de aa 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e87e:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e885:	e8 1c aa 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e88a:	83 c4 10             	add    esp,0x10
c001e88d:	39 f8                	cmp    eax,edi
c001e88f:	0f 84 1c ff ff ff    	je     c001e7b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e895:	83 ec 0c             	sub    esp,0xc
c001e898:	68 44 25 03 c0       	push   0xc0032544
c001e89d:	e8 04 aa 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8a2:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e8a9:	89 c6                	mov    esi,eax
c001e8ab:	e8 fe a9 00 00       	call   c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8b0:	83 c4 10             	add    esp,0x10
c001e8b3:	39 f3                	cmp    ebx,esi
c001e8b5:	74 b9                	je     c001e870 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8b7:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e8ba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8bd:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e8c3:	75 ab                	jne    c001e870 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8c5:	e9 7c ff ff ff       	jmp    c001e846 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e8ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8ce:	83 ec 0c             	sub    esp,0xc
c001e8d1:	68 e8 ce 02 c0       	push   0xc002cee8
c001e8d6:	e9 55 ff ff ff       	jmp    c001e830 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e8db:	8b 36                	mov    esi,DWORD PTR [esi]
c001e8dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8e1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e8e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8e7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e8ed:	01 d7                	add    edi,edx
c001e8ef:	89 f8                	mov    eax,edi
c001e8f1:	e9 44 fe ff ff       	jmp    c001e73a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e8f6 <cleanerTaskFunction(void*)>:
c001e8f6:	53                   	push   ebx
c001e8f7:	83 ec 08             	sub    esp,0x8
c001e8fa:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e8ff:	48                   	dec    eax
c001e900:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e905:	75 01                	jne    c001e908 <cleanerTaskFunction(void*)+0x12>
c001e907:	fb                   	sti    
c001e908:	fa                   	cli    
c001e909:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e90e:	80 3d 0c 25 03 c0 00 	cmp    BYTE PTR ds:0xc003250c,0x0
c001e915:	8d 50 01             	lea    edx,[eax+0x1]
c001e918:	89 15 28 25 03 c0    	mov    DWORD PTR ds:0xc0032528,edx
c001e91e:	0f 84 b9 00 00 00    	je     c001e9dd <cleanerTaskFunction(void*)+0xe7>
c001e924:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e929:	85 c0                	test   eax,eax
c001e92b:	75 01                	jne    c001e92e <cleanerTaskFunction(void*)+0x38>
c001e92d:	fb                   	sti    
c001e92e:	c6 05 0c 25 03 c0 00 	mov    BYTE PTR ds:0xc003250c,0x0
c001e935:	fa                   	cli    
c001e936:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e93c:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001e942:	fa                   	cli    
c001e943:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e949:	eb 3e                	jmp    c001e989 <cleanerTaskFunction(void*)+0x93>
c001e94b:	83 ec 0c             	sub    esp,0xc
c001e94e:	68 2c 25 03 c0       	push   0xc003252c
c001e953:	e8 4e a9 00 00       	call   c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e958:	c7 04 24 2c 25 03 c0 	mov    DWORD PTR [esp],0xc003252c
c001e95f:	89 c3                	mov    ebx,eax
c001e961:	e8 48 a9 00 00       	call   c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e966:	c7 04 24 cc cb 02 c0 	mov    DWORD PTR [esp],0xc002cbcc
c001e96d:	e8 61 3f ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e972:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e975:	e8 b3 fc ff ff       	call   c001e62d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e97a:	c7 04 24 e5 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe5
c001e981:	e8 4d 3f ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001e986:	83 c4 10             	add    esp,0x10
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	68 2c 25 03 c0       	push   0xc003252c
c001e991:	e8 f4 a8 00 00       	call   c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e996:	83 c4 10             	add    esp,0x10
c001e999:	84 c0                	test   al,al
c001e99b:	74 ae                	je     c001e94b <cleanerTaskFunction(void*)+0x55>
c001e99d:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e9a2:	48                   	dec    eax
c001e9a3:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e9a8:	75 01                	jne    c001e9ab <cleanerTaskFunction(void*)+0xb5>
c001e9aa:	fb                   	sti    
c001e9ab:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e9b0:	48                   	dec    eax
c001e9b1:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e9b6:	0f 85 3e ff ff ff    	jne    c001e8fa <cleanerTaskFunction(void*)+0x4>
c001e9bc:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e9c1:	85 c0                	test   eax,eax
c001e9c3:	0f 84 31 ff ff ff    	je     c001e8fa <cleanerTaskFunction(void*)+0x4>
c001e9c9:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e9d3:	e8 e4 f6 ff ff       	call   c001e0bc <schedule()>
c001e9d8:	e9 1d ff ff ff       	jmp    c001e8fa <cleanerTaskFunction(void*)+0x4>
c001e9dd:	83 ec 0c             	sub    esp,0xc
c001e9e0:	6a 02                	push   0x2
c001e9e2:	e8 86 f8 ff ff       	call   c001e26d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9e7:	83 c4 10             	add    esp,0x10
c001e9ea:	e9 3f ff ff ff       	jmp    c001e92e <cleanerTaskFunction(void*)+0x38>

c001e9ef <terminateTask(int)>:
c001e9ef:	83 ec 14             	sub    esp,0x14
c001e9f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e9fa:	83 c0 0c             	add    eax,0xc
c001e9fd:	50                   	push   eax
c001e9fe:	68 44 cf 02 c0       	push   0xc002cf44
c001ea03:	e8 cb 3e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001ea08:	fa                   	cli    
c001ea09:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ea0f:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001ea15:	fa                   	cli    
c001ea16:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ea1c:	c7 04 24 f8 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbf8
c001ea23:	e8 ab 3e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001ea28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ea2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea31:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ea34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea39:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea3c:	5a                   	pop    edx
c001ea3d:	59                   	pop    ecx
c001ea3e:	50                   	push   eax
c001ea3f:	68 2c 25 03 c0       	push   0xc003252c
c001ea44:	e8 13 a9 00 00       	call   c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea4e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ea55:	c7 04 24 12 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc12
c001ea5c:	e8 72 3e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001ea61:	83 c4 10             	add    esp,0x10
c001ea64:	a1 08 25 03 c0       	mov    eax,ds:0xc0032508
c001ea69:	85 c0                	test   eax,eax
c001ea6b:	0f 84 8d 00 00 00    	je     c001eafe <terminateTask(int)+0x10f>
c001ea71:	83 ec 0c             	sub    esp,0xc
c001ea74:	68 2c cc 02 c0       	push   0xc002cc2c
c001ea79:	e8 55 3e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001ea7e:	58                   	pop    eax
c001ea7f:	c6 05 0c 25 03 c0 01 	mov    BYTE PTR ds:0xc003250c,0x1
c001ea86:	ff 35 08 25 03 c0    	push   DWORD PTR ds:0xc0032508
c001ea8c:	e8 ef fa ff ff       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c001ea91:	c7 04 24 46 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc46
c001ea98:	e8 36 3e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001ea9d:	83 c4 10             	add    esp,0x10
c001eaa0:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eaa5:	48                   	dec    eax
c001eaa6:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eaab:	75 01                	jne    c001eaae <terminateTask(int)+0xbf>
c001eaad:	fb                   	sti    
c001eaae:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001eab3:	48                   	dec    eax
c001eab4:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001eab9:	75 09                	jne    c001eac4 <terminateTask(int)+0xd5>
c001eabb:	83 3d 20 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032520,0x0
c001eac2:	75 4c                	jne    c001eb10 <terminateTask(int)+0x121>
c001eac4:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eac9:	48                   	dec    eax
c001eaca:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eacf:	75 01                	jne    c001ead2 <terminateTask(int)+0xe3>
c001ead1:	fb                   	sti    
c001ead2:	83 ec 0c             	sub    esp,0xc
c001ead5:	68 7e cc 02 c0       	push   0xc002cc7e
c001eada:	e8 f4 3d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001eadf:	83 c4 10             	add    esp,0x10
c001eae2:	fa                   	cli    
c001eae3:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001eae9:	e8 ce f5 ff ff       	call   c001e0bc <schedule()>
c001eaee:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eaf3:	48                   	dec    eax
c001eaf4:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eaf9:	75 e7                	jne    c001eae2 <terminateTask(int)+0xf3>
c001eafb:	fb                   	sti    
c001eafc:	eb e4                	jmp    c001eae2 <terminateTask(int)+0xf3>
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	68 60 cc 02 c0       	push   0xc002cc60
c001eb06:	e8 c8 3d ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001eb0b:	83 c4 10             	add    esp,0x10
c001eb0e:	eb 90                	jmp    c001eaa0 <terminateTask(int)+0xb1>
c001eb10:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001eb1a:	e8 9d f5 ff ff       	call   c001e0bc <schedule()>
c001eb1f:	eb a3                	jmp    c001eac4 <terminateTask(int)+0xd5>

c001eb21 <Thr::terminateFromIRQ(int)>:
c001eb21:	83 ec 18             	sub    esp,0x18
c001eb24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb28:	e8 c2 fe ff ff       	call   c001e9ef <terminateTask(int)>
c001eb2d:	90                   	nop

c001eb2e <Semaphore::release()>:
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb35:	fa                   	cli    
c001eb36:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001eb3b:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001eb41:	8d 48 01             	lea    ecx,[eax+0x1]
c001eb44:	89 0d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ecx
c001eb4a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eb4d:	85 c9                	test   ecx,ecx
c001eb4f:	74 3c                	je     c001eb8d <Semaphore::release()+0x5f>
c001eb51:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eb54:	83 ec 0c             	sub    esp,0xc
c001eb57:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb5a:	51                   	push   ecx
c001eb5b:	e8 20 fa ff ff       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c001eb60:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001eb65:	83 c4 10             	add    esp,0x10
c001eb68:	48                   	dec    eax
c001eb69:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001eb6e:	85 c0                	test   eax,eax
c001eb70:	75 09                	jne    c001eb7b <Semaphore::release()+0x4d>
c001eb72:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001eb77:	85 c0                	test   eax,eax
c001eb79:	75 17                	jne    c001eb92 <Semaphore::release()+0x64>
c001eb7b:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eb80:	48                   	dec    eax
c001eb81:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eb86:	75 01                	jne    c001eb89 <Semaphore::release()+0x5b>
c001eb88:	fb                   	sti    
c001eb89:	83 c4 0c             	add    esp,0xc
c001eb8c:	c3                   	ret    
c001eb8d:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001eb90:	eb d7                	jmp    c001eb69 <Semaphore::release()+0x3b>
c001eb92:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001eb9c:	e8 1b f5 ff ff       	call   c001e0bc <schedule()>
c001eba1:	eb d8                	jmp    c001eb7b <Semaphore::release()+0x4d>

c001eba3 <__static_initialization_and_destruction_0(int, int)>:
c001eba3:	83 ec 0c             	sub    esp,0xc
c001eba6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ebab:	0f 85 88 00 00 00    	jne    c001ec39 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebb1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ebb9:	75 7e                	jne    c001ec39 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebbb:	83 ec 0c             	sub    esp,0xc
c001ebbe:	68 44 25 03 c0       	push   0xc0032544
c001ebc3:	e8 24 aa 00 00       	call   c00295ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebc8:	83 c4 10             	add    esp,0x10
c001ebcb:	83 ec 04             	sub    esp,0x4
c001ebce:	68 bc dd 02 c0       	push   0xc002ddbc
c001ebd3:	68 44 25 03 c0       	push   0xc0032544
c001ebd8:	68 a0 95 02 c0       	push   0xc00295a0
c001ebdd:	e8 8b 3b ff ff       	call   c001276d <__cxa_atexit>
c001ebe2:	83 c4 10             	add    esp,0x10
c001ebe5:	83 ec 0c             	sub    esp,0xc
c001ebe8:	68 38 25 03 c0       	push   0xc0032538
c001ebed:	e8 fa a9 00 00       	call   c00295ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebf2:	83 c4 10             	add    esp,0x10
c001ebf5:	83 ec 04             	sub    esp,0x4
c001ebf8:	68 bc dd 02 c0       	push   0xc002ddbc
c001ebfd:	68 38 25 03 c0       	push   0xc0032538
c001ec02:	68 a0 95 02 c0       	push   0xc00295a0
c001ec07:	e8 61 3b ff ff       	call   c001276d <__cxa_atexit>
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	68 2c 25 03 c0       	push   0xc003252c
c001ec17:	e8 d0 a9 00 00       	call   c00295ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	83 ec 04             	sub    esp,0x4
c001ec22:	68 bc dd 02 c0       	push   0xc002ddbc
c001ec27:	68 2c 25 03 c0       	push   0xc003252c
c001ec2c:	68 a0 95 02 c0       	push   0xc00295a0
c001ec31:	e8 37 3b ff ff       	call   c001276d <__cxa_atexit>
c001ec36:	83 c4 10             	add    esp,0x10
c001ec39:	90                   	nop
c001ec3a:	83 c4 0c             	add    esp,0xc
c001ec3d:	c3                   	ret    

c001ec3e <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ec3e:	83 ec 0c             	sub    esp,0xc
c001ec41:	83 ec 08             	sub    esp,0x8
c001ec44:	68 ff ff 00 00       	push   0xffff
c001ec49:	6a 01                	push   0x1
c001ec4b:	e8 53 ff ff ff       	call   c001eba3 <__static_initialization_and_destruction_0(int, int)>
c001ec50:	83 c4 10             	add    esp,0x10
c001ec53:	83 c4 0c             	add    esp,0xc
c001ec56:	c3                   	ret    

c001ec57 <Vm::inbv(unsigned short)>:
c001ec57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec5b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec60:	75 06                	jne    c001ec68 <Vm::inbv(unsigned short)+0x11>
c001ec62:	a0 8c 25 03 c0       	mov    al,ds:0xc003258c
c001ec67:	c3                   	ret    
c001ec68:	ec                   	in     al,dx
c001ec69:	c3                   	ret    

c001ec6a <Vm::outbv(unsigned short, unsigned char)>:
c001ec6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec72:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec77:	75 25                	jne    c001ec9e <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ec79:	8b 0d 8c 25 03 c0    	mov    ecx,DWORD PTR ds:0xc003258c
c001ec7f:	8d 51 01             	lea    edx,[ecx+0x1]
c001ec82:	88 81 a0 25 03 c0    	mov    BYTE PTR [ecx-0x3ffcda60],al
c001ec88:	89 15 8c 25 03 c0    	mov    DWORD PTR ds:0xc003258c,edx
c001ec8e:	83 fa 20             	cmp    edx,0x20
c001ec91:	75 0c                	jne    c001ec9f <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ec93:	c7 05 8c 25 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003258c,0x1f
c001ec9d:	c3                   	ret    
c001ec9e:	ee                   	out    dx,al
c001ec9f:	c3                   	ret    

c001eca0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eca0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eca5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecaa:	c1 e0 04             	shl    eax,0x4
c001ecad:	01 d0                	add    eax,edx
c001ecaf:	c3                   	ret    

c001ecb0 <Vm::getSegment(unsigned int)>:
c001ecb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb4:	c1 e8 10             	shr    eax,0x10
c001ecb7:	c3                   	ret    

c001ecb8 <Vm::getOffset(unsigned int)>:
c001ecb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecbc:	c3                   	ret    

c001ecbd <Vm::mainloop2()>:
c001ecbd:	83 ec 18             	sub    esp,0x18
c001ecc0:	fa                   	cli    
c001ecc1:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ecc7:	6a 02                	push   0x2
c001ecc9:	c6 05 85 25 03 c0 01 	mov    BYTE PTR ds:0xc0032585,0x1
c001ecd0:	e8 98 f5 ff ff       	call   c001e26d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ecd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecda:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ecde:	52                   	push   edx
c001ecdf:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ece3:	52                   	push   edx
c001ece4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ece8:	52                   	push   edx
c001ece9:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eced:	50                   	push   eax
c001ecee:	e8 07 16 fe ff       	call   c00002fa <goToVM86>
c001ecf3:	83 c4 2c             	add    esp,0x2c
c001ecf6:	c3                   	ret    

c001ecf7 <Vm::mainVm8086Loop(void*)>:
c001ecf7:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ecfc:	48                   	dec    eax
c001ecfd:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ed02:	75 01                	jne    c001ed05 <Vm::mainVm8086Loop(void*)+0xe>
c001ed04:	fb                   	sti    
c001ed05:	eb b6                	jmp    c001ecbd <Vm::mainloop2()>

c001ed07 <Vm::mainloop3(unsigned long)>:
c001ed07:	83 ec 18             	sub    esp,0x18
c001ed0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed0e:	fa                   	cli    
c001ed0f:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ed15:	6a 02                	push   0x2
c001ed17:	c6 05 84 25 03 c0 01 	mov    BYTE PTR ds:0xc0032584,0x1
c001ed1e:	a3 80 25 03 c0       	mov    ds:0xc0032580,eax
c001ed23:	e8 45 f5 ff ff       	call   c001e26d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed28:	83 c4 1c             	add    esp,0x1c
c001ed2b:	eb 90                	jmp    c001ecbd <Vm::mainloop2()>

c001ed2d <Vm::initialise8086()>:
c001ed2d:	83 ec 0c             	sub    esp,0xc
c001ed30:	68 80 00 00 00       	push   0x80
c001ed35:	6a 00                	push   0x0
c001ed37:	68 f7 ec 01 c0       	push   0xc001ecf7
c001ed3c:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001ed42:	e8 31 f1 ff ff       	call   c001de78 <Process::createThread(void (*)(void*), void*, int)>
c001ed47:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ed4e:	a3 88 25 03 c0       	mov    ds:0xc0032588,eax
c001ed53:	68 00 01 00 00       	push   0x100
c001ed58:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001ed5d:	6a 00                	push   0x0
c001ed5f:	6a 00                	push   0x0
c001ed61:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed67:	e8 8e 32 ff ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed6c:	83 c4 2c             	add    esp,0x2c
c001ed6f:	c3                   	ret    

c001ed70 <Vm::finish8086()>:
c001ed70:	53                   	push   ebx
c001ed71:	83 ec 08             	sub    esp,0x8
c001ed74:	fa                   	cli    
c001ed75:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ed7b:	80 3d 84 25 03 c0 00 	cmp    BYTE PTR ds:0xc0032584,0x0
c001ed82:	75 15                	jne    c001ed99 <Vm::finish8086()+0x29>
c001ed84:	e8 33 f3 ff ff       	call   c001e0bc <schedule()>
c001ed89:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ed8e:	48                   	dec    eax
c001ed8f:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ed94:	75 de                	jne    c001ed74 <Vm::finish8086()+0x4>
c001ed96:	fb                   	sti    
c001ed97:	eb db                	jmp    c001ed74 <Vm::finish8086()+0x4>
c001ed99:	83 ec 0c             	sub    esp,0xc
c001ed9c:	8b 1d 80 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032580
c001eda2:	ff 35 88 25 03 c0    	push   DWORD PTR ds:0xc0032588
c001eda8:	c6 05 84 25 03 c0 00 	mov    BYTE PTR ds:0xc0032584,0x0
c001edaf:	e8 cc f7 ff ff       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c001edb4:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001edb9:	83 c4 10             	add    esp,0x10
c001edbc:	8d 50 ff             	lea    edx,[eax-0x1]
c001edbf:	89 15 28 25 03 c0    	mov    DWORD PTR ds:0xc0032528,edx
c001edc5:	85 d2                	test   edx,edx
c001edc7:	75 01                	jne    c001edca <Vm::finish8086()+0x5a>
c001edc9:	fb                   	sti    
c001edca:	89 d8                	mov    eax,ebx
c001edcc:	83 c4 08             	add    esp,0x8
c001edcf:	5b                   	pop    ebx
c001edd0:	c3                   	ret    

c001edd1 <Vm::getOutput8086(unsigned char*)>:
c001edd1:	57                   	push   edi
c001edd2:	8b 0d 8c 25 03 c0    	mov    ecx,DWORD PTR ds:0xc003258c
c001edd8:	56                   	push   esi
c001edd9:	be a0 25 03 c0       	mov    esi,0xc00325a0
c001edde:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ede2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ede4:	a1 8c 25 03 c0       	mov    eax,ds:0xc003258c
c001ede9:	5e                   	pop    esi
c001edea:	c7 05 8c 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003258c,0x0
c001edf4:	5f                   	pop    edi
c001edf5:	c3                   	ret    

c001edf6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001edf6:	55                   	push   ebp
c001edf7:	57                   	push   edi
c001edf8:	56                   	push   esi
c001edf9:	53                   	push   ebx
c001edfa:	83 ec 2c             	sub    esp,0x2c
c001edfd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ee01:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ee05:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ee09:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ee0d:	fa                   	cli    
c001ee0e:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ee14:	0f b6 35 85 25 03 c0 	movzx  esi,BYTE PTR ds:0xc0032585
c001ee1b:	89 f0                	mov    eax,esi
c001ee1d:	84 c0                	test   al,al
c001ee1f:	75 1d                	jne    c001ee3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ee21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee25:	e8 92 f2 ff ff       	call   c001e0bc <schedule()>
c001ee2a:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ee2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee33:	48                   	dec    eax
c001ee34:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ee39:	75 d2                	jne    c001ee0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee3b:	fb                   	sti    
c001ee3c:	eb cf                	jmp    c001ee0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee3e:	a1 88 25 03 c0       	mov    eax,ds:0xc0032588
c001ee43:	c7 05 8c 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003258c,0x0
c001ee4d:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ee51:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ee55:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ee59:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ee5d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ee61:	50                   	push   eax
c001ee62:	6a 20                	push   0x20
c001ee64:	6a 00                	push   0x0
c001ee66:	68 a0 25 03 c0       	push   0xc00325a0
c001ee6b:	e8 e0 18 fe ff       	call   c0000750 <memset>
c001ee70:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ee77:	e8 10 0a ff ff       	call   c000f88c <malloc>
c001ee7c:	83 c4 0c             	add    esp,0xc
c001ee7f:	89 c3                	mov    ebx,eax
c001ee81:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001ee87:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ee8b:	50                   	push   eax
c001ee8c:	e8 a1 3f ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c001ee91:	83 c4 10             	add    esp,0x10
c001ee94:	85 db                	test   ebx,ebx
c001ee96:	75 0a                	jne    c001eea2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ee98:	83 ec 0c             	sub    esp,0xc
c001ee9b:	68 63 cf 02 c0       	push   0xc002cf63
c001eea0:	eb 3e                	jmp    c001eee0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eea2:	50                   	push   eax
c001eea3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eea7:	50                   	push   eax
c001eea8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eeac:	50                   	push   eax
c001eead:	53                   	push   ebx
c001eeae:	e8 8f 42 ff ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c001eeb3:	83 c4 10             	add    esp,0x10
c001eeb6:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eebb:	74 0a                	je     c001eec7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	68 77 cf 02 c0       	push   0xc002cf77
c001eec5:	eb 19                	jmp    c001eee0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eec7:	51                   	push   ecx
c001eec8:	51                   	push   ecx
c001eec9:	6a 01                	push   0x1
c001eecb:	53                   	push   ebx
c001eecc:	e8 c5 3f ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c001eed1:	83 c4 10             	add    esp,0x10
c001eed4:	85 c0                	test   eax,eax
c001eed6:	74 24                	je     c001eefc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eed8:	83 ec 0c             	sub    esp,0xc
c001eedb:	68 90 cf 02 c0       	push   0xc002cf90
c001eee0:	e8 24 b4 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001eee5:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eeea:	83 c4 10             	add    esp,0x10
c001eeed:	48                   	dec    eax
c001eeee:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eef3:	85 c0                	test   eax,eax
c001eef5:	75 01                	jne    c001eef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eef7:	fb                   	sti    
c001eef8:	31 f6                	xor    esi,esi
c001eefa:	eb 58                	jmp    c001ef54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eefc:	0f b7 ed             	movzx  ebp,bp
c001eeff:	50                   	push   eax
c001ef00:	0f b7 ff             	movzx  edi,di
c001ef03:	50                   	push   eax
c001ef04:	55                   	push   ebp
c001ef05:	57                   	push   edi
c001ef06:	e8 95 fd ff ff       	call   c001eca0 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef0b:	5a                   	pop    edx
c001ef0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ef0e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ef12:	51                   	push   ecx
c001ef13:	50                   	push   eax
c001ef14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef1c:	53                   	push   ebx
c001ef1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ef20:	83 c4 14             	add    esp,0x14
c001ef23:	53                   	push   ebx
c001ef24:	e8 cb 3f ff ff       	call   c0012ef4 <File::close()>
c001ef29:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ef2e:	83 c4 10             	add    esp,0x10
c001ef31:	48                   	dec    eax
c001ef32:	c6 05 85 25 03 c0 00 	mov    BYTE PTR ds:0xc0032585,0x0
c001ef39:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ef3e:	85 c0                	test   eax,eax
c001ef40:	75 01                	jne    c001ef43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ef42:	fb                   	sti    
c001ef43:	83 ec 0c             	sub    esp,0xc
c001ef46:	ff 35 88 25 03 c0    	push   DWORD PTR ds:0xc0032588
c001ef4c:	e8 2f f6 ff ff       	call   c001e580 <unblockTask(ThreadControlBlock*)>
c001ef51:	83 c4 10             	add    esp,0x10
c001ef54:	83 c4 2c             	add    esp,0x2c
c001ef57:	89 f0                	mov    eax,esi
c001ef59:	5b                   	pop    ebx
c001ef5a:	5e                   	pop    esi
c001ef5b:	5f                   	pop    edi
c001ef5c:	5d                   	pop    ebp
c001ef5d:	c3                   	ret    

c001ef5e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ef5e:	57                   	push   edi
c001ef5f:	56                   	push   esi
c001ef60:	53                   	push   ebx
c001ef61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef6d:	83 e8 06             	sub    eax,0x6
c001ef70:	0f b7 c0             	movzx  eax,ax
c001ef73:	50                   	push   eax
c001ef74:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ef79:	50                   	push   eax
c001ef7a:	e8 21 fd ff ff       	call   c001eca0 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef7f:	5a                   	pop    edx
c001ef80:	5e                   	pop    esi
c001ef81:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ef84:	8d 56 fa             	lea    edx,[esi-0x6]
c001ef87:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef8d:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ef90:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ef93:	83 c2 02             	add    edx,0x2
c001ef96:	66 89 10             	mov    WORD PTR [eax],dx
c001ef99:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ef9c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001efa0:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001efa3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001efa7:	89 d6                	mov    esi,edx
c001efa9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001efaf:	66 81 e6 ff fd       	and    si,0xfdff
c001efb4:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001efb8:	74 07                	je     c001efc1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001efba:	89 d6                	mov    esi,edx
c001efbc:	66 81 ce 00 02       	or     si,0x200
c001efc1:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001efc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efca:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001efce:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001efd6:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001efd9:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001efe1:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001efe4:	5b                   	pop    ebx
c001efe5:	5e                   	pop    esi
c001efe6:	5f                   	pop    edi
c001efe7:	c3                   	ret    

c001efe8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001efe8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eff2:	c1 e0 04             	shl    eax,0x4
c001eff5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eff8:	c3                   	ret    

c001eff9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eff9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001effe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f003:	c1 e0 04             	shl    eax,0x4
c001f006:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f00a:	c3                   	ret    

c001f00b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f00b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f010:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f015:	c1 e0 04             	shl    eax,0x4
c001f018:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f01b:	c3                   	ret    

c001f01c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f01c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f021:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f026:	c1 e0 04             	shl    eax,0x4
c001f029:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f02d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f030:	c3                   	ret    

c001f031 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f031:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f036:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f03b:	c1 e0 04             	shl    eax,0x4
c001f03e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f042:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f046:	c3                   	ret    

c001f047 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f047:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f04c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f051:	c1 e0 04             	shl    eax,0x4
c001f054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f058:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f05b:	c3                   	ret    

c001f05c <Vm::faultHandler(regs*)>:
c001f05c:	55                   	push   ebp
c001f05d:	57                   	push   edi
c001f05e:	56                   	push   esi
c001f05f:	53                   	push   ebx
c001f060:	83 ec 1c             	sub    esp,0x1c
c001f063:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f067:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f06a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f06e:	0f b7 f8             	movzx  edi,ax
c001f071:	52                   	push   edx
c001f072:	0f b7 c0             	movzx  eax,ax
c001f075:	50                   	push   eax
c001f076:	e8 25 fc ff ff       	call   c001eca0 <Vm::realToLinear(unsigned short, unsigned short)>
c001f07b:	5a                   	pop    edx
c001f07c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f07f:	59                   	pop    ecx
c001f080:	89 c1                	mov    ecx,eax
c001f082:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f085:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f089:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f08e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f092:	0f b7 c5             	movzx  eax,bp
c001f095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f099:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f09d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f0a1:	e8 fa fb ff ff       	call   c001eca0 <Vm::realToLinear(unsigned short, unsigned short)>
c001f0a6:	5e                   	pop    esi
c001f0a7:	be 06 00 00 00       	mov    esi,0x6
c001f0ac:	5a                   	pop    edx
c001f0ad:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f0b2:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f0b7:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f0ba:	80 fa 9d             	cmp    dl,0x9d
c001f0bd:	0f 84 2c 02 00 00    	je     c001f2ef <Vm::faultHandler(regs*)+0x293>
c001f0c3:	0f 87 91 00 00 00    	ja     c001f15a <Vm::faultHandler(regs*)+0xfe>
c001f0c9:	80 fa 66             	cmp    dl,0x66
c001f0cc:	0f 84 98 01 00 00    	je     c001f26a <Vm::faultHandler(regs*)+0x20e>
c001f0d2:	77 47                	ja     c001f11b <Vm::faultHandler(regs*)+0xbf>
c001f0d4:	80 fa 36             	cmp    dl,0x36
c001f0d7:	0f 84 80 01 00 00    	je     c001f25d <Vm::faultHandler(regs*)+0x201>
c001f0dd:	77 1a                	ja     c001f0f9 <Vm::faultHandler(regs*)+0x9d>
c001f0df:	80 fa 26             	cmp    dl,0x26
c001f0e2:	0f 84 4e 01 00 00    	je     c001f236 <Vm::faultHandler(regs*)+0x1da>
c001f0e8:	80 fa 2e             	cmp    dl,0x2e
c001f0eb:	0f 85 e2 05 00 00    	jne    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f0f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f0f4:	31 f6                	xor    esi,esi
c001f0f6:	41                   	inc    ecx
c001f0f7:	eb be                	jmp    c001f0b7 <Vm::faultHandler(regs*)+0x5b>
c001f0f9:	80 fa 64             	cmp    dl,0x64
c001f0fc:	0f 84 41 01 00 00    	je     c001f243 <Vm::faultHandler(regs*)+0x1e7>
c001f102:	0f 87 48 01 00 00    	ja     c001f250 <Vm::faultHandler(regs*)+0x1f4>
c001f108:	80 fa 3e             	cmp    dl,0x3e
c001f10b:	0f 85 c2 05 00 00    	jne    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f111:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f114:	be 01 00 00 00       	mov    esi,0x1
c001f119:	eb db                	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f11b:	80 fa 6d             	cmp    dl,0x6d
c001f11e:	0f 84 ec 02 00 00    	je     c001f410 <Vm::faultHandler(regs*)+0x3b4>
c001f124:	77 17                	ja     c001f13d <Vm::faultHandler(regs*)+0xe1>
c001f126:	80 fa 67             	cmp    dl,0x67
c001f129:	0f 84 48 01 00 00    	je     c001f277 <Vm::faultHandler(regs*)+0x21b>
c001f12f:	80 fa 6c             	cmp    dl,0x6c
c001f132:	0f 84 69 02 00 00    	je     c001f3a1 <Vm::faultHandler(regs*)+0x345>
c001f138:	e9 96 05 00 00       	jmp    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f13d:	80 fa 6f             	cmp    dl,0x6f
c001f140:	0f 84 f4 03 00 00    	je     c001f53a <Vm::faultHandler(regs*)+0x4de>
c001f146:	0f 82 59 03 00 00    	jb     c001f4a5 <Vm::faultHandler(regs*)+0x449>
c001f14c:	80 fa 9c             	cmp    dl,0x9c
c001f14f:	0f 84 2f 01 00 00    	je     c001f284 <Vm::faultHandler(regs*)+0x228>
c001f155:	e9 79 05 00 00       	jmp    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f15a:	80 fa ec             	cmp    dl,0xec
c001f15d:	0f 84 14 05 00 00    	je     c001f677 <Vm::faultHandler(regs*)+0x61b>
c001f163:	77 7b                	ja     c001f1e0 <Vm::faultHandler(regs*)+0x184>
c001f165:	80 fa e4             	cmp    dl,0xe4
c001f168:	0f 84 93 04 00 00    	je     c001f601 <Vm::faultHandler(regs*)+0x5a5>
c001f16e:	77 53                	ja     c001f1c3 <Vm::faultHandler(regs*)+0x167>
c001f170:	80 fa cd             	cmp    dl,0xcd
c001f173:	0f 84 d9 01 00 00    	je     c001f352 <Vm::faultHandler(regs*)+0x2f6>
c001f179:	80 fa cf             	cmp    dl,0xcf
c001f17c:	0f 85 51 05 00 00    	jne    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f182:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f185:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f188:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f18c:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f18f:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f193:	81 ca 00 02 02 00    	or     edx,0x20200
c001f199:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f19c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f1a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a6:	66 c1 e8 09          	shr    ax,0x9
c001f1aa:	83 e0 01             	and    eax,0x1
c001f1ad:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1b0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f1b3:	83 c0 06             	add    eax,0x6
c001f1b6:	25 ff ff 00 00       	and    eax,0xffff
c001f1bb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f1be:	e9 0c 05 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x673>
c001f1c3:	80 fa e6             	cmp    dl,0xe6
c001f1c6:	0f 84 7f 04 00 00    	je     c001f64b <Vm::faultHandler(regs*)+0x5ef>
c001f1cc:	0f 82 4b 04 00 00    	jb     c001f61d <Vm::faultHandler(regs*)+0x5c1>
c001f1d2:	80 fa e7             	cmp    dl,0xe7
c001f1d5:	0f 84 87 04 00 00    	je     c001f662 <Vm::faultHandler(regs*)+0x606>
c001f1db:	e9 f3 04 00 00       	jmp    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f1e0:	80 fa ef             	cmp    dl,0xef
c001f1e3:	0f 84 d1 04 00 00    	je     c001f6ba <Vm::faultHandler(regs*)+0x65e>
c001f1e9:	77 28                	ja     c001f213 <Vm::faultHandler(regs*)+0x1b7>
c001f1eb:	80 fa ed             	cmp    dl,0xed
c001f1ee:	0f 84 9f 04 00 00    	je     c001f693 <Vm::faultHandler(regs*)+0x637>
c001f1f4:	80 fa ee             	cmp    dl,0xee
c001f1f7:	0f 85 d6 04 00 00    	jne    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f1fd:	50                   	push   eax
c001f1fe:	50                   	push   eax
c001f1ff:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f203:	50                   	push   eax
c001f204:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f208:	50                   	push   eax
c001f209:	e8 5c fa ff ff       	call   c001ec6a <Vm::outbv(unsigned short, unsigned char)>
c001f20e:	e9 9f 04 00 00       	jmp    c001f6b2 <Vm::faultHandler(regs*)+0x656>
c001f213:	80 fa fa             	cmp    dl,0xfa
c001f216:	0f 84 69 01 00 00    	je     c001f385 <Vm::faultHandler(regs*)+0x329>
c001f21c:	80 fa fb             	cmp    dl,0xfb
c001f21f:	0f 84 6e 01 00 00    	je     c001f393 <Vm::faultHandler(regs*)+0x337>
c001f225:	80 fa f3             	cmp    dl,0xf3
c001f228:	0f 85 a5 04 00 00    	jne    c001f6d3 <Vm::faultHandler(regs*)+0x677>
c001f22e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f231:	e9 c0 fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f236:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f239:	be 02 00 00 00       	mov    esi,0x2
c001f23e:	e9 b3 fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f243:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f246:	be 03 00 00 00       	mov    esi,0x3
c001f24b:	e9 a6 fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f250:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f253:	be 04 00 00 00       	mov    esi,0x4
c001f258:	e9 99 fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f25d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f260:	be 05 00 00 00       	mov    esi,0x5
c001f265:	e9 8c fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f26a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f26d:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f272:	e9 7f fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f277:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f27a:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f27f:	e9 72 fe ff ff       	jmp    c001f0f6 <Vm::faultHandler(regs*)+0x9a>
c001f284:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f287:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f28b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f290:	74 30                	je     c001f2c2 <Vm::faultHandler(regs*)+0x266>
c001f292:	83 e9 04             	sub    ecx,0x4
c001f295:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f29b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2a1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2a4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2a7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2ad:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2b1:	0f 84 15 04 00 00    	je     c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f2b7:	80 ce 02             	or     dh,0x2
c001f2ba:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2bd:	e9 0a 04 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f2c2:	83 e9 02             	sub    ecx,0x2
c001f2c5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2cb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2ce:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2d8:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2dc:	74 05                	je     c001f2e3 <Vm::faultHandler(regs*)+0x287>
c001f2de:	80 ce 02             	or     dh,0x2
c001f2e1:	eb 03                	jmp    c001f2e6 <Vm::faultHandler(regs*)+0x28a>
c001f2e3:	80 e6 fd             	and    dh,0xfd
c001f2e6:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2ea:	e9 dd 03 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f2ef:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2f4:	74 2a                	je     c001f320 <Vm::faultHandler(regs*)+0x2c4>
c001f2f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001f2f8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f2fe:	81 ca 00 02 02 00    	or     edx,0x20200
c001f304:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f307:	8b 00                	mov    eax,DWORD PTR [eax]
c001f309:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f30f:	c1 e8 09             	shr    eax,0x9
c001f312:	83 e0 01             	and    eax,0x1
c001f315:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f318:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f31b:	83 c0 04             	add    eax,0x4
c001f31e:	eb 25                	jmp    c001f345 <Vm::faultHandler(regs*)+0x2e9>
c001f320:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f323:	81 ca 00 02 02 00    	or     edx,0x20200
c001f329:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f32c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f32f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f335:	66 c1 e8 09          	shr    ax,0x9
c001f339:	83 e0 01             	and    eax,0x1
c001f33c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f33f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f342:	83 c0 02             	add    eax,0x2
c001f345:	25 ff ff 00 00       	and    eax,0xffff
c001f34a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f34d:	e9 7a 03 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f352:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f356:	3c ee                	cmp    al,0xee
c001f358:	75 10                	jne    c001f36a <Vm::faultHandler(regs*)+0x30e>
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f360:	e8 a2 f9 ff ff       	call   c001ed07 <Vm::mainloop3(unsigned long)>
c001f365:	e9 4b 03 00 00       	jmp    c001f6b5 <Vm::faultHandler(regs*)+0x659>
c001f36a:	83 ec 0c             	sub    esp,0xc
c001f36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f375:	51                   	push   ecx
c001f376:	50                   	push   eax
c001f377:	53                   	push   ebx
c001f378:	e8 e1 fb ff ff       	call   c001ef5e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f37d:	83 c4 20             	add    esp,0x20
c001f380:	e9 4a 03 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x673>
c001f385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f38a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f38e:	e9 39 03 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f398:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f39c:	e9 2b 03 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f3a1:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f3a4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f3a9:	74 2b                	je     c001f3d6 <Vm::faultHandler(regs*)+0x37a>
c001f3ab:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f3b2:	76 22                	jbe    c001f3d6 <Vm::faultHandler(regs*)+0x37a>
c001f3b4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f3b8:	50                   	push   eax
c001f3b9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f3bd:	50                   	push   eax
c001f3be:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f3c2:	50                   	push   eax
c001f3c3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f3c7:	50                   	push   eax
c001f3c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3cc:	50                   	push   eax
c001f3cd:	6a 6c                	push   0x6c
c001f3cf:	6a 6c                	push   0x6c
c001f3d1:	e9 b9 01 00 00       	jmp    c001f58f <Vm::faultHandler(regs*)+0x533>
c001f3d6:	83 ec 0c             	sub    esp,0xc
c001f3d9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3dd:	0f b7 f6             	movzx  esi,si
c001f3e0:	50                   	push   eax
c001f3e1:	e8 71 f8 ff ff       	call   c001ec57 <Vm::inbv(unsigned short)>
c001f3e6:	83 c4 0c             	add    esp,0xc
c001f3e9:	0f b6 c0             	movzx  eax,al
c001f3ec:	50                   	push   eax
c001f3ed:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f3f1:	50                   	push   eax
c001f3f2:	56                   	push   esi
c001f3f3:	e8 24 fc ff ff       	call   c001f01c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f3f8:	83 c4 10             	add    esp,0x10
c001f3fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f3fe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f402:	74 03                	je     c001f407 <Vm::faultHandler(regs*)+0x3ab>
c001f404:	48                   	dec    eax
c001f405:	eb 01                	jmp    c001f408 <Vm::faultHandler(regs*)+0x3ac>
c001f407:	40                   	inc    eax
c001f408:	0f b7 c0             	movzx  eax,ax
c001f40b:	e9 8d 00 00 00       	jmp    c001f49d <Vm::faultHandler(regs*)+0x441>
c001f410:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f413:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f416:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f41b:	74 29                	je     c001f446 <Vm::faultHandler(regs*)+0x3ea>
c001f41d:	3d ff ff 00 00       	cmp    eax,0xffff
c001f422:	76 22                	jbe    c001f446 <Vm::faultHandler(regs*)+0x3ea>
c001f424:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f428:	50                   	push   eax
c001f429:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f42d:	50                   	push   eax
c001f42e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f432:	50                   	push   eax
c001f433:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f437:	50                   	push   eax
c001f438:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f43c:	50                   	push   eax
c001f43d:	6a 6d                	push   0x6d
c001f43f:	6a 6d                	push   0x6d
c001f441:	e9 49 01 00 00       	jmp    c001f58f <Vm::faultHandler(regs*)+0x533>
c001f446:	0f b7 c8             	movzx  ecx,ax
c001f449:	0f b7 f6             	movzx  esi,si
c001f44c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f44f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f454:	74 20                	je     c001f476 <Vm::faultHandler(regs*)+0x41a>
c001f456:	ed                   	in     eax,dx
c001f457:	55                   	push   ebp
c001f458:	50                   	push   eax
c001f459:	51                   	push   ecx
c001f45a:	56                   	push   esi
c001f45b:	e8 e7 fb ff ff       	call   c001f047 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f460:	83 c4 10             	add    esp,0x10
c001f463:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f466:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f46a:	74 05                	je     c001f471 <Vm::faultHandler(regs*)+0x415>
c001f46c:	83 e8 04             	sub    eax,0x4
c001f46f:	eb 27                	jmp    c001f498 <Vm::faultHandler(regs*)+0x43c>
c001f471:	83 c0 04             	add    eax,0x4
c001f474:	eb 22                	jmp    c001f498 <Vm::faultHandler(regs*)+0x43c>
c001f476:	66 ed                	in     ax,dx
c001f478:	0f b7 c0             	movzx  eax,ax
c001f47b:	57                   	push   edi
c001f47c:	50                   	push   eax
c001f47d:	51                   	push   ecx
c001f47e:	56                   	push   esi
c001f47f:	e8 ad fb ff ff       	call   c001f031 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f484:	83 c4 10             	add    esp,0x10
c001f487:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f48a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f48e:	74 05                	je     c001f495 <Vm::faultHandler(regs*)+0x439>
c001f490:	83 e8 02             	sub    eax,0x2
c001f493:	eb 03                	jmp    c001f498 <Vm::faultHandler(regs*)+0x43c>
c001f495:	83 c0 02             	add    eax,0x2
c001f498:	25 ff ff 00 00       	and    eax,0xffff
c001f49d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f4a0:	e9 27 02 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f4a5:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4a8:	3c 05                	cmp    al,0x5
c001f4aa:	77 24                	ja     c001f4d0 <Vm::faultHandler(regs*)+0x474>
c001f4ac:	0f b6 c0             	movzx  eax,al
c001f4af:	ff 24 85 04 d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2ffc]
c001f4b6:	0f b7 fd             	movzx  edi,bp
c001f4b9:	eb 15                	jmp    c001f4d0 <Vm::faultHandler(regs*)+0x474>
c001f4bb:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f4bf:	eb 0f                	jmp    c001f4d0 <Vm::faultHandler(regs*)+0x474>
c001f4c1:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f4c5:	eb 09                	jmp    c001f4d0 <Vm::faultHandler(regs*)+0x474>
c001f4c7:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f4cb:	eb 03                	jmp    c001f4d0 <Vm::faultHandler(regs*)+0x474>
c001f4cd:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f4d0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f4d3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4d8:	74 29                	je     c001f503 <Vm::faultHandler(regs*)+0x4a7>
c001f4da:	3d ff ff 00 00       	cmp    eax,0xffff
c001f4df:	76 22                	jbe    c001f503 <Vm::faultHandler(regs*)+0x4a7>
c001f4e1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4e5:	50                   	push   eax
c001f4e6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f4ea:	50                   	push   eax
c001f4eb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f4ef:	50                   	push   eax
c001f4f0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f4f4:	50                   	push   eax
c001f4f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4f9:	50                   	push   eax
c001f4fa:	6a 6e                	push   0x6e
c001f4fc:	6a 6e                	push   0x6e
c001f4fe:	e9 8c 00 00 00       	jmp    c001f58f <Vm::faultHandler(regs*)+0x533>
c001f503:	0f b7 c0             	movzx  eax,ax
c001f506:	52                   	push   edx
c001f507:	52                   	push   edx
c001f508:	50                   	push   eax
c001f509:	57                   	push   edi
c001f50a:	e8 d9 fa ff ff       	call   c001efe8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f50f:	59                   	pop    ecx
c001f510:	0f b6 c0             	movzx  eax,al
c001f513:	5e                   	pop    esi
c001f514:	50                   	push   eax
c001f515:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f519:	50                   	push   eax
c001f51a:	e8 4b f7 ff ff       	call   c001ec6a <Vm::outbv(unsigned short, unsigned char)>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f525:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f529:	74 03                	je     c001f52e <Vm::faultHandler(regs*)+0x4d2>
c001f52b:	48                   	dec    eax
c001f52c:	eb 01                	jmp    c001f52f <Vm::faultHandler(regs*)+0x4d3>
c001f52e:	40                   	inc    eax
c001f52f:	0f b7 c0             	movzx  eax,ax
c001f532:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f535:	e9 92 01 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f53a:	8d 46 ff             	lea    eax,[esi-0x1]
c001f53d:	3c 05                	cmp    al,0x5
c001f53f:	77 1f                	ja     c001f560 <Vm::faultHandler(regs*)+0x504>
c001f541:	0f b6 c0             	movzx  eax,al
c001f544:	ff 24 85 1c d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fe4]
c001f54b:	89 ef                	mov    edi,ebp
c001f54d:	eb 11                	jmp    c001f560 <Vm::faultHandler(regs*)+0x504>
c001f54f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f552:	eb 0c                	jmp    c001f560 <Vm::faultHandler(regs*)+0x504>
c001f554:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f557:	eb 07                	jmp    c001f560 <Vm::faultHandler(regs*)+0x504>
c001f559:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f55c:	eb 02                	jmp    c001f560 <Vm::faultHandler(regs*)+0x504>
c001f55e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f560:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f563:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f568:	74 37                	je     c001f5a1 <Vm::faultHandler(regs*)+0x545>
c001f56a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f570:	76 2f                	jbe    c001f5a1 <Vm::faultHandler(regs*)+0x545>
c001f572:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f576:	50                   	push   eax
c001f577:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f57b:	50                   	push   eax
c001f57c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f580:	50                   	push   eax
c001f581:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f585:	50                   	push   eax
c001f586:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f58a:	50                   	push   eax
c001f58b:	6a 6f                	push   0x6f
c001f58d:	6a 6f                	push   0x6f
c001f58f:	68 a9 cf 02 c0       	push   0xc002cfa9
c001f594:	e8 3a 33 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001f599:	83 c4 20             	add    esp,0x20
c001f59c:	e9 86 01 00 00       	jmp    c001f727 <Vm::faultHandler(regs*)+0x6cb>
c001f5a1:	0f b7 d7             	movzx  edx,di
c001f5a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f5a7:	0f b7 c6             	movzx  eax,si
c001f5aa:	81 e1 00 04 00 00    	and    ecx,0x400
c001f5b0:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f5b3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f5b8:	74 1d                	je     c001f5d7 <Vm::faultHandler(regs*)+0x57b>
c001f5ba:	55                   	push   ebp
c001f5bb:	55                   	push   ebp
c001f5bc:	50                   	push   eax
c001f5bd:	52                   	push   edx
c001f5be:	e8 48 fa ff ff       	call   c001f00b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f5c3:	83 c4 10             	add    esp,0x10
c001f5c6:	89 fa                	mov    edx,edi
c001f5c8:	ef                   	out    dx,eax
c001f5c9:	85 c9                	test   ecx,ecx
c001f5cb:	74 05                	je     c001f5d2 <Vm::faultHandler(regs*)+0x576>
c001f5cd:	83 ee 04             	sub    esi,0x4
c001f5d0:	eb 21                	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x597>
c001f5d2:	83 c6 04             	add    esi,0x4
c001f5d5:	eb 1c                	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x597>
c001f5d7:	55                   	push   ebp
c001f5d8:	55                   	push   ebp
c001f5d9:	50                   	push   eax
c001f5da:	52                   	push   edx
c001f5db:	e8 19 fa ff ff       	call   c001eff9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f5e0:	83 c4 10             	add    esp,0x10
c001f5e3:	89 fa                	mov    edx,edi
c001f5e5:	66 ef                	out    dx,ax
c001f5e7:	85 c9                	test   ecx,ecx
c001f5e9:	74 05                	je     c001f5f0 <Vm::faultHandler(regs*)+0x594>
c001f5eb:	83 ee 02             	sub    esi,0x2
c001f5ee:	eb 03                	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x597>
c001f5f0:	83 c6 02             	add    esi,0x2
c001f5f3:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f5f9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f5fc:	e9 cb 00 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f601:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f60f:	50                   	push   eax
c001f610:	e8 42 f6 ff ff       	call   c001ec57 <Vm::inbv(unsigned short)>
c001f615:	0f b6 c0             	movzx  eax,al
c001f618:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f61b:	eb 3f                	jmp    c001f65c <Vm::faultHandler(regs*)+0x600>
c001f61d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f622:	74 07                	je     c001f62b <Vm::faultHandler(regs*)+0x5cf>
c001f624:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f628:	ed                   	in     eax,dx
c001f629:	eb 14                	jmp    c001f63f <Vm::faultHandler(regs*)+0x5e3>
c001f62b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f62e:	66 31 f6             	xor    si,si
c001f631:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f634:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f638:	66 ed                	in     ax,dx
c001f63a:	0f b7 c0             	movzx  eax,ax
c001f63d:	09 f0                	or     eax,esi
c001f63f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f642:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f646:	e9 84 00 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x673>
c001f64b:	52                   	push   edx
c001f64c:	52                   	push   edx
c001f64d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f651:	50                   	push   eax
c001f652:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f656:	50                   	push   eax
c001f657:	e8 0e f6 ff ff       	call   c001ec6a <Vm::outbv(unsigned short, unsigned char)>
c001f65c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f660:	eb 53                	jmp    c001f6b5 <Vm::faultHandler(regs*)+0x659>
c001f662:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f665:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f669:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f66e:	74 03                	je     c001f673 <Vm::faultHandler(regs*)+0x617>
c001f670:	ef                   	out    dx,eax
c001f671:	eb cf                	jmp    c001f642 <Vm::faultHandler(regs*)+0x5e6>
c001f673:	66 ef                	out    dx,ax
c001f675:	eb cb                	jmp    c001f642 <Vm::faultHandler(regs*)+0x5e6>
c001f677:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f67e:	83 ec 0c             	sub    esp,0xc
c001f681:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f685:	50                   	push   eax
c001f686:	e8 cc f5 ff ff       	call   c001ec57 <Vm::inbv(unsigned short)>
c001f68b:	0f b6 c0             	movzx  eax,al
c001f68e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f691:	eb 1f                	jmp    c001f6b2 <Vm::faultHandler(regs*)+0x656>
c001f693:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f696:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f69b:	74 03                	je     c001f6a0 <Vm::faultHandler(regs*)+0x644>
c001f69d:	ed                   	in     eax,dx
c001f69e:	eb 0d                	jmp    c001f6ad <Vm::faultHandler(regs*)+0x651>
c001f6a0:	66 ed                	in     ax,dx
c001f6a2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f6a5:	0f b7 c0             	movzx  eax,ax
c001f6a8:	66 31 d2             	xor    dx,dx
c001f6ab:	09 d0                	or     eax,edx
c001f6ad:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6b0:	eb 1a                	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f6b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6b5:	83 c4 10             	add    esp,0x10
c001f6b8:	eb 15                	jmp    c001f6cf <Vm::faultHandler(regs*)+0x673>
c001f6ba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f6bd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6c0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6c5:	74 03                	je     c001f6ca <Vm::faultHandler(regs*)+0x66e>
c001f6c7:	ef                   	out    dx,eax
c001f6c8:	eb 02                	jmp    c001f6cc <Vm::faultHandler(regs*)+0x670>
c001f6ca:	66 ef                	out    dx,ax
c001f6cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6cf:	b0 01                	mov    al,0x1
c001f6d1:	eb 56                	jmp    c001f729 <Vm::faultHandler(regs*)+0x6cd>
c001f6d3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f6d7:	50                   	push   eax
c001f6d8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f6dc:	50                   	push   eax
c001f6dd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f6e1:	50                   	push   eax
c001f6e2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f6e6:	50                   	push   eax
c001f6e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6eb:	50                   	push   eax
c001f6ec:	52                   	push   edx
c001f6ed:	52                   	push   edx
c001f6ee:	68 d6 cf 02 c0       	push   0xc002cfd6
c001f6f3:	e8 db 31 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c001f6f8:	83 c4 20             	add    esp,0x20
c001f6fb:	83 ec 0c             	sub    esp,0xc
c001f6fe:	6a 60                	push   0x60
c001f700:	e8 52 f5 ff ff       	call   c001ec57 <Vm::inbv(unsigned short)>
c001f705:	83 c4 10             	add    esp,0x10
c001f708:	3c 1c                	cmp    al,0x1c
c001f70a:	74 04                	je     c001f710 <Vm::faultHandler(regs*)+0x6b4>
c001f70c:	3c 5a                	cmp    al,0x5a
c001f70e:	75 eb                	jne    c001f6fb <Vm::faultHandler(regs*)+0x69f>
c001f710:	3c 5a                	cmp    al,0x5a
c001f712:	74 04                	je     c001f718 <Vm::faultHandler(regs*)+0x6bc>
c001f714:	3c 1c                	cmp    al,0x1c
c001f716:	75 0f                	jne    c001f727 <Vm::faultHandler(regs*)+0x6cb>
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	6a 60                	push   0x60
c001f71d:	e8 35 f5 ff ff       	call   c001ec57 <Vm::inbv(unsigned short)>
c001f722:	83 c4 10             	add    esp,0x10
c001f725:	eb e9                	jmp    c001f710 <Vm::faultHandler(regs*)+0x6b4>
c001f727:	31 c0                	xor    eax,eax
c001f729:	83 c4 1c             	add    esp,0x1c
c001f72c:	5b                   	pop    ebx
c001f72d:	5e                   	pop    esi
c001f72e:	5f                   	pop    edi
c001f72f:	5d                   	pop    ebp
c001f730:	c3                   	ret    

c001f731 <Vm::fpuInternalTo32(unsigned long long)>:
c001f731:	57                   	push   edi
c001f732:	56                   	push   esi
c001f733:	53                   	push   ebx
c001f734:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73c:	89 d6                	mov    esi,edx
c001f73e:	89 d7                	mov    edi,edx
c001f740:	89 c1                	mov    ecx,eax
c001f742:	c1 ef 14             	shr    edi,0x14
c001f745:	89 d3                	mov    ebx,edx
c001f747:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f74d:	31 d2                	xor    edx,edx
c001f74f:	89 f8                	mov    eax,edi
c001f751:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f757:	bf ff 00 00 00       	mov    edi,0xff
c001f75c:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f761:	83 d2 ff             	adc    edx,0xffffffff
c001f764:	39 c7                	cmp    edi,eax
c001f766:	bf 00 00 00 00       	mov    edi,0x0
c001f76b:	19 d7                	sbb    edi,edx
c001f76d:	72 15                	jb     c001f784 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f76f:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f773:	c1 e0 17             	shl    eax,0x17
c001f776:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f77c:	09 f1                	or     ecx,esi
c001f77e:	09 c1                	or     ecx,eax
c001f780:	89 cf                	mov    edi,ecx
c001f782:	eb 02                	jmp    c001f786 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f784:	31 ff                	xor    edi,edi
c001f786:	89 f8                	mov    eax,edi
c001f788:	5b                   	pop    ebx
c001f789:	5e                   	pop    esi
c001f78a:	5f                   	pop    edi
c001f78b:	c3                   	ret    

c001f78c <Vm::fpuInternalTo64(unsigned long long)>:
c001f78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f794:	c3                   	ret    

c001f795 <Vm::fpu32ToInternal(unsigned int)>:
c001f795:	57                   	push   edi
c001f796:	31 ff                	xor    edi,edi
c001f798:	56                   	push   esi
c001f799:	53                   	push   ebx
c001f79a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f79e:	89 cb                	mov    ebx,ecx
c001f7a0:	89 ce                	mov    esi,ecx
c001f7a2:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f7a8:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f7ae:	c1 e9 17             	shr    ecx,0x17
c001f7b1:	89 f0                	mov    eax,esi
c001f7b3:	0f b6 d1             	movzx  edx,cl
c001f7b6:	81 c2 80 03 00 00    	add    edx,0x380
c001f7bc:	89 d1                	mov    ecx,edx
c001f7be:	89 fa                	mov    edx,edi
c001f7c0:	c1 e1 14             	shl    ecx,0x14
c001f7c3:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7c7:	c1 e0 1d             	shl    eax,0x1d
c001f7ca:	89 d7                	mov    edi,edx
c001f7cc:	89 c6                	mov    esi,eax
c001f7ce:	89 ca                	mov    edx,ecx
c001f7d0:	89 f0                	mov    eax,esi
c001f7d2:	09 fa                	or     edx,edi
c001f7d4:	09 da                	or     edx,ebx
c001f7d6:	5b                   	pop    ebx
c001f7d7:	5e                   	pop    esi
c001f7d8:	5f                   	pop    edi
c001f7d9:	c3                   	ret    

c001f7da <Vm::fpu64ToInternal(unsigned long long)>:
c001f7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7e2:	c3                   	ret    

c001f7e3 <Vm::fpuFloatToLong(unsigned long long)>:
c001f7e3:	57                   	push   edi
c001f7e4:	31 c0                	xor    eax,eax
c001f7e6:	56                   	push   esi
c001f7e7:	31 d2                	xor    edx,edx
c001f7e9:	53                   	push   ebx
c001f7ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7f2:	89 d9                	mov    ecx,ebx
c001f7f4:	c1 e9 14             	shr    ecx,0x14
c001f7f7:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7fd:	89 cf                	mov    edi,ecx
c001f7ff:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f805:	78 33                	js     c001f83a <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f807:	89 d9                	mov    ecx,ebx
c001f809:	89 f0                	mov    eax,esi
c001f80b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f811:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f817:	89 ca                	mov    edx,ecx
c001f819:	b9 34 00 00 00       	mov    ecx,0x34
c001f81e:	29 f9                	sub    ecx,edi
c001f820:	0f ad d0             	shrd   eax,edx,cl
c001f823:	d3 fa                	sar    edx,cl
c001f825:	f6 c1 20             	test   cl,0x20
c001f828:	74 05                	je     c001f82f <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f82a:	89 d0                	mov    eax,edx
c001f82c:	c1 fa 1f             	sar    edx,0x1f
c001f82f:	85 db                	test   ebx,ebx
c001f831:	79 07                	jns    c001f83a <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f833:	f7 d8                	neg    eax
c001f835:	83 d2 00             	adc    edx,0x0
c001f838:	f7 da                	neg    edx
c001f83a:	5b                   	pop    ebx
c001f83b:	5e                   	pop    esi
c001f83c:	5f                   	pop    edi
c001f83d:	c3                   	ret    

c001f83e <Vm::fpuULongToFloat(unsigned long long)>:
c001f83e:	57                   	push   edi
c001f83f:	31 c9                	xor    ecx,ecx
c001f841:	56                   	push   esi
c001f842:	53                   	push   ebx
c001f843:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f847:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f84b:	0f ba e7 14          	bt     edi,0x14
c001f84f:	72 07                	jb     c001f858 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f851:	01 f6                	add    esi,esi
c001f853:	11 ff                	adc    edi,edi
c001f855:	41                   	inc    ecx
c001f856:	eb f3                	jmp    c001f84b <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f858:	89 fa                	mov    edx,edi
c001f85a:	89 f0                	mov    eax,esi
c001f85c:	bb 33 04 00 00       	mov    ebx,0x433
c001f861:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f867:	29 cb                	sub    ebx,ecx
c001f869:	89 d9                	mov    ecx,ebx
c001f86b:	5b                   	pop    ebx
c001f86c:	c1 e1 14             	shl    ecx,0x14
c001f86f:	5e                   	pop    esi
c001f870:	09 ca                	or     edx,ecx
c001f872:	5f                   	pop    edi
c001f873:	c3                   	ret    

c001f874 <Vm::fpuLongToFloat(long long)>:
c001f874:	56                   	push   esi
c001f875:	31 c0                	xor    eax,eax
c001f877:	53                   	push   ebx
c001f878:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f87c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f880:	39 c8                	cmp    eax,ecx
c001f882:	19 d8                	sbb    eax,ebx
c001f884:	7d 04                	jge    c001f88a <Vm::fpuLongToFloat(long long)+0x16>
c001f886:	31 f6                	xor    esi,esi
c001f888:	eb 0c                	jmp    c001f896 <Vm::fpuLongToFloat(long long)+0x22>
c001f88a:	f7 d9                	neg    ecx
c001f88c:	be 01 00 00 00       	mov    esi,0x1
c001f891:	83 d3 00             	adc    ebx,0x0
c001f894:	f7 db                	neg    ebx
c001f896:	31 c0                	xor    eax,eax
c001f898:	0f ba e3 14          	bt     ebx,0x14
c001f89c:	72 07                	jb     c001f8a5 <Vm::fpuLongToFloat(long long)+0x31>
c001f89e:	01 c9                	add    ecx,ecx
c001f8a0:	11 db                	adc    ebx,ebx
c001f8a2:	40                   	inc    eax
c001f8a3:	eb f3                	jmp    c001f898 <Vm::fpuLongToFloat(long long)+0x24>
c001f8a5:	ba 33 04 00 00       	mov    edx,0x433
c001f8aa:	29 c2                	sub    edx,eax
c001f8ac:	89 c8                	mov    eax,ecx
c001f8ae:	c1 e2 14             	shl    edx,0x14
c001f8b1:	89 d9                	mov    ecx,ebx
c001f8b3:	89 f3                	mov    ebx,esi
c001f8b5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8bb:	09 ca                	or     edx,ecx
c001f8bd:	84 db                	test   bl,bl
c001f8bf:	74 06                	je     c001f8c7 <Vm::fpuLongToFloat(long long)+0x53>
c001f8c1:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8c7:	5b                   	pop    ebx
c001f8c8:	5e                   	pop    esi
c001f8c9:	c3                   	ret    

c001f8ca <Vm::fpuGet0()>:
c001f8ca:	31 c0                	xor    eax,eax
c001f8cc:	31 d2                	xor    edx,edx
c001f8ce:	c3                   	ret    

c001f8cf <Vm::fpuGet1()>:
c001f8cf:	b8 01 00 00 00       	mov    eax,0x1
c001f8d4:	31 d2                	xor    edx,edx
c001f8d6:	c3                   	ret    

c001f8d7 <Vm::fpuGetPi()>:
c001f8d7:	b8 03 00 00 00       	mov    eax,0x3
c001f8dc:	31 d2                	xor    edx,edx
c001f8de:	c3                   	ret    

c001f8df <Vm::fpuGetLog2E()>:
c001f8df:	83 ec 18             	sub    esp,0x18
c001f8e2:	68 34 d0 02 c0       	push   0xc002d034
c001f8e7:	e8 1d aa ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001f8ec:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8f1:	31 d2                	xor    edx,edx
c001f8f3:	83 c4 1c             	add    esp,0x1c
c001f8f6:	c3                   	ret    

c001f8f7 <Vm::fpuGetLogE2()>:
c001f8f7:	83 ec 18             	sub    esp,0x18
c001f8fa:	68 40 d0 02 c0       	push   0xc002d040
c001f8ff:	e8 05 aa ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001f904:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f909:	31 d2                	xor    edx,edx
c001f90b:	83 c4 1c             	add    esp,0x1c
c001f90e:	c3                   	ret    

c001f90f <Vm::fpuGetLog210()>:
c001f90f:	83 ec 18             	sub    esp,0x18
c001f912:	68 4c d0 02 c0       	push   0xc002d04c
c001f917:	e8 ed a9 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001f91c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f921:	31 d2                	xor    edx,edx
c001f923:	83 c4 1c             	add    esp,0x1c
c001f926:	c3                   	ret    

c001f927 <Vm::fpuGetLog102()>:
c001f927:	83 ec 18             	sub    esp,0x18
c001f92a:	68 59 d0 02 c0       	push   0xc002d059
c001f92f:	e8 d5 a9 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001f934:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f939:	31 d2                	xor    edx,edx
c001f93b:	83 c4 1c             	add    esp,0x1c
c001f93e:	c3                   	ret    

c001f93f <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f93f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f943:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f947:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f94b:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f94f:	0f 92 c0             	setb   al
c001f952:	c3                   	ret    

c001f953 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f953:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95b:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f95f:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f963:	09 c2                	or     edx,eax
c001f965:	0f 94 c0             	sete   al
c001f968:	c3                   	ret    

c001f969 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f969:	57                   	push   edi
c001f96a:	56                   	push   esi
c001f96b:	53                   	push   ebx
c001f96c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f970:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f974:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f978:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f97c:	57                   	push   edi
c001f97d:	56                   	push   esi
c001f97e:	53                   	push   ebx
c001f97f:	51                   	push   ecx
c001f980:	e8 ce ff ff ff       	call   c001f953 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f985:	83 c4 10             	add    esp,0x10
c001f988:	88 c2                	mov    dl,al
c001f98a:	31 c0                	xor    eax,eax
c001f98c:	84 d2                	test   dl,dl
c001f98e:	75 0c                	jne    c001f99c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f990:	57                   	push   edi
c001f991:	56                   	push   esi
c001f992:	53                   	push   ebx
c001f993:	51                   	push   ecx
c001f994:	e8 a6 ff ff ff       	call   c001f93f <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f999:	83 c4 10             	add    esp,0x10
c001f99c:	83 e0 01             	and    eax,0x1
c001f99f:	5b                   	pop    ebx
c001f9a0:	88 c1                	mov    cl,al
c001f9a2:	83 e2 01             	and    edx,0x1
c001f9a5:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001f9aa:	c1 e2 06             	shl    edx,0x6
c001f9ad:	83 e0 ba             	and    eax,0xffffffba
c001f9b0:	5e                   	pop    esi
c001f9b1:	09 c8                	or     eax,ecx
c001f9b3:	5f                   	pop    edi
c001f9b4:	09 d0                	or     eax,edx
c001f9b6:	a2 c1 25 03 c0       	mov    ds:0xc00325c1,al
c001f9bb:	c3                   	ret    

c001f9bc <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9c4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9c8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9cc:	c3                   	ret    

c001f9cd <Vm::fpuAbs(unsigned long long)>:
c001f9cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9d5:	c3                   	ret    

c001f9d6 <Vm::fpuChs(unsigned long long)>:
c001f9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9de:	f7 d8                	neg    eax
c001f9e0:	83 d2 00             	adc    edx,0x0
c001f9e3:	f7 da                	neg    edx
c001f9e5:	c3                   	ret    

c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9e6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9ea:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9ef:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9f3:	eb c7                	jmp    c001f9bc <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9f5:	53                   	push   ebx
c001f9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa06:	0f af ca             	imul   ecx,edx
c001fa09:	0f af d8             	imul   ebx,eax
c001fa0c:	f7 e2                	mul    edx
c001fa0e:	01 d9                	add    ecx,ebx
c001fa10:	5b                   	pop    ebx
c001fa11:	01 ca                	add    edx,ecx
c001fa13:	c3                   	ret    

c001fa14 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa27:	e8 d8 77 00 00       	call   c0027204 <__udivdi3>
c001fa2c:	83 c4 1c             	add    esp,0x1c
c001fa2f:	c3                   	ret    

c001fa30 <Vm::fpuSquare(unsigned long long)>:
c001fa30:	50                   	push   eax
c001fa31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa39:	52                   	push   edx
c001fa3a:	50                   	push   eax
c001fa3b:	52                   	push   edx
c001fa3c:	50                   	push   eax
c001fa3d:	e8 b3 ff ff ff       	call   c001f9f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa42:	83 c4 14             	add    esp,0x14
c001fa45:	c3                   	ret    

c001fa46 <Vm::fpuGetReg(int)>:
c001fa46:	83 ec 0c             	sub    esp,0xc
c001fa49:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa4e:	76 10                	jbe    c001fa60 <Vm::fpuGetReg(int)+0x1a>
c001fa50:	83 ec 0c             	sub    esp,0xc
c001fa53:	68 66 d0 02 c0       	push   0xc002d066
c001fa58:	e8 ac a8 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001fa5d:	83 c4 10             	add    esp,0x10
c001fa60:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001fa65:	b9 08 00 00 00       	mov    ecx,0x8
c001fa6a:	c0 e8 03             	shr    al,0x3
c001fa6d:	83 e0 07             	and    eax,0x7
c001fa70:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa74:	99                   	cdq    
c001fa75:	f7 f9                	idiv   ecx
c001fa77:	8b 04 d5 c4 25 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcda3c]
c001fa7e:	8b 14 d5 c8 25 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcda38]
c001fa85:	83 c4 0c             	add    esp,0xc
c001fa88:	c3                   	ret    

c001fa89 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa89:	57                   	push   edi
c001fa8a:	56                   	push   esi
c001fa8b:	52                   	push   edx
c001fa8c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa90:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa94:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa99:	76 10                	jbe    c001faab <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa9b:	83 ec 0c             	sub    esp,0xc
c001fa9e:	68 79 d0 02 c0       	push   0xc002d079
c001faa3:	e8 61 a8 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c001faa8:	83 c4 10             	add    esp,0x10
c001faab:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001fab0:	b9 08 00 00 00       	mov    ecx,0x8
c001fab5:	c0 e8 03             	shr    al,0x3
c001fab8:	83 e0 07             	and    eax,0x7
c001fabb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fabf:	99                   	cdq    
c001fac0:	f7 f9                	idiv   ecx
c001fac2:	89 34 d5 c4 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda3c],esi
c001fac9:	89 3c d5 c8 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda38],edi
c001fad0:	58                   	pop    eax
c001fad1:	5e                   	pop    esi
c001fad2:	5f                   	pop    edi
c001fad3:	c3                   	ret    

c001fad4 <Vm::fpuPush(unsigned long long)>:
c001fad4:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001fad9:	c0 e8 03             	shr    al,0x3
c001fadc:	83 e0 07             	and    eax,0x7
c001fadf:	83 c0 07             	add    eax,0x7
c001fae2:	88 c2                	mov    dl,al
c001fae4:	83 e0 07             	and    eax,0x7
c001fae7:	83 e2 07             	and    edx,0x7
c001faea:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001faf1:	8a 15 c1 25 03 c0    	mov    dl,BYTE PTR ds:0xc00325c1
c001faf7:	83 e2 c7             	and    edx,0xffffffc7
c001fafa:	09 ca                	or     edx,ecx
c001fafc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb00:	88 15 c1 25 03 c0    	mov    BYTE PTR ds:0xc00325c1,dl
c001fb06:	89 0c c5 c8 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda38],ecx
c001fb0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb11:	89 14 c5 c4 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda3c],edx
c001fb18:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001fb1d:	83 f8 08             	cmp    eax,0x8
c001fb20:	75 08                	jne    c001fb2a <Vm::fpuPush(unsigned long long)+0x56>
c001fb22:	80 0d c0 25 03 c0 40 	or     BYTE PTR ds:0xc00325c0,0x40
c001fb29:	c3                   	ret    
c001fb2a:	40                   	inc    eax
c001fb2b:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001fb30:	c3                   	ret    

c001fb31 <Vm::fpuPop()>:
c001fb31:	8a 0d c1 25 03 c0    	mov    cl,BYTE PTR ds:0xc00325c1
c001fb37:	53                   	push   ebx
c001fb38:	c0 e9 03             	shr    cl,0x3
c001fb3b:	8a 1d c1 25 03 c0    	mov    bl,BYTE PTR ds:0xc00325c1
c001fb41:	83 e1 07             	and    ecx,0x7
c001fb44:	83 e3 c7             	and    ebx,0xffffffc7
c001fb47:	8b 04 cd c4 25 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcda3c]
c001fb4e:	8b 14 cd c8 25 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcda38]
c001fb55:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb5c:	83 e1 38             	and    ecx,0x38
c001fb5f:	09 d9                	or     ecx,ebx
c001fb61:	88 0d c1 25 03 c0    	mov    BYTE PTR ds:0xc00325c1,cl
c001fb67:	8b 0d 04 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032604
c001fb6d:	85 c9                	test   ecx,ecx
c001fb6f:	74 09                	je     c001fb7a <Vm::fpuPop()+0x49>
c001fb71:	49                   	dec    ecx
c001fb72:	89 0d 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,ecx
c001fb78:	eb 07                	jmp    c001fb81 <Vm::fpuPop()+0x50>
c001fb7a:	80 0d c0 25 03 c0 40 	or     BYTE PTR ds:0xc00325c0,0x40
c001fb81:	5b                   	pop    ebx
c001fb82:	c3                   	ret    

c001fb83 <Vm::x87Handler(regs*)>:
c001fb83:	55                   	push   ebp
c001fb84:	57                   	push   edi
c001fb85:	56                   	push   esi
c001fb86:	53                   	push   ebx
c001fb87:	83 ec 1c             	sub    esp,0x1c
c001fb8a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb8e:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb93:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb96:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb9e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fba2:	50                   	push   eax
c001fba3:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fba7:	50                   	push   eax
c001fba8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fbac:	50                   	push   eax
c001fbad:	53                   	push   ebx
c001fbae:	e8 23 9e ff ff       	call   c00199d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fbb3:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fbb6:	83 c4 10             	add    esp,0x10
c001fbb9:	89 c6                	mov    esi,eax
c001fbbb:	80 fa d9             	cmp    dl,0xd9
c001fbbe:	0f 85 52 01 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0x193>
c001fbc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbc8:	8d 50 20             	lea    edx,[eax+0x20]
c001fbcb:	80 fa 0e             	cmp    dl,0xe
c001fbce:	0f 87 86 00 00 00    	ja     c001fc5a <Vm::x87Handler(regs*)+0xd7>
c001fbd4:	0f b6 d2             	movzx  edx,dl
c001fbd7:	ff 24 95 8c d0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2f74]
c001fbde:	e8 e7 fc ff ff       	call   c001f8ca <Vm::fpuGet0()>
c001fbe3:	eb 05                	jmp    c001fbea <Vm::x87Handler(regs*)+0x67>
c001fbe5:	e8 e5 fc ff ff       	call   c001f8cf <Vm::fpuGet1()>
c001fbea:	57                   	push   edi
c001fbeb:	57                   	push   edi
c001fbec:	52                   	push   edx
c001fbed:	50                   	push   eax
c001fbee:	e8 e1 fe ff ff       	call   c001fad4 <Vm::fpuPush(unsigned long long)>
c001fbf3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	b0 01                	mov    al,0x1
c001fbfc:	e9 e3 09 00 00       	jmp    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c001fc01:	83 ec 0c             	sub    esp,0xc
c001fc04:	6a 00                	push   0x0
c001fc06:	e8 3b fe ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fc0b:	59                   	pop    ecx
c001fc0c:	5e                   	pop    esi
c001fc0d:	52                   	push   edx
c001fc0e:	50                   	push   eax
c001fc0f:	e8 c2 fd ff ff       	call   c001f9d6 <Vm::fpuChs(unsigned long long)>
c001fc14:	eb 13                	jmp    c001fc29 <Vm::x87Handler(regs*)+0xa6>
c001fc16:	83 ec 0c             	sub    esp,0xc
c001fc19:	6a 00                	push   0x0
c001fc1b:	e8 26 fe ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fc20:	5f                   	pop    edi
c001fc21:	5d                   	pop    ebp
c001fc22:	52                   	push   edx
c001fc23:	50                   	push   eax
c001fc24:	e8 a4 fd ff ff       	call   c001f9cd <Vm::fpuAbs(unsigned long long)>
c001fc29:	83 c4 0c             	add    esp,0xc
c001fc2c:	52                   	push   edx
c001fc2d:	50                   	push   eax
c001fc2e:	6a 00                	push   0x0
c001fc30:	e8 54 fe ff ff       	call   c001fa89 <Vm::fpuSetReg(int, unsigned long long)>
c001fc35:	eb bc                	jmp    c001fbf3 <Vm::x87Handler(regs*)+0x70>
c001fc37:	e8 d3 fc ff ff       	call   c001f90f <Vm::fpuGetLog210()>
c001fc3c:	eb ac                	jmp    c001fbea <Vm::x87Handler(regs*)+0x67>
c001fc3e:	e8 9c fc ff ff       	call   c001f8df <Vm::fpuGetLog2E()>
c001fc43:	eb a5                	jmp    c001fbea <Vm::x87Handler(regs*)+0x67>
c001fc45:	e8 8d fc ff ff       	call   c001f8d7 <Vm::fpuGetPi()>
c001fc4a:	eb 9e                	jmp    c001fbea <Vm::x87Handler(regs*)+0x67>
c001fc4c:	e8 d6 fc ff ff       	call   c001f927 <Vm::fpuGetLog102()>
c001fc51:	eb 97                	jmp    c001fbea <Vm::x87Handler(regs*)+0x67>
c001fc53:	e8 9f fc ff ff       	call   c001f8f7 <Vm::fpuGetLogE2()>
c001fc58:	eb 90                	jmp    c001fbea <Vm::x87Handler(regs*)+0x67>
c001fc5a:	8d 50 40             	lea    edx,[eax+0x40]
c001fc5d:	80 fa 07             	cmp    dl,0x7
c001fc60:	77 15                	ja     c001fc77 <Vm::x87Handler(regs*)+0xf4>
c001fc62:	83 ec 0c             	sub    esp,0xc
c001fc65:	2d c0 00 00 00       	sub    eax,0xc0
c001fc6a:	50                   	push   eax
c001fc6b:	e8 d6 fd ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fc70:	59                   	pop    ecx
c001fc71:	5e                   	pop    esi
c001fc72:	e9 75 ff ff ff       	jmp    c001fbec <Vm::x87Handler(regs*)+0x69>
c001fc77:	8d 50 38             	lea    edx,[eax+0x38]
c001fc7a:	80 fa 07             	cmp    dl,0x7
c001fc7d:	77 3c                	ja     c001fcbb <Vm::x87Handler(regs*)+0x138>
c001fc7f:	83 ec 0c             	sub    esp,0xc
c001fc82:	2d c8 00 00 00       	sub    eax,0xc8
c001fc87:	50                   	push   eax
c001fc88:	e8 b9 fd ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fc8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc94:	89 c6                	mov    esi,eax
c001fc96:	89 d7                	mov    edi,edx
c001fc98:	e8 a9 fd ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fc9d:	83 c4 0c             	add    esp,0xc
c001fca0:	52                   	push   edx
c001fca1:	50                   	push   eax
c001fca2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca6:	2d c8 00 00 00       	sub    eax,0xc8
c001fcab:	50                   	push   eax
c001fcac:	e8 d8 fd ff ff       	call   c001fa89 <Vm::fpuSetReg(int, unsigned long long)>
c001fcb1:	83 c4 0c             	add    esp,0xc
c001fcb4:	57                   	push   edi
c001fcb5:	56                   	push   esi
c001fcb6:	e9 73 ff ff ff       	jmp    c001fc2e <Vm::x87Handler(regs*)+0xab>
c001fcbb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcbf:	84 d2                	test   dl,dl
c001fcc1:	75 0f                	jne    c001fcd2 <Vm::x87Handler(regs*)+0x14f>
c001fcc3:	83 ec 0c             	sub    esp,0xc
c001fcc6:	ff 36                	push   DWORD PTR [esi]
c001fcc8:	e8 c8 fa ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c001fccd:	e9 bf 00 00 00       	jmp    c001fd91 <Vm::x87Handler(regs*)+0x20e>
c001fcd2:	80 fa 03             	cmp    dl,0x3
c001fcd5:	75 13                	jne    c001fcea <Vm::x87Handler(regs*)+0x167>
c001fcd7:	e8 55 fe ff ff       	call   c001fb31 <Vm::fpuPop()>
c001fcdc:	55                   	push   ebp
c001fcdd:	55                   	push   ebp
c001fcde:	52                   	push   edx
c001fcdf:	50                   	push   eax
c001fce0:	e8 4c fa ff ff       	call   c001f731 <Vm::fpuInternalTo32(unsigned long long)>
c001fce5:	e9 88 00 00 00       	jmp    c001fd72 <Vm::x87Handler(regs*)+0x1ef>
c001fcea:	80 fa 05             	cmp    dl,0x5
c001fced:	75 0e                	jne    c001fcfd <Vm::x87Handler(regs*)+0x17a>
c001fcef:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fcf2:	66 a3 c2 25 03 c0    	mov    ds:0xc00325c2,ax
c001fcf8:	e9 df 00 00 00       	jmp    c001fddc <Vm::x87Handler(regs*)+0x259>
c001fcfd:	31 c0                	xor    eax,eax
c001fcff:	80 fa 07             	cmp    dl,0x7
c001fd02:	0f 85 dc 08 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c001fd08:	66 a1 c2 25 03 c0    	mov    ax,ds:0xc00325c2
c001fd0e:	66 89 06             	mov    WORD PTR [esi],ax
c001fd11:	e9 c6 00 00 00       	jmp    c001fddc <Vm::x87Handler(regs*)+0x259>
c001fd16:	80 fa d8             	cmp    dl,0xd8
c001fd19:	0f 84 c9 00 00 00    	je     c001fde8 <Vm::x87Handler(regs*)+0x265>
c001fd1f:	80 fa dc             	cmp    dl,0xdc
c001fd22:	0f 84 0d 02 00 00    	je     c001ff35 <Vm::x87Handler(regs*)+0x3b2>
c001fd28:	80 fa de             	cmp    dl,0xde
c001fd2b:	0f 84 cd 02 00 00    	je     c001fffe <Vm::x87Handler(regs*)+0x47b>
c001fd31:	80 fa dd             	cmp    dl,0xdd
c001fd34:	0f 84 5f 04 00 00    	je     c0020199 <Vm::x87Handler(regs*)+0x616>
c001fd3a:	80 fa da             	cmp    dl,0xda
c001fd3d:	0f 84 24 05 00 00    	je     c0020267 <Vm::x87Handler(regs*)+0x6e4>
c001fd43:	80 fa df             	cmp    dl,0xdf
c001fd46:	0f 84 68 05 00 00    	je     c00202b4 <Vm::x87Handler(regs*)+0x731>
c001fd4c:	31 c0                	xor    eax,eax
c001fd4e:	80 fa db             	cmp    dl,0xdb
c001fd51:	0f 85 8d 08 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c001fd57:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd5b:	80 fa 03             	cmp    dl,0x3
c001fd5e:	0f 85 70 06 00 00    	jne    c00203d4 <Vm::x87Handler(regs*)+0x851>
c001fd64:	e8 c8 fd ff ff       	call   c001fb31 <Vm::fpuPop()>
c001fd69:	55                   	push   ebp
c001fd6a:	55                   	push   ebp
c001fd6b:	52                   	push   edx
c001fd6c:	50                   	push   eax
c001fd6d:	e8 71 fa ff ff       	call   c001f7e3 <Vm::fpuFloatToLong(unsigned long long)>
c001fd72:	83 c4 10             	add    esp,0x10
c001fd75:	89 06                	mov    DWORD PTR [esi],eax
c001fd77:	eb 63                	jmp    c001fddc <Vm::x87Handler(regs*)+0x259>
c001fd79:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd7d:	84 d2                	test   dl,dl
c001fd7f:	0f 85 e6 05 00 00    	jne    c002036b <Vm::x87Handler(regs*)+0x7e8>
c001fd85:	57                   	push   edi
c001fd86:	57                   	push   edi
c001fd87:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd8a:	ff 36                	push   DWORD PTR [esi]
c001fd8c:	e8 49 fa ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c001fd91:	5e                   	pop    esi
c001fd92:	5f                   	pop    edi
c001fd93:	52                   	push   edx
c001fd94:	50                   	push   eax
c001fd95:	e8 3a fd ff ff       	call   c001fad4 <Vm::fpuPush(unsigned long long)>
c001fd9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd9e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fda1:	e9 51 fe ff ff       	jmp    c001fbf7 <Vm::x87Handler(regs*)+0x74>
c001fda6:	80 fa 03             	cmp    dl,0x3
c001fda9:	0f 85 d7 06 00 00    	jne    c0020486 <Vm::x87Handler(regs*)+0x903>
c001fdaf:	57                   	push   edi
c001fdb0:	57                   	push   edi
c001fdb1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdb4:	ff 36                	push   DWORD PTR [esi]
c001fdb6:	e8 1f fa ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c001fdbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc2:	89 c6                	mov    esi,eax
c001fdc4:	89 d7                	mov    edi,edx
c001fdc6:	e8 7b fc ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fdcb:	57                   	push   edi
c001fdcc:	56                   	push   esi
c001fdcd:	52                   	push   edx
c001fdce:	50                   	push   eax
c001fdcf:	e8 95 fb ff ff       	call   c001f969 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdd4:	83 c4 20             	add    esp,0x20
c001fdd7:	e8 55 fd ff ff       	call   c001fb31 <Vm::fpuPop()>
c001fddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fde0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fde3:	e9 12 fe ff ff       	jmp    c001fbfa <Vm::x87Handler(regs*)+0x77>
c001fde8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdec:	8d 50 40             	lea    edx,[eax+0x40]
c001fdef:	80 fa 07             	cmp    dl,0x7
c001fdf2:	77 29                	ja     c001fe1d <Vm::x87Handler(regs*)+0x29a>
c001fdf4:	83 ec 0c             	sub    esp,0xc
c001fdf7:	2d c0 00 00 00       	sub    eax,0xc0
c001fdfc:	50                   	push   eax
c001fdfd:	e8 44 fc ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fe02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe09:	89 c6                	mov    esi,eax
c001fe0b:	89 d7                	mov    edi,edx
c001fe0d:	e8 34 fc ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fe12:	57                   	push   edi
c001fe13:	56                   	push   esi
c001fe14:	52                   	push   edx
c001fe15:	50                   	push   eax
c001fe16:	e8 a1 fb ff ff       	call   c001f9bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe1b:	eb 2f                	jmp    c001fe4c <Vm::x87Handler(regs*)+0x2c9>
c001fe1d:	8d 50 38             	lea    edx,[eax+0x38]
c001fe20:	80 fa 07             	cmp    dl,0x7
c001fe23:	77 2f                	ja     c001fe54 <Vm::x87Handler(regs*)+0x2d1>
c001fe25:	83 ec 0c             	sub    esp,0xc
c001fe28:	2d c8 00 00 00       	sub    eax,0xc8
c001fe2d:	50                   	push   eax
c001fe2e:	e8 13 fc ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fe33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe3a:	89 c6                	mov    esi,eax
c001fe3c:	89 d7                	mov    edi,edx
c001fe3e:	e8 03 fc ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fe43:	57                   	push   edi
c001fe44:	56                   	push   esi
c001fe45:	52                   	push   edx
c001fe46:	50                   	push   eax
c001fe47:	e8 a9 fb ff ff       	call   c001f9f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe4c:	83 c4 1c             	add    esp,0x1c
c001fe4f:	e9 d8 fd ff ff       	jmp    c001fc2c <Vm::x87Handler(regs*)+0xa9>
c001fe54:	8d 50 30             	lea    edx,[eax+0x30]
c001fe57:	80 fa 07             	cmp    dl,0x7
c001fe5a:	77 0d                	ja     c001fe69 <Vm::x87Handler(regs*)+0x2e6>
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	2d d0 00 00 00       	sub    eax,0xd0
c001fe64:	e9 99 03 00 00       	jmp    c0020202 <Vm::x87Handler(regs*)+0x67f>
c001fe69:	8d 50 28             	lea    edx,[eax+0x28]
c001fe6c:	80 fa 07             	cmp    dl,0x7
c001fe6f:	77 0d                	ja     c001fe7e <Vm::x87Handler(regs*)+0x2fb>
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	2d d8 00 00 00       	sub    eax,0xd8
c001fe79:	e9 c0 03 00 00       	jmp    c002023e <Vm::x87Handler(regs*)+0x6bb>
c001fe7e:	8d 50 20             	lea    edx,[eax+0x20]
c001fe81:	80 fa 07             	cmp    dl,0x7
c001fe84:	77 1b                	ja     c001fea1 <Vm::x87Handler(regs*)+0x31e>
c001fe86:	83 ec 0c             	sub    esp,0xc
c001fe89:	2d e0 00 00 00       	sub    eax,0xe0
c001fe8e:	50                   	push   eax
c001fe8f:	e8 b2 fb ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fe94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe9b:	89 c6                	mov    esi,eax
c001fe9d:	89 d7                	mov    edi,edx
c001fe9f:	eb 22                	jmp    c001fec3 <Vm::x87Handler(regs*)+0x340>
c001fea1:	8d 50 18             	lea    edx,[eax+0x18]
c001fea4:	80 fa 07             	cmp    dl,0x7
c001fea7:	77 2d                	ja     c001fed6 <Vm::x87Handler(regs*)+0x353>
c001fea9:	83 ec 0c             	sub    esp,0xc
c001feac:	6a 00                	push   0x0
c001feae:	e8 93 fb ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001feb3:	89 c6                	mov    esi,eax
c001feb5:	89 d7                	mov    edi,edx
c001feb7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febb:	2d e8 00 00 00       	sub    eax,0xe8
c001fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec3:	e8 7e fb ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001fec8:	57                   	push   edi
c001fec9:	56                   	push   esi
c001feca:	52                   	push   edx
c001fecb:	50                   	push   eax
c001fecc:	e8 15 fb ff ff       	call   c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fed1:	e9 76 ff ff ff       	jmp    c001fe4c <Vm::x87Handler(regs*)+0x2c9>
c001fed6:	8d 50 10             	lea    edx,[eax+0x10]
c001fed9:	80 fa 07             	cmp    dl,0x7
c001fedc:	77 1b                	ja     c001fef9 <Vm::x87Handler(regs*)+0x376>
c001fede:	83 ec 0c             	sub    esp,0xc
c001fee1:	2d f0 00 00 00       	sub    eax,0xf0
c001fee6:	50                   	push   eax
c001fee7:	e8 5a fb ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001feec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fef3:	89 c6                	mov    esi,eax
c001fef5:	89 d7                	mov    edi,edx
c001fef7:	eb 22                	jmp    c001ff1b <Vm::x87Handler(regs*)+0x398>
c001fef9:	3c f7                	cmp    al,0xf7
c001fefb:	0f 86 d1 03 00 00    	jbe    c00202d2 <Vm::x87Handler(regs*)+0x74f>
c001ff01:	83 ec 0c             	sub    esp,0xc
c001ff04:	6a 00                	push   0x0
c001ff06:	e8 3b fb ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ff0b:	89 c6                	mov    esi,eax
c001ff0d:	89 d7                	mov    edi,edx
c001ff0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff13:	2d f8 00 00 00       	sub    eax,0xf8
c001ff18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff1b:	e8 26 fb ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ff20:	57                   	push   edi
c001ff21:	56                   	push   esi
c001ff22:	52                   	push   edx
c001ff23:	50                   	push   eax
c001ff24:	e8 eb fa ff ff       	call   c001fa14 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff29:	83 c4 1c             	add    esp,0x1c
c001ff2c:	52                   	push   edx
c001ff2d:	50                   	push   eax
c001ff2e:	6a 00                	push   0x0
c001ff30:	e9 51 02 00 00       	jmp    c0020186 <Vm::x87Handler(regs*)+0x603>
c001ff35:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff39:	8d 50 40             	lea    edx,[eax+0x40]
c001ff3c:	80 fa 07             	cmp    dl,0x7
c001ff3f:	77 37                	ja     c001ff78 <Vm::x87Handler(regs*)+0x3f5>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	2d c0 00 00 00       	sub    eax,0xc0
c001ff49:	50                   	push   eax
c001ff4a:	e8 f7 fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ff4f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff56:	89 c6                	mov    esi,eax
c001ff58:	89 d7                	mov    edi,edx
c001ff5a:	e8 e7 fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ff5f:	57                   	push   edi
c001ff60:	56                   	push   esi
c001ff61:	52                   	push   edx
c001ff62:	50                   	push   eax
c001ff63:	e8 54 fa ff ff       	call   c001f9bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff68:	83 c4 1c             	add    esp,0x1c
c001ff6b:	52                   	push   edx
c001ff6c:	50                   	push   eax
c001ff6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff71:	2d c0 00 00 00       	sub    eax,0xc0
c001ff76:	eb 3d                	jmp    c001ffb5 <Vm::x87Handler(regs*)+0x432>
c001ff78:	8d 50 38             	lea    edx,[eax+0x38]
c001ff7b:	80 fa 07             	cmp    dl,0x7
c001ff7e:	77 3b                	ja     c001ffbb <Vm::x87Handler(regs*)+0x438>
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	2d c8 00 00 00       	sub    eax,0xc8
c001ff88:	50                   	push   eax
c001ff89:	e8 b8 fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ff8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff95:	89 c6                	mov    esi,eax
c001ff97:	89 d7                	mov    edi,edx
c001ff99:	e8 a8 fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ff9e:	57                   	push   edi
c001ff9f:	56                   	push   esi
c001ffa0:	52                   	push   edx
c001ffa1:	50                   	push   eax
c001ffa2:	e8 4e fa ff ff       	call   c001f9f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffa7:	83 c4 1c             	add    esp,0x1c
c001ffaa:	52                   	push   edx
c001ffab:	50                   	push   eax
c001ffac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb0:	2d c8 00 00 00       	sub    eax,0xc8
c001ffb5:	50                   	push   eax
c001ffb6:	e9 75 fc ff ff       	jmp    c001fc30 <Vm::x87Handler(regs*)+0xad>
c001ffbb:	83 c0 18             	add    eax,0x18
c001ffbe:	3c 07                	cmp    al,0x7
c001ffc0:	0f 87 3b 04 00 00    	ja     c0020401 <Vm::x87Handler(regs*)+0x87e>
c001ffc6:	83 ec 0c             	sub    esp,0xc
c001ffc9:	6a 00                	push   0x0
c001ffcb:	e8 76 fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ffd0:	89 c6                	mov    esi,eax
c001ffd2:	89 d7                	mov    edi,edx
c001ffd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd8:	2d e8 00 00 00       	sub    eax,0xe8
c001ffdd:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffe0:	e8 61 fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c001ffe5:	57                   	push   edi
c001ffe6:	56                   	push   esi
c001ffe7:	52                   	push   edx
c001ffe8:	50                   	push   eax
c001ffe9:	e8 f8 f9 ff ff       	call   c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffee:	83 c4 1c             	add    esp,0x1c
c001fff1:	52                   	push   edx
c001fff2:	50                   	push   eax
c001fff3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff7:	2d e8 00 00 00       	sub    eax,0xe8
c001fffc:	eb b7                	jmp    c001ffb5 <Vm::x87Handler(regs*)+0x432>
c001fffe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020002:	8d 50 40             	lea    edx,[eax+0x40]
c0020005:	80 fa 07             	cmp    dl,0x7
c0020008:	77 3a                	ja     c0020044 <Vm::x87Handler(regs*)+0x4c1>
c002000a:	83 ec 0c             	sub    esp,0xc
c002000d:	2d c0 00 00 00       	sub    eax,0xc0
c0020012:	50                   	push   eax
c0020013:	e8 2e fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020018:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002001f:	89 c6                	mov    esi,eax
c0020021:	89 d7                	mov    edi,edx
c0020023:	e8 1e fa ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020028:	57                   	push   edi
c0020029:	56                   	push   esi
c002002a:	52                   	push   edx
c002002b:	50                   	push   eax
c002002c:	e8 8b f9 ff ff       	call   c001f9bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020031:	83 c4 1c             	add    esp,0x1c
c0020034:	52                   	push   edx
c0020035:	50                   	push   eax
c0020036:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002003a:	2d c0 00 00 00       	sub    eax,0xc0
c002003f:	e9 9e 01 00 00       	jmp    c00201e2 <Vm::x87Handler(regs*)+0x65f>
c0020044:	8d 50 20             	lea    edx,[eax+0x20]
c0020047:	80 fa 07             	cmp    dl,0x7
c002004a:	77 3a                	ja     c0020086 <Vm::x87Handler(regs*)+0x503>
c002004c:	83 ec 0c             	sub    esp,0xc
c002004f:	2d e0 00 00 00       	sub    eax,0xe0
c0020054:	50                   	push   eax
c0020055:	e8 ec f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002005a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020061:	89 c6                	mov    esi,eax
c0020063:	89 d7                	mov    edi,edx
c0020065:	e8 dc f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002006a:	57                   	push   edi
c002006b:	56                   	push   esi
c002006c:	52                   	push   edx
c002006d:	50                   	push   eax
c002006e:	e8 73 f9 ff ff       	call   c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020073:	83 c4 1c             	add    esp,0x1c
c0020076:	52                   	push   edx
c0020077:	50                   	push   eax
c0020078:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002007c:	2d e0 00 00 00       	sub    eax,0xe0
c0020081:	e9 5c 01 00 00       	jmp    c00201e2 <Vm::x87Handler(regs*)+0x65f>
c0020086:	8d 50 18             	lea    edx,[eax+0x18]
c0020089:	80 fa 07             	cmp    dl,0x7
c002008c:	77 3b                	ja     c00200c9 <Vm::x87Handler(regs*)+0x546>
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	6a 00                	push   0x0
c0020093:	e8 ae f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020098:	89 c6                	mov    esi,eax
c002009a:	89 d7                	mov    edi,edx
c002009c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a0:	2d e8 00 00 00       	sub    eax,0xe8
c00200a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00200a8:	e8 99 f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00200ad:	57                   	push   edi
c00200ae:	56                   	push   esi
c00200af:	52                   	push   edx
c00200b0:	50                   	push   eax
c00200b1:	e8 30 f9 ff ff       	call   c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200b6:	83 c4 1c             	add    esp,0x1c
c00200b9:	52                   	push   edx
c00200ba:	50                   	push   eax
c00200bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200bf:	2d e8 00 00 00       	sub    eax,0xe8
c00200c4:	e9 19 01 00 00       	jmp    c00201e2 <Vm::x87Handler(regs*)+0x65f>
c00200c9:	8d 50 38             	lea    edx,[eax+0x38]
c00200cc:	80 fa 07             	cmp    dl,0x7
c00200cf:	77 37                	ja     c0020108 <Vm::x87Handler(regs*)+0x585>
c00200d1:	83 ec 0c             	sub    esp,0xc
c00200d4:	2d c8 00 00 00       	sub    eax,0xc8
c00200d9:	50                   	push   eax
c00200da:	e8 67 f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00200df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200e6:	89 c6                	mov    esi,eax
c00200e8:	89 d7                	mov    edi,edx
c00200ea:	e8 57 f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00200ef:	57                   	push   edi
c00200f0:	56                   	push   esi
c00200f1:	52                   	push   edx
c00200f2:	50                   	push   eax
c00200f3:	e8 fd f8 ff ff       	call   c001f9f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200f8:	83 c4 1c             	add    esp,0x1c
c00200fb:	52                   	push   edx
c00200fc:	50                   	push   eax
c00200fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020101:	2d c8 00 00 00       	sub    eax,0xc8
c0020106:	eb 7d                	jmp    c0020185 <Vm::x87Handler(regs*)+0x602>
c0020108:	3c f7                	cmp    al,0xf7
c002010a:	76 38                	jbe    c0020144 <Vm::x87Handler(regs*)+0x5c1>
c002010c:	83 ec 0c             	sub    esp,0xc
c002010f:	6a 00                	push   0x0
c0020111:	e8 30 f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020116:	89 c6                	mov    esi,eax
c0020118:	89 d7                	mov    edi,edx
c002011a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002011e:	2d f8 00 00 00       	sub    eax,0xf8
c0020123:	89 04 24             	mov    DWORD PTR [esp],eax
c0020126:	e8 1b f9 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002012b:	57                   	push   edi
c002012c:	56                   	push   esi
c002012d:	52                   	push   edx
c002012e:	50                   	push   eax
c002012f:	e8 e0 f8 ff ff       	call   c001fa14 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020134:	83 c4 1c             	add    esp,0x1c
c0020137:	52                   	push   edx
c0020138:	50                   	push   eax
c0020139:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002013d:	2d f8 00 00 00       	sub    eax,0xf8
c0020142:	eb 41                	jmp    c0020185 <Vm::x87Handler(regs*)+0x602>
c0020144:	8d 50 10             	lea    edx,[eax+0x10]
c0020147:	80 fa 07             	cmp    dl,0x7
c002014a:	0f 87 5a 01 00 00    	ja     c00202aa <Vm::x87Handler(regs*)+0x727>
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	2d f0 00 00 00       	sub    eax,0xf0
c0020158:	50                   	push   eax
c0020159:	e8 e8 f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002015e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020165:	89 c6                	mov    esi,eax
c0020167:	89 d7                	mov    edi,edx
c0020169:	e8 d8 f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002016e:	57                   	push   edi
c002016f:	56                   	push   esi
c0020170:	52                   	push   edx
c0020171:	50                   	push   eax
c0020172:	e8 9d f8 ff ff       	call   c001fa14 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020177:	83 c4 1c             	add    esp,0x1c
c002017a:	52                   	push   edx
c002017b:	50                   	push   eax
c002017c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020180:	2d f0 00 00 00       	sub    eax,0xf0
c0020185:	50                   	push   eax
c0020186:	e8 fe f8 ff ff       	call   c001fa89 <Vm::fpuSetReg(int, unsigned long long)>
c002018b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002018f:	e8 9d f9 ff ff       	call   c001fb31 <Vm::fpuPop()>
c0020194:	e9 5e fa ff ff       	jmp    c001fbf7 <Vm::x87Handler(regs*)+0x74>
c0020199:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002019d:	8d 50 30             	lea    edx,[eax+0x30]
c00201a0:	80 fa 07             	cmp    dl,0x7
c00201a3:	77 1d                	ja     c00201c2 <Vm::x87Handler(regs*)+0x63f>
c00201a5:	83 ec 0c             	sub    esp,0xc
c00201a8:	6a 00                	push   0x0
c00201aa:	e8 97 f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00201af:	83 c4 0c             	add    esp,0xc
c00201b2:	52                   	push   edx
c00201b3:	50                   	push   eax
c00201b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201b8:	2d d0 00 00 00       	sub    eax,0xd0
c00201bd:	e9 f3 fd ff ff       	jmp    c001ffb5 <Vm::x87Handler(regs*)+0x432>
c00201c2:	8d 50 28             	lea    edx,[eax+0x28]
c00201c5:	80 fa 07             	cmp    dl,0x7
c00201c8:	77 28                	ja     c00201f2 <Vm::x87Handler(regs*)+0x66f>
c00201ca:	83 ec 0c             	sub    esp,0xc
c00201cd:	6a 00                	push   0x0
c00201cf:	e8 72 f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00201d4:	83 c4 0c             	add    esp,0xc
c00201d7:	52                   	push   edx
c00201d8:	50                   	push   eax
c00201d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201dd:	2d d8 00 00 00       	sub    eax,0xd8
c00201e2:	50                   	push   eax
c00201e3:	e8 a1 f8 ff ff       	call   c001fa89 <Vm::fpuSetReg(int, unsigned long long)>
c00201e8:	e8 44 f9 ff ff       	call   c001fb31 <Vm::fpuPop()>
c00201ed:	e9 01 fa ff ff       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0x70>
c00201f2:	8d 50 20             	lea    edx,[eax+0x20]
c00201f5:	80 fa 07             	cmp    dl,0x7
c00201f8:	77 30                	ja     c002022a <Vm::x87Handler(regs*)+0x6a7>
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	2d e0 00 00 00       	sub    eax,0xe0
c0020202:	50                   	push   eax
c0020203:	e8 3e f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020208:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002020f:	89 c6                	mov    esi,eax
c0020211:	89 d7                	mov    edi,edx
c0020213:	e8 2e f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020218:	57                   	push   edi
c0020219:	56                   	push   esi
c002021a:	52                   	push   edx
c002021b:	50                   	push   eax
c002021c:	e8 48 f7 ff ff       	call   c001f969 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020221:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020225:	e9 54 02 00 00       	jmp    c002047e <Vm::x87Handler(regs*)+0x8fb>
c002022a:	8d 50 18             	lea    edx,[eax+0x18]
c002022d:	80 fa 07             	cmp    dl,0x7
c0020230:	0f 87 43 fb ff ff    	ja     c001fd79 <Vm::x87Handler(regs*)+0x1f6>
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	2d e8 00 00 00       	sub    eax,0xe8
c002023e:	50                   	push   eax
c002023f:	e8 02 f8 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020244:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002024b:	89 c6                	mov    esi,eax
c002024d:	89 d7                	mov    edi,edx
c002024f:	e8 f2 f7 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020254:	57                   	push   edi
c0020255:	56                   	push   esi
c0020256:	52                   	push   edx
c0020257:	50                   	push   eax
c0020258:	e8 0c f7 ff ff       	call   c001f969 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002025d:	83 c4 20             	add    esp,0x20
c0020260:	e8 cc f8 ff ff       	call   c001fb31 <Vm::fpuPop()>
c0020265:	eb 62                	jmp    c00202c9 <Vm::x87Handler(regs*)+0x746>
c0020267:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002026b:	0f 85 0f 01 00 00    	jne    c0020380 <Vm::x87Handler(regs*)+0x7fd>
c0020271:	83 ec 0c             	sub    esp,0xc
c0020274:	6a 01                	push   0x1
c0020276:	e8 cb f7 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002027b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020282:	89 c6                	mov    esi,eax
c0020284:	89 d7                	mov    edi,edx
c0020286:	e8 bb f7 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002028b:	57                   	push   edi
c002028c:	56                   	push   esi
c002028d:	52                   	push   edx
c002028e:	50                   	push   eax
c002028f:	e8 d5 f6 ff ff       	call   c001f969 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020294:	83 c4 20             	add    esp,0x20
c0020297:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002029b:	e8 91 f8 ff ff       	call   c001fb31 <Vm::fpuPop()>
c00202a0:	e8 8c f8 ff ff       	call   c001fb31 <Vm::fpuPop()>
c00202a5:	e9 50 f9 ff ff       	jmp    c001fbfa <Vm::x87Handler(regs*)+0x77>
c00202aa:	3c d9                	cmp    al,0xd9
c00202ac:	0f 85 b5 02 00 00    	jne    c0020567 <Vm::x87Handler(regs*)+0x9e4>
c00202b2:	eb bd                	jmp    c0020271 <Vm::x87Handler(regs*)+0x6ee>
c00202b4:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202b8:	0f 85 ea 02 00 00    	jne    c00205a8 <Vm::x87Handler(regs*)+0xa25>
c00202be:	0f b7 05 c0 25 03 c0 	movzx  eax,WORD PTR ds:0xc00325c0
c00202c5:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202c9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202cd:	e9 28 f9 ff ff       	jmp    c001fbfa <Vm::x87Handler(regs*)+0x77>
c00202d2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202d6:	84 d2                	test   dl,dl
c00202d8:	75 0f                	jne    c00202e9 <Vm::x87Handler(regs*)+0x766>
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	ff 36                	push   DWORD PTR [esi]
c00202df:	e8 b1 f4 ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c00202e4:	e9 2c 01 00 00       	jmp    c0020415 <Vm::x87Handler(regs*)+0x892>
c00202e9:	80 fa 01             	cmp    dl,0x1
c00202ec:	75 0f                	jne    c00202fd <Vm::x87Handler(regs*)+0x77a>
c00202ee:	83 ec 0c             	sub    esp,0xc
c00202f1:	ff 36                	push   DWORD PTR [esi]
c00202f3:	e8 9d f4 ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c00202f8:	e9 81 02 00 00       	jmp    c002057e <Vm::x87Handler(regs*)+0x9fb>
c00202fd:	80 fa 04             	cmp    dl,0x4
c0020300:	75 0f                	jne    c0020311 <Vm::x87Handler(regs*)+0x78e>
c0020302:	83 ec 0c             	sub    esp,0xc
c0020305:	ff 36                	push   DWORD PTR [esi]
c0020307:	e8 89 f4 ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c002030c:	e9 86 01 00 00       	jmp    c0020497 <Vm::x87Handler(regs*)+0x914>
c0020311:	80 fa 05             	cmp    dl,0x5
c0020314:	75 1b                	jne    c0020331 <Vm::x87Handler(regs*)+0x7ae>
c0020316:	83 ec 0c             	sub    esp,0xc
c0020319:	6a 00                	push   0x0
c002031b:	e8 26 f7 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020320:	89 c7                	mov    edi,eax
c0020322:	89 d5                	mov    ebp,edx
c0020324:	58                   	pop    eax
c0020325:	ff 36                	push   DWORD PTR [esi]
c0020327:	e8 69 f4 ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c002032c:	e9 a3 01 00 00       	jmp    c00204d4 <Vm::x87Handler(regs*)+0x951>
c0020331:	80 fa 06             	cmp    dl,0x6
c0020334:	75 0f                	jne    c0020345 <Vm::x87Handler(regs*)+0x7c2>
c0020336:	83 ec 0c             	sub    esp,0xc
c0020339:	ff 36                	push   DWORD PTR [esi]
c002033b:	e8 55 f4 ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c0020340:	e9 ae 01 00 00       	jmp    c00204f3 <Vm::x87Handler(regs*)+0x970>
c0020345:	31 c0                	xor    eax,eax
c0020347:	80 fa 07             	cmp    dl,0x7
c002034a:	0f 85 94 02 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c0020350:	83 ec 0c             	sub    esp,0xc
c0020353:	6a 00                	push   0x0
c0020355:	e8 ec f6 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002035a:	89 c7                	mov    edi,eax
c002035c:	89 d5                	mov    ebp,edx
c002035e:	58                   	pop    eax
c002035f:	ff 36                	push   DWORD PTR [esi]
c0020361:	e8 2f f4 ff ff       	call   c001f795 <Vm::fpu32ToInternal(unsigned int)>
c0020366:	e9 cb 01 00 00       	jmp    c0020536 <Vm::x87Handler(regs*)+0x9b3>
c002036b:	80 fa 03             	cmp    dl,0x3
c002036e:	0f 85 d3 01 00 00    	jne    c0020547 <Vm::x87Handler(regs*)+0x9c4>
c0020374:	e8 b8 f7 ff ff       	call   c001fb31 <Vm::fpuPop()>
c0020379:	51                   	push   ecx
c002037a:	51                   	push   ecx
c002037b:	e9 de 01 00 00       	jmp    c002055e <Vm::x87Handler(regs*)+0x9db>
c0020380:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020384:	80 fa 01             	cmp    dl,0x1
c0020387:	75 09                	jne    c0020392 <Vm::x87Handler(regs*)+0x80f>
c0020389:	57                   	push   edi
c002038a:	57                   	push   edi
c002038b:	8b 06                	mov    eax,DWORD PTR [esi]
c002038d:	e9 e3 01 00 00       	jmp    c0020575 <Vm::x87Handler(regs*)+0x9f2>
c0020392:	80 fa 04             	cmp    dl,0x4
c0020395:	75 12                	jne    c00203a9 <Vm::x87Handler(regs*)+0x826>
c0020397:	31 d2                	xor    edx,edx
c0020399:	51                   	push   ecx
c002039a:	51                   	push   ecx
c002039b:	8b 06                	mov    eax,DWORD PTR [esi]
c002039d:	52                   	push   edx
c002039e:	50                   	push   eax
c002039f:	e8 d0 f4 ff ff       	call   c001f874 <Vm::fpuLongToFloat(long long)>
c00203a4:	e9 ee 00 00 00       	jmp    c0020497 <Vm::x87Handler(regs*)+0x914>
c00203a9:	31 c0                	xor    eax,eax
c00203ab:	80 fa 07             	cmp    dl,0x7
c00203ae:	0f 85 30 02 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c00203b4:	83 ec 0c             	sub    esp,0xc
c00203b7:	6a 00                	push   0x0
c00203b9:	e8 88 f6 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00203be:	89 c7                	mov    edi,eax
c00203c0:	89 d5                	mov    ebp,edx
c00203c2:	58                   	pop    eax
c00203c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00203c5:	5a                   	pop    edx
c00203c6:	31 d2                	xor    edx,edx
c00203c8:	52                   	push   edx
c00203c9:	50                   	push   eax
c00203ca:	e8 a5 f4 ff ff       	call   c001f874 <Vm::fpuLongToFloat(long long)>
c00203cf:	e9 62 01 00 00       	jmp    c0020536 <Vm::x87Handler(regs*)+0x9b3>
c00203d4:	84 d2                	test   dl,dl
c00203d6:	75 0d                	jne    c00203e5 <Vm::x87Handler(regs*)+0x862>
c00203d8:	31 d2                	xor    edx,edx
c00203da:	55                   	push   ebp
c00203db:	55                   	push   ebp
c00203dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00203de:	52                   	push   edx
c00203df:	50                   	push   eax
c00203e0:	e9 d3 01 00 00       	jmp    c00205b8 <Vm::x87Handler(regs*)+0xa35>
c00203e5:	31 c0                	xor    eax,eax
c00203e7:	80 fa 02             	cmp    dl,0x2
c00203ea:	0f 85 f4 01 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c00203f0:	83 ec 0c             	sub    esp,0xc
c00203f3:	6a 00                	push   0x0
c00203f5:	e8 4c f6 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00203fa:	59                   	pop    ecx
c00203fb:	5f                   	pop    edi
c00203fc:	e9 6a f9 ff ff       	jmp    c001fd6b <Vm::x87Handler(regs*)+0x1e8>
c0020401:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020405:	84 d2                	test   dl,dl
c0020407:	75 2a                	jne    c0020433 <Vm::x87Handler(regs*)+0x8b0>
c0020409:	50                   	push   eax
c002040a:	50                   	push   eax
c002040b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002040e:	ff 36                	push   DWORD PTR [esi]
c0020410:	e8 c5 f3 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c0020415:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002041c:	89 c6                	mov    esi,eax
c002041e:	89 d7                	mov    edi,edx
c0020420:	e8 21 f6 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020425:	57                   	push   edi
c0020426:	56                   	push   esi
c0020427:	52                   	push   edx
c0020428:	50                   	push   eax
c0020429:	e8 8e f5 ff ff       	call   c001f9bc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002042e:	e9 64 01 00 00       	jmp    c0020597 <Vm::x87Handler(regs*)+0xa14>
c0020433:	80 fa 01             	cmp    dl,0x1
c0020436:	75 11                	jne    c0020449 <Vm::x87Handler(regs*)+0x8c6>
c0020438:	50                   	push   eax
c0020439:	50                   	push   eax
c002043a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002043d:	ff 36                	push   DWORD PTR [esi]
c002043f:	e8 96 f3 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c0020444:	e9 35 01 00 00       	jmp    c002057e <Vm::x87Handler(regs*)+0x9fb>
c0020449:	80 fa 02             	cmp    dl,0x2
c002044c:	0f 85 54 f9 ff ff    	jne    c001fda6 <Vm::x87Handler(regs*)+0x223>
c0020452:	55                   	push   ebp
c0020453:	55                   	push   ebp
c0020454:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020457:	ff 36                	push   DWORD PTR [esi]
c0020459:	e8 7c f3 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c002045e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020465:	89 c6                	mov    esi,eax
c0020467:	89 d7                	mov    edi,edx
c0020469:	e8 d8 f5 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002046e:	57                   	push   edi
c002046f:	56                   	push   esi
c0020470:	52                   	push   edx
c0020471:	50                   	push   eax
c0020472:	e8 f2 f4 ff ff       	call   c001f969 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020477:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002047b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002047e:	83 c4 20             	add    esp,0x20
c0020481:	e9 74 f7 ff ff       	jmp    c001fbfa <Vm::x87Handler(regs*)+0x77>
c0020486:	80 fa 04             	cmp    dl,0x4
c0020489:	75 2a                	jne    c00204b5 <Vm::x87Handler(regs*)+0x932>
c002048b:	51                   	push   ecx
c002048c:	51                   	push   ecx
c002048d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020490:	ff 36                	push   DWORD PTR [esi]
c0020492:	e8 43 f3 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c0020497:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049e:	89 c6                	mov    esi,eax
c00204a0:	89 d7                	mov    edi,edx
c00204a2:	e8 9f f5 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00204a7:	57                   	push   edi
c00204a8:	56                   	push   esi
c00204a9:	52                   	push   edx
c00204aa:	50                   	push   eax
c00204ab:	e8 36 f5 ff ff       	call   c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204b0:	e9 e2 00 00 00       	jmp    c0020597 <Vm::x87Handler(regs*)+0xa14>
c00204b5:	80 fa 05             	cmp    dl,0x5
c00204b8:	75 28                	jne    c00204e2 <Vm::x87Handler(regs*)+0x95f>
c00204ba:	83 ec 0c             	sub    esp,0xc
c00204bd:	6a 00                	push   0x0
c00204bf:	e8 82 f5 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c00204c4:	89 c7                	mov    edi,eax
c00204c6:	89 d5                	mov    ebp,edx
c00204c8:	58                   	pop    eax
c00204c9:	5a                   	pop    edx
c00204ca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204cd:	ff 36                	push   DWORD PTR [esi]
c00204cf:	e8 06 f3 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c00204d4:	83 c4 10             	add    esp,0x10
c00204d7:	55                   	push   ebp
c00204d8:	57                   	push   edi
c00204d9:	52                   	push   edx
c00204da:	50                   	push   eax
c00204db:	e8 06 f5 ff ff       	call   c001f9e6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204e0:	eb 60                	jmp    c0020542 <Vm::x87Handler(regs*)+0x9bf>
c00204e2:	80 fa 06             	cmp    dl,0x6
c00204e5:	75 2a                	jne    c0020511 <Vm::x87Handler(regs*)+0x98e>
c00204e7:	51                   	push   ecx
c00204e8:	51                   	push   ecx
c00204e9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204ec:	ff 36                	push   DWORD PTR [esi]
c00204ee:	e8 e7 f2 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c00204f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204fa:	89 c6                	mov    esi,eax
c00204fc:	89 d7                	mov    edi,edx
c00204fe:	e8 43 f5 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020503:	57                   	push   edi
c0020504:	56                   	push   esi
c0020505:	52                   	push   edx
c0020506:	50                   	push   eax
c0020507:	e8 08 f5 ff ff       	call   c001fa14 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002050c:	e9 86 00 00 00       	jmp    c0020597 <Vm::x87Handler(regs*)+0xa14>
c0020511:	31 c0                	xor    eax,eax
c0020513:	80 fa 07             	cmp    dl,0x7
c0020516:	0f 85 c8 00 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c002051c:	83 ec 0c             	sub    esp,0xc
c002051f:	6a 00                	push   0x0
c0020521:	e8 20 f5 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c0020526:	89 c7                	mov    edi,eax
c0020528:	89 d5                	mov    ebp,edx
c002052a:	58                   	pop    eax
c002052b:	5a                   	pop    edx
c002052c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002052f:	ff 36                	push   DWORD PTR [esi]
c0020531:	e8 a4 f2 ff ff       	call   c001f7da <Vm::fpu64ToInternal(unsigned long long)>
c0020536:	83 c4 10             	add    esp,0x10
c0020539:	55                   	push   ebp
c002053a:	57                   	push   edi
c002053b:	52                   	push   edx
c002053c:	50                   	push   eax
c002053d:	e8 d2 f4 ff ff       	call   c001fa14 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020542:	83 c4 0c             	add    esp,0xc
c0020545:	eb 53                	jmp    c002059a <Vm::x87Handler(regs*)+0xa17>
c0020547:	31 c0                	xor    eax,eax
c0020549:	80 fa 02             	cmp    dl,0x2
c002054c:	0f 85 92 00 00 00    	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	6a 00                	push   0x0
c0020557:	e8 ea f4 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002055c:	59                   	pop    ecx
c002055d:	5f                   	pop    edi
c002055e:	52                   	push   edx
c002055f:	50                   	push   eax
c0020560:	e8 27 f2 ff ff       	call   c001f78c <Vm::fpuInternalTo64(unsigned long long)>
c0020565:	eb 70                	jmp    c00205d7 <Vm::x87Handler(regs*)+0xa54>
c0020567:	31 c0                	xor    eax,eax
c0020569:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002056e:	75 74                	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c0020570:	50                   	push   eax
c0020571:	50                   	push   eax
c0020572:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020575:	31 d2                	xor    edx,edx
c0020577:	52                   	push   edx
c0020578:	50                   	push   eax
c0020579:	e8 f6 f2 ff ff       	call   c001f874 <Vm::fpuLongToFloat(long long)>
c002057e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020585:	89 c6                	mov    esi,eax
c0020587:	89 d7                	mov    edi,edx
c0020589:	e8 b8 f4 ff ff       	call   c001fa46 <Vm::fpuGetReg(int)>
c002058e:	57                   	push   edi
c002058f:	56                   	push   esi
c0020590:	52                   	push   edx
c0020591:	50                   	push   eax
c0020592:	e8 5e f4 ff ff       	call   c001f9f5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020597:	83 c4 1c             	add    esp,0x1c
c002059a:	52                   	push   edx
c002059b:	50                   	push   eax
c002059c:	6a 00                	push   0x0
c002059e:	e8 e6 f4 ff ff       	call   c001fa89 <Vm::fpuSetReg(int, unsigned long long)>
c00205a3:	e9 f2 f7 ff ff       	jmp    c001fd9a <Vm::x87Handler(regs*)+0x217>
c00205a8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205ac:	80 fa 05             	cmp    dl,0x5
c00205af:	75 11                	jne    c00205c2 <Vm::x87Handler(regs*)+0xa3f>
c00205b1:	55                   	push   ebp
c00205b2:	55                   	push   ebp
c00205b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205b6:	ff 36                	push   DWORD PTR [esi]
c00205b8:	e8 81 f2 ff ff       	call   c001f83e <Vm::fpuULongToFloat(unsigned long long)>
c00205bd:	e9 cf f7 ff ff       	jmp    c001fd91 <Vm::x87Handler(regs*)+0x20e>
c00205c2:	31 c0                	xor    eax,eax
c00205c4:	80 fa 07             	cmp    dl,0x7
c00205c7:	75 1b                	jne    c00205e4 <Vm::x87Handler(regs*)+0xa61>
c00205c9:	e8 63 f5 ff ff       	call   c001fb31 <Vm::fpuPop()>
c00205ce:	51                   	push   ecx
c00205cf:	51                   	push   ecx
c00205d0:	52                   	push   edx
c00205d1:	50                   	push   eax
c00205d2:	e8 0c f2 ff ff       	call   c001f7e3 <Vm::fpuFloatToLong(unsigned long long)>
c00205d7:	83 c4 10             	add    esp,0x10
c00205da:	89 06                	mov    DWORD PTR [esi],eax
c00205dc:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205df:	e9 f8 f7 ff ff       	jmp    c001fddc <Vm::x87Handler(regs*)+0x259>
c00205e4:	83 c4 1c             	add    esp,0x1c
c00205e7:	5b                   	pop    ebx
c00205e8:	5e                   	pop    esi
c00205e9:	5f                   	pop    edi
c00205ea:	5d                   	pop    ebp
c00205eb:	c3                   	ret    

c00205ec <__static_initialization_and_destruction_0(int, int)>:
c00205ec:	83 ec 0c             	sub    esp,0xc
c00205ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205f4:	75 1a                	jne    c0020610 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205fe:	75 10                	jne    c0020610 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020600:	83 ec 0c             	sub    esp,0xc
c0020603:	68 c0 25 03 c0       	push   0xc00325c0
c0020608:	e8 3f 90 00 00       	call   c002964c <Vm::_FPUState::_FPUState()>
c002060d:	83 c4 10             	add    esp,0x10
c0020610:	90                   	nop
c0020611:	83 c4 0c             	add    esp,0xc
c0020614:	c3                   	ret    

c0020615 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020615:	83 ec 0c             	sub    esp,0xc
c0020618:	83 ec 08             	sub    esp,0x8
c002061b:	68 ff ff 00 00       	push   0xffff
c0020620:	6a 01                	push   0x1
c0020622:	e8 c5 ff ff ff       	call   c00205ec <__static_initialization_and_destruction_0(int, int)>
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	83 c4 0c             	add    esp,0xc
c002062d:	c3                   	ret    

c002062e <FAT::getName()>:
c002062e:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c0020633:	c3                   	ret    

c0020634 <FAT::tell(void*, unsigned long long*)>:
c0020634:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020639:	75 06                	jne    c0020641 <FAT::tell(void*, unsigned long long*)+0xd>
c002063b:	b8 04 00 00 00       	mov    eax,0x4
c0020640:	c3                   	ret    
c0020641:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020646:	75 06                	jne    c002064e <FAT::tell(void*, unsigned long long*)+0x1a>
c0020648:	b8 04 00 00 00       	mov    eax,0x4
c002064d:	c3                   	ret    
c002064e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020652:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020655:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020658:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002065c:	89 01                	mov    DWORD PTR [ecx],eax
c002065e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020661:	b8 00 00 00 00       	mov    eax,0x0
c0020666:	c3                   	ret    
c0020667:	90                   	nop

c0020668 <FAT::stat(void*, unsigned long long*)>:
c0020668:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002066d:	75 06                	jne    c0020675 <FAT::stat(void*, unsigned long long*)+0xd>
c002066f:	b8 04 00 00 00       	mov    eax,0x4
c0020674:	c3                   	ret    
c0020675:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002067a:	75 06                	jne    c0020682 <FAT::stat(void*, unsigned long long*)+0x1a>
c002067c:	b8 04 00 00 00       	mov    eax,0x4
c0020681:	c3                   	ret    
c0020682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020686:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020689:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002068c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020690:	89 01                	mov    DWORD PTR [ecx],eax
c0020692:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020695:	b8 00 00 00 00       	mov    eax,0x0
c002069a:	c3                   	ret    
c002069b:	90                   	nop

c002069c <FAT::~FAT()>:
c002069c:	83 ec 0c             	sub    esp,0xc
c002069f:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c00206a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a8:	89 10                	mov    DWORD PTR [eax],edx
c00206aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ae:	83 ec 0c             	sub    esp,0xc
c00206b1:	50                   	push   eax
c00206b2:	e8 4b 25 ff ff       	call   c0012c02 <Filesystem::~Filesystem()>
c00206b7:	83 c4 10             	add    esp,0x10
c00206ba:	90                   	nop
c00206bb:	83 c4 0c             	add    esp,0xc
c00206be:	c3                   	ret    
c00206bf:	90                   	nop

c00206c0 <FAT::~FAT()>:
c00206c0:	83 ec 0c             	sub    esp,0xc
c00206c3:	83 ec 0c             	sub    esp,0xc
c00206c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ca:	e8 cd ff ff ff       	call   c002069c <FAT::~FAT()>
c00206cf:	83 c4 10             	add    esp,0x10
c00206d2:	83 ec 08             	sub    esp,0x8
c00206d5:	6a 08                	push   0x8
c00206d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206db:	e8 13 21 ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00206e0:	83 c4 10             	add    esp,0x10
c00206e3:	83 c4 0c             	add    esp,0xc
c00206e6:	c3                   	ret    
c00206e7:	90                   	nop

c00206e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206e8:	83 ec 1c             	sub    esp,0x1c
c00206eb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206f2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206fb:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0020702:	83 f8 ff             	cmp    eax,0xffffffff
c0020705:	75 34                	jne    c002073b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020707:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002070b:	88 c2                	mov    dl,al
c002070d:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020712:	01 d0                	add    eax,edx
c0020714:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020718:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c002071e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020722:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020729:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c002072e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020732:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020739:	eb 17                	jmp    c0020752 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002073b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002073f:	88 c2                	mov    dl,al
c0020741:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020745:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c002074c:	01 d0                	add    eax,edx
c002074e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020752:	83 ec 04             	sub    esp,0x4
c0020755:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020759:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002075d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020761:	50                   	push   eax
c0020762:	e8 97 65 fe ff       	call   c0006cfe <f_getlabel>
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002076e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020773:	75 07                	jne    c002077c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020775:	b8 00 00 00 00       	mov    eax,0x0
c002077a:	eb 05                	jmp    c0020781 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002077c:	b8 01 00 00 00       	mov    eax,0x1
c0020781:	83 c4 1c             	add    esp,0x1c
c0020784:	c3                   	ret    
c0020785:	90                   	nop

c0020786 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020786:	57                   	push   edi
c0020787:	83 ec 58             	sub    esp,0x58
c002078a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020792:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020796:	b9 0f 00 00 00       	mov    ecx,0xf
c002079b:	b8 00 00 00 00       	mov    eax,0x0
c00207a0:	fc                   	cld    
c00207a1:	89 d7                	mov    edi,edx
c00207a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207a5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207a9:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00207b0:	83 f8 ff             	cmp    eax,0xffffffff
c00207b3:	75 34                	jne    c00207e9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207b5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207b9:	88 c2                	mov    dl,al
c00207bb:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c00207c0:	01 d0                	add    eax,edx
c00207c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207c6:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c00207cc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207d0:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c00207d7:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c00207dc:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207e0:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c00207e7:	eb 17                	jmp    c0020800 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207e9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207ed:	88 c2                	mov    dl,al
c00207ef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207f3:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00207fa:	01 d0                	add    eax,edx
c00207fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020800:	83 ec 08             	sub    esp,0x8
c0020803:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020807:	8d 44 24 18          	lea    eax,[esp+0x18]
c002080b:	50                   	push   eax
c002080c:	e8 3b 01 fe ff       	call   c000094c <strcat>
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	83 ec 0c             	sub    esp,0xc
c0020817:	8d 44 24 18          	lea    eax,[esp+0x18]
c002081b:	50                   	push   eax
c002081c:	e8 cb 66 fe ff       	call   c0006eec <f_setlabel>
c0020821:	83 c4 10             	add    esp,0x10
c0020824:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020828:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002082d:	75 07                	jne    c0020836 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002082f:	b8 00 00 00 00       	mov    eax,0x0
c0020834:	eb 05                	jmp    c002083b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020836:	b8 01 00 00 00       	mov    eax,0x1
c002083b:	83 c4 58             	add    esp,0x58
c002083e:	5f                   	pop    edi
c002083f:	c3                   	ret    

c0020840 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020840:	83 ec 2c             	sub    esp,0x2c
c0020843:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002084b:	83 ec 08             	sub    esp,0x8
c002084e:	68 ec d0 02 c0       	push   0xc002d0ec
c0020853:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020857:	e8 3c 00 fe ff       	call   c0000898 <strcmp>
c002085c:	83 c4 10             	add    esp,0x10
c002085f:	85 c0                	test   eax,eax
c0020861:	0f 94 c0             	sete   al
c0020864:	84 c0                	test   al,al
c0020866:	74 0d                	je     c0020875 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020868:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020870:	e9 a6 00 00 00       	jmp    c002091b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020875:	83 ec 08             	sub    esp,0x8
c0020878:	68 de d0 02 c0       	push   0xc002d0de
c002087d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020881:	e8 12 00 fe ff       	call   c0000898 <strcmp>
c0020886:	83 c4 10             	add    esp,0x10
c0020889:	85 c0                	test   eax,eax
c002088b:	0f 94 c0             	sete   al
c002088e:	84 c0                	test   al,al
c0020890:	74 0a                	je     c002089c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020892:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002089a:	eb 7f                	jmp    c002091b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002089c:	83 ec 08             	sub    esp,0x8
c002089f:	68 e4 d0 02 c0       	push   0xc002d0e4
c00208a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208a8:	e8 eb ff fd ff       	call   c0000898 <strcmp>
c00208ad:	83 c4 10             	add    esp,0x10
c00208b0:	85 c0                	test   eax,eax
c00208b2:	0f 94 c0             	sete   al
c00208b5:	84 c0                	test   al,al
c00208b7:	74 0a                	je     c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208c1:	eb 58                	jmp    c002091b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208c3:	83 ec 08             	sub    esp,0x8
c00208c6:	68 ac 9d 02 c0       	push   0xc0029dac
c00208cb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208cf:	e8 c4 ff fd ff       	call   c0000898 <strcmp>
c00208d4:	83 c4 10             	add    esp,0x10
c00208d7:	85 c0                	test   eax,eax
c00208d9:	0f 94 c0             	sete   al
c00208dc:	84 c0                	test   al,al
c00208de:	74 0a                	je     c00208ea <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208e0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208e8:	eb 31                	jmp    c002091b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208ea:	83 ec 08             	sub    esp,0x8
c00208ed:	68 ea d0 02 c0       	push   0xc002d0ea
c00208f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208f6:	e8 9d ff fd ff       	call   c0000898 <strcmp>
c00208fb:	83 c4 10             	add    esp,0x10
c00208fe:	85 c0                	test   eax,eax
c0020900:	0f 94 c0             	sete   al
c0020903:	84 c0                	test   al,al
c0020905:	74 0a                	je     c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020907:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002090f:	eb 0a                	jmp    c002091b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020911:	b8 08 00 00 00       	mov    eax,0x8
c0020916:	e9 04 01 00 00       	jmp    c0020a1f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002091b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020922:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020927:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002092b:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0020932:	83 f8 ff             	cmp    eax,0xffffffff
c0020935:	75 34                	jne    c002096b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020937:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002093b:	88 c2                	mov    dl,al
c002093d:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020942:	01 d0                	add    eax,edx
c0020944:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020948:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c002094e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020952:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020959:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c002095e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020962:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020969:	eb 17                	jmp    c0020982 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002096b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002096f:	88 c2                	mov    dl,al
c0020971:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020975:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c002097c:	01 d0                	add    eax,edx
c002097e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020986:	88 04 24             	mov    BYTE PTR [esp],al
c0020989:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002098d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020991:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020999:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002099e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00209a6:	83 ec 0c             	sub    esp,0xc
c00209a9:	68 00 20 00 00       	push   0x2000
c00209ae:	e8 d9 ee fe ff       	call   c000f88c <malloc>
c00209b3:	83 c4 10             	add    esp,0x10
c00209b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209ba:	68 00 20 00 00       	push   0x2000
c00209bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209c7:	50                   	push   eax
c00209c8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209cc:	50                   	push   eax
c00209cd:	e8 65 69 fe ff       	call   c0007337 <f_mkfs>
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209de:	75 07                	jne    c00209e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209e0:	b8 00 00 00 00       	mov    eax,0x0
c00209e5:	eb 38                	jmp    c0020a1f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209e7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209ec:	75 17                	jne    c0020a05 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209ee:	83 ec 0c             	sub    esp,0xc
c00209f1:	68 28 d1 02 c0       	push   0xc002d128
c00209f6:	e8 d8 1e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00209fb:	83 c4 10             	add    esp,0x10
c00209fe:	b8 09 00 00 00       	mov    eax,0x9
c0020a03:	eb 1a                	jmp    c0020a1f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a09:	83 ec 08             	sub    esp,0x8
c0020a0c:	50                   	push   eax
c0020a0d:	68 f0 d0 02 c0       	push   0xc002d0f0
c0020a12:	e8 bc 1e ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0020a17:	83 c4 10             	add    esp,0x10
c0020a1a:	b8 01 00 00 00       	mov    eax,0x1
c0020a1f:	83 c4 2c             	add    esp,0x2c
c0020a22:	c3                   	ret    
c0020a23:	90                   	nop

c0020a24 <FAT::tryMount(LogicalDisk*, int)>:
c0020a24:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a2a:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020a2f:	83 f8 14             	cmp    eax,0x14
c0020a32:	75 17                	jne    c0020a4b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a34:	83 ec 0c             	sub    esp,0xc
c0020a37:	68 02 d1 02 c0       	push   0xc002d102
c0020a3c:	e8 c8 98 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0020a41:	83 c4 10             	add    esp,0x10
c0020a44:	b0 00                	mov    al,0x0
c0020a46:	e9 d7 01 00 00       	jmp    c0020c22 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a4b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a52:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a5e:	3d 00 02 00 00       	cmp    eax,0x200
c0020a63:	74 07                	je     c0020a6c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a65:	b0 00                	mov    al,0x0
c0020a67:	e9 b6 01 00 00       	jmp    c0020c22 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a6c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a74:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a7b:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0020a82:	83 f8 ff             	cmp    eax,0xffffffff
c0020a85:	74 07                	je     c0020a8e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a87:	b0 01                	mov    al,0x1
c0020a89:	e9 94 01 00 00       	jmp    c0020c22 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a8e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a98:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020aa0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020aa7:	88 c2                	mov    dl,al
c0020aa9:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020aae:	01 d0                	add    eax,edx
c0020ab0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020ab7:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c0020abd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020ac4:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020acb:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020ad0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020ad7:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020ade:	83 ec 0c             	sub    esp,0xc
c0020ae1:	68 54 02 00 00       	push   0x254
c0020ae6:	e8 a1 ed fe ff       	call   c000f88c <malloc>
c0020aeb:	83 c4 10             	add    esp,0x10
c0020aee:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020af5:	83 ec 04             	sub    esp,0x4
c0020af8:	6a 00                	push   0x0
c0020afa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b01:	50                   	push   eax
c0020b02:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b09:	e8 e7 43 fe ff       	call   c0004ef5 <f_mount>
c0020b0e:	83 c4 10             	add    esp,0x10
c0020b11:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b18:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b20:	74 19                	je     c0020b3b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b22:	83 ec 0c             	sub    esp,0xc
c0020b25:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b2c:	e8 7b ed fe ff       	call   c000f8ac <rfree>
c0020b31:	83 c4 10             	add    esp,0x10
c0020b34:	b0 00                	mov    al,0x0
c0020b36:	e9 e7 00 00 00       	jmp    c0020c22 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b3b:	83 ec 04             	sub    esp,0x4
c0020b3e:	68 00 01 00 00       	push   0x100
c0020b43:	6a 00                	push   0x0
c0020b45:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b4c:	50                   	push   eax
c0020b4d:	e8 fe fb fd ff       	call   c0000750 <memset>
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	83 ec 08             	sub    esp,0x8
c0020b58:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b5f:	50                   	push   eax
c0020b60:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b67:	50                   	push   eax
c0020b68:	e8 df fd fd ff       	call   c000094c <strcat>
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	83 ec 08             	sub    esp,0x8
c0020b73:	68 10 d1 02 c0       	push   0xc002d110
c0020b78:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b7f:	50                   	push   eax
c0020b80:	e8 c7 fd fd ff       	call   c000094c <strcat>
c0020b85:	83 c4 10             	add    esp,0x10
c0020b88:	83 ec 04             	sub    esp,0x4
c0020b8b:	6a 01                	push   0x1
c0020b8d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b94:	50                   	push   eax
c0020b95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b99:	50                   	push   eax
c0020b9a:	e8 b8 43 fe ff       	call   c0004f57 <f_open>
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ba9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020bb0:	85 c0                	test   eax,eax
c0020bb2:	74 0a                	je     c0020bbe <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020bb4:	78 2d                	js     c0020be3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bb6:	83 e8 04             	sub    eax,0x4
c0020bb9:	83 f8 01             	cmp    eax,0x1
c0020bbc:	77 25                	ja     c0020be3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bbe:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bc6:	83 ec 0c             	sub    esp,0xc
c0020bc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bcd:	50                   	push   eax
c0020bce:	e8 d6 4e fe ff       	call   c0005aa9 <f_close>
c0020bd3:	83 c4 10             	add    esp,0x10
c0020bd6:	90                   	nop
c0020bd7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bdf:	74 3a                	je     c0020c1b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020be1:	eb 2d                	jmp    c0020c10 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020be3:	83 ec 0c             	sub    esp,0xc
c0020be6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bed:	e8 ba ec fe ff       	call   c000f8ac <rfree>
c0020bf2:	83 c4 10             	add    esp,0x10
c0020bf5:	83 ec 04             	sub    esp,0x4
c0020bf8:	6a 00                	push   0x0
c0020bfa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c01:	50                   	push   eax
c0020c02:	6a 00                	push   0x0
c0020c04:	e8 ec 42 fe ff       	call   c0004ef5 <f_mount>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	b0 00                	mov    al,0x0
c0020c0e:	eb 12                	jmp    c0020c22 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c10:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020c15:	40                   	inc    eax
c0020c16:	a3 20 26 03 c0       	mov    ds:0xc0032620,eax
c0020c1b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c22:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c28:	c3                   	ret    
c0020c29:	90                   	nop

c0020c2a <FAT::getFileFirstSector(char const*)>:
c0020c2a:	53                   	push   ebx
c0020c2b:	83 ec 28             	sub    esp,0x28
c0020c2e:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020c36:	83 ec 0c             	sub    esp,0xc
c0020c39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c3d:	e8 4a ec fe ff       	call   c000f88c <malloc>
c0020c42:	83 c4 10             	add    esp,0x10
c0020c45:	89 c3                	mov    ebx,eax
c0020c47:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0020c4c:	83 ec 04             	sub    esp,0x4
c0020c4f:	50                   	push   eax
c0020c50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c54:	53                   	push   ebx
c0020c55:	e8 d8 21 ff ff       	call   c0012e32 <File::File(char const*, Process*)>
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c61:	83 ec 08             	sub    esp,0x8
c0020c64:	6a 01                	push   0x1
c0020c66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c6a:	e8 27 22 ff ff       	call   c0012e96 <File::open(FileOpenMode)>
c0020c6f:	83 c4 10             	add    esp,0x10
c0020c72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c78:	83 c0 0c             	add    eax,0xc
c0020c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c7d:	83 ec 0c             	sub    esp,0xc
c0020c80:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c84:	52                   	push   edx
c0020c85:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020c89:	52                   	push   edx
c0020c8a:	6a 00                	push   0x0
c0020c8c:	6a 04                	push   0x4
c0020c8e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020c92:	ff d0                	call   eax
c0020c94:	83 c4 20             	add    esp,0x20
c0020c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c9b:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ca9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020caf:	83 ec 04             	sub    esp,0x4
c0020cb2:	52                   	push   edx
c0020cb3:	50                   	push   eax
c0020cb4:	68 1b d1 02 c0       	push   0xc002d11b
c0020cb9:	e8 15 1c ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cc5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020ccb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ccf:	83 ec 0c             	sub    esp,0xc
c0020cd2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020cd6:	e8 19 22 ff ff       	call   c0012ef4 <File::close()>
c0020cdb:	83 c4 10             	add    esp,0x10
c0020cde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ce2:	ba 00 00 00 00       	mov    edx,0x0
c0020ce7:	83 c4 28             	add    esp,0x28
c0020cea:	5b                   	pop    ebx
c0020ceb:	c3                   	ret    

c0020cec <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020cec:	57                   	push   edi
c0020ced:	56                   	push   esi
c0020cee:	53                   	push   ebx
c0020cef:	81 ec 50 02 00 00    	sub    esp,0x250
c0020cf5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020cfd:	74 0a                	je     c0020d09 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020cff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020d07:	75 0a                	jne    c0020d13 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020d09:	b8 04 00 00 00       	mov    eax,0x4
c0020d0e:	e9 29 01 00 00       	jmp    c0020e3c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020d13:	83 ec 08             	sub    esp,0x8
c0020d16:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d1d:	50                   	push   eax
c0020d1e:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020d25:	e8 89 53 fe ff       	call   c00060b3 <f_readdir>
c0020d2a:	83 c4 10             	add    esp,0x10
c0020d2d:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020d34:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020d3b:	83 ec 0c             	sub    esp,0xc
c0020d3e:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020d45:	83 c0 1a             	add    eax,0x1a
c0020d48:	50                   	push   eax
c0020d49:	e8 1e fa fd ff       	call   c000076c <strlen>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	ba 00 00 00 00       	mov    edx,0x0
c0020d56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d5e:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020d65:	0f b6 c0             	movzx  eax,al
c0020d68:	83 e0 10             	and    eax,0x10
c0020d6b:	74 07                	je     c0020d74 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020d6d:	b8 02 00 00 00       	mov    eax,0x2
c0020d72:	eb 05                	jmp    c0020d79 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020d74:	b8 01 00 00 00       	mov    eax,0x1
c0020d79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d7d:	83 ec 08             	sub    esp,0x8
c0020d80:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d87:	83 c0 1a             	add    eax,0x1a
c0020d8a:	50                   	push   eax
c0020d8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020d8f:	83 c0 10             	add    eax,0x10
c0020d92:	50                   	push   eax
c0020d93:	e8 74 fa fd ff       	call   c000080c <strcpy>
c0020d98:	83 c4 10             	add    esp,0x10
c0020d9b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020da2:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020da9:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020dad:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020db4:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020dbb:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020dc2:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020dc9:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020dd0:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020dd7:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020dde:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020de5:	89 c6                	mov    esi,eax
c0020de7:	89 d7                	mov    edi,edx
c0020de9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020deb:	89 c8                	mov    eax,ecx
c0020ded:	89 fa                	mov    edx,edi
c0020def:	89 f3                	mov    ebx,esi
c0020df1:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020df8:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020dff:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020e06:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020e0d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e13:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020e1a:	84 c0                	test   al,al
c0020e1c:	75 07                	jne    c0020e25 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020e1e:	b8 07 00 00 00       	mov    eax,0x7
c0020e23:	eb 17                	jmp    c0020e3c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e25:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020e2c:	85 c0                	test   eax,eax
c0020e2e:	75 07                	jne    c0020e37 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020e30:	b8 00 00 00 00       	mov    eax,0x0
c0020e35:	eb 05                	jmp    c0020e3c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e37:	b8 01 00 00 00       	mov    eax,0x1
c0020e3c:	81 c4 50 02 00 00    	add    esp,0x250
c0020e42:	5b                   	pop    ebx
c0020e43:	5e                   	pop    esi
c0020e44:	5f                   	pop    edi
c0020e45:	c3                   	ret    

c0020e46 <FAT::read(void*, unsigned long, void*, int*)>:
c0020e46:	83 ec 1c             	sub    esp,0x1c
c0020e49:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e4e:	74 07                	je     c0020e57 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020e50:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e55:	75 07                	jne    c0020e5e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020e57:	b8 04 00 00 00       	mov    eax,0x4
c0020e5c:	eb 3d                	jmp    c0020e9b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e5e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e62:	50                   	push   eax
c0020e63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e6f:	e8 1f 45 fe ff       	call   c0005393 <f_read>
c0020e74:	83 c4 10             	add    esp,0x10
c0020e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e7f:	89 c2                	mov    edx,eax
c0020e81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e85:	89 10                	mov    DWORD PTR [eax],edx
c0020e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e8b:	85 c0                	test   eax,eax
c0020e8d:	75 07                	jne    c0020e96 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020e8f:	b8 00 00 00 00       	mov    eax,0x0
c0020e94:	eb 05                	jmp    c0020e9b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e96:	b8 01 00 00 00       	mov    eax,0x1
c0020e9b:	83 c4 1c             	add    esp,0x1c
c0020e9e:	c3                   	ret    
c0020e9f:	90                   	nop

c0020ea0 <FAT::write(void*, unsigned long, void*, int*)>:
c0020ea0:	83 ec 1c             	sub    esp,0x1c
c0020ea3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ea8:	74 07                	je     c0020eb1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020eaa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020eaf:	75 07                	jne    c0020eb8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020eb1:	b8 04 00 00 00       	mov    eax,0x4
c0020eb6:	eb 3d                	jmp    c0020ef5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020eb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ebc:	50                   	push   eax
c0020ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ec5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ec9:	e8 45 47 fe ff       	call   c0005613 <f_write>
c0020ece:	83 c4 10             	add    esp,0x10
c0020ed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ed5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ed9:	89 c2                	mov    edx,eax
c0020edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020edf:	89 10                	mov    DWORD PTR [eax],edx
c0020ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ee5:	85 c0                	test   eax,eax
c0020ee7:	75 07                	jne    c0020ef0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ee9:	b8 00 00 00 00       	mov    eax,0x0
c0020eee:	eb 05                	jmp    c0020ef5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ef0:	b8 01 00 00 00       	mov    eax,0x1
c0020ef5:	83 c4 1c             	add    esp,0x1c
c0020ef8:	c3                   	ret    
c0020ef9:	90                   	nop

c0020efa <FAT::close(void*)>:
c0020efa:	83 ec 1c             	sub    esp,0x1c
c0020efd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f02:	75 07                	jne    c0020f0b <FAT::close(void*)+0x11>
c0020f04:	b8 04 00 00 00       	mov    eax,0x4
c0020f09:	eb 36                	jmp    c0020f41 <FAT::close(void*)+0x47>
c0020f0b:	83 ec 0c             	sub    esp,0xc
c0020f0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f12:	e8 92 4b fe ff       	call   c0005aa9 <f_close>
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f1e:	83 ec 0c             	sub    esp,0xc
c0020f21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f25:	e8 72 e9 fe ff       	call   c000f89c <free>
c0020f2a:	83 c4 10             	add    esp,0x10
c0020f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f31:	85 c0                	test   eax,eax
c0020f33:	75 07                	jne    c0020f3c <FAT::close(void*)+0x42>
c0020f35:	b8 00 00 00 00       	mov    eax,0x0
c0020f3a:	eb 05                	jmp    c0020f41 <FAT::close(void*)+0x47>
c0020f3c:	b8 01 00 00 00       	mov    eax,0x1
c0020f41:	83 c4 1c             	add    esp,0x1c
c0020f44:	c3                   	ret    
c0020f45:	90                   	nop

c0020f46 <FAT::closeDir(void*)>:
c0020f46:	83 ec 1c             	sub    esp,0x1c
c0020f49:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f4e:	75 07                	jne    c0020f57 <FAT::closeDir(void*)+0x11>
c0020f50:	b8 04 00 00 00       	mov    eax,0x4
c0020f55:	eb 36                	jmp    c0020f8d <FAT::closeDir(void*)+0x47>
c0020f57:	83 ec 0c             	sub    esp,0xc
c0020f5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f5e:	e8 2e 51 fe ff       	call   c0006091 <f_closedir>
c0020f63:	83 c4 10             	add    esp,0x10
c0020f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f6a:	83 ec 0c             	sub    esp,0xc
c0020f6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f71:	e8 26 e9 fe ff       	call   c000f89c <free>
c0020f76:	83 c4 10             	add    esp,0x10
c0020f79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f7d:	85 c0                	test   eax,eax
c0020f7f:	75 07                	jne    c0020f88 <FAT::closeDir(void*)+0x42>
c0020f81:	b8 00 00 00 00       	mov    eax,0x0
c0020f86:	eb 05                	jmp    c0020f8d <FAT::closeDir(void*)+0x47>
c0020f88:	b8 01 00 00 00       	mov    eax,0x1
c0020f8d:	83 c4 1c             	add    esp,0x1c
c0020f90:	c3                   	ret    
c0020f91:	90                   	nop

c0020f92 <FAT::seek(void*, unsigned long long)>:
c0020f92:	83 ec 2c             	sub    esp,0x2c
c0020f95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020fa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fa5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020faa:	75 07                	jne    c0020fb3 <FAT::seek(void*, unsigned long long)+0x21>
c0020fac:	b8 04 00 00 00       	mov    eax,0x4
c0020fb1:	eb 2f                	jmp    c0020fe2 <FAT::seek(void*, unsigned long long)+0x50>
c0020fb3:	83 ec 04             	sub    esp,0x4
c0020fb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fbe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020fc2:	e8 11 4b fe ff       	call   c0005ad8 <f_lseek>
c0020fc7:	83 c4 10             	add    esp,0x10
c0020fca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fd2:	85 c0                	test   eax,eax
c0020fd4:	75 07                	jne    c0020fdd <FAT::seek(void*, unsigned long long)+0x4b>
c0020fd6:	b8 00 00 00 00       	mov    eax,0x0
c0020fdb:	eb 05                	jmp    c0020fe2 <FAT::seek(void*, unsigned long long)+0x50>
c0020fdd:	b8 01 00 00 00       	mov    eax,0x1
c0020fe2:	83 c4 2c             	add    esp,0x2c
c0020fe5:	c3                   	ret    

c0020fe6 <fatWrapperReadDisk>:
c0020fe6:	83 ec 1c             	sub    esp,0x1c
c0020fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ff1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ff5:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ff8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ffc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021000:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021005:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c002100c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021010:	83 ec 0c             	sub    esp,0xc
c0021013:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021017:	52                   	push   edx
c0021018:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002101c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021020:	50                   	push   eax
c0021021:	e8 2a 52 ff ff       	call   c0016250 <LogicalDisk::read(unsigned long long, int, void*)>
c0021026:	83 c4 20             	add    esp,0x20
c0021029:	83 c4 1c             	add    esp,0x1c
c002102c:	c3                   	ret    

c002102d <fatWrapperWriteDisk>:
c002102d:	83 ec 1c             	sub    esp,0x1c
c0021030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021034:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021038:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002103c:	89 04 24             	mov    DWORD PTR [esp],eax
c002103f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021043:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021047:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002104c:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0021053:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021057:	83 ec 0c             	sub    esp,0xc
c002105a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002105e:	52                   	push   edx
c002105f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021063:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021067:	50                   	push   eax
c0021068:	e8 4f 52 ff ff       	call   c00162bc <LogicalDisk::write(unsigned long long, int, void*)>
c002106d:	83 c4 20             	add    esp,0x20
c0021070:	83 c4 1c             	add    esp,0x1c
c0021073:	c3                   	ret    

c0021074 <fatWrapperIoctl>:
c0021074:	53                   	push   ebx
c0021075:	83 ec 28             	sub    esp,0x28
c0021078:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002107c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021080:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021084:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021088:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002108d:	75 31                	jne    c00210c0 <fatWrapperIoctl+0x4c>
c002108f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021093:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021097:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002109c:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c00210a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210a9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00210af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210b3:	66 89 02             	mov    WORD PTR [edx],ax
c00210b6:	b8 00 00 00 00       	mov    eax,0x0
c00210bb:	e9 b2 00 00 00       	jmp    c0021172 <fatWrapperIoctl+0xfe>
c00210c0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00210c5:	75 6a                	jne    c0021131 <fatWrapperIoctl+0xbd>
c00210c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210cf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210d4:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c00210db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210e1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00210e7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00210ed:	89 c8                	mov    eax,ecx
c00210ef:	89 da                	mov    edx,ebx
c00210f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00210f5:	c1 e0 0a             	shl    eax,0xa
c00210f8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00210fd:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0021104:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002110a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021110:	89 cb                	mov    ebx,ecx
c0021112:	c1 fb 1f             	sar    ebx,0x1f
c0021115:	53                   	push   ebx
c0021116:	51                   	push   ecx
c0021117:	52                   	push   edx
c0021118:	50                   	push   eax
c0021119:	e8 e6 60 00 00       	call   c0027204 <__udivdi3>
c002111e:	83 c4 10             	add    esp,0x10
c0021121:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021125:	89 01                	mov    DWORD PTR [ecx],eax
c0021127:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002112a:	b8 00 00 00 00       	mov    eax,0x0
c002112f:	eb 41                	jmp    c0021172 <fatWrapperIoctl+0xfe>
c0021131:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021136:	75 07                	jne    c002113f <fatWrapperIoctl+0xcb>
c0021138:	b8 00 00 00 00       	mov    eax,0x0
c002113d:	eb 33                	jmp    c0021172 <fatWrapperIoctl+0xfe>
c002113f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021144:	75 19                	jne    c002115f <fatWrapperIoctl+0xeb>
c0021146:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002114a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002114e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021152:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021158:	b8 00 00 00 00       	mov    eax,0x0
c002115d:	eb 13                	jmp    c0021172 <fatWrapperIoctl+0xfe>
c002115f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021164:	75 07                	jne    c002116d <fatWrapperIoctl+0xf9>
c0021166:	b8 00 00 00 00       	mov    eax,0x0
c002116b:	eb 05                	jmp    c0021172 <fatWrapperIoctl+0xfe>
c002116d:	b8 04 00 00 00       	mov    eax,0x4
c0021172:	83 c4 28             	add    esp,0x28
c0021175:	5b                   	pop    ebx
c0021176:	c3                   	ret    
c0021177:	90                   	nop

c0021178 <FAT::FAT()>:
c0021178:	83 ec 1c             	sub    esp,0x1c
c002117b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002117f:	83 ec 0c             	sub    esp,0xc
c0021182:	50                   	push   eax
c0021183:	e8 56 1a ff ff       	call   c0012bde <Filesystem::Filesystem()>
c0021188:	83 c4 10             	add    esp,0x10
c002118b:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c0021190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021194:	89 10                	mov    DWORD PTR [eax],edx
c0021196:	c7 05 20 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032620,0x0
c00211a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211a8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00211ad:	7f 15                	jg     c00211c4 <FAT::FAT()+0x4c>
c00211af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211b3:	c7 04 85 40 26 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd9c0],0xffffffff
c00211be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211c2:	eb e4                	jmp    c00211a8 <FAT::FAT()+0x30>
c00211c4:	90                   	nop
c00211c5:	83 c4 1c             	add    esp,0x1c
c00211c8:	c3                   	ret    
c00211c9:	90                   	nop

c00211ca <FAT::fixFilepath(char*)>:
c00211ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211ce:	8a 00                	mov    al,BYTE PTR [eax]
c00211d0:	3c 40                	cmp    al,0x40
c00211d2:	7e 2c                	jle    c0021200 <FAT::fixFilepath(char*)+0x36>
c00211d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211d8:	8a 00                	mov    al,BYTE PTR [eax]
c00211da:	83 e8 41             	sub    eax,0x41
c00211dd:	88 c2                	mov    dl,al
c00211df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211e3:	88 10                	mov    BYTE PTR [eax],dl
c00211e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211e9:	8a 00                	mov    al,BYTE PTR [eax]
c00211eb:	0f be c0             	movsx  eax,al
c00211ee:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00211f5:	83 c0 30             	add    eax,0x30
c00211f8:	88 c2                	mov    dl,al
c00211fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211fe:	88 10                	mov    BYTE PTR [eax],dl
c0021200:	90                   	nop
c0021201:	c3                   	ret    

c0021202 <FAT::open(char const*, void**, FileOpenMode)>:
c0021202:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021208:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021210:	74 0a                	je     c002121c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021212:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002121a:	75 0a                	jne    c0021226 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002121c:	b8 04 00 00 00       	mov    eax,0x4
c0021221:	e9 fd 00 00 00       	jmp    c0021323 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021226:	83 ec 08             	sub    esp,0x8
c0021229:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021230:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021234:	50                   	push   eax
c0021235:	e8 d2 f5 fd ff       	call   c000080c <strcpy>
c002123a:	83 c4 10             	add    esp,0x10
c002123d:	83 ec 08             	sub    esp,0x8
c0021240:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021244:	50                   	push   eax
c0021245:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002124c:	e8 79 ff ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c0021251:	83 c4 10             	add    esp,0x10
c0021254:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002125c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021263:	83 e0 01             	and    eax,0x1
c0021266:	74 08                	je     c0021270 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021268:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021270:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021277:	83 e0 04             	and    eax,0x4
c002127a:	74 10                	je     c002128c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002127c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021284:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002128c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021293:	83 e0 02             	and    eax,0x2
c0021296:	74 08                	je     c00212a0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021298:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00212a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212a7:	83 e0 08             	and    eax,0x8
c00212aa:	74 08                	je     c00212b4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00212ac:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00212b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212bb:	83 e0 10             	and    eax,0x10
c00212be:	74 08                	je     c00212c8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00212c0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00212c8:	83 ec 0c             	sub    esp,0xc
c00212cb:	68 50 02 00 00       	push   0x250
c00212d0:	e8 b7 e5 fe ff       	call   c000f88c <malloc>
c00212d5:	83 c4 10             	add    esp,0x10
c00212d8:	89 c2                	mov    edx,eax
c00212da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212e1:	89 10                	mov    DWORD PTR [eax],edx
c00212e3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00212eb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f4:	83 ec 04             	sub    esp,0x4
c00212f7:	52                   	push   edx
c00212f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00212fc:	52                   	push   edx
c00212fd:	50                   	push   eax
c00212fe:	e8 54 3c fe ff       	call   c0004f57 <f_open>
c0021303:	83 c4 10             	add    esp,0x10
c0021306:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002130d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021315:	74 07                	je     c002131e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021317:	b8 01 00 00 00       	mov    eax,0x1
c002131c:	eb 05                	jmp    c0021323 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002131e:	b8 00 00 00 00       	mov    eax,0x0
c0021323:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021329:	c3                   	ret    

c002132a <FAT::openDir(char const*, void**)>:
c002132a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021330:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021338:	74 0a                	je     c0021344 <FAT::openDir(char const*, void**)+0x1a>
c002133a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021342:	75 07                	jne    c002134b <FAT::openDir(char const*, void**)+0x21>
c0021344:	b8 04 00 00 00       	mov    eax,0x4
c0021349:	eb 7d                	jmp    c00213c8 <FAT::openDir(char const*, void**)+0x9e>
c002134b:	83 ec 08             	sub    esp,0x8
c002134e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021355:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021359:	50                   	push   eax
c002135a:	e8 ad f4 fd ff       	call   c000080c <strcpy>
c002135f:	83 c4 10             	add    esp,0x10
c0021362:	83 ec 08             	sub    esp,0x8
c0021365:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021369:	50                   	push   eax
c002136a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021371:	e8 54 fe ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c0021376:	83 c4 10             	add    esp,0x10
c0021379:	83 ec 0c             	sub    esp,0xc
c002137c:	6a 4c                	push   0x4c
c002137e:	e8 09 e5 fe ff       	call   c000f88c <malloc>
c0021383:	83 c4 10             	add    esp,0x10
c0021386:	89 c2                	mov    edx,eax
c0021388:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002138f:	89 10                	mov    DWORD PTR [eax],edx
c0021391:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021398:	8b 00                	mov    eax,DWORD PTR [eax]
c002139a:	83 ec 08             	sub    esp,0x8
c002139d:	8d 54 24 14          	lea    edx,[esp+0x14]
c00213a1:	52                   	push   edx
c00213a2:	50                   	push   eax
c00213a3:	e8 e7 4b fe ff       	call   c0005f8f <f_opendir>
c00213a8:	83 c4 10             	add    esp,0x10
c00213ab:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213b2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00213ba:	74 07                	je     c00213c3 <FAT::openDir(char const*, void**)+0x99>
c00213bc:	b8 01 00 00 00       	mov    eax,0x1
c00213c1:	eb 05                	jmp    c00213c8 <FAT::openDir(char const*, void**)+0x9e>
c00213c3:	b8 00 00 00 00       	mov    eax,0x0
c00213c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213ce:	c3                   	ret    
c00213cf:	90                   	nop

c00213d0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00213d0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00213d6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00213de:	75 0a                	jne    c00213ea <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00213e0:	b8 04 00 00 00       	mov    eax,0x4
c00213e5:	e9 c9 00 00 00       	jmp    c00214b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213ea:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00213f2:	75 0a                	jne    c00213fe <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00213f4:	b8 04 00 00 00       	mov    eax,0x4
c00213f9:	e9 b5 00 00 00       	jmp    c00214b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213fe:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021406:	75 0a                	jne    c0021412 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021408:	b8 04 00 00 00       	mov    eax,0x4
c002140d:	e9 a1 00 00 00       	jmp    c00214b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021412:	83 ec 08             	sub    esp,0x8
c0021415:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002141c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021423:	50                   	push   eax
c0021424:	e8 e3 f3 fd ff       	call   c000080c <strcpy>
c0021429:	83 c4 10             	add    esp,0x10
c002142c:	83 ec 08             	sub    esp,0x8
c002142f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021436:	50                   	push   eax
c0021437:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002143e:	e8 87 fd ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c0021443:	83 c4 10             	add    esp,0x10
c0021446:	83 ec 08             	sub    esp,0x8
c0021449:	8d 44 24 08          	lea    eax,[esp+0x8]
c002144d:	50                   	push   eax
c002144e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021455:	50                   	push   eax
c0021456:	e8 f3 4c fe ff       	call   c000614e <f_stat>
c002145b:	83 c4 10             	add    esp,0x10
c002145e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021465:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002146c:	85 c0                	test   eax,eax
c002146e:	74 07                	je     c0021477 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021470:	83 f8 04             	cmp    eax,0x4
c0021473:	74 32                	je     c00214a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021475:	eb 37                	jmp    c00214ae <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021477:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002147b:	0f b6 c0             	movzx  eax,al
c002147e:	83 e0 10             	and    eax,0x10
c0021481:	0f 95 c2             	setne  dl
c0021484:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002148b:	88 10                	mov    BYTE PTR [eax],dl
c002148d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021490:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021494:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002149b:	89 01                	mov    DWORD PTR [ecx],eax
c002149d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00214a0:	b8 00 00 00 00       	mov    eax,0x0
c00214a5:	eb 0c                	jmp    c00214b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214a7:	b8 02 00 00 00       	mov    eax,0x2
c00214ac:	eb 05                	jmp    c00214b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214ae:	b8 01 00 00 00       	mov    eax,0x1
c00214b3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214b9:	c3                   	ret    

c00214ba <FAT::unlink(char const*)>:
c00214ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214c8:	75 07                	jne    c00214d1 <FAT::unlink(char const*)+0x17>
c00214ca:	b8 04 00 00 00       	mov    eax,0x4
c00214cf:	eb 5c                	jmp    c002152d <FAT::unlink(char const*)+0x73>
c00214d1:	83 ec 08             	sub    esp,0x8
c00214d4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214df:	50                   	push   eax
c00214e0:	e8 27 f3 fd ff       	call   c000080c <strcpy>
c00214e5:	83 c4 10             	add    esp,0x10
c00214e8:	83 ec 08             	sub    esp,0x8
c00214eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214ef:	50                   	push   eax
c00214f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214f7:	e8 ce fc ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c00214fc:	83 c4 10             	add    esp,0x10
c00214ff:	83 ec 0c             	sub    esp,0xc
c0021502:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021506:	50                   	push   eax
c0021507:	e8 94 4f fe ff       	call   c00064a0 <f_unlink>
c002150c:	83 c4 10             	add    esp,0x10
c002150f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021516:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002151d:	85 c0                	test   eax,eax
c002151f:	75 07                	jne    c0021528 <FAT::unlink(char const*)+0x6e>
c0021521:	b8 00 00 00 00       	mov    eax,0x0
c0021526:	eb 05                	jmp    c002152d <FAT::unlink(char const*)+0x73>
c0021528:	b8 01 00 00 00       	mov    eax,0x1
c002152d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021533:	c3                   	ret    

c0021534 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021534:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002153a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021541:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021548:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002154c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021550:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021558:	75 0a                	jne    c0021564 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002155a:	b8 04 00 00 00       	mov    eax,0x4
c002155f:	e9 1c 01 00 00       	jmp    c0021680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021564:	83 ec 08             	sub    esp,0x8
c0021567:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002156e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021572:	50                   	push   eax
c0021573:	e8 94 f2 fd ff       	call   c000080c <strcpy>
c0021578:	83 c4 10             	add    esp,0x10
c002157b:	83 ec 08             	sub    esp,0x8
c002157e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021582:	50                   	push   eax
c0021583:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002158a:	e8 3b fc ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c002158f:	83 c4 10             	add    esp,0x10
c0021592:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002159a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00215a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215a7:	83 e0 01             	and    eax,0x1
c00215aa:	74 08                	je     c00215b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00215ac:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00215b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215b9:	83 e0 02             	and    eax,0x2
c00215bc:	74 08                	je     c00215c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00215be:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00215c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215cb:	83 e0 04             	and    eax,0x4
c00215ce:	74 08                	je     c00215d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00215d0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00215d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215dd:	83 e0 08             	and    eax,0x8
c00215e0:	74 08                	je     c00215ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00215e2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00215ea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215ef:	83 e0 01             	and    eax,0x1
c00215f2:	74 08                	je     c00215fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00215f4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00215fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021601:	83 e0 02             	and    eax,0x2
c0021604:	74 08                	je     c002160e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021606:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002160e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021613:	83 e0 04             	and    eax,0x4
c0021616:	74 08                	je     c0021620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021618:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021625:	83 e0 08             	and    eax,0x8
c0021628:	74 08                	je     c0021632 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002162a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021632:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021639:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021640:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021648:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021650:	83 ec 04             	sub    esp,0x4
c0021653:	52                   	push   edx
c0021654:	50                   	push   eax
c0021655:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021659:	50                   	push   eax
c002165a:	e8 e3 54 fe ff       	call   c0006b42 <f_chmod>
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021669:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021670:	85 c0                	test   eax,eax
c0021672:	75 07                	jne    c002167b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021674:	b8 00 00 00 00       	mov    eax,0x0
c0021679:	eb 05                	jmp    c0021680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002167b:	b8 01 00 00 00       	mov    eax,0x1
c0021680:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021686:	c3                   	ret    
c0021687:	90                   	nop

c0021688 <FAT::rename(char const*, char const*)>:
c0021688:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002168e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021696:	74 0a                	je     c00216a2 <FAT::rename(char const*, char const*)+0x1a>
c0021698:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00216a0:	75 0a                	jne    c00216ac <FAT::rename(char const*, char const*)+0x24>
c00216a2:	b8 04 00 00 00       	mov    eax,0x4
c00216a7:	e9 98 00 00 00       	jmp    c0021744 <FAT::rename(char const*, char const*)+0xbc>
c00216ac:	83 ec 08             	sub    esp,0x8
c00216af:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216bd:	50                   	push   eax
c00216be:	e8 49 f1 fd ff       	call   c000080c <strcpy>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	83 ec 08             	sub    esp,0x8
c00216c9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00216d0:	50                   	push   eax
c00216d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216d8:	e8 ed fa ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c00216dd:	83 c4 10             	add    esp,0x10
c00216e0:	83 ec 08             	sub    esp,0x8
c00216e3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00216ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216ee:	50                   	push   eax
c00216ef:	e8 18 f1 fd ff       	call   c000080c <strcpy>
c00216f4:	83 c4 10             	add    esp,0x10
c00216f7:	83 ec 08             	sub    esp,0x8
c00216fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216fe:	50                   	push   eax
c00216ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021706:	e8 bf fa ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c002170b:	83 c4 10             	add    esp,0x10
c002170e:	83 ec 08             	sub    esp,0x8
c0021711:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021715:	50                   	push   eax
c0021716:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002171d:	50                   	push   eax
c002171e:	e8 2c 51 fe ff       	call   c000684f <f_rename>
c0021723:	83 c4 10             	add    esp,0x10
c0021726:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002172d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021734:	85 c0                	test   eax,eax
c0021736:	75 07                	jne    c002173f <FAT::rename(char const*, char const*)+0xb7>
c0021738:	b8 00 00 00 00       	mov    eax,0x0
c002173d:	eb 05                	jmp    c0021744 <FAT::rename(char const*, char const*)+0xbc>
c002173f:	b8 01 00 00 00       	mov    eax,0x1
c0021744:	81 c4 1c 02 00 00    	add    esp,0x21c
c002174a:	c3                   	ret    
c002174b:	90                   	nop

c002174c <FAT::mkdir(char const*)>:
c002174c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021752:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002175a:	75 07                	jne    c0021763 <FAT::mkdir(char const*)+0x17>
c002175c:	b8 04 00 00 00       	mov    eax,0x4
c0021761:	eb 5c                	jmp    c00217bf <FAT::mkdir(char const*)+0x73>
c0021763:	83 ec 08             	sub    esp,0x8
c0021766:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002176d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021771:	50                   	push   eax
c0021772:	e8 95 f0 fd ff       	call   c000080c <strcpy>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	83 ec 08             	sub    esp,0x8
c002177d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021781:	50                   	push   eax
c0021782:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021789:	e8 3c fa ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c002178e:	83 c4 10             	add    esp,0x10
c0021791:	83 ec 0c             	sub    esp,0xc
c0021794:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021798:	50                   	push   eax
c0021799:	e8 85 4e fe ff       	call   c0006623 <f_mkdir>
c002179e:	83 c4 10             	add    esp,0x10
c00217a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00217a8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00217af:	85 c0                	test   eax,eax
c00217b1:	75 07                	jne    c00217ba <FAT::mkdir(char const*)+0x6e>
c00217b3:	b8 00 00 00 00       	mov    eax,0x0
c00217b8:	eb 05                	jmp    c00217bf <FAT::mkdir(char const*)+0x73>
c00217ba:	b8 01 00 00 00       	mov    eax,0x1
c00217bf:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217c5:	c3                   	ret    

c00217c6 <FAT::exists(char const*)>:
c00217c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00217cc:	83 ec 08             	sub    esp,0x8
c00217cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217da:	50                   	push   eax
c00217db:	e8 2c f0 fd ff       	call   c000080c <strcpy>
c00217e0:	83 c4 10             	add    esp,0x10
c00217e3:	83 ec 08             	sub    esp,0x8
c00217e6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217ea:	50                   	push   eax
c00217eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217f2:	e8 d3 f9 ff ff       	call   c00211ca <FAT::fixFilepath(char*)>
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	83 ec 08             	sub    esp,0x8
c00217fd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021804:	50                   	push   eax
c0021805:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021809:	50                   	push   eax
c002180a:	e8 3f 49 fe ff       	call   c000614e <f_stat>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021819:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021820:	85 c0                	test   eax,eax
c0021822:	75 04                	jne    c0021828 <FAT::exists(char const*)+0x62>
c0021824:	b0 01                	mov    al,0x1
c0021826:	eb 02                	jmp    c002182a <FAT::exists(char const*)+0x64>
c0021828:	b0 00                	mov    al,0x0
c002182a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021830:	c3                   	ret    
c0021831:	90                   	nop

c0021832 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021832:	b8 08 00 00 00       	mov    eax,0x8
c0021837:	c3                   	ret    

c0021838 <ISO9660::seek(void*, unsigned long long)>:
c0021838:	53                   	push   ebx
c0021839:	b8 04 00 00 00       	mov    eax,0x4
c002183e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021842:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021846:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002184a:	85 d2                	test   edx,edx
c002184c:	74 17                	je     c0021865 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002184e:	89 c8                	mov    eax,ecx
c0021850:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021853:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021856:	b8 01 00 00 00       	mov    eax,0x1
c002185b:	73 08                	jae    c0021865 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002185d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021860:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021863:	31 c0                	xor    eax,eax
c0021865:	5b                   	pop    ebx
c0021866:	c3                   	ret    
c0021867:	90                   	nop

c0021868 <ISO9660::tell(void*, unsigned long long*)>:
c0021868:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002186c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021870:	85 d2                	test   edx,edx
c0021872:	74 12                	je     c0021886 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021874:	85 c0                	test   eax,eax
c0021876:	74 0e                	je     c0021886 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021878:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002187b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002187e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021881:	89 10                	mov    DWORD PTR [eax],edx
c0021883:	31 c0                	xor    eax,eax
c0021885:	c3                   	ret    
c0021886:	b8 04 00 00 00       	mov    eax,0x4
c002188b:	c3                   	ret    

c002188c <ISO9660::getName()>:
c002188c:	b8 b8 d1 02 c0       	mov    eax,0xc002d1b8
c0021891:	c3                   	ret    

c0021892 <ISO9660::stat(void*, unsigned long long*)>:
c0021892:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021896:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002189a:	85 d2                	test   edx,edx
c002189c:	74 12                	je     c00218b0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002189e:	85 c0                	test   eax,eax
c00218a0:	74 0e                	je     c00218b0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00218a2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00218a5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00218a8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00218ab:	89 10                	mov    DWORD PTR [eax],edx
c00218ad:	31 c0                	xor    eax,eax
c00218af:	c3                   	ret    
c00218b0:	b8 04 00 00 00       	mov    eax,0x4
c00218b5:	c3                   	ret    

c00218b6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00218b6:	b8 01 00 00 00       	mov    eax,0x1
c00218bb:	c3                   	ret    

c00218bc <ISO9660::unlink(char const*)>:
c00218bc:	b8 01 00 00 00       	mov    eax,0x1
c00218c1:	c3                   	ret    

c00218c2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00218c2:	b8 01 00 00 00       	mov    eax,0x1
c00218c7:	c3                   	ret    

c00218c8 <ISO9660::rename(char const*, char const*)>:
c00218c8:	b8 01 00 00 00       	mov    eax,0x1
c00218cd:	c3                   	ret    

c00218ce <ISO9660::mkdir(char const*)>:
c00218ce:	b8 01 00 00 00       	mov    eax,0x1
c00218d3:	c3                   	ret    

c00218d4 <ISO9660::close(void*)>:
c00218d4:	83 ec 0c             	sub    esp,0xc
c00218d7:	b8 04 00 00 00       	mov    eax,0x4
c00218dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218e0:	85 d2                	test   edx,edx
c00218e2:	74 0e                	je     c00218f2 <ISO9660::close(void*)+0x1e>
c00218e4:	83 ec 0c             	sub    esp,0xc
c00218e7:	52                   	push   edx
c00218e8:	e8 af df fe ff       	call   c000f89c <free>
c00218ed:	83 c4 10             	add    esp,0x10
c00218f0:	31 c0                	xor    eax,eax
c00218f2:	83 c4 0c             	add    esp,0xc
c00218f5:	c3                   	ret    

c00218f6 <ISO9660::closeDir(void*)>:
c00218f6:	83 ec 0c             	sub    esp,0xc
c00218f9:	b8 04 00 00 00       	mov    eax,0x4
c00218fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021902:	85 d2                	test   edx,edx
c0021904:	74 0e                	je     c0021914 <ISO9660::closeDir(void*)+0x1e>
c0021906:	83 ec 0c             	sub    esp,0xc
c0021909:	52                   	push   edx
c002190a:	e8 8d df fe ff       	call   c000f89c <free>
c002190f:	83 c4 10             	add    esp,0x10
c0021912:	31 c0                	xor    eax,eax
c0021914:	83 c4 0c             	add    esp,0xc
c0021917:	c3                   	ret    

c0021918 <ISO9660::~ISO9660()>:
c0021918:	83 ec 0c             	sub    esp,0xc
c002191b:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0021920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021924:	89 10                	mov    DWORD PTR [eax],edx
c0021926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192a:	83 ec 0c             	sub    esp,0xc
c002192d:	50                   	push   eax
c002192e:	e8 cf 12 ff ff       	call   c0012c02 <Filesystem::~Filesystem()>
c0021933:	83 c4 10             	add    esp,0x10
c0021936:	90                   	nop
c0021937:	83 c4 0c             	add    esp,0xc
c002193a:	c3                   	ret    
c002193b:	90                   	nop

c002193c <ISO9660::~ISO9660()>:
c002193c:	83 ec 0c             	sub    esp,0xc
c002193f:	83 ec 0c             	sub    esp,0xc
c0021942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021946:	e8 cd ff ff ff       	call   c0021918 <ISO9660::~ISO9660()>
c002194b:	83 c4 10             	add    esp,0x10
c002194e:	83 ec 08             	sub    esp,0x8
c0021951:	6a 08                	push   0x8
c0021953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021957:	e8 97 0e ff ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c002195c:	83 c4 10             	add    esp,0x10
c002195f:	83 c4 0c             	add    esp,0xc
c0021962:	c3                   	ret    

c0021963 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021963:	55                   	push   ebp
c0021964:	31 c9                	xor    ecx,ecx
c0021966:	57                   	push   edi
c0021967:	56                   	push   esi
c0021968:	53                   	push   ebx
c0021969:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002196d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021971:	89 eb                	mov    ebx,ebp
c0021973:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021977:	39 ce                	cmp    esi,ecx
c0021979:	7e 17                	jle    c0021992 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002197b:	31 d2                	xor    edx,edx
c002197d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021981:	7d 13                	jge    c0021996 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021983:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021987:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002198a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002198d:	75 0d                	jne    c002199c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002198f:	42                   	inc    edx
c0021990:	eb eb                	jmp    c002197d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021992:	31 c0                	xor    eax,eax
c0021994:	eb 0a                	jmp    c00219a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021996:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002199a:	eb 04                	jmp    c00219a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002199c:	41                   	inc    ecx
c002199d:	43                   	inc    ebx
c002199e:	eb d7                	jmp    c0021977 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00219a0:	5b                   	pop    ebx
c00219a1:	5e                   	pop    esi
c00219a2:	5f                   	pop    edi
c00219a3:	5d                   	pop    ebp
c00219a4:	c3                   	ret    

c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00219a5:	57                   	push   edi
c00219a6:	56                   	push   esi
c00219a7:	53                   	push   ebx
c00219a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219b0:	39 0d 20 27 03 c0    	cmp    DWORD PTR ds:0xc0032720,ecx
c00219b6:	75 08                	jne    c00219c0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00219b8:	38 05 94 e5 02 c0    	cmp    BYTE PTR ds:0xc002e594,al
c00219be:	74 2b                	je     c00219eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	a2 94 e5 02 c0       	mov    ds:0xc002e594,al
c00219c8:	68 40 27 03 c0       	push   0xc0032740
c00219cd:	0f be c0             	movsx  eax,al
c00219d0:	6a 01                	push   0x1
c00219d2:	89 0d 20 27 03 c0    	mov    DWORD PTR ds:0xc0032720,ecx
c00219d8:	31 db                	xor    ebx,ebx
c00219da:	53                   	push   ebx
c00219db:	51                   	push   ecx
c00219dc:	ff 34 85 fc f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b04]
c00219e3:	e8 68 48 ff ff       	call   c0016250 <LogicalDisk::read(unsigned long long, int, void*)>
c00219e8:	83 c4 20             	add    esp,0x20
c00219eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00219ef:	be 40 27 03 c0       	mov    esi,0xc0032740
c00219f4:	b9 00 08 00 00       	mov    ecx,0x800
c00219f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219fb:	5b                   	pop    ebx
c00219fc:	5e                   	pop    esi
c00219fd:	5f                   	pop    edi
c00219fe:	c3                   	ret    
c00219ff:	90                   	nop

c0021a00 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021a00:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a06:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a0d:	83 c0 41             	add    eax,0x41
c0021a10:	0f be c0             	movsx  eax,al
c0021a13:	50                   	push   eax
c0021a14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a18:	50                   	push   eax
c0021a19:	6a 10                	push   0x10
c0021a1b:	e8 85 ff ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a20:	83 c4 10             	add    esp,0x10
c0021a23:	31 c0                	xor    eax,eax
c0021a25:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021a2a:	75 1d                	jne    c0021a49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a2c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021a31:	75 16                	jne    c0021a49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a33:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a38:	75 0f                	jne    c0021a49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a3a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a3f:	75 08                	jne    c0021a49 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a41:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a46:	0f 94 c0             	sete   al
c0021a49:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a4f:	c3                   	ret    

c0021a50 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021a50:	55                   	push   ebp
c0021a51:	57                   	push   edi
c0021a52:	56                   	push   esi
c0021a53:	53                   	push   ebx
c0021a54:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a5a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a61:	85 ed                	test   ebp,ebp
c0021a63:	0f 84 da 01 00 00    	je     c0021c43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a69:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a71:	0f 84 cc 01 00 00    	je     c0021c43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a77:	b8 01 00 00 00       	mov    eax,0x1
c0021a7c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021a80:	0f 85 c2 01 00 00    	jne    c0021c48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a86:	31 d2                	xor    edx,edx
c0021a88:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021a8f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a92:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021a95:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021a98:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a9f:	01 c8                	add    eax,ecx
c0021aa1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021aa4:	11 da                	adc    edx,ebx
c0021aa6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021aaa:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021aae:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021ab2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ab6:	19 d7                	sbb    edi,edx
c0021ab8:	72 11                	jb     c0021acb <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021aba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021abd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021ac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ac5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac9:	eb 0c                	jmp    c0021ad7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021acb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021acf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ad3:	29 ce                	sub    esi,ecx
c0021ad5:	19 df                	sbb    edi,ebx
c0021ad7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ada:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021add:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021ae1:	c1 e0 0b             	shl    eax,0xb
c0021ae4:	01 c8                	add    eax,ecx
c0021ae6:	11 da                	adc    edx,ebx
c0021ae8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021aeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021aef:	51                   	push   ecx
c0021af0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021af4:	50                   	push   eax
c0021af5:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021af9:	53                   	push   ebx
c0021afa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021afe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b02:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b06:	50                   	push   eax
c0021b07:	e8 99 fe ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b0c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b0f:	b8 00 08 00 00       	mov    eax,0x800
c0021b14:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021b1a:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021b1e:	29 d0                	sub    eax,edx
c0021b20:	83 c4 10             	add    esp,0x10
c0021b23:	89 f9                	mov    ecx,edi
c0021b25:	39 c6                	cmp    esi,eax
c0021b27:	83 d9 00             	sbb    ecx,0x0
c0021b2a:	7d 1b                	jge    c0021b47 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021b2c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021b31:	75 12                	jne    c0021b45 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021b33:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b40:	e9 fa 00 00 00       	jmp    c0021c3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b45:	89 f0                	mov    eax,esi
c0021b47:	01 d3                	add    ebx,edx
c0021b49:	31 d2                	xor    edx,edx
c0021b4b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021b4f:	39 c2                	cmp    edx,eax
c0021b51:	7d 14                	jge    c0021b67 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021b53:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b5a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b5e:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b61:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b64:	42                   	inc    edx
c0021b65:	eb e8                	jmp    c0021b4f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021b67:	89 c2                	mov    edx,eax
c0021b69:	85 c0                	test   eax,eax
c0021b6b:	79 02                	jns    c0021b6f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021b6d:	31 d2                	xor    edx,edx
c0021b6f:	01 c2                	add    edx,eax
c0021b71:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021b74:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021b7b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021b7f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021b83:	99                   	cdq    
c0021b84:	01 c1                	add    ecx,eax
c0021b86:	11 d3                	adc    ebx,edx
c0021b88:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021b8c:	29 c6                	sub    esi,eax
c0021b8e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021b92:	19 d7                	sbb    edi,edx
c0021b94:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021b9b:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021ba0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021ba3:	b8 00 00 00 00       	mov    eax,0x0
c0021ba8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bac:	7d 43                	jge    c0021bf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021bae:	52                   	push   edx
c0021baf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bb3:	50                   	push   eax
c0021bb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bc0:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021bc4:	50                   	push   eax
c0021bc5:	e8 db fd ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bca:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021bd2:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021bd7:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021bdf:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021be7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021bec:	83 c4 10             	add    esp,0x10
c0021bef:	eb aa                	jmp    c0021b9b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf5:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021bf8:	74 2a                	je     c0021c24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021bfa:	50                   	push   eax
c0021bfb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bff:	50                   	push   eax
c0021c00:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021c04:	56                   	push   esi
c0021c05:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021c09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021c0d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021c11:	51                   	push   ecx
c0021c12:	e8 8e fd ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c17:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c21:	83 c4 10             	add    esp,0x10
c0021c24:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021c2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c33:	89 18                	mov    DWORD PTR [eax],ebx
c0021c35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c39:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021c3c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c3f:	31 c0                	xor    eax,eax
c0021c41:	eb 05                	jmp    c0021c48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021c43:	b8 04 00 00 00       	mov    eax,0x4
c0021c48:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021c4e:	5b                   	pop    ebx
c0021c4f:	5e                   	pop    esi
c0021c50:	5f                   	pop    edi
c0021c51:	5d                   	pop    ebp
c0021c52:	c3                   	ret    
c0021c53:	90                   	nop

c0021c54 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021c54:	55                   	push   ebp
c0021c55:	57                   	push   edi
c0021c56:	56                   	push   esi
c0021c57:	53                   	push   ebx
c0021c58:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c5e:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021c65:	85 ed                	test   ebp,ebp
c0021c67:	0f 84 51 02 00 00    	je     c0021ebe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c6d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c75:	0f 84 43 02 00 00    	je     c0021ebe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c7e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021c81:	75 0a                	jne    c0021c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021c83:	b8 07 00 00 00       	mov    eax,0x7
c0021c88:	e9 36 02 00 00       	jmp    c0021ec3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c8d:	50                   	push   eax
c0021c8e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c92:	50                   	push   eax
c0021c93:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c9a:	53                   	push   ebx
c0021c9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c9e:	c1 e0 0b             	shl    eax,0xb
c0021ca1:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021ca4:	c1 e8 0b             	shr    eax,0xb
c0021ca7:	50                   	push   eax
c0021ca8:	e8 f8 fc ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021cb0:	83 c4 10             	add    esp,0x10
c0021cb3:	89 c1                	mov    ecx,eax
c0021cb5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021cb8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021cbe:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021cc1:	84 db                	test   bl,bl
c0021cc3:	0f 85 8b 00 00 00    	jne    c0021d54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021cc9:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021ccf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021cd2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021cd8:	29 c6                	sub    esi,eax
c0021cda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021cde:	89 f3                	mov    ebx,esi
c0021ce0:	89 f1                	mov    ecx,esi
c0021ce2:	c1 fb 1f             	sar    ebx,0x1f
c0021ce5:	01 f0                	add    eax,esi
c0021ce7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021cea:	11 da                	adc    edx,ebx
c0021cec:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021cf3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021cf6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021cf9:	89 d8                	mov    eax,ebx
c0021cfb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021cff:	ba 00 00 00 00       	mov    edx,0x0
c0021d04:	19 f8                	sbb    eax,edi
c0021d06:	b8 00 00 00 00       	mov    eax,0x0
c0021d0b:	73 08                	jae    c0021d15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021d0d:	89 f0                	mov    eax,esi
c0021d0f:	89 fa                	mov    edx,edi
c0021d11:	29 c8                	sub    eax,ecx
c0021d13:	19 da                	sbb    edx,ebx
c0021d15:	89 d7                	mov    edi,edx
c0021d17:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021d1a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021d1d:	09 c7                	or     edi,eax
c0021d1f:	0f 84 5e ff ff ff    	je     c0021c83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021d25:	57                   	push   edi
c0021d26:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d2a:	50                   	push   eax
c0021d2b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d32:	53                   	push   ebx
c0021d33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d36:	c1 e0 0b             	shl    eax,0xb
c0021d39:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021d3d:	c1 e8 0b             	shr    eax,0xb
c0021d40:	50                   	push   eax
c0021d41:	e8 5f fc ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d46:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d49:	83 c4 10             	add    esp,0x10
c0021d4c:	25 ff 07 00 00       	and    eax,0x7ff
c0021d51:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021d54:	31 ff                	xor    edi,edi
c0021d56:	56                   	push   esi
c0021d57:	6a 28                	push   0x28
c0021d59:	6a 00                	push   0x0
c0021d5b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d5f:	50                   	push   eax
c0021d60:	e8 eb e9 fd ff       	call   c0000750 <memset>
c0021d65:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d68:	25 ff 07 00 00       	and    eax,0x7ff
c0021d6d:	89 c6                	mov    esi,eax
c0021d6f:	83 c6 21             	add    esi,0x21
c0021d72:	83 d7 00             	adc    edi,0x0
c0021d75:	83 c4 10             	add    esp,0x10
c0021d78:	31 c9                	xor    ecx,ecx
c0021d7a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021d81:	83 f9 28             	cmp    ecx,0x28
c0021d84:	88 04 24             	mov    BYTE PTR [esp],al
c0021d87:	0f 94 c2             	sete   dl
c0021d8a:	88 d0                	mov    al,dl
c0021d8c:	ba ff 07 00 00       	mov    edx,0x7ff
c0021d91:	39 f2                	cmp    edx,esi
c0021d93:	ba 00 00 00 00       	mov    edx,0x0
c0021d98:	19 fa                	sbb    edx,edi
c0021d9a:	0f 92 c2             	setb   dl
c0021d9d:	09 c2                	or     edx,eax
c0021d9f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021da3:	0f 94 c0             	sete   al
c0021da6:	08 d0                	or     al,dl
c0021da8:	75 16                	jne    c0021dc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021daa:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021dae:	74 10                	je     c0021dc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021db0:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021db3:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021db7:	41                   	inc    ecx
c0021db8:	83 c6 01             	add    esi,0x1
c0021dbb:	83 d7 00             	adc    edi,0x0
c0021dbe:	eb ba                	jmp    c0021d7a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021dc0:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021dc7:	83 ec 0c             	sub    esp,0xc
c0021dca:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021dce:	56                   	push   esi
c0021dcf:	e8 98 e9 fd ff       	call   c000076c <strlen>
c0021dd4:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021ddb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ddf:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021de7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021dea:	5a                   	pop    edx
c0021deb:	25 ff 07 00 00       	and    eax,0x7ff
c0021df0:	59                   	pop    ecx
c0021df1:	01 f8                	add    eax,edi
c0021df3:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021df9:	83 e0 02             	and    eax,0x2
c0021dfc:	3c 01                	cmp    al,0x1
c0021dfe:	19 c0                	sbb    eax,eax
c0021e00:	83 c0 02             	add    eax,0x2
c0021e03:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e07:	56                   	push   esi
c0021e08:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021e0c:	50                   	push   eax
c0021e0d:	e8 fa e9 fd ff       	call   c000080c <strcpy>
c0021e12:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021e16:	83 c4 10             	add    esp,0x10
c0021e19:	84 c0                	test   al,al
c0021e1b:	75 21                	jne    c0021e3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021e1d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021e25:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e2d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e35:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021e3c:	eb 28                	jmp    c0021e66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e3e:	fe c8                	dec    al
c0021e40:	75 24                	jne    c0021e66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e42:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021e4a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e52:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e5a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e61:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e66:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021e6a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021e71:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021e78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e7a:	0f b6 f3             	movzx  esi,bl
c0021e7d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021e84:	31 db                	xor    ebx,ebx
c0021e86:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021e8c:	89 df                	mov    edi,ebx
c0021e8e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e94:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021e97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e9a:	39 c6                	cmp    esi,eax
c0021e9c:	19 d7                	sbb    edi,edx
c0021e9e:	72 10                	jb     c0021eb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021ea0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021ea7:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021eae:	eb 0a                	jmp    c0021eba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021eb0:	29 f0                	sub    eax,esi
c0021eb2:	19 da                	sbb    edx,ebx
c0021eb4:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021eb7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021eba:	31 c0                	xor    eax,eax
c0021ebc:	eb 05                	jmp    c0021ec3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ebe:	b8 04 00 00 00       	mov    eax,0x4
c0021ec3:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ec9:	5b                   	pop    ebx
c0021eca:	5e                   	pop    esi
c0021ecb:	5f                   	pop    edi
c0021ecc:	5d                   	pop    ebp
c0021ecd:	c3                   	ret    

c0021ece <readRoot(unsigned int*, unsigned int*, char)>:
c0021ece:	57                   	push   edi
c0021ecf:	56                   	push   esi
c0021ed0:	81 ec 38 08 00 00    	sub    esp,0x838
c0021ed6:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ede:	50                   	push   eax
c0021edf:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021ee3:	50                   	push   eax
c0021ee4:	6a 10                	push   0x10
c0021ee6:	e8 ba fa ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021eeb:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021ef2:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021ef6:	b9 22 00 00 00       	mov    ecx,0x22
c0021efb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021efd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021f04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021f08:	89 10                	mov    DWORD PTR [eax],edx
c0021f0a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021f11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021f15:	89 10                	mov    DWORD PTR [eax],edx
c0021f17:	81 c4 44 08 00 00    	add    esp,0x844
c0021f1d:	b0 01                	mov    al,0x1
c0021f1f:	5e                   	pop    esi
c0021f20:	5f                   	pop    edi
c0021f21:	c3                   	ret    

c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021f22:	55                   	push   ebp
c0021f23:	57                   	push   edi
c0021f24:	56                   	push   esi
c0021f25:	53                   	push   ebx
c0021f26:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f2c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021f33:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021f3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f3e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021f42:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f46:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021f4a:	75 03                	jne    c0021f4f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f4c:	83 c3 02             	add    ebx,0x2
c0021f4f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021f52:	75 03                	jne    c0021f57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021f54:	43                   	inc    ebx
c0021f55:	eb f8                	jmp    c0021f4f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f57:	51                   	push   ecx
c0021f58:	68 00 01 00 00       	push   0x100
c0021f5d:	6a 00                	push   0x0
c0021f5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f63:	50                   	push   eax
c0021f64:	e8 e7 e7 fd ff       	call   c0000750 <memset>
c0021f69:	83 c4 10             	add    esp,0x10
c0021f6c:	31 d2                	xor    edx,edx
c0021f6e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f71:	84 c0                	test   al,al
c0021f73:	74 21                	je     c0021f96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f75:	3c 2f                	cmp    al,0x2f
c0021f77:	75 0b                	jne    c0021f84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f79:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021f7d:	bd 01 00 00 00       	mov    ebp,0x1
c0021f82:	eb 14                	jmp    c0021f98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021f84:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021f87:	80 f9 19             	cmp    cl,0x19
c0021f8a:	77 03                	ja     c0021f8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f8c:	83 e8 20             	sub    eax,0x20
c0021f8f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021f93:	42                   	inc    edx
c0021f94:	eb d8                	jmp    c0021f6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021f96:	31 ed                	xor    ebp,ebp
c0021f98:	83 ec 0c             	sub    esp,0xc
c0021f9b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021fa2:	e8 e5 d8 fe ff       	call   c000f88c <malloc>
c0021fa7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021fae:	89 c6                	mov    esi,eax
c0021fb0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021fb6:	c1 ef 0b             	shr    edi,0xb
c0021fb9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021fc0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021fc4:	83 c4 10             	add    esp,0x10
c0021fc7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021fcc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fd0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021fd7:	74 28                	je     c0022001 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021fd9:	52                   	push   edx
c0021fda:	57                   	push   edi
c0021fdb:	50                   	push   eax
c0021fdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021fe0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021fe7:	e8 b9 f9 ff ff       	call   c00219a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ff0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ff7:	05 00 08 00 00       	add    eax,0x800
c0021ffc:	83 c4 10             	add    esp,0x10
c0021fff:	eb cb                	jmp    c0021fcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022001:	83 ec 0c             	sub    esp,0xc
c0022004:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022008:	57                   	push   edi
c0022009:	e8 5e e7 fd ff       	call   c000076c <strlen>
c002200e:	50                   	push   eax
c002200f:	57                   	push   edi
c0022010:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022017:	56                   	push   esi
c0022018:	e8 46 f9 ff ff       	call   c0021963 <__memmem(unsigned char*, int, unsigned char*, int)>
c002201d:	83 c4 20             	add    esp,0x20
c0022020:	85 c0                	test   eax,eax
c0022022:	75 13                	jne    c0022037 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022024:	83 ec 0c             	sub    esp,0xc
c0022027:	56                   	push   esi
c0022028:	e8 6f d8 fe ff       	call   c000f89c <free>
c002202d:	83 c4 10             	add    esp,0x10
c0022030:	31 c0                	xor    eax,eax
c0022032:	e9 b3 00 00 00       	jmp    c00220ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022037:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002203b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002203f:	c1 e7 08             	shl    edi,0x8
c0022042:	c1 e2 10             	shl    edx,0x10
c0022045:	09 d7                	or     edi,edx
c0022047:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002204b:	09 d7                	or     edi,edx
c002204d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022051:	c1 e2 18             	shl    edx,0x18
c0022054:	09 d7                	or     edi,edx
c0022056:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002205a:	89 d1                	mov    ecx,edx
c002205c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022060:	c1 e1 08             	shl    ecx,0x8
c0022063:	c1 e2 10             	shl    edx,0x10
c0022066:	09 ca                	or     edx,ecx
c0022068:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002206c:	09 ca                	or     edx,ecx
c002206e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022072:	c1 e1 18             	shl    ecx,0x18
c0022075:	09 ca                	or     edx,ecx
c0022077:	89 e9                	mov    ecx,ebp
c0022079:	84 c9                	test   cl,cl
c002207b:	74 3c                	je     c00220b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002207d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022081:	83 ec 0c             	sub    esp,0xc
c0022084:	56                   	push   esi
c0022085:	e8 12 d8 fe ff       	call   c000f89c <free>
c002208a:	83 c4 0c             	add    esp,0xc
c002208d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022094:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022099:	50                   	push   eax
c002209a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220a1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00220ac:	52                   	push   edx
c00220ad:	57                   	push   edi
c00220ae:	53                   	push   ebx
c00220af:	e8 6e fe ff ff       	call   c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220b4:	83 c4 20             	add    esp,0x20
c00220b7:	eb 31                	jmp    c00220ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220b9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00220bc:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00220c3:	d0 e8                	shr    al,1
c00220c5:	89 3b                	mov    DWORD PTR [ebx],edi
c00220c7:	83 e0 01             	and    eax,0x1
c00220ca:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00220d1:	83 ec 0c             	sub    esp,0xc
c00220d4:	89 13                	mov    DWORD PTR [ebx],edx
c00220d6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00220dd:	89 03                	mov    DWORD PTR [ebx],eax
c00220df:	56                   	push   esi
c00220e0:	e8 b7 d7 fe ff       	call   c000f89c <free>
c00220e5:	83 c4 10             	add    esp,0x10
c00220e8:	b0 01                	mov    al,0x1
c00220ea:	81 c4 1c 01 00 00    	add    esp,0x11c
c00220f0:	5b                   	pop    ebx
c00220f1:	5e                   	pop    esi
c00220f2:	5f                   	pop    edi
c00220f3:	5d                   	pop    ebp
c00220f4:	c3                   	ret    

c00220f5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00220f5:	55                   	push   ebp
c00220f6:	57                   	push   edi
c00220f7:	56                   	push   esi
c00220f8:	53                   	push   ebx
c00220f9:	83 ec 20             	sub    esp,0x20
c00220fc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022100:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022104:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022108:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022110:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022118:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002211d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022123:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022129:	57                   	push   edi
c002212a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002212e:	50                   	push   eax
c002212f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022133:	50                   	push   eax
c0022134:	e8 95 fd ff ff       	call   c0021ece <readRoot(unsigned int*, unsigned int*, char)>
c0022139:	5a                   	pop    edx
c002213a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002213e:	e8 29 e6 fd ff       	call   c000076c <strlen>
c0022143:	83 c4 10             	add    esp,0x10
c0022146:	83 f8 03             	cmp    eax,0x3
c0022149:	77 17                	ja     c0022162 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002214b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002214f:	89 03                	mov    DWORD PTR [ebx],eax
c0022151:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022155:	89 06                	mov    DWORD PTR [esi],eax
c0022157:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002215e:	b0 01                	mov    al,0x1
c0022160:	eb 19                	jmp    c002217b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022162:	50                   	push   eax
c0022163:	55                   	push   ebp
c0022164:	57                   	push   edi
c0022165:	56                   	push   esi
c0022166:	53                   	push   ebx
c0022167:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002216b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002216f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022173:	e8 aa fd ff ff       	call   c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022178:	83 c4 20             	add    esp,0x20
c002217b:	83 c4 1c             	add    esp,0x1c
c002217e:	5b                   	pop    ebx
c002217f:	5e                   	pop    esi
c0022180:	5f                   	pop    edi
c0022181:	5d                   	pop    ebp
c0022182:	c3                   	ret    
c0022183:	90                   	nop

c0022184 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022184:	57                   	push   edi
c0022185:	56                   	push   esi
c0022186:	53                   	push   ebx
c0022187:	83 ec 10             	sub    esp,0x10
c002218a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002218e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022192:	85 ff                	test   edi,edi
c0022194:	0f 84 9d 00 00 00    	je     c0022237 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002219a:	85 f6                	test   esi,esi
c002219c:	0f 84 95 00 00 00    	je     c0022237 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00221a2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00221a7:	74 17                	je     c00221c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00221a9:	83 ec 0c             	sub    esp,0xc
c00221ac:	68 d3 d1 02 c0       	push   0xc002d1d3
c00221b1:	e8 1d 07 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	b8 03 00 00 00       	mov    eax,0x3
c00221be:	eb 7c                	jmp    c002223c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221c0:	83 ec 0c             	sub    esp,0xc
c00221c3:	6a 1c                	push   0x1c
c00221c5:	e8 c2 d6 fe ff       	call   c000f88c <malloc>
c00221ca:	89 07                	mov    DWORD PTR [edi],eax
c00221cc:	89 c3                	mov    ebx,eax
c00221ce:	58                   	pop    eax
c00221cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221d3:	50                   	push   eax
c00221d4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221d7:	50                   	push   eax
c00221d8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221dc:	50                   	push   eax
c00221dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e1:	50                   	push   eax
c00221e2:	56                   	push   esi
c00221e3:	e8 0d ff ff ff       	call   c00220f5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221e8:	83 c4 20             	add    esp,0x20
c00221eb:	84 c0                	test   al,al
c00221ed:	74 07                	je     c00221f6 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00221ef:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221f4:	74 0b                	je     c0022201 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00221f6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221fa:	b8 01 00 00 00       	mov    eax,0x1
c00221ff:	eb 3b                	jmp    c002223c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022205:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022209:	89 03                	mov    DWORD PTR [ebx],eax
c002220b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022216:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002221d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022224:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022227:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002222e:	8a 06                	mov    al,BYTE PTR [esi]
c0022230:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022233:	31 c0                	xor    eax,eax
c0022235:	eb 05                	jmp    c002223c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022237:	b8 04 00 00 00       	mov    eax,0x4
c002223c:	83 c4 10             	add    esp,0x10
c002223f:	5b                   	pop    ebx
c0022240:	5e                   	pop    esi
c0022241:	5f                   	pop    edi
c0022242:	c3                   	ret    
c0022243:	90                   	nop

c0022244 <ISO9660::exists(char const*)>:
c0022244:	83 ec 28             	sub    esp,0x28
c0022247:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002224b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002224f:	52                   	push   edx
c0022250:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022253:	52                   	push   edx
c0022254:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022258:	52                   	push   edx
c0022259:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002225d:	52                   	push   edx
c002225e:	50                   	push   eax
c002225f:	e8 91 fe ff ff       	call   c00220f5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022264:	83 c4 3c             	add    esp,0x3c
c0022267:	c3                   	ret    

c0022268 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022268:	56                   	push   esi
c0022269:	53                   	push   ebx
c002226a:	83 ec 14             	sub    esp,0x14
c002226d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022271:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022275:	85 db                	test   ebx,ebx
c0022277:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002227b:	0f 94 c2             	sete   dl
c002227e:	85 f6                	test   esi,esi
c0022280:	0f 94 c0             	sete   al
c0022283:	08 c2                	or     dl,al
c0022285:	75 68                	jne    c00222ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022287:	85 c9                	test   ecx,ecx
c0022289:	74 64                	je     c00222ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002228b:	83 ec 0c             	sub    esp,0xc
c002228e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022291:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022295:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002229b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222a2:	50                   	push   eax
c00222a3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00222a6:	50                   	push   eax
c00222a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222ab:	50                   	push   eax
c00222ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222b0:	50                   	push   eax
c00222b1:	51                   	push   ecx
c00222b2:	e8 3e fe ff ff       	call   c00220f5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222b7:	83 c4 20             	add    esp,0x20
c00222ba:	ba 01 00 00 00       	mov    edx,0x1
c00222bf:	84 c0                	test   al,al
c00222c1:	74 31                	je     c00222f4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222ce:	89 03                	mov    DWORD PTR [ebx],eax
c00222d0:	ba 00 00 00 00       	mov    edx,0x0
c00222d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222d9:	85 c0                	test   eax,eax
c00222db:	0f 95 06             	setne  BYTE PTR [esi]
c00222de:	74 14                	je     c00222f4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222e0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222e6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222ed:	eb 05                	jmp    c00222f4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222ef:	ba 04 00 00 00       	mov    edx,0x4
c00222f4:	83 c4 14             	add    esp,0x14
c00222f7:	89 d0                	mov    eax,edx
c00222f9:	5b                   	pop    ebx
c00222fa:	5e                   	pop    esi
c00222fb:	c3                   	ret    

c00222fc <ISO9660::openDir(char const*, void**)>:
c00222fc:	57                   	push   edi
c00222fd:	56                   	push   esi
c00222fe:	53                   	push   ebx
c00222ff:	83 ec 10             	sub    esp,0x10
c0022302:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022306:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002230a:	85 ff                	test   edi,edi
c002230c:	0f 84 95 00 00 00    	je     c00223a7 <ISO9660::openDir(char const*, void**)+0xab>
c0022312:	85 f6                	test   esi,esi
c0022314:	0f 84 8d 00 00 00    	je     c00223a7 <ISO9660::openDir(char const*, void**)+0xab>
c002231a:	83 ec 0c             	sub    esp,0xc
c002231d:	6a 1c                	push   0x1c
c002231f:	e8 68 d5 fe ff       	call   c000f88c <malloc>
c0022324:	89 07                	mov    DWORD PTR [edi],eax
c0022326:	89 c3                	mov    ebx,eax
c0022328:	59                   	pop    ecx
c0022329:	8d 44 24 18          	lea    eax,[esp+0x18]
c002232d:	50                   	push   eax
c002232e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022331:	50                   	push   eax
c0022332:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022336:	50                   	push   eax
c0022337:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002233b:	50                   	push   eax
c002233c:	56                   	push   esi
c002233d:	e8 b3 fd ff ff       	call   c00220f5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022342:	83 c4 20             	add    esp,0x20
c0022345:	84 c0                	test   al,al
c0022347:	74 07                	je     c0022350 <ISO9660::openDir(char const*, void**)+0x54>
c0022349:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002234e:	75 21                	jne    c0022371 <ISO9660::openDir(char const*, void**)+0x75>
c0022350:	0f b6 c0             	movzx  eax,al
c0022353:	52                   	push   edx
c0022354:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022358:	50                   	push   eax
c0022359:	68 f9 d1 02 c0       	push   0xc002d1f9
c002235e:	e8 70 05 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022363:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022367:	83 c4 10             	add    esp,0x10
c002236a:	b8 01 00 00 00       	mov    eax,0x1
c002236f:	eb 3b                	jmp    c00223ac <ISO9660::openDir(char const*, void**)+0xb0>
c0022371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022375:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022379:	89 03                	mov    DWORD PTR [ebx],eax
c002237b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022386:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002238d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022397:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002239e:	8a 06                	mov    al,BYTE PTR [esi]
c00223a0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00223a3:	31 c0                	xor    eax,eax
c00223a5:	eb 05                	jmp    c00223ac <ISO9660::openDir(char const*, void**)+0xb0>
c00223a7:	b8 04 00 00 00       	mov    eax,0x4
c00223ac:	83 c4 10             	add    esp,0x10
c00223af:	5b                   	pop    ebx
c00223b0:	5e                   	pop    esi
c00223b1:	5f                   	pop    edi
c00223b2:	c3                   	ret    
c00223b3:	90                   	nop

c00223b4 <ISO9660::ISO9660()>:
c00223b4:	83 ec 0c             	sub    esp,0xc
c00223b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223bb:	83 ec 0c             	sub    esp,0xc
c00223be:	50                   	push   eax
c00223bf:	e8 1a 08 ff ff       	call   c0012bde <Filesystem::Filesystem()>
c00223c4:	83 c4 10             	add    esp,0x10
c00223c7:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	89 10                	mov    DWORD PTR [eax],edx
c00223d2:	90                   	nop
c00223d3:	83 c4 0c             	add    esp,0xc
c00223d6:	c3                   	ret    
c00223d7:	90                   	nop

c00223d8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00223d8:	83 ec 1c             	sub    esp,0x1c
c00223db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00223e3:	89 10                	mov    DWORD PTR [eax],edx
c00223e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00223ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223fb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022400:	75 23                	jne    c0022425 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022406:	8b 10                	mov    edx,DWORD PTR [eax]
c0022408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002240c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002240f:	0f af c2             	imul   eax,edx
c0022412:	85 c0                	test   eax,eax
c0022414:	79 03                	jns    c0022419 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022416:	83 c0 03             	add    eax,0x3
c0022419:	c1 f8 02             	sar    eax,0x2
c002241c:	05 a0 0f 00 00       	add    eax,0xfa0
c0022421:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022429:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002242d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022434:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002243b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002243f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002244d:	c1 e0 02             	shl    eax,0x2
c0022450:	83 ec 0c             	sub    esp,0xc
c0022453:	50                   	push   eax
c0022454:	e8 33 d4 fe ff       	call   c000f88c <malloc>
c0022459:	83 c4 10             	add    esp,0x10
c002245c:	89 c2                	mov    edx,eax
c002245e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022462:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022465:	83 ec 04             	sub    esp,0x4
c0022468:	8d 44 24 08          	lea    eax,[esp+0x8]
c002246c:	50                   	push   eax
c002246d:	6a 01                	push   0x1
c002246f:	6a 04                	push   0x4
c0022471:	e8 ef 66 fe ff       	call   c0008b65 <src_new>
c0022476:	83 c4 10             	add    esp,0x10
c0022479:	89 c2                	mov    edx,eax
c002247b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002247f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022482:	83 ec 0c             	sub    esp,0xc
c0022485:	68 7c d2 02 c0       	push   0xc002d27c
c002248a:	e8 44 04 ff ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c002248f:	83 c4 10             	add    esp,0x10
c0022492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022496:	85 c0                	test   eax,eax
c0022498:	74 10                	je     c00224aa <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c002249a:	83 ec 0c             	sub    esp,0xc
c002249d:	68 92 d2 02 c0       	push   0xc002d292
c00224a2:	e8 62 7e ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	a0 40 33 03 c0       	mov    al,ds:0xc0033340
c00224af:	83 f0 01             	xor    eax,0x1
c00224b2:	84 c0                	test   al,al
c00224b4:	74 57                	je     c002250d <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c00224b6:	a1 ac d2 02 c0       	mov    eax,ds:0xc002d2ac
c00224bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224c7:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00224cf:	7f 35                	jg     c0022506 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c00224d1:	83 ec 0c             	sub    esp,0xc
c00224d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224d8:	e8 52 56 00 00       	call   c0027b2f <__floatsisf>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	8b 15 ac d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2ac
c00224e6:	83 ec 08             	sub    esp,0x8
c00224e9:	52                   	push   edx
c00224ea:	50                   	push   eax
c00224eb:	e8 51 52 00 00       	call   c0027741 <__mulsf3>
c00224f0:	83 c4 10             	add    esp,0x10
c00224f3:	89 c2                	mov    edx,eax
c00224f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224f9:	89 14 85 40 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd0c0],edx
c0022500:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022504:	eb c1                	jmp    c00224c7 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022506:	c6 05 40 33 03 c0 01 	mov    BYTE PTR ds:0xc0033340,0x1
c002250d:	90                   	nop
c002250e:	83 c4 1c             	add    esp,0x1c
c0022511:	c3                   	ret    

c0022512 <SoundChannel::~SoundChannel()>:
c0022512:	83 ec 0c             	sub    esp,0xc
c0022515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022519:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	50                   	push   eax
c0022520:	e8 77 d3 fe ff       	call   c000f89c <free>
c0022525:	83 c4 10             	add    esp,0x10
c0022528:	90                   	nop
c0022529:	83 c4 0c             	add    esp,0xc
c002252c:	c3                   	ret    
c002252d:	90                   	nop

c002252e <SoundChannel::getSampleRate()>:
c002252e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022532:	8b 00                	mov    eax,DWORD PTR [eax]
c0022534:	c3                   	ret    
c0022535:	90                   	nop

c0022536 <SoundChannel::getBits()>:
c0022536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002253a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002253d:	c3                   	ret    

c002253e <SoundChannel::getBufferUsed()>:
c002253e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022542:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022545:	c3                   	ret    

c0022546 <SoundChannel::getBufferSize()>:
c0022546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002254a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002254d:	c3                   	ret    

c002254e <SoundChannel::unbuffer(float*, int, int)>:
c002254e:	56                   	push   esi
c002254f:	53                   	push   ebx
c0022550:	83 ec 40             	sub    esp,0x40
c0022553:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022557:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002255a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002255e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022561:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022565:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002256d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022571:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022575:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022579:	e8 b1 55 00 00       	call   c0027b2f <__floatsisf>
c002257e:	5a                   	pop    edx
c002257f:	89 c6                	mov    esi,eax
c0022581:	ff 33                	push   DWORD PTR [ebx]
c0022583:	e8 a7 55 00 00       	call   c0027b2f <__floatsisf>
c0022588:	59                   	pop    ecx
c0022589:	5a                   	pop    edx
c002258a:	50                   	push   eax
c002258b:	56                   	push   esi
c002258c:	e8 73 53 00 00       	call   c0027904 <__divsf3>
c0022591:	89 04 24             	mov    DWORD PTR [esp],eax
c0022594:	e8 66 68 00 00       	call   c0028dff <__extendsfdf2>
c0022599:	59                   	pop    ecx
c002259a:	5e                   	pop    esi
c002259b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002259f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00225a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00225ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225af:	50                   	push   eax
c00225b0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00225b3:	e8 a2 61 fe ff       	call   c000875a <src_process>
c00225b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00225bc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00225bf:	83 c4 0c             	add    esp,0xc
c00225c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00225c5:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00225c8:	29 d0                	sub    eax,edx
c00225ca:	c1 e0 02             	shl    eax,0x2
c00225cd:	50                   	push   eax
c00225ce:	8d 04 91             	lea    eax,[ecx+edx*4]
c00225d1:	50                   	push   eax
c00225d2:	51                   	push   ecx
c00225d3:	e8 b0 e0 fd ff       	call   c0000688 <memmove>
c00225d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225dc:	83 c4 44             	add    esp,0x44
c00225df:	5b                   	pop    ebx
c00225e0:	5e                   	pop    esi
c00225e1:	c3                   	ret    

c00225e2 <SoundChannel::buffer16(short*, int)>:
c00225e2:	55                   	push   ebp
c00225e3:	57                   	push   edi
c00225e4:	56                   	push   esi
c00225e5:	53                   	push   ebx
c00225e6:	83 ec 1c             	sub    esp,0x1c
c00225e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00225ed:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00225f0:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00225f3:	0f 84 d2 00 00 00    	je     c00226cb <SoundChannel::buffer16(short*, int)+0xe9>
c00225f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00225fd:	85 ed                	test   ebp,ebp
c00225ff:	0f 8e c6 00 00 00    	jle    c00226cb <SoundChannel::buffer16(short*, int)+0xe9>
c0022605:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022609:	bd 00 00 00 38       	mov    ebp,0x38000000
c002260e:	83 ec 0c             	sub    esp,0xc
c0022611:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022614:	50                   	push   eax
c0022615:	e8 15 55 00 00       	call   c0027b2f <__floatsisf>
c002261a:	59                   	pop    ecx
c002261b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002261e:	5f                   	pop    edi
c002261f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022622:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022625:	55                   	push   ebp
c0022626:	50                   	push   eax
c0022627:	e8 15 51 00 00       	call   c0027741 <__mulsf3>
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022632:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022635:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022638:	0f 84 99 00 00 00    	je     c00226d7 <SoundChannel::buffer16(short*, int)+0xf5>
c002263e:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022643:	74 78                	je     c00226bd <SoundChannel::buffer16(short*, int)+0xdb>
c0022645:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022649:	83 ec 0c             	sub    esp,0xc
c002264c:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022650:	50                   	push   eax
c0022651:	e8 d9 54 00 00       	call   c0027b2f <__floatsisf>
c0022656:	5f                   	pop    edi
c0022657:	8d 4e 01             	lea    ecx,[esi+0x1]
c002265a:	5a                   	pop    edx
c002265b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002265e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022661:	55                   	push   ebp
c0022662:	50                   	push   eax
c0022663:	e8 d9 50 00 00       	call   c0027741 <__mulsf3>
c0022668:	83 c4 10             	add    esp,0x10
c002266b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002266e:	be 02 00 00 00       	mov    esi,0x2
c0022673:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022676:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022679:	74 46                	je     c00226c1 <SoundChannel::buffer16(short*, int)+0xdf>
c002267b:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002267f:	eb 36                	jmp    c00226b7 <SoundChannel::buffer16(short*, int)+0xd5>
c0022681:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022685:	83 ec 0c             	sub    esp,0xc
c0022688:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c002268c:	46                   	inc    esi
c002268d:	50                   	push   eax
c002268e:	e8 9c 54 00 00       	call   c0027b2f <__floatsisf>
c0022693:	5a                   	pop    edx
c0022694:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022697:	59                   	pop    ecx
c0022698:	8d 4f 01             	lea    ecx,[edi+0x1]
c002269b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002269e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a2:	50                   	push   eax
c00226a3:	e8 99 50 00 00       	call   c0027741 <__mulsf3>
c00226a8:	83 c4 10             	add    esp,0x10
c00226ab:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00226af:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00226b2:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00226b5:	74 0a                	je     c00226c1 <SoundChannel::buffer16(short*, int)+0xdf>
c00226b7:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00226bb:	75 c4                	jne    c0022681 <SoundChannel::buffer16(short*, int)+0x9f>
c00226bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00226c1:	83 c4 1c             	add    esp,0x1c
c00226c4:	89 f0                	mov    eax,esi
c00226c6:	5b                   	pop    ebx
c00226c7:	5e                   	pop    esi
c00226c8:	5f                   	pop    edi
c00226c9:	5d                   	pop    ebp
c00226ca:	c3                   	ret    
c00226cb:	83 c4 1c             	add    esp,0x1c
c00226ce:	31 f6                	xor    esi,esi
c00226d0:	5b                   	pop    ebx
c00226d1:	89 f0                	mov    eax,esi
c00226d3:	5e                   	pop    esi
c00226d4:	5f                   	pop    edi
c00226d5:	5d                   	pop    ebp
c00226d6:	c3                   	ret    
c00226d7:	be 01 00 00 00       	mov    esi,0x1
c00226dc:	eb e3                	jmp    c00226c1 <SoundChannel::buffer16(short*, int)+0xdf>

c00226de <SoundChannel::buffer8(unsigned char*, int)>:
c00226de:	55                   	push   ebp
c00226df:	57                   	push   edi
c00226e0:	56                   	push   esi
c00226e1:	53                   	push   ebx
c00226e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00226e6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00226ea:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00226ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00226f1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00226f4:	74 7a                	je     c0022770 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226f6:	85 ff                	test   edi,edi
c00226f8:	7e 76                	jle    c0022770 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226fa:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00226fe:	8d 70 01             	lea    esi,[eax+0x1]
c0022701:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022704:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022707:	8b 1c 9d 40 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0c0]
c002270e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022711:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022714:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022717:	74 5e                	je     c0022777 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022719:	83 ff 01             	cmp    edi,0x1
c002271c:	74 4b                	je     c0022769 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002271e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022722:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022725:	8d 70 01             	lea    esi,[eax+0x1]
c0022728:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002272b:	8b 1c 9d 40 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0c0]
c0022732:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022735:	b8 02 00 00 00       	mov    eax,0x2
c002273a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002273d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022740:	75 23                	jne    c0022765 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022742:	eb 27                	jmp    c002276b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022744:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022749:	8d 71 01             	lea    esi,[ecx+0x1]
c002274c:	40                   	inc    eax
c002274d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022750:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022753:	8b 1c 9d 40 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0c0]
c002275a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002275d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022760:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022763:	74 06                	je     c002276b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022765:	39 c7                	cmp    edi,eax
c0022767:	75 db                	jne    c0022744 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022769:	89 f8                	mov    eax,edi
c002276b:	5b                   	pop    ebx
c002276c:	5e                   	pop    esi
c002276d:	5f                   	pop    edi
c002276e:	5d                   	pop    ebp
c002276f:	c3                   	ret    
c0022770:	5b                   	pop    ebx
c0022771:	31 c0                	xor    eax,eax
c0022773:	5e                   	pop    esi
c0022774:	5f                   	pop    edi
c0022775:	5d                   	pop    ebp
c0022776:	c3                   	ret    
c0022777:	b8 01 00 00 00       	mov    eax,0x1
c002277c:	eb ed                	jmp    c002276b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002277e <SoundDevice::SoundDevice(char const*)>:
c002277e:	83 ec 1c             	sub    esp,0x1c
c0022781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022785:	83 ec 08             	sub    esp,0x8
c0022788:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002278c:	50                   	push   eax
c002278d:	e8 7e 17 ff ff       	call   c0013f10 <Device::Device(char const*)>
c0022792:	83 c4 10             	add    esp,0x10
c0022795:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c002279a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279e:	89 10                	mov    DWORD PTR [eax],edx
c00227a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227a4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00227ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00227bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227c4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227c9:	7f 19                	jg     c00227e4 <SoundDevice::SoundDevice(char const*)+0x66>
c00227cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227d3:	83 c2 54             	add    edx,0x54
c00227d6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00227de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00227e2:	eb e0                	jmp    c00227c4 <SoundDevice::SoundDevice(char const*)+0x46>
c00227e4:	90                   	nop
c00227e5:	83 c4 1c             	add    esp,0x1c
c00227e8:	c3                   	ret    
c00227e9:	90                   	nop

c00227ea <SoundDevice::~SoundDevice()>:
c00227ea:	53                   	push   ebx
c00227eb:	83 ec 18             	sub    esp,0x18
c00227ee:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c00227f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227f7:	89 10                	mov    DWORD PTR [eax],edx
c00227f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022801:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022806:	7f 46                	jg     c002284e <SoundDevice::~SoundDevice()+0x64>
c0022808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002280c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022810:	83 c2 54             	add    edx,0x54
c0022813:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022817:	85 c0                	test   eax,eax
c0022819:	74 2d                	je     c0022848 <SoundDevice::~SoundDevice()+0x5e>
c002281b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002281f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022823:	83 c2 54             	add    edx,0x54
c0022826:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002282a:	85 db                	test   ebx,ebx
c002282c:	74 1a                	je     c0022848 <SoundDevice::~SoundDevice()+0x5e>
c002282e:	83 ec 0c             	sub    esp,0xc
c0022831:	53                   	push   ebx
c0022832:	e8 db fc ff ff       	call   c0022512 <SoundChannel::~SoundChannel()>
c0022837:	83 c4 10             	add    esp,0x10
c002283a:	83 ec 08             	sub    esp,0x8
c002283d:	6a 2c                	push   0x2c
c002283f:	53                   	push   ebx
c0022840:	e8 ae ff fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0022845:	83 c4 10             	add    esp,0x10
c0022848:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002284c:	eb b3                	jmp    c0022801 <SoundDevice::~SoundDevice()+0x17>
c002284e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022852:	83 ec 0c             	sub    esp,0xc
c0022855:	50                   	push   eax
c0022856:	e8 7f 13 ff ff       	call   c0013bda <Device::~Device()>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	90                   	nop
c002285f:	83 c4 18             	add    esp,0x18
c0022862:	5b                   	pop    ebx
c0022863:	c3                   	ret    

c0022864 <SoundDevice::~SoundDevice()>:
c0022864:	83 ec 0c             	sub    esp,0xc
c0022867:	83 ec 0c             	sub    esp,0xc
c002286a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002286e:	e8 77 ff ff ff       	call   c00227ea <SoundDevice::~SoundDevice()>
c0022873:	83 c4 10             	add    esp,0x10
c0022876:	83 ec 08             	sub    esp,0x8
c0022879:	68 e4 01 00 00       	push   0x1e4
c002287e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022882:	e8 6c ff fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0022887:	83 c4 10             	add    esp,0x10
c002288a:	83 c4 0c             	add    esp,0xc
c002288d:	c3                   	ret    

c002288e <SoundDevice::getFreeChannelNum()>:
c002288e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022892:	31 c0                	xor    eax,eax
c0022894:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002289c:	74 09                	je     c00228a7 <SoundDevice::getFreeChannelNum()+0x19>
c002289e:	40                   	inc    eax
c002289f:	83 f8 20             	cmp    eax,0x20
c00228a2:	75 f0                	jne    c0022894 <SoundDevice::getFreeChannelNum()+0x6>
c00228a4:	83 c8 ff             	or     eax,0xffffffff
c00228a7:	c3                   	ret    

c00228a8 <SoundDevice::addChannel(SoundChannel*)>:
c00228a8:	56                   	push   esi
c00228a9:	53                   	push   ebx
c00228aa:	51                   	push   ecx
c00228ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228b3:	53                   	push   ebx
c00228b4:	e8 d5 ff ff ff       	call   c002288e <SoundDevice::getFreeChannelNum()>
c00228b9:	5a                   	pop    edx
c00228ba:	83 f8 ff             	cmp    eax,0xffffffff
c00228bd:	74 51                	je     c0022910 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228bf:	85 f6                	test   esi,esi
c00228c1:	74 4d                	je     c0022910 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228c3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00228ca:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00228d1:	75 30                	jne    c0022903 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00228d3:	83 ec 0c             	sub    esp,0xc
c00228d6:	56                   	push   esi
c00228d7:	e8 52 fc ff ff       	call   c002252e <SoundChannel::getSampleRate()>
c00228dc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00228e2:	89 34 24             	mov    DWORD PTR [esp],esi
c00228e5:	e8 4c fc ff ff       	call   c0022536 <SoundChannel::getBits()>
c00228ea:	83 c4 0c             	add    esp,0xc
c00228ed:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00228f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228f5:	50                   	push   eax
c00228f6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00228fc:	53                   	push   ebx
c00228fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022900:	83 c4 10             	add    esp,0x10
c0022903:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022909:	b8 01 00 00 00       	mov    eax,0x1
c002290e:	eb 03                	jmp    c0022913 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022910:	83 c8 ff             	or     eax,0xffffffff
c0022913:	5a                   	pop    edx
c0022914:	5b                   	pop    ebx
c0022915:	5e                   	pop    esi
c0022916:	c3                   	ret    
c0022917:	90                   	nop

c0022918 <SoundDevice::removeChannel(int)>:
c0022918:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002291c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022920:	83 fa 1f             	cmp    edx,0x1f
c0022923:	77 23                	ja     c0022948 <SoundDevice::removeChannel(int)+0x30>
c0022925:	8d 14 90             	lea    edx,[eax+edx*4]
c0022928:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002292f:	74 17                	je     c0022948 <SoundDevice::removeChannel(int)+0x30>
c0022931:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002293b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022941:	75 05                	jne    c0022948 <SoundDevice::removeChannel(int)+0x30>
c0022943:	8b 00                	mov    eax,DWORD PTR [eax]
c0022945:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022948:	c3                   	ret    
c0022949:	90                   	nop

c002294a <SoundDevice::floatTo16(float*, short*, int)>:
c002294a:	57                   	push   edi
c002294b:	56                   	push   esi
c002294c:	53                   	push   ebx
c002294d:	31 db                	xor    ebx,ebx
c002294f:	83 ec 10             	sub    esp,0x10
c0022952:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022956:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002295a:	0f 8d d0 00 00 00    	jge    c0022a30 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022960:	83 ec 0c             	sub    esp,0xc
c0022963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022967:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002296a:	e8 90 64 00 00       	call   c0028dff <__extendsfdf2>
c002296f:	83 c4 10             	add    esp,0x10
c0022972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022976:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002297a:	68 00 00 f0 3f       	push   0x3ff00000
c002297f:	6a 00                	push   0x0
c0022981:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022985:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022989:	e8 fd 53 00 00       	call   c0027d8b <__adddf3>
c002298e:	83 c4 10             	add    esp,0x10
c0022991:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022995:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022999:	68 00 00 e0 3f       	push   0x3fe00000
c002299e:	6a 00                	push   0x0
c00229a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a8:	e8 5b 5a 00 00       	call   c0028408 <__muldf3>
c00229ad:	83 c4 10             	add    esp,0x10
c00229b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229b8:	68 c0 ff df 40       	push   0x40dfffc0
c00229bd:	6a 00                	push   0x0
c00229bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c7:	e8 3c 5a 00 00       	call   c0028408 <__muldf3>
c00229cc:	59                   	pop    ecx
c00229cd:	5f                   	pop    edi
c00229ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00229d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229de:	e8 f8 62 00 00       	call   c0028cdb <__truncdfsf2>
c00229e3:	5a                   	pop    edx
c00229e4:	89 c7                	mov    edi,eax
c00229e6:	59                   	pop    ecx
c00229e7:	68 00 fe ff 46       	push   0x46fffe00
c00229ec:	50                   	push   eax
c00229ed:	e8 93 53 00 00       	call   c0027d85 <__gesf2>
c00229f2:	83 c4 10             	add    esp,0x10
c00229f5:	85 c0                	test   eax,eax
c00229f7:	78 08                	js     c0022a01 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00229f9:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00229ff:	eb 29                	jmp    c0022a2a <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a01:	50                   	push   eax
c0022a02:	50                   	push   eax
c0022a03:	6a 00                	push   0x0
c0022a05:	57                   	push   edi
c0022a06:	e8 7e 53 00 00       	call   c0027d89 <__lesf2>
c0022a0b:	83 c4 10             	add    esp,0x10
c0022a0e:	85 c0                	test   eax,eax
c0022a10:	7f 08                	jg     c0022a1a <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022a12:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022a18:	eb 10                	jmp    c0022a2a <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a1a:	83 ec 0c             	sub    esp,0xc
c0022a1d:	57                   	push   edi
c0022a1e:	e8 79 64 00 00       	call   c0028e9c <lrintf>
c0022a23:	83 c4 10             	add    esp,0x10
c0022a26:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022a2a:	43                   	inc    ebx
c0022a2b:	e9 26 ff ff ff       	jmp    c0022956 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022a30:	83 c4 10             	add    esp,0x10
c0022a33:	5b                   	pop    ebx
c0022a34:	5e                   	pop    esi
c0022a35:	5f                   	pop    edi
c0022a36:	c3                   	ret    
c0022a37:	90                   	nop

c0022a38 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022a38:	57                   	push   edi
c0022a39:	56                   	push   esi
c0022a3a:	53                   	push   ebx
c0022a3b:	31 db                	xor    ebx,ebx
c0022a3d:	83 ec 10             	sub    esp,0x10
c0022a40:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a44:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a48:	0f 8d cb 00 00 00    	jge    c0022b19 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022a4e:	83 ec 0c             	sub    esp,0xc
c0022a51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a58:	e8 a2 63 00 00       	call   c0028dff <__extendsfdf2>
c0022a5d:	83 c4 10             	add    esp,0x10
c0022a60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a68:	68 00 00 f0 3f       	push   0x3ff00000
c0022a6d:	6a 00                	push   0x0
c0022a6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a77:	e8 0f 53 00 00       	call   c0027d8b <__adddf3>
c0022a7c:	83 c4 10             	add    esp,0x10
c0022a7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a87:	68 00 00 e0 3f       	push   0x3fe00000
c0022a8c:	6a 00                	push   0x0
c0022a8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a96:	e8 6d 59 00 00       	call   c0028408 <__muldf3>
c0022a9b:	83 c4 10             	add    esp,0x10
c0022a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022aa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aa6:	68 00 00 60 40       	push   0x40600000
c0022aab:	6a 00                	push   0x0
c0022aad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab5:	e8 4e 59 00 00       	call   c0028408 <__muldf3>
c0022aba:	59                   	pop    ecx
c0022abb:	5f                   	pop    edi
c0022abc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ac0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022acc:	e8 0a 62 00 00       	call   c0028cdb <__truncdfsf2>
c0022ad1:	5a                   	pop    edx
c0022ad2:	89 c7                	mov    edi,eax
c0022ad4:	59                   	pop    ecx
c0022ad5:	68 00 00 fe 42       	push   0x42fe0000
c0022ada:	50                   	push   eax
c0022adb:	e8 a5 52 00 00       	call   c0027d85 <__gesf2>
c0022ae0:	83 c4 10             	add    esp,0x10
c0022ae3:	85 c0                	test   eax,eax
c0022ae5:	78 06                	js     c0022aed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022ae7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022aeb:	eb 26                	jmp    c0022b13 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022aed:	50                   	push   eax
c0022aee:	50                   	push   eax
c0022aef:	6a 00                	push   0x0
c0022af1:	57                   	push   edi
c0022af2:	e8 92 52 00 00       	call   c0027d89 <__lesf2>
c0022af7:	83 c4 10             	add    esp,0x10
c0022afa:	85 c0                	test   eax,eax
c0022afc:	7f 06                	jg     c0022b04 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022afe:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022b02:	eb 0f                	jmp    c0022b13 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b04:	83 ec 0c             	sub    esp,0xc
c0022b07:	57                   	push   edi
c0022b08:	e8 8f 63 00 00       	call   c0028e9c <lrintf>
c0022b0d:	83 c4 10             	add    esp,0x10
c0022b10:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b13:	43                   	inc    ebx
c0022b14:	e9 2b ff ff ff       	jmp    c0022a44 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022b19:	83 c4 10             	add    esp,0x10
c0022b1c:	5b                   	pop    ebx
c0022b1d:	5e                   	pop    esi
c0022b1e:	5f                   	pop    edi
c0022b1f:	c3                   	ret    

c0022b20 <SoundDevice::getAudio(int, float*, float*)>:
c0022b20:	55                   	push   ebp
c0022b21:	57                   	push   edi
c0022b22:	56                   	push   esi
c0022b23:	53                   	push   ebx
c0022b24:	83 ec 28             	sub    esp,0x28
c0022b27:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022b2b:	68 b0 d2 02 c0       	push   0xc002d2b0
c0022b30:	e8 9e fd fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022b35:	59                   	pop    ecx
c0022b36:	5e                   	pop    esi
c0022b37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022b3b:	68 c7 d2 02 c0       	push   0xc002d2c7
c0022b40:	e8 8e fd fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022b45:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022b49:	83 c4 0c             	add    esp,0xc
c0022b4c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022b53:	56                   	push   esi
c0022b54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b58:	68 e9 d2 02 c0       	push   0xc002d2e9
c0022b5d:	e8 71 fd fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022b62:	83 c4 0c             	add    esp,0xc
c0022b65:	56                   	push   esi
c0022b66:	31 f6                	xor    esi,esi
c0022b68:	6a 00                	push   0x0
c0022b6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022b6e:	e8 dd db fd ff       	call   c0000750 <memset>
c0022b73:	83 c4 10             	add    esp,0x10
c0022b76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b86:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022b8d:	85 c0                	test   eax,eax
c0022b8f:	0f 84 d7 00 00 00    	je     c0022c6c <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022b95:	83 ec 0c             	sub    esp,0xc
c0022b98:	50                   	push   eax
c0022b99:	e8 a8 f9 ff ff       	call   c0022546 <SoundChannel::getBufferSize()>
c0022b9e:	5f                   	pop    edi
c0022b9f:	5d                   	pop    ebp
c0022ba0:	50                   	push   eax
c0022ba1:	68 0d d3 02 c0       	push   0xc002d30d
c0022ba6:	e8 28 fd fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022bab:	58                   	pop    eax
c0022bac:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bb3:	e8 86 f9 ff ff       	call   c002253e <SoundChannel::getBufferUsed()>
c0022bb8:	5a                   	pop    edx
c0022bb9:	59                   	pop    ecx
c0022bba:	50                   	push   eax
c0022bbb:	68 20 d3 02 c0       	push   0xc002d320
c0022bc0:	e8 0e fd fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022bc5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022bc9:	99                   	cdq    
c0022bca:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022bd0:	50                   	push   eax
c0022bd1:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022bd7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022bdb:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022be2:	e8 67 f9 ff ff       	call   c002254e <SoundChannel::unbuffer(float*, int, int)>
c0022be7:	83 c4 14             	add    esp,0x14
c0022bea:	89 c5                	mov    ebp,eax
c0022bec:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bf3:	e8 46 f9 ff ff       	call   c002253e <SoundChannel::getBufferUsed()>
c0022bf8:	5f                   	pop    edi
c0022bf9:	5a                   	pop    edx
c0022bfa:	50                   	push   eax
c0022bfb:	68 38 d3 02 c0       	push   0xc002d338
c0022c00:	e8 ce fc fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022c05:	56                   	push   esi
c0022c06:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022c0a:	99                   	cdq    
c0022c0b:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c11:	50                   	push   eax
c0022c12:	55                   	push   ebp
c0022c13:	68 50 d3 02 c0       	push   0xc002d350
c0022c18:	e8 b6 fc fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022c1d:	83 c4 20             	add    esp,0x20
c0022c20:	31 c0                	xor    eax,eax
c0022c22:	39 e8                	cmp    eax,ebp
c0022c24:	7d 1e                	jge    c0022c44 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022c26:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022c2c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022c30:	0f af d0             	imul   edx,eax
c0022c33:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022c36:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022c3a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022c3e:	40                   	inc    eax
c0022c3f:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022c42:	eb de                	jmp    c0022c22 <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022c44:	50                   	push   eax
c0022c45:	50                   	push   eax
c0022c46:	55                   	push   ebp
c0022c47:	68 7d d3 02 c0       	push   0xc002d37d
c0022c4c:	e8 82 fc fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022c51:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022c55:	5a                   	pop    edx
c0022c56:	59                   	pop    ecx
c0022c57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c5b:	68 8e d3 02 c0       	push   0xc002d38e
c0022c60:	e8 6e fc fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022c65:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022c69:	83 c4 10             	add    esp,0x10
c0022c6c:	46                   	inc    esi
c0022c6d:	83 fe 20             	cmp    esi,0x20
c0022c70:	0f 85 10 ff ff ff    	jne    c0022b86 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022c76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c7a:	83 c4 1c             	add    esp,0x1c
c0022c7d:	5b                   	pop    ebx
c0022c7e:	5e                   	pop    esi
c0022c7f:	5f                   	pop    edi
c0022c80:	5d                   	pop    ebp
c0022c81:	c3                   	ret    

c0022c82 <PCI::open(int, int, void*)>:
c0022c82:	83 ec 18             	sub    esp,0x18
c0022c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022c8d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c93:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c95:	50                   	push   eax
c0022c96:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022c99:	31 c0                	xor    eax,eax
c0022c9b:	83 c4 1c             	add    esp,0x1c
c0022c9e:	c3                   	ret    
c0022c9f:	90                   	nop

c0022ca0 <PCI::close(int, int, void*)>:
c0022ca0:	31 c0                	xor    eax,eax
c0022ca2:	c3                   	ret    
c0022ca3:	90                   	nop

c0022ca4 <PCI::PCI()>:
c0022ca4:	83 ec 0c             	sub    esp,0xc
c0022ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cab:	83 ec 08             	sub    esp,0x8
c0022cae:	68 dc d3 02 c0       	push   0xc002d3dc
c0022cb3:	50                   	push   eax
c0022cb4:	e8 bb 08 ff ff       	call   c0013574 <Bus::Bus(char const*)>
c0022cb9:	83 c4 10             	add    esp,0x10
c0022cbc:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0022cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc5:	89 10                	mov    DWORD PTR [eax],edx
c0022cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ccb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd9:	a3 44 33 03 c0       	mov    ds:0xc0033344,eax
c0022cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ce8:	0f b6 d0             	movzx  edx,al
c0022ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cef:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d00:	0f b6 d0             	movzx  edx,al
c0022d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d07:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d16:	8d 50 01             	lea    edx,[eax+0x1]
c0022d19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d1d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022d23:	0f b6 d0             	movzx  edx,al
c0022d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022d2e:	83 c9 c0             	or     ecx,0xffffffc0
c0022d31:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022d35:	90                   	nop
c0022d36:	83 c4 0c             	add    esp,0xc
c0022d39:	c3                   	ret    

c0022d3a <PCI::readBAR8(unsigned int, int)>:
c0022d3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d42:	f6 c2 01             	test   dl,0x1
c0022d45:	74 07                	je     c0022d4e <PCI::readBAR8(unsigned int, int)+0x14>
c0022d47:	83 e2 fc             	and    edx,0xfffffffc
c0022d4a:	01 c2                	add    edx,eax
c0022d4c:	ec                   	in     al,dx
c0022d4d:	c3                   	ret    
c0022d4e:	83 e2 f0             	and    edx,0xfffffff0
c0022d51:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022d54:	c3                   	ret    
c0022d55:	90                   	nop

c0022d56 <PCI::readBAR16(unsigned int, int)>:
c0022d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d5e:	f6 c2 01             	test   dl,0x1
c0022d61:	74 08                	je     c0022d6b <PCI::readBAR16(unsigned int, int)+0x15>
c0022d63:	83 e2 fc             	and    edx,0xfffffffc
c0022d66:	01 c2                	add    edx,eax
c0022d68:	66 ed                	in     ax,dx
c0022d6a:	c3                   	ret    
c0022d6b:	83 e2 f0             	and    edx,0xfffffff0
c0022d6e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022d72:	c3                   	ret    
c0022d73:	90                   	nop

c0022d74 <PCI::readBAR32(unsigned int, int)>:
c0022d74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d7c:	f6 c2 01             	test   dl,0x1
c0022d7f:	74 07                	je     c0022d88 <PCI::readBAR32(unsigned int, int)+0x14>
c0022d81:	83 e2 fc             	and    edx,0xfffffffc
c0022d84:	01 c2                	add    edx,eax
c0022d86:	ed                   	in     eax,dx
c0022d87:	c3                   	ret    
c0022d88:	83 e2 f0             	and    edx,0xfffffff0
c0022d8b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022d8e:	c3                   	ret    
c0022d8f:	90                   	nop

c0022d90 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022d90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d9c:	f6 c2 01             	test   dl,0x1
c0022d9f:	74 07                	je     c0022da8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022da1:	83 e2 fc             	and    edx,0xfffffffc
c0022da4:	01 ca                	add    edx,ecx
c0022da6:	ee                   	out    dx,al
c0022da7:	c3                   	ret    
c0022da8:	83 e2 f0             	and    edx,0xfffffff0
c0022dab:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022dae:	c3                   	ret    
c0022daf:	90                   	nop

c0022db0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022db0:	57                   	push   edi
c0022db1:	56                   	push   esi
c0022db2:	53                   	push   ebx
c0022db3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022db7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022dbb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022dbf:	f6 c2 01             	test   dl,0x1
c0022dc2:	74 24                	je     c0022de8 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022dc4:	89 d3                	mov    ebx,edx
c0022dc6:	83 e3 fc             	and    ebx,0xfffffffc
c0022dc9:	50                   	push   eax
c0022dca:	0f b7 c7             	movzx  eax,di
c0022dcd:	50                   	push   eax
c0022dce:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022dd1:	50                   	push   eax
c0022dd2:	68 e4 d3 02 c0       	push   0xc002d3e4
c0022dd7:	e8 f7 fa fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0022ddc:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022ddf:	89 f8                	mov    eax,edi
c0022de1:	66 ef                	out    dx,ax
c0022de3:	83 c4 10             	add    esp,0x10
c0022de6:	eb 07                	jmp    c0022def <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022de8:	83 e2 f0             	and    edx,0xfffffff0
c0022deb:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022def:	5b                   	pop    ebx
c0022df0:	5e                   	pop    esi
c0022df1:	5f                   	pop    edi
c0022df2:	c3                   	ret    
c0022df3:	90                   	nop

c0022df4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e00:	f6 c2 01             	test   dl,0x1
c0022e03:	74 07                	je     c0022e0c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022e05:	83 e2 fc             	and    edx,0xfffffffc
c0022e08:	01 ca                	add    edx,ecx
c0022e0a:	ef                   	out    dx,eax
c0022e0b:	c3                   	ret    
c0022e0c:	83 e2 f0             	and    edx,0xfffffff0
c0022e0f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022e12:	c3                   	ret    
c0022e13:	90                   	nop

c0022e14 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e14:	55                   	push   ebp
c0022e15:	57                   	push   edi
c0022e16:	56                   	push   esi
c0022e17:	53                   	push   ebx
c0022e18:	83 ec 0c             	sub    esp,0xc
c0022e1b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022e1f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022e23:	89 f0                	mov    eax,esi
c0022e25:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022e29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e2d:	3c 07                	cmp    al,0x7
c0022e2f:	76 10                	jbe    c0022e41 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022e31:	83 ec 0c             	sub    esp,0xc
c0022e34:	68 fb d3 02 c0       	push   0xc002d3fb
c0022e39:	e8 cb 74 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0022e3e:	83 c4 10             	add    esp,0x10
c0022e41:	80 fb 0f             	cmp    bl,0xf
c0022e44:	76 10                	jbe    c0022e56 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022e46:	83 ec 0c             	sub    esp,0xc
c0022e49:	68 2b d4 02 c0       	push   0xc002d42b
c0022e4e:	e8 b6 74 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0022e53:	83 c4 10             	add    esp,0x10
c0022e56:	8d 04 36             	lea    eax,[esi+esi*1]
c0022e59:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e5e:	83 c8 f0             	or     eax,0xfffffff0
c0022e61:	ee                   	out    dx,al
c0022e62:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022e67:	89 e8                	mov    eax,ebp
c0022e69:	ee                   	out    dx,al
c0022e6a:	83 c4 0c             	add    esp,0xc
c0022e6d:	89 d8                	mov    eax,ebx
c0022e6f:	66 81 e7 fc 00       	and    di,0xfc
c0022e74:	5b                   	pop    ebx
c0022e75:	c1 e0 08             	shl    eax,0x8
c0022e78:	5e                   	pop    esi
c0022e79:	09 f8                	or     eax,edi
c0022e7b:	5f                   	pop    edi
c0022e7c:	66 0d 00 c0          	or     ax,0xc000
c0022e80:	5d                   	pop    ebp
c0022e81:	c3                   	ret    

c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e82:	57                   	push   edi
c0022e83:	56                   	push   esi
c0022e84:	53                   	push   ebx
c0022e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e8d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022e93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022e9b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022e9f:	83 ff 01             	cmp    edi,0x1
c0022ea2:	75 3e                	jne    c0022ee2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022ea4:	89 de                	mov    esi,ebx
c0022ea6:	0f b6 c0             	movzx  eax,al
c0022ea9:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022eaf:	c1 e0 10             	shl    eax,0x10
c0022eb2:	0f b6 c9             	movzx  ecx,cl
c0022eb5:	09 f0                	or     eax,esi
c0022eb7:	c1 e1 08             	shl    ecx,0x8
c0022eba:	0f b6 d2             	movzx  edx,dl
c0022ebd:	09 c8                	or     eax,ecx
c0022ebf:	c1 e2 0b             	shl    edx,0xb
c0022ec2:	09 d0                	or     eax,edx
c0022ec4:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ec9:	0d 00 00 00 80       	or     eax,0x80000000
c0022ece:	ef                   	out    dx,eax
c0022ecf:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ed4:	ed                   	in     eax,dx
c0022ed5:	83 e3 02             	and    ebx,0x2
c0022ed8:	0f b6 cb             	movzx  ecx,bl
c0022edb:	c1 e1 03             	shl    ecx,0x3
c0022ede:	d3 e8                	shr    eax,cl
c0022ee0:	eb 43                	jmp    c0022f25 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022ee2:	83 ff 02             	cmp    edi,0x2
c0022ee5:	75 2c                	jne    c0022f13 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022ee7:	83 ec 0c             	sub    esp,0xc
c0022eea:	0f b6 c9             	movzx  ecx,cl
c0022eed:	0f b6 d2             	movzx  edx,dl
c0022ef0:	0f b6 fb             	movzx  edi,bl
c0022ef3:	0f b6 c0             	movzx  eax,al
c0022ef6:	57                   	push   edi
c0022ef7:	51                   	push   ecx
c0022ef8:	52                   	push   edx
c0022ef9:	50                   	push   eax
c0022efa:	56                   	push   esi
c0022efb:	e8 14 ff ff ff       	call   c0022e14 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f00:	89 c2                	mov    edx,eax
c0022f02:	ed                   	in     eax,dx
c0022f03:	83 e3 02             	and    ebx,0x2
c0022f06:	83 c4 20             	add    esp,0x20
c0022f09:	0f b6 cb             	movzx  ecx,bl
c0022f0c:	c1 e1 03             	shl    ecx,0x3
c0022f0f:	d3 e8                	shr    eax,cl
c0022f11:	eb 12                	jmp    c0022f25 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f13:	83 ec 0c             	sub    esp,0xc
c0022f16:	68 5b d4 02 c0       	push   0xc002d45b
c0022f1b:	e8 e9 73 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0022f20:	83 c4 10             	add    esp,0x10
c0022f23:	31 c0                	xor    eax,eax
c0022f25:	5b                   	pop    ebx
c0022f26:	5e                   	pop    esi
c0022f27:	5f                   	pop    edi
c0022f28:	c3                   	ret    
c0022f29:	90                   	nop

c0022f2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022f2a:	83 ec 18             	sub    esp,0x18
c0022f2d:	6a 00                	push   0x0
c0022f2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f34:	50                   	push   eax
c0022f35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f3a:	50                   	push   eax
c0022f3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f40:	50                   	push   eax
c0022f41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f45:	e8 38 ff ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f4a:	83 c4 2c             	add    esp,0x2c
c0022f4d:	c3                   	ret    

c0022f4e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022f4e:	83 ec 18             	sub    esp,0x18
c0022f51:	6a 0e                	push   0xe
c0022f53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f58:	50                   	push   eax
c0022f59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f5e:	50                   	push   eax
c0022f5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f64:	50                   	push   eax
c0022f65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f69:	e8 14 ff ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f6e:	83 c4 2c             	add    esp,0x2c
c0022f71:	0f b6 c0             	movzx  eax,al
c0022f74:	c3                   	ret    
c0022f75:	90                   	nop

c0022f76 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022f76:	55                   	push   ebp
c0022f77:	57                   	push   edi
c0022f78:	56                   	push   esi
c0022f79:	53                   	push   ebx
c0022f7a:	83 ec 18             	sub    esp,0x18
c0022f7d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022f82:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022f87:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022f8c:	6a 0a                	push   0xa
c0022f8e:	56                   	push   esi
c0022f8f:	55                   	push   ebp
c0022f90:	57                   	push   edi
c0022f91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022f95:	e8 e8 fe ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f9a:	83 c4 14             	add    esp,0x14
c0022f9d:	89 c3                	mov    ebx,eax
c0022f9f:	6a 0a                	push   0xa
c0022fa1:	0f b6 db             	movzx  ebx,bl
c0022fa4:	56                   	push   esi
c0022fa5:	55                   	push   ebp
c0022fa6:	57                   	push   edi
c0022fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fab:	e8 d2 fe ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fb0:	83 c4 2c             	add    esp,0x2c
c0022fb3:	25 00 ff 00 00       	and    eax,0xff00
c0022fb8:	09 d8                	or     eax,ebx
c0022fba:	5b                   	pop    ebx
c0022fbb:	5e                   	pop    esi
c0022fbc:	5f                   	pop    edi
c0022fbd:	5d                   	pop    ebp
c0022fbe:	c3                   	ret    
c0022fbf:	90                   	nop

c0022fc0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022fc0:	83 ec 18             	sub    esp,0x18
c0022fc3:	6a 08                	push   0x8
c0022fc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fca:	50                   	push   eax
c0022fcb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fd0:	50                   	push   eax
c0022fd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fd6:	50                   	push   eax
c0022fd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fdb:	e8 a2 fe ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fe0:	83 c4 2c             	add    esp,0x2c
c0022fe3:	0f b6 c4             	movzx  eax,ah
c0022fe6:	c3                   	ret    
c0022fe7:	90                   	nop

c0022fe8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022fe8:	83 ec 18             	sub    esp,0x18
c0022feb:	6a 08                	push   0x8
c0022fed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff2:	50                   	push   eax
c0022ff3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff8:	50                   	push   eax
c0022ff9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ffe:	50                   	push   eax
c0022fff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023003:	e8 7a fe ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023008:	83 c4 2c             	add    esp,0x2c
c002300b:	c3                   	ret    

c002300c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002300c:	83 ec 18             	sub    esp,0x18
c002300f:	6a 3c                	push   0x3c
c0023011:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023016:	50                   	push   eax
c0023017:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002301c:	50                   	push   eax
c002301d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023022:	50                   	push   eax
c0023023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023027:	e8 56 fe ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002302c:	83 c4 2c             	add    esp,0x2c
c002302f:	c3                   	ret    

c0023030 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023030:	83 ec 18             	sub    esp,0x18
c0023033:	6a 18                	push   0x18
c0023035:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002303a:	50                   	push   eax
c002303b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023040:	50                   	push   eax
c0023041:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023046:	50                   	push   eax
c0023047:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002304b:	e8 32 fe ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023050:	83 c4 2c             	add    esp,0x2c
c0023053:	0f b6 c4             	movzx  eax,ah
c0023056:	c3                   	ret    
c0023057:	90                   	nop

c0023058 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023058:	55                   	push   ebp
c0023059:	57                   	push   edi
c002305a:	56                   	push   esi
c002305b:	53                   	push   ebx
c002305c:	83 ec 28             	sub    esp,0x28
c002305f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023063:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023068:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002306d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0023072:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023079:	8d 43 12             	lea    eax,[ebx+0x12]
c002307c:	83 c3 10             	add    ebx,0x10
c002307f:	0f b6 c0             	movzx  eax,al
c0023082:	0f b6 db             	movzx  ebx,bl
c0023085:	50                   	push   eax
c0023086:	51                   	push   ecx
c0023087:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002308b:	57                   	push   edi
c002308c:	55                   	push   ebp
c002308d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023091:	e8 ec fd ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023096:	83 c4 14             	add    esp,0x14
c0023099:	89 c6                	mov    esi,eax
c002309b:	53                   	push   ebx
c002309c:	c1 e6 10             	shl    esi,0x10
c002309f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00230a3:	51                   	push   ecx
c00230a4:	57                   	push   edi
c00230a5:	55                   	push   ebp
c00230a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230aa:	e8 d3 fd ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230af:	83 c4 3c             	add    esp,0x3c
c00230b2:	0f b7 c0             	movzx  eax,ax
c00230b5:	5b                   	pop    ebx
c00230b6:	09 f0                	or     eax,esi
c00230b8:	5e                   	pop    esi
c00230b9:	5f                   	pop    edi
c00230ba:	5d                   	pop    ebp
c00230bb:	c3                   	ret    

c00230bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00230bc:	55                   	push   ebp
c00230bd:	57                   	push   edi
c00230be:	56                   	push   esi
c00230bf:	53                   	push   ebx
c00230c0:	83 ec 0c             	sub    esp,0xc
c00230c3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00230c7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230cb:	89 f5                	mov    ebp,esi
c00230cd:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00230d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00230d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230e3:	83 f9 01             	cmp    ecx,0x1
c00230e6:	75 5d                	jne    c0023145 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00230e8:	0f b6 c8             	movzx  ecx,al
c00230eb:	0f b6 d2             	movzx  edx,dl
c00230ee:	c1 e1 10             	shl    ecx,0x10
c00230f1:	c1 e2 0b             	shl    edx,0xb
c00230f4:	89 f0                	mov    eax,esi
c00230f6:	25 fc 00 00 00       	and    eax,0xfc
c00230fb:	09 c1                	or     ecx,eax
c00230fd:	89 e8                	mov    eax,ebp
c00230ff:	0f b6 c0             	movzx  eax,al
c0023102:	c1 e0 08             	shl    eax,0x8
c0023105:	09 c1                	or     ecx,eax
c0023107:	09 d1                	or     ecx,edx
c0023109:	ba f8 0c 00 00       	mov    edx,0xcf8
c002310e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023114:	89 c8                	mov    eax,ecx
c0023116:	ef                   	out    dx,eax
c0023117:	ba fc 0c 00 00       	mov    edx,0xcfc
c002311c:	ed                   	in     eax,dx
c002311d:	0f b7 db             	movzx  ebx,bx
c0023120:	83 e6 02             	and    esi,0x2
c0023123:	74 0a                	je     c002312f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0023125:	0f b7 d0             	movzx  edx,ax
c0023128:	c1 e3 10             	shl    ebx,0x10
c002312b:	09 d3                	or     ebx,edx
c002312d:	eb 05                	jmp    c0023134 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002312f:	66 31 c0             	xor    ax,ax
c0023132:	09 c3                	or     ebx,eax
c0023134:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023139:	89 c8                	mov    eax,ecx
c002313b:	ef                   	out    dx,eax
c002313c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023141:	89 d8                	mov    eax,ebx
c0023143:	eb 41                	jmp    c0023186 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023145:	83 f9 02             	cmp    ecx,0x2
c0023148:	75 45                	jne    c002318f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002314a:	83 ec 0c             	sub    esp,0xc
c002314d:	0f b6 d2             	movzx  edx,dl
c0023150:	89 f1                	mov    ecx,esi
c0023152:	0f b6 c0             	movzx  eax,al
c0023155:	0f b6 f1             	movzx  esi,cl
c0023158:	89 e9                	mov    ecx,ebp
c002315a:	56                   	push   esi
c002315b:	0f b6 c9             	movzx  ecx,cl
c002315e:	51                   	push   ecx
c002315f:	52                   	push   edx
c0023160:	50                   	push   eax
c0023161:	57                   	push   edi
c0023162:	e8 ad fc ff ff       	call   c0022e14 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023167:	89 c2                	mov    edx,eax
c0023169:	ed                   	in     eax,dx
c002316a:	83 c4 20             	add    esp,0x20
c002316d:	0f b7 db             	movzx  ebx,bx
c0023170:	f6 c2 02             	test   dl,0x2
c0023173:	74 0c                	je     c0023181 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0023175:	0f b7 c8             	movzx  ecx,ax
c0023178:	89 d8                	mov    eax,ebx
c002317a:	c1 e0 10             	shl    eax,0x10
c002317d:	09 c8                	or     eax,ecx
c002317f:	eb 05                	jmp    c0023186 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023181:	66 31 c0             	xor    ax,ax
c0023184:	09 d8                	or     eax,ebx
c0023186:	ef                   	out    dx,eax
c0023187:	83 c4 0c             	add    esp,0xc
c002318a:	5b                   	pop    ebx
c002318b:	5e                   	pop    esi
c002318c:	5f                   	pop    edi
c002318d:	5d                   	pop    ebp
c002318e:	c3                   	ret    
c002318f:	c7 44 24 20 5b d4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d45b
c0023197:	83 c4 0c             	add    esp,0xc
c002319a:	5b                   	pop    ebx
c002319b:	5e                   	pop    esi
c002319c:	5f                   	pop    edi
c002319d:	5d                   	pop    ebp
c002319e:	e9 66 71 ff ff       	jmp    c001a309 <Krnl::panic(char const*)>
c00231a3:	90                   	nop

c00231a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00231a4:	55                   	push   ebp
c00231a5:	57                   	push   edi
c00231a6:	56                   	push   esi
c00231a7:	53                   	push   ebx
c00231a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00231ae:	80 3d 50 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033350,0x0
c00231b5:	0f 85 96 00 00 00    	jne    c0023251 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00231bb:	83 ec 0c             	sub    esp,0xc
c00231be:	68 14 01 00 00       	push   0x114
c00231c3:	e8 c4 c6 fe ff       	call   c000f88c <malloc>
c00231c8:	83 c4 0c             	add    esp,0xc
c00231cb:	89 c3                	mov    ebx,eax
c00231cd:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c00231d3:	68 61 d4 02 c0       	push   0xc002d461
c00231d8:	50                   	push   eax
c00231d9:	e8 54 fc fe ff       	call   c0012e32 <File::File(char const*, Process*)>
c00231de:	5a                   	pop    edx
c00231df:	59                   	pop    ecx
c00231e0:	6a 01                	push   0x1
c00231e2:	53                   	push   ebx
c00231e3:	e8 ae fc fe ff       	call   c0012e96 <File::open(FileOpenMode)>
c00231e8:	83 c4 0c             	add    esp,0xc
c00231eb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00231ef:	50                   	push   eax
c00231f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00231f4:	50                   	push   eax
c00231f5:	53                   	push   ebx
c00231f6:	e8 47 ff fe ff       	call   c0013142 <File::stat(unsigned long long*, bool*)>
c00231fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231ff:	40                   	inc    eax
c0023200:	89 04 24             	mov    DWORD PTR [esp],eax
c0023203:	e8 84 c6 fe ff       	call   c000f88c <malloc>
c0023208:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002320c:	a3 4c 33 03 c0       	mov    ds:0xc003334c,eax
c0023211:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023215:	5e                   	pop    esi
c0023216:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023218:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002321c:	51                   	push   ecx
c002321d:	50                   	push   eax
c002321e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023222:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023226:	53                   	push   ebx
c0023227:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002322a:	83 c4 14             	add    esp,0x14
c002322d:	53                   	push   ebx
c002322e:	e8 c1 fc fe ff       	call   c0012ef4 <File::close()>
c0023233:	5f                   	pop    edi
c0023234:	5d                   	pop    ebp
c0023235:	ff 35 4c 33 03 c0    	push   DWORD PTR ds:0xc003334c
c002323b:	68 7a d4 02 c0       	push   0xc002d47a
c0023240:	e8 8e f6 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0023245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023249:	83 c4 10             	add    esp,0x10
c002324c:	a3 48 33 03 c0       	mov    ds:0xc0033348,eax
c0023251:	a1 48 33 03 c0       	mov    eax,ds:0xc0033348
c0023256:	8b 15 4c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003334c
c002325c:	89 04 24             	mov    DWORD PTR [esp],eax
c002325f:	31 ff                	xor    edi,edi
c0023261:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023269:	31 f6                	xor    esi,esi
c002326b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023270:	31 db                	xor    ebx,ebx
c0023272:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002327a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002327f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023286:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002328a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023291:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0023295:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023298:	0f 8e 6b 01 00 00    	jle    c0023409 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002329e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00232a1:	d4 40                	aam    0x40
c00232a3:	d5 39                	aad    0x39
c00232a5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00232a9:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00232ad:	d4 40                	aam    0x40
c00232af:	d5 39                	aad    0x39
c00232b1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00232b5:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00232b9:	d4 40                	aam    0x40
c00232bb:	d5 39                	aad    0x39
c00232bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00232c1:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00232c5:	d4 40                	aam    0x40
c00232c7:	d5 39                	aad    0x39
c00232c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00232cd:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00232d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00232d5:	3c 56                	cmp    al,0x56
c00232d7:	74 45                	je     c002331e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00232d9:	d4 40                	aam    0x40
c00232db:	d5 39                	aad    0x39
c00232dd:	8d 48 d0             	lea    ecx,[eax-0x30]
c00232e0:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00232e4:	0f b6 c9             	movzx  ecx,cl
c00232e7:	c1 e1 04             	shl    ecx,0x4
c00232ea:	d4 40                	aam    0x40
c00232ec:	d5 39                	aad    0x39
c00232ee:	8d 58 d0             	lea    ebx,[eax-0x30]
c00232f1:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00232f5:	0f b6 db             	movzx  ebx,bl
c00232f8:	09 cb                	or     ebx,ecx
c00232fa:	c1 e3 04             	shl    ebx,0x4
c00232fd:	d4 40                	aam    0x40
c00232ff:	d5 39                	aad    0x39
c0023301:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023304:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0023308:	0f b6 c9             	movzx  ecx,cl
c002330b:	09 cb                	or     ebx,ecx
c002330d:	c1 e3 04             	shl    ebx,0x4
c0023310:	89 d9                	mov    ecx,ebx
c0023312:	d4 40                	aam    0x40
c0023314:	d5 39                	aad    0x39
c0023316:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023319:	0f b6 db             	movzx  ebx,bl
c002331c:	09 cb                	or     ebx,ecx
c002331e:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023322:	80 f9 44             	cmp    cl,0x44
c0023325:	74 47                	je     c002336e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c0023327:	88 c8                	mov    al,cl
c0023329:	d4 40                	aam    0x40
c002332b:	d5 39                	aad    0x39
c002332d:	83 e8 30             	sub    eax,0x30
c0023330:	0f b6 e8             	movzx  ebp,al
c0023333:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023337:	c1 e5 04             	shl    ebp,0x4
c002333a:	d4 40                	aam    0x40
c002333c:	d5 39                	aad    0x39
c002333e:	83 e8 30             	sub    eax,0x30
c0023341:	0f b6 f0             	movzx  esi,al
c0023344:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023348:	09 ee                	or     esi,ebp
c002334a:	c1 e6 04             	shl    esi,0x4
c002334d:	d4 40                	aam    0x40
c002334f:	d5 39                	aad    0x39
c0023351:	83 e8 30             	sub    eax,0x30
c0023354:	0f b6 e8             	movzx  ebp,al
c0023357:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002335b:	09 ee                	or     esi,ebp
c002335d:	c1 e6 04             	shl    esi,0x4
c0023360:	89 f5                	mov    ebp,esi
c0023362:	d4 40                	aam    0x40
c0023364:	d5 39                	aad    0x39
c0023366:	83 e8 30             	sub    eax,0x30
c0023369:	0f b6 f0             	movzx  esi,al
c002336c:	09 ee                	or     esi,ebp
c002336e:	83 c7 10             	add    edi,0x10
c0023371:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023375:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023378:	3c 0a                	cmp    al,0xa
c002337a:	74 09                	je     c0023385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c002337c:	45                   	inc    ebp
c002337d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023380:	75 16                	jne    c0023398 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c0023382:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023385:	3c 0a                	cmp    al,0xa
c0023387:	0f 94 c0             	sete   al
c002338a:	0f b6 c0             	movzx  eax,al
c002338d:	01 c7                	add    edi,eax
c002338f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023394:	75 0c                	jne    c00233a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023396:	eb 15                	jmp    c00233ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023398:	47                   	inc    edi
c0023399:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002339c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00233a0:	eb d3                	jmp    c0023375 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c00233a2:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00233a7:	0f 85 e8 fe ff ff    	jne    c0023295 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233ad:	80 f9 44             	cmp    cl,0x44
c00233b0:	74 0b                	je     c00233bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00233b2:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00233b7:	0f 85 d8 fe ff ff    	jne    c0023295 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233bd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00233c1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00233c5:	c1 e1 04             	shl    ecx,0x4
c00233c8:	83 e8 30             	sub    eax,0x30
c00233cb:	09 c8                	or     eax,ecx
c00233cd:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00233d1:	0f 85 be fe ff ff    	jne    c0023295 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233d7:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00233db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00233df:	c1 e1 04             	shl    ecx,0x4
c00233e2:	83 e8 30             	sub    eax,0x30
c00233e5:	09 c8                	or     eax,ecx
c00233e7:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00233eb:	0f 85 a4 fe ff ff    	jne    c0023295 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233f1:	50                   	push   eax
c00233f2:	50                   	push   eax
c00233f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00233f7:	50                   	push   eax
c00233f8:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00233ff:	e8 08 d4 fd ff       	call   c000080c <strcpy>
c0023404:	83 c4 10             	add    esp,0x10
c0023407:	eb 15                	jmp    c002341e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c0023409:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023410:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002341b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002341e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023425:	81 c4 2c 01 00 00    	add    esp,0x12c
c002342b:	5b                   	pop    ebx
c002342c:	5e                   	pop    esi
c002342d:	5f                   	pop    edi
c002342e:	5d                   	pop    ebp
c002342f:	c3                   	ret    

c0023430 <PCI::checkBus(unsigned char)>:
c0023430:	56                   	push   esi
c0023431:	53                   	push   ebx
c0023432:	31 db                	xor    ebx,ebx
c0023434:	51                   	push   ecx
c0023435:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002343a:	52                   	push   edx
c002343b:	53                   	push   ebx
c002343c:	43                   	inc    ebx
c002343d:	56                   	push   esi
c002343e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023442:	e8 37 03 00 00       	call   c002377e <PCI::checkDevice(unsigned char, unsigned char)>
c0023447:	83 c4 10             	add    esp,0x10
c002344a:	83 fb 20             	cmp    ebx,0x20
c002344d:	75 eb                	jne    c002343a <PCI::checkBus(unsigned char)+0xa>
c002344f:	58                   	pop    eax
c0023450:	5b                   	pop    ebx
c0023451:	5e                   	pop    esi
c0023452:	c3                   	ret    
c0023453:	90                   	nop

c0023454 <PCI::foundDevice(PCIDeviceInfo)>:
c0023454:	55                   	push   ebp
c0023455:	57                   	push   edi
c0023456:	56                   	push   esi
c0023457:	53                   	push   ebx
c0023458:	83 ec 1c             	sub    esp,0x1c
c002345b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002345f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023465:	0f 84 52 01 00 00    	je     c00235bd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002346b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002346f:	66 81 f9 06 04       	cmp    cx,0x406
c0023474:	75 2c                	jne    c00234a2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023476:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002347b:	50                   	push   eax
c002347c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023481:	50                   	push   eax
c0023482:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023487:	50                   	push   eax
c0023488:	56                   	push   esi
c0023489:	e8 a2 fb ff ff       	call   c0023030 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002348e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023492:	0f b6 c0             	movzx  eax,al
c0023495:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023499:	83 c4 2c             	add    esp,0x2c
c002349c:	5b                   	pop    ebx
c002349d:	5e                   	pop    esi
c002349e:	5f                   	pop    edi
c002349f:	5d                   	pop    ebp
c00234a0:	eb 8e                	jmp    c0023430 <PCI::checkBus(unsigned char)>
c00234a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00234a6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00234ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00234b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00234b4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00234b8:	88 d3                	mov    bl,dl
c00234ba:	85 c0                	test   eax,eax
c00234bc:	74 33                	je     c00234f1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00234be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00234c1:	85 d2                	test   edx,edx
c00234c3:	74 28                	je     c00234ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234c5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00234cb:	31 ef                	xor    edi,ebp
c00234cd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00234d3:	75 18                	jne    c00234ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234d9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00234df:	75 0c                	jne    c00234ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234e1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00234e7:	0f 84 d0 00 00 00    	je     c00235bd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00234ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00234ef:	eb c9                	jmp    c00234ba <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00234f1:	66 81 f9 01 06       	cmp    cx,0x601
c00234f6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00234fa:	75 19                	jne    c0023515 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00234fc:	83 ec 0c             	sub    esp,0xc
c00234ff:	68 64 01 00 00       	push   0x164
c0023504:	e8 83 c3 fe ff       	call   c000f88c <malloc>
c0023509:	89 c5                	mov    ebp,eax
c002350b:	89 04 24             	mov    DWORD PTR [esp],eax
c002350e:	e8 a1 0f 00 00       	call   c00244b4 <SATABus::SATABus()>
c0023513:	eb 1e                	jmp    c0023533 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023515:	66 81 f9 01 01       	cmp    cx,0x101
c002351a:	75 60                	jne    c002357c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002351c:	83 ec 0c             	sub    esp,0xc
c002351f:	68 70 02 00 00       	push   0x270
c0023524:	e8 63 c3 fe ff       	call   c000f88c <malloc>
c0023529:	89 c5                	mov    ebp,eax
c002352b:	89 04 24             	mov    DWORD PTR [esp],eax
c002352e:	e8 0f 03 00 00       	call   c0023842 <IDE::IDE()>
c0023533:	58                   	pop    eax
c0023534:	5a                   	pop    edx
c0023535:	55                   	push   ebp
c0023536:	56                   	push   esi
c0023537:	e8 d0 07 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c002353c:	83 ec 1c             	sub    esp,0x1c
c002353f:	b9 09 00 00 00       	mov    ecx,0x9
c0023544:	fc                   	cld    
c0023545:	89 e7                	mov    edi,esp
c0023547:	89 de                	mov    esi,ebx
c0023549:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002354b:	55                   	push   ebp
c002354c:	e8 cd 06 ff ff       	call   c0013c1e <Device::preOpenPCI(PCIDeviceInfo)>
c0023551:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023554:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023558:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023560:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023568:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023570:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023573:	83 c4 4c             	add    esp,0x4c
c0023576:	5b                   	pop    ebx
c0023577:	5e                   	pop    esi
c0023578:	5f                   	pop    edi
c0023579:	5d                   	pop    ebp
c002357a:	ff e0                	jmp    eax
c002357c:	83 ec 0c             	sub    esp,0xc
c002357f:	68 58 01 00 00       	push   0x158
c0023584:	e8 03 c3 fe ff       	call   c000f88c <malloc>
c0023589:	89 c5                	mov    ebp,eax
c002358b:	58                   	pop    eax
c002358c:	5a                   	pop    edx
c002358d:	68 8c d4 02 c0       	push   0xc002d48c
c0023592:	55                   	push   ebp
c0023593:	e8 7e 0a ff ff       	call   c0014016 <DriverlessDevice::DriverlessDevice(char const*)>
c0023598:	59                   	pop    ecx
c0023599:	5f                   	pop    edi
c002359a:	55                   	push   ebp
c002359b:	56                   	push   esi
c002359c:	e8 6b 07 ff ff       	call   c0013d0c <Device::addChild(Device*)>
c00235a1:	b9 09 00 00 00       	mov    ecx,0x9
c00235a6:	fc                   	cld    
c00235a7:	89 df                	mov    edi,ebx
c00235a9:	89 de                	mov    esi,ebx
c00235ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235ad:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00235b1:	83 c4 2c             	add    esp,0x2c
c00235b4:	5b                   	pop    ebx
c00235b5:	5e                   	pop    esi
c00235b6:	5f                   	pop    edi
c00235b7:	5d                   	pop    ebp
c00235b8:	e9 61 06 ff ff       	jmp    c0013c1e <Device::preOpenPCI(PCIDeviceInfo)>
c00235bd:	83 c4 1c             	add    esp,0x1c
c00235c0:	5b                   	pop    ebx
c00235c1:	5e                   	pop    esi
c00235c2:	5f                   	pop    edi
c00235c3:	5d                   	pop    ebp
c00235c4:	c3                   	ret    
c00235c5:	90                   	nop

c00235c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00235c6:	55                   	push   ebp
c00235c7:	57                   	push   edi
c00235c8:	56                   	push   esi
c00235c9:	53                   	push   ebx
c00235ca:	83 ec 68             	sub    esp,0x68
c00235cd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00235d1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00235d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00235dc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00235e3:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00235e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00235ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00235f3:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00235f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00235fc:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023601:	6a 0c                	push   0xc
c0023603:	57                   	push   edi
c0023604:	53                   	push   ebx
c0023605:	56                   	push   esi
c0023606:	55                   	push   ebp
c0023607:	e8 76 f8 ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002360c:	83 c4 20             	add    esp,0x20
c002360f:	57                   	push   edi
c0023610:	53                   	push   ebx
c0023611:	56                   	push   esi
c0023612:	55                   	push   ebp
c0023613:	e8 5e f9 ff ff       	call   c0022f76 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023618:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c002361d:	57                   	push   edi
c002361e:	53                   	push   ebx
c002361f:	56                   	push   esi
c0023620:	55                   	push   ebp
c0023621:	e8 e6 f9 ff ff       	call   c002300c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023626:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002362a:	83 c4 14             	add    esp,0x14
c002362d:	6a 3c                	push   0x3c
c002362f:	57                   	push   edi
c0023630:	53                   	push   ebx
c0023631:	56                   	push   esi
c0023632:	55                   	push   ebp
c0023633:	e8 4a f8 ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023638:	0f b6 c4             	movzx  eax,ah
c002363b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002363f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023643:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0023647:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c002364c:	83 c4 20             	add    esp,0x20
c002364f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023655:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002365c:	74 7c                	je     c00236da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002365e:	31 c0                	xor    eax,eax
c0023660:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c0023666:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002366c:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023672:	7e 66                	jle    c00236da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023674:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023677:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002367e:	39 cb                	cmp    ebx,ecx
c0023680:	75 55                	jne    c00236d7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023682:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023689:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002368d:	75 48                	jne    c00236d7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002368f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023693:	83 ec 0c             	sub    esp,0xc
c0023696:	68 a6 d4 02 c0       	push   0xc002d4a6
c002369b:	e8 33 f2 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00236a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00236a4:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c00236aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00236ae:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236b4:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00236bc:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00236c0:	52                   	push   edx
c00236c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236c5:	53                   	push   ebx
c00236c6:	68 cb d4 02 c0       	push   0xc002d4cb
c00236cb:	e8 03 f2 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00236d0:	83 c4 20             	add    esp,0x20
c00236d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236d7:	40                   	inc    eax
c00236d8:	eb 86                	jmp    c0023660 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00236da:	31 d2                	xor    edx,edx
c00236dc:	83 ec 0c             	sub    esp,0xc
c00236df:	57                   	push   edi
c00236e0:	53                   	push   ebx
c00236e1:	56                   	push   esi
c00236e2:	52                   	push   edx
c00236e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00236e7:	55                   	push   ebp
c00236e8:	e8 6b f9 ff ff       	call   c0023058 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00236f1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00236f5:	42                   	inc    edx
c00236f6:	83 c4 20             	add    esp,0x20
c00236f9:	83 fa 06             	cmp    edx,0x6
c00236fc:	75 de                	jne    c00236dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00236fe:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023703:	83 ec 0c             	sub    esp,0xc
c0023706:	86 e0                	xchg   al,ah
c0023708:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002370d:	6a 02                	push   0x2
c002370f:	57                   	push   edi
c0023710:	53                   	push   ebx
c0023711:	56                   	push   esi
c0023712:	55                   	push   ebp
c0023713:	e8 6a f7 ff ff       	call   c0022e82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023718:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002371d:	83 c4 20             	add    esp,0x20
c0023720:	57                   	push   edi
c0023721:	53                   	push   ebx
c0023722:	56                   	push   esi
c0023723:	55                   	push   ebp
c0023724:	e8 97 f8 ff ff       	call   c0022fc0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023729:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002372d:	57                   	push   edi
c002372e:	53                   	push   ebx
c002372f:	56                   	push   esi
c0023730:	55                   	push   ebp
c0023731:	e8 f4 f7 ff ff       	call   c0022f2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023736:	b9 09 00 00 00       	mov    ecx,0x9
c002373b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023740:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023744:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023748:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c002374c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023750:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023754:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023758:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002375c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023760:	83 ec 0c             	sub    esp,0xc
c0023763:	fc                   	cld    
c0023764:	89 e7                	mov    edi,esp
c0023766:	8d 74 24 58          	lea    esi,[esp+0x58]
c002376a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002376c:	55                   	push   ebp
c002376d:	e8 e2 fc ff ff       	call   c0023454 <PCI::foundDevice(PCIDeviceInfo)>
c0023772:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023778:	5b                   	pop    ebx
c0023779:	5e                   	pop    esi
c002377a:	5f                   	pop    edi
c002377b:	5d                   	pop    ebp
c002377c:	c3                   	ret    
c002377d:	90                   	nop

c002377e <PCI::checkDevice(unsigned char, unsigned char)>:
c002377e:	55                   	push   ebp
c002377f:	57                   	push   edi
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	83 ec 0c             	sub    esp,0xc
c0023785:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023789:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002378e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023793:	6a 00                	push   0x0
c0023795:	56                   	push   esi
c0023796:	57                   	push   edi
c0023797:	55                   	push   ebp
c0023798:	e8 8d f7 ff ff       	call   c0022f2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002379d:	6a 00                	push   0x0
c002379f:	56                   	push   esi
c00237a0:	57                   	push   edi
c00237a1:	55                   	push   ebp
c00237a2:	e8 1f fe ff ff       	call   c00235c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237a7:	83 c4 20             	add    esp,0x20
c00237aa:	6a 00                	push   0x0
c00237ac:	56                   	push   esi
c00237ad:	57                   	push   edi
c00237ae:	55                   	push   ebp
c00237af:	e8 9a f7 ff ff       	call   c0022f4e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237b4:	83 c4 10             	add    esp,0x10
c00237b7:	84 c0                	test   al,al
c00237b9:	79 27                	jns    c00237e2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00237bb:	bb 01 00 00 00       	mov    ebx,0x1
c00237c0:	53                   	push   ebx
c00237c1:	56                   	push   esi
c00237c2:	57                   	push   edi
c00237c3:	55                   	push   ebp
c00237c4:	e8 61 f7 ff ff       	call   c0022f2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237c9:	83 c4 10             	add    esp,0x10
c00237cc:	66 40                	inc    ax
c00237ce:	74 0c                	je     c00237dc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00237d0:	53                   	push   ebx
c00237d1:	56                   	push   esi
c00237d2:	57                   	push   edi
c00237d3:	55                   	push   ebp
c00237d4:	e8 ed fd ff ff       	call   c00235c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237d9:	83 c4 10             	add    esp,0x10
c00237dc:	43                   	inc    ebx
c00237dd:	83 fb 08             	cmp    ebx,0x8
c00237e0:	75 de                	jne    c00237c0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00237e2:	83 c4 0c             	add    esp,0xc
c00237e5:	5b                   	pop    ebx
c00237e6:	5e                   	pop    esi
c00237e7:	5f                   	pop    edi
c00237e8:	5d                   	pop    ebp
c00237e9:	c3                   	ret    

c00237ea <PCI::detect()>:
c00237ea:	56                   	push   esi
c00237eb:	53                   	push   ebx
c00237ec:	53                   	push   ebx
c00237ed:	31 db                	xor    ebx,ebx
c00237ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00237f3:	6a 00                	push   0x0
c00237f5:	6a 00                	push   0x0
c00237f7:	6a 00                	push   0x0
c00237f9:	56                   	push   esi
c00237fa:	e8 4f f7 ff ff       	call   c0022f4e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237ff:	83 c4 10             	add    esp,0x10
c0023802:	a8 80                	test   al,0x80
c0023804:	75 21                	jne    c0023827 <PCI::detect()+0x3d>
c0023806:	51                   	push   ecx
c0023807:	51                   	push   ecx
c0023808:	6a 00                	push   0x0
c002380a:	56                   	push   esi
c002380b:	e8 20 fc ff ff       	call   c0023430 <PCI::checkBus(unsigned char)>
c0023810:	83 c4 10             	add    esp,0x10
c0023813:	eb 24                	jmp    c0023839 <PCI::detect()+0x4f>
c0023815:	52                   	push   edx
c0023816:	52                   	push   edx
c0023817:	53                   	push   ebx
c0023818:	43                   	inc    ebx
c0023819:	56                   	push   esi
c002381a:	e8 11 fc ff ff       	call   c0023430 <PCI::checkBus(unsigned char)>
c002381f:	83 c4 10             	add    esp,0x10
c0023822:	83 fb 08             	cmp    ebx,0x8
c0023825:	74 12                	je     c0023839 <PCI::detect()+0x4f>
c0023827:	53                   	push   ebx
c0023828:	6a 00                	push   0x0
c002382a:	6a 00                	push   0x0
c002382c:	56                   	push   esi
c002382d:	e8 f8 f6 ff ff       	call   c0022f2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023832:	83 c4 10             	add    esp,0x10
c0023835:	66 40                	inc    ax
c0023837:	74 dc                	je     c0023815 <PCI::detect()+0x2b>
c0023839:	58                   	pop    eax
c002383a:	5b                   	pop    ebx
c002383b:	5e                   	pop    esi
c002383c:	c3                   	ret    
c002383d:	90                   	nop

c002383e <IDE::close(int, int, void*)>:
c002383e:	83 c8 ff             	or     eax,0xffffffff
c0023841:	c3                   	ret    

c0023842 <IDE::IDE()>:
c0023842:	83 ec 0c             	sub    esp,0xc
c0023845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023849:	83 ec 08             	sub    esp,0x8
c002384c:	68 14 d5 02 c0       	push   0xc002d514
c0023851:	50                   	push   eax
c0023852:	e8 63 08 ff ff       	call   c00140ba <HardDiskController::HardDiskController(char const*)>
c0023857:	83 c4 10             	add    esp,0x10
c002385a:	ba 54 d7 02 c0       	mov    edx,0xc002d754
c002385f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023863:	89 10                	mov    DWORD PTR [eax],edx
c0023865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023869:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023870:	90                   	nop
c0023871:	83 c4 0c             	add    esp,0xc
c0023874:	c3                   	ret    
c0023875:	90                   	nop

c0023876 <IDE::prepareInterrupt(unsigned char)>:
c0023876:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002387b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002387f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023887:	c3                   	ret    

c0023888 <selectDrive(unsigned char, unsigned char)>:
c0023888:	c3                   	ret    
c0023889:	90                   	nop

c002388a <IDE::getBase(unsigned char)>:
c002388a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002388f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023893:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002389b:	c3                   	ret    

c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002389c:	55                   	push   ebp
c002389d:	57                   	push   edi
c002389e:	56                   	push   esi
c002389f:	53                   	push   ebx
c00238a0:	83 ec 1c             	sub    esp,0x1c
c00238a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238a7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238ab:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00238ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238b6:	80 f9 03             	cmp    cl,0x3
c00238b9:	77 51                	ja     c002390c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00238bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238bf:	0f b6 f2             	movzx  esi,dl
c00238c2:	0f b6 db             	movzx  ebx,bl
c00238c5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238c8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00238cc:	83 ca 80             	or     edx,0xffffff80
c00238cf:	0f b6 d2             	movzx  edx,dl
c00238d2:	52                   	push   edx
c00238d3:	6a 0c                	push   0xc
c00238d5:	56                   	push   esi
c00238d6:	57                   	push   edi
c00238d7:	e8 c0 ff ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238dc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00238e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238e5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00238e9:	ee                   	out    dx,al
c00238ea:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00238ef:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00238f3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00238f7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00238fb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023903:	83 c4 2c             	add    esp,0x2c
c0023906:	5b                   	pop    ebx
c0023907:	5e                   	pop    esi
c0023908:	5f                   	pop    edi
c0023909:	5d                   	pop    ebp
c002390a:	eb 90                	jmp    c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002390c:	80 fb 07             	cmp    bl,0x7
c002390f:	77 12                	ja     c0023923 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023911:	0f b6 d2             	movzx  edx,dl
c0023914:	0f b6 db             	movzx  ebx,bl
c0023917:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002391f:	89 da                	mov    edx,ebx
c0023921:	eb 2f                	jmp    c0023952 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023923:	80 fb 0d             	cmp    bl,0xd
c0023926:	77 13                	ja     c002393b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023928:	0f b6 d2             	movzx  edx,dl
c002392b:	0f b6 db             	movzx  ebx,bl
c002392e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023935:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023939:	eb 17                	jmp    c0023952 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002393b:	80 fb 15             	cmp    bl,0x15
c002393e:	77 13                	ja     c0023953 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023940:	0f b6 d2             	movzx  edx,dl
c0023943:	0f b6 db             	movzx  ebx,bl
c0023946:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002394e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023952:	ee                   	out    dx,al
c0023953:	83 c4 1c             	add    esp,0x1c
c0023956:	5b                   	pop    ebx
c0023957:	5e                   	pop    esi
c0023958:	5f                   	pop    edi
c0023959:	5d                   	pop    ebp
c002395a:	c3                   	ret    
c002395b:	90                   	nop

c002395c <IDE::read(unsigned char, unsigned char)>:
c002395c:	55                   	push   ebp
c002395d:	57                   	push   edi
c002395e:	56                   	push   esi
c002395f:	53                   	push   ebx
c0023960:	83 ec 1c             	sub    esp,0x1c
c0023963:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023967:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002396b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002396e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023972:	3c 03                	cmp    al,0x3
c0023974:	77 43                	ja     c00239b9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023976:	0f b6 f2             	movzx  esi,dl
c0023979:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002397c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023980:	83 c8 80             	or     eax,0xffffff80
c0023983:	0f b6 c0             	movzx  eax,al
c0023986:	50                   	push   eax
c0023987:	6a 0c                	push   0xc
c0023989:	56                   	push   esi
c002398a:	57                   	push   edi
c002398b:	e8 0c ff ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023990:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023995:	0f b6 c3             	movzx  eax,bl
c0023998:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002399c:	ec                   	in     al,dx
c002399d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239a1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00239a6:	52                   	push   edx
c00239a7:	6a 0c                	push   0xc
c00239a9:	56                   	push   esi
c00239aa:	57                   	push   edi
c00239ab:	e8 ec fe ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239b0:	83 c4 20             	add    esp,0x20
c00239b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239b7:	eb 49                	jmp    c0023a02 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239b9:	80 fb 07             	cmp    bl,0x7
c00239bc:	77 12                	ja     c00239d0 <IDE::read(unsigned char, unsigned char)+0x74>
c00239be:	0f b6 d2             	movzx  edx,dl
c00239c1:	0f b6 c3             	movzx  eax,bl
c00239c4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00239cc:	89 c2                	mov    edx,eax
c00239ce:	eb 31                	jmp    c0023a01 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239d0:	80 fb 0d             	cmp    bl,0xd
c00239d3:	77 13                	ja     c00239e8 <IDE::read(unsigned char, unsigned char)+0x8c>
c00239d5:	0f b6 d2             	movzx  edx,dl
c00239d8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00239df:	0f b6 d3             	movzx  edx,bl
c00239e2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00239e6:	eb 19                	jmp    c0023a01 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239e8:	31 c0                	xor    eax,eax
c00239ea:	80 fb 15             	cmp    bl,0x15
c00239ed:	77 13                	ja     c0023a02 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239ef:	0f b6 d2             	movzx  edx,dl
c00239f2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00239fa:	0f b6 d3             	movzx  edx,bl
c00239fd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023a01:	ec                   	in     al,dx
c0023a02:	83 c4 1c             	add    esp,0x1c
c0023a05:	5b                   	pop    ebx
c0023a06:	5e                   	pop    esi
c0023a07:	5f                   	pop    edi
c0023a08:	5d                   	pop    ebp
c0023a09:	c3                   	ret    

c0023a0a <IDE::waitInterrupt(unsigned char)>:
c0023a0a:	55                   	push   ebp
c0023a0b:	57                   	push   edi
c0023a0c:	56                   	push   esi
c0023a0d:	53                   	push   ebx
c0023a0e:	31 db                	xor    ebx,ebx
c0023a10:	83 ec 0c             	sub    esp,0xc
c0023a13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a17:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a1c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023a24:	89 e8                	mov    eax,ebp
c0023a26:	84 c0                	test   al,al
c0023a28:	75 34                	jne    c0023a5e <IDE::waitInterrupt(unsigned char)+0x54>
c0023a2a:	52                   	push   edx
c0023a2b:	6a 0c                	push   0xc
c0023a2d:	56                   	push   esi
c0023a2e:	57                   	push   edi
c0023a2f:	e8 28 ff ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0023a34:	83 c4 10             	add    esp,0x10
c0023a37:	a8 01                	test   al,0x1
c0023a39:	75 2b                	jne    c0023a66 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a3b:	f6 c3 04             	test   bl,0x4
c0023a3e:	75 16                	jne    c0023a56 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a40:	83 fb 32             	cmp    ebx,0x32
c0023a43:	7e 11                	jle    c0023a56 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a45:	50                   	push   eax
c0023a46:	50                   	push   eax
c0023a47:	6a 00                	push   0x0
c0023a49:	68 80 96 98 00       	push   0x989680
c0023a4e:	e8 6c a9 ff ff       	call   c001e3bf <nanoSleep(unsigned long long)>
c0023a53:	83 c4 10             	add    esp,0x10
c0023a56:	83 fb 3c             	cmp    ebx,0x3c
c0023a59:	74 0b                	je     c0023a66 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a5b:	43                   	inc    ebx
c0023a5c:	eb be                	jmp    c0023a1c <IDE::waitInterrupt(unsigned char)+0x12>
c0023a5e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a66:	83 c4 0c             	add    esp,0xc
c0023a69:	89 e8                	mov    eax,ebp
c0023a6b:	5b                   	pop    ebx
c0023a6c:	5e                   	pop    esi
c0023a6d:	5f                   	pop    edi
c0023a6e:	5d                   	pop    ebp
c0023a6f:	c3                   	ret    

c0023a70 <ideChannel0IRQHandler(regs*, void*)>:
c0023a70:	83 ec 10             	sub    esp,0x10
c0023a73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a77:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a7e:	6a 07                	push   0x7
c0023a80:	6a 00                	push   0x0
c0023a82:	50                   	push   eax
c0023a83:	e8 d4 fe ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0023a88:	83 c4 1c             	add    esp,0x1c
c0023a8b:	c3                   	ret    

c0023a8c <ideChannel1IRQHandler(regs*, void*)>:
c0023a8c:	83 ec 10             	sub    esp,0x10
c0023a8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a93:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a9a:	6a 07                	push   0x7
c0023a9c:	6a 01                	push   0x1
c0023a9e:	50                   	push   eax
c0023a9f:	e8 b8 fe ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0023aa4:	83 c4 1c             	add    esp,0x1c
c0023aa7:	c3                   	ret    

c0023aa8 <IDE::enableIRQs(unsigned char, bool)>:
c0023aa8:	57                   	push   edi
c0023aa9:	56                   	push   esi
c0023aaa:	be 04 00 00 00       	mov    esi,0x4
c0023aaf:	53                   	push   ebx
c0023ab0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023ab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ab9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023abe:	0f 94 c0             	sete   al
c0023ac1:	d1 e0                	shl    eax,1
c0023ac3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023aca:	0f b6 c0             	movzx  eax,al
c0023acd:	50                   	push   eax
c0023ace:	6a 0c                	push   0xc
c0023ad0:	57                   	push   edi
c0023ad1:	53                   	push   ebx
c0023ad2:	e8 c5 fd ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ad7:	83 c4 10             	add    esp,0x10
c0023ada:	50                   	push   eax
c0023adb:	6a 0c                	push   0xc
c0023add:	57                   	push   edi
c0023ade:	53                   	push   ebx
c0023adf:	e8 78 fe ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0023ae4:	83 c4 10             	add    esp,0x10
c0023ae7:	4e                   	dec    esi
c0023ae8:	75 f0                	jne    c0023ada <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023aea:	5b                   	pop    ebx
c0023aeb:	5e                   	pop    esi
c0023aec:	5f                   	pop    edi
c0023aed:	c3                   	ret    

c0023aee <IDE::open(int, int, void*)>:
c0023aee:	55                   	push   ebp
c0023aef:	57                   	push   edi
c0023af0:	56                   	push   esi
c0023af1:	53                   	push   ebx
c0023af2:	83 ec 1c             	sub    esp,0x1c
c0023af5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023af9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023b02:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023b0b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b12:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b19:	0f 85 b0 02 00 00    	jne    c0023dcf <IDE::open(int, int, void*)+0x2e1>
c0023b1f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023b25:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023b29:	83 e0 7f             	and    eax,0x7f
c0023b2c:	3c 05                	cmp    al,0x5
c0023b2e:	74 04                	je     c0023b34 <IDE::open(int, int, void*)+0x46>
c0023b30:	3c 0f                	cmp    al,0xf
c0023b32:	75 32                	jne    c0023b66 <IDE::open(int, int, void*)+0x78>
c0023b34:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b3a:	83 e0 fc             	and    eax,0xfffffffc
c0023b3d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b44:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b4a:	83 e0 fc             	and    eax,0xfffffffc
c0023b4d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b54:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b5a:	83 e0 fc             	and    eax,0xfffffffc
c0023b5d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b64:	eb 14                	jmp    c0023b7a <IDE::open(int, int, void*)+0x8c>
c0023b66:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b70:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b7a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b81:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023b88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b8c:	89 c6                	mov    esi,eax
c0023b8e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b93:	c1 e6 10             	shl    esi,0x10
c0023b96:	89 e8                	mov    eax,ebp
c0023b98:	89 fa                	mov    edx,edi
c0023b9a:	c1 e0 0b             	shl    eax,0xb
c0023b9d:	09 f0                	or     eax,esi
c0023b9f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023ba6:	c1 e6 08             	shl    esi,0x8
c0023ba9:	09 c6                	or     esi,eax
c0023bab:	89 f0                	mov    eax,esi
c0023bad:	0d 08 00 00 80       	or     eax,0x80000008
c0023bb2:	ef                   	out    dx,eax
c0023bb3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023bb8:	89 ca                	mov    edx,ecx
c0023bba:	ed                   	in     eax,dx
c0023bbb:	c1 e8 10             	shr    eax,0x10
c0023bbe:	3d ff ff 00 00       	cmp    eax,0xffff
c0023bc3:	0f 84 f5 00 00 00    	je     c0023cbe <IDE::open(int, int, void*)+0x1d0>
c0023bc9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023bcf:	89 fa                	mov    edx,edi
c0023bd1:	89 f0                	mov    eax,esi
c0023bd3:	ef                   	out    dx,eax
c0023bd4:	b0 fe                	mov    al,0xfe
c0023bd6:	89 ca                	mov    edx,ecx
c0023bd8:	ee                   	out    dx,al
c0023bd9:	89 f0                	mov    eax,esi
c0023bdb:	89 fa                	mov    edx,edi
c0023bdd:	ef                   	out    dx,eax
c0023bde:	89 ca                	mov    edx,ecx
c0023be0:	ed                   	in     eax,dx
c0023be1:	3c fe                	cmp    al,0xfe
c0023be3:	0f 85 a9 00 00 00    	jne    c0023c92 <IDE::open(int, int, void*)+0x1a4>
c0023be9:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c0023bef:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023bf6:	74 33                	je     c0023c2b <IDE::open(int, int, void*)+0x13d>
c0023bf8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023bfe:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023c02:	40                   	inc    eax
c0023c03:	83 ec 0c             	sub    esp,0xc
c0023c06:	0f b6 c0             	movzx  eax,al
c0023c09:	50                   	push   eax
c0023c0a:	55                   	push   ebp
c0023c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c0f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c15:	51                   	push   ecx
c0023c16:	e8 a1 41 ff ff       	call   c0017dbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c1b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c20:	83 c4 1c             	add    esp,0x1c
c0023c23:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023c29:	eb 0a                	jmp    c0023c35 <IDE::open(int, int, void*)+0x147>
c0023c2b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023c35:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c3c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c43:	c1 e1 10             	shl    ecx,0x10
c0023c46:	c1 e0 08             	shl    eax,0x8
c0023c49:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c4e:	09 c1                	or     ecx,eax
c0023c50:	89 fa                	mov    edx,edi
c0023c52:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c59:	c1 e0 0b             	shl    eax,0xb
c0023c5c:	09 c1                	or     ecx,eax
c0023c5e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c64:	89 c8                	mov    eax,ecx
c0023c66:	ef                   	out    dx,eax
c0023c67:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c6c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c72:	89 f2                	mov    edx,esi
c0023c74:	ee                   	out    dx,al
c0023c75:	89 c8                	mov    eax,ecx
c0023c77:	89 fa                	mov    edx,edi
c0023c79:	ef                   	out    dx,eax
c0023c7a:	89 f2                	mov    edx,esi
c0023c7c:	ed                   	in     eax,dx
c0023c7d:	0f b6 c0             	movzx  eax,al
c0023c80:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c86:	74 46                	je     c0023cce <IDE::open(int, int, void*)+0x1e0>
c0023c88:	83 ec 0c             	sub    esp,0xc
c0023c8b:	68 2c d5 02 c0       	push   0xc002d52c
c0023c90:	eb 34                	jmp    c0023cc6 <IDE::open(int, int, void*)+0x1d8>
c0023c92:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c9b:	75 17                	jne    c0023cb4 <IDE::open(int, int, void*)+0x1c6>
c0023c9d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023ca2:	74 07                	je     c0023cab <IDE::open(int, int, void*)+0x1bd>
c0023ca4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023ca9:	75 09                	jne    c0023cb4 <IDE::open(int, int, void*)+0x1c6>
c0023cab:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023cb2:	eb 1a                	jmp    c0023cce <IDE::open(int, int, void*)+0x1e0>
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	68 34 d5 02 c0       	push   0xc002d534
c0023cbc:	eb 08                	jmp    c0023cc6 <IDE::open(int, int, void*)+0x1d8>
c0023cbe:	83 ec 0c             	sub    esp,0xc
c0023cc1:	68 65 d5 02 c0       	push   0xc002d565
c0023cc6:	e8 3e 66 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0023ccb:	83 c4 10             	add    esp,0x10
c0023cce:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023cd5:	79 1a                	jns    c0023cf1 <IDE::open(int, int, void*)+0x203>
c0023cd7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023cdd:	83 e0 fc             	and    eax,0xfffffffc
c0023ce0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023ce7:	83 c0 08             	add    eax,0x8
c0023cea:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023cf1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023cf7:	89 c2                	mov    edx,eax
c0023cf9:	83 e2 0f             	and    edx,0xf
c0023cfc:	66 83 fa 08          	cmp    dx,0x8
c0023d00:	75 0a                	jne    c0023d0c <IDE::open(int, int, void*)+0x21e>
c0023d02:	83 e8 02             	sub    eax,0x2
c0023d05:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d0c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d12:	89 c2                	mov    edx,eax
c0023d14:	83 e2 0f             	and    edx,0xf
c0023d17:	66 83 fa 08          	cmp    dx,0x8
c0023d1b:	75 0a                	jne    c0023d27 <IDE::open(int, int, void*)+0x239>
c0023d1d:	83 e8 02             	sub    eax,0x2
c0023d20:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023d27:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023d2e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023d35:	89 d0                	mov    eax,edx
c0023d37:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d3a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d3e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d42:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d45:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d4a:	0f b6 c9             	movzx  ecx,cl
c0023d4d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d54:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d57:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d5b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d5f:	8d 50 02             	lea    edx,[eax+0x2]
c0023d62:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d67:	0f b6 d2             	movzx  edx,dl
c0023d6a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d70:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d73:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d77:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d7b:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d7e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d83:	0f b6 c9             	movzx  ecx,cl
c0023d86:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d8c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d8f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d93:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d97:	8d 50 04             	lea    edx,[eax+0x4]
c0023d9a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023da0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023da5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023dac:	66 85 f6             	test   si,si
c0023daf:	74 3e                	je     c0023def <IDE::open(int, int, void*)+0x301>
c0023db1:	0f b6 d2             	movzx  edx,dl
c0023db4:	83 c0 05             	add    eax,0x5
c0023db7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023dba:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dbe:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023dc2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023dc8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023dcd:	eb 20                	jmp    c0023def <IDE::open(int, int, void*)+0x301>
c0023dcf:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023dd9:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023de3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023dea:	e9 02 ff ff ff       	jmp    c0023cf1 <IDE::open(int, int, void*)+0x203>
c0023def:	52                   	push   edx
c0023df0:	52                   	push   edx
c0023df1:	6a 00                	push   0x0
c0023df3:	53                   	push   ebx
c0023df4:	e8 7d fa ff ff       	call   c0023876 <IDE::prepareInterrupt(unsigned char)>
c0023df9:	59                   	pop    ecx
c0023dfa:	5e                   	pop    esi
c0023dfb:	6a 01                	push   0x1
c0023dfd:	53                   	push   ebx
c0023dfe:	e8 73 fa ff ff       	call   c0023876 <IDE::prepareInterrupt(unsigned char)>
c0023e03:	83 c4 0c             	add    esp,0xc
c0023e06:	6a 00                	push   0x0
c0023e08:	6a 00                	push   0x0
c0023e0a:	53                   	push   ebx
c0023e0b:	e8 98 fc ff ff       	call   c0023aa8 <IDE::enableIRQs(unsigned char, bool)>
c0023e10:	83 c4 0c             	add    esp,0xc
c0023e13:	6a 00                	push   0x0
c0023e15:	6a 01                	push   0x1
c0023e17:	53                   	push   ebx
c0023e18:	e8 8b fc ff ff       	call   c0023aa8 <IDE::enableIRQs(unsigned char, bool)>
c0023e1d:	83 c4 10             	add    esp,0x10
c0023e20:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023e27:	74 40                	je     c0023e69 <IDE::open(int, int, void*)+0x37b>
c0023e29:	83 ec 0c             	sub    esp,0xc
c0023e2c:	68 8f d5 02 c0       	push   0xc002d58f
c0023e31:	e8 9d ea fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0023e36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e39:	6a 01                	push   0x1
c0023e3b:	68 70 3a 02 c0       	push   0xc0023a70
c0023e40:	6a 0e                	push   0xe
c0023e42:	53                   	push   ebx
c0023e43:	e8 3c fe fe ff       	call   c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e48:	83 c4 14             	add    esp,0x14
c0023e4b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e51:	53                   	push   ebx
c0023e52:	6a 01                	push   0x1
c0023e54:	68 8c 3a 02 c0       	push   0xc0023a8c
c0023e59:	6a 0f                	push   0xf
c0023e5b:	53                   	push   ebx
c0023e5c:	e8 23 fe fe ff       	call   c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e61:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e67:	eb 4a                	jmp    c0023eb3 <IDE::open(int, int, void*)+0x3c5>
c0023e69:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e73:	50                   	push   eax
c0023e74:	6a 0f                	push   0xf
c0023e76:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e7c:	68 ab d5 02 c0       	push   0xc002d5ab
c0023e81:	e8 4d ea fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0023e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e89:	6a 00                	push   0x0
c0023e8b:	68 70 3a 02 c0       	push   0xc0023a70
c0023e90:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e96:	53                   	push   ebx
c0023e97:	e8 e8 fd fe ff       	call   c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e9c:	83 c4 14             	add    esp,0x14
c0023e9f:	53                   	push   ebx
c0023ea0:	6a 00                	push   0x0
c0023ea2:	68 8c 3a 02 c0       	push   0xc0023a8c
c0023ea7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023ead:	53                   	push   ebx
c0023eae:	e8 d1 fd fe ff       	call   c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023eb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eb5:	83 c4 20             	add    esp,0x20
c0023eb8:	83 ec 0c             	sub    esp,0xc
c0023ebb:	53                   	push   ebx
c0023ebc:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023ebf:	83 c4 0c             	add    esp,0xc
c0023ec2:	6a 07                	push   0x7
c0023ec4:	6a 00                	push   0x0
c0023ec6:	53                   	push   ebx
c0023ec7:	e8 90 fa ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0023ecc:	83 c4 0c             	add    esp,0xc
c0023ecf:	6a 07                	push   0x7
c0023ed1:	6a 01                	push   0x1
c0023ed3:	53                   	push   ebx
c0023ed4:	e8 83 fa ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0023ed9:	83 c4 0c             	add    esp,0xc
c0023edc:	6a 01                	push   0x1
c0023ede:	6a 00                	push   0x0
c0023ee0:	53                   	push   ebx
c0023ee1:	e8 c2 fb ff ff       	call   c0023aa8 <IDE::enableIRQs(unsigned char, bool)>
c0023ee6:	83 c4 0c             	add    esp,0xc
c0023ee9:	6a 01                	push   0x1
c0023eeb:	6a 01                	push   0x1
c0023eed:	53                   	push   ebx
c0023eee:	e8 b5 fb ff ff       	call   c0023aa8 <IDE::enableIRQs(unsigned char, bool)>
c0023ef3:	83 c4 2c             	add    esp,0x2c
c0023ef6:	31 c0                	xor    eax,eax
c0023ef8:	5b                   	pop    ebx
c0023ef9:	5e                   	pop    esi
c0023efa:	5f                   	pop    edi
c0023efb:	5d                   	pop    ebp
c0023efc:	c3                   	ret    
c0023efd:	90                   	nop

c0023efe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023efe:	55                   	push   ebp
c0023eff:	57                   	push   edi
c0023f00:	56                   	push   esi
c0023f01:	53                   	push   ebx
c0023f02:	83 ec 1c             	sub    esp,0x1c
c0023f05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023f09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f0d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f10:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f14:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f18:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f1c:	80 fa 03             	cmp    dl,0x3
c0023f1f:	77 5d                	ja     c0023f7e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f29:	0f b6 db             	movzx  ebx,bl
c0023f2c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023f2f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023f33:	83 ca 80             	or     edx,0xffffff80
c0023f36:	0f b6 d2             	movzx  edx,dl
c0023f39:	52                   	push   edx
c0023f3a:	6a 0c                	push   0xc
c0023f3c:	53                   	push   ebx
c0023f3d:	56                   	push   esi
c0023f3e:	e8 59 f9 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f43:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f50:	0f b6 c0             	movzx  eax,al
c0023f53:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f57:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f59:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f5e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f62:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f6a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f72:	83 c4 2c             	add    esp,0x2c
c0023f75:	5b                   	pop    ebx
c0023f76:	5e                   	pop    esi
c0023f77:	5f                   	pop    edi
c0023f78:	5d                   	pop    ebp
c0023f79:	e9 1e f9 ff ff       	jmp    c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f7e:	3c 07                	cmp    al,0x7
c0023f80:	77 10                	ja     c0023f92 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f82:	0f b6 db             	movzx  ebx,bl
c0023f85:	0f b6 d0             	movzx  edx,al
c0023f88:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f90:	eb 2d                	jmp    c0023fbf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f92:	3c 0d                	cmp    al,0xd
c0023f94:	77 13                	ja     c0023fa9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f96:	0f b6 db             	movzx  ebx,bl
c0023f99:	0f b6 c0             	movzx  eax,al
c0023f9c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023fa3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023fa7:	eb 16                	jmp    c0023fbf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023fa9:	3c 15                	cmp    al,0x15
c0023fab:	77 14                	ja     c0023fc1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023fad:	0f b6 db             	movzx  ebx,bl
c0023fb0:	0f b6 c0             	movzx  eax,al
c0023fb3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023fbb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023fbf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fc1:	83 c4 1c             	add    esp,0x1c
c0023fc4:	5b                   	pop    ebx
c0023fc5:	5e                   	pop    esi
c0023fc6:	5f                   	pop    edi
c0023fc7:	5d                   	pop    ebp
c0023fc8:	c3                   	ret    
c0023fc9:	90                   	nop

c0023fca <IDE::detect()>:
c0023fca:	55                   	push   ebp
c0023fcb:	57                   	push   edi
c0023fcc:	56                   	push   esi
c0023fcd:	53                   	push   ebx
c0023fce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023fd4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023fdb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023fe2:	0f 85 be 02 00 00    	jne    c00242a6 <IDE::detect()+0x2dc>
c0023fe8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023fef:	31 f6                	xor    esi,esi
c0023ff1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023ff9:	31 ed                	xor    ebp,ebp
c0023ffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023fff:	c1 e0 06             	shl    eax,0x6
c0024002:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002400a:	89 e8                	mov    eax,ebp
c002400c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024010:	c1 e0 04             	shl    eax,0x4
c0024013:	83 c8 a0             	or     eax,0xffffffa0
c0024016:	0f b6 c0             	movzx  eax,al
c0024019:	50                   	push   eax
c002401a:	6a 06                	push   0x6
c002401c:	56                   	push   esi
c002401d:	53                   	push   ebx
c002401e:	e8 79 f8 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024023:	83 c4 0c             	add    esp,0xc
c0024026:	6a 0c                	push   0xc
c0024028:	56                   	push   esi
c0024029:	53                   	push   ebx
c002402a:	e8 2d f9 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c002402f:	83 c4 0c             	add    esp,0xc
c0024032:	6a 0c                	push   0xc
c0024034:	56                   	push   esi
c0024035:	53                   	push   ebx
c0024036:	e8 21 f9 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c002403b:	83 c4 0c             	add    esp,0xc
c002403e:	6a 0c                	push   0xc
c0024040:	56                   	push   esi
c0024041:	53                   	push   ebx
c0024042:	e8 15 f9 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024047:	83 c4 0c             	add    esp,0xc
c002404a:	6a 0c                	push   0xc
c002404c:	56                   	push   esi
c002404d:	53                   	push   ebx
c002404e:	e8 09 f9 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024053:	68 ec 00 00 00       	push   0xec
c0024058:	6a 07                	push   0x7
c002405a:	56                   	push   esi
c002405b:	53                   	push   ebx
c002405c:	e8 3b f8 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024061:	83 c4 1c             	add    esp,0x1c
c0024064:	6a 0c                	push   0xc
c0024066:	56                   	push   esi
c0024067:	53                   	push   ebx
c0024068:	e8 ef f8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c002406d:	83 c4 0c             	add    esp,0xc
c0024070:	6a 0c                	push   0xc
c0024072:	56                   	push   esi
c0024073:	53                   	push   ebx
c0024074:	e8 e3 f8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024079:	83 c4 0c             	add    esp,0xc
c002407c:	6a 0c                	push   0xc
c002407e:	56                   	push   esi
c002407f:	53                   	push   ebx
c0024080:	e8 d7 f8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024085:	83 c4 0c             	add    esp,0xc
c0024088:	6a 0c                	push   0xc
c002408a:	56                   	push   esi
c002408b:	53                   	push   ebx
c002408c:	e8 cb f8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024091:	83 c4 0c             	add    esp,0xc
c0024094:	6a 0c                	push   0xc
c0024096:	56                   	push   esi
c0024097:	53                   	push   ebx
c0024098:	e8 bf f8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c002409d:	83 c4 10             	add    esp,0x10
c00240a0:	84 c0                	test   al,al
c00240a2:	0f 84 8b 01 00 00    	je     c0024233 <IDE::detect()+0x269>
c00240a8:	31 ff                	xor    edi,edi
c00240aa:	50                   	push   eax
c00240ab:	6a 0c                	push   0xc
c00240ad:	56                   	push   esi
c00240ae:	53                   	push   ebx
c00240af:	e8 a8 f8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c00240b4:	83 c4 10             	add    esp,0x10
c00240b7:	a8 01                	test   al,0x1
c00240b9:	0f 85 8e 01 00 00    	jne    c002424d <IDE::detect()+0x283>
c00240bf:	84 c0                	test   al,al
c00240c1:	78 04                	js     c00240c7 <IDE::detect()+0xfd>
c00240c3:	a8 08                	test   al,0x8
c00240c5:	75 27                	jne    c00240ee <IDE::detect()+0x124>
c00240c7:	47                   	inc    edi
c00240c8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00240ce:	7e da                	jle    c00240aa <IDE::detect()+0xe0>
c00240d0:	50                   	push   eax
c00240d1:	50                   	push   eax
c00240d2:	6a 00                	push   0x0
c00240d4:	68 40 4b 4c 00       	push   0x4c4b40
c00240d9:	e8 e1 a2 ff ff       	call   c001e3bf <nanoSleep(unsigned long long)>
c00240de:	83 c4 10             	add    esp,0x10
c00240e1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00240e7:	75 c1                	jne    c00240aa <IDE::detect()+0xe0>
c00240e9:	e9 5f 01 00 00       	jmp    c002424d <IDE::detect()+0x283>
c00240ee:	31 c9                	xor    ecx,ecx
c00240f0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00240f4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00240f8:	83 ec 0c             	sub    esp,0xc
c00240fb:	68 80 00 00 00       	push   0x80
c0024100:	57                   	push   edi
c0024101:	6a 00                	push   0x0
c0024103:	56                   	push   esi
c0024104:	53                   	push   ebx
c0024105:	e8 f4 fd ff ff       	call   c0023efe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002410a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002410f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024113:	89 d1                	mov    ecx,edx
c0024115:	c1 e0 06             	shl    eax,0x6
c0024118:	01 d8                	add    eax,ebx
c002411a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024121:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024128:	89 f2                	mov    edx,esi
c002412a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024130:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024134:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002413a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002413e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024145:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002414d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024154:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002415c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024162:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024169:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002416f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024173:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024177:	83 c4 20             	add    esp,0x20
c002417a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002417d:	83 c0 02             	add    eax,0x2
c0024180:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024186:	83 c7 02             	add    edi,0x2
c0024189:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002418c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024192:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024196:	75 e2                	jne    c002417a <IDE::detect()+0x1b0>
c0024198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002419c:	c1 e0 06             	shl    eax,0x6
c002419f:	01 d8                	add    eax,ebx
c00241a1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00241a7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00241ae:	66 c1 ea 09          	shr    dx,0x9
c00241b2:	83 e2 01             	and    edx,0x1
c00241b5:	84 c9                	test   cl,cl
c00241b7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00241bd:	75 2f                	jne    c00241ee <IDE::detect()+0x224>
c00241bf:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00241c5:	85 c0                	test   eax,eax
c00241c7:	74 66                	je     c002422f <IDE::detect()+0x265>
c00241c9:	50                   	push   eax
c00241ca:	55                   	push   ebp
c00241cb:	56                   	push   esi
c00241cc:	68 c7 d5 02 c0       	push   0xc002d5c7
c00241d1:	e8 fd e6 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00241d6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241dd:	e8 aa b6 fe ff       	call   c000f88c <malloc>
c00241e2:	89 c7                	mov    edi,eax
c00241e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00241e7:	e8 78 06 00 00       	call   c0024864 <ATA::ATA()>
c00241ec:	eb 28                	jmp    c0024216 <IDE::detect()+0x24c>
c00241ee:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00241f4:	55                   	push   ebp
c00241f5:	56                   	push   esi
c00241f6:	68 f6 d5 02 c0       	push   0xc002d5f6
c00241fb:	e8 d3 e6 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024200:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024207:	e8 80 b6 fe ff       	call   c000f88c <malloc>
c002420c:	89 c7                	mov    edi,eax
c002420e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024211:	e8 56 0c 00 00       	call   c0024e6c <ATAPI::ATAPI()>
c0024216:	5a                   	pop    edx
c0024217:	59                   	pop    ecx
c0024218:	57                   	push   edi
c0024219:	53                   	push   ebx
c002421a:	e8 ed fa fe ff       	call   c0013d0c <Device::addChild(Device*)>
c002421f:	8b 07                	mov    eax,DWORD PTR [edi]
c0024221:	53                   	push   ebx
c0024222:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024226:	6a 00                	push   0x0
c0024228:	57                   	push   edi
c0024229:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002422c:	83 c4 20             	add    esp,0x20
c002422f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024233:	4d                   	dec    ebp
c0024234:	74 0a                	je     c0024240 <IDE::detect()+0x276>
c0024236:	bd 01 00 00 00       	mov    ebp,0x1
c002423b:	e9 bb fd ff ff       	jmp    c0023ffb <IDE::detect()+0x31>
c0024240:	4e                   	dec    esi
c0024241:	74 63                	je     c00242a6 <IDE::detect()+0x2dc>
c0024243:	be 01 00 00 00       	mov    esi,0x1
c0024248:	e9 ac fd ff ff       	jmp    c0023ff9 <IDE::detect()+0x2f>
c002424d:	50                   	push   eax
c002424e:	6a 04                	push   0x4
c0024250:	56                   	push   esi
c0024251:	53                   	push   ebx
c0024252:	e8 05 f7 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024257:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002425b:	83 c4 0c             	add    esp,0xc
c002425e:	6a 05                	push   0x5
c0024260:	56                   	push   esi
c0024261:	53                   	push   ebx
c0024262:	e8 f5 f6 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024267:	83 c4 10             	add    esp,0x10
c002426a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002426e:	80 fa 14             	cmp    dl,0x14
c0024271:	75 04                	jne    c0024277 <IDE::detect()+0x2ad>
c0024273:	3c eb                	cmp    al,0xeb
c0024275:	eb 07                	jmp    c002427e <IDE::detect()+0x2b4>
c0024277:	3c 96                	cmp    al,0x96
c0024279:	75 b8                	jne    c0024233 <IDE::detect()+0x269>
c002427b:	80 fa 69             	cmp    dl,0x69
c002427e:	75 b3                	jne    c0024233 <IDE::detect()+0x269>
c0024280:	68 a1 00 00 00       	push   0xa1
c0024285:	6a 07                	push   0x7
c0024287:	56                   	push   esi
c0024288:	53                   	push   ebx
c0024289:	e8 0e f6 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428e:	5f                   	pop    edi
c002428f:	58                   	pop    eax
c0024290:	6a 00                	push   0x0
c0024292:	68 40 42 0f 00       	push   0xf4240
c0024297:	e8 23 a1 ff ff       	call   c001e3bf <nanoSleep(unsigned long long)>
c002429c:	83 c4 10             	add    esp,0x10
c002429f:	b1 01                	mov    cl,0x1
c00242a1:	e9 4a fe ff ff       	jmp    c00240f0 <IDE::detect()+0x126>
c00242a6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00242ac:	5b                   	pop    ebx
c00242ad:	5e                   	pop    esi
c00242ae:	5f                   	pop    edi
c00242af:	5d                   	pop    ebp
c00242b0:	c3                   	ret    
c00242b1:	90                   	nop

c00242b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00242b2:	55                   	push   ebp
c00242b3:	57                   	push   edi
c00242b4:	56                   	push   esi
c00242b5:	53                   	push   ebx
c00242b6:	83 ec 1c             	sub    esp,0x1c
c00242b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00242bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00242c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00242c9:	88 c3                	mov    bl,al
c00242cb:	84 c0                	test   al,al
c00242cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242d1:	0f 84 67 01 00 00    	je     c002443e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242d7:	83 ec 0c             	sub    esp,0xc
c00242da:	68 27 d6 02 c0       	push   0xc002d627
c00242df:	e8 ef e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00242e4:	83 c4 10             	add    esp,0x10
c00242e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242eb:	3c 01                	cmp    al,0x1
c00242ed:	75 17                	jne    c0024306 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00242ef:	83 ec 0c             	sub    esp,0xc
c00242f2:	b3 13                	mov    bl,0x13
c00242f4:	68 33 d6 02 c0       	push   0xc002d633
c00242f9:	e8 d5 e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00242fe:	83 c4 10             	add    esp,0x10
c0024301:	e9 25 01 00 00       	jmp    c002442b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024306:	3c 02                	cmp    al,0x2
c0024308:	0f 85 ef 00 00 00    	jne    c00243fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002430e:	d1 e6                	shl    esi,1
c0024310:	09 ee                	or     esi,ebp
c0024312:	52                   	push   edx
c0024313:	89 f0                	mov    eax,esi
c0024315:	6a 01                	push   0x1
c0024317:	0f b6 f0             	movzx  esi,al
c002431a:	c1 e6 06             	shl    esi,0x6
c002431d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024325:	50                   	push   eax
c0024326:	57                   	push   edi
c0024327:	e8 30 f6 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c002432c:	83 c4 10             	add    esp,0x10
c002432f:	89 c6                	mov    esi,eax
c0024331:	a8 01                	test   al,0x1
c0024333:	74 12                	je     c0024347 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024335:	83 ec 0c             	sub    esp,0xc
c0024338:	b3 07                	mov    bl,0x7
c002433a:	68 48 d6 02 c0       	push   0xc002d648
c002433f:	e8 8f e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	f7 c6 02 00 00 00    	test   esi,0x2
c002434d:	74 12                	je     c0024361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002434f:	83 ec 0c             	sub    esp,0xc
c0024352:	b3 03                	mov    bl,0x3
c0024354:	68 66 d6 02 c0       	push   0xc002d666
c0024359:	e8 75 e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c002435e:	83 c4 10             	add    esp,0x10
c0024361:	f7 c6 04 00 00 00    	test   esi,0x4
c0024367:	74 12                	je     c002437b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024369:	83 ec 0c             	sub    esp,0xc
c002436c:	b3 14                	mov    bl,0x14
c002436e:	68 86 d6 02 c0       	push   0xc002d686
c0024373:	e8 5b e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	f7 c6 08 00 00 00    	test   esi,0x8
c0024381:	74 12                	je     c0024395 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024383:	83 ec 0c             	sub    esp,0xc
c0024386:	b3 03                	mov    bl,0x3
c0024388:	68 66 d6 02 c0       	push   0xc002d666
c002438d:	e8 41 e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024392:	83 c4 10             	add    esp,0x10
c0024395:	f7 c6 10 00 00 00    	test   esi,0x10
c002439b:	74 12                	je     c00243af <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002439d:	83 ec 0c             	sub    esp,0xc
c00243a0:	b3 15                	mov    bl,0x15
c00243a2:	68 9e d6 02 c0       	push   0xc002d69e
c00243a7:	e8 27 e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00243ac:	83 c4 10             	add    esp,0x10
c00243af:	f7 c6 20 00 00 00    	test   esi,0x20
c00243b5:	74 12                	je     c00243c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00243b7:	83 ec 0c             	sub    esp,0xc
c00243ba:	b3 03                	mov    bl,0x3
c00243bc:	68 66 d6 02 c0       	push   0xc002d666
c00243c1:	e8 0d e5 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00243c6:	83 c4 10             	add    esp,0x10
c00243c9:	f7 c6 40 00 00 00    	test   esi,0x40
c00243cf:	74 12                	je     c00243e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00243d1:	83 ec 0c             	sub    esp,0xc
c00243d4:	b3 16                	mov    bl,0x16
c00243d6:	68 b8 d6 02 c0       	push   0xc002d6b8
c00243db:	e8 f3 e4 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00243e0:	83 c4 10             	add    esp,0x10
c00243e3:	89 f0                	mov    eax,esi
c00243e5:	84 c0                	test   al,al
c00243e7:	79 42                	jns    c002442b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243e9:	83 ec 0c             	sub    esp,0xc
c00243ec:	b3 0d                	mov    bl,0xd
c00243ee:	68 d9 d6 02 c0       	push   0xc002d6d9
c00243f3:	e8 db e4 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	eb 2e                	jmp    c002442b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243fd:	3c 03                	cmp    al,0x3
c00243ff:	75 14                	jne    c0024415 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024401:	83 ec 0c             	sub    esp,0xc
c0024404:	b3 17                	mov    bl,0x17
c0024406:	68 ed d6 02 c0       	push   0xc002d6ed
c002440b:	e8 c3 e4 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024410:	83 c4 10             	add    esp,0x10
c0024413:	eb 16                	jmp    c002442b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024415:	3c 04                	cmp    al,0x4
c0024417:	75 12                	jne    c002442b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024419:	83 ec 0c             	sub    esp,0xc
c002441c:	b3 08                	mov    bl,0x8
c002441e:	68 03 d7 02 c0       	push   0xc002d703
c0024423:	e8 ab e4 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024428:	83 c4 10             	add    esp,0x10
c002442b:	50                   	push   eax
c002442c:	50                   	push   eax
c002442d:	0f b6 c3             	movzx  eax,bl
c0024430:	50                   	push   eax
c0024431:	68 1b d7 02 c0       	push   0xc002d71b
c0024436:	e8 98 e4 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c002443b:	83 c4 10             	add    esp,0x10
c002443e:	83 c4 1c             	add    esp,0x1c
c0024441:	88 d8                	mov    al,bl
c0024443:	5b                   	pop    ebx
c0024444:	5e                   	pop    esi
c0024445:	5f                   	pop    edi
c0024446:	5d                   	pop    ebp
c0024447:	c3                   	ret    

c0024448 <IDE::polling(unsigned char, unsigned int)>:
c0024448:	57                   	push   edi
c0024449:	56                   	push   esi
c002444a:	53                   	push   ebx
c002444b:	bb 04 00 00 00       	mov    ebx,0x4
c0024450:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024454:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024459:	52                   	push   edx
c002445a:	6a 0c                	push   0xc
c002445c:	56                   	push   esi
c002445d:	57                   	push   edi
c002445e:	e8 f9 f4 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024463:	83 c4 10             	add    esp,0x10
c0024466:	4b                   	dec    ebx
c0024467:	75 f0                	jne    c0024459 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024469:	bb a0 86 01 00       	mov    ebx,0x186a0
c002446e:	50                   	push   eax
c002446f:	6a 0c                	push   0xc
c0024471:	56                   	push   esi
c0024472:	57                   	push   edi
c0024473:	e8 e4 f4 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024478:	83 c4 10             	add    esp,0x10
c002447b:	a8 01                	test   al,0x1
c002447d:	74 12                	je     c0024491 <IDE::polling(unsigned char, unsigned int)+0x49>
c002447f:	83 ec 0c             	sub    esp,0xc
c0024482:	68 35 d7 02 c0       	push   0xc002d735
c0024487:	e8 47 e4 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c002448c:	83 c4 10             	add    esp,0x10
c002448f:	eb 17                	jmp    c00244a8 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024491:	a8 20                	test   al,0x20
c0024493:	75 0f                	jne    c00244a4 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024495:	4b                   	dec    ebx
c0024496:	74 10                	je     c00244a8 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024498:	84 c0                	test   al,al
c002449a:	78 d2                	js     c002446e <IDE::polling(unsigned char, unsigned int)+0x26>
c002449c:	a8 08                	test   al,0x8
c002449e:	74 ce                	je     c002446e <IDE::polling(unsigned char, unsigned int)+0x26>
c00244a0:	31 c0                	xor    eax,eax
c00244a2:	eb 06                	jmp    c00244aa <IDE::polling(unsigned char, unsigned int)+0x62>
c00244a4:	b0 01                	mov    al,0x1
c00244a6:	eb 02                	jmp    c00244aa <IDE::polling(unsigned char, unsigned int)+0x62>
c00244a8:	b0 02                	mov    al,0x2
c00244aa:	5b                   	pop    ebx
c00244ab:	5e                   	pop    esi
c00244ac:	5f                   	pop    edi
c00244ad:	c3                   	ret    

c00244ae <SATABus::close(int, int, void*)>:
c00244ae:	31 c0                	xor    eax,eax
c00244b0:	c3                   	ret    
c00244b1:	90                   	nop

c00244b2 <SATABus::detect()>:
c00244b2:	c3                   	ret    
c00244b3:	90                   	nop

c00244b4 <SATABus::SATABus()>:
c00244b4:	83 ec 0c             	sub    esp,0xc
c00244b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244bb:	83 ec 08             	sub    esp,0x8
c00244be:	68 78 d7 02 c0       	push   0xc002d778
c00244c3:	50                   	push   eax
c00244c4:	e8 f1 fb fe ff       	call   c00140ba <HardDiskController::HardDiskController(char const*)>
c00244c9:	83 c4 10             	add    esp,0x10
c00244cc:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00244d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d5:	89 10                	mov    DWORD PTR [eax],edx
c00244d7:	83 ec 0c             	sub    esp,0xc
c00244da:	6a 50                	push   0x50
c00244dc:	e8 68 b7 fe ff       	call   c000fc49 <Phys::allocateContiguousPages(int)>
c00244e1:	83 c4 10             	add    esp,0x10
c00244e4:	89 c2                	mov    edx,eax
c00244e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244f0:	83 ec 0c             	sub    esp,0xc
c00244f3:	6a 50                	push   0x50
c00244f5:	e8 d3 cf fe ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c00244fa:	83 c4 10             	add    esp,0x10
c00244fd:	89 c2                	mov    edx,eax
c00244ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024503:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024509:	a1 70 f1 02 c0       	mov    eax,ds:0xc002f170
c002450e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024512:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024518:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002451c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024522:	83 ec 0c             	sub    esp,0xc
c0024525:	6a 03                	push   0x3
c0024527:	6a 50                	push   0x50
c0024529:	51                   	push   ecx
c002452a:	52                   	push   edx
c002452b:	50                   	push   eax
c002452c:	e8 c9 da fe ff       	call   c0011ffa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024531:	83 c4 20             	add    esp,0x20
c0024534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024538:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002453e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024542:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024548:	83 ec 04             	sub    esp,0x4
c002454b:	52                   	push   edx
c002454c:	50                   	push   eax
c002454d:	68 9c d7 02 c0       	push   0xc002d79c
c0024552:	e8 7c e3 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024557:	83 c4 10             	add    esp,0x10
c002455a:	90                   	nop
c002455b:	83 c4 0c             	add    esp,0xc
c002455e:	c3                   	ret    
c002455f:	90                   	nop

c0024560 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024560:	83 ec 0c             	sub    esp,0xc
c0024563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024567:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002456a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002456d:	09 c2                	or     edx,eax
c002456f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024573:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024579:	8b 08                	mov    ecx,DWORD PTR [eax]
c002457b:	31 c0                	xor    eax,eax
c002457d:	c1 e9 08             	shr    ecx,0x8
c0024580:	83 e1 0f             	and    ecx,0xf
c0024583:	39 c8                	cmp    eax,ecx
c0024585:	74 0a                	je     c0024591 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024587:	f6 c2 01             	test   dl,0x1
c002458a:	74 18                	je     c00245a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002458c:	d1 ea                	shr    edx,1
c002458e:	40                   	inc    eax
c002458f:	eb f2                	jmp    c0024583 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024591:	83 ec 0c             	sub    esp,0xc
c0024594:	68 c0 d7 02 c0       	push   0xc002d7c0
c0024599:	e8 6b 5d ff ff       	call   c001a309 <Krnl::panic(char const*)>
c002459e:	83 c4 10             	add    esp,0x10
c00245a1:	83 c8 ff             	or     eax,0xffffffff
c00245a4:	83 c4 0c             	add    esp,0xc
c00245a7:	c3                   	ret    

c00245a8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00245a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00245af:	89 c2                	mov    edx,eax
c00245b1:	c1 ea 08             	shr    edx,0x8
c00245b4:	83 e2 0f             	and    edx,0xf
c00245b7:	fe ca                	dec    dl
c00245b9:	75 31                	jne    c00245ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245bb:	83 e0 0f             	and    eax,0xf
c00245be:	3c 03                	cmp    al,0x3
c00245c0:	75 2a                	jne    c00245ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245c2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00245c5:	b8 02 00 00 00       	mov    eax,0x2
c00245ca:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00245d0:	74 1c                	je     c00245ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245d2:	b8 04 00 00 00       	mov    eax,0x4
c00245d7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00245dd:	74 0f                	je     c00245ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245df:	31 c0                	xor    eax,eax
c00245e1:	83 fa 03             	cmp    edx,0x3
c00245e4:	0f 94 c0             	sete   al
c00245e7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00245eb:	c3                   	ret    
c00245ec:	31 c0                	xor    eax,eax
c00245ee:	c3                   	ret    
c00245ef:	90                   	nop

c00245f0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00245f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245f7:	0f ba e2 0f          	bt     edx,0xf
c00245fb:	72 f7                	jb     c00245f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00245fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024600:	83 ca 10             	or     edx,0x10
c0024603:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024606:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024609:	83 ca 01             	or     edx,0x1
c002460c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002460f:	c3                   	ret    

c0024610 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024614:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024617:	83 e2 fe             	and    edx,0xfffffffe
c002461a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002461d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024620:	83 e2 ef             	and    edx,0xffffffef
c0024623:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024626:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024629:	0f ba e2 0e          	bt     edx,0xe
c002462d:	72 f7                	jb     c0024626 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002462f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024632:	0f ba e2 0f          	bt     edx,0xf
c0024636:	72 ee                	jb     c0024626 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024638:	c3                   	ret    
c0024639:	90                   	nop

c002463a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002463a:	55                   	push   ebp
c002463b:	57                   	push   edi
c002463c:	56                   	push   esi
c002463d:	53                   	push   ebx
c002463e:	83 ec 1c             	sub    esp,0x1c
c0024641:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024645:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024649:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002464d:	53                   	push   ebx
c002464e:	89 fd                	mov    ebp,edi
c0024650:	56                   	push   esi
c0024651:	c1 e5 0a             	shl    ebp,0xa
c0024654:	e8 b7 ff ff ff       	call   c0024610 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024659:	83 ec 0c             	sub    esp,0xc
c002465c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024662:	01 e8                	add    eax,ebp
c0024664:	89 03                	mov    DWORD PTR [ebx],eax
c0024666:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024668:	68 00 04 00 00       	push   0x400
c002466d:	6a 00                	push   0x0
c002466f:	50                   	push   eax
c0024670:	e8 db c0 fd ff       	call   c0000750 <memset>
c0024675:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002467b:	89 fa                	mov    edx,edi
c002467d:	01 e8                	add    eax,ebp
c002467f:	c1 e7 0d             	shl    edi,0xd
c0024682:	89 03                	mov    DWORD PTR [ebx],eax
c0024684:	c1 e2 08             	shl    edx,0x8
c0024687:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002468e:	81 c2 00 80 00 00    	add    edx,0x8000
c0024694:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024698:	89 d0                	mov    eax,edx
c002469a:	83 c4 1c             	add    esp,0x1c
c002469d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246a3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00246a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00246a9:	68 00 01 00 00       	push   0x100
c00246ae:	6a 00                	push   0x0
c00246b0:	50                   	push   eax
c00246b1:	e8 9a c0 fd ff       	call   c0000750 <memset>
c00246b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246ba:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00246c0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00246c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246ca:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00246cd:	83 c4 10             	add    esp,0x10
c00246d0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246d7:	31 ff                	xor    edi,edi
c00246d9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00246df:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00246e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246e9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246ef:	83 c5 20             	add    ebp,0x20
c00246f2:	01 f8                	add    eax,edi
c00246f4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246f7:	52                   	push   edx
c00246f8:	68 00 01 00 00       	push   0x100
c00246fd:	6a 00                	push   0x0
c00246ff:	50                   	push   eax
c0024700:	e8 4b c0 fd ff       	call   c0000750 <memset>
c0024705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024709:	83 c4 10             	add    esp,0x10
c002470c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024712:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024719:	01 f8                	add    eax,edi
c002471b:	81 c7 00 01 00 00    	add    edi,0x100
c0024721:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024724:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002472a:	75 b3                	jne    c00246df <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002472c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024730:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024734:	83 c4 1c             	add    esp,0x1c
c0024737:	5b                   	pop    ebx
c0024738:	5e                   	pop    esi
c0024739:	5f                   	pop    edi
c002473a:	5d                   	pop    ebp
c002473b:	e9 b0 fe ff ff       	jmp    c00245f0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024740 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024740:	55                   	push   ebp
c0024741:	57                   	push   edi
c0024742:	56                   	push   esi
c0024743:	53                   	push   ebx
c0024744:	31 db                	xor    ebx,ebx
c0024746:	83 ec 0c             	sub    esp,0xc
c0024749:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002474d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024751:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024754:	f7 c7 01 00 00 00    	test   edi,0x1
c002475a:	0f 84 aa 00 00 00    	je     c002480a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024760:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024764:	89 d8                	mov    eax,ebx
c0024766:	c1 e0 07             	shl    eax,0x7
c0024769:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024770:	55                   	push   ebp
c0024771:	56                   	push   esi
c0024772:	e8 31 fe ff ff       	call   c00245a8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024777:	5a                   	pop    edx
c0024778:	83 f8 01             	cmp    eax,0x1
c002477b:	59                   	pop    ecx
c002477c:	75 30                	jne    c00247ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002477e:	50                   	push   eax
c002477f:	50                   	push   eax
c0024780:	53                   	push   ebx
c0024781:	68 e5 d7 02 c0       	push   0xc002d7e5
c0024786:	e8 48 e1 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c002478b:	83 c4 0c             	add    esp,0xc
c002478e:	53                   	push   ebx
c002478f:	55                   	push   ebp
c0024790:	56                   	push   esi
c0024791:	e8 a4 fe ff ff       	call   c002463a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024796:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002479d:	e8 ea b0 fe ff       	call   c000f88c <malloc>
c00247a2:	89 c5                	mov    ebp,eax
c00247a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00247a7:	e8 24 0d 00 00       	call   c00254d0 <SATA::SATA()>
c00247ac:	eb 33                	jmp    c00247e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00247ae:	83 f8 04             	cmp    eax,0x4
c00247b1:	75 47                	jne    c00247fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00247b3:	50                   	push   eax
c00247b4:	50                   	push   eax
c00247b5:	53                   	push   ebx
c00247b6:	68 fc d7 02 c0       	push   0xc002d7fc
c00247bb:	e8 13 e1 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00247c0:	83 c4 0c             	add    esp,0xc
c00247c3:	53                   	push   ebx
c00247c4:	55                   	push   ebp
c00247c5:	56                   	push   esi
c00247c6:	e8 6f fe ff ff       	call   c002463a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247cb:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247d2:	e8 b5 b0 fe ff       	call   c000f88c <malloc>
c00247d7:	89 c5                	mov    ebp,eax
c00247d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00247dc:	e8 65 10 00 00       	call   c0025846 <SATAPI::SATAPI()>
c00247e1:	5a                   	pop    edx
c00247e2:	59                   	pop    ecx
c00247e3:	55                   	push   ebp
c00247e4:	56                   	push   esi
c00247e5:	e8 22 f5 fe ff       	call   c0013d0c <Device::addChild(Device*)>
c00247ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247ed:	56                   	push   esi
c00247ee:	6a 00                	push   0x0
c00247f0:	53                   	push   ebx
c00247f1:	55                   	push   ebp
c00247f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247f5:	83 c4 20             	add    esp,0x20
c00247f8:	eb 10                	jmp    c002480a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247fa:	50                   	push   eax
c00247fb:	50                   	push   eax
c00247fc:	53                   	push   ebx
c00247fd:	68 15 d8 02 c0       	push   0xc002d815
c0024802:	e8 cc e0 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024807:	83 c4 10             	add    esp,0x10
c002480a:	d1 ef                	shr    edi,1
c002480c:	43                   	inc    ebx
c002480d:	83 fb 20             	cmp    ebx,0x20
c0024810:	0f 85 3e ff ff ff    	jne    c0024754 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024816:	83 c4 0c             	add    esp,0xc
c0024819:	5b                   	pop    ebx
c002481a:	5e                   	pop    esi
c002481b:	5f                   	pop    edi
c002481c:	5d                   	pop    ebp
c002481d:	c3                   	ret    

c002481e <SATABus::open(int, int, void*)>:
c002481e:	83 ec 14             	sub    esp,0x14
c0024821:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024825:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002482b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024831:	52                   	push   edx
c0024832:	50                   	push   eax
c0024833:	e8 08 ff ff ff       	call   c0024740 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024838:	31 c0                	xor    eax,eax
c002483a:	83 c4 1c             	add    esp,0x1c
c002483d:	c3                   	ret    

c002483e <ATA::close(int, int, void*)>:
c002483e:	83 ec 0c             	sub    esp,0xc
c0024841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024845:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002484b:	85 c0                	test   eax,eax
c002484d:	74 0c                	je     c002485b <ATA::close(int, int, void*)+0x1d>
c002484f:	83 ec 0c             	sub    esp,0xc
c0024852:	8b 10                	mov    edx,DWORD PTR [eax]
c0024854:	50                   	push   eax
c0024855:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024858:	83 c4 10             	add    esp,0x10
c002485b:	31 c0                	xor    eax,eax
c002485d:	83 c4 0c             	add    esp,0xc
c0024860:	c3                   	ret    
c0024861:	90                   	nop

c0024862 <ATA::powerSaving(PowerSavingLevel)>:
c0024862:	c3                   	ret    
c0024863:	90                   	nop

c0024864 <ATA::ATA()>:
c0024864:	83 ec 0c             	sub    esp,0xc
c0024867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002486b:	83 ec 04             	sub    esp,0x4
c002486e:	68 00 02 00 00       	push   0x200
c0024873:	68 fd d8 02 c0       	push   0xc002d8fd
c0024878:	50                   	push   eax
c0024879:	e8 d4 f8 fe ff       	call   c0014152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002487e:	83 c4 10             	add    esp,0x10
c0024881:	ba 80 d8 02 c0       	mov    edx,0xc002d880
c0024886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002488a:	89 10                	mov    DWORD PTR [eax],edx
c002488c:	90                   	nop
c002488d:	83 c4 0c             	add    esp,0xc
c0024890:	c3                   	ret    
c0024891:	90                   	nop

c0024892 <ATA::flush(bool)>:
c0024892:	53                   	push   ebx
c0024893:	83 ec 08             	sub    esp,0x8
c0024896:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002489b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002489f:	19 c0                	sbb    eax,eax
c00248a1:	83 e0 fd             	and    eax,0xfffffffd
c00248a4:	05 ea 00 00 00       	add    eax,0xea
c00248a9:	50                   	push   eax
c00248aa:	6a 07                	push   0x7
c00248ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248b3:	50                   	push   eax
c00248b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248ba:	e8 dd ef ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248bf:	83 c4 0c             	add    esp,0xc
c00248c2:	6a 00                	push   0x0
c00248c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248cb:	50                   	push   eax
c00248cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248d2:	e8 71 fb ff ff       	call   c0024448 <IDE::polling(unsigned char, unsigned int)>
c00248d7:	83 c4 18             	add    esp,0x18
c00248da:	5b                   	pop    ebx
c00248db:	c3                   	ret    

c00248dc <ATA::readyForCommand()>:
c00248dc:	56                   	push   esi
c00248dd:	53                   	push   ebx
c00248de:	31 db                	xor    ebx,ebx
c00248e0:	50                   	push   eax
c00248e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248e5:	50                   	push   eax
c00248e6:	6a 0c                	push   0xc
c00248e8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00248ef:	50                   	push   eax
c00248f0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00248f6:	e8 61 f0 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c00248fb:	83 c4 10             	add    esp,0x10
c00248fe:	a8 88                	test   al,0x88
c0024900:	74 23                	je     c0024925 <ATA::readyForCommand()+0x49>
c0024902:	43                   	inc    ebx
c0024903:	83 fb 63             	cmp    ebx,0x63
c0024906:	7e dd                	jle    c00248e5 <ATA::readyForCommand()+0x9>
c0024908:	51                   	push   ecx
c0024909:	51                   	push   ecx
c002490a:	6a 00                	push   0x0
c002490c:	68 40 42 0f 00       	push   0xf4240
c0024911:	e8 a9 9a ff ff       	call   c001e3bf <nanoSleep(unsigned long long)>
c0024916:	83 c4 10             	add    esp,0x10
c0024919:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002491f:	75 c4                	jne    c00248e5 <ATA::readyForCommand()+0x9>
c0024921:	31 c0                	xor    eax,eax
c0024923:	eb 02                	jmp    c0024927 <ATA::readyForCommand()+0x4b>
c0024925:	b0 01                	mov    al,0x1
c0024927:	5a                   	pop    edx
c0024928:	5b                   	pop    ebx
c0024929:	5e                   	pop    esi
c002492a:	c3                   	ret    
c002492b:	90                   	nop

c002492c <ATA::access(unsigned long long, int, void*, bool)>:
c002492c:	55                   	push   ebp
c002492d:	57                   	push   edi
c002492e:	56                   	push   esi
c002492f:	53                   	push   ebx
c0024930:	83 ec 2c             	sub    esp,0x2c
c0024933:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024937:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002493b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002493f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024943:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024947:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002494b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002494f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024955:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024959:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002495f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024963:	c1 e0 06             	shl    eax,0x6
c0024966:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002496e:	74 5d                	je     c00249cd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024970:	89 fa                	mov    edx,edi
c0024972:	89 f0                	mov    eax,esi
c0024974:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024978:	c1 ea 1c             	shr    edx,0x1c
c002497b:	89 d1                	mov    ecx,edx
c002497d:	09 c1                	or     ecx,eax
c002497f:	74 25                	je     c00249a6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024981:	31 ed                	xor    ebp,ebp
c0024983:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002498a:	89 fa                	mov    edx,edi
c002498c:	89 f0                	mov    eax,esi
c002498e:	0f ad d0             	shrd   eax,edx,cl
c0024991:	d3 ea                	shr    edx,cl
c0024993:	f6 c1 20             	test   cl,0x20
c0024996:	74 02                	je     c002499a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024998:	89 d0                	mov    eax,edx
c002499a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002499e:	45                   	inc    ebp
c002499f:	83 fd 06             	cmp    ebp,0x6
c00249a2:	75 df                	jne    c0024983 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00249a4:	eb 76                	jmp    c0024a1c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00249a6:	89 f0                	mov    eax,esi
c00249a8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00249ad:	89 fa                	mov    edx,edi
c00249af:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249b6:	0f ac d0 10          	shrd   eax,edx,0x10
c00249ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249bf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00249c3:	c1 ee 18             	shr    esi,0x18
c00249c6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00249cb:	eb 56                	jmp    c0024a23 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249cd:	6a 00                	push   0x0
c00249cf:	6a 3f                	push   0x3f
c00249d1:	57                   	push   edi
c00249d2:	56                   	push   esi
c00249d3:	e8 2c 29 00 00       	call   c0027304 <__umoddi3>
c00249d8:	83 c4 10             	add    esp,0x10
c00249db:	40                   	inc    eax
c00249dc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00249e0:	6a 00                	push   0x0
c00249e2:	68 f0 03 00 00       	push   0x3f0
c00249e7:	57                   	push   edi
c00249e8:	56                   	push   esi
c00249e9:	e8 16 28 00 00       	call   c0027204 <__udivdi3>
c00249ee:	83 c4 10             	add    esp,0x10
c00249f1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00249f6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249fd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a02:	6a 00                	push   0x0
c0024a04:	6a 3f                	push   0x3f
c0024a06:	57                   	push   edi
c0024a07:	56                   	push   esi
c0024a08:	e8 f7 27 00 00       	call   c0027204 <__udivdi3>
c0024a0d:	83 c4 10             	add    esp,0x10
c0024a10:	89 c6                	mov    esi,eax
c0024a12:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a17:	83 e6 0f             	and    esi,0xf
c0024a1a:	eb 07                	jmp    c0024a23 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a1c:	31 f6                	xor    esi,esi
c0024a1e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a23:	bf 01 00 00 00       	mov    edi,0x1
c0024a28:	50                   	push   eax
c0024a29:	6a 00                	push   0x0
c0024a2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a32:	50                   	push   eax
c0024a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a37:	e8 6c f0 ff ff       	call   c0023aa8 <IDE::enableIRQs(unsigned char, bool)>
c0024a3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a3f:	e8 98 fe ff ff       	call   c00248dc <ATA::readyForCommand()>
c0024a44:	83 c4 10             	add    esp,0x10
c0024a47:	84 c0                	test   al,al
c0024a49:	0f 84 5a 02 00 00    	je     c0024ca9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a4f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a55:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a5b:	c1 e0 04             	shl    eax,0x4
c0024a5e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a65:	09 c6                	or     esi,eax
c0024a67:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a6c:	75 05                	jne    c0024a73 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a6e:	83 ce a0             	or     esi,0xffffffa0
c0024a71:	eb 03                	jmp    c0024a76 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a73:	83 ce e0             	or     esi,0xffffffe0
c0024a76:	89 f0                	mov    eax,esi
c0024a78:	0f b6 f0             	movzx  esi,al
c0024a7b:	56                   	push   esi
c0024a7c:	6a 06                	push   0x6
c0024a7e:	51                   	push   ecx
c0024a7f:	52                   	push   edx
c0024a80:	e8 17 ee ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a85:	83 c4 10             	add    esp,0x10
c0024a88:	6a 00                	push   0x0
c0024a8a:	6a 01                	push   0x1
c0024a8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a93:	50                   	push   eax
c0024a94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a9a:	e8 fd ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a9f:	83 c4 10             	add    esp,0x10
c0024aa2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024aa7:	75 6e                	jne    c0024b17 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024aa9:	6a 00                	push   0x0
c0024aab:	6a 08                	push   0x8
c0024aad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab4:	50                   	push   eax
c0024ab5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abb:	e8 dc ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024ac5:	50                   	push   eax
c0024ac6:	6a 09                	push   0x9
c0024ac8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024acf:	50                   	push   eax
c0024ad0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad6:	e8 c1 ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024adb:	83 c4 20             	add    esp,0x20
c0024ade:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024ae3:	50                   	push   eax
c0024ae4:	6a 0a                	push   0xa
c0024ae6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aed:	50                   	push   eax
c0024aee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af4:	e8 a3 ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024afe:	50                   	push   eax
c0024aff:	6a 0b                	push   0xb
c0024b01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b08:	50                   	push   eax
c0024b09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b0f:	e8 88 ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b14:	83 c4 20             	add    esp,0x20
c0024b17:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b1c:	50                   	push   eax
c0024b1d:	6a 02                	push   0x2
c0024b1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b26:	50                   	push   eax
c0024b27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b2d:	e8 6a ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b32:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b37:	50                   	push   eax
c0024b38:	6a 03                	push   0x3
c0024b3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b41:	50                   	push   eax
c0024b42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b48:	e8 4f ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b4d:	83 c4 20             	add    esp,0x20
c0024b50:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b55:	50                   	push   eax
c0024b56:	6a 04                	push   0x4
c0024b58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b5f:	50                   	push   eax
c0024b60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b66:	e8 31 ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b70:	50                   	push   eax
c0024b71:	6a 05                	push   0x5
c0024b73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b7a:	50                   	push   eax
c0024b7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b81:	e8 16 ed ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b86:	83 c4 20             	add    esp,0x20
c0024b89:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b8e:	0f 94 c0             	sete   al
c0024b91:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b96:	74 09                	je     c0024ba1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b98:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b9f:	eb 07                	jmp    c0024ba8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024ba1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024ba8:	0f b6 c0             	movzx  eax,al
c0024bab:	50                   	push   eax
c0024bac:	6a 07                	push   0x7
c0024bae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bb5:	50                   	push   eax
c0024bb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bbc:	e8 db ec ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bc1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024bc5:	83 c4 10             	add    esp,0x10
c0024bc8:	85 f6                	test   esi,esi
c0024bca:	0f 84 ba 00 00 00    	je     c0024c8a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024bd0:	50                   	push   eax
c0024bd1:	6a 01                	push   0x1
c0024bd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bda:	50                   	push   eax
c0024bdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be1:	e8 62 f8 ff ff       	call   c0024448 <IDE::polling(unsigned char, unsigned int)>
c0024be6:	83 c4 10             	add    esp,0x10
c0024be9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024bef:	84 c0                	test   al,al
c0024bf1:	74 2c                	je     c0024c1f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024bf3:	0f b6 f8             	movzx  edi,al
c0024bf6:	0f b6 d2             	movzx  edx,dl
c0024bf9:	57                   	push   edi
c0024bfa:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024c01:	50                   	push   eax
c0024c02:	52                   	push   edx
c0024c03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c09:	e8 a4 f6 ff ff       	call   c00242b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c0e:	c7 04 24 58 d8 02 c0 	mov    DWORD PTR [esp],0xc002d858
c0024c15:	e8 b9 dc fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0024c1a:	e9 87 00 00 00       	jmp    c0024ca6 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c1f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024c24:	74 33                	je     c0024c59 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024c26:	31 ed                	xor    ebp,ebp
c0024c28:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c2c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024c30:	50                   	push   eax
c0024c31:	50                   	push   eax
c0024c32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c39:	50                   	push   eax
c0024c3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c40:	e8 45 ec ff ff       	call   c002388a <IDE::getBase(unsigned char)>
c0024c45:	89 c2                	mov    edx,eax
c0024c47:	89 f8                	mov    eax,edi
c0024c49:	66 ef                	out    dx,ax
c0024c4b:	45                   	inc    ebp
c0024c4c:	83 c4 10             	add    esp,0x10
c0024c4f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c55:	75 d1                	jne    c0024c28 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c57:	eb 23                	jmp    c0024c7c <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c59:	0f b6 d2             	movzx  edx,dl
c0024c5c:	51                   	push   ecx
c0024c5d:	51                   	push   ecx
c0024c5e:	52                   	push   edx
c0024c5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c65:	e8 20 ec ff ff       	call   c002388a <IDE::getBase(unsigned char)>
c0024c6a:	b9 00 01 00 00       	mov    ecx,0x100
c0024c6f:	89 c2                	mov    edx,eax
c0024c71:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c75:	fc                   	cld    
c0024c76:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c79:	83 c4 10             	add    esp,0x10
c0024c7c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c84:	4e                   	dec    esi
c0024c85:	e9 3e ff ff ff       	jmp    c0024bc8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024c8a:	31 ff                	xor    edi,edi
c0024c8c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c91:	74 16                	je     c0024ca9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c93:	50                   	push   eax
c0024c94:	50                   	push   eax
c0024c95:	31 c0                	xor    eax,eax
c0024c97:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c9c:	0f 94 c0             	sete   al
c0024c9f:	50                   	push   eax
c0024ca0:	53                   	push   ebx
c0024ca1:	e8 ec fb ff ff       	call   c0024892 <ATA::flush(bool)>
c0024ca6:	83 c4 10             	add    esp,0x10
c0024ca9:	83 c4 2c             	add    esp,0x2c
c0024cac:	89 f8                	mov    eax,edi
c0024cae:	5b                   	pop    ebx
c0024caf:	5e                   	pop    esi
c0024cb0:	5f                   	pop    edi
c0024cb1:	5d                   	pop    ebp
c0024cb2:	c3                   	ret    
c0024cb3:	90                   	nop

c0024cb4 <ATA::read(unsigned long long, int, void*)>:
c0024cb4:	57                   	push   edi
c0024cb5:	b8 04 00 00 00       	mov    eax,0x4
c0024cba:	56                   	push   esi
c0024cbb:	53                   	push   ebx
c0024cbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cc0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cc4:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024ccb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ccf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cd5:	77 25                	ja     c0024cfc <ATA::read(unsigned long long, int, void*)+0x48>
c0024cd7:	b8 06 00 00 00       	mov    eax,0x6
c0024cdc:	85 f6                	test   esi,esi
c0024cde:	74 1c                	je     c0024cfc <ATA::read(unsigned long long, int, void*)+0x48>
c0024ce0:	50                   	push   eax
c0024ce1:	50                   	push   eax
c0024ce2:	6a 00                	push   0x0
c0024ce4:	56                   	push   esi
c0024ce5:	52                   	push   edx
c0024ce6:	53                   	push   ebx
c0024ce7:	51                   	push   ecx
c0024ce8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cec:	e8 3b fc ff ff       	call   c002492c <ATA::access(unsigned long long, int, void*, bool)>
c0024cf1:	83 c4 20             	add    esp,0x20
c0024cf4:	85 c0                	test   eax,eax
c0024cf6:	0f 95 c0             	setne  al
c0024cf9:	0f b6 c0             	movzx  eax,al
c0024cfc:	5b                   	pop    ebx
c0024cfd:	5e                   	pop    esi
c0024cfe:	5f                   	pop    edi
c0024cff:	c3                   	ret    

c0024d00 <ATA::write(unsigned long long, int, void*)>:
c0024d00:	57                   	push   edi
c0024d01:	b8 04 00 00 00       	mov    eax,0x4
c0024d06:	56                   	push   esi
c0024d07:	53                   	push   ebx
c0024d08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d10:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d17:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d1b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d21:	77 25                	ja     c0024d48 <ATA::write(unsigned long long, int, void*)+0x48>
c0024d23:	b8 06 00 00 00       	mov    eax,0x6
c0024d28:	85 f6                	test   esi,esi
c0024d2a:	74 1c                	je     c0024d48 <ATA::write(unsigned long long, int, void*)+0x48>
c0024d2c:	50                   	push   eax
c0024d2d:	50                   	push   eax
c0024d2e:	6a 01                	push   0x1
c0024d30:	56                   	push   esi
c0024d31:	52                   	push   edx
c0024d32:	53                   	push   ebx
c0024d33:	51                   	push   ecx
c0024d34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d38:	e8 ef fb ff ff       	call   c002492c <ATA::access(unsigned long long, int, void*, bool)>
c0024d3d:	83 c4 20             	add    esp,0x20
c0024d40:	85 c0                	test   eax,eax
c0024d42:	0f 95 c0             	setne  al
c0024d45:	0f b6 c0             	movzx  eax,al
c0024d48:	5b                   	pop    ebx
c0024d49:	5e                   	pop    esi
c0024d4a:	5f                   	pop    edi
c0024d4b:	c3                   	ret    

c0024d4c <ATA::detectCHS()>:
c0024d4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d50:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d56:	c1 e0 06             	shl    eax,0x6
c0024d59:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d5f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d69:	c7 44 24 04 63 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d863
c0024d71:	e9 93 55 ff ff       	jmp    c001a309 <Krnl::panic(char const*)>

c0024d76 <ATA::open(int, int, void*)>:
c0024d76:	53                   	push   ebx
c0024d77:	83 ec 08             	sub    esp,0x8
c0024d7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d86:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d8c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d92:	c1 e0 06             	shl    eax,0x6
c0024d95:	01 d0                	add    eax,edx
c0024d97:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d9e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024da4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024dab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024db5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024dbb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dc2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024dc9:	75 0c                	jne    c0024dd7 <ATA::open(int, int, void*)+0x61>
c0024dcb:	83 ec 0c             	sub    esp,0xc
c0024dce:	53                   	push   ebx
c0024dcf:	e8 78 ff ff ff       	call   c0024d4c <ATA::detectCHS()>
c0024dd4:	83 c4 10             	add    esp,0x10
c0024dd7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ddd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024de3:	c1 e0 06             	shl    eax,0x6
c0024de6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024ded:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024df7:	d1 e8                	shr    eax,1
c0024df9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024dff:	6a 04                	push   0x4
c0024e01:	6a 0c                	push   0xc
c0024e03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e0a:	50                   	push   eax
c0024e0b:	52                   	push   edx
c0024e0c:	e8 8b ea ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e11:	90                   	nop
c0024e12:	90                   	nop
c0024e13:	6a 00                	push   0x0
c0024e15:	6a 0c                	push   0xc
c0024e17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e1e:	50                   	push   eax
c0024e1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e25:	e8 72 ea ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e2a:	83 c4 14             	add    esp,0x14
c0024e2d:	53                   	push   ebx
c0024e2e:	e8 87 f3 fe ff       	call   c00141ba <PhysicalDisk::startCache()>
c0024e33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e36:	e8 39 16 ff ff       	call   c0016474 <createPartitionsForDisk(PhysicalDisk*)>
c0024e3b:	31 c0                	xor    eax,eax
c0024e3d:	83 c4 18             	add    esp,0x18
c0024e40:	5b                   	pop    ebx
c0024e41:	c3                   	ret    

c0024e42 <ATAPI::write(unsigned long long, int, void*)>:
c0024e42:	b8 03 00 00 00       	mov    eax,0x3
c0024e47:	c3                   	ret    

c0024e48 <ATAPI::close(int, int, void*)>:
c0024e48:	83 ec 0c             	sub    esp,0xc
c0024e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e55:	85 c0                	test   eax,eax
c0024e57:	74 0c                	je     c0024e65 <ATAPI::close(int, int, void*)+0x1d>
c0024e59:	83 ec 0c             	sub    esp,0xc
c0024e5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e5e:	50                   	push   eax
c0024e5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e62:	83 c4 10             	add    esp,0x10
c0024e65:	31 c0                	xor    eax,eax
c0024e67:	83 c4 0c             	add    esp,0xc
c0024e6a:	c3                   	ret    
c0024e6b:	90                   	nop

c0024e6c <ATAPI::ATAPI()>:
c0024e6c:	83 ec 0c             	sub    esp,0xc
c0024e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e73:	83 ec 04             	sub    esp,0x4
c0024e76:	68 00 08 00 00       	push   0x800
c0024e7b:	68 9d d9 02 c0       	push   0xc002d99d
c0024e80:	50                   	push   eax
c0024e81:	e8 cc f2 fe ff       	call   c0014152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e86:	83 c4 10             	add    esp,0x10
c0024e89:	ba b8 d8 02 c0       	mov    edx,0xc002d8b8
c0024e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e92:	89 10                	mov    DWORD PTR [eax],edx
c0024e94:	90                   	nop
c0024e95:	83 c4 0c             	add    esp,0xc
c0024e98:	c3                   	ret    
c0024e99:	90                   	nop

c0024e9a <ATAPI::readyForCommand()>:
c0024e9a:	56                   	push   esi
c0024e9b:	53                   	push   ebx
c0024e9c:	31 db                	xor    ebx,ebx
c0024e9e:	50                   	push   eax
c0024e9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ea3:	50                   	push   eax
c0024ea4:	6a 0c                	push   0xc
c0024ea6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ead:	50                   	push   eax
c0024eae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024eb4:	e8 a3 ea ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0024eb9:	83 c4 10             	add    esp,0x10
c0024ebc:	a8 88                	test   al,0x88
c0024ebe:	74 23                	je     c0024ee3 <ATAPI::readyForCommand()+0x49>
c0024ec0:	43                   	inc    ebx
c0024ec1:	83 fb 63             	cmp    ebx,0x63
c0024ec4:	7e dd                	jle    c0024ea3 <ATAPI::readyForCommand()+0x9>
c0024ec6:	51                   	push   ecx
c0024ec7:	51                   	push   ecx
c0024ec8:	6a 00                	push   0x0
c0024eca:	68 40 42 0f 00       	push   0xf4240
c0024ecf:	e8 eb 94 ff ff       	call   c001e3bf <nanoSleep(unsigned long long)>
c0024ed4:	83 c4 10             	add    esp,0x10
c0024ed7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024edd:	75 c4                	jne    c0024ea3 <ATAPI::readyForCommand()+0x9>
c0024edf:	31 c0                	xor    eax,eax
c0024ee1:	eb 02                	jmp    c0024ee5 <ATAPI::readyForCommand()+0x4b>
c0024ee3:	b0 01                	mov    al,0x1
c0024ee5:	5a                   	pop    edx
c0024ee6:	5b                   	pop    ebx
c0024ee7:	5e                   	pop    esi
c0024ee8:	c3                   	ret    
c0024ee9:	90                   	nop

c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024eea:	55                   	push   ebp
c0024eeb:	57                   	push   edi
c0024eec:	56                   	push   esi
c0024eed:	53                   	push   ebx
c0024eee:	83 ec 20             	sub    esp,0x20
c0024ef1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ef5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ef9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024efd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f01:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f05:	6a 01                	push   0x1
c0024f07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f0e:	50                   	push   eax
c0024f0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f15:	e8 8e eb ff ff       	call   c0023aa8 <IDE::enableIRQs(unsigned char, bool)>
c0024f1a:	5e                   	pop    esi
c0024f1b:	58                   	pop    eax
c0024f1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f23:	50                   	push   eax
c0024f24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f2a:	e8 47 e9 ff ff       	call   c0023876 <IDE::prepareInterrupt(unsigned char)>
c0024f2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f32:	e8 63 ff ff ff       	call   c0024e9a <ATAPI::readyForCommand()>
c0024f37:	83 c4 10             	add    esp,0x10
c0024f3a:	84 c0                	test   al,al
c0024f3c:	75 0a                	jne    c0024f48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f3e:	bb 01 00 00 00       	mov    ebx,0x1
c0024f43:	e9 57 02 00 00       	jmp    c002519f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f48:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f4e:	c1 e0 04             	shl    eax,0x4
c0024f51:	0f b6 c0             	movzx  eax,al
c0024f54:	50                   	push   eax
c0024f55:	6a 06                	push   0x6
c0024f57:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f5e:	50                   	push   eax
c0024f5f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f65:	e8 32 e9 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f6a:	6a 00                	push   0x0
c0024f6c:	6a 01                	push   0x1
c0024f6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f75:	50                   	push   eax
c0024f76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f7c:	e8 1b e9 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f81:	83 c4 20             	add    esp,0x20
c0024f84:	0f b6 c3             	movzx  eax,bl
c0024f87:	0f b6 df             	movzx  ebx,bh
c0024f8a:	50                   	push   eax
c0024f8b:	6a 04                	push   0x4
c0024f8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f94:	50                   	push   eax
c0024f95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f9b:	e8 fc e8 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fa0:	53                   	push   ebx
c0024fa1:	6a 05                	push   0x5
c0024fa3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024faa:	50                   	push   eax
c0024fab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fb1:	e8 e6 e8 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fb6:	83 c4 20             	add    esp,0x20
c0024fb9:	68 a0 00 00 00       	push   0xa0
c0024fbe:	6a 07                	push   0x7
c0024fc0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fc7:	50                   	push   eax
c0024fc8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fce:	e8 c9 e8 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fd3:	83 c4 0c             	add    esp,0xc
c0024fd6:	6a 01                	push   0x1
c0024fd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fdf:	50                   	push   eax
c0024fe0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fe6:	e8 5d f4 ff ff       	call   c0024448 <IDE::polling(unsigned char, unsigned int)>
c0024feb:	83 c4 10             	add    esp,0x10
c0024fee:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024ff4:	84 c0                	test   al,al
c0024ff6:	74 23                	je     c002501b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024ff8:	0f b6 d8             	movzx  ebx,al
c0024ffb:	0f b6 d2             	movzx  edx,dl
c0024ffe:	53                   	push   ebx
c0024fff:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025006:	50                   	push   eax
c0025007:	52                   	push   edx
c0025008:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002500e:	e8 9f f2 ff ff       	call   c00242b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025013:	83 c4 10             	add    esp,0x10
c0025016:	e9 84 01 00 00       	jmp    c002519f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002501b:	0f b6 d2             	movzx  edx,dl
c002501e:	53                   	push   ebx
c002501f:	53                   	push   ebx
c0025020:	52                   	push   edx
c0025021:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025027:	e8 5e e8 ff ff       	call   c002388a <IDE::getBase(unsigned char)>
c002502c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025030:	b9 06 00 00 00       	mov    ecx,0x6
c0025035:	89 c2                	mov    edx,eax
c0025037:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002503a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002503e:	83 c4 10             	add    esp,0x10
c0025041:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025047:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002504e:	85 db                	test   ebx,ebx
c0025050:	0f 84 ec 00 00 00    	je     c0025142 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025056:	51                   	push   ecx
c0025057:	51                   	push   ecx
c0025058:	52                   	push   edx
c0025059:	50                   	push   eax
c002505a:	e8 ab e9 ff ff       	call   c0023a0a <IDE::waitInterrupt(unsigned char)>
c002505f:	83 c4 10             	add    esp,0x10
c0025062:	84 c0                	test   al,al
c0025064:	0f 84 d4 fe ff ff    	je     c0024f3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002506a:	56                   	push   esi
c002506b:	56                   	push   esi
c002506c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025073:	50                   	push   eax
c0025074:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002507a:	e8 f7 e7 ff ff       	call   c0023876 <IDE::prepareInterrupt(unsigned char)>
c002507f:	83 c4 0c             	add    esp,0xc
c0025082:	6a 04                	push   0x4
c0025084:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002508b:	50                   	push   eax
c002508c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025092:	e8 c5 e8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c0025097:	83 c4 0c             	add    esp,0xc
c002509a:	89 c6                	mov    esi,eax
c002509c:	6a 05                	push   0x5
c002509e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250a5:	50                   	push   eax
c00250a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ac:	e8 ab e8 ff ff       	call   c002395c <IDE::read(unsigned char, unsigned char)>
c00250b1:	89 f1                	mov    ecx,esi
c00250b3:	0f b6 c0             	movzx  eax,al
c00250b6:	0f b6 f1             	movzx  esi,cl
c00250b9:	c1 e0 08             	shl    eax,0x8
c00250bc:	09 c6                	or     esi,eax
c00250be:	d1 fe                	sar    esi,1
c00250c0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250c4:	83 c4 10             	add    esp,0x10
c00250c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250cc:	74 41                	je     c002510f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250ce:	31 c9                	xor    ecx,ecx
c00250d0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250d6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250dd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00250e1:	75 0a                	jne    c00250ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00250e3:	01 c9                	add    ecx,ecx
c00250e5:	01 cd                	add    ebp,ecx
c00250e7:	4b                   	dec    ebx
c00250e8:	e9 54 ff ff ff       	jmp    c0025041 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00250ed:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00250f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00250f6:	51                   	push   ecx
c00250f7:	51                   	push   ecx
c00250f8:	52                   	push   edx
c00250f9:	50                   	push   eax
c00250fa:	e8 8b e7 ff ff       	call   c002388a <IDE::getBase(unsigned char)>
c00250ff:	89 c2                	mov    edx,eax
c0025101:	89 f0                	mov    eax,esi
c0025103:	66 ef                	out    dx,ax
c0025105:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025109:	83 c4 10             	add    esp,0x10
c002510c:	41                   	inc    ecx
c002510d:	eb c1                	jmp    c00250d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002510f:	31 f6                	xor    esi,esi
c0025111:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025117:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002511e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025122:	75 06                	jne    c002512a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025124:	01 f6                	add    esi,esi
c0025126:	01 f5                	add    ebp,esi
c0025128:	eb bd                	jmp    c00250e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002512a:	51                   	push   ecx
c002512b:	51                   	push   ecx
c002512c:	52                   	push   edx
c002512d:	50                   	push   eax
c002512e:	e8 57 e7 ff ff       	call   c002388a <IDE::getBase(unsigned char)>
c0025133:	89 c2                	mov    edx,eax
c0025135:	66 ed                	in     ax,dx
c0025137:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002513c:	83 c4 10             	add    esp,0x10
c002513f:	46                   	inc    esi
c0025140:	eb cf                	jmp    c0025111 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025142:	51                   	push   ecx
c0025143:	51                   	push   ecx
c0025144:	52                   	push   edx
c0025145:	50                   	push   eax
c0025146:	e8 bf e8 ff ff       	call   c0023a0a <IDE::waitInterrupt(unsigned char)>
c002514b:	83 c4 10             	add    esp,0x10
c002514e:	84 c0                	test   al,al
c0025150:	0f 84 e8 fd ff ff    	je     c0024f3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025156:	bb a0 86 01 00       	mov    ebx,0x186a0
c002515b:	52                   	push   edx
c002515c:	52                   	push   edx
c002515d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025164:	50                   	push   eax
c0025165:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002516b:	e8 06 e7 ff ff       	call   c0023876 <IDE::prepareInterrupt(unsigned char)>
c0025170:	83 c4 10             	add    esp,0x10
c0025173:	50                   	push   eax
c0025174:	50                   	push   eax
c0025175:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002517c:	50                   	push   eax
c002517d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025183:	e8 02 e7 ff ff       	call   c002388a <IDE::getBase(unsigned char)>
c0025188:	8d 50 07             	lea    edx,[eax+0x7]
c002518b:	ec                   	in     al,dx
c002518c:	83 c4 10             	add    esp,0x10
c002518f:	a8 88                	test   al,0x88
c0025191:	74 0a                	je     c002519d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025193:	4b                   	dec    ebx
c0025194:	75 dd                	jne    c0025173 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025196:	bb 02 00 00 00       	mov    ebx,0x2
c002519b:	eb 02                	jmp    c002519f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002519d:	31 db                	xor    ebx,ebx
c002519f:	83 c4 1c             	add    esp,0x1c
c00251a2:	89 d8                	mov    eax,ebx
c00251a4:	5b                   	pop    ebx
c00251a5:	5e                   	pop    esi
c00251a6:	5f                   	pop    edi
c00251a7:	5d                   	pop    ebp
c00251a8:	c3                   	ret    
c00251a9:	90                   	nop

c00251aa <ATAPI::diskRemoved()>:
c00251aa:	83 ec 18             	sub    esp,0x18
c00251ad:	68 a9 d9 02 c0       	push   0xc002d9a9
c00251b2:	e8 1c d7 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00251b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251bb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251c2:	83 c4 1c             	add    esp,0x1c
c00251c5:	c3                   	ret    

c00251c6 <ATAPI::eject()>:
c00251c6:	57                   	push   edi
c00251c7:	b9 03 00 00 00       	mov    ecx,0x3
c00251cc:	53                   	push   ebx
c00251cd:	83 ec 14             	sub    esp,0x14
c00251d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251d8:	fc                   	cld    
c00251d9:	31 c0                	xor    eax,eax
c00251db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251e7:	50                   	push   eax
c00251e8:	50                   	push   eax
c00251e9:	6a 00                	push   0x0
c00251eb:	6a 00                	push   0x0
c00251ed:	6a 00                	push   0x0
c00251ef:	6a 02                	push   0x2
c00251f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251f5:	50                   	push   eax
c00251f6:	53                   	push   ebx
c00251f7:	e8 ee fc ff ff       	call   c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251fc:	83 c4 14             	add    esp,0x14
c00251ff:	53                   	push   ebx
c0025200:	e8 a5 ff ff ff       	call   c00251aa <ATAPI::diskRemoved()>
c0025205:	83 c4 24             	add    esp,0x24
c0025208:	31 c0                	xor    eax,eax
c002520a:	5b                   	pop    ebx
c002520b:	5f                   	pop    edi
c002520c:	c3                   	ret    
c002520d:	90                   	nop

c002520e <ATAPI::diskInserted()>:
c002520e:	53                   	push   ebx
c002520f:	83 ec 14             	sub    esp,0x14
c0025212:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025216:	68 c0 d9 02 c0       	push   0xc002d9c0
c002521b:	e8 b3 d6 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0025220:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002522a:	e8 8b ef fe ff       	call   c00141ba <PhysicalDisk::startCache()>
c002522f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025233:	83 c4 18             	add    esp,0x18
c0025236:	5b                   	pop    ebx
c0025237:	e9 38 12 ff ff       	jmp    c0016474 <createPartitionsForDisk(PhysicalDisk*)>

c002523c <ATAPI::detectMedia()>:
c002523c:	56                   	push   esi
c002523d:	53                   	push   ebx
c002523e:	83 ec 28             	sub    esp,0x28
c0025241:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025245:	6a 0c                	push   0xc
c0025247:	6a 00                	push   0x0
c0025249:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002524d:	56                   	push   esi
c002524e:	e8 fd b4 fd ff       	call   c0000750 <memset>
c0025253:	58                   	pop    eax
c0025254:	5a                   	pop    edx
c0025255:	6a 00                	push   0x0
c0025257:	6a 00                	push   0x0
c0025259:	6a 00                	push   0x0
c002525b:	6a 00                	push   0x0
c002525d:	56                   	push   esi
c002525e:	53                   	push   ebx
c002525f:	e8 86 fc ff ff       	call   c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025264:	83 c4 1c             	add    esp,0x1c
c0025267:	6a 0c                	push   0xc
c0025269:	6a 00                	push   0x0
c002526b:	56                   	push   esi
c002526c:	e8 df b4 fd ff       	call   c0000750 <memset>
c0025271:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025276:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002527b:	59                   	pop    ecx
c002527c:	58                   	pop    eax
c002527d:	6a 01                	push   0x1
c002527f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025283:	50                   	push   eax
c0025284:	6a 00                	push   0x0
c0025286:	6a 12                	push   0x12
c0025288:	56                   	push   esi
c0025289:	53                   	push   ebx
c002528a:	e8 5b fc ff ff       	call   c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002528f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025293:	83 c4 20             	add    esp,0x20
c0025296:	83 e0 7f             	and    eax,0x7f
c0025299:	3c 70                	cmp    al,0x70
c002529b:	74 15                	je     c00252b2 <ATAPI::detectMedia()+0x76>
c002529d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252a4:	75 0c                	jne    c00252b2 <ATAPI::detectMedia()+0x76>
c00252a6:	83 ec 0c             	sub    esp,0xc
c00252a9:	53                   	push   ebx
c00252aa:	e8 5f ff ff ff       	call   c002520e <ATAPI::diskInserted()>
c00252af:	83 c4 10             	add    esp,0x10
c00252b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252b6:	83 e0 0f             	and    eax,0xf
c00252b9:	3c 02                	cmp    al,0x2
c00252bb:	75 1b                	jne    c00252d8 <ATAPI::detectMedia()+0x9c>
c00252bd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252c2:	75 2d                	jne    c00252f1 <ATAPI::detectMedia()+0xb5>
c00252c4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252cb:	74 24                	je     c00252f1 <ATAPI::detectMedia()+0xb5>
c00252cd:	83 ec 0c             	sub    esp,0xc
c00252d0:	53                   	push   ebx
c00252d1:	e8 d4 fe ff ff       	call   c00251aa <ATAPI::diskRemoved()>
c00252d6:	eb 16                	jmp    c00252ee <ATAPI::detectMedia()+0xb2>
c00252d8:	84 c0                	test   al,al
c00252da:	75 15                	jne    c00252f1 <ATAPI::detectMedia()+0xb5>
c00252dc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252e3:	75 0c                	jne    c00252f1 <ATAPI::detectMedia()+0xb5>
c00252e5:	83 ec 0c             	sub    esp,0xc
c00252e8:	53                   	push   ebx
c00252e9:	e8 20 ff ff ff       	call   c002520e <ATAPI::diskInserted()>
c00252ee:	83 c4 10             	add    esp,0x10
c00252f1:	83 c4 24             	add    esp,0x24
c00252f4:	5b                   	pop    ebx
c00252f5:	5e                   	pop    esi
c00252f6:	c3                   	ret    
c00252f7:	90                   	nop

c00252f8 <ATAPI::open(int, int, void*)>:
c00252f8:	53                   	push   ebx
c00252f9:	83 ec 08             	sub    esp,0x8
c00252fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025300:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025308:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002530e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025314:	c1 e0 06             	shl    eax,0x6
c0025317:	01 d0                	add    eax,edx
c0025319:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025320:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025326:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002532d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025337:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002533d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025344:	6a 04                	push   0x4
c0025346:	6a 0c                	push   0xc
c0025348:	51                   	push   ecx
c0025349:	52                   	push   edx
c002534a:	e8 4d e5 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002534f:	90                   	nop
c0025350:	90                   	nop
c0025351:	6a 00                	push   0x0
c0025353:	6a 0c                	push   0xc
c0025355:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002535c:	50                   	push   eax
c002535d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025363:	e8 34 e5 ff ff       	call   c002389c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025368:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002536f:	83 c4 14             	add    esp,0x14
c0025372:	53                   	push   ebx
c0025373:	e8 c4 fe ff ff       	call   c002523c <ATAPI::detectMedia()>
c0025378:	31 c0                	xor    eax,eax
c002537a:	83 c4 18             	add    esp,0x18
c002537d:	5b                   	pop    ebx
c002537e:	c3                   	ret    
c002537f:	90                   	nop

c0025380 <ATAPI::read(unsigned long long, int, void*)>:
c0025380:	55                   	push   ebp
c0025381:	57                   	push   edi
c0025382:	56                   	push   esi
c0025383:	53                   	push   ebx
c0025384:	83 ec 1c             	sub    esp,0x1c
c0025387:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002538b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002538f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025393:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002539a:	74 41                	je     c00253dd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002539c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253a0:	b9 03 00 00 00       	mov    ecx,0x3
c00253a5:	fc                   	cld    
c00253a6:	31 c0                	xor    eax,eax
c00253a8:	86 fb                	xchg   bl,bh
c00253aa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253ac:	c1 c3 10             	rol    ebx,0x10
c00253af:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253b4:	89 e8                	mov    eax,ebp
c00253b6:	86 fb                	xchg   bl,bh
c00253b8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253bc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253c0:	50                   	push   eax
c00253c1:	50                   	push   eax
c00253c2:	55                   	push   ebp
c00253c3:	c1 e5 0b             	shl    ebp,0xb
c00253c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253ca:	6a 00                	push   0x0
c00253cc:	55                   	push   ebp
c00253cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253d1:	50                   	push   eax
c00253d2:	56                   	push   esi
c00253d3:	e8 12 fb ff ff       	call   c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253d8:	83 c4 20             	add    esp,0x20
c00253db:	eb 1a                	jmp    c00253f7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00253dd:	83 ec 0c             	sub    esp,0xc
c00253e0:	56                   	push   esi
c00253e1:	e8 56 fe ff ff       	call   c002523c <ATAPI::detectMedia()>
c00253e6:	83 c4 10             	add    esp,0x10
c00253e9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253f0:	75 aa                	jne    c002539c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00253f2:	b8 02 00 00 00       	mov    eax,0x2
c00253f7:	83 c4 1c             	add    esp,0x1c
c00253fa:	5b                   	pop    ebx
c00253fb:	5e                   	pop    esi
c00253fc:	5f                   	pop    edi
c00253fd:	5d                   	pop    ebp
c00253fe:	c3                   	ret    
c00253ff:	90                   	nop

c0025400 <SATA::close(int, int, void*)>:
c0025400:	83 ec 0c             	sub    esp,0xc
c0025403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025407:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002540d:	85 c0                	test   eax,eax
c002540f:	74 0c                	je     c002541d <SATA::close(int, int, void*)+0x1d>
c0025411:	83 ec 0c             	sub    esp,0xc
c0025414:	8b 10                	mov    edx,DWORD PTR [eax]
c0025416:	50                   	push   eax
c0025417:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002541a:	83 c4 10             	add    esp,0x10
c002541d:	31 c0                	xor    eax,eax
c002541f:	83 c4 0c             	add    esp,0xc
c0025422:	c3                   	ret    
c0025423:	90                   	nop

c0025424 <SATA::powerSaving(PowerSavingLevel)>:
c0025424:	c3                   	ret    
c0025425:	90                   	nop

c0025426 <SATA::open(int, int, void*)>:
c0025426:	56                   	push   esi
c0025427:	53                   	push   ebx
c0025428:	50                   	push   eax
c0025429:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002542d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025431:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002543b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025441:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002544b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002544f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025459:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002545f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025466:	e8 29 a7 fe ff       	call   c000fb94 <Phys::allocatePage()>
c002546b:	89 c6                	mov    esi,eax
c002546d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025473:	81 c6 00 10 00 00    	add    esi,0x1000
c0025479:	e8 16 a7 fe ff       	call   c000fb94 <Phys::allocatePage()>
c002547e:	39 c6                	cmp    esi,eax
c0025480:	74 10                	je     c0025492 <SATA::open(int, int, void*)+0x6c>
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	68 e8 d8 02 c0       	push   0xc002d8e8
c002548a:	e8 7a 4e ff ff       	call   c001a309 <Krnl::panic(char const*)>
c002548f:	83 c4 10             	add    esp,0x10
c0025492:	83 ec 0c             	sub    esp,0xc
c0025495:	6a 02                	push   0x2
c0025497:	e8 31 c0 fe ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c002549c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254a2:	6a 03                	push   0x3
c00254a4:	50                   	push   eax
c00254a5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254ab:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c00254b1:	e8 4e c8 fe ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254b6:	83 c4 14             	add    esp,0x14
c00254b9:	53                   	push   ebx
c00254ba:	e8 fb ec fe ff       	call   c00141ba <PhysicalDisk::startCache()>
c00254bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254c2:	e8 ad 0f ff ff       	call   c0016474 <createPartitionsForDisk(PhysicalDisk*)>
c00254c7:	83 c4 14             	add    esp,0x14
c00254ca:	31 c0                	xor    eax,eax
c00254cc:	5b                   	pop    ebx
c00254cd:	5e                   	pop    esi
c00254ce:	c3                   	ret    
c00254cf:	90                   	nop

c00254d0 <SATA::SATA()>:
c00254d0:	83 ec 0c             	sub    esp,0xc
c00254d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d7:	83 ec 04             	sub    esp,0x4
c00254da:	68 00 02 00 00       	push   0x200
c00254df:	68 fc d8 02 c0       	push   0xc002d8fc
c00254e4:	50                   	push   eax
c00254e5:	e8 68 ec fe ff       	call   c0014152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00254ea:	83 c4 10             	add    esp,0x10
c00254ed:	ba 6c d9 02 c0       	mov    edx,0xc002d96c
c00254f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f6:	89 10                	mov    DWORD PTR [eax],edx
c00254f8:	90                   	nop
c00254f9:	83 c4 0c             	add    esp,0xc
c00254fc:	c3                   	ret    
c00254fd:	90                   	nop

c00254fe <SATA::access(unsigned long long, int, void*, bool)>:
c00254fe:	55                   	push   ebp
c00254ff:	57                   	push   edi
c0025500:	56                   	push   esi
c0025501:	53                   	push   ebx
c0025502:	83 ec 2c             	sub    esp,0x2c
c0025505:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025509:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002550d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025511:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025515:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025519:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002551e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025522:	7e 10                	jle    c0025534 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025524:	83 ec 0c             	sub    esp,0xc
c0025527:	68 0c d9 02 c0       	push   0xc002d90c
c002552c:	e8 d8 4d ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0025531:	83 c4 10             	add    esp,0x10
c0025534:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002553a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025540:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002554a:	89 d0                	mov    eax,edx
c002554c:	c1 e0 07             	shl    eax,0x7
c002554f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025553:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002555d:	51                   	push   ecx
c002555e:	8d 42 02             	lea    eax,[edx+0x2]
c0025561:	51                   	push   ecx
c0025562:	c1 e0 07             	shl    eax,0x7
c0025565:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025569:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002556d:	50                   	push   eax
c002556e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025574:	e8 e7 ef ff ff       	call   c0024560 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025579:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002557d:	83 c4 10             	add    esp,0x10
c0025580:	b8 01 00 00 00       	mov    eax,0x1
c0025585:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002558a:	0f 84 cb 01 00 00    	je     c002575b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025590:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025594:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025598:	c1 e0 09             	shl    eax,0x9
c002559b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00255a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00255a4:	74 0e                	je     c00255b4 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00255a6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00255ac:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00255b0:	89 c1                	mov    ecx,eax
c00255b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255b8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255be:	8d 42 02             	lea    eax,[edx+0x2]
c00255c1:	c1 e0 07             	shl    eax,0x7
c00255c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ca:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255d0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00255da:	c1 e1 05             	shl    ecx,0x5
c00255dd:	01 c8                	add    eax,ecx
c00255df:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00255e3:	83 e1 01             	and    ecx,0x1
c00255e6:	89 ce                	mov    esi,ecx
c00255e8:	8a 08                	mov    cl,BYTE PTR [eax]
c00255ea:	c1 e6 06             	shl    esi,0x6
c00255ed:	83 e1 bf             	and    ecx,0xffffffbf
c00255f0:	09 f1                	or     ecx,esi
c00255f2:	88 08                	mov    BYTE PTR [eax],cl
c00255f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00255f6:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00255fc:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025602:	89 08                	mov    DWORD PTR [eax],ecx
c0025604:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002560a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025610:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025616:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025619:	50                   	push   eax
c002561a:	68 90 00 00 00       	push   0x90
c002561f:	6a 00                	push   0x0
c0025621:	56                   	push   esi
c0025622:	e8 29 b1 fd ff       	call   c0000750 <memset>
c0025627:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002562d:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025631:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025637:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002563b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002563f:	83 c4 10             	add    esp,0x10
c0025642:	48                   	dec    eax
c0025643:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025648:	89 c1                	mov    ecx,eax
c002564a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025650:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025655:	09 c8                	or     eax,ecx
c0025657:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002565d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025660:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025667:	66 25 00 7f          	and    ax,0x7f00
c002566b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002566f:	66 0d 27 80          	or     ax,0x8027
c0025673:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025678:	66 89 06             	mov    WORD PTR [esi],ax
c002567b:	19 c0                	sbb    eax,eax
c002567d:	83 e0 f0             	and    eax,0xfffffff0
c0025680:	83 c0 35             	add    eax,0x35
c0025683:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025686:	89 e8                	mov    eax,ebp
c0025688:	c1 e8 10             	shr    eax,0x10
c002568b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002568e:	89 e8                	mov    eax,ebp
c0025690:	c1 e8 18             	shr    eax,0x18
c0025693:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025696:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002569a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002569d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256a1:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00256a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256a8:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00256ac:	89 d6                	mov    esi,edx
c00256ae:	31 c0                	xor    eax,eax
c00256b0:	c1 e6 07             	shl    esi,0x7
c00256b3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00256b7:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00256bd:	80 e1 88             	and    cl,0x88
c00256c0:	74 0a                	je     c00256cc <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00256c2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256c7:	74 0a                	je     c00256d3 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00256c9:	40                   	inc    eax
c00256ca:	eb eb                	jmp    c00256b7 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00256cc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256d1:	75 0a                	jne    c00256dd <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00256d3:	83 ec 0c             	sub    esp,0xc
c00256d6:	68 45 d9 02 c0       	push   0xc002d945
c00256db:	eb 56                	jmp    c0025733 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00256dd:	b8 01 00 00 00       	mov    eax,0x1
c00256e2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00256e6:	c1 e2 07             	shl    edx,0x7
c00256e9:	d3 e0                	shl    eax,cl
c00256eb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00256ef:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00256f5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00256fb:	85 c8                	test   eax,ecx
c00256fd:	74 20                	je     c002571f <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00256ff:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025705:	0f ba e1 1e          	bt     ecx,0x1e
c0025709:	73 ea                	jae    c00256f5 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002570b:	83 ec 0c             	sub    esp,0xc
c002570e:	68 53 d9 02 c0       	push   0xc002d953
c0025713:	e8 f1 4b ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0025718:	83 c4 10             	add    esp,0x10
c002571b:	31 c0                	xor    eax,eax
c002571d:	eb 3c                	jmp    c002575b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002571f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025725:	0f ba e0 1e          	bt     eax,0x1e
c0025729:	73 17                	jae    c0025742 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002572b:	83 ec 0c             	sub    esp,0xc
c002572e:	68 53 d9 02 c0       	push   0xc002d953
c0025733:	e8 d1 4b ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0025738:	83 c4 10             	add    esp,0x10
c002573b:	b8 01 00 00 00       	mov    eax,0x1
c0025740:	eb 19                	jmp    c002575b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025742:	31 c0                	xor    eax,eax
c0025744:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025749:	75 10                	jne    c002575b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002574b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025751:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025755:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002575b:	83 c4 2c             	add    esp,0x2c
c002575e:	5b                   	pop    ebx
c002575f:	5e                   	pop    esi
c0025760:	5f                   	pop    edi
c0025761:	5d                   	pop    ebp
c0025762:	c3                   	ret    
c0025763:	90                   	nop

c0025764 <SATA::read(unsigned long long, int, void*)>:
c0025764:	57                   	push   edi
c0025765:	b8 04 00 00 00       	mov    eax,0x4
c002576a:	56                   	push   esi
c002576b:	53                   	push   ebx
c002576c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025770:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025774:	8d 7a ff             	lea    edi,[edx-0x1]
c0025777:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002577b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002577f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025785:	77 25                	ja     c00257ac <SATA::read(unsigned long long, int, void*)+0x48>
c0025787:	b8 06 00 00 00       	mov    eax,0x6
c002578c:	85 f6                	test   esi,esi
c002578e:	74 1c                	je     c00257ac <SATA::read(unsigned long long, int, void*)+0x48>
c0025790:	50                   	push   eax
c0025791:	50                   	push   eax
c0025792:	6a 00                	push   0x0
c0025794:	56                   	push   esi
c0025795:	52                   	push   edx
c0025796:	53                   	push   ebx
c0025797:	51                   	push   ecx
c0025798:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002579c:	e8 5d fd ff ff       	call   c00254fe <SATA::access(unsigned long long, int, void*, bool)>
c00257a1:	83 c4 20             	add    esp,0x20
c00257a4:	85 c0                	test   eax,eax
c00257a6:	0f 95 c0             	setne  al
c00257a9:	0f b6 c0             	movzx  eax,al
c00257ac:	5b                   	pop    ebx
c00257ad:	5e                   	pop    esi
c00257ae:	5f                   	pop    edi
c00257af:	c3                   	ret    

c00257b0 <SATA::write(unsigned long long, int, void*)>:
c00257b0:	55                   	push   ebp
c00257b1:	b8 04 00 00 00       	mov    eax,0x4
c00257b6:	57                   	push   edi
c00257b7:	56                   	push   esi
c00257b8:	53                   	push   ebx
c00257b9:	83 ec 0c             	sub    esp,0xc
c00257bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257c0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00257c4:	8d 73 ff             	lea    esi,[ebx-0x1]
c00257c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257cf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00257d5:	77 3d                	ja     c0025814 <SATA::write(unsigned long long, int, void*)+0x64>
c00257d7:	b8 06 00 00 00       	mov    eax,0x6
c00257dc:	85 ed                	test   ebp,ebp
c00257de:	74 34                	je     c0025814 <SATA::write(unsigned long long, int, void*)+0x64>
c00257e0:	c1 e3 09             	shl    ebx,0x9
c00257e3:	01 eb                	add    ebx,ebp
c00257e5:	89 d6                	mov    esi,edx
c00257e7:	89 cf                	mov    edi,ecx
c00257e9:	83 c6 01             	add    esi,0x1
c00257ec:	83 d7 00             	adc    edi,0x0
c00257ef:	50                   	push   eax
c00257f0:	50                   	push   eax
c00257f1:	6a 01                	push   0x1
c00257f3:	55                   	push   ebp
c00257f4:	81 c5 00 02 00 00    	add    ebp,0x200
c00257fa:	6a 01                	push   0x1
c00257fc:	51                   	push   ecx
c00257fd:	52                   	push   edx
c00257fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025802:	e8 f7 fc ff ff       	call   c00254fe <SATA::access(unsigned long long, int, void*, bool)>
c0025807:	83 c4 20             	add    esp,0x20
c002580a:	89 f2                	mov    edx,esi
c002580c:	89 f9                	mov    ecx,edi
c002580e:	39 dd                	cmp    ebp,ebx
c0025810:	75 d3                	jne    c00257e5 <SATA::write(unsigned long long, int, void*)+0x35>
c0025812:	31 c0                	xor    eax,eax
c0025814:	83 c4 0c             	add    esp,0xc
c0025817:	5b                   	pop    ebx
c0025818:	5e                   	pop    esi
c0025819:	5f                   	pop    edi
c002581a:	5d                   	pop    ebp
c002581b:	c3                   	ret    

c002581c <SATAPI::write(unsigned long long, int, void*)>:
c002581c:	b8 03 00 00 00       	mov    eax,0x3
c0025821:	c3                   	ret    

c0025822 <SATAPI::close(int, int, void*)>:
c0025822:	83 ec 0c             	sub    esp,0xc
c0025825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025829:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002582f:	85 c0                	test   eax,eax
c0025831:	74 0c                	je     c002583f <SATAPI::close(int, int, void*)+0x1d>
c0025833:	83 ec 0c             	sub    esp,0xc
c0025836:	8b 10                	mov    edx,DWORD PTR [eax]
c0025838:	50                   	push   eax
c0025839:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002583c:	83 c4 10             	add    esp,0x10
c002583f:	31 c0                	xor    eax,eax
c0025841:	83 c4 0c             	add    esp,0xc
c0025844:	c3                   	ret    
c0025845:	90                   	nop

c0025846 <SATAPI::SATAPI()>:
c0025846:	83 ec 0c             	sub    esp,0xc
c0025849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584d:	83 ec 04             	sub    esp,0x4
c0025850:	68 00 08 00 00       	push   0x800
c0025855:	68 9c d9 02 c0       	push   0xc002d99c
c002585a:	50                   	push   eax
c002585b:	e8 f2 e8 fe ff       	call   c0014152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025860:	83 c4 10             	add    esp,0x10
c0025863:	ba 48 da 02 c0       	mov    edx,0xc002da48
c0025868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002586c:	89 10                	mov    DWORD PTR [eax],edx
c002586e:	90                   	nop
c002586f:	83 c4 0c             	add    esp,0xc
c0025872:	c3                   	ret    
c0025873:	90                   	nop

c0025874 <SATAPI::diskRemoved()>:
c0025874:	83 ec 18             	sub    esp,0x18
c0025877:	68 a8 d9 02 c0       	push   0xc002d9a8
c002587c:	e8 52 d0 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0025881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025885:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002588c:	83 c4 1c             	add    esp,0x1c
c002588f:	c3                   	ret    

c0025890 <SATAPI::diskInserted()>:
c0025890:	53                   	push   ebx
c0025891:	83 ec 14             	sub    esp,0x14
c0025894:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025898:	68 bf d9 02 c0       	push   0xc002d9bf
c002589d:	e8 31 d0 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00258a2:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00258a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258ac:	e8 09 e9 fe ff       	call   c00141ba <PhysicalDisk::startCache()>
c00258b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00258b5:	83 c4 18             	add    esp,0x18
c00258b8:	5b                   	pop    ebx
c00258b9:	e9 b6 0b ff ff       	jmp    c0016474 <createPartitionsForDisk(PhysicalDisk*)>

c00258be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258be:	55                   	push   ebp
c00258bf:	57                   	push   edi
c00258c0:	56                   	push   esi
c00258c1:	53                   	push   ebx
c00258c2:	83 ec 34             	sub    esp,0x34
c00258c5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00258c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00258cd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00258d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258d5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258d9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00258df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258e9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00258ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258f3:	c1 e0 07             	shl    eax,0x7
c00258f6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00258fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258fe:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002590c:	8d 58 02             	lea    ebx,[eax+0x2]
c002590f:	c1 e3 07             	shl    ebx,0x7
c0025912:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025916:	53                   	push   ebx
c0025917:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002591d:	e8 3e ec ff ff       	call   c0024560 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025922:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025926:	83 c4 10             	add    esp,0x10
c0025929:	b8 01 00 00 00       	mov    eax,0x1
c002592e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025933:	0f 84 85 01 00 00    	je     c0025abe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025939:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002593f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025941:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025947:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002594d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025951:	c1 e1 05             	shl    ecx,0x5
c0025954:	01 c8                	add    eax,ecx
c0025956:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025958:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002595e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025964:	89 08                	mov    DWORD PTR [eax],ecx
c0025966:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002596c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025972:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025978:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002597b:	8d 7b 40             	lea    edi,[ebx+0x40]
c002597e:	50                   	push   eax
c002597f:	68 90 00 00 00       	push   0x90
c0025984:	6a 00                	push   0x0
c0025986:	53                   	push   ebx
c0025987:	e8 c4 ad fd ff       	call   c0000750 <memset>
c002598c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025990:	b9 0c 00 00 00       	mov    ecx,0xc
c0025995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025997:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c002599d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00259a1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00259a7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00259ab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259af:	48                   	dec    eax
c00259b0:	25 ff ff 3f 00       	and    eax,0x3fffff
c00259b5:	89 c1                	mov    ecx,eax
c00259b7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00259bd:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259c2:	09 c8                	or     eax,ecx
c00259c4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259ca:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259cd:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259d4:	66 25 00 7f          	and    ax,0x7f00
c00259d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00259dc:	66 0d 27 80          	or     ax,0x8027
c00259e0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00259e4:	66 89 03             	mov    WORD PTR [ebx],ax
c00259e7:	89 d0                	mov    eax,edx
c00259e9:	c1 ea 18             	shr    edx,0x18
c00259ec:	c1 e8 10             	shr    eax,0x10
c00259ef:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00259f2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259f5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00259f9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025a00:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025a03:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025a07:	83 c4 10             	add    esp,0x10
c0025a0a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a0e:	31 c0                	xor    eax,eax
c0025a10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025a14:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025a1a:	80 e2 88             	and    dl,0x88
c0025a1d:	74 0a                	je     c0025a29 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a1f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a24:	74 0a                	je     c0025a30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025a26:	40                   	inc    eax
c0025a27:	eb eb                	jmp    c0025a14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025a29:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a2e:	75 0f                	jne    c0025a3f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025a30:	83 ec 0c             	sub    esp,0xc
c0025a33:	68 45 d9 02 c0       	push   0xc002d945
c0025a38:	e8 cc 48 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0025a3d:	eb 3f                	jmp    c0025a7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a3f:	ba 01 00 00 00       	mov    edx,0x1
c0025a44:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a4c:	d3 e2                	shl    edx,cl
c0025a4e:	c1 e0 07             	shl    eax,0x7
c0025a51:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a57:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a5b:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a61:	85 ca                	test   edx,ecx
c0025a63:	74 23                	je     c0025a88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a65:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a6b:	0f ba e1 1e          	bt     ecx,0x1e
c0025a6f:	73 ea                	jae    c0025a5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a71:	83 ec 0c             	sub    esp,0xc
c0025a74:	68 d7 d9 02 c0       	push   0xc002d9d7
c0025a79:	e8 55 ce fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0025a7e:	83 c4 10             	add    esp,0x10
c0025a81:	b8 01 00 00 00       	mov    eax,0x1
c0025a86:	eb 36                	jmp    c0025abe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a88:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025a8e:	0f ba e0 1e          	bt     eax,0x1e
c0025a92:	73 0a                	jae    c0025a9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025a94:	83 ec 0c             	sub    esp,0xc
c0025a97:	68 ea d9 02 c0       	push   0xc002d9ea
c0025a9c:	eb db                	jmp    c0025a79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025a9e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025aa3:	74 17                	je     c0025abc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025aa5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025aaa:	74 10                	je     c0025abc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025aac:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025ab2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ab6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025aba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025abc:	31 c0                	xor    eax,eax
c0025abe:	83 c4 2c             	add    esp,0x2c
c0025ac1:	5b                   	pop    ebx
c0025ac2:	5e                   	pop    esi
c0025ac3:	5f                   	pop    edi
c0025ac4:	5d                   	pop    ebp
c0025ac5:	c3                   	ret    

c0025ac6 <SATAPI::eject()>:
c0025ac6:	57                   	push   edi
c0025ac7:	b9 03 00 00 00       	mov    ecx,0x3
c0025acc:	53                   	push   ebx
c0025acd:	83 ec 14             	sub    esp,0x14
c0025ad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025ad4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ad8:	fc                   	cld    
c0025ad9:	31 c0                	xor    eax,eax
c0025adb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025add:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ae2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025ae7:	50                   	push   eax
c0025ae8:	6a 00                	push   0x0
c0025aea:	6a 00                	push   0x0
c0025aec:	6a 00                	push   0x0
c0025aee:	6a 00                	push   0x0
c0025af0:	6a 02                	push   0x2
c0025af2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025af6:	50                   	push   eax
c0025af7:	53                   	push   ebx
c0025af8:	e8 c1 fd ff ff       	call   c00258be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025afd:	83 c4 14             	add    esp,0x14
c0025b00:	53                   	push   ebx
c0025b01:	e8 6e fd ff ff       	call   c0025874 <SATAPI::diskRemoved()>
c0025b06:	83 c4 24             	add    esp,0x24
c0025b09:	31 c0                	xor    eax,eax
c0025b0b:	5b                   	pop    ebx
c0025b0c:	5f                   	pop    edi
c0025b0d:	c3                   	ret    

c0025b0e <SATAPI::detectMedia()>:
c0025b0e:	56                   	push   esi
c0025b0f:	53                   	push   ebx
c0025b10:	83 ec 28             	sub    esp,0x28
c0025b13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b17:	6a 0c                	push   0xc
c0025b19:	6a 00                	push   0x0
c0025b1b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b1f:	56                   	push   esi
c0025b20:	e8 2b ac fd ff       	call   c0000750 <memset>
c0025b25:	83 c4 0c             	add    esp,0xc
c0025b28:	6a 00                	push   0x0
c0025b2a:	6a 00                	push   0x0
c0025b2c:	6a 00                	push   0x0
c0025b2e:	6a 00                	push   0x0
c0025b30:	6a 00                	push   0x0
c0025b32:	56                   	push   esi
c0025b33:	53                   	push   ebx
c0025b34:	e8 85 fd ff ff       	call   c00258be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b39:	83 c4 1c             	add    esp,0x1c
c0025b3c:	6a 0c                	push   0xc
c0025b3e:	6a 00                	push   0x0
c0025b40:	56                   	push   esi
c0025b41:	e8 0a ac fd ff       	call   c0000750 <memset>
c0025b46:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b4b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b50:	83 c4 0c             	add    esp,0xc
c0025b53:	6a 01                	push   0x1
c0025b55:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b59:	50                   	push   eax
c0025b5a:	6a 00                	push   0x0
c0025b5c:	6a 00                	push   0x0
c0025b5e:	6a 12                	push   0x12
c0025b60:	56                   	push   esi
c0025b61:	53                   	push   ebx
c0025b62:	e8 57 fd ff ff       	call   c00258be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b67:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b6b:	83 c4 20             	add    esp,0x20
c0025b6e:	83 e0 7f             	and    eax,0x7f
c0025b71:	3c 70                	cmp    al,0x70
c0025b73:	74 15                	je     c0025b8a <SATAPI::detectMedia()+0x7c>
c0025b75:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b7c:	75 0c                	jne    c0025b8a <SATAPI::detectMedia()+0x7c>
c0025b7e:	83 ec 0c             	sub    esp,0xc
c0025b81:	53                   	push   ebx
c0025b82:	e8 09 fd ff ff       	call   c0025890 <SATAPI::diskInserted()>
c0025b87:	83 c4 10             	add    esp,0x10
c0025b8a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b8e:	83 e0 0f             	and    eax,0xf
c0025b91:	3c 02                	cmp    al,0x2
c0025b93:	75 1b                	jne    c0025bb0 <SATAPI::detectMedia()+0xa2>
c0025b95:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b9a:	75 2d                	jne    c0025bc9 <SATAPI::detectMedia()+0xbb>
c0025b9c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025ba3:	74 24                	je     c0025bc9 <SATAPI::detectMedia()+0xbb>
c0025ba5:	83 ec 0c             	sub    esp,0xc
c0025ba8:	53                   	push   ebx
c0025ba9:	e8 c6 fc ff ff       	call   c0025874 <SATAPI::diskRemoved()>
c0025bae:	eb 16                	jmp    c0025bc6 <SATAPI::detectMedia()+0xb8>
c0025bb0:	84 c0                	test   al,al
c0025bb2:	75 15                	jne    c0025bc9 <SATAPI::detectMedia()+0xbb>
c0025bb4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bbb:	75 0c                	jne    c0025bc9 <SATAPI::detectMedia()+0xbb>
c0025bbd:	83 ec 0c             	sub    esp,0xc
c0025bc0:	53                   	push   ebx
c0025bc1:	e8 ca fc ff ff       	call   c0025890 <SATAPI::diskInserted()>
c0025bc6:	83 c4 10             	add    esp,0x10
c0025bc9:	83 c4 24             	add    esp,0x24
c0025bcc:	5b                   	pop    ebx
c0025bcd:	5e                   	pop    esi
c0025bce:	c3                   	ret    
c0025bcf:	90                   	nop

c0025bd0 <SATAPI::open(int, int, void*)>:
c0025bd0:	56                   	push   esi
c0025bd1:	53                   	push   ebx
c0025bd2:	50                   	push   eax
c0025bd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bdb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025be5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025beb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025bf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bf9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025c03:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025c09:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c10:	e8 7f 9f fe ff       	call   c000fb94 <Phys::allocatePage()>
c0025c15:	89 c6                	mov    esi,eax
c0025c17:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c1d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c23:	e8 6c 9f fe ff       	call   c000fb94 <Phys::allocatePage()>
c0025c28:	39 c6                	cmp    esi,eax
c0025c2a:	74 10                	je     c0025c3c <SATAPI::open(int, int, void*)+0x6c>
c0025c2c:	83 ec 0c             	sub    esp,0xc
c0025c2f:	68 ff d9 02 c0       	push   0xc002d9ff
c0025c34:	e8 d0 46 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0025c39:	83 c4 10             	add    esp,0x10
c0025c3c:	83 ec 0c             	sub    esp,0xc
c0025c3f:	6a 02                	push   0x2
c0025c41:	e8 87 b8 fe ff       	call   c00114cd <Virt::allocateKernelVirtualPages(int)>
c0025c46:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c4c:	6a 03                	push   0x3
c0025c4e:	50                   	push   eax
c0025c4f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c55:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c0025c5b:	e8 a4 c0 fe ff       	call   c0011d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c60:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c67:	83 c4 14             	add    esp,0x14
c0025c6a:	53                   	push   ebx
c0025c6b:	e8 9e fe ff ff       	call   c0025b0e <SATAPI::detectMedia()>
c0025c70:	83 c4 14             	add    esp,0x14
c0025c73:	31 c0                	xor    eax,eax
c0025c75:	5b                   	pop    ebx
c0025c76:	5e                   	pop    esi
c0025c77:	c3                   	ret    

c0025c78 <SATAPI::read(unsigned long long, int, void*)>:
c0025c78:	55                   	push   ebp
c0025c79:	57                   	push   edi
c0025c7a:	56                   	push   esi
c0025c7b:	53                   	push   ebx
c0025c7c:	83 ec 1c             	sub    esp,0x1c
c0025c7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c8b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c92:	74 19                	je     c0025cad <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c94:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c99:	7e 2e                	jle    c0025cc9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c9b:	83 ec 0c             	sub    esp,0xc
c0025c9e:	68 15 da 02 c0       	push   0xc002da15
c0025ca3:	e8 61 46 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0025ca8:	83 c4 10             	add    esp,0x10
c0025cab:	eb 1c                	jmp    c0025cc9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025cad:	83 ec 0c             	sub    esp,0xc
c0025cb0:	55                   	push   ebp
c0025cb1:	e8 58 fe ff ff       	call   c0025b0e <SATAPI::detectMedia()>
c0025cb6:	83 c4 10             	add    esp,0x10
c0025cb9:	b8 02 00 00 00       	mov    eax,0x2
c0025cbe:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cc5:	75 cd                	jne    c0025c94 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025cc7:	eb 49                	jmp    c0025d12 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025cc9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ccd:	b9 03 00 00 00       	mov    ecx,0x3
c0025cd2:	fc                   	cld    
c0025cd3:	31 c0                	xor    eax,eax
c0025cd5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025cd7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025cdc:	89 d8                	mov    eax,ebx
c0025cde:	86 e0                	xchg   al,ah
c0025ce0:	c1 c0 10             	rol    eax,0x10
c0025ce3:	86 e0                	xchg   al,ah
c0025ce5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025ce9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025ced:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025cf1:	50                   	push   eax
c0025cf2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025cf6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cfa:	56                   	push   esi
c0025cfb:	53                   	push   ebx
c0025cfc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025d00:	c1 e0 0b             	shl    eax,0xb
c0025d03:	50                   	push   eax
c0025d04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d08:	50                   	push   eax
c0025d09:	55                   	push   ebp
c0025d0a:	e8 af fb ff ff       	call   c00258be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d0f:	83 c4 20             	add    esp,0x20
c0025d12:	83 c4 1c             	add    esp,0x1c
c0025d15:	5b                   	pop    ebx
c0025d16:	5e                   	pop    esi
c0025d17:	5f                   	pop    edi
c0025d18:	5d                   	pop    ebp
c0025d19:	c3                   	ret    

c0025d1a <AVX::open(int, int, void*)>:
c0025d1a:	83 ec 0c             	sub    esp,0xc
c0025d1d:	e8 46 11 00 00       	call   c0026e68 <avxInit>
c0025d22:	b8 00 00 00 00       	mov    eax,0x0
c0025d27:	83 c4 0c             	add    esp,0xc
c0025d2a:	c3                   	ret    
c0025d2b:	90                   	nop

c0025d2c <AVX::close(int, int, void*)>:
c0025d2c:	83 ec 0c             	sub    esp,0xc
c0025d2f:	e8 35 11 00 00       	call   c0026e69 <avxClose>
c0025d34:	b8 00 00 00 00       	mov    eax,0x0
c0025d39:	83 c4 0c             	add    esp,0xc
c0025d3c:	c3                   	ret    
c0025d3d:	90                   	nop

c0025d3e <AVX::available()>:
c0025d3e:	83 ec 0c             	sub    esp,0xc
c0025d41:	e8 1a 11 00 00       	call   c0026e60 <avxDetect>
c0025d46:	85 c0                	test   eax,eax
c0025d48:	0f 95 c0             	setne  al
c0025d4b:	83 c4 0c             	add    esp,0xc
c0025d4e:	c3                   	ret    
c0025d4f:	90                   	nop

c0025d50 <AVX::save(void*)>:
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d57:	83 ec 0c             	sub    esp,0xc
c0025d5a:	50                   	push   eax
c0025d5b:	e8 06 11 00 00       	call   c0026e66 <avxSave>
c0025d60:	83 c4 10             	add    esp,0x10
c0025d63:	90                   	nop
c0025d64:	83 c4 0c             	add    esp,0xc
c0025d67:	c3                   	ret    

c0025d68 <AVX::load(void*)>:
c0025d68:	83 ec 0c             	sub    esp,0xc
c0025d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d6f:	83 ec 0c             	sub    esp,0xc
c0025d72:	50                   	push   eax
c0025d73:	e8 ef 10 00 00       	call   c0026e67 <avxLoad>
c0025d78:	83 c4 10             	add    esp,0x10
c0025d7b:	90                   	nop
c0025d7c:	83 c4 0c             	add    esp,0xc
c0025d7f:	c3                   	ret    

c0025d80 <AVX::AVX()>:
c0025d80:	83 ec 0c             	sub    esp,0xc
c0025d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d87:	83 ec 08             	sub    esp,0x8
c0025d8a:	68 78 da 02 c0       	push   0xc002da78
c0025d8f:	50                   	push   eax
c0025d90:	e8 9b e4 fe ff       	call   c0014230 <FPU::FPU(char const*)>
c0025d95:	83 c4 10             	add    esp,0x10
c0025d98:	ba 88 da 02 c0       	mov    edx,0xc002da88
c0025d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da1:	89 10                	mov    DWORD PTR [eax],edx
c0025da3:	90                   	nop
c0025da4:	83 c4 0c             	add    esp,0xc
c0025da7:	c3                   	ret    

c0025da8 <MMX::available()>:
c0025da8:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0025dad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025db3:	83 e0 20             	and    eax,0x20
c0025db6:	84 c0                	test   al,al
c0025db8:	0f 95 c0             	setne  al
c0025dbb:	c3                   	ret    

c0025dbc <MMX::open(int, int, void*)>:
c0025dbc:	83 ec 0c             	sub    esp,0xc
c0025dbf:	e8 2e 11 00 00       	call   c0026ef2 <x87Init>
c0025dc4:	b8 00 00 00 00       	mov    eax,0x0
c0025dc9:	83 c4 0c             	add    esp,0xc
c0025dcc:	c3                   	ret    
c0025dcd:	90                   	nop

c0025dce <MMX::close(int, int, void*)>:
c0025dce:	83 ec 0c             	sub    esp,0xc
c0025dd1:	e8 36 11 00 00       	call   c0026f0c <x87Close>
c0025dd6:	b8 00 00 00 00       	mov    eax,0x0
c0025ddb:	83 c4 0c             	add    esp,0xc
c0025dde:	c3                   	ret    
c0025ddf:	90                   	nop

c0025de0 <MMX::save(void*)>:
c0025de0:	83 ec 0c             	sub    esp,0xc
c0025de3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025de7:	83 ec 0c             	sub    esp,0xc
c0025dea:	50                   	push   eax
c0025deb:	e8 f1 10 00 00       	call   c0026ee1 <x87Save>
c0025df0:	83 c4 10             	add    esp,0x10
c0025df3:	90                   	nop
c0025df4:	83 c4 0c             	add    esp,0xc
c0025df7:	c3                   	ret    

c0025df8 <MMX::load(void*)>:
c0025df8:	83 ec 0c             	sub    esp,0xc
c0025dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dff:	83 ec 0c             	sub    esp,0xc
c0025e02:	50                   	push   eax
c0025e03:	e8 e2 10 00 00       	call   c0026eea <x87Load>
c0025e08:	83 c4 10             	add    esp,0x10
c0025e0b:	90                   	nop
c0025e0c:	83 c4 0c             	add    esp,0xc
c0025e0f:	c3                   	ret    

c0025e10 <MMX::MMX()>:
c0025e10:	83 ec 0c             	sub    esp,0xc
c0025e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e17:	83 ec 08             	sub    esp,0x8
c0025e1a:	68 b8 da 02 c0       	push   0xc002dab8
c0025e1f:	50                   	push   eax
c0025e20:	e8 0b e4 fe ff       	call   c0014230 <FPU::FPU(char const*)>
c0025e25:	83 c4 10             	add    esp,0x10
c0025e28:	ba c8 da 02 c0       	mov    edx,0xc002dac8
c0025e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e31:	89 10                	mov    DWORD PTR [eax],edx
c0025e33:	90                   	nop
c0025e34:	83 c4 0c             	add    esp,0xc
c0025e37:	c3                   	ret    

c0025e38 <SSE::open(int, int, void*)>:
c0025e38:	83 ec 0c             	sub    esp,0xc
c0025e3b:	e8 64 10 00 00       	call   c0026ea4 <sseInit>
c0025e40:	b8 00 00 00 00       	mov    eax,0x0
c0025e45:	83 c4 0c             	add    esp,0xc
c0025e48:	c3                   	ret    
c0025e49:	90                   	nop

c0025e4a <SSE::close(int, int, void*)>:
c0025e4a:	83 ec 0c             	sub    esp,0xc
c0025e4d:	e8 62 10 00 00       	call   c0026eb4 <sseClose>
c0025e52:	b8 00 00 00 00       	mov    eax,0x0
c0025e57:	83 c4 0c             	add    esp,0xc
c0025e5a:	c3                   	ret    
c0025e5b:	90                   	nop

c0025e5c <SSE::available()>:
c0025e5c:	83 ec 1c             	sub    esp,0x1c
c0025e5f:	e8 1c 10 00 00       	call   c0026e80 <absolutelyNoChanceInHell>
c0025e64:	85 c0                	test   eax,eax
c0025e66:	0f 95 c0             	setne  al
c0025e69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e6d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e71:	83 c4 1c             	add    esp,0x1c
c0025e74:	c3                   	ret    
c0025e75:	90                   	nop

c0025e76 <SSE::save(void*)>:
c0025e76:	83 ec 0c             	sub    esp,0xc
c0025e79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e7d:	83 ec 0c             	sub    esp,0xc
c0025e80:	50                   	push   eax
c0025e81:	e8 12 10 00 00       	call   c0026e98 <sseSave>
c0025e86:	83 c4 10             	add    esp,0x10
c0025e89:	90                   	nop
c0025e8a:	83 c4 0c             	add    esp,0xc
c0025e8d:	c3                   	ret    

c0025e8e <SSE::load(void*)>:
c0025e8e:	83 ec 0c             	sub    esp,0xc
c0025e91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e95:	83 ec 0c             	sub    esp,0xc
c0025e98:	50                   	push   eax
c0025e99:	e8 00 10 00 00       	call   c0026e9e <sseLoad>
c0025e9e:	83 c4 10             	add    esp,0x10
c0025ea1:	90                   	nop
c0025ea2:	83 c4 0c             	add    esp,0xc
c0025ea5:	c3                   	ret    

c0025ea6 <SSE::SSE()>:
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ead:	83 ec 08             	sub    esp,0x8
c0025eb0:	68 f8 da 02 c0       	push   0xc002daf8
c0025eb5:	50                   	push   eax
c0025eb6:	e8 75 e3 fe ff       	call   c0014230 <FPU::FPU(char const*)>
c0025ebb:	83 c4 10             	add    esp,0x10
c0025ebe:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0025ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec7:	89 10                	mov    DWORD PTR [eax],edx
c0025ec9:	90                   	nop
c0025eca:	83 c4 0c             	add    esp,0xc
c0025ecd:	c3                   	ret    

c0025ece <x87::open(int, int, void*)>:
c0025ece:	83 ec 0c             	sub    esp,0xc
c0025ed1:	e8 1c 10 00 00       	call   c0026ef2 <x87Init>
c0025ed6:	b8 00 00 00 00       	mov    eax,0x0
c0025edb:	83 c4 0c             	add    esp,0xc
c0025ede:	c3                   	ret    
c0025edf:	90                   	nop

c0025ee0 <x87::close(int, int, void*)>:
c0025ee0:	83 ec 0c             	sub    esp,0xc
c0025ee3:	e8 24 10 00 00       	call   c0026f0c <x87Close>
c0025ee8:	b8 00 00 00 00       	mov    eax,0x0
c0025eed:	83 c4 0c             	add    esp,0xc
c0025ef0:	c3                   	ret    
c0025ef1:	90                   	nop

c0025ef2 <x87::available()>:
c0025ef2:	83 ec 0c             	sub    esp,0xc
c0025ef5:	e8 cc 0f 00 00       	call   c0026ec6 <x87Detect>
c0025efa:	85 c0                	test   eax,eax
c0025efc:	0f 95 c0             	setne  al
c0025eff:	83 c4 0c             	add    esp,0xc
c0025f02:	c3                   	ret    
c0025f03:	90                   	nop

c0025f04 <x87::save(void*)>:
c0025f04:	83 ec 0c             	sub    esp,0xc
c0025f07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f0b:	83 ec 0c             	sub    esp,0xc
c0025f0e:	50                   	push   eax
c0025f0f:	e8 cd 0f 00 00       	call   c0026ee1 <x87Save>
c0025f14:	83 c4 10             	add    esp,0x10
c0025f17:	90                   	nop
c0025f18:	83 c4 0c             	add    esp,0xc
c0025f1b:	c3                   	ret    

c0025f1c <x87::load(void*)>:
c0025f1c:	83 ec 0c             	sub    esp,0xc
c0025f1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f23:	83 ec 0c             	sub    esp,0xc
c0025f26:	50                   	push   eax
c0025f27:	e8 be 0f 00 00       	call   c0026eea <x87Load>
c0025f2c:	83 c4 10             	add    esp,0x10
c0025f2f:	90                   	nop
c0025f30:	83 c4 0c             	add    esp,0xc
c0025f33:	c3                   	ret    

c0025f34 <x87::x87()>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3b:	83 ec 08             	sub    esp,0x8
c0025f3e:	68 38 db 02 c0       	push   0xc002db38
c0025f43:	50                   	push   eax
c0025f44:	e8 e7 e2 fe ff       	call   c0014230 <FPU::FPU(char const*)>
c0025f49:	83 c4 10             	add    esp,0x10
c0025f4c:	ba 48 db 02 c0       	mov    edx,0xc002db48
c0025f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f55:	89 10                	mov    DWORD PTR [eax],edx
c0025f57:	90                   	nop
c0025f58:	83 c4 0c             	add    esp,0xc
c0025f5b:	c3                   	ret    

c0025f5c <APIC::disable()>:
c0025f5c:	90                   	nop
c0025f5d:	c3                   	ret    

c0025f5e <APIC::close(int, int, void*)>:
c0025f5e:	55                   	push   ebp
c0025f5f:	89 e5                	mov    ebp,esp
c0025f61:	83 ec 08             	sub    esp,0x8
c0025f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f67:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f69:	83 c0 3c             	add    eax,0x3c
c0025f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6e:	83 ec 0c             	sub    esp,0xc
c0025f71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f74:	ff d0                	call   eax
c0025f76:	83 c4 10             	add    esp,0x10
c0025f79:	b8 00 00 00 00       	mov    eax,0x0
c0025f7e:	c9                   	leave  
c0025f7f:	c3                   	ret    

c0025f80 <IOAPIC::close(int, int, void*)>:
c0025f80:	b8 00 00 00 00       	mov    eax,0x0
c0025f85:	c3                   	ret    

c0025f86 <APIC::io_wait()>:
c0025f86:	eb 00                	jmp    c0025f88 <APIC::io_wait()+0x2>
c0025f88:	eb 00                	jmp    c0025f8a <APIC::io_wait()+0x4>
c0025f8a:	90                   	nop
c0025f8b:	c3                   	ret    

c0025f8c <APIC::getBase()>:
c0025f8c:	55                   	push   ebp
c0025f8d:	89 e5                	mov    ebp,esp
c0025f8f:	83 ec 18             	sub    esp,0x18
c0025f92:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0025f97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f9d:	83 e0 08             	and    eax,0x8
c0025fa0:	84 c0                	test   al,al
c0025fa2:	75 07                	jne    c0025fab <APIC::getBase()+0x1f>
c0025fa4:	b8 00 00 00 00       	mov    eax,0x0
c0025fa9:	eb 21                	jmp    c0025fcc <APIC::getBase()+0x40>
c0025fab:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0025fb0:	83 ec 08             	sub    esp,0x8
c0025fb3:	6a 1b                	push   0x1b
c0025fb5:	50                   	push   eax
c0025fb6:	e8 77 8e fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0025fbb:	83 c4 10             	add    esp,0x10
c0025fbe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fc1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fc7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025fcc:	c9                   	leave  
c0025fcd:	c3                   	ret    

c0025fce <APIC::eoi(unsigned char)>:
c0025fce:	55                   	push   ebp
c0025fcf:	89 e5                	mov    ebp,esp
c0025fd1:	83 ec 28             	sub    esp,0x28
c0025fd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fda:	83 ec 0c             	sub    esp,0xc
c0025fdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe0:	e8 a7 ff ff ff       	call   c0025f8c <APIC::getBase()>
c0025fe5:	83 c4 10             	add    esp,0x10
c0025fe8:	05 b0 00 00 00       	add    eax,0xb0
c0025fed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025ff0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025ff3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025ff9:	90                   	nop
c0025ffa:	c9                   	leave  
c0025ffb:	c3                   	ret    

c0025ffc <APIC::open(int, int, void*)>:
c0025ffc:	55                   	push   ebp
c0025ffd:	89 e5                	mov    ebp,esp
c0025fff:	57                   	push   edi
c0026000:	56                   	push   esi
c0026001:	53                   	push   ebx
c0026002:	83 ec 2c             	sub    esp,0x2c
c0026005:	83 ec 0c             	sub    esp,0xc
c0026008:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002600b:	e8 7c ff ff ff       	call   c0025f8c <APIC::getBase()>
c0026010:	83 c4 10             	add    esp,0x10
c0026013:	89 c2                	mov    edx,eax
c0026015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026018:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002601e:	0f b6 f8             	movzx  edi,al
c0026021:	89 d0                	mov    eax,edx
c0026023:	ba 00 00 00 00       	mov    edx,0x0
c0026028:	89 c1                	mov    ecx,eax
c002602a:	80 e5 ff             	and    ch,0xff
c002602d:	89 cb                	mov    ebx,ecx
c002602f:	0f b6 f2             	movzx  esi,dl
c0026032:	89 d8                	mov    eax,ebx
c0026034:	89 f2                	mov    edx,esi
c0026036:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026039:	8d 5f 08             	lea    ebx,[edi+0x8]
c002603c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026040:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026044:	83 e0 00             	and    eax,0x0
c0026047:	09 d0                	or     eax,edx
c0026049:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002604d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026050:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026056:	8d 50 01             	lea    edx,[eax+0x1]
c0026059:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002605c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026062:	0f b6 d0             	movzx  edx,al
c0026065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026068:	83 c2 08             	add    edx,0x8
c002606b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002606f:	0f b6 c9             	movzx  ecx,cl
c0026072:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026078:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026082:	e8 05 ff ff ff       	call   c0025f8c <APIC::getBase()>
c0026087:	83 c4 10             	add    esp,0x10
c002608a:	05 f0 00 00 00       	add    eax,0xf0
c002608f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026092:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026095:	8b 00                	mov    eax,DWORD PTR [eax]
c0026097:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002609a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00260a1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00260a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260ab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260ae:	89 10                	mov    DWORD PTR [eax],edx
c00260b0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00260b7:	a1 d0 18 03 c0       	mov    eax,ds:0xc00318d0
c00260bc:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260bf:	7d 7c                	jge    c002613d <APIC::open(int, int, void*)+0x141>
c00260c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260c4:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00260cb:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260d1:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00260d8:	c1 e8 08             	shr    eax,0x8
c00260db:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260e2:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00260e9:	c1 e8 18             	shr    eax,0x18
c00260ec:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260ef:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260f3:	75 40                	jne    c0026135 <APIC::open(int, int, void*)+0x139>
c00260f5:	83 ec 0c             	sub    esp,0xc
c00260f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fb:	e8 8c fe ff ff       	call   c0025f8c <APIC::getBase()>
c0026100:	83 c4 10             	add    esp,0x10
c0026103:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026107:	75 07                	jne    c0026110 <APIC::open(int, int, void*)+0x114>
c0026109:	ba 60 03 00 00       	mov    edx,0x360
c002610e:	eb 05                	jmp    c0026115 <APIC::open(int, int, void*)+0x119>
c0026110:	ba 50 03 00 00       	mov    edx,0x350
c0026115:	01 d0                	add    eax,edx
c0026117:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002611a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002611d:	8b 00                	mov    eax,DWORD PTR [eax]
c002611f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026122:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026129:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002612d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026130:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026133:	89 10                	mov    DWORD PTR [eax],edx
c0026135:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026138:	e9 7a ff ff ff       	jmp    c00260b7 <APIC::open(int, int, void*)+0xbb>
c002613d:	b8 00 00 00 00       	mov    eax,0x0
c0026142:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026145:	5b                   	pop    ebx
c0026146:	5e                   	pop    esi
c0026147:	5f                   	pop    edi
c0026148:	5d                   	pop    ebp
c0026149:	c3                   	ret    

c002614a <IOAPIC::IOAPIC()>:
c002614a:	83 ec 0c             	sub    esp,0xc
c002614d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026151:	83 ec 08             	sub    esp,0x8
c0026154:	68 78 db 02 c0       	push   0xc002db78
c0026159:	50                   	push   eax
c002615a:	e8 b1 dd fe ff       	call   c0013f10 <Device::Device(char const*)>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c0026167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616b:	89 10                	mov    DWORD PTR [eax],edx
c002616d:	90                   	nop
c002616e:	83 c4 0c             	add    esp,0xc
c0026171:	c3                   	ret    

c0026172 <APIC::APIC()>:
c0026172:	53                   	push   ebx
c0026173:	83 ec 18             	sub    esp,0x18
c0026176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002617a:	83 ec 08             	sub    esp,0x8
c002617d:	68 80 db 02 c0       	push   0xc002db80
c0026182:	50                   	push   eax
c0026183:	e8 02 e5 fe ff       	call   c001468a <InterruptController::InterruptController(char const*)>
c0026188:	83 c4 10             	add    esp,0x10
c002618b:	ba 58 dc 02 c0       	mov    edx,0xc002dc58
c0026190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026194:	89 10                	mov    DWORD PTR [eax],edx
c0026196:	a0 a0 33 03 c0       	mov    al,ds:0xc00333a0
c002619b:	83 f0 01             	xor    eax,0x1
c002619e:	84 c0                	test   al,al
c00261a0:	0f 84 a1 00 00 00    	je     c0026247 <APIC::APIC()+0xd5>
c00261a6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00261ab:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c00261b0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00261b4:	0f 83 86 00 00 00    	jae    c0026240 <APIC::APIC()+0xce>
c00261ba:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261c2:	83 ec 0c             	sub    esp,0xc
c00261c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261c9:	e8 be 96 fe ff       	call   c000f88c <malloc>
c00261ce:	83 c4 10             	add    esp,0x10
c00261d1:	89 c3                	mov    ebx,eax
c00261d3:	83 ec 0c             	sub    esp,0xc
c00261d6:	53                   	push   ebx
c00261d7:	e8 6e ff ff ff       	call   c002614a <IOAPIC::IOAPIC()>
c00261dc:	83 c4 10             	add    esp,0x10
c00261df:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261e3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00261e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261ec:	89 14 85 80 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc80],edx
c00261f3:	a1 60 33 03 c0       	mov    eax,ds:0xc0033360
c00261f8:	40                   	inc    eax
c00261f9:	a3 60 33 03 c0       	mov    ds:0xc0033360,eax
c00261fe:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0026203:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026209:	83 ec 08             	sub    esp,0x8
c002620c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026210:	50                   	push   eax
c0026211:	e8 f6 da fe ff       	call   c0013d0c <Device::addChild(Device*)>
c0026216:	83 c4 10             	add    esp,0x10
c0026219:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002621d:	8b 00                	mov    eax,DWORD PTR [eax]
c002621f:	83 c0 08             	add    eax,0x8
c0026222:	8b 00                	mov    eax,DWORD PTR [eax]
c0026224:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026229:	6a 00                	push   0x0
c002622b:	6a 00                	push   0x0
c002622d:	52                   	push   edx
c002622e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026232:	ff d0                	call   eax
c0026234:	83 c4 10             	add    esp,0x10
c0026237:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002623b:	e9 6b ff ff ff       	jmp    c00261ab <APIC::APIC()+0x39>
c0026240:	c6 05 a0 33 03 c0 01 	mov    BYTE PTR ds:0xc00333a0,0x1
c0026247:	90                   	nop
c0026248:	83 c4 18             	add    esp,0x18
c002624b:	5b                   	pop    ebx
c002624c:	c3                   	ret    
c002624d:	90                   	nop

c002624e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002624e:	55                   	push   ebp
c002624f:	89 e5                	mov    ebp,esp
c0026251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026254:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002625a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002625d:	72 1d                	jb     c002627c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002625f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026262:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002626b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026271:	01 d0                	add    eax,edx
c0026273:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026276:	73 04                	jae    c002627c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026278:	b0 01                	mov    al,0x1
c002627a:	eb 02                	jmp    c002627e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002627c:	b0 00                	mov    al,0x0
c002627e:	5d                   	pop    ebp
c002627f:	c3                   	ret    

c0026280 <IOAPIC::read(int)>:
c0026280:	55                   	push   ebp
c0026281:	89 e5                	mov    ebp,esp
c0026283:	83 ec 10             	sub    esp,0x10
c0026286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026289:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002628f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026292:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026295:	0f b6 d0             	movzx  edx,al
c0026298:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002629b:	89 10                	mov    DWORD PTR [eax],edx
c002629d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262a0:	83 c0 10             	add    eax,0x10
c00262a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a5:	c9                   	leave  
c00262a6:	c3                   	ret    
c00262a7:	90                   	nop

c00262a8 <IOAPIC::open(int, int, void*)>:
c00262a8:	55                   	push   ebp
c00262a9:	89 e5                	mov    ebp,esp
c00262ab:	57                   	push   edi
c00262ac:	56                   	push   esi
c00262ad:	53                   	push   ebx
c00262ae:	83 ec 0c             	sub    esp,0xc
c00262b1:	83 ec 0c             	sub    esp,0xc
c00262b4:	68 ab db 02 c0       	push   0xc002dbab
c00262b9:	e8 15 c6 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c00262be:	83 c4 10             	add    esp,0x10
c00262c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262d6:	8b 14 85 c0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce640]
c00262dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262ef:	8b 14 85 40 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5c0]
c00262f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026302:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002630b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026311:	0f b6 f8             	movzx  edi,al
c0026314:	89 d0                	mov    eax,edx
c0026316:	ba 00 00 00 00       	mov    edx,0x0
c002631b:	89 c1                	mov    ecx,eax
c002631d:	80 e5 ff             	and    ch,0xff
c0026320:	89 cb                	mov    ebx,ecx
c0026322:	0f b6 f2             	movzx  esi,dl
c0026325:	89 d8                	mov    eax,ebx
c0026327:	89 f2                	mov    edx,esi
c0026329:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002632c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002632f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026333:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026337:	83 e0 00             	and    eax,0x0
c002633a:	09 d0                	or     eax,edx
c002633c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026343:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026349:	8d 50 01             	lea    edx,[eax+0x1]
c002634c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002634f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026355:	0f b6 d0             	movzx  edx,al
c0026358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002635b:	83 c2 08             	add    edx,0x8
c002635e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026362:	0f b6 c9             	movzx  ecx,cl
c0026365:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002636b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002636f:	83 ec 08             	sub    esp,0x8
c0026372:	6a 01                	push   0x1
c0026374:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026377:	e8 04 ff ff ff       	call   c0026280 <IOAPIC::read(int)>
c002637c:	83 c4 10             	add    esp,0x10
c002637f:	c1 f8 10             	sar    eax,0x10
c0026382:	0f b6 c0             	movzx  eax,al
c0026385:	8d 50 01             	lea    edx,[eax+0x1]
c0026388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002638b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026391:	b8 00 00 00 00       	mov    eax,0x0
c0026396:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026399:	5b                   	pop    ebx
c002639a:	5e                   	pop    esi
c002639b:	5f                   	pop    edi
c002639c:	5d                   	pop    ebp
c002639d:	c3                   	ret    

c002639e <IOAPIC::write(int, int)>:
c002639e:	55                   	push   ebp
c002639f:	89 e5                	mov    ebp,esp
c00263a1:	83 ec 10             	sub    esp,0x10
c00263a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263ad:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00263b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263b3:	0f b6 d0             	movzx  edx,al
c00263b6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263b9:	89 10                	mov    DWORD PTR [eax],edx
c00263bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263be:	8d 50 10             	lea    edx,[eax+0x10]
c00263c1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263c4:	89 02                	mov    DWORD PTR [edx],eax
c00263c6:	90                   	nop
c00263c7:	c9                   	leave  
c00263c8:	c3                   	ret    
c00263c9:	90                   	nop

c00263ca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263ca:	55                   	push   ebp
c00263cb:	89 e5                	mov    ebp,esp
c00263cd:	53                   	push   ebx
c00263ce:	83 ec 2c             	sub    esp,0x2c
c00263d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263d4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263d7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263da:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263e3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263e6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00263e9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263ec:	88 d8                	mov    al,bl
c00263ee:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263f1:	88 c8                	mov    al,cl
c00263f3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263f6:	88 d0                	mov    al,dl
c00263f8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263fb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263ff:	83 c0 08             	add    eax,0x8
c0026402:	01 c0                	add    eax,eax
c0026404:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026407:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002640b:	83 c0 08             	add    eax,0x8
c002640e:	01 c0                	add    eax,eax
c0026410:	40                   	inc    eax
c0026411:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026414:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026417:	50                   	push   eax
c0026418:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002641b:	e8 60 fe ff ff       	call   c0026280 <IOAPIC::read(int)>
c0026420:	83 c4 08             	add    esp,0x8
c0026423:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026426:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002642d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026430:	c1 e0 18             	shl    eax,0x18
c0026433:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026436:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026439:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002643c:	52                   	push   edx
c002643d:	50                   	push   eax
c002643e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026441:	e8 58 ff ff ff       	call   c002639e <IOAPIC::write(int, int)>
c0026446:	83 c4 0c             	add    esp,0xc
c0026449:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002644c:	50                   	push   eax
c002644d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026450:	e8 2b fe ff ff       	call   c0026280 <IOAPIC::read(int)>
c0026455:	83 c4 08             	add    esp,0x8
c0026458:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002645b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026462:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026469:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026470:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026474:	74 09                	je     c002647f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026476:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002647d:	eb 07                	jmp    c0026486 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002647f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026486:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002648a:	74 09                	je     c0026495 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002648c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026493:	eb 07                	jmp    c002649c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026495:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002649c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00264a3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00264a7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00264aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00264ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264b0:	52                   	push   edx
c00264b1:	50                   	push   eax
c00264b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264b5:	e8 e4 fe ff ff       	call   c002639e <IOAPIC::write(int, int)>
c00264ba:	83 c4 0c             	add    esp,0xc
c00264bd:	90                   	nop
c00264be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264c1:	c9                   	leave  
c00264c2:	c3                   	ret    
c00264c3:	90                   	nop

c00264c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264c4:	55                   	push   ebp
c00264c5:	89 e5                	mov    ebp,esp
c00264c7:	57                   	push   edi
c00264c8:	56                   	push   esi
c00264c9:	53                   	push   ebx
c00264ca:	83 ec 2c             	sub    esp,0x2c
c00264cd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264d0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264d3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264d7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264db:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264df:	74 5a                	je     c002653b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264e1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264e5:	7f 44                	jg     c002652b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264ea:	05 60 e2 02 c0       	add    eax,0xc002e260
c00264ef:	8a 00                	mov    al,BYTE PTR [eax]
c00264f1:	0f b6 c0             	movzx  eax,al
c00264f4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264fa:	66 8b 84 00 60 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce6a0]
c0026502:	0f b7 c0             	movzx  eax,ax
c0026505:	83 e0 02             	and    eax,0x2
c0026508:	85 c0                	test   eax,eax
c002650a:	74 04                	je     c0026510 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002650c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026510:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026513:	66 8b 84 00 60 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce6a0]
c002651b:	0f b7 c0             	movzx  eax,ax
c002651e:	83 e0 08             	and    eax,0x8
c0026521:	85 c0                	test   eax,eax
c0026523:	74 16                	je     c002653b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026525:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026529:	eb 10                	jmp    c002653b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002652b:	83 ec 0c             	sub    esp,0xc
c002652e:	68 bc db 02 c0       	push   0xc002dbbc
c0026533:	e8 d1 3d ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0026538:	83 c4 10             	add    esp,0x10
c002653b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002653f:	a1 60 33 03 c0       	mov    eax,ds:0xc0033360
c0026544:	83 ec 08             	sub    esp,0x8
c0026547:	50                   	push   eax
c0026548:	68 f4 db 02 c0       	push   0xc002dbf4
c002654d:	e8 81 c3 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0026552:	83 c4 10             	add    esp,0x10
c0026555:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002655c:	a1 60 33 03 c0       	mov    eax,ds:0xc0033360
c0026561:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026564:	7d 67                	jge    c00265cd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026566:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026569:	8b 04 85 80 33 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccc80]
c0026570:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026573:	83 ec 08             	sub    esp,0x8
c0026576:	52                   	push   edx
c0026577:	50                   	push   eax
c0026578:	e8 d1 fc ff ff       	call   c002624e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002657d:	83 c4 10             	add    esp,0x10
c0026580:	84 c0                	test   al,al
c0026582:	74 44                	je     c00265c8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026584:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026587:	8b 1c 85 80 33 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccc80]
c002658e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026592:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026595:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026599:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002659c:	83 c0 20             	add    eax,0x20
c002659f:	0f b6 f0             	movzx  esi,al
c00265a2:	b8 00 00 00 00       	mov    eax,0x0
c00265a7:	99                   	cdq    
c00265a8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265ab:	0f b6 c9             	movzx  ecx,cl
c00265ae:	83 ec 04             	sub    esp,0x4
c00265b1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00265b4:	57                   	push   edi
c00265b5:	56                   	push   esi
c00265b6:	52                   	push   edx
c00265b7:	50                   	push   eax
c00265b8:	51                   	push   ecx
c00265b9:	53                   	push   ebx
c00265ba:	e8 0b fe ff ff       	call   c00263ca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265bf:	83 c4 20             	add    esp,0x20
c00265c2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265c6:	eb 05                	jmp    c00265cd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265c8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265cb:	eb 8f                	jmp    c002655c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265cd:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265d0:	83 f0 01             	xor    eax,0x1
c00265d3:	84 c0                	test   al,al
c00265d5:	74 10                	je     c00265e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265d7:	83 ec 0c             	sub    esp,0xc
c00265da:	68 0b dc 02 c0       	push   0xc002dc0b
c00265df:	e8 25 3d ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00265e4:	83 c4 10             	add    esp,0x10
c00265e7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00265eb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265f2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265f6:	7f 65                	jg     c002665d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265fe:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026605:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026608:	01 ca                	add    edx,ecx
c002660a:	83 c2 54             	add    edx,0x54
c002660d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026611:	85 c0                	test   eax,eax
c0026613:	75 43                	jne    c0026658 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026618:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002661b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026622:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026625:	01 ca                	add    edx,ecx
c0026627:	8d 4a 54             	lea    ecx,[edx+0x54]
c002662a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002662d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026634:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026637:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002663e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026641:	01 ca                	add    edx,ecx
c0026643:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026649:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002664c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026653:	83 e8 20             	sub    eax,0x20
c0026656:	eb 1a                	jmp    c0026672 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026658:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002665b:	eb 95                	jmp    c00265f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002665d:	83 ec 0c             	sub    esp,0xc
c0026660:	68 18 dc 02 c0       	push   0xc002dc18
c0026665:	e8 9f 3c ff ff       	call   c001a309 <Krnl::panic(char const*)>
c002666a:	83 c4 10             	add    esp,0x10
c002666d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026672:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026675:	5b                   	pop    ebx
c0026676:	5e                   	pop    esi
c0026677:	5f                   	pop    edi
c0026678:	5d                   	pop    ebp
c0026679:	c3                   	ret    

c002667a <PIC::disable()>:
c002667a:	55                   	push   ebp
c002667b:	89 e5                	mov    ebp,esp
c002667d:	83 ec 10             	sub    esp,0x10
c0026680:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026686:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002668a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002668d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026691:	ee                   	out    dx,al
c0026692:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026698:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002669c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002669f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00266a3:	ee                   	out    dx,al
c00266a4:	90                   	nop
c00266a5:	c9                   	leave  
c00266a6:	c3                   	ret    
c00266a7:	90                   	nop

c00266a8 <PIC::close(int, int, void*)>:
c00266a8:	55                   	push   ebp
c00266a9:	89 e5                	mov    ebp,esp
c00266ab:	83 ec 08             	sub    esp,0x8
c00266ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00266b3:	83 c0 3c             	add    eax,0x3c
c00266b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00266b8:	83 ec 0c             	sub    esp,0xc
c00266bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266be:	ff d0                	call   eax
c00266c0:	83 c4 10             	add    esp,0x10
c00266c3:	b8 00 00 00 00       	mov    eax,0x0
c00266c8:	c9                   	leave  
c00266c9:	c3                   	ret    

c00266ca <PIC::PIC()>:
c00266ca:	83 ec 0c             	sub    esp,0xc
c00266cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d1:	83 ec 08             	sub    esp,0x8
c00266d4:	68 c4 dc 02 c0       	push   0xc002dcc4
c00266d9:	50                   	push   eax
c00266da:	e8 ab df fe ff       	call   c001468a <InterruptController::InterruptController(char const*)>
c00266df:	83 c4 10             	add    esp,0x10
c00266e2:	ba f0 dc 02 c0       	mov    edx,0xc002dcf0
c00266e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266eb:	89 10                	mov    DWORD PTR [eax],edx
c00266ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f7:	0f b6 d0             	movzx  edx,al
c00266fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fe:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026709:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002670f:	0f b6 d0             	movzx  edx,al
c0026712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026716:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002671b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026725:	8d 50 01             	lea    edx,[eax+0x1]
c0026728:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002672c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026732:	0f b6 d0             	movzx  edx,al
c0026735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026739:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002673d:	83 e1 3f             	and    ecx,0x3f
c0026740:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026748:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002674e:	0f b6 d0             	movzx  edx,al
c0026751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026755:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002675c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026760:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026766:	0f b6 d0             	movzx  edx,al
c0026769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026776:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002677c:	8d 50 01             	lea    edx,[eax+0x1]
c002677f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026783:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026789:	0f b6 d0             	movzx  edx,al
c002678c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026790:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026794:	83 e1 3f             	and    ecx,0x3f
c0026797:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002679b:	90                   	nop
c002679c:	83 c4 0c             	add    esp,0xc
c002679f:	c3                   	ret    

c00267a0 <PIC::ioWait()>:
c00267a0:	eb 00                	jmp    c00267a2 <PIC::ioWait()+0x2>
c00267a2:	eb 00                	jmp    c00267a4 <PIC::ioWait()+0x4>
c00267a4:	90                   	nop
c00267a5:	c3                   	ret    

c00267a6 <PIC::getIRQReg(int)>:
c00267a6:	55                   	push   ebp
c00267a7:	89 e5                	mov    ebp,esp
c00267a9:	83 ec 10             	sub    esp,0x10
c00267ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267af:	0f b6 c0             	movzx  eax,al
c00267b2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267b8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00267bb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267be:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267c2:	ee                   	out    dx,al
c00267c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267c6:	0f b6 c0             	movzx  eax,al
c00267c9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267cf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267d2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267d5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267d9:	ee                   	out    dx,al
c00267da:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267e0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267e4:	89 c2                	mov    edx,eax
c00267e6:	ec                   	in     al,dx
c00267e7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00267ea:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267ed:	0f b6 c0             	movzx  eax,al
c00267f0:	c1 e0 08             	shl    eax,0x8
c00267f3:	89 c1                	mov    ecx,eax
c00267f5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267fb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267ff:	89 c2                	mov    edx,eax
c0026801:	ec                   	in     al,dx
c0026802:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026805:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026808:	0f b6 c0             	movzx  eax,al
c002680b:	09 c8                	or     eax,ecx
c002680d:	c9                   	leave  
c002680e:	c3                   	ret    
c002680f:	90                   	nop

c0026810 <PIC::eoi(unsigned char)>:
c0026810:	55                   	push   ebp
c0026811:	89 e5                	mov    ebp,esp
c0026813:	83 ec 14             	sub    esp,0x14
c0026816:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026819:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002681c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026820:	75 1e                	jne    c0026840 <PIC::eoi(unsigned char)+0x30>
c0026822:	6a 0b                	push   0xb
c0026824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026827:	e8 7a ff ff ff       	call   c00267a6 <PIC::getIRQReg(int)>
c002682c:	83 c4 08             	add    esp,0x8
c002682f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026833:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026837:	25 80 00 00 00       	and    eax,0x80
c002683c:	85 c0                	test   eax,eax
c002683e:	74 5f                	je     c002689f <PIC::eoi(unsigned char)+0x8f>
c0026840:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026844:	75 2d                	jne    c0026873 <PIC::eoi(unsigned char)+0x63>
c0026846:	6a 0b                	push   0xb
c0026848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002684b:	e8 56 ff ff ff       	call   c00267a6 <PIC::getIRQReg(int)>
c0026850:	83 c4 08             	add    esp,0x8
c0026853:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026857:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002685a:	66 85 c0             	test   ax,ax
c002685d:	78 14                	js     c0026873 <PIC::eoi(unsigned char)+0x63>
c002685f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026865:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026869:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002686c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026870:	ee                   	out    dx,al
c0026871:	eb 2d                	jmp    c00268a0 <PIC::eoi(unsigned char)+0x90>
c0026873:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026877:	76 12                	jbe    c002688b <PIC::eoi(unsigned char)+0x7b>
c0026879:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002687f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026883:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026886:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002688a:	ee                   	out    dx,al
c002688b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026891:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026895:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026898:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002689c:	ee                   	out    dx,al
c002689d:	eb 01                	jmp    c00268a0 <PIC::eoi(unsigned char)+0x90>
c002689f:	90                   	nop
c00268a0:	c9                   	leave  
c00268a1:	c3                   	ret    

c00268a2 <PIC::remap()>:
c00268a2:	55                   	push   ebp
c00268a3:	89 e5                	mov    ebp,esp
c00268a5:	83 ec 48             	sub    esp,0x48
c00268a8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00268af:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00268b6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00268bc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268bf:	89 c2                	mov    edx,eax
c00268c1:	ec                   	in     al,dx
c00268c2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268c5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268c8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268cb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268d1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268d4:	89 c2                	mov    edx,eax
c00268d6:	ec                   	in     al,dx
c00268d7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268da:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268dd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268e0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268e6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00268ea:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268ed:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268f0:	ee                   	out    dx,al
c00268f1:	83 ec 0c             	sub    esp,0xc
c00268f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268f7:	e8 a4 fe ff ff       	call   c00267a0 <PIC::ioWait()>
c00268fc:	83 c4 10             	add    esp,0x10
c00268ff:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026905:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026909:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002690c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002690f:	ee                   	out    dx,al
c0026910:	83 ec 0c             	sub    esp,0xc
c0026913:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026916:	e8 85 fe ff ff       	call   c00267a0 <PIC::ioWait()>
c002691b:	83 c4 10             	add    esp,0x10
c002691e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026921:	0f b6 c0             	movzx  eax,al
c0026924:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002692a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002692d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026930:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026933:	ee                   	out    dx,al
c0026934:	83 ec 0c             	sub    esp,0xc
c0026937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002693a:	e8 61 fe ff ff       	call   c00267a0 <PIC::ioWait()>
c002693f:	83 c4 10             	add    esp,0x10
c0026942:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026945:	0f b6 c0             	movzx  eax,al
c0026948:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002694e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026951:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026954:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026957:	ee                   	out    dx,al
c0026958:	83 ec 0c             	sub    esp,0xc
c002695b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002695e:	e8 3d fe ff ff       	call   c00267a0 <PIC::ioWait()>
c0026963:	83 c4 10             	add    esp,0x10
c0026966:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002696c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026970:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026973:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026976:	ee                   	out    dx,al
c0026977:	83 ec 0c             	sub    esp,0xc
c002697a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002697d:	e8 1e fe ff ff       	call   c00267a0 <PIC::ioWait()>
c0026982:	83 c4 10             	add    esp,0x10
c0026985:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002698b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002698f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026992:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026995:	ee                   	out    dx,al
c0026996:	83 ec 0c             	sub    esp,0xc
c0026999:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002699c:	e8 ff fd ff ff       	call   c00267a0 <PIC::ioWait()>
c00269a1:	83 c4 10             	add    esp,0x10
c00269a4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00269aa:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00269ae:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00269b1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00269b4:	ee                   	out    dx,al
c00269b5:	83 ec 0c             	sub    esp,0xc
c00269b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269bb:	e8 e0 fd ff ff       	call   c00267a0 <PIC::ioWait()>
c00269c0:	83 c4 10             	add    esp,0x10
c00269c3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269c9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269cd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269d0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269d3:	ee                   	out    dx,al
c00269d4:	83 ec 0c             	sub    esp,0xc
c00269d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269da:	e8 c1 fd ff ff       	call   c00267a0 <PIC::ioWait()>
c00269df:	83 c4 10             	add    esp,0x10
c00269e2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269e6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269ec:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269ef:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269f2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269f5:	ee                   	out    dx,al
c00269f6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269fa:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026a00:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026a03:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a06:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a09:	ee                   	out    dx,al
c0026a0a:	90                   	nop
c0026a0b:	c9                   	leave  
c0026a0c:	c3                   	ret    
c0026a0d:	90                   	nop

c0026a0e <PIC::open(int, int, void*)>:
c0026a0e:	55                   	push   ebp
c0026a0f:	89 e5                	mov    ebp,esp
c0026a11:	83 ec 18             	sub    esp,0x18
c0026a14:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a1a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a1e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a21:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a25:	ee                   	out    dx,al
c0026a26:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a2c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a30:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a33:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a37:	ee                   	out    dx,al
c0026a38:	83 ec 0c             	sub    esp,0xc
c0026a3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a3e:	e8 5f fe ff ff       	call   c00268a2 <PIC::remap()>
c0026a43:	83 c4 10             	add    esp,0x10
c0026a46:	b8 00 00 00 00       	mov    eax,0x0
c0026a4b:	c9                   	leave  
c0026a4c:	c3                   	ret    
c0026a4d:	90                   	nop

c0026a4e <APICTimer::close(int, int, void*)>:
c0026a4e:	b8 00 00 00 00       	mov    eax,0x0
c0026a53:	c3                   	ret    

c0026a54 <apicTimerHandler(regs*, void*)>:
c0026a54:	83 ec 0c             	sub    esp,0xc
c0026a57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a5d:	99                   	cdq    
c0026a5e:	52                   	push   edx
c0026a5f:	50                   	push   eax
c0026a60:	6a 00                	push   0x0
c0026a62:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a67:	e8 98 07 00 00       	call   c0027204 <__udivdi3>
c0026a6c:	83 c4 10             	add    esp,0x10
c0026a6f:	83 ec 08             	sub    esp,0x8
c0026a72:	52                   	push   edx
c0026a73:	50                   	push   eax
c0026a74:	e8 a0 fd fe ff       	call   c0016819 <timerHandler(unsigned long long)>
c0026a79:	83 c4 10             	add    esp,0x10
c0026a7c:	90                   	nop
c0026a7d:	83 c4 0c             	add    esp,0xc
c0026a80:	c3                   	ret    
c0026a81:	90                   	nop

c0026a82 <APICTimer::write(int)>:
c0026a82:	53                   	push   ebx
c0026a83:	83 ec 28             	sub    esp,0x28
c0026a86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a8e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a94:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0026a99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a9f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026aa5:	83 ec 0c             	sub    esp,0xc
c0026aa8:	50                   	push   eax
c0026aa9:	e8 de f4 ff ff       	call   c0025f8c <APIC::getBase()>
c0026aae:	83 c4 10             	add    esp,0x10
c0026ab1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ab5:	a1 70 f6 02 c0       	mov    eax,ds:0xc002f670
c0026aba:	8b 15 74 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f674
c0026ac0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026ac4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026ac8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026acc:	05 e0 03 00 00       	add    eax,0x3e0
c0026ad1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ad7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026adb:	05 80 03 00 00       	add    eax,0x380
c0026ae0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ae6:	fb                   	sti    
c0026ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026aef:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026af4:	83 d2 00             	adc    edx,0x0
c0026af7:	89 c1                	mov    ecx,eax
c0026af9:	89 d3                	mov    ebx,edx
c0026afb:	a1 70 f6 02 c0       	mov    eax,ds:0xc002f670
c0026b00:	8b 15 74 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f674
c0026b06:	39 c8                	cmp    eax,ecx
c0026b08:	89 d0                	mov    eax,edx
c0026b0a:	19 d8                	sbb    eax,ebx
c0026b0c:	73 02                	jae    c0026b10 <APICTimer::write(int)+0x8e>
c0026b0e:	eb d7                	jmp    c0026ae7 <APICTimer::write(int)+0x65>
c0026b10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b14:	05 20 03 00 00       	add    eax,0x320
c0026b19:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b23:	05 90 03 00 00       	add    eax,0x390
c0026b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b2a:	f7 d0                	not    eax
c0026b2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b30:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b38:	ba 00 00 00 00       	mov    edx,0x0
c0026b3d:	f7 f3                	div    ebx
c0026b3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b4d:	0d 00 00 02 00       	or     eax,0x20000
c0026b52:	89 c2                	mov    edx,eax
c0026b54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b58:	05 20 03 00 00       	add    eax,0x320
c0026b5d:	89 10                	mov    DWORD PTR [eax],edx
c0026b5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b63:	05 e0 03 00 00       	add    eax,0x3e0
c0026b68:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b72:	05 80 03 00 00       	add    eax,0x380
c0026b77:	89 c2                	mov    edx,eax
c0026b79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b7d:	89 02                	mov    DWORD PTR [edx],eax
c0026b7f:	90                   	nop
c0026b80:	83 c4 28             	add    esp,0x28
c0026b83:	5b                   	pop    ebx
c0026b84:	c3                   	ret    
c0026b85:	90                   	nop

c0026b86 <APICTimer::open(int, int, void*)>:
c0026b86:	57                   	push   edi
c0026b87:	56                   	push   esi
c0026b88:	53                   	push   ebx
c0026b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b8f:	83 c0 24             	add    eax,0x24
c0026b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b94:	83 ec 08             	sub    esp,0x8
c0026b97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b9f:	ff d0                	call   eax
c0026ba1:	83 c4 10             	add    esp,0x10
c0026ba4:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0026ba9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026baf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026bb5:	83 ec 0c             	sub    esp,0xc
c0026bb8:	50                   	push   eax
c0026bb9:	e8 ce f3 ff ff       	call   c0025f8c <APIC::getBase()>
c0026bbe:	83 c4 10             	add    esp,0x10
c0026bc1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bcb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bd1:	0f b6 f8             	movzx  edi,al
c0026bd4:	89 d0                	mov    eax,edx
c0026bd6:	ba 00 00 00 00       	mov    edx,0x0
c0026bdb:	89 c1                	mov    ecx,eax
c0026bdd:	80 e5 ff             	and    ch,0xff
c0026be0:	89 cb                	mov    ebx,ecx
c0026be2:	0f b6 f2             	movzx  esi,dl
c0026be5:	89 d8                	mov    eax,ebx
c0026be7:	89 f2                	mov    edx,esi
c0026be9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bed:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026bf0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026bf4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bf8:	83 e0 00             	and    eax,0x0
c0026bfb:	09 d0                	or     eax,edx
c0026bfd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0026c0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c12:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c18:	0f b6 d0             	movzx  edx,al
c0026c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1f:	83 c2 08             	add    edx,0x8
c0026c22:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c26:	0f b6 c9             	movzx  ecx,cl
c0026c29:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c2f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c3b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c49:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c53:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c59:	83 ec 0c             	sub    esp,0xc
c0026c5c:	51                   	push   ecx
c0026c5d:	6a 01                	push   0x1
c0026c5f:	68 54 6a 02 c0       	push   0xc0026a54
c0026c64:	52                   	push   edx
c0026c65:	50                   	push   eax
c0026c66:	e8 19 d0 fe ff       	call   c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c6b:	83 c4 20             	add    esp,0x20
c0026c6e:	89 c2                	mov    edx,eax
c0026c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c74:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c7a:	b8 00 00 00 00       	mov    eax,0x0
c0026c7f:	5b                   	pop    ebx
c0026c80:	5e                   	pop    esi
c0026c81:	5f                   	pop    edi
c0026c82:	c3                   	ret    
c0026c83:	90                   	nop

c0026c84 <APICTimer::APICTimer()>:
c0026c84:	83 ec 0c             	sub    esp,0xc
c0026c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c8b:	83 ec 08             	sub    esp,0x8
c0026c8e:	68 30 dd 02 c0       	push   0xc002dd30
c0026c93:	50                   	push   eax
c0026c94:	e8 f1 fa fe ff       	call   c001678a <Timer::Timer(char const*)>
c0026c99:	83 c4 10             	add    esp,0x10
c0026c9c:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0026ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca5:	89 10                	mov    DWORD PTR [eax],edx
c0026ca7:	90                   	nop
c0026ca8:	83 c4 0c             	add    esp,0xc
c0026cab:	c3                   	ret    

c0026cac <PIT::write(int)>:
c0026cac:	83 ec 10             	sub    esp,0x10
c0026caf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026cb7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026cc1:	a3 a4 33 03 c0       	mov    ds:0xc00333a4,eax
c0026cc6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026ccb:	99                   	cdq    
c0026ccc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026cd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cd4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cdb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026ce0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026ce4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026ce9:	ee                   	out    dx,al
c0026cea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cee:	0f b6 c0             	movzx  eax,al
c0026cf1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cf8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cfc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026d00:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d05:	ee                   	out    dx,al
c0026d06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d0a:	c1 f8 08             	sar    eax,0x8
c0026d0d:	0f b6 c0             	movzx  eax,al
c0026d10:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d17:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d1b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d1f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d24:	ee                   	out    dx,al
c0026d25:	90                   	nop
c0026d26:	83 c4 10             	add    esp,0x10
c0026d29:	c3                   	ret    

c0026d2a <pitHandler(regs*, void*)>:
c0026d2a:	83 ec 0c             	sub    esp,0xc
c0026d2d:	a1 a4 33 03 c0       	mov    eax,ds:0xc00333a4
c0026d32:	99                   	cdq    
c0026d33:	52                   	push   edx
c0026d34:	50                   	push   eax
c0026d35:	6a 00                	push   0x0
c0026d37:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d3c:	e8 c3 04 00 00       	call   c0027204 <__udivdi3>
c0026d41:	83 c4 10             	add    esp,0x10
c0026d44:	83 ec 08             	sub    esp,0x8
c0026d47:	52                   	push   edx
c0026d48:	50                   	push   eax
c0026d49:	e8 cb fa fe ff       	call   c0016819 <timerHandler(unsigned long long)>
c0026d4e:	83 c4 10             	add    esp,0x10
c0026d51:	90                   	nop
c0026d52:	83 c4 0c             	add    esp,0xc
c0026d55:	c3                   	ret    

c0026d56 <PIT::open(int, int, void*)>:
c0026d56:	83 ec 0c             	sub    esp,0xc
c0026d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d5f:	83 c0 24             	add    eax,0x24
c0026d62:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d64:	83 ec 08             	sub    esp,0x8
c0026d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d6f:	ff d0                	call   eax
c0026d71:	83 c4 10             	add    esp,0x10
c0026d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d78:	83 ec 0c             	sub    esp,0xc
c0026d7b:	6a 00                	push   0x0
c0026d7d:	6a 01                	push   0x1
c0026d7f:	68 2a 6d 02 c0       	push   0xc0026d2a
c0026d84:	6a 00                	push   0x0
c0026d86:	50                   	push   eax
c0026d87:	e8 f8 ce fe ff       	call   c0013c84 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d8c:	83 c4 20             	add    esp,0x20
c0026d8f:	89 c2                	mov    edx,eax
c0026d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d95:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d9b:	b8 00 00 00 00       	mov    eax,0x0
c0026da0:	83 c4 0c             	add    esp,0xc
c0026da3:	c3                   	ret    

c0026da4 <PIT::close(int, int, void*)>:
c0026da4:	83 ec 0c             	sub    esp,0xc
c0026da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dab:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db9:	6a 01                	push   0x1
c0026dbb:	68 2a 6d 02 c0       	push   0xc0026d2a
c0026dc0:	6a 00                	push   0x0
c0026dc2:	50                   	push   eax
c0026dc3:	e8 06 cf fe ff       	call   c0013cce <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026dc8:	83 c4 10             	add    esp,0x10
c0026dcb:	b8 00 00 00 00       	mov    eax,0x0
c0026dd0:	83 c4 0c             	add    esp,0xc
c0026dd3:	c3                   	ret    

c0026dd4 <PIT::PIT()>:
c0026dd4:	83 ec 0c             	sub    esp,0xc
c0026dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddb:	83 ec 08             	sub    esp,0x8
c0026dde:	68 6c dd 02 c0       	push   0xc002dd6c
c0026de3:	50                   	push   eax
c0026de4:	e8 a1 f9 fe ff       	call   c001678a <Timer::Timer(char const*)>
c0026de9:	83 c4 10             	add    esp,0x10
c0026dec:	ba 94 dd 02 c0       	mov    edx,0xc002dd94
c0026df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df5:	89 10                	mov    DWORD PTR [eax],edx
c0026df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e01:	0f b6 d0             	movzx  edx,al
c0026e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e08:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e19:	0f b6 d0             	movzx  edx,al
c0026e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e20:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e2f:	8d 50 01             	lea    edx,[eax+0x1]
c0026e32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e36:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e3c:	0f b6 d0             	movzx  edx,al
c0026e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e43:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e47:	83 e1 3f             	and    ecx,0x3f
c0026e4a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e4e:	90                   	nop
c0026e4f:	83 c4 0c             	add    esp,0xc
c0026e52:	c3                   	ret    
c0026e53:	66 90                	xchg   ax,ax
c0026e55:	66 90                	xchg   ax,ax
c0026e57:	66 90                	xchg   ax,ax
c0026e59:	66 90                	xchg   ax,ax
c0026e5b:	66 90                	xchg   ax,ax
c0026e5d:	66 90                	xchg   ax,ax
c0026e5f:	90                   	nop

c0026e60 <avxDetect>:
c0026e60:	b8 00 00 00 00       	mov    eax,0x0
c0026e65:	c3                   	ret    

c0026e66 <avxSave>:
c0026e66:	c3                   	ret    

c0026e67 <avxLoad>:
c0026e67:	c3                   	ret    

c0026e68 <avxInit>:
c0026e68:	c3                   	ret    

c0026e69 <avxClose>:
c0026e69:	c3                   	ret    

c0026e6a <wouldSheSayYes>:
c0026e6a:	c3                   	ret    
c0026e6b:	49                   	dec    ecx
c0026e6c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e70:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e74:	75 20                	jne    c0026e96 <sseDetect.noSSE+0x1>
c0026e76:	4e                   	dec    esi
c0026e77:	79 61                	jns    c0026eda <x87Detect+0x14>
c0026e79:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e7e:	66 90                	xchg   ax,ax

c0026e80 <absolutelyNoChanceInHell>:
c0026e80:	b8 01 00 00 00       	mov    eax,0x1
c0026e85:	0f a2                	cpuid  
c0026e87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e8d:	74 06                	je     c0026e95 <sseDetect.noSSE>
c0026e8f:	b8 01 00 00 00       	mov    eax,0x1
c0026e94:	c3                   	ret    

c0026e95 <sseDetect.noSSE>:
c0026e95:	31 c0                	xor    eax,eax
c0026e97:	c3                   	ret    

c0026e98 <sseSave>:
c0026e98:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e9d:	c3                   	ret    

c0026e9e <sseLoad>:
c0026e9e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026ea3:	c3                   	ret    

c0026ea4 <sseInit>:
c0026ea4:	e8 49 00 00 00       	call   c0026ef2 <x87Init>
c0026ea9:	0f 20 e0             	mov    eax,cr4
c0026eac:	66 0d 00 06          	or     ax,0x600
c0026eb0:	0f 22 e0             	mov    cr4,eax
c0026eb3:	c3                   	ret    

c0026eb4 <sseClose>:
c0026eb4:	c3                   	ret    
c0026eb5:	66 90                	xchg   ax,ax
c0026eb7:	66 90                	xchg   ax,ax
c0026eb9:	66 90                	xchg   ax,ax
c0026ebb:	66 90                	xchg   ax,ax
c0026ebd:	66 90                	xchg   ax,ax
c0026ebf:	90                   	nop

c0026ec0 <value_37F>:
c0026ec0:	7f 03                	jg     c0026ec5 <value_37A+0x1>

c0026ec2 <value_37E>:
c0026ec2:	7e 03                	jle    c0026ec7 <x87Detect+0x1>

c0026ec4 <value_37A>:
c0026ec4:	7a 03                	jp     c0026ec9 <x87Detect+0x3>

c0026ec6 <x87Detect>:
c0026ec6:	b8 01 00 00 00       	mov    eax,0x1
c0026ecb:	0f a2                	cpuid  
c0026ecd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ed3:	74 06                	je     c0026edb <x87Detect.nox87>
c0026ed5:	b8 01 00 00 00       	mov    eax,0x1
c0026eda:	c3                   	ret    

c0026edb <x87Detect.nox87>:
c0026edb:	b8 00 00 00 00       	mov    eax,0x0
c0026ee0:	c3                   	ret    

c0026ee1 <x87Save>:
c0026ee1:	55                   	push   ebp
c0026ee2:	89 e5                	mov    ebp,esp
c0026ee4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ee8:	c9                   	leave  
c0026ee9:	c3                   	ret    

c0026eea <x87Load>:
c0026eea:	55                   	push   ebp
c0026eeb:	89 e5                	mov    ebp,esp
c0026eed:	dd 65 08             	frstor [ebp+0x8]
c0026ef0:	c9                   	leave  
c0026ef1:	c3                   	ret    

c0026ef2 <x87Init>:
c0026ef2:	9b db e3             	finit  
c0026ef5:	0f 20 c0             	mov    eax,cr0
c0026ef8:	66 25 fb ff          	and    ax,0xfffb
c0026efc:	66 0d 22 00          	or     ax,0x22
c0026f00:	0f 22 c0             	mov    cr0,eax
c0026f03:	0f 06                	clts   
c0026f05:	d9 2d c4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026ec4
c0026f0b:	c3                   	ret    

c0026f0c <x87Close>:
c0026f0c:	c3                   	ret    
c0026f0d:	66 90                	xchg   ax,ax
c0026f0f:	90                   	nop

c0026f10 <__do_global_ctors_aux>:
c0026f10:	a1 48 9b 02 c0       	mov    eax,ds:0xc0029b48
c0026f15:	83 f8 ff             	cmp    eax,0xffffffff
c0026f18:	74 1a                	je     c0026f34 <__do_global_ctors_aux+0x24>
c0026f1a:	55                   	push   ebp
c0026f1b:	89 e5                	mov    ebp,esp
c0026f1d:	53                   	push   ebx
c0026f1e:	52                   	push   edx
c0026f1f:	bb 48 9b 02 c0       	mov    ebx,0xc0029b48
c0026f24:	ff d0                	call   eax
c0026f26:	83 eb 04             	sub    ebx,0x4
c0026f29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f2e:	75 f4                	jne    c0026f24 <__do_global_ctors_aux+0x14>
c0026f30:	58                   	pop    eax
c0026f31:	5b                   	pop    ebx
c0026f32:	5d                   	pop    ebp
c0026f33:	c3                   	ret    
c0026f34:	c3                   	ret    
c0026f35:	66 90                	xchg   ax,ax
c0026f37:	90                   	nop

c0026f38 <__divdi3>:
c0026f38:	55                   	push   ebp
c0026f39:	57                   	push   edi
c0026f3a:	56                   	push   esi
c0026f3b:	53                   	push   ebx
c0026f3c:	83 ec 1c             	sub    esp,0x1c
c0026f3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f47:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f4a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f52:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f56:	85 db                	test   ebx,ebx
c0026f58:	0f 88 8e 00 00 00    	js     c0026fec <__divdi3+0xb4>
c0026f5e:	89 dd                	mov    ebp,ebx
c0026f60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f68:	89 d3                	mov    ebx,edx
c0026f6a:	85 d2                	test   edx,edx
c0026f6c:	79 0d                	jns    c0026f7b <__divdi3+0x43>
c0026f6e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f72:	f7 d8                	neg    eax
c0026f74:	83 d2 00             	adc    edx,0x0
c0026f77:	f7 da                	neg    edx
c0026f79:	89 d3                	mov    ebx,edx
c0026f7b:	89 c7                	mov    edi,eax
c0026f7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f80:	85 db                	test   ebx,ebx
c0026f82:	75 48                	jne    c0026fcc <__divdi3+0x94>
c0026f84:	39 ef                	cmp    edi,ebp
c0026f86:	76 24                	jbe    c0026fac <__divdi3+0x74>
c0026f88:	89 ea                	mov    edx,ebp
c0026f8a:	f7 f7                	div    edi
c0026f8c:	89 c1                	mov    ecx,eax
c0026f8e:	31 f6                	xor    esi,esi
c0026f90:	89 c8                	mov    eax,ecx
c0026f92:	89 f2                	mov    edx,esi
c0026f94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f98:	85 c9                	test   ecx,ecx
c0026f9a:	74 07                	je     c0026fa3 <__divdi3+0x6b>
c0026f9c:	f7 d8                	neg    eax
c0026f9e:	83 d2 00             	adc    edx,0x0
c0026fa1:	f7 da                	neg    edx
c0026fa3:	83 c4 1c             	add    esp,0x1c
c0026fa6:	5b                   	pop    ebx
c0026fa7:	5e                   	pop    esi
c0026fa8:	5f                   	pop    edi
c0026fa9:	5d                   	pop    ebp
c0026faa:	c3                   	ret    
c0026fab:	90                   	nop
c0026fac:	85 ff                	test   edi,edi
c0026fae:	75 0b                	jne    c0026fbb <__divdi3+0x83>
c0026fb0:	b8 01 00 00 00       	mov    eax,0x1
c0026fb5:	31 d2                	xor    edx,edx
c0026fb7:	f7 f3                	div    ebx
c0026fb9:	89 c7                	mov    edi,eax
c0026fbb:	31 d2                	xor    edx,edx
c0026fbd:	89 e8                	mov    eax,ebp
c0026fbf:	f7 f7                	div    edi
c0026fc1:	89 c6                	mov    esi,eax
c0026fc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fc6:	f7 f7                	div    edi
c0026fc8:	89 c1                	mov    ecx,eax
c0026fca:	eb c4                	jmp    c0026f90 <__divdi3+0x58>
c0026fcc:	39 eb                	cmp    ebx,ebp
c0026fce:	77 3c                	ja     c002700c <__divdi3+0xd4>
c0026fd0:	0f bd f3             	bsr    esi,ebx
c0026fd3:	83 f6 1f             	xor    esi,0x1f
c0026fd6:	75 40                	jne    c0027018 <__divdi3+0xe0>
c0026fd8:	39 eb                	cmp    ebx,ebp
c0026fda:	72 09                	jb     c0026fe5 <__divdi3+0xad>
c0026fdc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026fdf:	0f 87 97 00 00 00    	ja     c002707c <__divdi3+0x144>
c0026fe5:	b9 01 00 00 00       	mov    ecx,0x1
c0026fea:	eb a4                	jmp    c0026f90 <__divdi3+0x58>
c0026fec:	f7 d9                	neg    ecx
c0026fee:	83 d3 00             	adc    ebx,0x0
c0026ff1:	f7 db                	neg    ebx
c0026ff3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026ff6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026ffa:	89 dd                	mov    ebp,ebx
c0026ffc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027004:	e9 5f ff ff ff       	jmp    c0026f68 <__divdi3+0x30>
c0027009:	8d 76 00             	lea    esi,[esi+0x0]
c002700c:	31 f6                	xor    esi,esi
c002700e:	31 c9                	xor    ecx,ecx
c0027010:	e9 7b ff ff ff       	jmp    c0026f90 <__divdi3+0x58>
c0027015:	8d 76 00             	lea    esi,[esi+0x0]
c0027018:	b8 20 00 00 00       	mov    eax,0x20
c002701d:	29 f0                	sub    eax,esi
c002701f:	89 f1                	mov    ecx,esi
c0027021:	d3 e3                	shl    ebx,cl
c0027023:	89 fa                	mov    edx,edi
c0027025:	88 c1                	mov    cl,al
c0027027:	d3 ea                	shr    edx,cl
c0027029:	09 da                	or     edx,ebx
c002702b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002702f:	89 f1                	mov    ecx,esi
c0027031:	d3 e7                	shl    edi,cl
c0027033:	89 eb                	mov    ebx,ebp
c0027035:	88 c1                	mov    cl,al
c0027037:	d3 eb                	shr    ebx,cl
c0027039:	89 f1                	mov    ecx,esi
c002703b:	d3 e5                	shl    ebp,cl
c002703d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027040:	88 c1                	mov    cl,al
c0027042:	d3 ea                	shr    edx,cl
c0027044:	09 d5                	or     ebp,edx
c0027046:	89 e8                	mov    eax,ebp
c0027048:	89 da                	mov    edx,ebx
c002704a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002704e:	89 d3                	mov    ebx,edx
c0027050:	89 c5                	mov    ebp,eax
c0027052:	f7 e7                	mul    edi
c0027054:	39 d3                	cmp    ebx,edx
c0027056:	72 18                	jb     c0027070 <__divdi3+0x138>
c0027058:	74 0a                	je     c0027064 <__divdi3+0x12c>
c002705a:	89 e9                	mov    ecx,ebp
c002705c:	31 f6                	xor    esi,esi
c002705e:	e9 2d ff ff ff       	jmp    c0026f90 <__divdi3+0x58>
c0027063:	90                   	nop
c0027064:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027067:	89 f1                	mov    ecx,esi
c0027069:	d3 e7                	shl    edi,cl
c002706b:	39 c7                	cmp    edi,eax
c002706d:	73 eb                	jae    c002705a <__divdi3+0x122>
c002706f:	90                   	nop
c0027070:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027073:	31 f6                	xor    esi,esi
c0027075:	e9 16 ff ff ff       	jmp    c0026f90 <__divdi3+0x58>
c002707a:	66 90                	xchg   ax,ax
c002707c:	31 c9                	xor    ecx,ecx
c002707e:	e9 0d ff ff ff       	jmp    c0026f90 <__divdi3+0x58>
c0027083:	90                   	nop

c0027084 <__moddi3>:
c0027084:	55                   	push   ebp
c0027085:	57                   	push   edi
c0027086:	56                   	push   esi
c0027087:	53                   	push   ebx
c0027088:	83 ec 2c             	sub    esp,0x2c
c002708b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002708f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027093:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027097:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002709b:	85 db                	test   ebx,ebx
c002709d:	0f 88 85 00 00 00    	js     c0027128 <__moddi3+0xa4>
c00270a3:	89 de                	mov    esi,ebx
c00270a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00270ad:	89 d7                	mov    edi,edx
c00270af:	85 d2                	test   edx,edx
c00270b1:	79 09                	jns    c00270bc <__moddi3+0x38>
c00270b3:	f7 d8                	neg    eax
c00270b5:	83 d2 00             	adc    edx,0x0
c00270b8:	f7 da                	neg    edx
c00270ba:	89 d7                	mov    edi,edx
c00270bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270c0:	89 cd                	mov    ebp,ecx
c00270c2:	85 ff                	test   edi,edi
c00270c4:	75 52                	jne    c0027118 <__moddi3+0x94>
c00270c6:	89 c3                	mov    ebx,eax
c00270c8:	39 f0                	cmp    eax,esi
c00270ca:	76 24                	jbe    c00270f0 <__moddi3+0x6c>
c00270cc:	89 c8                	mov    eax,ecx
c00270ce:	89 f2                	mov    edx,esi
c00270d0:	f7 f3                	div    ebx
c00270d2:	89 d6                	mov    esi,edx
c00270d4:	89 f0                	mov    eax,esi
c00270d6:	31 d2                	xor    edx,edx
c00270d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270dc:	85 c9                	test   ecx,ecx
c00270de:	74 07                	je     c00270e7 <__moddi3+0x63>
c00270e0:	f7 d8                	neg    eax
c00270e2:	83 d2 00             	adc    edx,0x0
c00270e5:	f7 da                	neg    edx
c00270e7:	83 c4 2c             	add    esp,0x2c
c00270ea:	5b                   	pop    ebx
c00270eb:	5e                   	pop    esi
c00270ec:	5f                   	pop    edi
c00270ed:	5d                   	pop    ebp
c00270ee:	c3                   	ret    
c00270ef:	90                   	nop
c00270f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270f4:	85 db                	test   ebx,ebx
c00270f6:	75 0d                	jne    c0027105 <__moddi3+0x81>
c00270f8:	b8 01 00 00 00       	mov    eax,0x1
c00270fd:	31 d2                	xor    edx,edx
c00270ff:	f7 f7                	div    edi
c0027101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027105:	89 f0                	mov    eax,esi
c0027107:	31 d2                	xor    edx,edx
c0027109:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002710d:	f7 f7                	div    edi
c002710f:	89 e8                	mov    eax,ebp
c0027111:	f7 f7                	div    edi
c0027113:	89 d6                	mov    esi,edx
c0027115:	eb bd                	jmp    c00270d4 <__moddi3+0x50>
c0027117:	90                   	nop
c0027118:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002711c:	39 f7                	cmp    edi,esi
c002711e:	76 20                	jbe    c0027140 <__moddi3+0xbc>
c0027120:	89 c8                	mov    eax,ecx
c0027122:	89 f2                	mov    edx,esi
c0027124:	eb b2                	jmp    c00270d8 <__moddi3+0x54>
c0027126:	66 90                	xchg   ax,ax
c0027128:	f7 d9                	neg    ecx
c002712a:	83 d3 00             	adc    ebx,0x0
c002712d:	f7 db                	neg    ebx
c002712f:	89 de                	mov    esi,ebx
c0027131:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027139:	e9 6f ff ff ff       	jmp    c00270ad <__moddi3+0x29>
c002713e:	66 90                	xchg   ax,ax
c0027140:	0f bd c7             	bsr    eax,edi
c0027143:	83 f0 1f             	xor    eax,0x1f
c0027146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002714a:	75 24                	jne    c0027170 <__moddi3+0xec>
c002714c:	39 f7                	cmp    edi,esi
c002714e:	72 06                	jb     c0027156 <__moddi3+0xd2>
c0027150:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027154:	77 0c                	ja     c0027162 <__moddi3+0xde>
c0027156:	89 e9                	mov    ecx,ebp
c0027158:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002715c:	19 fe                	sbb    esi,edi
c002715e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027162:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027166:	89 f2                	mov    edx,esi
c0027168:	e9 6b ff ff ff       	jmp    c00270d8 <__moddi3+0x54>
c002716d:	8d 76 00             	lea    esi,[esi+0x0]
c0027170:	b8 20 00 00 00       	mov    eax,0x20
c0027175:	89 c2                	mov    edx,eax
c0027177:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002717b:	29 da                	sub    edx,ebx
c002717d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027181:	88 d9                	mov    cl,bl
c0027183:	d3 e7                	shl    edi,cl
c0027185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027189:	88 d1                	mov    cl,dl
c002718b:	d3 e8                	shr    eax,cl
c002718d:	09 c7                	or     edi,eax
c002718f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027193:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027197:	89 d8                	mov    eax,ebx
c0027199:	88 d9                	mov    cl,bl
c002719b:	d3 e7                	shl    edi,cl
c002719d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00271a1:	89 f3                	mov    ebx,esi
c00271a3:	88 d1                	mov    cl,dl
c00271a5:	d3 eb                	shr    ebx,cl
c00271a7:	89 c7                	mov    edi,eax
c00271a9:	88 c1                	mov    cl,al
c00271ab:	d3 e6                	shl    esi,cl
c00271ad:	89 e8                	mov    eax,ebp
c00271af:	88 d1                	mov    cl,dl
c00271b1:	d3 e8                	shr    eax,cl
c00271b3:	09 f0                	or     eax,esi
c00271b5:	89 f9                	mov    ecx,edi
c00271b7:	d3 e5                	shl    ebp,cl
c00271b9:	89 da                	mov    edx,ebx
c00271bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00271bf:	89 d3                	mov    ebx,edx
c00271c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271c5:	89 c6                	mov    esi,eax
c00271c7:	89 d1                	mov    ecx,edx
c00271c9:	39 d3                	cmp    ebx,edx
c00271cb:	72 27                	jb     c00271f4 <__moddi3+0x170>
c00271cd:	74 21                	je     c00271f0 <__moddi3+0x16c>
c00271cf:	29 f5                	sub    ebp,esi
c00271d1:	19 cb                	sbb    ebx,ecx
c00271d3:	89 de                	mov    esi,ebx
c00271d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271d9:	d3 e6                	shl    esi,cl
c00271db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271df:	89 f9                	mov    ecx,edi
c00271e1:	d3 ed                	shr    ebp,cl
c00271e3:	09 ee                	or     esi,ebp
c00271e5:	89 f0                	mov    eax,esi
c00271e7:	d3 eb                	shr    ebx,cl
c00271e9:	89 da                	mov    edx,ebx
c00271eb:	e9 e8 fe ff ff       	jmp    c00270d8 <__moddi3+0x54>
c00271f0:	39 c5                	cmp    ebp,eax
c00271f2:	73 db                	jae    c00271cf <__moddi3+0x14b>
c00271f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271fc:	89 d1                	mov    ecx,edx
c00271fe:	89 c6                	mov    esi,eax
c0027200:	eb cd                	jmp    c00271cf <__moddi3+0x14b>
c0027202:	66 90                	xchg   ax,ax

c0027204 <__udivdi3>:
c0027204:	55                   	push   ebp
c0027205:	57                   	push   edi
c0027206:	56                   	push   esi
c0027207:	53                   	push   ebx
c0027208:	83 ec 1c             	sub    esp,0x1c
c002720b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002720f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027213:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027217:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002721b:	85 d2                	test   edx,edx
c002721d:	75 41                	jne    c0027260 <__udivdi3+0x5c>
c002721f:	39 f7                	cmp    edi,esi
c0027221:	76 15                	jbe    c0027238 <__udivdi3+0x34>
c0027223:	89 e8                	mov    eax,ebp
c0027225:	89 f2                	mov    edx,esi
c0027227:	f7 f7                	div    edi
c0027229:	31 db                	xor    ebx,ebx
c002722b:	89 da                	mov    edx,ebx
c002722d:	83 c4 1c             	add    esp,0x1c
c0027230:	5b                   	pop    ebx
c0027231:	5e                   	pop    esi
c0027232:	5f                   	pop    edi
c0027233:	5d                   	pop    ebp
c0027234:	c3                   	ret    
c0027235:	8d 76 00             	lea    esi,[esi+0x0]
c0027238:	89 f9                	mov    ecx,edi
c002723a:	85 ff                	test   edi,edi
c002723c:	75 0b                	jne    c0027249 <__udivdi3+0x45>
c002723e:	b8 01 00 00 00       	mov    eax,0x1
c0027243:	31 d2                	xor    edx,edx
c0027245:	f7 f7                	div    edi
c0027247:	89 c1                	mov    ecx,eax
c0027249:	31 d2                	xor    edx,edx
c002724b:	89 f0                	mov    eax,esi
c002724d:	f7 f1                	div    ecx
c002724f:	89 c3                	mov    ebx,eax
c0027251:	89 e8                	mov    eax,ebp
c0027253:	f7 f1                	div    ecx
c0027255:	89 da                	mov    edx,ebx
c0027257:	83 c4 1c             	add    esp,0x1c
c002725a:	5b                   	pop    ebx
c002725b:	5e                   	pop    esi
c002725c:	5f                   	pop    edi
c002725d:	5d                   	pop    ebp
c002725e:	c3                   	ret    
c002725f:	90                   	nop
c0027260:	39 f2                	cmp    edx,esi
c0027262:	77 1c                	ja     c0027280 <__udivdi3+0x7c>
c0027264:	0f bd da             	bsr    ebx,edx
c0027267:	83 f3 1f             	xor    ebx,0x1f
c002726a:	75 24                	jne    c0027290 <__udivdi3+0x8c>
c002726c:	39 f2                	cmp    edx,esi
c002726e:	72 08                	jb     c0027278 <__udivdi3+0x74>
c0027270:	39 ef                	cmp    edi,ebp
c0027272:	0f 87 84 00 00 00    	ja     c00272fc <__udivdi3+0xf8>
c0027278:	b8 01 00 00 00       	mov    eax,0x1
c002727d:	eb ac                	jmp    c002722b <__udivdi3+0x27>
c002727f:	90                   	nop
c0027280:	31 db                	xor    ebx,ebx
c0027282:	31 c0                	xor    eax,eax
c0027284:	89 da                	mov    edx,ebx
c0027286:	83 c4 1c             	add    esp,0x1c
c0027289:	5b                   	pop    ebx
c002728a:	5e                   	pop    esi
c002728b:	5f                   	pop    edi
c002728c:	5d                   	pop    ebp
c002728d:	c3                   	ret    
c002728e:	66 90                	xchg   ax,ax
c0027290:	b8 20 00 00 00       	mov    eax,0x20
c0027295:	29 d8                	sub    eax,ebx
c0027297:	88 d9                	mov    cl,bl
c0027299:	d3 e2                	shl    edx,cl
c002729b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002729f:	89 fa                	mov    edx,edi
c00272a1:	88 c1                	mov    cl,al
c00272a3:	d3 ea                	shr    edx,cl
c00272a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00272a9:	09 d1                	or     ecx,edx
c00272ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00272af:	88 d9                	mov    cl,bl
c00272b1:	d3 e7                	shl    edi,cl
c00272b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272b7:	89 f7                	mov    edi,esi
c00272b9:	88 c1                	mov    cl,al
c00272bb:	d3 ef                	shr    edi,cl
c00272bd:	88 d9                	mov    cl,bl
c00272bf:	d3 e6                	shl    esi,cl
c00272c1:	89 ea                	mov    edx,ebp
c00272c3:	88 c1                	mov    cl,al
c00272c5:	d3 ea                	shr    edx,cl
c00272c7:	09 d6                	or     esi,edx
c00272c9:	89 f0                	mov    eax,esi
c00272cb:	89 fa                	mov    edx,edi
c00272cd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272d1:	89 d7                	mov    edi,edx
c00272d3:	89 c6                	mov    esi,eax
c00272d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272d9:	39 d7                	cmp    edi,edx
c00272db:	72 13                	jb     c00272f0 <__udivdi3+0xec>
c00272dd:	74 09                	je     c00272e8 <__udivdi3+0xe4>
c00272df:	89 f0                	mov    eax,esi
c00272e1:	31 db                	xor    ebx,ebx
c00272e3:	e9 43 ff ff ff       	jmp    c002722b <__udivdi3+0x27>
c00272e8:	88 d9                	mov    cl,bl
c00272ea:	d3 e5                	shl    ebp,cl
c00272ec:	39 c5                	cmp    ebp,eax
c00272ee:	73 ef                	jae    c00272df <__udivdi3+0xdb>
c00272f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272f3:	31 db                	xor    ebx,ebx
c00272f5:	e9 31 ff ff ff       	jmp    c002722b <__udivdi3+0x27>
c00272fa:	66 90                	xchg   ax,ax
c00272fc:	31 c0                	xor    eax,eax
c00272fe:	e9 28 ff ff ff       	jmp    c002722b <__udivdi3+0x27>
c0027303:	90                   	nop

c0027304 <__umoddi3>:
c0027304:	55                   	push   ebp
c0027305:	57                   	push   edi
c0027306:	56                   	push   esi
c0027307:	53                   	push   ebx
c0027308:	83 ec 1c             	sub    esp,0x1c
c002730b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002730f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027313:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027317:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002731b:	89 da                	mov    edx,ebx
c002731d:	85 c0                	test   eax,eax
c002731f:	75 37                	jne    c0027358 <__umoddi3+0x54>
c0027321:	39 df                	cmp    edi,ebx
c0027323:	76 13                	jbe    c0027338 <__umoddi3+0x34>
c0027325:	89 f0                	mov    eax,esi
c0027327:	f7 f7                	div    edi
c0027329:	89 d0                	mov    eax,edx
c002732b:	31 d2                	xor    edx,edx
c002732d:	83 c4 1c             	add    esp,0x1c
c0027330:	5b                   	pop    ebx
c0027331:	5e                   	pop    esi
c0027332:	5f                   	pop    edi
c0027333:	5d                   	pop    ebp
c0027334:	c3                   	ret    
c0027335:	8d 76 00             	lea    esi,[esi+0x0]
c0027338:	89 fd                	mov    ebp,edi
c002733a:	85 ff                	test   edi,edi
c002733c:	75 0b                	jne    c0027349 <__umoddi3+0x45>
c002733e:	b8 01 00 00 00       	mov    eax,0x1
c0027343:	31 d2                	xor    edx,edx
c0027345:	f7 f7                	div    edi
c0027347:	89 c5                	mov    ebp,eax
c0027349:	89 d8                	mov    eax,ebx
c002734b:	31 d2                	xor    edx,edx
c002734d:	f7 f5                	div    ebp
c002734f:	89 f0                	mov    eax,esi
c0027351:	f7 f5                	div    ebp
c0027353:	89 d0                	mov    eax,edx
c0027355:	eb d4                	jmp    c002732b <__umoddi3+0x27>
c0027357:	90                   	nop
c0027358:	89 f1                	mov    ecx,esi
c002735a:	39 d8                	cmp    eax,ebx
c002735c:	76 0a                	jbe    c0027368 <__umoddi3+0x64>
c002735e:	89 f0                	mov    eax,esi
c0027360:	83 c4 1c             	add    esp,0x1c
c0027363:	5b                   	pop    ebx
c0027364:	5e                   	pop    esi
c0027365:	5f                   	pop    edi
c0027366:	5d                   	pop    ebp
c0027367:	c3                   	ret    
c0027368:	0f bd e8             	bsr    ebp,eax
c002736b:	83 f5 1f             	xor    ebp,0x1f
c002736e:	75 1c                	jne    c002738c <__umoddi3+0x88>
c0027370:	39 d8                	cmp    eax,ebx
c0027372:	72 04                	jb     c0027378 <__umoddi3+0x74>
c0027374:	39 f7                	cmp    edi,esi
c0027376:	77 08                	ja     c0027380 <__umoddi3+0x7c>
c0027378:	89 da                	mov    edx,ebx
c002737a:	29 fe                	sub    esi,edi
c002737c:	19 c2                	sbb    edx,eax
c002737e:	89 f1                	mov    ecx,esi
c0027380:	89 c8                	mov    eax,ecx
c0027382:	83 c4 1c             	add    esp,0x1c
c0027385:	5b                   	pop    ebx
c0027386:	5e                   	pop    esi
c0027387:	5f                   	pop    edi
c0027388:	5d                   	pop    ebp
c0027389:	c3                   	ret    
c002738a:	66 90                	xchg   ax,ax
c002738c:	ba 20 00 00 00       	mov    edx,0x20
c0027391:	29 ea                	sub    edx,ebp
c0027393:	89 e9                	mov    ecx,ebp
c0027395:	d3 e0                	shl    eax,cl
c0027397:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002739b:	89 f8                	mov    eax,edi
c002739d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00273a1:	88 d1                	mov    cl,dl
c00273a3:	d3 e8                	shr    eax,cl
c00273a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00273a9:	09 c1                	or     ecx,eax
c00273ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00273af:	89 e9                	mov    ecx,ebp
c00273b1:	d3 e7                	shl    edi,cl
c00273b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273b7:	89 d8                	mov    eax,ebx
c00273b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00273bd:	88 d1                	mov    cl,dl
c00273bf:	d3 e8                	shr    eax,cl
c00273c1:	89 c7                	mov    edi,eax
c00273c3:	89 e9                	mov    ecx,ebp
c00273c5:	d3 e3                	shl    ebx,cl
c00273c7:	89 f0                	mov    eax,esi
c00273c9:	88 d1                	mov    cl,dl
c00273cb:	d3 e8                	shr    eax,cl
c00273cd:	09 d8                	or     eax,ebx
c00273cf:	89 e9                	mov    ecx,ebp
c00273d1:	d3 e6                	shl    esi,cl
c00273d3:	89 f3                	mov    ebx,esi
c00273d5:	89 fa                	mov    edx,edi
c00273d7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273db:	89 d1                	mov    ecx,edx
c00273dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273e1:	89 c6                	mov    esi,eax
c00273e3:	89 d7                	mov    edi,edx
c00273e5:	39 d1                	cmp    ecx,edx
c00273e7:	72 27                	jb     c0027410 <__umoddi3+0x10c>
c00273e9:	74 21                	je     c002740c <__umoddi3+0x108>
c00273eb:	89 ca                	mov    edx,ecx
c00273ed:	29 f3                	sub    ebx,esi
c00273ef:	19 fa                	sbb    edx,edi
c00273f1:	89 d0                	mov    eax,edx
c00273f3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273f7:	d3 e0                	shl    eax,cl
c00273f9:	89 e9                	mov    ecx,ebp
c00273fb:	d3 eb                	shr    ebx,cl
c00273fd:	09 d8                	or     eax,ebx
c00273ff:	d3 ea                	shr    edx,cl
c0027401:	83 c4 1c             	add    esp,0x1c
c0027404:	5b                   	pop    ebx
c0027405:	5e                   	pop    esi
c0027406:	5f                   	pop    edi
c0027407:	5d                   	pop    ebp
c0027408:	c3                   	ret    
c0027409:	8d 76 00             	lea    esi,[esi+0x0]
c002740c:	39 c3                	cmp    ebx,eax
c002740e:	73 db                	jae    c00273eb <__umoddi3+0xe7>
c0027410:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027414:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027418:	89 d7                	mov    edi,edx
c002741a:	89 c6                	mov    esi,eax
c002741c:	eb cd                	jmp    c00273eb <__umoddi3+0xe7>

c002741e <__addsf3>:
c002741e:	55                   	push   ebp
c002741f:	89 e5                	mov    ebp,esp
c0027421:	57                   	push   edi
c0027422:	56                   	push   esi
c0027423:	53                   	push   ebx
c0027424:	83 ec 08             	sub    esp,0x8
c0027427:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002742a:	89 fa                	mov    edx,edi
c002742c:	89 f8                	mov    eax,edi
c002742e:	c1 f8 17             	sar    eax,0x17
c0027431:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027434:	c1 e2 08             	shl    edx,0x8
c0027437:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002743d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027440:	89 de                	mov    esi,ebx
c0027442:	c1 fe 17             	sar    esi,0x17
c0027445:	c1 e3 08             	shl    ebx,0x8
c0027448:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002744e:	31 f0                	xor    eax,esi
c0027450:	0f 88 3b 01 00 00    	js     c0027591 <__addsf3+0x173>
c0027456:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027459:	29 f1                	sub    ecx,esi
c002745b:	85 c9                	test   ecx,ecx
c002745d:	7e 54                	jle    c00274b3 <__addsf3+0x95>
c002745f:	89 f0                	mov    eax,esi
c0027461:	84 c0                	test   al,al
c0027463:	75 10                	jne    c0027475 <__addsf3+0x57>
c0027465:	85 db                	test   ebx,ebx
c0027467:	0f 84 aa 02 00 00    	je     c0027717 <__addsf3+0x2f9>
c002746d:	49                   	dec    ecx
c002746e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027471:	74 38                	je     c00274ab <__addsf3+0x8d>
c0027473:	eb 13                	jmp    c0027488 <__addsf3+0x6a>
c0027475:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027478:	f7 d0                	not    eax
c002747a:	84 c0                	test   al,al
c002747c:	0f 84 95 02 00 00    	je     c0027717 <__addsf3+0x2f9>
c0027482:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027488:	83 f9 1f             	cmp    ecx,0x1f
c002748b:	0f 8f 86 02 00 00    	jg     c0027717 <__addsf3+0x2f9>
c0027491:	89 de                	mov    esi,ebx
c0027493:	d3 ee                	shr    esi,cl
c0027495:	b8 20 00 00 00       	mov    eax,0x20
c002749a:	29 c8                	sub    eax,ecx
c002749c:	89 c1                	mov    ecx,eax
c002749e:	d3 e3                	shl    ebx,cl
c00274a0:	31 c0                	xor    eax,eax
c00274a2:	85 db                	test   ebx,ebx
c00274a4:	0f 95 c0             	setne  al
c00274a7:	09 f0                	or     eax,esi
c00274a9:	01 d0                	add    eax,edx
c00274ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00274ae:	e9 b6 00 00 00       	jmp    c0027569 <__addsf3+0x14b>
c00274b3:	74 5c                	je     c0027511 <__addsf3+0xf3>
c00274b5:	89 f1                	mov    ecx,esi
c00274b7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00274ba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274bd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274c1:	75 14                	jne    c00274d7 <__addsf3+0xb9>
c00274c3:	85 d2                	test   edx,edx
c00274c5:	0f 84 4c 02 00 00    	je     c0027717 <__addsf3+0x2f9>
c00274cb:	49                   	dec    ecx
c00274cc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274cf:	0f 84 94 00 00 00    	je     c0027569 <__addsf3+0x14b>
c00274d5:	eb 12                	jmp    c00274e9 <__addsf3+0xcb>
c00274d7:	89 f0                	mov    eax,esi
c00274d9:	f7 d0                	not    eax
c00274db:	84 c0                	test   al,al
c00274dd:	0f 84 34 02 00 00    	je     c0027717 <__addsf3+0x2f9>
c00274e3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274ec:	83 f9 1f             	cmp    ecx,0x1f
c00274ef:	0f 8f 22 02 00 00    	jg     c0027717 <__addsf3+0x2f9>
c00274f5:	89 d7                	mov    edi,edx
c00274f7:	d3 ef                	shr    edi,cl
c00274f9:	b8 20 00 00 00       	mov    eax,0x20
c00274fe:	29 c8                	sub    eax,ecx
c0027500:	89 c1                	mov    ecx,eax
c0027502:	d3 e2                	shl    edx,cl
c0027504:	31 c0                	xor    eax,eax
c0027506:	85 d2                	test   edx,edx
c0027508:	0f 95 c0             	setne  al
c002750b:	09 f8                	or     eax,edi
c002750d:	01 d8                	add    eax,ebx
c002750f:	eb 58                	jmp    c0027569 <__addsf3+0x14b>
c0027511:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027514:	8d 70 01             	lea    esi,[eax+0x1]
c0027517:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002751d:	75 32                	jne    c0027551 <__addsf3+0x133>
c002751f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027523:	75 1f                	jne    c0027544 <__addsf3+0x126>
c0027525:	85 d2                	test   edx,edx
c0027527:	0f 84 e0 01 00 00    	je     c002770d <__addsf3+0x2ef>
c002752d:	85 db                	test   ebx,ebx
c002752f:	0f 84 e2 01 00 00    	je     c0027717 <__addsf3+0x2f9>
c0027535:	89 d0                	mov    eax,edx
c0027537:	01 d8                	add    eax,ebx
c0027539:	0f 89 a9 01 00 00    	jns    c00276e8 <__addsf3+0x2ca>
c002753f:	e9 9d 01 00 00       	jmp    c00276e1 <__addsf3+0x2c3>
c0027544:	85 d2                	test   edx,edx
c0027546:	0f 85 cb 01 00 00    	jne    c0027717 <__addsf3+0x2f9>
c002754c:	e9 bc 01 00 00       	jmp    c002770d <__addsf3+0x2ef>
c0027551:	31 c0                	xor    eax,eax
c0027553:	89 f1                	mov    ecx,esi
c0027555:	f7 d1                	not    ecx
c0027557:	84 c9                	test   cl,cl
c0027559:	0f 84 90 01 00 00    	je     c00276ef <__addsf3+0x2d1>
c002755f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027562:	d1 e8                	shr    eax,1
c0027564:	e9 86 01 00 00       	jmp    c00276ef <__addsf3+0x2d1>
c0027569:	85 c0                	test   eax,eax
c002756b:	0f 89 7e 01 00 00    	jns    c00276ef <__addsf3+0x2d1>
c0027571:	46                   	inc    esi
c0027572:	89 f2                	mov    edx,esi
c0027574:	f7 d2                	not    edx
c0027576:	84 d2                	test   dl,dl
c0027578:	0f 84 6f 01 00 00    	je     c00276ed <__addsf3+0x2cf>
c002757e:	89 c2                	mov    edx,eax
c0027580:	83 e2 01             	and    edx,0x1
c0027583:	d1 e8                	shr    eax,1
c0027585:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002758a:	09 d0                	or     eax,edx
c002758c:	e9 5e 01 00 00       	jmp    c00276ef <__addsf3+0x2d1>
c0027591:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027595:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027598:	89 f0                	mov    eax,esi
c002759a:	0f b6 c0             	movzx  eax,al
c002759d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275a0:	29 c1                	sub    ecx,eax
c00275a2:	85 c9                	test   ecx,ecx
c00275a4:	7e 55                	jle    c00275fb <__addsf3+0x1dd>
c00275a6:	85 c0                	test   eax,eax
c00275a8:	75 11                	jne    c00275bb <__addsf3+0x19d>
c00275aa:	85 db                	test   ebx,ebx
c00275ac:	0f 84 65 01 00 00    	je     c0027717 <__addsf3+0x2f9>
c00275b2:	49                   	dec    ecx
c00275b3:	75 19                	jne    c00275ce <__addsf3+0x1b0>
c00275b5:	89 d0                	mov    eax,edx
c00275b7:	29 d8                	sub    eax,ebx
c00275b9:	eb 38                	jmp    c00275f3 <__addsf3+0x1d5>
c00275bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275be:	f7 d0                	not    eax
c00275c0:	84 c0                	test   al,al
c00275c2:	0f 84 4f 01 00 00    	je     c0027717 <__addsf3+0x2f9>
c00275c8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275ce:	83 f9 1f             	cmp    ecx,0x1f
c00275d1:	0f 8f 40 01 00 00    	jg     c0027717 <__addsf3+0x2f9>
c00275d7:	89 de                	mov    esi,ebx
c00275d9:	d3 ee                	shr    esi,cl
c00275db:	b8 20 00 00 00       	mov    eax,0x20
c00275e0:	29 c8                	sub    eax,ecx
c00275e2:	89 c1                	mov    ecx,eax
c00275e4:	d3 e3                	shl    ebx,cl
c00275e6:	31 c0                	xor    eax,eax
c00275e8:	85 db                	test   ebx,ebx
c00275ea:	0f 95 c0             	setne  al
c00275ed:	09 f0                	or     eax,esi
c00275ef:	29 c2                	sub    edx,eax
c00275f1:	89 d0                	mov    eax,edx
c00275f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275f6:	e9 af 00 00 00       	jmp    c00276aa <__addsf3+0x28c>
c00275fb:	74 5c                	je     c0027659 <__addsf3+0x23b>
c00275fd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027600:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027603:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027607:	75 14                	jne    c002761d <__addsf3+0x1ff>
c0027609:	85 d2                	test   edx,edx
c002760b:	0f 84 06 01 00 00    	je     c0027717 <__addsf3+0x2f9>
c0027611:	48                   	dec    eax
c0027612:	75 1b                	jne    c002762f <__addsf3+0x211>
c0027614:	89 d8                	mov    eax,ebx
c0027616:	29 d0                	sub    eax,edx
c0027618:	e9 8d 00 00 00       	jmp    c00276aa <__addsf3+0x28c>
c002761d:	89 f1                	mov    ecx,esi
c002761f:	f7 d1                	not    ecx
c0027621:	84 c9                	test   cl,cl
c0027623:	0f 84 ee 00 00 00    	je     c0027717 <__addsf3+0x2f9>
c0027629:	81 ca 00 00 00 80    	or     edx,0x80000000
c002762f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027632:	83 f8 1f             	cmp    eax,0x1f
c0027635:	0f 8f dc 00 00 00    	jg     c0027717 <__addsf3+0x2f9>
c002763b:	89 d7                	mov    edi,edx
c002763d:	88 c1                	mov    cl,al
c002763f:	d3 ef                	shr    edi,cl
c0027641:	b9 20 00 00 00       	mov    ecx,0x20
c0027646:	29 c1                	sub    ecx,eax
c0027648:	d3 e2                	shl    edx,cl
c002764a:	31 c0                	xor    eax,eax
c002764c:	85 d2                	test   edx,edx
c002764e:	0f 95 c0             	setne  al
c0027651:	09 f8                	or     eax,edi
c0027653:	29 c3                	sub    ebx,eax
c0027655:	89 d8                	mov    eax,ebx
c0027657:	eb 51                	jmp    c00276aa <__addsf3+0x28c>
c0027659:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002765c:	40                   	inc    eax
c002765d:	a8 fe                	test   al,0xfe
c002765f:	75 3d                	jne    c002769e <__addsf3+0x280>
c0027661:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027665:	0f 85 a7 00 00 00    	jne    c0027712 <__addsf3+0x2f4>
c002766b:	85 d2                	test   edx,edx
c002766d:	75 12                	jne    c0027681 <__addsf3+0x263>
c002766f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027672:	85 db                	test   ebx,ebx
c0027674:	0f 85 9d 00 00 00    	jne    c0027717 <__addsf3+0x2f9>
c002767a:	31 ff                	xor    edi,edi
c002767c:	e9 96 00 00 00       	jmp    c0027717 <__addsf3+0x2f9>
c0027681:	85 db                	test   ebx,ebx
c0027683:	0f 84 8e 00 00 00    	je     c0027717 <__addsf3+0x2f9>
c0027689:	89 d0                	mov    eax,edx
c002768b:	29 d8                	sub    eax,ebx
c002768d:	79 06                	jns    c0027695 <__addsf3+0x277>
c002768f:	89 d8                	mov    eax,ebx
c0027691:	29 d0                	sub    eax,edx
c0027693:	eb 5a                	jmp    c00276ef <__addsf3+0x2d1>
c0027695:	bf 00 00 00 00       	mov    edi,0x0
c002769a:	74 7b                	je     c0027717 <__addsf3+0x2f9>
c002769c:	eb 4a                	jmp    c00276e8 <__addsf3+0x2ca>
c002769e:	89 d0                	mov    eax,edx
c00276a0:	29 d8                	sub    eax,ebx
c00276a2:	79 12                	jns    c00276b6 <__addsf3+0x298>
c00276a4:	89 d8                	mov    eax,ebx
c00276a6:	29 d0                	sub    eax,edx
c00276a8:	eb 09                	jmp    c00276b3 <__addsf3+0x295>
c00276aa:	85 c0                	test   eax,eax
c00276ac:	79 41                	jns    c00276ef <__addsf3+0x2d1>
c00276ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276b3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00276b6:	31 f6                	xor    esi,esi
c00276b8:	85 c0                	test   eax,eax
c00276ba:	74 33                	je     c00276ef <__addsf3+0x2d1>
c00276bc:	0f bd c8             	bsr    ecx,eax
c00276bf:	83 f1 1f             	xor    ecx,0x1f
c00276c2:	d3 e0                	shl    eax,cl
c00276c4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276c8:	39 ca                	cmp    edx,ecx
c00276ca:	7f 10                	jg     c00276dc <__addsf3+0x2be>
c00276cc:	29 d1                	sub    ecx,edx
c00276ce:	41                   	inc    ecx
c00276cf:	d3 e8                	shr    eax,cl
c00276d1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276d4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276da:	eb 13                	jmp    c00276ef <__addsf3+0x2d1>
c00276dc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276df:	29 ce                	sub    esi,ecx
c00276e1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276e6:	eb 07                	jmp    c00276ef <__addsf3+0x2d1>
c00276e8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276eb:	eb 02                	jmp    c00276ef <__addsf3+0x2d1>
c00276ed:	31 c0                	xor    eax,eax
c00276ef:	89 c2                	mov    edx,eax
c00276f1:	c1 ea 08             	shr    edx,0x8
c00276f4:	a8 7f                	test   al,0x7f
c00276f6:	0f 95 c1             	setne  cl
c00276f9:	09 d1                	or     ecx,edx
c00276fb:	83 e1 01             	and    ecx,0x1
c00276fe:	c1 e8 07             	shr    eax,0x7
c0027701:	21 c8                	and    eax,ecx
c0027703:	c1 e6 17             	shl    esi,0x17
c0027706:	09 d6                	or     esi,edx
c0027708:	8d 3c 30             	lea    edi,[eax+esi*1]
c002770b:	eb 0a                	jmp    c0027717 <__addsf3+0x2f9>
c002770d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027710:	eb 05                	jmp    c0027717 <__addsf3+0x2f9>
c0027712:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027717:	89 f8                	mov    eax,edi
c0027719:	5a                   	pop    edx
c002771a:	59                   	pop    ecx
c002771b:	5b                   	pop    ebx
c002771c:	5e                   	pop    esi
c002771d:	5f                   	pop    edi
c002771e:	5d                   	pop    ebp
c002771f:	c3                   	ret    

c0027720 <__subsf3>:
c0027720:	55                   	push   ebp
c0027721:	89 e5                	mov    ebp,esp
c0027723:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027726:	05 00 00 00 80       	add    eax,0x80000000
c002772b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002772e:	5d                   	pop    ebp
c002772f:	e9 ea fc ff ff       	jmp    c002741e <__addsf3>

c0027734 <__negsf2>:
c0027734:	55                   	push   ebp
c0027735:	89 e5                	mov    ebp,esp
c0027737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002773a:	05 00 00 00 80       	add    eax,0x80000000
c002773f:	5d                   	pop    ebp
c0027740:	c3                   	ret    

c0027741 <__mulsf3>:
c0027741:	55                   	push   ebp
c0027742:	89 e5                	mov    ebp,esp
c0027744:	57                   	push   edi
c0027745:	56                   	push   esi
c0027746:	53                   	push   ebx
c0027747:	83 ec 1c             	sub    esp,0x1c
c002774a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002774d:	89 f0                	mov    eax,esi
c002774f:	89 f1                	mov    ecx,esi
c0027751:	c1 f9 17             	sar    ecx,0x17
c0027754:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027757:	c1 e0 08             	shl    eax,0x8
c002775a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002775f:	89 c1                	mov    ecx,eax
c0027761:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027764:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027767:	89 c7                	mov    edi,eax
c0027769:	c1 ff 17             	sar    edi,0x17
c002776c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027770:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027773:	89 f8                	mov    eax,edi
c0027775:	0f b6 c0             	movzx  eax,al
c0027778:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002777b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002777f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027782:	42                   	inc    edx
c0027783:	80 e2 fe             	and    dl,0xfe
c0027786:	75 7b                	jne    c0027803 <__mulsf3+0xc2>
c0027788:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002778c:	74 54                	je     c00277e2 <__mulsf3+0xa1>
c002778e:	85 c9                	test   ecx,ecx
c0027790:	0f 85 64 01 00 00    	jne    c00278fa <__mulsf3+0x1b9>
c0027796:	8d 57 01             	lea    edx,[edi+0x1]
c0027799:	80 e2 fe             	and    dl,0xfe
c002779c:	75 1f                	jne    c00277bd <__mulsf3+0x7c>
c002779e:	85 c0                	test   eax,eax
c00277a0:	b8 00 00 00 00       	mov    eax,0x0
c00277a5:	74 29                	je     c00277d0 <__mulsf3+0x8f>
c00277a7:	53                   	push   ebx
c00277a8:	53                   	push   ebx
c00277a9:	50                   	push   eax
c00277aa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277ad:	e8 96 05 00 00       	call   c0027d48 <__nesf2>
c00277b2:	83 c4 10             	add    esp,0x10
c00277b5:	85 c0                	test   eax,eax
c00277b7:	0f 85 3a 01 00 00    	jne    c00278f7 <__mulsf3+0x1b6>
c00277bd:	85 ff                	test   edi,edi
c00277bf:	0f 89 35 01 00 00    	jns    c00278fa <__mulsf3+0x1b9>
c00277c5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277cb:	e9 2a 01 00 00       	jmp    c00278fa <__mulsf3+0x1b9>
c00277d0:	51                   	push   ecx
c00277d1:	51                   	push   ecx
c00277d2:	50                   	push   eax
c00277d3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277d6:	e8 6d 05 00 00       	call   c0027d48 <__nesf2>
c00277db:	83 c4 10             	add    esp,0x10
c00277de:	85 c0                	test   eax,eax
c00277e0:	eb 15                	jmp    c00277f7 <__mulsf3+0xb6>
c00277e2:	85 c9                	test   ecx,ecx
c00277e4:	74 0b                	je     c00277f1 <__mulsf3+0xb0>
c00277e6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277e9:	01 c9                	add    ecx,ecx
c00277eb:	78 16                	js     c0027803 <__mulsf3+0xc2>
c00277ed:	89 d3                	mov    ebx,edx
c00277ef:	eb f5                	jmp    c00277e6 <__mulsf3+0xa5>
c00277f1:	89 f8                	mov    eax,edi
c00277f3:	f7 d0                	not    eax
c00277f5:	84 c0                	test   al,al
c00277f7:	75 c4                	jne    c00277bd <__mulsf3+0x7c>
c00277f9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277fe:	e9 f7 00 00 00       	jmp    c00278fa <__mulsf3+0x1b9>
c0027803:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027806:	c1 e6 08             	shl    esi,0x8
c0027809:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002780f:	8d 57 01             	lea    edx,[edi+0x1]
c0027812:	80 e2 fe             	and    dl,0xfe
c0027815:	75 63                	jne    c002787a <__mulsf3+0x139>
c0027817:	85 c0                	test   eax,eax
c0027819:	74 2f                	je     c002784a <__mulsf3+0x109>
c002781b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002781f:	0f 89 d2 00 00 00    	jns    c00278f7 <__mulsf3+0x1b6>
c0027825:	52                   	push   edx
c0027826:	52                   	push   edx
c0027827:	6a 00                	push   0x0
c0027829:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002782c:	e8 dc 04 00 00       	call   c0027d0d <__eqsf2>
c0027831:	83 c4 10             	add    esp,0x10
c0027834:	85 c0                	test   eax,eax
c0027836:	0f 85 bb 00 00 00    	jne    c00278f7 <__mulsf3+0x1b6>
c002783c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002783f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027845:	e9 b0 00 00 00       	jmp    c00278fa <__mulsf3+0x1b9>
c002784a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002784d:	50                   	push   eax
c002784e:	50                   	push   eax
c002784f:	6a 00                	push   0x0
c0027851:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027854:	e8 b4 04 00 00       	call   c0027d0d <__eqsf2>
c0027859:	83 c4 10             	add    esp,0x10
c002785c:	85 c0                	test   eax,eax
c002785e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027861:	75 0c                	jne    c002786f <__mulsf3+0x12e>
c0027863:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027867:	0f 89 8a 00 00 00    	jns    c00278f7 <__mulsf3+0x1b6>
c002786d:	eb cd                	jmp    c002783c <__mulsf3+0xfb>
c002786f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027872:	01 f6                	add    esi,esi
c0027874:	78 04                	js     c002787a <__mulsf3+0x139>
c0027876:	89 c3                	mov    ebx,eax
c0027878:	eb f5                	jmp    c002786f <__mulsf3+0x12e>
c002787a:	89 c8                	mov    eax,ecx
c002787c:	0d 00 00 00 80       	or     eax,0x80000000
c0027881:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027887:	f7 e6                	mul    esi
c0027889:	85 c0                	test   eax,eax
c002788b:	0f 95 c0             	setne  al
c002788e:	0f b6 c0             	movzx  eax,al
c0027891:	09 c2                	or     edx,eax
c0027893:	78 03                	js     c0027898 <__mulsf3+0x157>
c0027895:	01 d2                	add    edx,edx
c0027897:	4b                   	dec    ebx
c0027898:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002789e:	7f 22                	jg     c00278c2 <__mulsf3+0x181>
c00278a0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278a6:	85 db                	test   ebx,ebx
c00278a8:	7f 23                	jg     c00278cd <__mulsf3+0x18c>
c00278aa:	83 fb e9             	cmp    ebx,0xffffffe9
c00278ad:	7c 1a                	jl     c00278c9 <__mulsf3+0x188>
c00278af:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278b5:	b9 01 00 00 00       	mov    ecx,0x1
c00278ba:	29 d9                	sub    ecx,ebx
c00278bc:	d3 ea                	shr    edx,cl
c00278be:	31 db                	xor    ebx,ebx
c00278c0:	eb 0b                	jmp    c00278cd <__mulsf3+0x18c>
c00278c2:	bb ff 00 00 00       	mov    ebx,0xff
c00278c7:	eb 02                	jmp    c00278cb <__mulsf3+0x18a>
c00278c9:	31 db                	xor    ebx,ebx
c00278cb:	31 d2                	xor    edx,edx
c00278cd:	89 d0                	mov    eax,edx
c00278cf:	c1 e8 08             	shr    eax,0x8
c00278d2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278d5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278db:	09 fb                	or     ebx,edi
c00278dd:	c1 e3 17             	shl    ebx,0x17
c00278e0:	09 c3                	or     ebx,eax
c00278e2:	f6 c2 7f             	test   dl,0x7f
c00278e5:	0f 95 c1             	setne  cl
c00278e8:	09 c8                	or     eax,ecx
c00278ea:	83 e0 01             	and    eax,0x1
c00278ed:	c1 ea 07             	shr    edx,0x7
c00278f0:	21 c2                	and    edx,eax
c00278f2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278f5:	eb 03                	jmp    c00278fa <__mulsf3+0x1b9>
c00278f7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278fa:	89 f0                	mov    eax,esi
c00278fc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278ff:	5b                   	pop    ebx
c0027900:	5e                   	pop    esi
c0027901:	5f                   	pop    edi
c0027902:	5d                   	pop    ebp
c0027903:	c3                   	ret    

c0027904 <__divsf3>:
c0027904:	55                   	push   ebp
c0027905:	89 e5                	mov    ebp,esp
c0027907:	57                   	push   edi
c0027908:	56                   	push   esi
c0027909:	53                   	push   ebx
c002790a:	83 ec 1c             	sub    esp,0x1c
c002790d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027910:	89 d8                	mov    eax,ebx
c0027912:	89 d9                	mov    ecx,ebx
c0027914:	c1 f9 17             	sar    ecx,0x17
c0027917:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002791a:	c1 e0 08             	shl    eax,0x8
c002791d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027922:	89 c1                	mov    ecx,eax
c0027924:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027927:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002792a:	89 c7                	mov    edi,eax
c002792c:	c1 ff 17             	sar    edi,0x17
c002792f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027933:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027936:	89 f8                	mov    eax,edi
c0027938:	0f b6 c0             	movzx  eax,al
c002793b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002793e:	29 c6                	sub    esi,eax
c0027940:	83 c6 7f             	add    esi,0x7f
c0027943:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027946:	42                   	inc    edx
c0027947:	80 e2 fe             	and    dl,0xfe
c002794a:	0f 85 9c 00 00 00    	jne    c00279ec <__divsf3+0xe8>
c0027950:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027954:	74 33                	je     c0027989 <__divsf3+0x85>
c0027956:	85 c9                	test   ecx,ecx
c0027958:	0f 85 c7 01 00 00    	jne    c0027b25 <__divsf3+0x221>
c002795e:	8d 57 01             	lea    edx,[edi+0x1]
c0027961:	80 e2 fe             	and    dl,0xfe
c0027964:	75 2f                	jne    c0027995 <__divsf3+0x91>
c0027966:	85 c0                	test   eax,eax
c0027968:	74 2b                	je     c0027995 <__divsf3+0x91>
c002796a:	51                   	push   ecx
c002796b:	51                   	push   ecx
c002796c:	6a 00                	push   0x0
c002796e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027971:	e8 d2 03 00 00       	call   c0027d48 <__nesf2>
c0027976:	83 c4 10             	add    esp,0x10
c0027979:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002797c:	85 c0                	test   eax,eax
c002797e:	0f 85 a1 01 00 00    	jne    c0027b25 <__divsf3+0x221>
c0027984:	e9 92 01 00 00       	jmp    c0027b1b <__divsf3+0x217>
c0027989:	85 c9                	test   ecx,ecx
c002798b:	75 1b                	jne    c00279a8 <__divsf3+0xa4>
c002798d:	8d 57 01             	lea    edx,[edi+0x1]
c0027990:	80 e2 fe             	and    dl,0xfe
c0027993:	74 1e                	je     c00279b3 <__divsf3+0xaf>
c0027995:	85 ff                	test   edi,edi
c0027997:	0f 89 88 01 00 00    	jns    c0027b25 <__divsf3+0x221>
c002799d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00279a3:	e9 7d 01 00 00       	jmp    c0027b25 <__divsf3+0x221>
c00279a8:	8d 56 ff             	lea    edx,[esi-0x1]
c00279ab:	01 c9                	add    ecx,ecx
c00279ad:	78 3d                	js     c00279ec <__divsf3+0xe8>
c00279af:	89 d6                	mov    esi,edx
c00279b1:	eb f5                	jmp    c00279a8 <__divsf3+0xa4>
c00279b3:	85 c0                	test   eax,eax
c00279b5:	b8 00 00 00 00       	mov    eax,0x0
c00279ba:	74 18                	je     c00279d4 <__divsf3+0xd0>
c00279bc:	52                   	push   edx
c00279bd:	52                   	push   edx
c00279be:	50                   	push   eax
c00279bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279c2:	e8 81 03 00 00       	call   c0027d48 <__nesf2>
c00279c7:	83 c4 10             	add    esp,0x10
c00279ca:	85 c0                	test   eax,eax
c00279cc:	0f 85 50 01 00 00    	jne    c0027b22 <__divsf3+0x21e>
c00279d2:	eb c1                	jmp    c0027995 <__divsf3+0x91>
c00279d4:	56                   	push   esi
c00279d5:	56                   	push   esi
c00279d6:	50                   	push   eax
c00279d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279da:	e8 69 03 00 00       	call   c0027d48 <__nesf2>
c00279df:	83 c4 10             	add    esp,0x10
c00279e2:	85 c0                	test   eax,eax
c00279e4:	0f 84 31 01 00 00    	je     c0027b1b <__divsf3+0x217>
c00279ea:	eb a9                	jmp    c0027995 <__divsf3+0x91>
c00279ec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279ef:	c1 e3 08             	shl    ebx,0x8
c00279f2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279f8:	8d 57 01             	lea    edx,[edi+0x1]
c00279fb:	80 e2 fe             	and    dl,0xfe
c00279fe:	75 71                	jne    c0027a71 <__divsf3+0x16d>
c0027a00:	85 c0                	test   eax,eax
c0027a02:	ba 00 00 00 00       	mov    edx,0x0
c0027a07:	74 2f                	je     c0027a38 <__divsf3+0x134>
c0027a09:	51                   	push   ecx
c0027a0a:	51                   	push   ecx
c0027a0b:	52                   	push   edx
c0027a0c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a0f:	e8 f9 02 00 00       	call   c0027d0d <__eqsf2>
c0027a14:	83 c4 10             	add    esp,0x10
c0027a17:	85 c0                	test   eax,eax
c0027a19:	0f 85 03 01 00 00    	jne    c0027b22 <__divsf3+0x21e>
c0027a1f:	31 d2                	xor    edx,edx
c0027a21:	89 d3                	mov    ebx,edx
c0027a23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a26:	31 f8                	xor    eax,edi
c0027a28:	0f 89 f7 00 00 00    	jns    c0027b25 <__divsf3+0x221>
c0027a2e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a33:	e9 ed 00 00 00       	jmp    c0027b25 <__divsf3+0x221>
c0027a38:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a3b:	50                   	push   eax
c0027a3c:	50                   	push   eax
c0027a3d:	52                   	push   edx
c0027a3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a41:	e8 c7 02 00 00       	call   c0027d0d <__eqsf2>
c0027a46:	83 c4 10             	add    esp,0x10
c0027a49:	85 c0                	test   eax,eax
c0027a4b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a4e:	75 16                	jne    c0027a66 <__divsf3+0x162>
c0027a50:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a53:	31 fb                	xor    ebx,edi
c0027a55:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a5b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a61:	e9 bf 00 00 00       	jmp    c0027b25 <__divsf3+0x221>
c0027a66:	8d 46 01             	lea    eax,[esi+0x1]
c0027a69:	01 db                	add    ebx,ebx
c0027a6b:	78 04                	js     c0027a71 <__divsf3+0x16d>
c0027a6d:	89 c6                	mov    esi,eax
c0027a6f:	eb f5                	jmp    c0027a66 <__divsf3+0x162>
c0027a71:	89 c8                	mov    eax,ecx
c0027a73:	0d 00 00 00 80       	or     eax,0x80000000
c0027a78:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a7e:	31 d2                	xor    edx,edx
c0027a80:	39 d8                	cmp    eax,ebx
c0027a82:	72 07                	jb     c0027a8b <__divsf3+0x187>
c0027a84:	29 d8                	sub    eax,ebx
c0027a86:	ba 01 00 00 00       	mov    edx,0x1
c0027a8b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a92:	01 d2                	add    edx,edx
c0027a94:	89 c1                	mov    ecx,eax
c0027a96:	01 c0                	add    eax,eax
c0027a98:	85 c9                	test   ecx,ecx
c0027a9a:	78 04                	js     c0027aa0 <__divsf3+0x19c>
c0027a9c:	39 c3                	cmp    ebx,eax
c0027a9e:	77 05                	ja     c0027aa5 <__divsf3+0x1a1>
c0027aa0:	29 d8                	sub    eax,ebx
c0027aa2:	83 ca 01             	or     edx,0x1
c0027aa5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027aa8:	75 e8                	jne    c0027a92 <__divsf3+0x18e>
c0027aaa:	85 c0                	test   eax,eax
c0027aac:	0f 95 c0             	setne  al
c0027aaf:	0f b6 c0             	movzx  eax,al
c0027ab2:	c1 e2 06             	shl    edx,0x6
c0027ab5:	09 c2                	or     edx,eax
c0027ab7:	78 03                	js     c0027abc <__divsf3+0x1b8>
c0027ab9:	01 d2                	add    edx,edx
c0027abb:	4e                   	dec    esi
c0027abc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ac2:	7f 22                	jg     c0027ae6 <__divsf3+0x1e2>
c0027ac4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027aca:	85 f6                	test   esi,esi
c0027acc:	7f 23                	jg     c0027af1 <__divsf3+0x1ed>
c0027ace:	83 fe e9             	cmp    esi,0xffffffe9
c0027ad1:	7c 1a                	jl     c0027aed <__divsf3+0x1e9>
c0027ad3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0027ade:	29 f1                	sub    ecx,esi
c0027ae0:	d3 ea                	shr    edx,cl
c0027ae2:	31 f6                	xor    esi,esi
c0027ae4:	eb 0b                	jmp    c0027af1 <__divsf3+0x1ed>
c0027ae6:	be ff 00 00 00       	mov    esi,0xff
c0027aeb:	eb 02                	jmp    c0027aef <__divsf3+0x1eb>
c0027aed:	31 f6                	xor    esi,esi
c0027aef:	31 d2                	xor    edx,edx
c0027af1:	89 d0                	mov    eax,edx
c0027af3:	c1 e8 08             	shr    eax,0x8
c0027af6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027af9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027aff:	09 fe                	or     esi,edi
c0027b01:	c1 e6 17             	shl    esi,0x17
c0027b04:	09 c6                	or     esi,eax
c0027b06:	f6 c2 7f             	test   dl,0x7f
c0027b09:	0f 95 c1             	setne  cl
c0027b0c:	09 c8                	or     eax,ecx
c0027b0e:	83 e0 01             	and    eax,0x1
c0027b11:	c1 ea 07             	shr    edx,0x7
c0027b14:	21 c2                	and    edx,eax
c0027b16:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b19:	eb 0a                	jmp    c0027b25 <__divsf3+0x221>
c0027b1b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b20:	eb 03                	jmp    c0027b25 <__divsf3+0x221>
c0027b22:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b25:	89 d8                	mov    eax,ebx
c0027b27:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b2a:	5b                   	pop    ebx
c0027b2b:	5e                   	pop    esi
c0027b2c:	5f                   	pop    edi
c0027b2d:	5d                   	pop    ebp
c0027b2e:	c3                   	ret    

c0027b2f <__floatsisf>:
c0027b2f:	55                   	push   ebp
c0027b30:	89 e5                	mov    ebp,esp
c0027b32:	53                   	push   ebx
c0027b33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b36:	85 d2                	test   edx,edx
c0027b38:	7e 2b                	jle    c0027b65 <__floatsisf+0x36>
c0027b3a:	0f bd ca             	bsr    ecx,edx
c0027b3d:	83 f1 1f             	xor    ecx,0x1f
c0027b40:	d3 e2                	shl    edx,cl
c0027b42:	89 d0                	mov    eax,edx
c0027b44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b49:	89 c3                	mov    ebx,eax
c0027b4b:	c1 eb 08             	shr    ebx,0x8
c0027b4e:	80 e2 7f             	and    dl,0x7f
c0027b51:	0f 95 c2             	setne  dl
c0027b54:	09 da                	or     edx,ebx
c0027b56:	83 e2 01             	and    edx,0x1
c0027b59:	c1 e8 07             	shr    eax,0x7
c0027b5c:	21 c2                	and    edx,eax
c0027b5e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b63:	eb 32                	jmp    c0027b97 <__floatsisf+0x68>
c0027b65:	b8 00 00 00 00       	mov    eax,0x0
c0027b6a:	74 34                	je     c0027ba0 <__floatsisf+0x71>
c0027b6c:	f7 da                	neg    edx
c0027b6e:	0f bd ca             	bsr    ecx,edx
c0027b71:	83 f1 1f             	xor    ecx,0x1f
c0027b74:	d3 e2                	shl    edx,cl
c0027b76:	89 d0                	mov    eax,edx
c0027b78:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b7d:	89 c3                	mov    ebx,eax
c0027b7f:	c1 eb 08             	shr    ebx,0x8
c0027b82:	80 e2 7f             	and    dl,0x7f
c0027b85:	0f 95 c2             	setne  dl
c0027b88:	09 da                	or     edx,ebx
c0027b8a:	83 e2 01             	and    edx,0x1
c0027b8d:	c1 e8 07             	shr    eax,0x7
c0027b90:	21 c2                	and    edx,eax
c0027b92:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b97:	29 c8                	sub    eax,ecx
c0027b99:	c1 e0 17             	shl    eax,0x17
c0027b9c:	09 d8                	or     eax,ebx
c0027b9e:	01 d0                	add    eax,edx
c0027ba0:	5b                   	pop    ebx
c0027ba1:	5d                   	pop    ebp
c0027ba2:	c3                   	ret    

c0027ba3 <__floatunsisf>:
c0027ba3:	55                   	push   ebp
c0027ba4:	89 e5                	mov    ebp,esp
c0027ba6:	53                   	push   ebx
c0027ba7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027baa:	31 c0                	xor    eax,eax
c0027bac:	85 d2                	test   edx,edx
c0027bae:	74 32                	je     c0027be2 <__floatunsisf+0x3f>
c0027bb0:	0f bd ca             	bsr    ecx,edx
c0027bb3:	83 f1 1f             	xor    ecx,0x1f
c0027bb6:	d3 e2                	shl    edx,cl
c0027bb8:	89 d0                	mov    eax,edx
c0027bba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bbf:	89 c3                	mov    ebx,eax
c0027bc1:	c1 eb 08             	shr    ebx,0x8
c0027bc4:	80 e2 7f             	and    dl,0x7f
c0027bc7:	0f 95 c2             	setne  dl
c0027bca:	09 da                	or     edx,ebx
c0027bcc:	83 e2 01             	and    edx,0x1
c0027bcf:	c1 e8 07             	shr    eax,0x7
c0027bd2:	21 c2                	and    edx,eax
c0027bd4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bd9:	29 c8                	sub    eax,ecx
c0027bdb:	c1 e0 17             	shl    eax,0x17
c0027bde:	09 d8                	or     eax,ebx
c0027be0:	01 d0                	add    eax,edx
c0027be2:	5b                   	pop    ebx
c0027be3:	5d                   	pop    ebp
c0027be4:	c3                   	ret    

c0027be5 <__fixsfsi>:
c0027be5:	55                   	push   ebp
c0027be6:	89 e5                	mov    ebp,esp
c0027be8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027beb:	89 d1                	mov    ecx,edx
c0027bed:	c1 e1 08             	shl    ecx,0x8
c0027bf0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027bf6:	c1 fa 17             	sar    edx,0x17
c0027bf9:	78 1c                	js     c0027c17 <__fixsfsi+0x32>
c0027bfb:	83 ea 7f             	sub    edx,0x7f
c0027bfe:	31 c0                	xor    eax,eax
c0027c00:	83 fa 1e             	cmp    edx,0x1e
c0027c03:	77 40                	ja     c0027c45 <__fixsfsi+0x60>
c0027c05:	89 c8                	mov    eax,ecx
c0027c07:	0d 00 00 00 80       	or     eax,0x80000000
c0027c0c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c11:	29 d1                	sub    ecx,edx
c0027c13:	d3 e8                	shr    eax,cl
c0027c15:	eb 2e                	jmp    c0027c45 <__fixsfsi+0x60>
c0027c17:	31 c0                	xor    eax,eax
c0027c19:	81 c2 81 00 00 00    	add    edx,0x81
c0027c1f:	78 24                	js     c0027c45 <__fixsfsi+0x60>
c0027c21:	83 fa 1e             	cmp    edx,0x1e
c0027c24:	7e 09                	jle    c0027c2f <__fixsfsi+0x4a>
c0027c26:	83 fa 1f             	cmp    edx,0x1f
c0027c29:	75 18                	jne    c0027c43 <__fixsfsi+0x5e>
c0027c2b:	85 c9                	test   ecx,ecx
c0027c2d:	75 14                	jne    c0027c43 <__fixsfsi+0x5e>
c0027c2f:	89 c8                	mov    eax,ecx
c0027c31:	0d 00 00 00 80       	or     eax,0x80000000
c0027c36:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c3b:	29 d1                	sub    ecx,edx
c0027c3d:	d3 e8                	shr    eax,cl
c0027c3f:	f7 d8                	neg    eax
c0027c41:	eb 02                	jmp    c0027c45 <__fixsfsi+0x60>
c0027c43:	31 c0                	xor    eax,eax
c0027c45:	5d                   	pop    ebp
c0027c46:	c3                   	ret    

c0027c47 <__fixunssfsi>:
c0027c47:	55                   	push   ebp
c0027c48:	89 e5                	mov    ebp,esp
c0027c4a:	53                   	push   ebx
c0027c4b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c4e:	89 d3                	mov    ebx,edx
c0027c50:	c1 fb 17             	sar    ebx,0x17
c0027c53:	83 eb 7f             	sub    ebx,0x7f
c0027c56:	31 c0                	xor    eax,eax
c0027c58:	83 fb 1f             	cmp    ebx,0x1f
c0027c5b:	77 18                	ja     c0027c75 <__fixunssfsi+0x2e>
c0027c5d:	89 d0                	mov    eax,edx
c0027c5f:	c1 e0 08             	shl    eax,0x8
c0027c62:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c67:	0d 00 00 00 80       	or     eax,0x80000000
c0027c6c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c71:	29 d9                	sub    ecx,ebx
c0027c73:	d3 e8                	shr    eax,cl
c0027c75:	5b                   	pop    ebx
c0027c76:	5d                   	pop    ebp
c0027c77:	c3                   	ret    

c0027c78 <__cmpsf2>:
c0027c78:	55                   	push   ebp
c0027c79:	89 e5                	mov    ebp,esp
c0027c7b:	57                   	push   edi
c0027c7c:	56                   	push   esi
c0027c7d:	53                   	push   ebx
c0027c7e:	83 ec 24             	sub    esp,0x24
c0027c81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c87:	e8 4f 10 00 00       	call   c0028cdb <__truncdfsf2>
c0027c8c:	5a                   	pop    edx
c0027c8d:	59                   	pop    ecx
c0027c8e:	89 c3                	mov    ebx,eax
c0027c90:	c1 e8 17             	shr    eax,0x17
c0027c93:	0f b6 f0             	movzx  esi,al
c0027c96:	89 d8                	mov    eax,ebx
c0027c98:	c1 e8 1f             	shr    eax,0x1f
c0027c9b:	31 c6                	xor    esi,eax
c0027c9d:	c1 e3 08             	shl    ebx,0x8
c0027ca0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027ca3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027ca6:	e8 30 10 00 00       	call   c0028cdb <__truncdfsf2>
c0027cab:	83 c4 10             	add    esp,0x10
c0027cae:	89 c1                	mov    ecx,eax
c0027cb0:	c1 e9 17             	shr    ecx,0x17
c0027cb3:	0f b6 c9             	movzx  ecx,cl
c0027cb6:	89 c7                	mov    edi,eax
c0027cb8:	c1 ef 1f             	shr    edi,0x1f
c0027cbb:	89 ca                	mov    edx,ecx
c0027cbd:	31 fa                	xor    edx,edi
c0027cbf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027cc2:	c1 e0 08             	shl    eax,0x8
c0027cc5:	89 c2                	mov    edx,eax
c0027cc7:	89 d8                	mov    eax,ebx
c0027cc9:	09 d0                	or     eax,edx
c0027ccb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cd0:	09 f0                	or     eax,esi
c0027cd2:	75 08                	jne    c0027cdc <__cmpsf2+0x64>
c0027cd4:	31 c0                	xor    eax,eax
c0027cd6:	39 f9                	cmp    ecx,edi
c0027cd8:	75 0c                	jne    c0027ce6 <__cmpsf2+0x6e>
c0027cda:	eb 29                	jmp    c0027d05 <__cmpsf2+0x8d>
c0027cdc:	b8 01 00 00 00       	mov    eax,0x1
c0027ce1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027ce4:	7f 1f                	jg     c0027d05 <__cmpsf2+0x8d>
c0027ce6:	83 c8 ff             	or     eax,0xffffffff
c0027ce9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cec:	7c 17                	jl     c0027d05 <__cmpsf2+0x8d>
c0027cee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027cf4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027cfa:	b8 01 00 00 00       	mov    eax,0x1
c0027cff:	39 d3                	cmp    ebx,edx
c0027d01:	77 02                	ja     c0027d05 <__cmpsf2+0x8d>
c0027d03:	19 c0                	sbb    eax,eax
c0027d05:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d08:	5b                   	pop    ebx
c0027d09:	5e                   	pop    esi
c0027d0a:	5f                   	pop    edi
c0027d0b:	5d                   	pop    ebp
c0027d0c:	c3                   	ret    

c0027d0d <__eqsf2>:
c0027d0d:	55                   	push   ebp
c0027d0e:	89 e5                	mov    ebp,esp
c0027d10:	83 ec 24             	sub    esp,0x24
c0027d13:	6a 01                	push   0x1
c0027d15:	83 ec 0c             	sub    esp,0xc
c0027d18:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d1b:	e8 df 10 00 00       	call   c0028dff <__extendsfdf2>
c0027d20:	83 c4 10             	add    esp,0x10
c0027d23:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d26:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d29:	52                   	push   edx
c0027d2a:	50                   	push   eax
c0027d2b:	50                   	push   eax
c0027d2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d2f:	e8 cb 10 00 00       	call   c0028dff <__extendsfdf2>
c0027d34:	59                   	pop    ecx
c0027d35:	59                   	pop    ecx
c0027d36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d39:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d3c:	52                   	push   edx
c0027d3d:	50                   	push   eax
c0027d3e:	e8 35 ff ff ff       	call   c0027c78 <__cmpsf2>
c0027d43:	83 c4 20             	add    esp,0x20
c0027d46:	c9                   	leave  
c0027d47:	c3                   	ret    

c0027d48 <__nesf2>:
c0027d48:	eb c3                	jmp    c0027d0d <__eqsf2>

c0027d4a <__gtsf2>:
c0027d4a:	55                   	push   ebp
c0027d4b:	89 e5                	mov    ebp,esp
c0027d4d:	83 ec 24             	sub    esp,0x24
c0027d50:	6a ff                	push   0xffffffff
c0027d52:	83 ec 0c             	sub    esp,0xc
c0027d55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d58:	e8 a2 10 00 00       	call   c0028dff <__extendsfdf2>
c0027d5d:	83 c4 10             	add    esp,0x10
c0027d60:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d63:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d66:	52                   	push   edx
c0027d67:	50                   	push   eax
c0027d68:	50                   	push   eax
c0027d69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d6c:	e8 8e 10 00 00       	call   c0028dff <__extendsfdf2>
c0027d71:	59                   	pop    ecx
c0027d72:	59                   	pop    ecx
c0027d73:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d76:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d79:	52                   	push   edx
c0027d7a:	50                   	push   eax
c0027d7b:	e8 f8 fe ff ff       	call   c0027c78 <__cmpsf2>
c0027d80:	83 c4 20             	add    esp,0x20
c0027d83:	c9                   	leave  
c0027d84:	c3                   	ret    

c0027d85 <__gesf2>:
c0027d85:	eb c3                	jmp    c0027d4a <__gtsf2>

c0027d87 <__ltsf2>:
c0027d87:	eb 84                	jmp    c0027d0d <__eqsf2>

c0027d89 <__lesf2>:
c0027d89:	eb 82                	jmp    c0027d0d <__eqsf2>

c0027d8b <__adddf3>:
c0027d8b:	55                   	push   ebp
c0027d8c:	89 e5                	mov    ebp,esp
c0027d8e:	57                   	push   edi
c0027d8f:	56                   	push   esi
c0027d90:	53                   	push   ebx
c0027d91:	83 ec 24             	sub    esp,0x24
c0027d94:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d97:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d9d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027da0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027da3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027da6:	89 c8                	mov    eax,ecx
c0027da8:	89 ce                	mov    esi,ecx
c0027daa:	c1 fe 14             	sar    esi,0x14
c0027dad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027db0:	89 fb                	mov    ebx,edi
c0027db2:	89 fa                	mov    edx,edi
c0027db4:	c1 e2 0b             	shl    edx,0xb
c0027db7:	c1 e0 0b             	shl    eax,0xb
c0027dba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027dbf:	c1 eb 15             	shr    ebx,0x15
c0027dc2:	09 d8                	or     eax,ebx
c0027dc4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027dc7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dca:	c1 fe 14             	sar    esi,0x14
c0027dcd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027dd0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dd3:	89 f3                	mov    ebx,esi
c0027dd5:	c1 e3 0b             	shl    ebx,0xb
c0027dd8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ddb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dde:	c1 e3 0b             	shl    ebx,0xb
c0027de1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027de7:	c1 ee 15             	shr    esi,0x15
c0027dea:	09 f3                	or     ebx,esi
c0027dec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027def:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027df2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027df5:	0f 88 5f 02 00 00    	js     c002805a <__adddf3+0x2cf>
c0027dfb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dfe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027e01:	85 db                	test   ebx,ebx
c0027e03:	0f 8e c7 00 00 00    	jle    c0027ed0 <__adddf3+0x145>
c0027e09:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e10:	75 1a                	jne    c0027e2c <__adddf3+0xa1>
c0027e12:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e15:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e18:	0f 84 b2 05 00 00    	je     c00283d0 <__adddf3+0x645>
c0027e1e:	4b                   	dec    ebx
c0027e1f:	75 23                	jne    c0027e44 <__adddf3+0xb9>
c0027e21:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e24:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e27:	e9 99 00 00 00       	jmp    c0027ec5 <__adddf3+0x13a>
c0027e2c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e2f:	f7 d6                	not    esi
c0027e31:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e37:	0f 84 93 05 00 00    	je     c00283d0 <__adddf3+0x645>
c0027e3d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e44:	83 fb 1f             	cmp    ebx,0x1f
c0027e47:	7e 42                	jle    c0027e8b <__adddf3+0x100>
c0027e49:	83 fb 3f             	cmp    ebx,0x3f
c0027e4c:	0f 8f 7e 05 00 00    	jg     c00283d0 <__adddf3+0x645>
c0027e52:	83 e3 1f             	and    ebx,0x1f
c0027e55:	89 d9                	mov    ecx,ebx
c0027e57:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e5a:	d3 ef                	shr    edi,cl
c0027e5c:	31 db                	xor    ebx,ebx
c0027e5e:	85 c9                	test   ecx,ecx
c0027e60:	74 15                	je     c0027e77 <__adddf3+0xec>
c0027e62:	be 20 00 00 00       	mov    esi,0x20
c0027e67:	29 ce                	sub    esi,ecx
c0027e69:	89 f1                	mov    ecx,esi
c0027e6b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e6e:	d3 e6                	shl    esi,cl
c0027e70:	31 db                	xor    ebx,ebx
c0027e72:	85 f6                	test   esi,esi
c0027e74:	0f 95 c3             	setne  bl
c0027e77:	31 c9                	xor    ecx,ecx
c0027e79:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e7d:	0f 95 c1             	setne  cl
c0027e80:	09 cf                	or     edi,ecx
c0027e82:	09 fb                	or     ebx,edi
c0027e84:	01 da                	add    edx,ebx
c0027e86:	83 d0 00             	adc    eax,0x0
c0027e89:	eb 3a                	jmp    c0027ec5 <__adddf3+0x13a>
c0027e8b:	bf 20 00 00 00       	mov    edi,0x20
c0027e90:	29 df                	sub    edi,ebx
c0027e92:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e95:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e98:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e9b:	d3 e6                	shl    esi,cl
c0027e9d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ea0:	88 d9                	mov    cl,bl
c0027ea2:	d3 ef                	shr    edi,cl
c0027ea4:	09 fe                	or     esi,edi
c0027ea6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ea9:	88 d9                	mov    cl,bl
c0027eab:	d3 ef                	shr    edi,cl
c0027ead:	89 fb                	mov    ebx,edi
c0027eaf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027eb2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027eb5:	d3 e7                	shl    edi,cl
c0027eb7:	85 ff                	test   edi,edi
c0027eb9:	0f 95 c1             	setne  cl
c0027ebc:	0f b6 c9             	movzx  ecx,cl
c0027ebf:	09 ce                	or     esi,ecx
c0027ec1:	01 f2                	add    edx,esi
c0027ec3:	11 d8                	adc    eax,ebx
c0027ec5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ec8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ecb:	e9 52 01 00 00       	jmp    c0028022 <__adddf3+0x297>
c0027ed0:	0f 84 d5 00 00 00    	je     c0027fab <__adddf3+0x220>
c0027ed6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ed9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027edc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027edf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ee2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ee9:	75 20                	jne    c0027f0b <__adddf3+0x180>
c0027eeb:	89 d6                	mov    esi,edx
c0027eed:	09 c6                	or     esi,eax
c0027eef:	0f 84 db 04 00 00    	je     c00283d0 <__adddf3+0x645>
c0027ef5:	4b                   	dec    ebx
c0027ef6:	75 29                	jne    c0027f21 <__adddf3+0x196>
c0027ef8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027efb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027efe:	01 d1                	add    ecx,edx
c0027f00:	11 c6                	adc    esi,eax
c0027f02:	89 f0                	mov    eax,esi
c0027f04:	89 ca                	mov    edx,ecx
c0027f06:	e9 17 01 00 00       	jmp    c0028022 <__adddf3+0x297>
c0027f0b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f0e:	f7 d6                	not    esi
c0027f10:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f16:	0f 84 b4 04 00 00    	je     c00283d0 <__adddf3+0x645>
c0027f1c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f21:	83 fb 1f             	cmp    ebx,0x1f
c0027f24:	7e 48                	jle    c0027f6e <__adddf3+0x1e3>
c0027f26:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f29:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f2c:	83 fb 3f             	cmp    ebx,0x3f
c0027f2f:	0f 8f 9b 04 00 00    	jg     c00283d0 <__adddf3+0x645>
c0027f35:	83 e3 1f             	and    ebx,0x1f
c0027f38:	89 d9                	mov    ecx,ebx
c0027f3a:	89 c7                	mov    edi,eax
c0027f3c:	d3 ef                	shr    edi,cl
c0027f3e:	31 db                	xor    ebx,ebx
c0027f40:	85 c9                	test   ecx,ecx
c0027f42:	74 12                	je     c0027f56 <__adddf3+0x1cb>
c0027f44:	be 20 00 00 00       	mov    esi,0x20
c0027f49:	29 ce                	sub    esi,ecx
c0027f4b:	89 f1                	mov    ecx,esi
c0027f4d:	d3 e0                	shl    eax,cl
c0027f4f:	31 db                	xor    ebx,ebx
c0027f51:	85 c0                	test   eax,eax
c0027f53:	0f 95 c3             	setne  bl
c0027f56:	31 c0                	xor    eax,eax
c0027f58:	85 d2                	test   edx,edx
c0027f5a:	0f 95 c0             	setne  al
c0027f5d:	09 c7                	or     edi,eax
c0027f5f:	09 fb                	or     ebx,edi
c0027f61:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f64:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f67:	01 da                	add    edx,ebx
c0027f69:	83 d6 00             	adc    esi,0x0
c0027f6c:	eb 39                	jmp    c0027fa7 <__adddf3+0x21c>
c0027f6e:	be 20 00 00 00       	mov    esi,0x20
c0027f73:	29 de                	sub    esi,ebx
c0027f75:	89 c7                	mov    edi,eax
c0027f77:	89 f1                	mov    ecx,esi
c0027f79:	d3 e7                	shl    edi,cl
c0027f7b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f7e:	89 d7                	mov    edi,edx
c0027f80:	88 d9                	mov    cl,bl
c0027f82:	d3 ef                	shr    edi,cl
c0027f84:	89 f9                	mov    ecx,edi
c0027f86:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f89:	09 cf                	or     edi,ecx
c0027f8b:	88 d9                	mov    cl,bl
c0027f8d:	d3 e8                	shr    eax,cl
c0027f8f:	89 f1                	mov    ecx,esi
c0027f91:	d3 e2                	shl    edx,cl
c0027f93:	85 d2                	test   edx,edx
c0027f95:	0f 95 c2             	setne  dl
c0027f98:	0f b6 d2             	movzx  edx,dl
c0027f9b:	09 d7                	or     edi,edx
c0027f9d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fa0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fa3:	01 fa                	add    edx,edi
c0027fa5:	11 c6                	adc    esi,eax
c0027fa7:	89 f0                	mov    eax,esi
c0027fa9:	eb 77                	jmp    c0028022 <__adddf3+0x297>
c0027fab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027fae:	46                   	inc    esi
c0027faf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027fb2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fb8:	75 41                	jne    c0027ffb <__adddf3+0x270>
c0027fba:	89 d3                	mov    ebx,edx
c0027fbc:	09 c3                	or     ebx,eax
c0027fbe:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fc5:	75 27                	jne    c0027fee <__adddf3+0x263>
c0027fc7:	85 db                	test   ebx,ebx
c0027fc9:	0f 84 fb 03 00 00    	je     c00283ca <__adddf3+0x63f>
c0027fcf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fd2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fd5:	0f 84 f5 03 00 00    	je     c00283d0 <__adddf3+0x645>
c0027fdb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fde:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fe1:	85 c0                	test   eax,eax
c0027fe3:	0f 89 91 03 00 00    	jns    c002837a <__adddf3+0x5ef>
c0027fe9:	e9 85 03 00 00       	jmp    c0028373 <__adddf3+0x5e8>
c0027fee:	85 db                	test   ebx,ebx
c0027ff0:	0f 85 da 03 00 00    	jne    c00283d0 <__adddf3+0x645>
c0027ff6:	e9 cf 03 00 00       	jmp    c00283ca <__adddf3+0x63f>
c0027ffb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027ffe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028001:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028004:	f7 d1                	not    ecx
c0028006:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002800c:	0f 84 70 03 00 00    	je     c0028382 <__adddf3+0x5f7>
c0028012:	d1 ea                	shr    edx,1
c0028014:	89 c1                	mov    ecx,eax
c0028016:	c1 e1 1f             	shl    ecx,0x1f
c0028019:	09 ca                	or     edx,ecx
c002801b:	d1 e8                	shr    eax,1
c002801d:	e9 6f 03 00 00       	jmp    c0028391 <__adddf3+0x606>
c0028022:	85 c0                	test   eax,eax
c0028024:	0f 89 67 03 00 00    	jns    c0028391 <__adddf3+0x606>
c002802a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002802d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028030:	f7 d1                	not    ecx
c0028032:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028038:	0f 84 44 03 00 00    	je     c0028382 <__adddf3+0x5f7>
c002803e:	89 d1                	mov    ecx,edx
c0028040:	d1 e9                	shr    ecx,1
c0028042:	83 e2 01             	and    edx,0x1
c0028045:	09 ca                	or     edx,ecx
c0028047:	89 c1                	mov    ecx,eax
c0028049:	c1 e1 1f             	shl    ecx,0x1f
c002804c:	09 ca                	or     edx,ecx
c002804e:	d1 e8                	shr    eax,1
c0028050:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028055:	e9 37 03 00 00       	jmp    c0028391 <__adddf3+0x606>
c002805a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002805d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028063:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028066:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028069:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002806f:	29 de                	sub    esi,ebx
c0028071:	85 f6                	test   esi,esi
c0028073:	0f 8e bd 00 00 00    	jle    c0028136 <__adddf3+0x3ab>
c0028079:	85 db                	test   ebx,ebx
c002807b:	75 17                	jne    c0028094 <__adddf3+0x309>
c002807d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028080:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028083:	0f 84 47 03 00 00    	je     c00283d0 <__adddf3+0x645>
c0028089:	4e                   	dec    esi
c002808a:	75 20                	jne    c00280ac <__adddf3+0x321>
c002808c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002808f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028092:	eb 5b                	jmp    c00280ef <__adddf3+0x364>
c0028094:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028097:	f7 d3                	not    ebx
c0028099:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002809f:	0f 84 2b 03 00 00    	je     c00283d0 <__adddf3+0x645>
c00280a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280ac:	83 fe 1f             	cmp    esi,0x1f
c00280af:	7e 49                	jle    c00280fa <__adddf3+0x36f>
c00280b1:	83 fe 3f             	cmp    esi,0x3f
c00280b4:	0f 8f 16 03 00 00    	jg     c00283d0 <__adddf3+0x645>
c00280ba:	83 e6 1f             	and    esi,0x1f
c00280bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280c0:	89 f1                	mov    ecx,esi
c00280c2:	d3 ef                	shr    edi,cl
c00280c4:	31 db                	xor    ebx,ebx
c00280c6:	85 f6                	test   esi,esi
c00280c8:	74 13                	je     c00280dd <__adddf3+0x352>
c00280ca:	b9 20 00 00 00       	mov    ecx,0x20
c00280cf:	29 f1                	sub    ecx,esi
c00280d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280d4:	d3 e6                	shl    esi,cl
c00280d6:	31 db                	xor    ebx,ebx
c00280d8:	85 f6                	test   esi,esi
c00280da:	0f 95 c3             	setne  bl
c00280dd:	31 c9                	xor    ecx,ecx
c00280df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280e3:	0f 95 c1             	setne  cl
c00280e6:	09 cf                	or     edi,ecx
c00280e8:	09 fb                	or     ebx,edi
c00280ea:	29 da                	sub    edx,ebx
c00280ec:	83 d8 00             	sbb    eax,0x0
c00280ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280f5:	e9 aa 01 00 00       	jmp    c00282a4 <__adddf3+0x519>
c00280fa:	bf 20 00 00 00       	mov    edi,0x20
c00280ff:	29 f7                	sub    edi,esi
c0028101:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028104:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028107:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002810a:	d3 e3                	shl    ebx,cl
c002810c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002810f:	89 f1                	mov    ecx,esi
c0028111:	d3 ef                	shr    edi,cl
c0028113:	09 fb                	or     ebx,edi
c0028115:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028118:	89 f1                	mov    ecx,esi
c002811a:	d3 ef                	shr    edi,cl
c002811c:	89 fe                	mov    esi,edi
c002811e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028121:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028124:	d3 e7                	shl    edi,cl
c0028126:	85 ff                	test   edi,edi
c0028128:	0f 95 c1             	setne  cl
c002812b:	0f b6 c9             	movzx  ecx,cl
c002812e:	09 cb                	or     ebx,ecx
c0028130:	29 da                	sub    edx,ebx
c0028132:	19 f0                	sbb    eax,esi
c0028134:	eb b9                	jmp    c00280ef <__adddf3+0x364>
c0028136:	0f 84 cd 00 00 00    	je     c0028209 <__adddf3+0x47e>
c002813c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002813f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028142:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028145:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028149:	75 1b                	jne    c0028166 <__adddf3+0x3db>
c002814b:	89 d6                	mov    esi,edx
c002814d:	09 c6                	or     esi,eax
c002814f:	0f 84 7b 02 00 00    	je     c00283d0 <__adddf3+0x645>
c0028155:	4b                   	dec    ebx
c0028156:	75 24                	jne    c002817c <__adddf3+0x3f1>
c0028158:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002815b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002815e:	29 d1                	sub    ecx,edx
c0028160:	19 c6                	sbb    esi,eax
c0028162:	89 ca                	mov    edx,ecx
c0028164:	eb 61                	jmp    c00281c7 <__adddf3+0x43c>
c0028166:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028169:	f7 d6                	not    esi
c002816b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028171:	0f 84 59 02 00 00    	je     c00283d0 <__adddf3+0x645>
c0028177:	0d 00 00 00 80       	or     eax,0x80000000
c002817c:	83 fb 1f             	cmp    ebx,0x1f
c002817f:	7e 4d                	jle    c00281ce <__adddf3+0x443>
c0028181:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028184:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028187:	83 fb 3f             	cmp    ebx,0x3f
c002818a:	0f 8f 40 02 00 00    	jg     c00283d0 <__adddf3+0x645>
c0028190:	83 e3 1f             	and    ebx,0x1f
c0028193:	89 d9                	mov    ecx,ebx
c0028195:	89 c7                	mov    edi,eax
c0028197:	d3 ef                	shr    edi,cl
c0028199:	31 db                	xor    ebx,ebx
c002819b:	85 c9                	test   ecx,ecx
c002819d:	74 12                	je     c00281b1 <__adddf3+0x426>
c002819f:	be 20 00 00 00       	mov    esi,0x20
c00281a4:	29 ce                	sub    esi,ecx
c00281a6:	89 f1                	mov    ecx,esi
c00281a8:	d3 e0                	shl    eax,cl
c00281aa:	31 db                	xor    ebx,ebx
c00281ac:	85 c0                	test   eax,eax
c00281ae:	0f 95 c3             	setne  bl
c00281b1:	31 c0                	xor    eax,eax
c00281b3:	85 d2                	test   edx,edx
c00281b5:	0f 95 c0             	setne  al
c00281b8:	09 c7                	or     edi,eax
c00281ba:	09 fb                	or     ebx,edi
c00281bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281c2:	29 da                	sub    edx,ebx
c00281c4:	83 de 00             	sbb    esi,0x0
c00281c7:	89 f0                	mov    eax,esi
c00281c9:	e9 d6 00 00 00       	jmp    c00282a4 <__adddf3+0x519>
c00281ce:	be 20 00 00 00       	mov    esi,0x20
c00281d3:	29 de                	sub    esi,ebx
c00281d5:	89 c7                	mov    edi,eax
c00281d7:	89 f1                	mov    ecx,esi
c00281d9:	d3 e7                	shl    edi,cl
c00281db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281de:	89 d7                	mov    edi,edx
c00281e0:	88 d9                	mov    cl,bl
c00281e2:	d3 ef                	shr    edi,cl
c00281e4:	89 f9                	mov    ecx,edi
c00281e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281e9:	09 cf                	or     edi,ecx
c00281eb:	88 d9                	mov    cl,bl
c00281ed:	d3 e8                	shr    eax,cl
c00281ef:	89 f1                	mov    ecx,esi
c00281f1:	d3 e2                	shl    edx,cl
c00281f3:	85 d2                	test   edx,edx
c00281f5:	0f 95 c2             	setne  dl
c00281f8:	0f b6 d2             	movzx  edx,dl
c00281fb:	09 d7                	or     edi,edx
c00281fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028200:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028203:	29 fa                	sub    edx,edi
c0028205:	19 c6                	sbb    esi,eax
c0028207:	eb be                	jmp    c00281c7 <__adddf3+0x43c>
c0028209:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002820c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002820f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028215:	75 6a                	jne    c0028281 <__adddf3+0x4f6>
c0028217:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002821b:	75 58                	jne    c0028275 <__adddf3+0x4ea>
c002821d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028220:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028223:	89 d6                	mov    esi,edx
c0028225:	09 c6                	or     esi,eax
c0028227:	75 17                	jne    c0028240 <__adddf3+0x4b5>
c0028229:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002822c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002822f:	85 db                	test   ebx,ebx
c0028231:	0f 85 99 01 00 00    	jne    c00283d0 <__adddf3+0x645>
c0028237:	31 ff                	xor    edi,edi
c0028239:	31 c9                	xor    ecx,ecx
c002823b:	e9 90 01 00 00       	jmp    c00283d0 <__adddf3+0x645>
c0028240:	85 db                	test   ebx,ebx
c0028242:	0f 84 88 01 00 00    	je     c00283d0 <__adddf3+0x645>
c0028248:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002824b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002824e:	85 c0                	test   eax,eax
c0028250:	79 10                	jns    c0028262 <__adddf3+0x4d7>
c0028252:	31 c9                	xor    ecx,ecx
c0028254:	f7 da                	neg    edx
c0028256:	0f 95 c1             	setne  cl
c0028259:	01 c8                	add    eax,ecx
c002825b:	f7 d8                	neg    eax
c002825d:	e9 2f 01 00 00       	jmp    c0028391 <__adddf3+0x606>
c0028262:	31 ff                	xor    edi,edi
c0028264:	31 c9                	xor    ecx,ecx
c0028266:	89 c3                	mov    ebx,eax
c0028268:	09 d3                	or     ebx,edx
c002826a:	0f 84 60 01 00 00    	je     c00283d0 <__adddf3+0x645>
c0028270:	e9 05 01 00 00       	jmp    c002837a <__adddf3+0x5ef>
c0028275:	31 ff                	xor    edi,edi
c0028277:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002827c:	e9 4f 01 00 00       	jmp    c00283d0 <__adddf3+0x645>
c0028281:	89 c1                	mov    ecx,eax
c0028283:	89 d0                	mov    eax,edx
c0028285:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028288:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002828b:	89 ca                	mov    edx,ecx
c002828d:	85 c9                	test   ecx,ecx
c002828f:	79 2c                	jns    c00282bd <__adddf3+0x532>
c0028291:	31 c9                	xor    ecx,ecx
c0028293:	f7 d8                	neg    eax
c0028295:	0f 95 c1             	setne  cl
c0028298:	01 ca                	add    edx,ecx
c002829a:	f7 da                	neg    edx
c002829c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002829f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282a2:	eb 19                	jmp    c00282bd <__adddf3+0x532>
c00282a4:	85 c0                	test   eax,eax
c00282a6:	0f 89 e5 00 00 00    	jns    c0028391 <__adddf3+0x606>
c00282ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282b1:	89 c1                	mov    ecx,eax
c00282b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00282b9:	89 d0                	mov    eax,edx
c00282bb:	89 ca                	mov    edx,ecx
c00282bd:	85 d2                	test   edx,edx
c00282bf:	74 59                	je     c002831a <__adddf3+0x58f>
c00282c1:	0f bd da             	bsr    ebx,edx
c00282c4:	83 f3 1f             	xor    ebx,0x1f
c00282c7:	88 d9                	mov    cl,bl
c00282c9:	d3 e2                	shl    edx,cl
c00282cb:	bf 20 00 00 00       	mov    edi,0x20
c00282d0:	89 f9                	mov    ecx,edi
c00282d2:	29 d9                	sub    ecx,ebx
c00282d4:	89 c6                	mov    esi,eax
c00282d6:	d3 ee                	shr    esi,cl
c00282d8:	09 d6                	or     esi,edx
c00282da:	88 d9                	mov    cl,bl
c00282dc:	d3 e0                	shl    eax,cl
c00282de:	89 c2                	mov    edx,eax
c00282e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282e3:	25 ff 07 00 00       	and    eax,0x7ff
c00282e8:	39 d8                	cmp    eax,ebx
c00282ea:	7f 22                	jg     c002830e <__adddf3+0x583>
c00282ec:	29 c3                	sub    ebx,eax
c00282ee:	43                   	inc    ebx
c00282ef:	88 d9                	mov    cl,bl
c00282f1:	d3 ea                	shr    edx,cl
c00282f3:	29 df                	sub    edi,ebx
c00282f5:	89 f9                	mov    ecx,edi
c00282f7:	89 f0                	mov    eax,esi
c00282f9:	d3 e0                	shl    eax,cl
c00282fb:	09 c2                	or     edx,eax
c00282fd:	89 f0                	mov    eax,esi
c00282ff:	88 d9                	mov    cl,bl
c0028301:	d3 e8                	shr    eax,cl
c0028303:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028306:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002830c:	eb 6f                	jmp    c002837d <__adddf3+0x5f2>
c002830e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028311:	29 d8                	sub    eax,ebx
c0028313:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028316:	89 f0                	mov    eax,esi
c0028318:	eb 59                	jmp    c0028373 <__adddf3+0x5e8>
c002831a:	85 c0                	test   eax,eax
c002831c:	74 6a                	je     c0028388 <__adddf3+0x5fd>
c002831e:	0f bd c8             	bsr    ecx,eax
c0028321:	83 f1 1f             	xor    ecx,0x1f
c0028324:	d3 e0                	shl    eax,cl
c0028326:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028329:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002832f:	83 c1 20             	add    ecx,0x20
c0028332:	39 cb                	cmp    ebx,ecx
c0028334:	7f 35                	jg     c002836b <__adddf3+0x5e0>
c0028336:	29 d9                	sub    ecx,ebx
c0028338:	8d 71 01             	lea    esi,[ecx+0x1]
c002833b:	83 fe 1f             	cmp    esi,0x1f
c002833e:	7e 09                	jle    c0028349 <__adddf3+0x5be>
c0028340:	83 e9 1f             	sub    ecx,0x1f
c0028343:	d3 e8                	shr    eax,cl
c0028345:	89 c3                	mov    ebx,eax
c0028347:	eb 11                	jmp    c002835a <__adddf3+0x5cf>
c0028349:	b9 20 00 00 00       	mov    ecx,0x20
c002834e:	29 f1                	sub    ecx,esi
c0028350:	89 c3                	mov    ebx,eax
c0028352:	d3 e3                	shl    ebx,cl
c0028354:	89 f1                	mov    ecx,esi
c0028356:	d3 e8                	shr    eax,cl
c0028358:	89 c2                	mov    edx,eax
c002835a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002835d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028362:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028365:	89 d0                	mov    eax,edx
c0028367:	89 da                	mov    edx,ebx
c0028369:	eb 26                	jmp    c0028391 <__adddf3+0x606>
c002836b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002836e:	29 cf                	sub    edi,ecx
c0028370:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028373:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028378:	eb 17                	jmp    c0028391 <__adddf3+0x606>
c002837a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002837d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028380:	eb 0f                	jmp    c0028391 <__adddf3+0x606>
c0028382:	31 d2                	xor    edx,edx
c0028384:	31 c0                	xor    eax,eax
c0028386:	eb 09                	jmp    c0028391 <__adddf3+0x606>
c0028388:	89 c2                	mov    edx,eax
c002838a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028391:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028394:	c1 e1 14             	shl    ecx,0x14
c0028397:	89 c3                	mov    ebx,eax
c0028399:	c1 eb 0b             	shr    ebx,0xb
c002839c:	09 d9                	or     ecx,ebx
c002839e:	89 d3                	mov    ebx,edx
c00283a0:	c1 eb 0b             	shr    ebx,0xb
c00283a3:	c1 e0 15             	shl    eax,0x15
c00283a6:	09 d8                	or     eax,ebx
c00283a8:	89 c7                	mov    edi,eax
c00283aa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00283b0:	0f 95 c0             	setne  al
c00283b3:	89 c6                	mov    esi,eax
c00283b5:	09 f3                	or     ebx,esi
c00283b7:	83 e3 01             	and    ebx,0x1
c00283ba:	c1 ea 0a             	shr    edx,0xa
c00283bd:	21 da                	and    edx,ebx
c00283bf:	89 f8                	mov    eax,edi
c00283c1:	01 d0                	add    eax,edx
c00283c3:	83 d1 00             	adc    ecx,0x0
c00283c6:	89 c7                	mov    edi,eax
c00283c8:	eb 06                	jmp    c00283d0 <__adddf3+0x645>
c00283ca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283cd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283d0:	89 f8                	mov    eax,edi
c00283d2:	89 ca                	mov    edx,ecx
c00283d4:	83 c4 24             	add    esp,0x24
c00283d7:	5b                   	pop    ebx
c00283d8:	5e                   	pop    esi
c00283d9:	5f                   	pop    edi
c00283da:	5d                   	pop    ebp
c00283db:	c3                   	ret    

c00283dc <__subdf3>:
c00283dc:	55                   	push   ebp
c00283dd:	89 e5                	mov    ebp,esp
c00283df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283e5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283ee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283f1:	5d                   	pop    ebp
c00283f2:	e9 94 f9 ff ff       	jmp    c0027d8b <__adddf3>

c00283f7 <__negdf2>:
c00283f7:	55                   	push   ebp
c00283f8:	89 e5                	mov    ebp,esp
c00283fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283fd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028400:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028406:	5d                   	pop    ebp
c0028407:	c3                   	ret    

c0028408 <__muldf3>:
c0028408:	55                   	push   ebp
c0028409:	89 e5                	mov    ebp,esp
c002840b:	57                   	push   edi
c002840c:	56                   	push   esi
c002840d:	53                   	push   ebx
c002840e:	83 ec 24             	sub    esp,0x24
c0028411:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028414:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028417:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002841a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002841d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028420:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028423:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028426:	89 c8                	mov    eax,ecx
c0028428:	c1 f8 14             	sar    eax,0x14
c002842b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002842e:	89 f8                	mov    eax,edi
c0028430:	89 fb                	mov    ebx,edi
c0028432:	c1 e3 0b             	shl    ebx,0xb
c0028435:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028438:	c1 e1 0b             	shl    ecx,0xb
c002843b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028441:	c1 e8 15             	shr    eax,0x15
c0028444:	09 c1                	or     ecx,eax
c0028446:	89 d6                	mov    esi,edx
c0028448:	89 d0                	mov    eax,edx
c002844a:	c1 f8 14             	sar    eax,0x14
c002844d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028450:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028453:	89 c3                	mov    ebx,eax
c0028455:	c1 e3 0b             	shl    ebx,0xb
c0028458:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002845b:	c1 e6 0b             	shl    esi,0xb
c002845e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028464:	c1 e8 15             	shr    eax,0x15
c0028467:	09 c6                	or     esi,eax
c0028469:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002846c:	25 ff 07 00 00       	and    eax,0x7ff
c0028471:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028474:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028477:	25 ff 07 00 00       	and    eax,0x7ff
c002847c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002847f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028482:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028485:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002848c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002848f:	40                   	inc    eax
c0028490:	a9 fe 07 00 00       	test   eax,0x7fe
c0028495:	0f 85 8d 00 00 00    	jne    c0028528 <__muldf3+0x120>
c002849b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002849e:	09 c8                	or     eax,ecx
c00284a0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00284a4:	74 44                	je     c00284ea <__muldf3+0xe2>
c00284a6:	85 c0                	test   eax,eax
c00284a8:	0f 85 31 02 00 00    	jne    c00286df <__muldf3+0x2d7>
c00284ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284b1:	40                   	inc    eax
c00284b2:	a9 fe 07 00 00       	test   eax,0x7fe
c00284b7:	75 13                	jne    c00284cc <__muldf3+0xc4>
c00284b9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00284bc:	09 f1                	or     ecx,esi
c00284be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284c2:	74 22                	je     c00284e6 <__muldf3+0xde>
c00284c4:	85 c9                	test   ecx,ecx
c00284c6:	0f 85 0d 02 00 00    	jne    c00286d9 <__muldf3+0x2d1>
c00284cc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284d0:	0f 89 09 02 00 00    	jns    c00286df <__muldf3+0x2d7>
c00284d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284d9:	05 00 00 00 80       	add    eax,0x80000000
c00284de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284e1:	e9 f9 01 00 00       	jmp    c00286df <__muldf3+0x2d7>
c00284e6:	85 c9                	test   ecx,ecx
c00284e8:	eb 2e                	jmp    c0028518 <__muldf3+0x110>
c00284ea:	85 c0                	test   eax,eax
c00284ec:	74 20                	je     c002850e <__muldf3+0x106>
c00284ee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284f7:	c1 ef 1f             	shr    edi,0x1f
c00284fa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284fd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028500:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028503:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028506:	09 f9                	or     ecx,edi
c0028508:	78 1e                	js     c0028528 <__muldf3+0x120>
c002850a:	89 c3                	mov    ebx,eax
c002850c:	eb e0                	jmp    c00284ee <__muldf3+0xe6>
c002850e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028511:	f7 d0                	not    eax
c0028513:	a9 ff 07 00 00       	test   eax,0x7ff
c0028518:	75 b2                	jne    c00284cc <__muldf3+0xc4>
c002851a:	31 ff                	xor    edi,edi
c002851c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028523:	e9 b7 01 00 00       	jmp    c00286df <__muldf3+0x2d7>
c0028528:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002852b:	40                   	inc    eax
c002852c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028531:	75 57                	jne    c002858a <__muldf3+0x182>
c0028533:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028536:	09 f0                	or     eax,esi
c0028538:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002853c:	74 23                	je     c0028561 <__muldf3+0x159>
c002853e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028542:	0f 89 91 01 00 00    	jns    c00286d9 <__muldf3+0x2d1>
c0028548:	85 c0                	test   eax,eax
c002854a:	0f 85 89 01 00 00    	jne    c00286d9 <__muldf3+0x2d1>
c0028550:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028553:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028559:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002855c:	e9 7e 01 00 00       	jmp    c00286df <__muldf3+0x2d7>
c0028561:	85 c0                	test   eax,eax
c0028563:	75 0c                	jne    c0028571 <__muldf3+0x169>
c0028565:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028569:	0f 89 6a 01 00 00    	jns    c00286d9 <__muldf3+0x2d1>
c002856f:	eb df                	jmp    c0028550 <__muldf3+0x148>
c0028571:	01 f6                	add    esi,esi
c0028573:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028576:	c1 ea 1f             	shr    edx,0x1f
c0028579:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002857c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002857f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028582:	09 d6                	or     esi,edx
c0028584:	78 04                	js     c002858a <__muldf3+0x182>
c0028586:	89 c3                	mov    ebx,eax
c0028588:	eb e7                	jmp    c0028571 <__muldf3+0x169>
c002858a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028590:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028596:	89 c8                	mov    eax,ecx
c0028598:	f7 e6                	mul    esi
c002859a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002859d:	89 c7                	mov    edi,eax
c002859f:	89 c8                	mov    eax,ecx
c00285a1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285a4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00285a7:	89 c1                	mov    ecx,eax
c00285a9:	89 f0                	mov    eax,esi
c00285ab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00285ae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00285b1:	89 c6                	mov    esi,eax
c00285b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285b6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285b9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00285bc:	31 c0                	xor    eax,eax
c00285be:	01 f1                	add    ecx,esi
c00285c0:	0f 92 c0             	setb   al
c00285c3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285c6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285c9:	83 d6 00             	adc    esi,0x0
c00285cc:	01 c7                	add    edi,eax
c00285ce:	83 d6 00             	adc    esi,0x0
c00285d1:	01 ca                	add    edx,ecx
c00285d3:	0f 92 c1             	setb   cl
c00285d6:	0f b6 c9             	movzx  ecx,cl
c00285d9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285dc:	83 d6 00             	adc    esi,0x0
c00285df:	01 cf                	add    edi,ecx
c00285e1:	83 d6 00             	adc    esi,0x0
c00285e4:	31 c9                	xor    ecx,ecx
c00285e6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285e9:	0f 95 c1             	setne  cl
c00285ec:	09 cf                	or     edi,ecx
c00285ee:	85 f6                	test   esi,esi
c00285f0:	78 0c                	js     c00285fe <__muldf3+0x1f6>
c00285f2:	01 f6                	add    esi,esi
c00285f4:	89 f8                	mov    eax,edi
c00285f6:	c1 e8 1f             	shr    eax,0x1f
c00285f9:	09 c6                	or     esi,eax
c00285fb:	01 ff                	add    edi,edi
c00285fd:	4b                   	dec    ebx
c00285fe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028604:	0f 8f 85 00 00 00    	jg     c002868f <__muldf3+0x287>
c002860a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028610:	85 db                	test   ebx,ebx
c0028612:	0f 8f 84 00 00 00    	jg     c002869c <__muldf3+0x294>
c0028618:	83 fb cc             	cmp    ebx,0xffffffcc
c002861b:	7c 79                	jl     c0028696 <__muldf3+0x28e>
c002861d:	ba 01 00 00 00       	mov    edx,0x1
c0028622:	29 da                	sub    edx,ebx
c0028624:	81 ce 00 00 00 80    	or     esi,0x80000000
c002862a:	83 fa 1f             	cmp    edx,0x1f
c002862d:	7e 30                	jle    c002865f <__muldf3+0x257>
c002862f:	83 fa 20             	cmp    edx,0x20
c0028632:	75 0b                	jne    c002863f <__muldf3+0x237>
c0028634:	31 c0                	xor    eax,eax
c0028636:	85 ff                	test   edi,edi
c0028638:	0f 95 c0             	setne  al
c002863b:	89 c7                	mov    edi,eax
c002863d:	eb 1a                	jmp    c0028659 <__muldf3+0x251>
c002863f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028642:	89 f0                	mov    eax,esi
c0028644:	d3 e0                	shl    eax,cl
c0028646:	09 f8                	or     eax,edi
c0028648:	0f 95 c0             	setne  al
c002864b:	0f b6 c0             	movzx  eax,al
c002864e:	89 c7                	mov    edi,eax
c0028650:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028655:	29 d9                	sub    ecx,ebx
c0028657:	d3 ee                	shr    esi,cl
c0028659:	09 f7                	or     edi,esi
c002865b:	31 db                	xor    ebx,ebx
c002865d:	eb 3b                	jmp    c002869a <__muldf3+0x292>
c002865f:	83 c3 1f             	add    ebx,0x1f
c0028662:	89 f0                	mov    eax,esi
c0028664:	88 d9                	mov    cl,bl
c0028666:	d3 e0                	shl    eax,cl
c0028668:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002866b:	89 f8                	mov    eax,edi
c002866d:	88 d1                	mov    cl,dl
c002866f:	d3 e8                	shr    eax,cl
c0028671:	89 c1                	mov    ecx,eax
c0028673:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028676:	09 c8                	or     eax,ecx
c0028678:	88 d9                	mov    cl,bl
c002867a:	d3 e7                	shl    edi,cl
c002867c:	31 db                	xor    ebx,ebx
c002867e:	85 ff                	test   edi,edi
c0028680:	0f 95 c3             	setne  bl
c0028683:	89 df                	mov    edi,ebx
c0028685:	09 c7                	or     edi,eax
c0028687:	88 d1                	mov    cl,dl
c0028689:	d3 ee                	shr    esi,cl
c002868b:	31 db                	xor    ebx,ebx
c002868d:	eb 0d                	jmp    c002869c <__muldf3+0x294>
c002868f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028694:	eb 02                	jmp    c0028698 <__muldf3+0x290>
c0028696:	31 db                	xor    ebx,ebx
c0028698:	31 ff                	xor    edi,edi
c002869a:	31 f6                	xor    esi,esi
c002869c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002869f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00286a2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00286a7:	09 c3                	or     ebx,eax
c00286a9:	c1 e3 14             	shl    ebx,0x14
c00286ac:	89 f0                	mov    eax,esi
c00286ae:	c1 e8 0b             	shr    eax,0xb
c00286b1:	09 c3                	or     ebx,eax
c00286b3:	89 f8                	mov    eax,edi
c00286b5:	c1 e8 0b             	shr    eax,0xb
c00286b8:	c1 e6 15             	shl    esi,0x15
c00286bb:	09 c6                	or     esi,eax
c00286bd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286c3:	0f 95 c1             	setne  cl
c00286c6:	09 c8                	or     eax,ecx
c00286c8:	83 e0 01             	and    eax,0x1
c00286cb:	c1 ef 0a             	shr    edi,0xa
c00286ce:	21 c7                	and    edi,eax
c00286d0:	01 f7                	add    edi,esi
c00286d2:	83 d3 00             	adc    ebx,0x0
c00286d5:	89 da                	mov    edx,ebx
c00286d7:	eb 03                	jmp    c00286dc <__muldf3+0x2d4>
c00286d9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286dc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286df:	89 f8                	mov    eax,edi
c00286e1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286e4:	83 c4 24             	add    esp,0x24
c00286e7:	5b                   	pop    ebx
c00286e8:	5e                   	pop    esi
c00286e9:	5f                   	pop    edi
c00286ea:	5d                   	pop    ebp
c00286eb:	c3                   	ret    

c00286ec <__divdf3>:
c00286ec:	55                   	push   ebp
c00286ed:	89 e5                	mov    ebp,esp
c00286ef:	57                   	push   edi
c00286f0:	56                   	push   esi
c00286f1:	53                   	push   ebx
c00286f2:	83 ec 2c             	sub    esp,0x2c
c00286f5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286f8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286fb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286fe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028701:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028704:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028707:	89 ce                	mov    esi,ecx
c0028709:	89 c8                	mov    eax,ecx
c002870b:	c1 f8 14             	sar    eax,0x14
c002870e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028711:	89 f8                	mov    eax,edi
c0028713:	89 fb                	mov    ebx,edi
c0028715:	c1 e3 0b             	shl    ebx,0xb
c0028718:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002871b:	c1 e6 0b             	shl    esi,0xb
c002871e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028724:	c1 e8 15             	shr    eax,0x15
c0028727:	09 c6                	or     esi,eax
c0028729:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002872c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002872f:	89 c2                	mov    edx,eax
c0028731:	c1 fa 14             	sar    edx,0x14
c0028734:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028737:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002873a:	89 de                	mov    esi,ebx
c002873c:	c1 e6 0b             	shl    esi,0xb
c002873f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028742:	c1 e0 0b             	shl    eax,0xb
c0028745:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002874a:	c1 eb 15             	shr    ebx,0x15
c002874d:	09 d8                	or     eax,ebx
c002874f:	89 c2                	mov    edx,eax
c0028751:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028754:	25 ff 07 00 00       	and    eax,0x7ff
c0028759:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002875c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002875f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028765:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028768:	29 d8                	sub    eax,ebx
c002876a:	05 ff 03 00 00       	add    eax,0x3ff
c002876f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028772:	46                   	inc    esi
c0028773:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028779:	0f 85 a5 00 00 00    	jne    c0028824 <__divdf3+0x138>
c002877f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028782:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028785:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028789:	74 2a                	je     c00287b5 <__divdf3+0xc9>
c002878b:	85 f6                	test   esi,esi
c002878d:	0f 85 cc 02 00 00    	jne    c0028a5f <__divdf3+0x373>
c0028793:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028796:	40                   	inc    eax
c0028797:	a9 fe 07 00 00       	test   eax,0x7fe
c002879c:	75 26                	jne    c00287c4 <__divdf3+0xd8>
c002879e:	85 db                	test   ebx,ebx
c00287a0:	74 22                	je     c00287c4 <__divdf3+0xd8>
c00287a2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287a5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287ab:	09 d0                	or     eax,edx
c00287ad:	0f 85 ac 02 00 00    	jne    c0028a5f <__divdf3+0x373>
c00287b3:	eb 63                	jmp    c0028818 <__divdf3+0x12c>
c00287b5:	85 f6                	test   esi,esi
c00287b7:	75 22                	jne    c00287db <__divdf3+0xef>
c00287b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287bc:	40                   	inc    eax
c00287bd:	a9 fe 07 00 00       	test   eax,0x7fe
c00287c2:	74 36                	je     c00287fa <__divdf3+0x10e>
c00287c4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287c8:	0f 89 91 02 00 00    	jns    c0028a5f <__divdf3+0x373>
c00287ce:	89 f8                	mov    eax,edi
c00287d0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287d6:	e9 80 02 00 00       	jmp    c0028a5b <__divdf3+0x36f>
c00287db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287de:	01 f6                	add    esi,esi
c00287e0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287e3:	c1 ef 1f             	shr    edi,0x1f
c00287e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287e9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287ec:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287ef:	09 f7                	or     edi,esi
c00287f1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287f4:	78 2e                	js     c0028824 <__divdf3+0x138>
c00287f6:	89 c8                	mov    eax,ecx
c00287f8:	eb e1                	jmp    c00287db <__divdf3+0xef>
c00287fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287fd:	09 d0                	or     eax,edx
c00287ff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028803:	74 0f                	je     c0028814 <__divdf3+0x128>
c0028805:	85 c0                	test   eax,eax
c0028807:	74 bb                	je     c00287c4 <__divdf3+0xd8>
c0028809:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002880c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002880f:	e9 4b 02 00 00       	jmp    c0028a5f <__divdf3+0x373>
c0028814:	85 c0                	test   eax,eax
c0028816:	75 ac                	jne    c00287c4 <__divdf3+0xd8>
c0028818:	31 ff                	xor    edi,edi
c002881a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002881f:	e9 3b 02 00 00       	jmp    c0028a5f <__divdf3+0x373>
c0028824:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028827:	8d 4f 01             	lea    ecx,[edi+0x1]
c002882a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028830:	75 6b                	jne    c002889d <__divdf3+0x1b1>
c0028832:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028835:	09 d6                	or     esi,edx
c0028837:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002883b:	74 28                	je     c0028865 <__divdf3+0x179>
c002883d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028840:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028843:	85 f6                	test   esi,esi
c0028845:	0f 85 14 02 00 00    	jne    c0028a5f <__divdf3+0x373>
c002884b:	31 ff                	xor    edi,edi
c002884d:	31 c9                	xor    ecx,ecx
c002884f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028852:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028855:	0f 89 04 02 00 00    	jns    c0028a5f <__divdf3+0x373>
c002885b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028860:	e9 fa 01 00 00       	jmp    c0028a5f <__divdf3+0x373>
c0028865:	85 f6                	test   esi,esi
c0028867:	75 1b                	jne    c0028884 <__divdf3+0x198>
c0028869:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002886c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002886f:	25 00 00 00 80       	and    eax,0x80000000
c0028874:	31 c9                	xor    ecx,ecx
c0028876:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002887b:	89 cf                	mov    edi,ecx
c002887d:	89 c1                	mov    ecx,eax
c002887f:	e9 db 01 00 00       	jmp    c0028a5f <__divdf3+0x373>
c0028884:	01 d2                	add    edx,edx
c0028886:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028889:	c1 eb 1f             	shr    ebx,0x1f
c002888c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002888f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028892:	8d 48 01             	lea    ecx,[eax+0x1]
c0028895:	09 da                	or     edx,ebx
c0028897:	78 04                	js     c002889d <__divdf3+0x1b1>
c0028899:	89 c8                	mov    eax,ecx
c002889b:	eb e7                	jmp    c0028884 <__divdf3+0x198>
c002889d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00288a6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00288ac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00288af:	39 d6                	cmp    esi,edx
c00288b1:	77 0d                	ja     c00288c0 <__divdf3+0x1d4>
c00288b3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00288b6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00288b9:	72 1b                	jb     c00288d6 <__divdf3+0x1ea>
c00288bb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00288be:	75 16                	jne    c00288d6 <__divdf3+0x1ea>
c00288c0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288c6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288c9:	83 de 00             	sbb    esi,0x0
c00288cc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288cf:	ba 01 00 00 00       	mov    edx,0x1
c00288d4:	eb 02                	jmp    c00288d8 <__divdf3+0x1ec>
c00288d6:	31 d2                	xor    edx,edx
c00288d8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288df:	31 ff                	xor    edi,edi
c00288e1:	01 ff                	add    edi,edi
c00288e3:	89 d1                	mov    ecx,edx
c00288e5:	c1 e9 1f             	shr    ecx,0x1f
c00288e8:	09 cf                	or     edi,ecx
c00288ea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288ed:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288f0:	89 da                	mov    edx,ebx
c00288f2:	89 f3                	mov    ebx,esi
c00288f4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288f7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288fa:	c1 e9 1f             	shr    ecx,0x1f
c00288fd:	09 ce                	or     esi,ecx
c00288ff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028902:	01 c9                	add    ecx,ecx
c0028904:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028907:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002890a:	85 db                	test   ebx,ebx
c002890c:	78 29                	js     c0028937 <__divdf3+0x24b>
c002890e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028911:	72 07                	jb     c002891a <__divdf3+0x22e>
c0028913:	75 3c                	jne    c0028951 <__divdf3+0x265>
c0028915:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028918:	77 37                	ja     c0028951 <__divdf3+0x265>
c002891a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002891d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028920:	31 d2                	xor    edx,edx
c0028922:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028925:	0f 97 c2             	seta   dl
c0028928:	29 d6                	sub    esi,edx
c002892a:	89 d9                	mov    ecx,ebx
c002892c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002892f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028932:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028935:	eb 17                	jmp    c002894e <__divdf3+0x262>
c0028937:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002893a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002893d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028940:	0f 97 c1             	seta   cl
c0028943:	0f b6 c9             	movzx  ecx,cl
c0028946:	29 ce                	sub    esi,ecx
c0028948:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002894b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002894e:	83 ca 01             	or     edx,0x1
c0028951:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028954:	75 8b                	jne    c00288e1 <__divdf3+0x1f5>
c0028956:	c1 e7 09             	shl    edi,0x9
c0028959:	89 d1                	mov    ecx,edx
c002895b:	c1 e9 17             	shr    ecx,0x17
c002895e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028961:	09 f3                	or     ebx,esi
c0028963:	0f 95 c3             	setne  bl
c0028966:	0f b6 db             	movzx  ebx,bl
c0028969:	c1 e2 09             	shl    edx,0x9
c002896c:	09 d3                	or     ebx,edx
c002896e:	89 ca                	mov    edx,ecx
c0028970:	09 fa                	or     edx,edi
c0028972:	78 0c                	js     c0028980 <__divdf3+0x294>
c0028974:	01 d2                	add    edx,edx
c0028976:	89 d9                	mov    ecx,ebx
c0028978:	c1 e9 1f             	shr    ecx,0x1f
c002897b:	09 ca                	or     edx,ecx
c002897d:	01 db                	add    ebx,ebx
c002897f:	48                   	dec    eax
c0028980:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028985:	0f 8f 83 00 00 00    	jg     c0028a0e <__divdf3+0x322>
c002898b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028991:	85 c0                	test   eax,eax
c0028993:	0f 8f 82 00 00 00    	jg     c0028a1b <__divdf3+0x32f>
c0028999:	83 f8 cc             	cmp    eax,0xffffffcc
c002899c:	7c 77                	jl     c0028a15 <__divdf3+0x329>
c002899e:	be 01 00 00 00       	mov    esi,0x1
c00289a3:	29 c6                	sub    esi,eax
c00289a5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00289ab:	83 fe 1f             	cmp    esi,0x1f
c00289ae:	7e 2f                	jle    c00289df <__divdf3+0x2f3>
c00289b0:	83 fe 20             	cmp    esi,0x20
c00289b3:	75 0a                	jne    c00289bf <__divdf3+0x2d3>
c00289b5:	85 db                	test   ebx,ebx
c00289b7:	0f 95 c3             	setne  bl
c00289ba:	0f b6 db             	movzx  ebx,bl
c00289bd:	eb 1a                	jmp    c00289d9 <__divdf3+0x2ed>
c00289bf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289c2:	89 d7                	mov    edi,edx
c00289c4:	d3 e7                	shl    edi,cl
c00289c6:	89 f9                	mov    ecx,edi
c00289c8:	09 d9                	or     ecx,ebx
c00289ca:	0f 95 c3             	setne  bl
c00289cd:	0f b6 db             	movzx  ebx,bl
c00289d0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289d5:	29 c1                	sub    ecx,eax
c00289d7:	d3 ea                	shr    edx,cl
c00289d9:	09 d3                	or     ebx,edx
c00289db:	31 c0                	xor    eax,eax
c00289dd:	eb 3a                	jmp    c0028a19 <__divdf3+0x32d>
c00289df:	83 c0 1f             	add    eax,0x1f
c00289e2:	89 d7                	mov    edi,edx
c00289e4:	88 c1                	mov    cl,al
c00289e6:	d3 e7                	shl    edi,cl
c00289e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289eb:	89 df                	mov    edi,ebx
c00289ed:	89 f1                	mov    ecx,esi
c00289ef:	d3 ef                	shr    edi,cl
c00289f1:	89 f9                	mov    ecx,edi
c00289f3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289f6:	09 cf                	or     edi,ecx
c00289f8:	88 c1                	mov    cl,al
c00289fa:	d3 e3                	shl    ebx,cl
c00289fc:	85 db                	test   ebx,ebx
c00289fe:	0f 95 c3             	setne  bl
c0028a01:	0f b6 db             	movzx  ebx,bl
c0028a04:	09 fb                	or     ebx,edi
c0028a06:	89 f1                	mov    ecx,esi
c0028a08:	d3 ea                	shr    edx,cl
c0028a0a:	31 c0                	xor    eax,eax
c0028a0c:	eb 0d                	jmp    c0028a1b <__divdf3+0x32f>
c0028a0e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a13:	eb 02                	jmp    c0028a17 <__divdf3+0x32b>
c0028a15:	31 c0                	xor    eax,eax
c0028a17:	31 db                	xor    ebx,ebx
c0028a19:	31 d2                	xor    edx,edx
c0028a1b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a1e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a21:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a27:	09 c8                	or     eax,ecx
c0028a29:	c1 e0 14             	shl    eax,0x14
c0028a2c:	89 d1                	mov    ecx,edx
c0028a2e:	c1 e9 0b             	shr    ecx,0xb
c0028a31:	09 c8                	or     eax,ecx
c0028a33:	89 c6                	mov    esi,eax
c0028a35:	89 d9                	mov    ecx,ebx
c0028a37:	c1 e9 0b             	shr    ecx,0xb
c0028a3a:	c1 e2 15             	shl    edx,0x15
c0028a3d:	09 ca                	or     edx,ecx
c0028a3f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a45:	0f 95 c0             	setne  al
c0028a48:	09 c1                	or     ecx,eax
c0028a4a:	83 e1 01             	and    ecx,0x1
c0028a4d:	c1 eb 0a             	shr    ebx,0xa
c0028a50:	21 cb                	and    ebx,ecx
c0028a52:	01 d3                	add    ebx,edx
c0028a54:	89 d8                	mov    eax,ebx
c0028a56:	83 d6 00             	adc    esi,0x0
c0028a59:	89 f2                	mov    edx,esi
c0028a5b:	89 c7                	mov    edi,eax
c0028a5d:	89 d1                	mov    ecx,edx
c0028a5f:	89 f8                	mov    eax,edi
c0028a61:	89 ca                	mov    edx,ecx
c0028a63:	83 c4 2c             	add    esp,0x2c
c0028a66:	5b                   	pop    ebx
c0028a67:	5e                   	pop    esi
c0028a68:	5f                   	pop    edi
c0028a69:	5d                   	pop    ebp
c0028a6a:	c3                   	ret    

c0028a6b <__floatsidf>:
c0028a6b:	55                   	push   ebp
c0028a6c:	89 e5                	mov    ebp,esp
c0028a6e:	56                   	push   esi
c0028a6f:	53                   	push   ebx
c0028a70:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a73:	85 db                	test   ebx,ebx
c0028a75:	7e 15                	jle    c0028a8c <__floatsidf+0x21>
c0028a77:	0f bd cb             	bsr    ecx,ebx
c0028a7a:	83 f1 1f             	xor    ecx,0x1f
c0028a7d:	d3 e3                	shl    ebx,cl
c0028a7f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a85:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a8a:	eb 21                	jmp    c0028aad <__floatsidf+0x42>
c0028a8c:	b8 00 00 00 00       	mov    eax,0x0
c0028a91:	ba 00 00 00 00       	mov    edx,0x0
c0028a96:	74 2a                	je     c0028ac2 <__floatsidf+0x57>
c0028a98:	f7 db                	neg    ebx
c0028a9a:	0f bd cb             	bsr    ecx,ebx
c0028a9d:	83 f1 1f             	xor    ecx,0x1f
c0028aa0:	d3 e3                	shl    ebx,cl
c0028aa2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028aa8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028aad:	29 c8                	sub    eax,ecx
c0028aaf:	c1 e0 14             	shl    eax,0x14
c0028ab2:	89 c1                	mov    ecx,eax
c0028ab4:	89 de                	mov    esi,ebx
c0028ab6:	c1 ee 0b             	shr    esi,0xb
c0028ab9:	09 f1                	or     ecx,esi
c0028abb:	89 ca                	mov    edx,ecx
c0028abd:	c1 e3 15             	shl    ebx,0x15
c0028ac0:	89 d8                	mov    eax,ebx
c0028ac2:	5b                   	pop    ebx
c0028ac3:	5e                   	pop    esi
c0028ac4:	5d                   	pop    ebp
c0028ac5:	c3                   	ret    

c0028ac6 <__floatunsidf>:
c0028ac6:	55                   	push   ebp
c0028ac7:	89 e5                	mov    ebp,esp
c0028ac9:	56                   	push   esi
c0028aca:	53                   	push   ebx
c0028acb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ace:	85 db                	test   ebx,ebx
c0028ad0:	74 2a                	je     c0028afc <__floatunsidf+0x36>
c0028ad2:	0f bd cb             	bsr    ecx,ebx
c0028ad5:	83 f1 1f             	xor    ecx,0x1f
c0028ad8:	d3 e3                	shl    ebx,cl
c0028ada:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ae0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ae5:	29 c8                	sub    eax,ecx
c0028ae7:	c1 e0 14             	shl    eax,0x14
c0028aea:	89 c1                	mov    ecx,eax
c0028aec:	89 de                	mov    esi,ebx
c0028aee:	c1 ee 0b             	shr    esi,0xb
c0028af1:	09 f1                	or     ecx,esi
c0028af3:	89 ca                	mov    edx,ecx
c0028af5:	c1 e3 15             	shl    ebx,0x15
c0028af8:	89 d8                	mov    eax,ebx
c0028afa:	eb 04                	jmp    c0028b00 <__floatunsidf+0x3a>
c0028afc:	31 c0                	xor    eax,eax
c0028afe:	31 d2                	xor    edx,edx
c0028b00:	5b                   	pop    ebx
c0028b01:	5e                   	pop    esi
c0028b02:	5d                   	pop    ebp
c0028b03:	c3                   	ret    

c0028b04 <__fixdfsi>:
c0028b04:	55                   	push   ebp
c0028b05:	89 e5                	mov    ebp,esp
c0028b07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b0a:	89 d1                	mov    ecx,edx
c0028b0c:	c1 e1 0b             	shl    ecx,0xb
c0028b0f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b18:	c1 e8 15             	shr    eax,0x15
c0028b1b:	09 c1                	or     ecx,eax
c0028b1d:	c1 fa 14             	sar    edx,0x14
c0028b20:	78 1f                	js     c0028b41 <__fixdfsi+0x3d>
c0028b22:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b28:	31 c0                	xor    eax,eax
c0028b2a:	83 fa 1e             	cmp    edx,0x1e
c0028b2d:	77 40                	ja     c0028b6f <__fixdfsi+0x6b>
c0028b2f:	89 c8                	mov    eax,ecx
c0028b31:	0d 00 00 00 80       	or     eax,0x80000000
c0028b36:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b3b:	29 d1                	sub    ecx,edx
c0028b3d:	d3 e8                	shr    eax,cl
c0028b3f:	eb 2e                	jmp    c0028b6f <__fixdfsi+0x6b>
c0028b41:	31 c0                	xor    eax,eax
c0028b43:	81 c2 01 04 00 00    	add    edx,0x401
c0028b49:	78 24                	js     c0028b6f <__fixdfsi+0x6b>
c0028b4b:	83 fa 1e             	cmp    edx,0x1e
c0028b4e:	7e 09                	jle    c0028b59 <__fixdfsi+0x55>
c0028b50:	83 fa 1f             	cmp    edx,0x1f
c0028b53:	75 18                	jne    c0028b6d <__fixdfsi+0x69>
c0028b55:	85 c9                	test   ecx,ecx
c0028b57:	75 14                	jne    c0028b6d <__fixdfsi+0x69>
c0028b59:	89 c8                	mov    eax,ecx
c0028b5b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b60:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b65:	29 d1                	sub    ecx,edx
c0028b67:	d3 e8                	shr    eax,cl
c0028b69:	f7 d8                	neg    eax
c0028b6b:	eb 02                	jmp    c0028b6f <__fixdfsi+0x6b>
c0028b6d:	31 c0                	xor    eax,eax
c0028b6f:	5d                   	pop    ebp
c0028b70:	c3                   	ret    

c0028b71 <__fixunsdfsi>:
c0028b71:	55                   	push   ebp
c0028b72:	89 e5                	mov    ebp,esp
c0028b74:	53                   	push   ebx
c0028b75:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b7b:	89 d3                	mov    ebx,edx
c0028b7d:	c1 fb 14             	sar    ebx,0x14
c0028b80:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b86:	31 c0                	xor    eax,eax
c0028b88:	83 fb 1f             	cmp    ebx,0x1f
c0028b8b:	77 1d                	ja     c0028baa <__fixunsdfsi+0x39>
c0028b8d:	89 d0                	mov    eax,edx
c0028b8f:	c1 e0 0b             	shl    eax,0xb
c0028b92:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b97:	c1 e9 15             	shr    ecx,0x15
c0028b9a:	09 c8                	or     eax,ecx
c0028b9c:	0d 00 00 00 80       	or     eax,0x80000000
c0028ba1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028ba6:	29 d9                	sub    ecx,ebx
c0028ba8:	d3 e8                	shr    eax,cl
c0028baa:	5b                   	pop    ebx
c0028bab:	5d                   	pop    ebp
c0028bac:	c3                   	ret    

c0028bad <__cmpdf2>:
c0028bad:	55                   	push   ebp
c0028bae:	89 e5                	mov    ebp,esp
c0028bb0:	57                   	push   edi
c0028bb1:	56                   	push   esi
c0028bb2:	53                   	push   ebx
c0028bb3:	83 ec 0c             	sub    esp,0xc
c0028bb6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028bb9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bbc:	89 ca                	mov    edx,ecx
c0028bbe:	c1 ea 14             	shr    edx,0x14
c0028bc1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028bc7:	89 cb                	mov    ebx,ecx
c0028bc9:	c1 fb 1f             	sar    ebx,0x1f
c0028bcc:	31 da                	xor    edx,ebx
c0028bce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bd1:	89 df                	mov    edi,ebx
c0028bd3:	c1 e7 0b             	shl    edi,0xb
c0028bd6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028bd9:	c1 e1 0b             	shl    ecx,0xb
c0028bdc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028be2:	c1 eb 15             	shr    ebx,0x15
c0028be5:	09 d9                	or     ecx,ebx
c0028be7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028bea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bed:	89 ce                	mov    esi,ecx
c0028bef:	c1 ee 14             	shr    esi,0x14
c0028bf2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028bf8:	89 cb                	mov    ebx,ecx
c0028bfa:	c1 fb 1f             	sar    ebx,0x1f
c0028bfd:	31 de                	xor    esi,ebx
c0028bff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028c02:	89 df                	mov    edi,ebx
c0028c04:	c1 e7 0b             	shl    edi,0xb
c0028c07:	c1 e1 0b             	shl    ecx,0xb
c0028c0a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c10:	c1 eb 15             	shr    ebx,0x15
c0028c13:	09 d9                	or     ecx,ebx
c0028c15:	89 d3                	mov    ebx,edx
c0028c17:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c1d:	43                   	inc    ebx
c0028c1e:	83 fb 01             	cmp    ebx,0x1
c0028c21:	77 08                	ja     c0028c2b <__cmpdf2+0x7e>
c0028c23:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c26:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c29:	75 68                	jne    c0028c93 <__cmpdf2+0xe6>
c0028c2b:	89 f3                	mov    ebx,esi
c0028c2d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c33:	43                   	inc    ebx
c0028c34:	83 fb 01             	cmp    ebx,0x1
c0028c37:	77 06                	ja     c0028c3f <__cmpdf2+0x92>
c0028c39:	89 fb                	mov    ebx,edi
c0028c3b:	09 cb                	or     ebx,ecx
c0028c3d:	75 54                	jne    c0028c93 <__cmpdf2+0xe6>
c0028c3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c42:	09 f8                	or     eax,edi
c0028c44:	09 c8                	or     eax,ecx
c0028c46:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c49:	75 12                	jne    c0028c5d <__cmpdf2+0xb0>
c0028c4b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c4e:	83 f8 01             	cmp    eax,0x1
c0028c51:	77 0a                	ja     c0028c5d <__cmpdf2+0xb0>
c0028c53:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c56:	31 c0                	xor    eax,eax
c0028c58:	83 fb 01             	cmp    ebx,0x1
c0028c5b:	76 36                	jbe    c0028c93 <__cmpdf2+0xe6>
c0028c5d:	b8 01 00 00 00       	mov    eax,0x1
c0028c62:	39 f2                	cmp    edx,esi
c0028c64:	7f 2d                	jg     c0028c93 <__cmpdf2+0xe6>
c0028c66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c6b:	7c 26                	jl     c0028c93 <__cmpdf2+0xe6>
c0028c6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c70:	77 07                	ja     c0028c79 <__cmpdf2+0xcc>
c0028c72:	72 16                	jb     c0028c8a <__cmpdf2+0xdd>
c0028c74:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c77:	76 0a                	jbe    c0028c83 <__cmpdf2+0xd6>
c0028c79:	89 d0                	mov    eax,edx
c0028c7b:	c1 f8 1f             	sar    eax,0x1f
c0028c7e:	83 c8 01             	or     eax,0x1
c0028c81:	eb 10                	jmp    c0028c93 <__cmpdf2+0xe6>
c0028c83:	b8 00 00 00 00       	mov    eax,0x0
c0028c88:	73 09                	jae    c0028c93 <__cmpdf2+0xe6>
c0028c8a:	89 d0                	mov    eax,edx
c0028c8c:	c1 f8 1f             	sar    eax,0x1f
c0028c8f:	83 e0 02             	and    eax,0x2
c0028c92:	48                   	dec    eax
c0028c93:	83 c4 0c             	add    esp,0xc
c0028c96:	5b                   	pop    ebx
c0028c97:	5e                   	pop    esi
c0028c98:	5f                   	pop    edi
c0028c99:	5d                   	pop    ebp
c0028c9a:	c3                   	ret    

c0028c9b <__eqdf2>:
c0028c9b:	55                   	push   ebp
c0028c9c:	89 e5                	mov    ebp,esp
c0028c9e:	50                   	push   eax
c0028c9f:	6a 01                	push   0x1
c0028ca1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028ca4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028ca7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028caa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cad:	e8 fb fe ff ff       	call   c0028bad <__cmpdf2>
c0028cb2:	83 c4 18             	add    esp,0x18
c0028cb5:	c9                   	leave  
c0028cb6:	c3                   	ret    

c0028cb7 <__nedf2>:
c0028cb7:	eb e2                	jmp    c0028c9b <__eqdf2>

c0028cb9 <__gtdf2>:
c0028cb9:	55                   	push   ebp
c0028cba:	89 e5                	mov    ebp,esp
c0028cbc:	50                   	push   eax
c0028cbd:	6a ff                	push   0xffffffff
c0028cbf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cc2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cc5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028ccb:	e8 dd fe ff ff       	call   c0028bad <__cmpdf2>
c0028cd0:	83 c4 18             	add    esp,0x18
c0028cd3:	c9                   	leave  
c0028cd4:	c3                   	ret    

c0028cd5 <__gedf2>:
c0028cd5:	eb e2                	jmp    c0028cb9 <__gtdf2>

c0028cd7 <__ltdf2>:
c0028cd7:	eb c2                	jmp    c0028c9b <__eqdf2>

c0028cd9 <__ledf2>:
c0028cd9:	eb c0                	jmp    c0028c9b <__eqdf2>

c0028cdb <__truncdfsf2>:
c0028cdb:	55                   	push   ebp
c0028cdc:	89 e5                	mov    ebp,esp
c0028cde:	57                   	push   edi
c0028cdf:	56                   	push   esi
c0028ce0:	53                   	push   ebx
c0028ce1:	83 ec 0c             	sub    esp,0xc
c0028ce4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028ce7:	89 d1                	mov    ecx,edx
c0028ce9:	c1 f9 14             	sar    ecx,0x14
c0028cec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cef:	89 df                	mov    edi,ebx
c0028cf1:	c1 e7 0b             	shl    edi,0xb
c0028cf4:	89 d0                	mov    eax,edx
c0028cf6:	c1 e0 0b             	shl    eax,0xb
c0028cf9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cfe:	c1 eb 15             	shr    ebx,0x15
c0028d01:	09 d8                	or     eax,ebx
c0028d03:	89 cb                	mov    ebx,ecx
c0028d05:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028d0b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d11:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d17:	0f 86 9e 00 00 00    	jbe    c0028dbb <__truncdfsf2+0xe0>
c0028d1d:	85 db                	test   ebx,ebx
c0028d1f:	75 0a                	jne    c0028d2b <__truncdfsf2+0x50>
c0028d21:	c1 fa 17             	sar    edx,0x17
c0028d24:	30 d2                	xor    dl,dl
c0028d26:	e9 84 00 00 00       	jmp    c0028daf <__truncdfsf2+0xd4>
c0028d2b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d31:	83 fe 83             	cmp    esi,0xffffff83
c0028d34:	7d 4b                	jge    c0028d81 <__truncdfsf2+0xa6>
c0028d36:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d3b:	29 f1                	sub    ecx,esi
c0028d3d:	83 f9 1f             	cmp    ecx,0x1f
c0028d40:	7f 6b                	jg     c0028dad <__truncdfsf2+0xd2>
c0028d42:	0d 00 00 00 80       	or     eax,0x80000000
c0028d47:	89 c3                	mov    ebx,eax
c0028d49:	d3 eb                	shr    ebx,cl
c0028d4b:	be 01 00 00 00       	mov    esi,0x1
c0028d50:	d3 e6                	shl    esi,cl
c0028d52:	4e                   	dec    esi
c0028d53:	21 f0                	and    eax,esi
c0028d55:	09 f8                	or     eax,edi
c0028d57:	0f 95 c0             	setne  al
c0028d5a:	0f b6 c0             	movzx  eax,al
c0028d5d:	09 c3                	or     ebx,eax
c0028d5f:	89 d9                	mov    ecx,ebx
c0028d61:	c1 e9 08             	shr    ecx,0x8
c0028d64:	f6 c3 7f             	test   bl,0x7f
c0028d67:	0f 95 c0             	setne  al
c0028d6a:	09 c8                	or     eax,ecx
c0028d6c:	83 e0 01             	and    eax,0x1
c0028d6f:	c1 eb 07             	shr    ebx,0x7
c0028d72:	21 c3                	and    ebx,eax
c0028d74:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d7a:	09 d1                	or     ecx,edx
c0028d7c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d7f:	eb 76                	jmp    c0028df7 <__truncdfsf2+0x11c>
c0028d81:	83 c6 80             	add    esi,0xffffff80
c0028d84:	7e 1d                	jle    c0028da3 <__truncdfsf2+0xc8>
c0028d86:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d8c:	75 0b                	jne    c0028d99 <__truncdfsf2+0xbe>
c0028d8e:	09 f8                	or     eax,edi
c0028d90:	74 09                	je     c0028d9b <__truncdfsf2+0xc0>
c0028d92:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d97:	eb 02                	jmp    c0028d9b <__truncdfsf2+0xc0>
c0028d99:	31 c0                	xor    eax,eax
c0028d9b:	c1 fa 17             	sar    edx,0x17
c0028d9e:	80 ca ff             	or     dl,0xff
c0028da1:	eb 0e                	jmp    c0028db1 <__truncdfsf2+0xd6>
c0028da3:	c1 fa 1f             	sar    edx,0x1f
c0028da6:	c1 e2 08             	shl    edx,0x8
c0028da9:	09 ca                	or     edx,ecx
c0028dab:	eb 04                	jmp    c0028db1 <__truncdfsf2+0xd6>
c0028dad:	31 d2                	xor    edx,edx
c0028daf:	31 c0                	xor    eax,eax
c0028db1:	c1 e2 17             	shl    edx,0x17
c0028db4:	c1 e8 08             	shr    eax,0x8
c0028db7:	09 d0                	or     eax,edx
c0028db9:	eb 3c                	jmp    c0028df7 <__truncdfsf2+0x11c>
c0028dbb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028dc1:	89 ca                	mov    edx,ecx
c0028dc3:	c1 fa 0b             	sar    edx,0xb
c0028dc6:	c1 e2 08             	shl    edx,0x8
c0028dc9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028dcc:	31 db                	xor    ebx,ebx
c0028dce:	85 ff                	test   edi,edi
c0028dd0:	0f 95 c3             	setne  bl
c0028dd3:	09 d8                	or     eax,ebx
c0028dd5:	89 c3                	mov    ebx,eax
c0028dd7:	c1 eb 08             	shr    ebx,0x8
c0028dda:	a8 7f                	test   al,0x7f
c0028ddc:	0f 95 c2             	setne  dl
c0028ddf:	89 d6                	mov    esi,edx
c0028de1:	09 de                	or     esi,ebx
c0028de3:	83 e6 01             	and    esi,0x1
c0028de6:	c1 e8 07             	shr    eax,0x7
c0028de9:	21 f0                	and    eax,esi
c0028deb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dee:	09 ca                	or     edx,ecx
c0028df0:	c1 e2 17             	shl    edx,0x17
c0028df3:	09 da                	or     edx,ebx
c0028df5:	01 d0                	add    eax,edx
c0028df7:	83 c4 0c             	add    esp,0xc
c0028dfa:	5b                   	pop    ebx
c0028dfb:	5e                   	pop    esi
c0028dfc:	5f                   	pop    edi
c0028dfd:	5d                   	pop    ebp
c0028dfe:	c3                   	ret    

c0028dff <__extendsfdf2>:
c0028dff:	55                   	push   ebp
c0028e00:	89 e5                	mov    ebp,esp
c0028e02:	57                   	push   edi
c0028e03:	56                   	push   esi
c0028e04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028e07:	89 d1                	mov    ecx,edx
c0028e09:	c1 f9 17             	sar    ecx,0x17
c0028e0c:	c1 e2 08             	shl    edx,0x8
c0028e0f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e15:	89 c8                	mov    eax,ecx
c0028e17:	80 e4 f8             	and    ah,0xf8
c0028e1a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e1d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e23:	75 27                	jne    c0028e4c <__extendsfdf2+0x4d>
c0028e25:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e2b:	75 18                	jne    c0028e45 <__extendsfdf2+0x46>
c0028e2d:	85 d2                	test   edx,edx
c0028e2f:	74 20                	je     c0028e51 <__extendsfdf2+0x52>
c0028e31:	41                   	inc    ecx
c0028e32:	01 d2                	add    edx,edx
c0028e34:	79 fb                	jns    c0028e31 <__extendsfdf2+0x32>
c0028e36:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e3c:	29 c8                	sub    eax,ecx
c0028e3e:	05 81 03 00 00       	add    eax,0x381
c0028e43:	eb 0c                	jmp    c0028e51 <__extendsfdf2+0x52>
c0028e45:	05 00 07 00 00       	add    eax,0x700
c0028e4a:	eb 05                	jmp    c0028e51 <__extendsfdf2+0x52>
c0028e4c:	05 80 03 00 00       	add    eax,0x380
c0028e51:	c1 e0 14             	shl    eax,0x14
c0028e54:	89 c1                	mov    ecx,eax
c0028e56:	89 d0                	mov    eax,edx
c0028e58:	c1 e8 0b             	shr    eax,0xb
c0028e5b:	09 c1                	or     ecx,eax
c0028e5d:	c1 e2 15             	shl    edx,0x15
c0028e60:	89 d0                	mov    eax,edx
c0028e62:	89 ca                	mov    edx,ecx
c0028e64:	5e                   	pop    esi
c0028e65:	5f                   	pop    edi
c0028e66:	5d                   	pop    ebp
c0028e67:	c3                   	ret    
c0028e68:	66 90                	xchg   ax,ax
c0028e6a:	66 90                	xchg   ax,ax
c0028e6c:	66 90                	xchg   ax,ax
c0028e6e:	66 90                	xchg   ax,ax

c0028e70 <fabs>:
c0028e70:	83 ec 0c             	sub    esp,0xc
c0028e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e77:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e7e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e87:	dd 04 24             	fld    QWORD PTR [esp]
c0028e8a:	83 c4 0c             	add    esp,0xc
c0028e8d:	c3                   	ret    
c0028e8e:	66 90                	xchg   ax,ax

c0028e90 <lrint>:
c0028e90:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e94:	83 ec 04             	sub    esp,0x4
c0028e97:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e9a:	58                   	pop    eax
c0028e9b:	c3                   	ret    

c0028e9c <lrintf>:
c0028e9c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028ea0:	83 ec 04             	sub    esp,0x4
c0028ea3:	db 1c 24             	fistp  DWORD PTR [esp]
c0028ea6:	58                   	pop    eax
c0028ea7:	c3                   	ret    

Disassembly of section .init:

c0028ea8 <_init>:
c0028ea8:	55                   	push   ebp
c0028ea9:	89 e5                	mov    ebp,esp
c0028eab:	e8 68 72 fd ff       	call   c0000118 <frame_dummy>
c0028eb0:	e8 5b e0 ff ff       	call   c0026f10 <__do_global_ctors_aux>
c0028eb5:	5d                   	pop    ebp
c0028eb6:	c3                   	ret    

Disassembly of section .fini:

c0028eb7 <_fini>:
c0028eb7:	55                   	push   ebp
c0028eb8:	89 e5                	mov    ebp,esp
c0028eba:	e8 e9 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028ebf:	5d                   	pop    ebp
c0028ec0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028ec2 <Computer::~Computer()>:
c0028ec2:	83 ec 0c             	sub    esp,0xc
c0028ec5:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c0028eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ece:	89 10                	mov    DWORD PTR [eax],edx
c0028ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	50                   	push   eax
c0028ed8:	e8 fd ac fe ff       	call   c0013bda <Device::~Device()>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	90                   	nop
c0028ee1:	83 c4 0c             	add    esp,0xc
c0028ee4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ee6 <Computer::~Computer()>:
c0028ee6:	83 ec 0c             	sub    esp,0xc
c0028ee9:	83 ec 0c             	sub    esp,0xc
c0028eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef0:	e8 cd ff ff ff       	call   c0028ec2 <Computer::~Computer()>
c0028ef5:	83 c4 10             	add    esp,0x10
c0028ef8:	83 ec 08             	sub    esp,0x8
c0028efb:	68 ec 01 00 00       	push   0x1ec
c0028f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f04:	e8 ea 98 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0028f09:	83 c4 10             	add    esp,0x10
c0028f0c:	83 c4 0c             	add    esp,0xc
c0028f0f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f10 <idleCommon()>:
c0028f10:	83 ec 0c             	sub    esp,0xc
c0028f13:	fa                   	cli    
c0028f14:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0028f1a:	e8 9d 51 ff ff       	call   c001e0bc <schedule()>
c0028f1f:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0028f24:	48                   	dec    eax
c0028f25:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0028f2a:	75 01                	jne    c0028f2d <idleCommon()+0x1d>
c0028f2c:	fb                   	sti    
c0028f2d:	83 c4 0c             	add    esp,0xc
c0028f30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f32 <LinkedList<UnixFile>::~LinkedList()>:
c0028f32:	90                   	nop
c0028f33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f34 <LinkedList<UnixFile>::LinkedList()>:
c0028f34:	83 ec 0c             	sub    esp,0xc
c0028f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f77:	83 ec 0c             	sub    esp,0xc
c0028f7a:	68 5a ad 02 c0       	push   0xc002ad5a
c0028f7f:	e8 4f 99 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0028f84:	83 c4 10             	add    esp,0x10
c0028f87:	90                   	nop
c0028f88:	83 c4 0c             	add    esp,0xc
c0028f8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f8c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f94:	75 10                	jne    c0028fa6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f96:	83 ec 0c             	sub    esp,0xc
c0028f99:	68 74 ad 02 c0       	push   0xc002ad74
c0028f9e:	e8 66 13 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028faa:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fac:	85 c0                	test   eax,eax
c0028fae:	74 34                	je     c0028fe4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb7:	85 c0                	test   eax,eax
c0028fb9:	74 29                	je     c0028fe4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fc6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fd1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fdb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fe2:	eb 65                	jmp    c0029049 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fea:	85 c0                	test   eax,eax
c0028fec:	75 4b                	jne    c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ff5:	85 c0                	test   eax,eax
c0028ff7:	75 40                	jne    c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029001:	89 10                	mov    DWORD PTR [eax],edx
c0029003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002900b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029015:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029020:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029023:	85 c0                	test   eax,eax
c0029025:	74 22                	je     c0029049 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029027:	83 ec 0c             	sub    esp,0xc
c002902a:	68 96 ad 02 c0       	push   0xc002ad96
c002902f:	e8 d5 12 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029034:	83 c4 10             	add    esp,0x10
c0029037:	eb 10                	jmp    c0029049 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029039:	83 ec 0c             	sub    esp,0xc
c002903c:	68 a0 ad 02 c0       	push   0xc002ada0
c0029041:	e8 c3 12 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029046:	83 c4 10             	add    esp,0x10
c0029049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029050:	8d 50 01             	lea    edx,[eax+0x1]
c0029053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029057:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002905a:	90                   	nop
c002905b:	83 c4 0c             	add    esp,0xc
c002905e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029060 <LinkedList<UnixFile>::getFirstElement()>:
c0029060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029064:	8b 00                	mov    eax,DWORD PTR [eax]
c0029066:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029068 <LinkedList<UnixFile>::removeFirst()>:
c0029068:	83 ec 0c             	sub    esp,0xc
c002906b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029071:	85 c0                	test   eax,eax
c0029073:	75 12                	jne    c0029087 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029075:	83 ec 0c             	sub    esp,0xc
c0029078:	68 ac ad 02 c0       	push   0xc002adac
c002907d:	e8 87 12 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029082:	83 c4 10             	add    esp,0x10
c0029085:	eb 7e                	jmp    c0029105 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002908e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029091:	85 c0                	test   eax,eax
c0029093:	74 10                	je     c00290a5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029095:	83 ec 0c             	sub    esp,0xc
c0029098:	68 f7 ad 02 c0       	push   0xc002adf7
c002909d:	e8 67 12 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00290a2:	83 c4 10             	add    esp,0x10
c00290a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ae:	85 c0                	test   eax,eax
c00290b0:	75 33                	jne    c00290e5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00290b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ce:	83 f8 01             	cmp    eax,0x1
c00290d1:	74 21                	je     c00290f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290d3:	83 ec 0c             	sub    esp,0xc
c00290d6:	68 d0 ad 02 c0       	push   0xc002add0
c00290db:	e8 29 12 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00290e0:	83 c4 10             	add    esp,0x10
c00290e3:	eb 0f                	jmp    c00290f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	89 10                	mov    DWORD PTR [eax],edx
c00290f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029105:	83 c4 0c             	add    esp,0xc
c0029108:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002910a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002910a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002910e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029111:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029112 <DriverlessDevice::~DriverlessDevice()>:
c0029112:	ba 9c b5 02 c0       	mov    edx,0xc002b59c
c0029117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002911b:	89 10                	mov    DWORD PTR [eax],edx
c002911d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029121:	50                   	push   eax
c0029122:	e8 b3 aa fe ff       	call   c0013bda <Device::~Device()>
c0029127:	83 c4 04             	add    esp,0x4
c002912a:	90                   	nop
c002912b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002912c <DriverlessDevice::~DriverlessDevice()>:
c002912c:	83 ec 0c             	sub    esp,0xc
c002912f:	83 ec 0c             	sub    esp,0xc
c0029132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029136:	e8 d7 ff ff ff       	call   c0029112 <DriverlessDevice::~DriverlessDevice()>
c002913b:	83 c4 10             	add    esp,0x10
c002913e:	83 ec 08             	sub    esp,0x8
c0029141:	68 58 01 00 00       	push   0x158
c0029146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002914a:	e8 a4 96 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c002914f:	83 c4 10             	add    esp,0x10
c0029152:	83 c4 0c             	add    esp,0xc
c0029155:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029156 <LinkedList<Device>::addElement(Device*)>:
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002915e:	75 10                	jne    c0029170 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029160:	83 ec 0c             	sub    esp,0xc
c0029163:	68 74 ad 02 c0       	push   0xc002ad74
c0029168:	e8 9c 11 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c002916d:	83 c4 10             	add    esp,0x10
c0029170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029174:	8b 00                	mov    eax,DWORD PTR [eax]
c0029176:	85 c0                	test   eax,eax
c0029178:	74 3a                	je     c00291b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002917a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029181:	85 c0                	test   eax,eax
c0029183:	74 2f                	je     c00291b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029189:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002918c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029190:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002919e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291a8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291b2:	eb 68                	jmp    c002921c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00291ba:	85 c0                	test   eax,eax
c00291bc:	75 4e                	jne    c002920c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291c5:	85 c0                	test   eax,eax
c00291c7:	75 43                	jne    c002920c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291d1:	89 10                	mov    DWORD PTR [eax],edx
c00291d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291e5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291f6:	85 c0                	test   eax,eax
c00291f8:	74 22                	je     c002921c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291fa:	83 ec 0c             	sub    esp,0xc
c00291fd:	68 96 ad 02 c0       	push   0xc002ad96
c0029202:	e8 02 11 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029207:	83 c4 10             	add    esp,0x10
c002920a:	eb 10                	jmp    c002921c <LinkedList<Device>::addElement(Device*)+0xc6>
c002920c:	83 ec 0c             	sub    esp,0xc
c002920f:	68 a0 ad 02 c0       	push   0xc002ada0
c0029214:	e8 f0 10 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029219:	83 c4 10             	add    esp,0x10
c002921c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029220:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029223:	8d 50 01             	lea    edx,[eax+0x1]
c0029226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002922d:	90                   	nop
c002922e:	83 c4 0c             	add    esp,0xc
c0029231:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029232 <LinkedList<Device>::LinkedList()>:
c0029232:	83 ec 0c             	sub    esp,0xc
c0029235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002923f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029243:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029259:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002925f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029263:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002926a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029275:	83 ec 0c             	sub    esp,0xc
c0029278:	68 5a ad 02 c0       	push   0xc002ad5a
c002927d:	e8 51 96 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c0029282:	83 c4 10             	add    esp,0x10
c0029285:	90                   	nop
c0029286:	83 c4 0c             	add    esp,0xc
c0029289:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002928a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002928a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002928e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029290:	85 c0                	test   eax,eax
c0029292:	75 0e                	jne    c00292a2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002929b:	85 c0                	test   eax,eax
c002929d:	75 03                	jne    c00292a2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002929f:	b0 01                	mov    al,0x1
c00292a1:	c3                   	ret    
c00292a2:	b0 00                	mov    al,0x0
c00292a4:	90                   	nop
c00292a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00292a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00292a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00292ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00292ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00292ae:	83 ec 0c             	sub    esp,0xc
c00292b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00292b7:	85 c0                	test   eax,eax
c00292b9:	75 15                	jne    c00292d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00292bb:	83 ec 0c             	sub    esp,0xc
c00292be:	68 ac ad 02 c0       	push   0xc002adac
c00292c3:	e8 41 10 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00292c8:	83 c4 10             	add    esp,0x10
c00292cb:	e9 88 00 00 00       	jmp    c0029358 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292da:	85 c0                	test   eax,eax
c00292dc:	0f 95 c0             	setne  al
c00292df:	84 c0                	test   al,al
c00292e1:	74 10                	je     c00292f3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292e3:	83 ec 0c             	sub    esp,0xc
c00292e6:	68 f7 ad 02 c0       	push   0xc002adf7
c00292eb:	e8 19 10 ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00292f0:	83 c4 10             	add    esp,0x10
c00292f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292fc:	85 c0                	test   eax,eax
c00292fe:	0f 94 c0             	sete   al
c0029301:	84 c0                	test   al,al
c0029303:	74 33                	je     c0029338 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029309:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002930f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029313:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002931a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029321:	83 f8 01             	cmp    eax,0x1
c0029324:	74 21                	je     c0029347 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029326:	83 ec 0c             	sub    esp,0xc
c0029329:	68 d0 ad 02 c0       	push   0xc002add0
c002932e:	e8 d6 0f ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029333:	83 c4 10             	add    esp,0x10
c0029336:	eb 0f                	jmp    c0029347 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933c:	8b 00                	mov    eax,DWORD PTR [eax]
c002933e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029345:	89 10                	mov    DWORD PTR [eax],edx
c0029347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002934e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029355:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029358:	83 c4 0c             	add    esp,0xc
c002935b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002935c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002935c:	83 ec 0c             	sub    esp,0xc
c002935f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029364:	75 10                	jne    c0029376 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029366:	83 ec 0c             	sub    esp,0xc
c0029369:	68 74 ad 02 c0       	push   0xc002ad74
c002936e:	e8 96 0f ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029373:	83 c4 10             	add    esp,0x10
c0029376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937a:	8b 00                	mov    eax,DWORD PTR [eax]
c002937c:	85 c0                	test   eax,eax
c002937e:	74 34                	je     c00293b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029387:	85 c0                	test   eax,eax
c0029389:	74 29                	je     c00293b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002938b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029392:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029396:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293ab:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293b2:	eb 65                	jmp    c0029419 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ba:	85 c0                	test   eax,eax
c00293bc:	75 4b                	jne    c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c5:	85 c0                	test   eax,eax
c00293c7:	75 40                	jne    c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293d1:	89 10                	mov    DWORD PTR [eax],edx
c00293d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293e5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293f3:	85 c0                	test   eax,eax
c00293f5:	74 22                	je     c0029419 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293f7:	83 ec 0c             	sub    esp,0xc
c00293fa:	68 96 ad 02 c0       	push   0xc002ad96
c00293ff:	e8 05 0f ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029404:	83 c4 10             	add    esp,0x10
c0029407:	eb 10                	jmp    c0029419 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029409:	83 ec 0c             	sub    esp,0xc
c002940c:	68 a0 ad 02 c0       	push   0xc002ada0
c0029411:	e8 f3 0e ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029416:	83 c4 10             	add    esp,0x10
c0029419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029420:	8d 50 01             	lea    edx,[eax+0x1]
c0029423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029427:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002942a:	90                   	nop
c002942b:	83 c4 0c             	add    esp,0xc
c002942e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029430 <ACPI::~ACPI()>:
c0029430:	83 ec 0c             	sub    esp,0xc
c0029433:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0029438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943c:	89 10                	mov    DWORD PTR [eax],edx
c002943e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029442:	83 ec 0c             	sub    esp,0xc
c0029445:	50                   	push   eax
c0029446:	e8 8f a7 fe ff       	call   c0013bda <Device::~Device()>
c002944b:	83 c4 10             	add    esp,0x10
c002944e:	90                   	nop
c002944f:	83 c4 0c             	add    esp,0xc
c0029452:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029454 <ACPI::~ACPI()>:
c0029454:	83 ec 0c             	sub    esp,0xc
c0029457:	83 ec 0c             	sub    esp,0xc
c002945a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002945e:	e8 cd ff ff ff       	call   c0029430 <ACPI::~ACPI()>
c0029463:	83 c4 10             	add    esp,0x10
c0029466:	83 ec 08             	sub    esp,0x8
c0029469:	68 64 12 00 00       	push   0x1264
c002946e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029472:	e8 7c 93 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029477:	83 c4 10             	add    esp,0x10
c002947a:	83 c4 0c             	add    esp,0xc
c002947d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002947e <LinkedList<Device>::~LinkedList()>:
c002947e:	90                   	nop
c002947f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029480 <LinkedList<Device>::isEmpty()>:
c0029480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029484:	8b 00                	mov    eax,DWORD PTR [eax]
c0029486:	85 c0                	test   eax,eax
c0029488:	75 0e                	jne    c0029498 <LinkedList<Device>::isEmpty()+0x18>
c002948a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002948e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029491:	85 c0                	test   eax,eax
c0029493:	75 03                	jne    c0029498 <LinkedList<Device>::isEmpty()+0x18>
c0029495:	b0 01                	mov    al,0x1
c0029497:	c3                   	ret    
c0029498:	b0 00                	mov    al,0x0
c002949a:	90                   	nop
c002949b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002949c <LinkedList<Device>::getFirstElement()>:
c002949c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00294a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00294a4 <LinkedList<Device>::removeFirst()>:
c00294a4:	83 ec 0c             	sub    esp,0xc
c00294a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ad:	85 c0                	test   eax,eax
c00294af:	75 15                	jne    c00294c6 <LinkedList<Device>::removeFirst()+0x22>
c00294b1:	83 ec 0c             	sub    esp,0xc
c00294b4:	68 ac ad 02 c0       	push   0xc002adac
c00294b9:	e8 4b 0e ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00294be:	83 c4 10             	add    esp,0x10
c00294c1:	e9 87 00 00 00       	jmp    c002954d <LinkedList<Device>::removeFirst()+0xa9>
c00294c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294cd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294d3:	85 c0                	test   eax,eax
c00294d5:	74 10                	je     c00294e7 <LinkedList<Device>::removeFirst()+0x43>
c00294d7:	83 ec 0c             	sub    esp,0xc
c00294da:	68 f7 ad 02 c0       	push   0xc002adf7
c00294df:	e8 25 0e ff ff       	call   c001a309 <Krnl::panic(char const*)>
c00294e4:	83 c4 10             	add    esp,0x10
c00294e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ed:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294f3:	85 c0                	test   eax,eax
c00294f5:	75 33                	jne    c002952a <LinkedList<Device>::removeFirst()+0x86>
c00294f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029505:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002950c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029510:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029513:	83 f8 01             	cmp    eax,0x1
c0029516:	74 24                	je     c002953c <LinkedList<Device>::removeFirst()+0x98>
c0029518:	83 ec 0c             	sub    esp,0xc
c002951b:	68 d0 ad 02 c0       	push   0xc002add0
c0029520:	e8 e4 0d ff ff       	call   c001a309 <Krnl::panic(char const*)>
c0029525:	83 c4 10             	add    esp,0x10
c0029528:	eb 12                	jmp    c002953c <LinkedList<Device>::removeFirst()+0x98>
c002952a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029530:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953a:	89 10                	mov    DWORD PTR [eax],edx
c002953c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029540:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029543:	8d 50 ff             	lea    edx,[eax-0x1]
c0029546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002954d:	83 c4 0c             	add    esp,0xc
c0029550:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029552 <CPU::~CPU()>:
c0029552:	83 ec 0c             	sub    esp,0xc
c0029555:	ba 5c c3 02 c0       	mov    edx,0xc002c35c
c002955a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955e:	89 10                	mov    DWORD PTR [eax],edx
c0029560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029564:	83 ec 0c             	sub    esp,0xc
c0029567:	50                   	push   eax
c0029568:	e8 6d a6 fe ff       	call   c0013bda <Device::~Device()>
c002956d:	83 c4 10             	add    esp,0x10
c0029570:	90                   	nop
c0029571:	83 c4 0c             	add    esp,0xc
c0029574:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029576 <CPU::~CPU()>:
c0029576:	83 ec 0c             	sub    esp,0xc
c0029579:	83 ec 0c             	sub    esp,0xc
c002957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029580:	e8 cd ff ff ff       	call   c0029552 <CPU::~CPU()>
c0029585:	83 c4 10             	add    esp,0x10
c0029588:	83 ec 08             	sub    esp,0x8
c002958b:	68 98 11 00 00       	push   0x1198
c0029590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029594:	e8 5a 92 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029599:	83 c4 10             	add    esp,0x10
c002959c:	83 c4 0c             	add    esp,0xc
c002959f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00295a0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00295a0:	90                   	nop
c00295a1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00295a2 <ThreadControlBlock::ThreadControlBlock()>:
c00295a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00295ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00295b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295bc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295d2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295dd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295e5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295e9:	90                   	nop
c00295ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295ec:	83 ec 0c             	sub    esp,0xc
c00295ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029608:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002960f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029613:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002962f:	83 ec 0c             	sub    esp,0xc
c0029632:	68 5a ad 02 c0       	push   0xc002ad5a
c0029637:	e8 97 92 fe ff       	call   c00128d3 <Dbg::kprintf(char const*, ...)>
c002963c:	83 c4 10             	add    esp,0x10
c002963f:	90                   	nop
c0029640:	83 c4 0c             	add    esp,0xc
c0029643:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029644 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029644:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029648:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002964b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002964c <Vm::_FPUState::_FPUState()>:
c002964c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029650:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029657:	90                   	nop
c0029658:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002965a <PCI::~PCI()>:
c002965a:	83 ec 0c             	sub    esp,0xc
c002965d:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0029662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029666:	89 10                	mov    DWORD PTR [eax],edx
c0029668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	50                   	push   eax
c0029670:	e8 35 9f fe ff       	call   c00135aa <Bus::~Bus()>
c0029675:	83 c4 10             	add    esp,0x10
c0029678:	90                   	nop
c0029679:	83 c4 0c             	add    esp,0xc
c002967c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002967e <PCI::~PCI()>:
c002967e:	83 ec 0c             	sub    esp,0xc
c0029681:	83 ec 0c             	sub    esp,0xc
c0029684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029688:	e8 cd ff ff ff       	call   c002965a <PCI::~PCI()>
c002968d:	83 c4 10             	add    esp,0x10
c0029690:	83 ec 08             	sub    esp,0x8
c0029693:	68 5c 01 00 00       	push   0x15c
c0029698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002969c:	e8 52 91 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00296a1:	83 c4 10             	add    esp,0x10
c00296a4:	83 c4 0c             	add    esp,0xc
c00296a7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00296a8 <IDE::~IDE()>:
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	ba 54 d7 02 c0       	mov    edx,0xc002d754
c00296b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b4:	89 10                	mov    DWORD PTR [eax],edx
c00296b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	50                   	push   eax
c00296be:	e8 2d aa fe ff       	call   c00140f0 <HardDiskController::~HardDiskController()>
c00296c3:	83 c4 10             	add    esp,0x10
c00296c6:	90                   	nop
c00296c7:	83 c4 0c             	add    esp,0xc
c00296ca:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296cc <IDE::~IDE()>:
c00296cc:	83 ec 0c             	sub    esp,0xc
c00296cf:	83 ec 0c             	sub    esp,0xc
c00296d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296d6:	e8 cd ff ff ff       	call   c00296a8 <IDE::~IDE()>
c00296db:	83 c4 10             	add    esp,0x10
c00296de:	83 ec 08             	sub    esp,0x8
c00296e1:	68 70 02 00 00       	push   0x270
c00296e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ea:	e8 04 91 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00296ef:	83 c4 10             	add    esp,0x10
c00296f2:	83 c4 0c             	add    esp,0xc
c00296f5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296f6 <SATABus::~SATABus()>:
c00296f6:	83 ec 0c             	sub    esp,0xc
c00296f9:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00296fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029702:	89 10                	mov    DWORD PTR [eax],edx
c0029704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029708:	83 ec 0c             	sub    esp,0xc
c002970b:	50                   	push   eax
c002970c:	e8 df a9 fe ff       	call   c00140f0 <HardDiskController::~HardDiskController()>
c0029711:	83 c4 10             	add    esp,0x10
c0029714:	90                   	nop
c0029715:	83 c4 0c             	add    esp,0xc
c0029718:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002971a <SATABus::~SATABus()>:
c002971a:	83 ec 0c             	sub    esp,0xc
c002971d:	83 ec 0c             	sub    esp,0xc
c0029720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029724:	e8 cd ff ff ff       	call   c00296f6 <SATABus::~SATABus()>
c0029729:	83 c4 10             	add    esp,0x10
c002972c:	83 ec 08             	sub    esp,0x8
c002972f:	68 64 01 00 00       	push   0x164
c0029734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029738:	e8 b6 90 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c002973d:	83 c4 10             	add    esp,0x10
c0029740:	83 c4 0c             	add    esp,0xc
c0029743:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029744 <ATA::~ATA()>:
c0029744:	83 ec 0c             	sub    esp,0xc
c0029747:	ba 80 d8 02 c0       	mov    edx,0xc002d880
c002974c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029750:	89 10                	mov    DWORD PTR [eax],edx
c0029752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	50                   	push   eax
c002975a:	e8 83 aa fe ff       	call   c00141e2 <PhysicalDisk::~PhysicalDisk()>
c002975f:	83 c4 10             	add    esp,0x10
c0029762:	90                   	nop
c0029763:	83 c4 0c             	add    esp,0xc
c0029766:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029768 <ATA::~ATA()>:
c0029768:	83 ec 0c             	sub    esp,0xc
c002976b:	83 ec 0c             	sub    esp,0xc
c002976e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029772:	e8 cd ff ff ff       	call   c0029744 <ATA::~ATA()>
c0029777:	83 c4 10             	add    esp,0x10
c002977a:	83 ec 08             	sub    esp,0x8
c002977d:	68 7c 01 00 00       	push   0x17c
c0029782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029786:	e8 68 90 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c002978b:	83 c4 10             	add    esp,0x10
c002978e:	83 c4 0c             	add    esp,0xc
c0029791:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029792 <ATAPI::~ATAPI()>:
c0029792:	83 ec 0c             	sub    esp,0xc
c0029795:	ba b8 d8 02 c0       	mov    edx,0xc002d8b8
c002979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979e:	89 10                	mov    DWORD PTR [eax],edx
c00297a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	50                   	push   eax
c00297a8:	e8 35 aa fe ff       	call   c00141e2 <PhysicalDisk::~PhysicalDisk()>
c00297ad:	83 c4 10             	add    esp,0x10
c00297b0:	90                   	nop
c00297b1:	83 c4 0c             	add    esp,0xc
c00297b4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297b6 <ATAPI::~ATAPI()>:
c00297b6:	83 ec 0c             	sub    esp,0xc
c00297b9:	83 ec 0c             	sub    esp,0xc
c00297bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c0:	e8 cd ff ff ff       	call   c0029792 <ATAPI::~ATAPI()>
c00297c5:	83 c4 10             	add    esp,0x10
c00297c8:	83 ec 08             	sub    esp,0x8
c00297cb:	68 80 01 00 00       	push   0x180
c00297d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d4:	e8 1a 90 fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00297d9:	83 c4 10             	add    esp,0x10
c00297dc:	83 c4 0c             	add    esp,0xc
c00297df:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297e0 <SATA::~SATA()>:
c00297e0:	83 ec 0c             	sub    esp,0xc
c00297e3:	ba 6c d9 02 c0       	mov    edx,0xc002d96c
c00297e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ec:	89 10                	mov    DWORD PTR [eax],edx
c00297ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f2:	83 ec 0c             	sub    esp,0xc
c00297f5:	50                   	push   eax
c00297f6:	e8 e7 a9 fe ff       	call   c00141e2 <PhysicalDisk::~PhysicalDisk()>
c00297fb:	83 c4 10             	add    esp,0x10
c00297fe:	90                   	nop
c00297ff:	83 c4 0c             	add    esp,0xc
c0029802:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029804 <SATA::~SATA()>:
c0029804:	83 ec 0c             	sub    esp,0xc
c0029807:	83 ec 0c             	sub    esp,0xc
c002980a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002980e:	e8 cd ff ff ff       	call   c00297e0 <SATA::~SATA()>
c0029813:	83 c4 10             	add    esp,0x10
c0029816:	83 ec 08             	sub    esp,0x8
c0029819:	68 7c 01 00 00       	push   0x17c
c002981e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029822:	e8 cc 8f fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029827:	83 c4 10             	add    esp,0x10
c002982a:	83 c4 0c             	add    esp,0xc
c002982d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002982e <SATAPI::~SATAPI()>:
c002982e:	83 ec 0c             	sub    esp,0xc
c0029831:	ba 48 da 02 c0       	mov    edx,0xc002da48
c0029836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002983a:	89 10                	mov    DWORD PTR [eax],edx
c002983c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	50                   	push   eax
c0029844:	e8 99 a9 fe ff       	call   c00141e2 <PhysicalDisk::~PhysicalDisk()>
c0029849:	83 c4 10             	add    esp,0x10
c002984c:	90                   	nop
c002984d:	83 c4 0c             	add    esp,0xc
c0029850:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029852 <SATAPI::~SATAPI()>:
c0029852:	83 ec 0c             	sub    esp,0xc
c0029855:	83 ec 0c             	sub    esp,0xc
c0029858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002985c:	e8 cd ff ff ff       	call   c002982e <SATAPI::~SATAPI()>
c0029861:	83 c4 10             	add    esp,0x10
c0029864:	83 ec 08             	sub    esp,0x8
c0029867:	68 80 01 00 00       	push   0x180
c002986c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029870:	e8 7e 8f fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029875:	83 c4 10             	add    esp,0x10
c0029878:	83 c4 0c             	add    esp,0xc
c002987b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002987c <AVX::~AVX()>:
c002987c:	83 ec 0c             	sub    esp,0xc
c002987f:	ba 88 da 02 c0       	mov    edx,0xc002da88
c0029884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029888:	89 10                	mov    DWORD PTR [eax],edx
c002988a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988e:	83 ec 0c             	sub    esp,0xc
c0029891:	50                   	push   eax
c0029892:	e8 cf a9 fe ff       	call   c0014266 <FPU::~FPU()>
c0029897:	83 c4 10             	add    esp,0x10
c002989a:	90                   	nop
c002989b:	83 c4 0c             	add    esp,0xc
c002989e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00298a0 <AVX::~AVX()>:
c00298a0:	83 ec 0c             	sub    esp,0xc
c00298a3:	83 ec 0c             	sub    esp,0xc
c00298a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298aa:	e8 cd ff ff ff       	call   c002987c <AVX::~AVX()>
c00298af:	83 c4 10             	add    esp,0x10
c00298b2:	83 ec 08             	sub    esp,0x8
c00298b5:	68 58 01 00 00       	push   0x158
c00298ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298be:	e8 30 8f fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00298c3:	83 c4 10             	add    esp,0x10
c00298c6:	83 c4 0c             	add    esp,0xc
c00298c9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298ca <MMX::~MMX()>:
c00298ca:	83 ec 0c             	sub    esp,0xc
c00298cd:	ba c8 da 02 c0       	mov    edx,0xc002dac8
c00298d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d6:	89 10                	mov    DWORD PTR [eax],edx
c00298d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	50                   	push   eax
c00298e0:	e8 81 a9 fe ff       	call   c0014266 <FPU::~FPU()>
c00298e5:	83 c4 10             	add    esp,0x10
c00298e8:	90                   	nop
c00298e9:	83 c4 0c             	add    esp,0xc
c00298ec:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298ee <MMX::~MMX()>:
c00298ee:	83 ec 0c             	sub    esp,0xc
c00298f1:	83 ec 0c             	sub    esp,0xc
c00298f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298f8:	e8 cd ff ff ff       	call   c00298ca <MMX::~MMX()>
c00298fd:	83 c4 10             	add    esp,0x10
c0029900:	83 ec 08             	sub    esp,0x8
c0029903:	68 58 01 00 00       	push   0x158
c0029908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002990c:	e8 e2 8e fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029911:	83 c4 10             	add    esp,0x10
c0029914:	83 c4 0c             	add    esp,0xc
c0029917:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029918 <SSE::~SSE()>:
c0029918:	83 ec 0c             	sub    esp,0xc
c002991b:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0029920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029924:	89 10                	mov    DWORD PTR [eax],edx
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	50                   	push   eax
c002992e:	e8 33 a9 fe ff       	call   c0014266 <FPU::~FPU()>
c0029933:	83 c4 10             	add    esp,0x10
c0029936:	90                   	nop
c0029937:	83 c4 0c             	add    esp,0xc
c002993a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002993c <SSE::~SSE()>:
c002993c:	83 ec 0c             	sub    esp,0xc
c002993f:	83 ec 0c             	sub    esp,0xc
c0029942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029946:	e8 cd ff ff ff       	call   c0029918 <SSE::~SSE()>
c002994b:	83 c4 10             	add    esp,0x10
c002994e:	83 ec 08             	sub    esp,0x8
c0029951:	68 58 01 00 00       	push   0x158
c0029956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002995a:	e8 94 8e fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c002995f:	83 c4 10             	add    esp,0x10
c0029962:	83 c4 0c             	add    esp,0xc
c0029965:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029966 <x87::~x87()>:
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	ba 48 db 02 c0       	mov    edx,0xc002db48
c002996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029972:	89 10                	mov    DWORD PTR [eax],edx
c0029974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	50                   	push   eax
c002997c:	e8 e5 a8 fe ff       	call   c0014266 <FPU::~FPU()>
c0029981:	83 c4 10             	add    esp,0x10
c0029984:	90                   	nop
c0029985:	83 c4 0c             	add    esp,0xc
c0029988:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002998a <x87::~x87()>:
c002998a:	83 ec 0c             	sub    esp,0xc
c002998d:	83 ec 0c             	sub    esp,0xc
c0029990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029994:	e8 cd ff ff ff       	call   c0029966 <x87::~x87()>
c0029999:	83 c4 10             	add    esp,0x10
c002999c:	83 ec 08             	sub    esp,0x8
c002999f:	68 58 01 00 00       	push   0x158
c00299a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a8:	e8 46 8e fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00299ad:	83 c4 10             	add    esp,0x10
c00299b0:	83 c4 0c             	add    esp,0xc
c00299b3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00299b4 <IOAPIC::~IOAPIC()>:
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c00299bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c0:	89 10                	mov    DWORD PTR [eax],edx
c00299c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	50                   	push   eax
c00299ca:	e8 0b a2 fe ff       	call   c0013bda <Device::~Device()>
c00299cf:	83 c4 10             	add    esp,0x10
c00299d2:	90                   	nop
c00299d3:	83 c4 0c             	add    esp,0xc
c00299d6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299d8 <IOAPIC::~IOAPIC()>:
c00299d8:	83 ec 0c             	sub    esp,0xc
c00299db:	83 ec 0c             	sub    esp,0xc
c00299de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e2:	e8 cd ff ff ff       	call   c00299b4 <IOAPIC::~IOAPIC()>
c00299e7:	83 c4 10             	add    esp,0x10
c00299ea:	83 ec 08             	sub    esp,0x8
c00299ed:	68 68 01 00 00       	push   0x168
c00299f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f6:	e8 f8 8d fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c00299fb:	83 c4 10             	add    esp,0x10
c00299fe:	83 c4 0c             	add    esp,0xc
c0029a01:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029a02 <APIC::~APIC()>:
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	ba 58 dc 02 c0       	mov    edx,0xc002dc58
c0029a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0e:	89 10                	mov    DWORD PTR [eax],edx
c0029a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	50                   	push   eax
c0029a18:	e8 13 ad fe ff       	call   c0014730 <InterruptController::~InterruptController()>
c0029a1d:	83 c4 10             	add    esp,0x10
c0029a20:	90                   	nop
c0029a21:	83 c4 0c             	add    esp,0xc
c0029a24:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a26 <APIC::~APIC()>:
c0029a26:	83 ec 0c             	sub    esp,0xc
c0029a29:	83 ec 0c             	sub    esp,0xc
c0029a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a30:	e8 cd ff ff ff       	call   c0029a02 <APIC::~APIC()>
c0029a35:	83 c4 10             	add    esp,0x10
c0029a38:	83 ec 08             	sub    esp,0x8
c0029a3b:	68 58 21 00 00       	push   0x2158
c0029a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a44:	e8 aa 8d fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029a49:	83 c4 10             	add    esp,0x10
c0029a4c:	83 c4 0c             	add    esp,0xc
c0029a4f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a50 <PIC::~PIC()>:
c0029a50:	83 ec 0c             	sub    esp,0xc
c0029a53:	ba f0 dc 02 c0       	mov    edx,0xc002dcf0
c0029a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5c:	89 10                	mov    DWORD PTR [eax],edx
c0029a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	50                   	push   eax
c0029a66:	e8 c5 ac fe ff       	call   c0014730 <InterruptController::~InterruptController()>
c0029a6b:	83 c4 10             	add    esp,0x10
c0029a6e:	90                   	nop
c0029a6f:	83 c4 0c             	add    esp,0xc
c0029a72:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a74 <PIC::~PIC()>:
c0029a74:	83 ec 0c             	sub    esp,0xc
c0029a77:	83 ec 0c             	sub    esp,0xc
c0029a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a7e:	e8 cd ff ff ff       	call   c0029a50 <PIC::~PIC()>
c0029a83:	83 c4 10             	add    esp,0x10
c0029a86:	83 ec 08             	sub    esp,0x8
c0029a89:	68 58 21 00 00       	push   0x2158
c0029a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a92:	e8 5c 8d fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029a97:	83 c4 10             	add    esp,0x10
c0029a9a:	83 c4 0c             	add    esp,0xc
c0029a9d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a9e <APICTimer::~APICTimer()>:
c0029a9e:	83 ec 0c             	sub    esp,0xc
c0029aa1:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0029aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aaa:	89 10                	mov    DWORD PTR [eax],edx
c0029aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	50                   	push   eax
c0029ab4:	e8 07 cd fe ff       	call   c00167c0 <Timer::~Timer()>
c0029ab9:	83 c4 10             	add    esp,0x10
c0029abc:	90                   	nop
c0029abd:	83 c4 0c             	add    esp,0xc
c0029ac0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ac2 <APICTimer::~APICTimer()>:
c0029ac2:	83 ec 0c             	sub    esp,0xc
c0029ac5:	83 ec 0c             	sub    esp,0xc
c0029ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029acc:	e8 cd ff ff ff       	call   c0029a9e <APICTimer::~APICTimer()>
c0029ad1:	83 c4 10             	add    esp,0x10
c0029ad4:	83 ec 08             	sub    esp,0x8
c0029ad7:	68 60 01 00 00       	push   0x160
c0029adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ae0:	e8 0e 8d fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029ae5:	83 c4 10             	add    esp,0x10
c0029ae8:	83 c4 0c             	add    esp,0xc
c0029aeb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029aec <PIT::~PIT()>:
c0029aec:	83 ec 0c             	sub    esp,0xc
c0029aef:	ba 94 dd 02 c0       	mov    edx,0xc002dd94
c0029af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af8:	89 10                	mov    DWORD PTR [eax],edx
c0029afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afe:	83 ec 0c             	sub    esp,0xc
c0029b01:	50                   	push   eax
c0029b02:	e8 b9 cc fe ff       	call   c00167c0 <Timer::~Timer()>
c0029b07:	83 c4 10             	add    esp,0x10
c0029b0a:	90                   	nop
c0029b0b:	83 c4 0c             	add    esp,0xc
c0029b0e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b10 <PIT::~PIT()>:
c0029b10:	83 ec 0c             	sub    esp,0xc
c0029b13:	83 ec 0c             	sub    esp,0xc
c0029b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b1a:	e8 cd ff ff ff       	call   c0029aec <PIT::~PIT()>
c0029b1f:	83 c4 10             	add    esp,0x10
c0029b22:	83 ec 08             	sub    esp,0x8
c0029b25:	68 5c 01 00 00       	push   0x15c
c0029b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2e:	e8 c0 8c fe ff       	call   c00127f3 <operator delete(void*, unsigned long)>
c0029b33:	83 c4 10             	add    esp,0x10
c0029b36:	83 c4 0c             	add    esp,0xc
c0029b39:	c3                   	ret    
